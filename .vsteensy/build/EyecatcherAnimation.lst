
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000f8a0 l    d  .fini	00000000 .fini
0000f8a4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001770 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000de84 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000c408 l     F .text.itcm	0000005c schedule_transfer
0000c464 l     F .text.itcm	00000030 run_callbacks
0000c494 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000c52c l     F .text.itcm	00000544 isr
2000df48 l     O .bss	00000004 endpointN_notify_mask
2000df50 l     O .bss	00000004 endpoint0_notify_mask
2000df54 l     O .bss	00000001 usb_reboot_timer
2000df58 l     O .bss	00000008 endpoint0_setupdata
2000df60 l     O .bss	00000008 reply_buffer
2000df68 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000e7dc l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000e7e0 l     O .bss	00000004 s_hotTemp
2000e7e4 l     O .bss	00000004 s_hot_ROOM
2000e7e8 l     O .bss	00000004 s_roomC_hotC
2000e7ec l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001770 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001774 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000321c l     F .text.itcm	00000958 Screen::iterate_animation() [clone .part.20]
000051d8 l     F .text.itcm	00005cf8 _GLOBAL__sub_I_bri_level
20003e70 l     O .bss	00001200 mask_B
200001c0 l     O .data	00000400 dim_curve
20000970 l     O .data	00000240 background_B
20009ef0 l     O .bss	00001200 mask_A
20000bb0 l     O .data	00000240 background_A
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
0000bbd4 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
0000b690 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000bd14 l     F .text.itcm	00000028 rx_event
0000bd3c l     F .text.itcm	00000070 usb_serial_flush_callback
0000bdac l     F .text.itcm	0000015c usb_serial_write.part.1
2000d5fc l     O .bss	00000700 txbuffer
2000dcfc l     O .bss	00000001 tx_noautoflush
2000dcfd l     O .bss	00000001 tx_head
2000dd00 l     O .bss	000000c0 rx_buffer
2000ddc0 l     O .bss	00000006 rx_index
2000ddc8 l     O .bss	00000006 rx_count
2000dde0 l     O .bss	00000060 rx_transfer
2000de40 l     O .bss	00000002 tx_available
2000de60 l     O .bss	000000e0 tx_transfer
2000df40 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000cc0c l     F .text.itcm	00000068 flash_wait
0000cc74 l     F .text.itcm	000000d0 flash_write.constprop.0
2000df74 l     O .bss	0000001e sector_index
2000df92 l     O .bss	00000001 initialized
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000d0e0 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000df8 l     O .data	0000000a qualifier_descriptor
20000e1c l     O .data	00000043 config_descriptor
20000e60 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 WString.cpp
0000d878 l     F .text.itcm	0000001a String::operator=(char const*) [clone .part.3]
00000000 l    df *ABS*	00000000 yield.cpp
2000dfb9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000da38 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000dfbc l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
2000dfc0 l     O .bss	00000400 tx_buffer1
200008d0 l     O .data	0000005c UART6_Hardware
2000e3c0 l     O .bss	00000400 rx_buffer1
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000f28 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015c0 l     F .text.progmem	00000008 __loop_veneer
600015c8 l     F .text.progmem	00000008 __setup_veneer
600015d0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015d8 l     F .text.progmem	00000008 __pwm_init_veneer
600015e0 l     F .text.progmem	00000008 __memset_veneer
600015e8 l     F .text.progmem	00000008 __yield_veneer
600015f0 l     F .text.progmem	00000008 __delay_veneer
600015f8 l     F .text.progmem	00000008 ____libc_init_array_veneer
0000f898 l     F .text.itcm	00000008 ___init_veneer
0000c030 g     F .text.itcm	00000014 usb_serial_available
0000f35c g     F .text.itcm	000000ba strcpy
0000d998  w    F .text.itcm	000000a0 yield
0000e250 g     F .text.itcm	000000a8 sqrt
2000178d g     O .bss	00000001 didPulse
2000df4c g     O .bss	00000004 usb_timer1_callback
20000e04 g     O .data	00000018 usb_string_manufacturer_name_default
2000df9c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000bb1c g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
20002c1c g     O .bss	00000004 sinceBeam
0000ddb8 g     F .text.itcm	00000020 Print::println()
0000dac8 g     F .text.itcm	00000014 random(long, long)
20002c18 g     O .bss	00000004 sinceCircle
0000bb7c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000ec5c g     F .text.itcm	00000002 __malloc_unlock
20005070 g     O .bss	00000004 speed_offset
60001458 g     F .text.progmem	00000058 analog_init
0000cd44 g     F .text.itcm	0000004c eeprom_initialize
20000df4 g     O .data	00000004 F_CPU_ACTUAL
0000d77c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000eaf4 g     F .text.itcm	000000c6 memmove
000010f8 g     F .text.itcm	00001b90 regular_setup()
0000dc54 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000d224 g     F .text.itcm	00000038 HardwareSerial::peek()
2000e7d4 g     O .bss	00000001 EventResponder::runningFromYield
2000d538 g     O .bss	000000c4 Alarm
0000dd40 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000e508 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000e7c0 g     O .bss	00000004 EventResponder::firstInterrupt
0000cbb8 g     F .text.itcm	00000028 usb_transfer_status
20000f08 g     O .data	00000001 usb_enable_serial_event_processing
20000ea8 g     O .data	00000060 Serial1
0000dd24  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200005c0 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
0000f8a0 g       .text.itcm	00000000 _etext
0000ba0c g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001770 g       .bss	00000000 _sbss
0000b718 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
0000d208 g     F .text.itcm	0000001c HardwareSerial::available()
60001610 g       *ABS*	00000000 _stextload
0000afc4 g     F .text.itcm	00000020 loop
20006838 g     O .bss	00001224 sat_automaton_B
20008ca4 g     O .bss	00000014 synapse_A
0000ca70 g     F .text.itcm	00000064 usb_config_rx
0000dae8  w    F .text.itcm	0000000c serialEvent1()
0000dbec g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000b7c4 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000d624 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000e7c4 g     O .bss	00000004 EventResponder::lastInterrupt
0000bbe0 g     F .text.itcm	00000134 memcpy
20008c9c g     O .bss	00000004 sinceIntro
0000d7a4 g     F .text.itcm	0000002c HardwareSerial::disableSerialEvents()
2000df98 g     O .bss	00000004 systick_millis_count
2000df70 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00000b88 g     F .text.itcm	00000534 updateCircles()
20000e04  w    O .data	00000018 usb_string_manufacturer_name
0000e564 g     F .text.itcm	00000010 malloc
20008cb8 g     O .bss	00000014 synapse_B
0000db88  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
200029bc g     O .bss	00000258 circles
60001268 g     F .text.progmem	000000ec usb_init
000005d0 g     F .text.itcm	000005b4 updateBeams()
2000e7f8 g     O .bss	00000004 __malloc_top_pad
0000cbe0 g     F .text.itcm	0000002c rtc_set
20010280 g     O .bss	00000004 systick_safe_read
00003b78 g     F .text.itcm	00001186 regular_animation()
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000964 g     O .data	00000000 .hidden __dso_handle
0000b73c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000d7e0 g     F .text.itcm	0000002a String::reserve(unsigned int)
0000f050 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000bfc0 g     F .text.itcm	0000004c usb_serial_getchar
2000e824 g     O .bss	00000008 usb_cdc_line_coding
0000d104 g     F .text.itcm	0000000a digitalWrite
2000e7cc g     O .bss	00000004 EventResponder::lastYield
0000aed0 g     F .text.itcm	000000f4 readMessages()
00004d00 g     F .text.itcm	000004d4 ceremony_animation()
2000e7f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d110 g     F .text.itcm	00000080 pinMode
0000d964 g     F .text.itcm	00000034 String::getBytes(unsigned char*, unsigned int, unsigned int) const
20007a64 g     O .bss	00000010 readBuffer
20280000 g       .bss	00000000 _heap_end
20008ca0 g     O .bss	00000004 implosionTimer
20007a5c g     O .bss	00000001 isRegularAnimation
20000f20 g     O .data	00000001 __fdlib_version
2000e7d0 g     O .bss	00000004 EventResponder::firstYield
20000960 g     O .data	00000004 _global_impure_ptr
0000ec70 g     F .text.itcm	000003de _realloc_r
0000e514 g     F .text.itcm	00000050 __libc_init_array
0000de8c  w    F .text.itcm	0000008c HardFault_HandlerC
200029b8 g     O .bss	00000001 screenFadeUpdateSwitcher
0000dd0c  w    F .text.itcm	00000004 usb_serial_class::clear()
0000df18 g     F .text.itcm	00000030 _sbrk
60010ebc g       *ABS*	00000000 _sdataload
2000e7d8 g     O .bss	00000004 MillisTimer::listWaiting
20000f1c g     O .data	00000004 __brkval
2000df41 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015a8 g     F .text.progmem	00000000 _init
0000bf08 g     F .text.itcm	00000002 usb_serial_reset
0000d7d0 g     F .text.itcm	0000000e String::~String()
0000ce00 g     F .text.itcm	000001ac eeprom_write_byte
20010700 g       .bss	00000000 _ebss
0000d1e8 g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
0000d8a8 g     F .text.itcm	00000070 String::append(char const*, unsigned int)
20008c98 g     O .bss	00000004 randomSeedN
0000e48c g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000b0f0 g     O .bss	00001224 bg_automaton_A
0000d80c g     F .text.itcm	00000042 String::copy(char const*, unsigned int)
0000b774 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
0000d564 g     F .text.itcm	000000c0 HardwareSerial::write9bit(unsigned long)
2000f000 g     O .bss	00000020 endpoint0_transfer_data
0000df98 g     F .text.itcm	000002b8 pwm_init
0000d2c8 g     F .text.itcm	0000001a HardwareSerial::flush()
0000d7d0 g     F .text.itcm	0000000e String::~String()
600013f4 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000ba68 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e82c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000cb6c g     F .text.itcm	00000028 usb_transmit
0000dcec g     F .text.itcm	00000020 systick_isr
20000f0c g     O .data	00000010 Serial
0000dadc g     F .text.itcm	0000000c IRQHandler_Serial1
2000dfb8 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
200008ac g     O .data	00000024 vtable for HardwareSerial
0000dd2c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000c00c g     F .text.itcm	00000024 usb_serial_peekchar
0000c17c g     F .text.itcm	0000028c set_arm_clock
2000df94 g     O .bss	00000004 systick_cycle_count
20000e90 g     O .data	00000016 usb_string_serial_number_default
0000f6c4 g     F .text.itcm	000001d0 _free_r
0000dd1c  w    F .text.itcm	00000004 usb_serial_class::flush()
20001760 g     O .data	00000004 __malloc_sbrk_base
0000dd14  w    F .text.itcm	00000004 usb_serial_class::read()
00000290 g     F .text.itcm	000000f4 newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])
0000cb3c g     F .text.itcm	0000002e usb_prepare_transfer
0000de74 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000df44 g     O .bss	00000004 usb_timer0_callback
0000dd34  w    F .text.itcm	0000000c serialEvent()
0000f584 g     F .text.itcm	000000a4 __register_exitproc
0000bb7c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000cd90 g     F .text.itcm	00000070 eeprom_read_byte
0000c044 g     F .text.itcm	0000003c usb_serial_flush_input
0000c080 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
0000f51c g     F .text.itcm	00000066 strncpy
2000e7fc g     O .bss	00000028 __malloc_current_mallinfo
20008ccc g     O .bss	00001224 grow_automaton_A
00000080  w    F .text.itcm	00000140 Screen::Screen()
0000ec60 g     F .text.itcm	00000010 realloc
00000388 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000e4fc g     F .text.itcm	0000000c __cxa_atexit
20005614 g     O .bss	00001224 sat_automaton_A
0000daf4 g     F .text.itcm	00000014 serial_event_check_serial1()
0000dac0 g     F .text.itcm	00000008 random(unsigned long)
2000092c  w    O .data	00000028 vtable for usb_serial_class
0000d850 g     F .text.itcm	00000026 String::String(char const*)
20003e5c g     O .bss	00000014 matrix_B
2000e7c8 g     O .bss	00000004 MillisTimer::listActive
2000178c g     O .bss	00000001 incomingByte
20001354 g     O .data	00000408 __malloc_av_
0000c110 g     F .text.itcm	0000006c usb_serial_flush_output
0000ec58 g     F .text.itcm	00000002 __malloc_lock
000010bc g     F .text.itcm	00000038 updateRandomSeed()
20010400 g     O .bss	000002c0 _VectorsRam
0000e49c g     F .text.itcm	0000005e _calloc_r
0000d938 g     F .text.itcm	0000002c String::equals(char const*) const
0000bb18 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
20000968 g     O .data	00000004 bri_level
0000ebbc g     F .text.itcm	0000009a memset
2000e7f0 g     O .bss	00000004 __malloc_max_total_mem
000001c0 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
00002c88 g     F .text.itcm	00000594 updateScreensFade()
0000e47c g     F .text.itcm	00000004 matherr
0000d190 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000e584 g     F .text.itcm	00000570 _malloc_r
0000db08 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20003e48 g     O .bss	00000014 matrix_A
0000d08c g     F .text.itcm	00000054 micros
0000f628 g     F .text.itcm	0000009c _malloc_trim_r
20001794 g     O .bss	00001224 fg_automaton_A
20000e8c g     O .data	00000004 string0
0000c0ac g     F .text.itcm	00000018 usb_serial_write
0000dd18  w    F .text.itcm	00000004 usb_serial_class::available()
0000f088 g     F .text.itcm	000002dc strcmp
0000bb70 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
20010000 g     O .bss	00000280 endpoint_queue_head
20000e74  w    O .data	00000016 usb_string_product_name
0000cfcc g     F .text.itcm	000000c0 delay
0000f8a0 g     F .fini	00000000 _fini
0000d894 g     F .text.itcm	00000014 String::operator=(char const*)
60001020 g     O .text.progmem	0000000c BootData
0000de58 g     F .text.itcm	00000016 Print::print(long)
2000c314 g     O .bss	00001224 bg_automaton_B
0000d850 g     F .text.itcm	00000026 String::String(char const*)
20001350 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
0000b9a4 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000dab4 g     F .text.itcm	0000000c randomSeed(unsigned long)
0000d628 g     F .text.itcm	00000152 HardwareSerial::IRQHandler()
0000b110 g     F .text.itcm	00000580 setup
20000840 g     O .data	0000006c usb_descriptor_list
20005268 g     O .bss	000001f4 screen_B
20007a74 g     O .bss	00001224 grow_automaton_B
20007a60 g     O .bss	00000004 sinceAutomatonInit
0000e2f8 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
20001790 g     O .bss	00000004 sinceCircleUpdate
0000c0c4 g     F .text.itcm	0000004c usb_serial_write_buffer_free
20002c24 g     O .bss	00001224 fg_automaton_B
20005074 g     O .bss	000001f4 screen_A
0000bf0c g     F .text.itcm	000000b4 usb_serial_configure
20001770 g       .data	00000000 _edata
0000b9e0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000dd20  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
2000096c g     O .data	00000004 freq_offset
0000d2e4 g     F .text.itcm	00000040 nvic_execution_priority()
0000ba5c g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000df48 g     F .text.itcm	0000004e ultoa
20002c14 g     O .bss	00000004 sinceBeamUpdate
2000545c g     O .bss	000001b8 beams
0000de70 g     F .text.itcm	00000004 operator new(unsigned int)
0000dba4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
2000175c g     O .data	00000004 __malloc_trim_threshold
0000dd10  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d25c g     F .text.itcm	0000006a HardwareSerial::read()
60001600 g       .text.progmem	00000000 __init_array_start
20000df0 g     O .data	00000004 F_BUS_ACTUAL
0000b9e0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20002c20 g     O .bss	00000001 didIntro
0000f440 g     F .text.itcm	000000dc strlen
20000e74 g     O .data	00000016 usb_string_product_name_default
0000afe8 g     F .text.itcm	00000124 readAnimationType()
0000dd6c g     F .text.itcm	0000004a Print::print(String const&)
60001354 g     F .text.progmem	000000a0 configure_cache
0000cfac g     F .text.itcm	0000001e eeprom_write_block
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000d324 g     F .text.itcm	00000240 HardwareSerial::begin(unsigned long, unsigned short)
60001600 g       .text.progmem	00000000 __preinit_array_start
0000cb94 g     F .text.itcm	00000024 usb_receive
0000b6f8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000d918 g     F .text.itcm	0000001e String::append(char)
0000b6f8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00012620 g       *ABS*	00000000 _flashimagelen
0000e480 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000dbe8 g     F .text.itcm	00000004 pendablesrvreq_isr
0000ddd8 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000cad4 g     F .text.itcm	00000068 usb_config_tx
0000e574 g     F .text.itcm	00000010 free
20000e90  w    O .data	00000016 usb_string_serial_number
00000080  w    F .text.itcm	00000140 Screen::Screen()



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...` &......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	60001354 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	600013f4 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015b8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001458 <analog_init>
	pwm_init();
600011be:	bl	600015d8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015c8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015c0 <__loop_veneer>
		yield();
600011da:	bl	600015e8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000f8a0
600011f8:	.word	0x20000000
600011fc:	.word	0x60010ebc
60001200:	.word	0x20001770
60001204:	.word	0x20001770
60001208:	.word	0x20010700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200103fc
60001214:	.word	0x0000de75
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000dbe9
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000dced
6000124c:	.word	0xe0001004
60001250:	.word	0x2000df94
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000df98
60001264:	.word	0x20010400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015d0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015f0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015e0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20010000
60001348:	.word	0x20010400
6000134c:	.word	0x0000c52d
60001350:	.word	0xe000e10c

60001354 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
60001354:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001356:	ldr	r2, [pc, #100]	; (600013bc <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001358:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000135a:	ldr	r3, [pc, #100]	; (600013c0 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000135c:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001360:	ldr	r0, [pc, #96]	; (600013c4 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001362:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001364:	ldr	r6, [pc, #96]	; (600013c8 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001366:	ldr	r5, [pc, #100]	; (600013cc <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001368:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000136a:	ldr	r7, [pc, #100]	; (600013d0 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000136c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001370:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001372:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001374:	ldr	r6, [pc, #92]	; (600013d4 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001376:	ldr	r5, [pc, #96]	; (600013d8 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001378:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000137a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000137c:	ldr	r7, [pc, #92]	; (600013dc <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000137e:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001380:	ldr	r6, [pc, #92]	; (600013e0 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001382:	ldr	r5, [pc, #96]	; (600013e4 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001384:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001386:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001388:	ldr	r7, [pc, #92]	; (600013e8 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000138a:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000138c:	ldr	r6, [pc, #92]	; (600013ec <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000138e:	ldr	r5, [pc, #96]	; (600013f0 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001390:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001392:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001394:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001398:	dsb	sy
	asm("isb");
6000139c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013a0:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013a4:	dsb	sy
	asm("isb");
600013a8:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013ac:	ldr.w	r3, [r2, #-136]
600013b0:	orr.w	r3, r3, #196608	; 0x30000
600013b4:	str.w	r3, [r2, #-136]
600013b8:	pop	{r4, r5, r6, r7, pc}
600013ba:	nop
600013bc:	.word	0xe000ed9c
600013c0:	.word	0xe000eda0
600013c4:	.word	0xe000ed94
600013c8:	.word	0x03080025
600013cc:	.word	0x00200011
600013d0:	.word	0x07020021
600013d4:	.word	0x20000012
600013d8:	.word	0x13080025
600013dc:	.word	0x20200013
600013e0:	.word	0x130b0027
600013e4:	.word	0x40000014
600013e8:	.word	0x13100033
600013ec:	.word	0x60000015
600013f0:	.word	0x070b002f

600013f4 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
600013f4:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	tst.w	r3, #2
60001414:	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	tst.w	r3, #2
60001422:	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	tst.w	r3, #8192	; 0x2000
60001428:	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	str	r5, [r2, #20]
			continue;
6000142c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	tst.w	r3, #4096	; 0x1000
60001432:	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	str	r6, [r2, #20]
			continue;
60001436:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	cmp	r3, #0
6000143a:	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	tst.w	r3, #65536	; 0x10000
60001440:	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	str	r1, [r2, #24]
			continue;
60001444:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	lsls	r3, r3, #25
60001448:	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	str	r7, [r2, #20]
			continue;
6000144c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	pop	{r4, r5, r6, r7}
60001450:	bx	lr
60001452:	nop
60001454:	.word	0x400d8000

60001458 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001458:	ldr	r3, [pc, #68]	; (600014a0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000145a:	ldr	r1, [pc, #72]	; (600014a4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000145c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000145e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001460:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001464:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001466:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001468:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000146c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000146e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001470:	orr.w	r0, r0, #768	; 0x300
60001474:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001476:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001478:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000147a:	ldr	r3, [r2, #72]	; 0x48
6000147c:	lsls	r3, r3, #24
6000147e:	bmi.n	6000147a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001480:	ldr	r3, [pc, #36]	; (600014a8 <analog_init+0x50>)
60001482:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001486:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001488:	ldr	r2, [pc, #24]	; (600014a4 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000148c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000148e:	ldr	r3, [r2, #72]	; 0x48
60001490:	ands.w	r3, r3, #128	; 0x80
60001494:	bne.n	6000148e <analog_init+0x36>
	calibrating = 0;
60001496:	ldr	r2, [pc, #20]	; (600014ac <analog_init+0x54>)
60001498:	strb	r3, [r2, #0]
}
6000149a:	pop	{r4, r5}
6000149c:	bx	lr
6000149e:	nop
600014a0:	.word	0x400fc000
600014a4:	.word	0x400c4000
600014a8:	.word	0x400c8000
600014ac:	.word	0x2000e7dc

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000e7e8
60001598:	.word	0x2000e7e4
6000159c:	.word	0x2000e7ec
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000e7e0

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__set_arm_clock_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__set_arm_clock_veneer+0x4>
600015bc:	.word	0x0000c17d

600015c0 <__loop_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__loop_veneer+0x4>
600015c4:	.word	0x0000afc5

600015c8 <__setup_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__setup_veneer+0x4>
600015cc:	.word	0x0000b111

600015d0 <__usb_init_serialnumber_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__usb_init_serialnumber_veneer+0x4>
600015d4:	.word	0x0000d191

600015d8 <__pwm_init_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__pwm_init_veneer+0x4>
600015dc:	.word	0x0000df99

600015e0 <__memset_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__memset_veneer+0x4>
600015e4:	.word	0x0000ebbd

600015e8 <__yield_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__yield_veneer+0x4>
600015ec:	.word	0x0000d999

600015f0 <__delay_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__delay_veneer+0x4>
600015f4:	.word	0x0000cfcd

600015f8 <____libc_init_array_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <____libc_init_array_veneer+0x4>
600015fc:	.word	0x0000e515

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x000051d9
60001608:	.word	0x0000bbd5

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r6, #29
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x0000f8a4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r6, #29
      6e:	.short	0x2000
      70:	strh.w	r0, [r4]
      74:	asrs	r0, r6, #29
      76:	movs	r0, #0
	...

00000080 <Screen::Screen()>:
      80:	.word	0x41f0e92d
      84:	ldr	r4, [pc, #304]	; (1b8 <Screen::Screen()+0x138>)
      86:	mov	r6, r0
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r5, r0
      8a:	.short	0x2702
      8c:	mov.w	r8, #1
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	.word	0xc50fcc0f
      94:	ldmia.w	r4, {r0, r1}
      98:	.word	0xe88522a8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      9c:	movs	r3, r0
      9e:	add.w	r1, r4, #8
      a2:	.short	0xf106
      a4:	movs	r0, r3
      a6:	.short	0xf00b
      a8:	ldc2	1, cr15, [fp, #16]
      ac:	lsls	r0, r6, #6
      ae:	add.w	r4, r4, #344	; 0x158
      b2:	movs	r2, #168	; 0xa8
      b4:	add.w	r0, r6, #192	; 0xc0
      b8:	.word	0xf00b2503
      bc:	ldc2	5, cr15, [r1, #24]
      c0:	strb	r4, [r6, #14]
      c2:	ldmia.w	r4, {r0, r1, r2}
      c6:	.short	0xe883
      c8:	movs	r7, r0
      ca:	movs	r2, #60	; 0x3c
      cc:	movs	r1, #0
      ce:	add.w	r0, r6, #372	; 0x174
      d2:	bl	ebbc <memset>
      d6:	movs	r3, #5
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      d8:	mov	r1, r5
      da:	mov	r0, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      dc:	str.w	r3, [r6, #372]	; 0x174
      e0:	.word	0x7180f8c6
      e4:	str.w	r8, [r6, #376]	; 0x178
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      e8:	.word	0xfceef00d
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      ec:	str.w	r5, [r6, #396]	; 0x18c
      f0:	.word	0x0184f8c6
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      f4:	movs	r1, #4
      f6:	mov	r0, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      f8:	.word	0xf00d2700
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      fc:	stc2l	1, cr2, [r5], #40	; 0x28
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     100:	str.w	r0, [r6, #400]	; 0x190

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{LINE, random(3, 10), false}
     104:	.word	0xf8c64628
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     108:	strh	r0, [r3, #12]

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{LINE, random(3, 10), false}
     10a:	.short	0xf00d
     10c:	ldc2l	11, cr4, [sp], {43}	; 0x2b
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     110:	.word	0x461d2200
     114:	str.w	r2, [r6, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     118:	.word	0x6a996a5c
     11c:	str.w	r0, [r6, #412]	; 0x19c
     120:	str.w	r7, [r6, #468]	; 0x1d4
     124:	str.w	r2, [r6, #464]	; 0x1d0
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     128:	.word	0x6aab6a6a
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     12c:	cmp	r3, r1
     12e:	.short	0xbf08
     130:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     132:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     134:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     136:	ite	eq
     138:	moveq	r0, #1
     13a:	movne	r0, #0
     13c:	cmp	r0, #0
     13e:	beq.n	128 <Screen::Screen()+0xa8>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
     140:	lsrs	r1, r3, #5
     142:	mov.w	r0, #1728	; 0x6c0
     146:	orr.w	r1, r1, r2, lsl #27
     14a:	vmov	s15, r1
     14e:	vldr	d5, [pc, #96]	; 1b0 <Screen::Screen()+0x130>
     152:	.short	0xeeb8
     154:	ldrb	r7, [r4, #13]
     156:	.short	0xee87
     158:	ldr	r5, [r0, #48]	; 0x30
     15a:	vcvt.u32.f64	s12, d6
     15e:	vstr	s12, [r6, #476]	; 0x1dc
     162:	bl	de70 <operator new(unsigned int)>
     166:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     168:	mov.w	r2, #1728	; 0x6c0
     16c:	.word	0xf00e2100
     170:	stc2	8, cr15, [r5, #-792]!	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     174:	rors	r0, r5
     176:	mov.w	r0, #1728	; 0x6c0
     17a:	bl	de70 <operator new(unsigned int)>
     17e:	mov	r4, r0
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     180:	mov.w	r2, #1728	; 0x6c0
     184:	.word	0xf00e2100
     188:	ldc2	8, cr15, [r9, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     18c:	.word	0xf44f41ec
     190:	str	r0, [r3, #12]
     192:	bl	de70 <operator new(unsigned int)>
     196:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     198:	mov.w	r2, #1728	; 0x6c0
     19c:	.word	0xf00e2100
     1a0:	stc2	8, cr15, [sp, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     1a4:	.word	0x463041f0
     1a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1ac:	nop.w
     1b0:	.word	0xd2f1a9fc
     1b4:	str	r5, [r1, #36]	; 0x24
     1b6:	.short	0x3ff0
     1b8:	movs	r0, r0
     1ba:	.short	0x2000
     1bc:	ands	r0, r0
     1be:	.short	0x400d

000001c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1c0:	sub	sp, #8
     1c2:	.short	0x4684
     1c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     1c8:	.word	0xb0852400
     1cc:	mov	lr, r1
     1ce:	.short	0x4e2e
     1d0:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     1d2:	.short	0x4625

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1d4:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     1d8:	.word	0x342c5d33
     1dc:	ldr	r2, [pc, #168]	; (288 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     1de:	cbz	r3, 1f2 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x32>
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     1e0:	.word	0x2d0a3501
     1e4:	bne.n	1d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     1e6:	.short	0x2000
}
     1e8:	add	sp, #20
     1ea:	.short	0xe8bd
     1ec:	mvns	r0, r6
     1ee:	.short	0xb002
     1f0:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     1f2:	.short	0x232c
     1f4:	movs	r1, #1
     1f6:	mov	r7, sp
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1f8:	.word	0x8090f8df
     1fc:	mul.w	r3, r3, r5
     200:	.word	0x0903eb02
     204:	strb	r1, [r2, r3]
     206:	.short	0xab0c
	strip = _strip;
     208:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     20c:	.word	0x040cf109

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     210:	strb.w	lr, [r9, #8]
     214:	.word	0xc707cb0f
     218:	strh	r3, [r7, #0]
	color = _color;
     21a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     21c:	mov	r7, r8
     21e:	.short	0xe913
     220:	movs	r7, r1
     222:	.short	0xc407
     224:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     226:	.short	0x9b10
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     228:	vstr	s0, [r9, #28]
	duration = _duration;
     22c:	.word	0x3020f8c9
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     230:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     234:	.word	0x1028f8d8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     238:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     23a:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     23c:	.word	0xbf08428b
     240:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     242:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     244:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     246:	.short	0xbf0c
     248:	moveq	r0, #1
     24a:	movne	r0, #0
     24c:	.word	0xd0f32800
	startTime = rtcMillis();
     250:	lsrs	r1, r3, #5
     252:	movs	r3, #44	; 0x2c
     254:	orr.w	r1, r1, r2, lsl #27
     258:	mla	r5, r3, r5, r6
     25c:	vmov	s15, r1
     260:	vldr	d5, [pc, #28]	; 280 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc0>
     264:	vcvt.f64.u32	d7, s15
     268:	vdiv.f64	d6, d7, d5
     26c:	vcvt.u32.f64	s12, d6
     270:	vstr	s12, [r5, #36]	; 0x24
     274:	.word	0xe8bdb005
     278:	mvns	r0, r6
     27a:	add	sp, #8
     27c:	bx	lr
     27e:	nop
     280:	add	r1, sp, #1008	; 0x3f0
     282:	bcs.n	268 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xa8>
     284:	.word	0x3ff0624d
     288:	strb	r4, [r3, r1]
     28a:	.short	0x2000
     28c:	ands	r0, r0
     28e:	.short	0x400d

00000290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>:

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     290:	sub	sp, #16
     292:	.short	0xe92d
     294:	ldr	r7, [pc, #960]	; (658 <updateBeams()+0x88>)
     296:	.short	0x2400
     298:	sub	sp, #20
     29a:	.short	0x4e35
     29c:	add.w	lr, sp, #60	; 0x3c
	for (int i = 0; i < CIRCLE_AM; i++) {
     2a0:	.word	0xe88e4625

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     2a4:	movs	r6, r1
	for (int i = 0; i < CIRCLE_AM; i++) {
		if (!circles[i].active) {
     2a6:	.short	0x5d33
     2a8:	adds	r4, #60	; 0x3c
     2aa:	.short	0x4a31
     2ac:	cbz	r3, 2c0 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0x30>
elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
	for (int i = 0; i < CIRCLE_AM; i++) {
     2ae:	.short	0x3501
     2b0:	cmp	r5, #10
     2b2:	bne.n	2a6 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0x16>
		if (!circles[i].active) {
			circles[i].begin(_strip, SIZE_SCREEN / 2, SIZE_SCREEN / 2, _c, 2, 35, -3, _duration, _mask);
			return true;
		}
	}
	return false;
     2b4:	.word	0xb0052000
}
     2b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2bc:	.word	0x4770b004
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c0:	lsls	r7, r5, #4
     2c2:	.short	0x2101
		strip = _strip;
		pos.x = x;
     2c4:	ldr	r3, [pc, #172]	; (374 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xe4>)
     2c6:	.short	0x46e8
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c8:	subs	r4, r7, r5
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     2ca:	.short	0xf04f
     2cc:	ldr	r3, [pc, #512]	; (4d0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x148>)
		BSize = _BSize;
		ESize = _ESize;
     2ce:	.short	0xf8df
     2d0:	str	r0, [sp, #688]	; 0x2b0
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d2:	.short	0x00a4
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     2d4:	ldr.w	sl, [pc, #168]	; 380 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xf0>
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d8:	.word	0x44145511
		strip = _strip;
     2dc:	str	r0, [r4, #4]
		pos.x = x;
		pos.y = y;
		color = _color;
     2de:	.short	0xf104
     2e0:	lsrs	r0, r4, #16
	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
		strip = _strip;
		pos.x = x;
     2e2:	.short	0x60e3
		pos.y = y;
     2e4:	str	r3, [r4, #16]
     2e6:	.short	0xe89e
     2e8:	movs	r7, r1
     2ea:	stmia.w	r8!, {r0, r1, r2}
     2ee:	.short	0xf8a8
     2f0:	adds	r0, #0
		color = _color;
     2f2:	.short	0xab04
     2f4:	ldmdb	r3, {r0, r1, r2, r3}
     2f8:	.word	0x0007e8ac
     2fc:	strh.w	r3, [ip]
		borderSize = _borderSize;
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
     300:	.word	0x4a1d9b13
     304:	str	r3, [r4, #48]	; 0x30
        mask = _mask;
     306:	.short	0x9b14
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     308:	mov	lr, r2
		active = true;
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     30a:	.short	0xf8c4
     30c:	add	sp, #224	; 0xe0
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
        mask = _mask;
     30e:	.short	0x60a3
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     310:	str.w	sl, [r4, #24]
		ESize = _ESize;
     314:	.word	0x901cf8c4
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     318:	ldr	r4, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     31a:	.short	0x6a91
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     31c:	ldr.w	r2, [lr, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     320:	.word	0x3028f8de
    if (lo1 == lo2 && hi1 == hi2) {
     324:	cmp	r3, r1
     326:	.short	0xbf08
     328:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     32a:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     32c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     32e:	.short	0xbf0c
     330:	moveq	r0, #1
     332:	.short	0x2000
     334:	cmp	r0, #0
     336:	.short	0xd0f1
		duration = _duration;
        mask = _mask;
		startTime = rtcMillis();
     338:	lsrs	r1, r3, #5
     33a:	.short	0x1b7d
     33c:	orr.w	r1, r1, r2, lsl #27
     340:	.word	0x0685eb06
     344:	vmov	s15, r1
     348:	.word	0x5b07ed9f
     34c:	vcvt.f64.u32	d7, s15
     350:	.word	0x6b05ee87
     354:	vcvt.u32.f64	s12, d6
     358:	.word	0x6a0ded86
     35c:	add	sp, #20
     35e:	.short	0xe8bd
     360:	ldr	r7, [pc, #960]	; (724 <updateBeams()+0x154>)
     362:	.short	0xb004
     364:	bx	lr	; unpredictable branch in IT block

     366:	.short	0xbf00
     368:	.word	0xd2f1a9fc
     36c:	.word	0x3ff0624d
     370:	.word	0x200029bc
     374:	.word	0x41400000
     378:	.word	0x400d4000
     37c:	.word	0xc0400000
     380:	.word	0x420c0000
     384:	.word	0x00000000

00000388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     388:	sub	sp, #8
     38a:	stmdbne	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38e:	sub	sp, #20
	int colInt = strip->getPixelColor(pixel);
     390:	uxth	r6, r1
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     392:	mov	r8, r0
     394:	ldrb.w	r4, [sp, #65]	; 0x41
	int colInt = strip->getPixelColor(pixel);
     398:	mov	r1, r6
     39a:	ldrb.w	r9, [sp, #68]	; 0x44
     39e:	str	r4, [sp, #4]
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     3a0:	add	r4, sp, #56	; 0x38
     3a2:	ldrb.w	r5, [sp, #64]	; 0x40
     3a6:	stmia.w	r4, {r2, r3}
     3aa:	ldrb.w	sl, [sp, #56]	; 0x38
     3ae:	ldrb.w	r4, [sp, #57]	; 0x39
     3b2:	ldrb.w	fp, [sp, #58]	; 0x3a
     3b6:	ldr	r7, [sp, #60]	; 0x3c
	int colInt = strip->getPixelColor(pixel);
     3b8:	bl	ba68 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     3bc:	str	r0, [sp, #12]
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3be:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     3c2:	cmp.w	r9, #0
     3c6:	beq.n	40c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     3c8:	add	sl, r0
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3ca:	ldrb.w	r2, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ce:	ldrb.w	r5, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3d2:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3d4:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3d6:	cmp.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3da:	add.w	r3, r5, fp

	strip->setPixelColor(pixel, *(int*)getCol);
     3de:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3e0:	it	ge
     3e2:	movge.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3e6:	cmp	r4, #255	; 0xff
     3e8:	it	ge
     3ea:	movge	r4, #255	; 0xff
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ec:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3ee:	strb.w	sl, [sp, #14]
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3f2:	it	ge
     3f4:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3f6:	strb.w	r4, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3fa:	strb.w	r3, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3fe:	ldr	r2, [sp, #12]
}
     400:	add	sp, #20
     402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     406:	add	sp, #8
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);

	strip->setPixelColor(pixel, *(int*)getCol);
     408:	b.w	ba5c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     40c:	ldr	r3, [sp, #4]
     40e:	cmp	r3, #99	; 0x63
     410:	bgt.n	48e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     412:	vmov	s15, r3
     416:	vldr	d6, [pc, #424]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     41a:	vcvt.f64.s32	d7, s15
     41e:	vmul.f64	d7, d7, d6
     422:	vcvt.u32.f64	s15, d7
     426:	vstr	s15, [sp, #4]
     42a:	ldrb.w	sl, [sp, #4]
     42e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     430:	cbz	r5, 498 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     432:	cmp	r5, #99	; 0x63
     434:	bgt.n	49c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     436:	vmov	s15, r5
     43a:	vldr	d6, [pc, #388]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     43e:	vcvt.f64.s32	d7, s15
     442:	vmul.f64	d7, d7, d6
     446:	vcvt.s32.f64	s15, d7
     44a:	vmov	r2, s15
     44e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     452:	ldr	r4, [pc, #372]	; (5c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     454:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     456:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     45a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     45e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     462:	adds	r4, r7, r5
     464:	mov.w	r5, #360	; 0x168
     468:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     46c:	ldr	r4, [pc, #348]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     46e:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     472:	smull	r3, r4, r4, r1
     476:	asrs	r5, r1, #31
     478:	add	r4, r1
     47a:	rsb	r4, r5, r4, asr #5
     47e:	cmp	r4, #5
     480:	bhi.w	5b6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     484:	tbb	[pc, r4]
     488:	.word	0x415b7588
     48c:	.short	0x0c27
     48e:	mov.w	sl, #254	; 0xfe
     492:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     494:	cmp	r5, #0
     496:	bne.n	432 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     498:	mov	r4, sl
     49a:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     49c:	movs	r2, #1
     49e:	b.n	452 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     4a0:	ldr	r7, [pc, #296]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4a2:	rsb	r3, r2, sl
     4a6:	smull	r4, lr, r7, r1
     4aa:	mov	r4, r2
     4ac:	add	lr, r1
     4ae:	rsb	r5, r5, lr, asr #5
     4b2:	rsb	r5, r5, r5, lsl #4
     4b6:	sub.w	r1, r1, r5, lsl #2
     4ba:	rsb	r1, r1, #60	; 0x3c
     4be:	mul.w	r3, r1, r3
     4c2:	smull	r1, r7, r7, r3
     4c6:	asrs	r1, r3, #31
     4c8:	add	r3, r7
     4ca:	rsb	r3, r1, r3, asr #5
     4ce:	add	r3, r2
     4d0:	uxtb.w	fp, r3
     4d4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     4d6:	ldr	r7, [pc, #244]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4d8:	rsb	sl, r2, sl
     4dc:	mov	r4, r2
     4de:	smull	r3, lr, r7, r1
     4e2:	add	lr, r1
     4e4:	rsb	r5, r5, lr, asr #5
     4e8:	rsb	r5, r5, r5, lsl #4
     4ec:	sub.w	r1, r1, r5, lsl #2
     4f0:	mul.w	r1, r1, sl
     4f4:	smull	r3, r7, r7, r1
     4f8:	mov.w	sl, r1, asr #31
     4fc:	add	r1, r7
     4fe:	rsb	r1, sl, r1, asr #5
     502:	add	r2, r1
     504:	uxtb.w	sl, r2
     508:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     50a:	ldr	r7, [pc, #192]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     50c:	rsb	lr, r2, sl
     510:	mov	sl, r2
     512:	smull	r3, r4, r7, r1
     516:	add	r4, r1
     518:	rsb	r5, r5, r4, asr #5
     51c:	rsb	r5, r5, r5, lsl #4
     520:	sub.w	r1, r1, r5, lsl #2
     524:	rsb	r4, r1, #60	; 0x3c
     528:	mul.w	r1, r4, lr
     52c:	smull	r3, r7, r7, r1
     530:	asrs	r4, r1, #31
     532:	add	r1, r7
     534:	rsb	r4, r4, r1, asr #5
     538:	add	r4, r2
     53a:	uxtb	r4, r4
     53c:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     53e:	ldr	r7, [pc, #140]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     540:	rsb	lr, r2, sl
     544:	mov	r4, sl
     546:	mov	sl, r2
     548:	smull	ip, r3, r7, r1
     54c:	add	r3, r1
     54e:	rsb	r5, r5, r3, asr #5
     552:	rsb	r5, r5, r5, lsl #4
     556:	sub.w	r1, r1, r5, lsl #2
     55a:	mul.w	r1, r1, lr
     55e:	smull	r3, r7, r7, r1
     562:	asrs	r3, r1, #31
     564:	add	r1, r7
     566:	rsb	r3, r3, r1, asr #5
     56a:	add	r3, r2
     56c:	uxtb.w	fp, r3
     570:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     572:	ldr	r7, [pc, #88]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     574:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     578:	mov	r4, sl
      output.g = bri;
      output.b = base;
     57a:	mov	fp, r2
     57c:	smull	r3, ip, r7, r1
     580:	add	ip, r1
     582:	rsb	r5, r5, ip, asr #5
     586:	rsb	r5, r5, r5, lsl #4
     58a:	sub.w	r5, r1, r5, lsl #2
     58e:	rsb	r5, r5, #60	; 0x3c
     592:	mul.w	r1, r5, lr
     596:	b.n	4f4 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     598:	rsb	r3, r2, sl
     59c:	ldr	r5, [pc, #44]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     59e:	mov	fp, r2
     5a0:	mul.w	r1, r1, r3
     5a4:	smull	r3, r5, r5, r1
     5a8:	asrs	r4, r1, #31
     5aa:	add	r1, r5
     5ac:	rsb	r1, r4, r1, asr #5
     5b0:	adds	r4, r2, r1
     5b2:	uxtb	r4, r4
     5b4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5b6:	mov.w	sl, #0
     5ba:	mov	r4, sl
     5bc:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5be:	nop
     5c0:	.word	0x66666666
     5c4:	.word	0x40046666
     5c8:	.word	0xb60b60b7
     5cc:	.word	0x88888889

000005d0 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     5d0:	ldr	r3, [pc, #804]	; (8f8 <updateBeams()+0x328>)

void updateBeams() {
     5d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5d8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     5da:	ldr	r1, [r3, #40]	; 0x28
     5dc:	vpush	{d8-d10}
     5e0:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     5e4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e6:	ldr	r6, [pc, #784]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     5e8:	cmp	r3, r1
     5ea:	it	eq
     5ec:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5ee:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     5f0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     5f2:	ite	eq
     5f4:	moveq	r5, #1
     5f6:	movne	r5, #0
     5f8:	cmp	r5, #0
     5fa:	beq.n	5e2 <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     5fc:	lsrs	r1, r3, #5
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     5fe:	ldr	r4, [pc, #764]	; (8fc <updateBeams()+0x32c>)
     600:	orr.w	r1, r1, r2, lsl #27
     604:	ldr	r3, [r4, #0]
     606:	vmov	s15, r1
     60a:	vldr	d5, [pc, #732]	; 8e8 <updateBeams()+0x318>
     60e:	vcvt.f64.u32	d7, s15
     612:	vdiv.f64	d6, d7, d5
     616:	vcvt.u32.f64	s12, d6
     61a:	vmov	r2, s12
     61e:	subs	r3, r2, r3
     620:	cmp	r3, #24
     622:	ble.w	9e2 <updateBeams()+0x412>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     626:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     628:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     62a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     62c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     62e:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     630:	ldr	r7, [pc, #708]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     632:	cmp	r3, r1
     634:	it	eq
     636:	cmpeq	r2, r5
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    }
    hi1 = hi2;
     638:	mov	r5, r2
    lo1 = lo2;
     63a:	mov	r1, r3
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     63c:	ite	eq
     63e:	moveq	r6, #1
     640:	movne	r6, #0
     642:	cmp	r6, #0
     644:	beq.n	62c <updateBeams()+0x5c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     646:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     648:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     64a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     64c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     64e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     650:	cmp	r3, r1
     652:	it	eq
     654:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     656:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     658:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     65a:	ite	eq
     65c:	moveq	r6, #1
     65e:	movne	r6, #0
     660:	cmp	r6, #0
     662:	beq.n	64c <updateBeams()+0x7c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     664:	lsrs	r1, r3, #5
     666:	ldr	r7, [pc, #664]	; (900 <updateBeams()+0x330>)
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     668:	ldr	r0, [pc, #664]	; (904 <updateBeams()+0x334>)
     66a:	orr.w	r1, r1, r2, lsl #27
     66e:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     672:	ldr.w	fp, [pc, #644]	; 8f8 <updateBeams()+0x328>
  synapse_B.clear();
     676:	mov	sl, r7
     678:	vmov	s15, r1
     67c:	vldr	d8, [pc, #616]	; 8e8 <updateBeams()+0x318>
     680:	vcvt.f64.u32	d7, s15
     684:	vldr	d9, [pc, #616]	; 8f0 <updateBeams()+0x320>
     688:	vdiv.f64	d6, d7, d8
     68c:	vcvt.u32.f64	s12, d6
     690:	vstr	s12, [r4]
void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     694:	bl	bb70 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     698:	ldr	r0, [pc, #620]	; (908 <updateBeams()+0x338>)
     69a:	bl	bb70 <Adafruit_NeoPixel::clear()>
     69e:	b.n	6aa <updateBeams()+0xda>
     6a0:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     6a4:	cmp	sl, r9
     6a6:	beq.w	990 <updateBeams()+0x3c0>
    if (beams[i].active) {
     6aa:	ldrb.w	r3, [sl, #-36]
     6ae:	cmp	r3, #0
     6b0:	beq.n	6a0 <updateBeams()+0xd0>
     6b2:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     6b6:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ba:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     6be:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6c2:	ldr	r7, [pc, #564]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     6c4:	cmp	r3, r1
     6c6:	it	eq
     6c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     6cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     6ce:	ite	eq
     6d0:	moveq	r4, #1
     6d2:	movne	r4, #0
     6d4:	cmp	r4, #0
     6d6:	beq.n	6ba <updateBeams()+0xea>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     6d8:	lsrs	r1, r3, #5
     6da:	ldr.w	r5, [sl]
     6de:	ldr.w	r6, [sl, #-4]
     6e2:	orr.w	r1, r1, r2, lsl #27
     6e6:	adds	r3, r6, r5
     6e8:	vmov	s15, r1
     6ec:	vcvt.f64.u32	d7, s15
     6f0:	vdiv.f64	d6, d7, d8
     6f4:	vcvt.u32.f64	s12, d6
     6f8:	vmov	r2, s12
     6fc:	cmp	r2, r3
     6fe:	bhi.w	9da <updateBeams()+0x40a>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     702:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     704:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     706:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     70a:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     70e:	cmp	r3, r1
     710:	it	eq
     712:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     714:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     716:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     718:	ite	eq
     71a:	moveq	r4, #1
     71c:	movne	r4, #0
     71e:	cmp	r4, #0
     720:	beq.n	706 <updateBeams()+0x136>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     722:	lsrs	r1, r3, #5
     724:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     728:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     72c:	orr.w	r1, r1, r2, lsl #27
     730:	vcvt.f32.s32	s11, s15
     734:	vmov	s15, r1
     738:	vcvt.f64.u32	d7, s15
     73c:	vdiv.f64	d6, d7, d8
     740:	vcvt.u32.f64	s12, d6
     744:	vmov	r2, s12
     748:	subs	r5, r2, r5
     74a:	vmov	s15, r5
     74e:	vcvt.f32.u32	s15, s15
     752:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     756:	cmp	r3, #0
     758:	bne.w	9d0 <updateBeams()+0x400>
	position = (strip->numPixels() + length) * posFac - length / 2;
     75c:	ldr.w	r0, [sl, #-32]
     760:	bl	bb18 <Adafruit_NeoPixel::numPixels() const>
     764:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     768:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     76c:	vmov.f32	s14, #96	; 0x3f000000  0.5
     770:	vcvt.f32.s32	s13, s15
     774:	vldr	s15, [sl, #-8]
     778:	vmul.f32	s14, s15, s14
     77c:	vadd.f32	s15, s13, s15
     780:	vmov.f32	s13, s14
     784:	vfnms.f32	s13, s15, s20
     788:	vmov.f32	s15, s13
     78c:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     790:	cmp	r3, #0
     792:	beq.n	6a0 <updateBeams()+0xd0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     794:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     798:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     79c:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7a0:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     7a4:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     7a8:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7ac:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     7b0:	cmp	r7, r3
     7b2:	ble.n	8ae <updateBeams()+0x2de>
     7b4:	b.n	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     7b6:	vldr	s11, [sl, #-8]
     7ba:	vmov.f32	s14, #112	; 0x3f800000  1.0
     7be:	vmov.f32	s13, #0	; 0x40000000  2.0
     7c2:	vdiv.f32	s12, s15, s11
     7c6:	vmov.f32	s15, s14
     7ca:	vfms.f32	s15, s12, s13
     7ce:	vcmpe.f32	s15, #0.0
     7d2:	vmrs	APSR_nzcv, fpscr
     7d6:	bmi.w	8e0 <updateBeams()+0x310>
     7da:	vcmp.f32	s15, s14
     7de:	vmrs	APSR_nzcv, fpscr
     7e2:	it	gt
     7e4:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     7e8:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     7ec:	sub.w	r3, sl, #24
     7f0:	add	r4, sp, #24
     7f2:	ldrb.w	ip, [sl, #-24]
     7f6:	ldrb.w	lr, [sl, #-23]
     7fa:	vcmp.f32	s15, s14
     7fe:	ldrb.w	r6, [sl, #-22]
     802:	ldr.w	r8, [sl, #-20]
     806:	vmrs	APSR_nzcv, fpscr
     80a:	ldmia	r3, {r0, r1, r2, r3}
     80c:	stmia.w	r4, {r0, r1, r2, r3}
     810:	ldrb.w	r3, [sl, #-16]
     814:	ldrb.w	r2, [sl, #-15]
     818:	ldrb.w	r1, [sl, #-12]
     81c:	beq.n	872 <updateBeams()+0x2a2>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     81e:	cmp	r1, #0
     820:	beq.n	910 <updateBeams()+0x340>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     822:	vmov	s14, ip
     826:	vmov	s13, lr
     82a:	vcvt.f32.s32	s14, s14
     82e:	vmul.f32	s14, s14, s15
     832:	vcvt.u32.f32	s14, s14
     836:	vstr	s14, [sp, #12]
     83a:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     83e:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     842:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     846:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     848:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     84a:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     84e:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     852:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     856:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     85a:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     85e:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     862:	vstr	s14, [sp, #12]
     866:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     86a:	vstr	s15, [sp, #16]
     86e:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     872:	strb.w	r3, [sp, #32]
     876:	add	r3, sp, #40	; 0x28
     878:	strb.w	r2, [sp, #33]	; 0x21
     87c:	strb.w	r1, [sp, #36]	; 0x24
     880:	strb.w	ip, [sp, #24]
     884:	strb.w	lr, [sp, #25]
     888:	strb.w	r6, [sp, #26]
     88c:	str.w	r8, [sp, #28]
     890:	ldmdb	r3, {r0, r1}
     894:	ldmia.w	r4, {r2, r3}
     898:	stmia.w	sp, {r0, r1}
     89c:	mov	r1, r7
     89e:	ldr.w	r0, [sl, #-32]
     8a2:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     8a6:	adds	r7, #1
     8a8:	cmp	r5, r7
     8aa:	blt.w	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
     8ae:	cmp	r7, #0
     8b0:	blt.n	8a6 <updateBeams()+0x2d6>
     8b2:	ldr.w	r0, [sl, #-32]
     8b6:	bl	bb18 <Adafruit_NeoPixel::numPixels() const>
     8ba:	cmp	r0, r7
     8bc:	ble.n	8a6 <updateBeams()+0x2d6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     8be:	vmov	s14, r7
     8c2:	vldr	s15, [sl, #4]
     8c6:	vcvt.f32.s32	s14, s14
     8ca:	vsub.f32	s15, s14, s15
     8ce:	vcmpe.f32	s15, #0.0
     8d2:	vmrs	APSR_nzcv, fpscr
     8d6:	bgt.w	7b6 <updateBeams()+0x1e6>
     8da:	vneg.f32	s15, s15
     8de:	b.n	7b6 <updateBeams()+0x1e6>
     8e0:	vldr	s15, [pc, #40]	; 90c <updateBeams()+0x33c>
     8e4:	b.n	7e8 <updateBeams()+0x218>
     8e6:	nop
     8e8:	.word	0xd2f1a9fc
     8ec:	.word	0x3ff0624d
     8f0:	.word	0x66666666
     8f4:	.word	0x40046666
     8f8:	.word	0x400d4000
     8fc:	.word	0x20002c14
     900:	.word	0x20005480
     904:	.word	0x20008ca4
     908:	.word	0x20008cb8
     90c:	.word	0x00000000
     910:	cmp	r2, #99	; 0x63
     912:	bgt.n	9a6 <updateBeams()+0x3d6>
     914:	vmov	s14, r2
     918:	vcvt.f64.s32	d6, s14
     91c:	vmul.f64	d6, d6, d9
     920:	vcvt.u32.f64	s14, d6
     924:	vstr	s14, [sp, #12]
     928:	ldrb.w	ip, [sp, #12]
     92c:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     92e:	cmp	r3, #0
     930:	beq.n	9b0 <updateBeams()+0x3e0>
     932:	cmp	r3, #99	; 0x63
     934:	bgt.n	9ec <updateBeams()+0x41c>
     936:	vmov	s14, r3
     93a:	vcvt.f64.s32	d6, s14
     93e:	vmul.f64	d6, d6, d9
     942:	vcvt.s32.f64	s14, d6
     946:	vmov	r6, s14
     94a:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     94e:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     952:	ldr	r1, [pc, #544]	; (b74 <updateBeams()+0x5a4>)
     954:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     958:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     95c:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     95e:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     960:	mov.w	r0, r8, asr #31
     964:	rsb	r1, r0, r1, asr #8
     968:	mov.w	r0, #360	; 0x168
     96c:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     970:	ldr	r0, [pc, #516]	; (b78 <updateBeams()+0x5a8>)
     972:	smull	r6, r0, r0, r1
     976:	asrs	r6, r1, #31
     978:	add	r0, r1
     97a:	str	r6, [sp, #16]
     97c:	rsb	r0, r6, r0, asr #5
     980:	cmp	r0, #5
     982:	bhi.w	b6a <updateBeams()+0x59a>
     986:	tbb	[pc, r0]
     98a:	.short	0xbadc
     98c:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     990:	ldr	r0, [pc, #488]	; (b7c <updateBeams()+0x5ac>)
     992:	bl	b7c4 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     996:	ldr	r0, [pc, #488]	; (b80 <updateBeams()+0x5b0>)
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     998:	add	sp, #44	; 0x2c
     99a:	vpop	{d8-d10}
     99e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     9a2:	b.w	b7c4 <Adafruit_NeoPixel::show()>
     9a6:	mov.w	ip, #254	; 0xfe
     9aa:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     9ac:	cmp	r3, #0
     9ae:	bne.n	932 <updateBeams()+0x362>
     9b0:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9b4:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     9b8:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9ba:	vcvt.f32.s32	s14, s14
     9be:	vmul.f32	s14, s14, s15
     9c2:	vcvt.u32.f32	s14, s14
     9c6:	vstr	s14, [sp, #12]
     9ca:	ldrb.w	ip, [sp, #12]
     9ce:	b.n	83e <updateBeams()+0x26e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     9d0:	vmov.f32	s15, #112	; 0x3f800000  1.0
     9d4:	vsub.f32	s20, s15, s20
     9d8:	b.n	75c <updateBeams()+0x18c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     9da:	movs	r3, #0
     9dc:	strb.w	r3, [sl, #-36]
     9e0:	b.n	6a0 <updateBeams()+0xd0>
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     9e2:	add	sp, #44	; 0x2c
     9e4:	vpop	{d8-d10}
     9e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9ec:	movs	r6, #1
     9ee:	b.n	94e <updateBeams()+0x37e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     9f0:	ldr	r0, [pc, #388]	; (b78 <updateBeams()+0x5a8>)
     9f2:	smull	r6, r0, r0, r1
     9f6:	ldr	r6, [sp, #12]
     9f8:	add	r0, r1
     9fa:	vmov	s13, r6
     9fe:	rsb	lr, r6, ip
     a02:	ldr	r6, [sp, #16]
     a04:	rsb	r0, r6, r0, asr #5
     a08:	rsb	r0, r0, r0, lsl #4
     a0c:	sub.w	r1, r1, r0, lsl #2
     a10:	rsb	r1, r1, #60	; 0x3c
     a14:	mul.w	lr, r1, lr
     a18:	ldr	r1, [pc, #348]	; (b78 <updateBeams()+0x5a8>)
     a1a:	smull	r1, r0, r1, lr
     a1e:	mov.w	r1, lr, asr #31
     a22:	add	lr, r0
     a24:	rsb	lr, r1, lr, asr #5
     a28:	vmov	r1, s13
     a2c:	add	r1, lr
     a2e:	uxtb.w	lr, r1
     a32:	b.n	9b4 <updateBeams()+0x3e4>
     a34:	ldr	r0, [pc, #320]	; (b78 <updateBeams()+0x5a8>)
     a36:	smull	r6, r0, r0, r1
     a3a:	ldr	r6, [sp, #12]
     a3c:	add	r0, r1
     a3e:	rsb	ip, r6, ip
     a42:	vmov	s13, r6
     a46:	ldr	r6, [sp, #16]
     a48:	rsb	r0, r6, r0, asr #5
     a4c:	vmov	r6, s13
     a50:	rsb	r0, r0, r0, lsl #4
     a54:	sub.w	r1, r1, r0, lsl #2
     a58:	mul.w	ip, r1, ip
     a5c:	ldr	r1, [pc, #280]	; (b78 <updateBeams()+0x5a8>)
     a5e:	smull	r1, r0, r1, ip
     a62:	mov.w	r1, ip, asr #31
     a66:	add	ip, r0
     a68:	rsb	ip, r1, ip, asr #5
     a6c:	add	r6, ip
     a6e:	uxtb.w	ip, r6
     a72:	b.n	9b4 <updateBeams()+0x3e4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     a74:	ldr	r0, [pc, #256]	; (b78 <updateBeams()+0x5a8>)
     a76:	smull	r6, r0, r0, r1
     a7a:	ldr	r6, [sp, #12]
     a7c:	add	r0, r1
     a7e:	rsb	r6, r6, ip
     a82:	ldr.w	ip, [sp, #12]
     a86:	str	r6, [sp, #20]
     a88:	mov	r6, r0
     a8a:	ldr	r0, [sp, #16]
     a8c:	rsb	r0, r0, r6, asr #5
     a90:	ldr	r6, [sp, #20]
     a92:	rsb	r0, r0, r0, lsl #4
     a96:	sub.w	r1, r1, r0, lsl #2
     a9a:	ldr	r0, [pc, #220]	; (b78 <updateBeams()+0x5a8>)
     a9c:	rsb	r1, r1, #60	; 0x3c
     aa0:	mul.w	r1, r1, r6
     aa4:	smull	r6, r0, r0, r1
     aa8:	mov	r6, r0
     aaa:	asrs	r0, r1, #31
     aac:	add	r1, r6
     aae:	mov	r6, ip
     ab0:	rsb	r0, r0, r1, asr #5
     ab4:	add	r6, r0
     ab6:	uxtb	r1, r6
     ab8:	vmov	s13, r1
     abc:	b.n	9b4 <updateBeams()+0x3e4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     abe:	ldr	r0, [pc, #184]	; (b78 <updateBeams()+0x5a8>)
     ac0:	vmov	s13, ip
     ac4:	smull	r6, r0, r0, r1
     ac8:	ldr	r6, [sp, #12]
     aca:	add	r0, r1
     acc:	rsb	lr, r6, ip
     ad0:	mov	ip, r6
     ad2:	ldr	r6, [sp, #16]
     ad4:	rsb	r0, r6, r0, asr #5
     ad8:	mov	r6, ip
     ada:	rsb	r0, r0, r0, lsl #4
     ade:	sub.w	r1, r1, r0, lsl #2
     ae2:	mul.w	lr, r1, lr
     ae6:	ldr	r1, [pc, #144]	; (b78 <updateBeams()+0x5a8>)
     ae8:	smull	r1, r0, r1, lr
     aec:	mov.w	r1, lr, asr #31
     af0:	add	lr, r0
     af2:	rsb	lr, r1, lr, asr #5
     af6:	add	r6, lr
     af8:	uxtb.w	lr, r6
     afc:	b.n	9b4 <updateBeams()+0x3e4>
     afe:	ldr	r0, [pc, #120]	; (b78 <updateBeams()+0x5a8>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b00:	vmov	s13, ip
     b04:	smull	r6, r0, r0, r1
     b08:	ldr	r6, [sp, #12]
     b0a:	add	r0, r1
     b0c:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     b10:	mov	lr, r6
     b12:	ldr	r6, [sp, #16]
     b14:	rsb	r0, r6, r0, asr #5
     b18:	mov	r6, lr
     b1a:	rsb	r0, r0, r0, lsl #4
     b1e:	sub.w	r1, r1, r0, lsl #2
     b22:	rsb	r1, r1, #60	; 0x3c
     b26:	mul.w	ip, r1, ip
     b2a:	ldr	r1, [pc, #76]	; (b78 <updateBeams()+0x5a8>)
     b2c:	smull	r1, r0, r1, ip
     b30:	mov.w	r1, ip, asr #31
     b34:	add	ip, r0
     b36:	rsb	ip, r1, ip, asr #5
     b3a:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b3c:	uxtb.w	ip, r6
     b40:	b.n	9b4 <updateBeams()+0x3e4>
     b42:	ldr	r6, [sp, #12]
     b44:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     b48:	mov	lr, r6
     b4a:	mul.w	r1, r1, r0
     b4e:	ldr	r0, [pc, #40]	; (b78 <updateBeams()+0x5a8>)
     b50:	smull	r6, r0, r0, r1
     b54:	mov	r6, r0
     b56:	asrs	r0, r1, #31
     b58:	add	r1, r6
     b5a:	mov	r6, lr
     b5c:	rsb	r0, r0, r1, asr #5
     b60:	add	r6, r0
     b62:	uxtb	r1, r6
     b64:	vmov	s13, r1
     b68:	b.n	9b4 <updateBeams()+0x3e4>
     b6a:	mov.w	ip, #0
     b6e:	vmov	s13, ip
     b72:	b.n	9b4 <updateBeams()+0x3e4>
     b74:	.word	0xb60b60b7
     b78:	.word	0x88888889
     b7c:	.word	0x20008ca4
     b80:	.word	0x20008cb8
     b84:	.word	0x00000000

00000b88 <updateCircles()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     b88:	ldr	r3, [pc, #772]	; (e90 <updateCircles()+0x308>)
		}
	}
	return false;
}

void updateCircles() {
     b8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b8e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b90:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     b92:	ldr	r1, [r3, #40]	; 0x28
     b94:	vpush	{d8}
     b98:	sub	sp, #52	; 0x34
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     b9c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9e:	ldr	r6, [pc, #752]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     ba0:	cmp	r3, r1
     ba2:	it	eq
     ba4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ba6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     ba8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     baa:	ite	eq
     bac:	moveq	r5, #1
     bae:	movne	r5, #0
     bb0:	cmp	r5, #0
     bb2:	beq.n	b9a <updateCircles()+0x12>
	if ((int)sinceCircleUpdate < CIRCLE_UPDATE_INTERVAL) return;
     bb4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     bb6:	ldr	r4, [pc, #732]	; (e94 <updateCircles()+0x30c>)
     bb8:	orr.w	r1, r1, r2, lsl #27
     bbc:	ldr	r3, [r4, #0]
     bbe:	vmov	s15, r1
     bc2:	vldr	d5, [pc, #708]	; e88 <updateCircles()+0x300>
     bc6:	vcvt.f64.u32	d7, s15
     bca:	vdiv.f64	d6, d7, d5
     bce:	vcvt.u32.f64	s12, d6
     bd2:	vmov	r2, s12
     bd6:	subs	r3, r2, r3
     bd8:	cmp	r3, #15
     bda:	ble.w	1076 <updateCircles()+0x4ee>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     bde:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     be2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     be6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     be8:	cmp	r3, r1
     bea:	it	eq
     bec:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     bee:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     bf0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     bf2:	ite	eq
     bf4:	moveq	r6, #1
     bf6:	movne	r6, #0
     bf8:	cmp	r6, #0
     bfa:	beq.n	be4 <updateCircles()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     bfc:	lsrs	r1, r3, #5
	sinceCircleUpdate = 0;

	matrix_A.clear();
     bfe:	ldr	r0, [pc, #664]	; (e98 <updateCircles()+0x310>)
     c00:	ldr.w	fp, [pc, #684]	; eb0 <updateCircles()+0x328>
     c04:	orr.w	r1, r1, r2, lsl #27
     c08:	vmov	s15, r1
     c0c:	vldr	d8, [pc, #632]	; e88 <updateCircles()+0x300>
     c10:	vcvt.f64.u32	d7, s15
     c14:	vdiv.f64	d6, d7, d8
     c18:	vcvt.u32.f64	s12, d6
     c1c:	vstr	s12, [r4]
     c20:	bl	bb70 <Adafruit_NeoPixel::clear()>
	matrix_B.clear();
     c24:	ldr	r0, [pc, #628]	; (e9c <updateCircles()+0x314>)
     c26:	bl	bb70 <Adafruit_NeoPixel::clear()>
     c2a:	b.n	c38 <updateCircles()+0xb0>
     c2c:	add.w	fp, fp, #60	; 0x3c

	for (int i = 0; i < CIRCLE_AM; i++) {
     c30:	ldr	r3, [pc, #620]	; (ea0 <updateCircles()+0x318>)
     c32:	cmp	r3, fp
     c34:	beq.w	e70 <updateCircles()+0x2e8>
		if (circles[i].active) {
     c38:	ldrb.w	r3, [fp, #-52]
     c3c:	cmp	r3, #0
     c3e:	beq.n	c2c <updateCircles()+0xa4>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c40:	ldr	r3, [pc, #588]	; (e90 <updateCircles()+0x308>)
     c42:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c44:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c46:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c48:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c4a:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c4c:	ldr	r6, [pc, #576]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     c4e:	cmp	r3, r1
     c50:	it	eq
     c52:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c54:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     c56:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     c58:	ite	eq
     c5a:	moveq	r5, #1
     c5c:	movne	r5, #0
     c5e:	cmp	r5, #0
     c60:	beq.n	c48 <updateCircles()+0xc0>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
     c62:	lsrs	r1, r3, #5
     c64:	ldr.w	r4, [fp]
     c68:	ldr.w	r7, [fp, #-4]
     c6c:	orr.w	r1, r1, r2, lsl #27
     c70:	adds	r3, r7, r4
     c72:	vmov	s15, r1
     c76:	vcvt.f64.u32	d7, s15
     c7a:	vdiv.f64	d6, d7, d8
     c7e:	vcvt.u32.f64	s12, d6
     c82:	vmov	r2, s12
     c86:	cmp	r2, r3
     c88:	bhi.w	106e <updateCircles()+0x4e6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c8c:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c8e:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c90:	ldr	r3, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c92:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c94:	ldr	r2, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     c96:	cmp	r2, r3
     c98:	it	eq
     c9a:	cmpeq	r1, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c9c:	mov	r0, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     c9e:	mov	r3, r2
    if (lo1 == lo2 && hi1 == hi2) {
     ca0:	ite	eq
     ca2:	moveq	r6, #1
     ca4:	movne	r6, #0
     ca6:	cmp	r6, #0
     ca8:	beq.n	c92 <updateCircles()+0x10a>
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     caa:	lsrs	r3, r2, #5
     cac:	vmov	s15, r7
     cb0:	vldr	s11, [fp, #-28]	; 0xffffffe4
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cb4:	vmov.f32	s8, #96	; 0x3f000000  0.5
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cb8:	orr.w	r3, r3, r1, lsl #27
     cbc:	vcvt.f32.s32	s7, s15
     cc0:	vldr	s6, [fp, #-24]	; 0xffffffe8
     cc4:	vmov	s15, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     cc8:	vldr	s10, [fp, #-36]	; 0xffffffdc
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ccc:	vsub.f32	s6, s6, s11
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cd0:	vldr	s9, [fp, #-40]	; 0xffffffd8
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cd4:	vcvt.f64.u32	d7, s15
     cd8:	vdiv.f64	d6, d7, d8
     cdc:	vcvt.u32.f64	s12, d6

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     ce0:	vmov.f32	s13, s9
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ce4:	vmov	r3, s12
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     ce8:	vmov.f32	s12, s10
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cec:	subs	r4, r3, r4
     cee:	vmov	s15, r4
     cf2:	vcvt.f32.u32	s15, s15
     cf6:	vdiv.f32	s14, s15, s7
     cfa:	vmov.f32	s15, s11
     cfe:	vfma.f32	s15, s14, s6
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d02:	vneg.f32	s14, s15
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     d06:	vstr	s15, [fp, #-32]	; 0xffffffe0
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d0a:	vfma.f32	s12, s15, s8

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d0e:	vfma.f32	s13, s15, s8
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d12:	vfma.f32	s9, s14, s8
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d16:	vfma.f32	s10, s14, s8
		int y2 = pos.y + size / 2;
     d1a:	vcvt.s32.f32	s15, s12

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d1e:	vcvt.s32.f32	s14, s13
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d22:	vmov	r5, s15
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d26:	vcvt.s32.f32	s15, s9
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d2a:	vmov	r3, s14

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d2e:	vstr	s14, [sp, #28]
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d32:	vmov	r9, s15
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d36:	vcvt.s32.f32	s15, s10
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d3a:	cmp	r9, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d3c:	vstr	s15, [sp, #20]
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d40:	bgt.w	c2c <updateCircles()+0xa4>
     d44:	add.w	r3, r9, r9, lsl #1
     d48:	add.w	r2, r9, r9, lsl #3
     d4c:	lsls	r6, r3, #3
     d4e:	mov.w	r8, r2, lsl #9
     d52:	mov	r3, r6
     d54:	mov	r6, r9
     d56:	mov	r9, r3
			for (int y = y1; y <= y2; y++) {
     d58:	ldr	r3, [sp, #20]
     d5a:	cmp	r3, r5
     d5c:	bgt.n	e52 <updateCircles()+0x2ca>
     d5e:	cmp	r6, #23
     d60:	ldr	r4, [sp, #20]
     d62:	ite	ls
     d64:	movls	r7, #0
     d66:	movhi	r7, #1
     d68:	b.n	d70 <updateCircles()+0x1e8>
     d6a:	adds	r4, #1
     d6c:	cmp	r5, r4
     d6e:	blt.n	e52 <updateCircles()+0x2ca>

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
     d70:	cmp	r4, #23
     d72:	bhi.n	d6a <updateCircles()+0x1e2>
     d74:	cmp	r7, #0
     d76:	bne.n	d6a <updateCircles()+0x1e2>
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
     d78:	vmov	s14, r4
     d7c:	vldr	s15, [fp, #-36]	; 0xffffffdc
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d80:	vldr	s13, [fp, #-40]	; 0xffffffd8
     d84:	add.w	sl, r4, r9
				float Dy = y - pos.y;
     d88:	vcvt.f32.s32	s14, s14
     d8c:	vsub.f32	s14, s14, s15
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d90:	vmov	s15, r6
     d94:	vcvt.f32.s32	s15, s15
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     d98:	vmul.f32	s14, s14, s14
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d9c:	vsub.f32	s15, s15, s13
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     da0:	vfma.f32	s14, s15, s15
     da4:	vcvt.f64.f32	d7, s14
     da8:	vsqrt.f64	d0, d7
     dac:	vcmp.f64	d0, d0
     db0:	vmrs	APSR_nzcv, fpscr
     db4:	bne.w	10a2 <updateCircles()+0x51a>


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     db8:	vcvt.f32.f64	s0, d0
     dbc:	vldr	s14, [fp, #-32]	; 0xffffffe0
     dc0:	vmov.f64	d6, #96	; 0x3f000000  0.5
     dc4:	vldr	s10, [fp, #4]
     dc8:	vcvt.f64.f32	d7, s14

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dcc:	ldr.w	r3, [fp, #-44]
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd0:	vcvt.f64.f32	d0, s0

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dd4:	add.w	r2, r4, r4, lsl #1
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd8:	vcvt.f64.f32	d5, s10
     ddc:	vfnms.f64	d0, d7, d6
     de0:	vmov.f64	d6, #112	; 0x3f800000  1.0
     de4:	vcmpe.f64	d0, #0.0
     de8:	vmrs	APSR_nzcv, fpscr
     dec:	it	le
     dee:	vnegle.f64	d0, d0
     df2:	vdiv.f64	d7, d0, d5
     df6:	vcmpe.f64	d7, d6
     dfa:	vmrs	APSR_nzcv, fpscr
     dfe:	bmi.n	eb4 <updateCircles()+0x32c>

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     e00:	add.w	r3, r3, r2, lsl #6
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     e04:	movs	r0, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e06:	mov.w	r1, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
     e0a:	vldr	s14, [pc, #152]	; ea4 <updateCircles()+0x31c>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e0e:	ldr.w	r2, [r3, r8]
	HSB_color.s = s;
     e12:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e16:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     e1a:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e1e:	ldr	r0, [pc, #136]	; (ea8 <updateCircles()+0x320>)
     e20:	lsrs	r3, r2, #3
     e22:	umull	r0, r3, r0, r3
     e26:	lsrs	r3, r3, #2
     e28:	mls	r3, r1, r3, r2
     e2c:	str	r3, [sp, #36]	; 0x24
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     e2e:	ldr	r2, [pc, #124]	; (eac <updateCircles()+0x324>)
     e30:	smull	r1, r2, r2, r3
     e34:	asrs	r1, r3, #31
     e36:	add	r2, r3
     e38:	rsb	r2, r1, r2, asr #5
     e3c:	subs	r2, #1
     e3e:	cmp	r2, #4
     e40:	bhi.w	1046 <updateCircles()+0x4be>
     e44:	tbh	[pc, r2, lsl #1]
     e48:	.word	0x00d100ee
     e4c:	.word	0x007600b2
     e50:	.short	0x011c
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     e52:	adds	r6, #1
     e54:	ldr	r3, [sp, #28]
     e56:	add.w	r8, r8, #4608	; 0x1200
     e5a:	add.w	r9, r9, #24
     e5e:	cmp	r3, r6
     e60:	bge.w	d58 <updateCircles()+0x1d0>
     e64:	add.w	fp, fp, #60	; 0x3c
	sinceCircleUpdate = 0;

	matrix_A.clear();
	matrix_B.clear();

	for (int i = 0; i < CIRCLE_AM; i++) {
     e68:	ldr	r3, [pc, #52]	; (ea0 <updateCircles()+0x318>)
     e6a:	cmp	r3, fp
     e6c:	bne.w	c38 <updateCircles()+0xb0>
	// for (int i = 0; i < synapse_B.numPixels(); i++) {
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
     e70:	ldr	r0, [pc, #36]	; (e98 <updateCircles()+0x310>)
     e72:	bl	b7c4 <Adafruit_NeoPixel::show()>
	matrix_B.show();
     e76:	ldr	r0, [pc, #36]	; (e9c <updateCircles()+0x314>)

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
     e78:	add	sp, #52	; 0x34
     e7a:	vpop	{d8}
     e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
	matrix_B.show();
     e82:	b.w	b7c4 <Adafruit_NeoPixel::show()>
     e86:	nop
     e88:	.word	0xd2f1a9fc
     e8c:	.word	0x3ff0624d
     e90:	.word	0x400d4000
     e94:	.word	0x20001790
     e98:	.word	0x20003e48
     e9c:	.word	0x20003e5c
     ea0:	.word	0x20002c48
     ea4:	.word	0x00000000
     ea8:	.word	0x16c16c17
     eac:	.word	0x88888889
     eb0:	.word	0x200029f0

				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     eb4:	add.w	r3, r3, r2, lsl #6
     eb8:	vsub.f64	d7, d6, d7
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     ebc:	movs	r0, #100	; 0x64
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ebe:	vmov.f32	s13, #112	; 0x3f800000  1.0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ec2:	ldr.w	r2, [r3, r8]
     ec6:	mov.w	r1, #360	; 0x168
     eca:	vcvt.f32.f64	s14, d7
	HSB_color.s = s;
     ece:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ed2:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     ed6:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eda:	ldr	r0, [pc, #464]	; (10ac <updateCircles()+0x524>)
     edc:	lsrs	r3, r2, #3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ede:	vcmp.f32	s14, s13
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ee2:	umull	r0, r3, r0, r3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ee6:	vmrs	APSR_nzcv, fpscr
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eea:	mov.w	r3, r3, lsr #2
     eee:	mls	r3, r1, r3, r2
     ef2:	str	r3, [sp, #36]	; 0x24
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ef4:	bne.n	e2e <updateCircles()+0x2a6>
void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
     ef6:	movs	r2, #1

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
     ef8:	movs	r3, #0
	HSB_updated = true;
     efa:	strb.w	r2, [sp, #45]	; 0x2d
				c.multiply(b);
				addPixelColor(strip, ledID, c);
     efe:	ldrb.w	r2, [sp, #8]
     f02:	strb.w	r3, [sp, #44]	; 0x2c
     f06:	add	r3, sp, #32
     f08:	strb.w	r2, [sp, #32]
     f0c:	ldrb.w	r2, [sp, #16]
     f10:	strb.w	r2, [sp, #33]	; 0x21
     f14:	ldrb.w	r2, [sp, #12]
     f18:	strb.w	r2, [sp, #34]	; 0x22
     f1c:	add	r2, sp, #48	; 0x30
     f1e:	ldmdb	r2, {r0, r1}
     f22:	stmia.w	sp, {r0, r1}
     f26:	mov	r1, sl
     f28:	ldr.w	r0, [fp, #-48]
     f2c:	ldmia	r3, {r2, r3}
     f2e:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
     f32:	b.n	d6a <updateCircles()+0x1e2>
     f34:	ldr	r2, [pc, #376]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
     f36:	vldr	s13, [pc, #380]	; 10b4 <updateCircles()+0x52c>
     f3a:	smull	r0, r2, r2, r3
     f3e:	vldr	s12, [pc, #376]	; 10b8 <updateCircles()+0x530>
     f42:	add	r2, r3
     f44:	rsb	r1, r1, r2, asr #5
     f48:	rsb	r1, r1, r1, lsl #4
     f4c:	sub.w	r3, r3, r1, lsl #2
     f50:	rsb	r3, r3, r3, lsl #7
     f54:	ldr	r2, [pc, #344]	; (10b0 <updateCircles()+0x528>)
     f56:	lsls	r3, r3, #1
     f58:	smull	r2, r1, r2, r3
     f5c:	asrs	r2, r3, #31
     f5e:	add	r3, r1
     f60:	rsb	r3, r2, r3, asr #5
     f64:	vmov	s15, r3
     f68:	vcvt.f32.s32	s15, s15
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f6c:	vmul.f32	s15, s15, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f70:	movs	r2, #0
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     f72:	vmul.f32	s13, s13, s14

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     f76:	movs	r3, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     f78:	vmul.f32	s14, s12, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f7c:	strb.w	r2, [sp, #45]	; 0x2d
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f80:	vcvt.u32.f32	s15, s15
     f84:	vstr	s15, [sp, #8]
		byte g = green()*multFac;
     f88:	vcvt.u32.f32	s15, s13
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f8c:	ldrb.w	r2, [sp, #8]
		byte g = green()*multFac;
     f90:	vstr	s15, [sp, #12]
		byte b = blue()*multFac;
     f94:	vcvt.u32.f32	s15, s14
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f98:	str	r2, [sp, #8]
		byte g = green()*multFac;
     f9a:	ldrb.w	r2, [sp, #12]
		byte b = blue()*multFac;
     f9e:	vstr	s15, [sp, #24]
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     fa2:	str	r2, [sp, #16]
		byte b = blue()*multFac;
     fa4:	ldrb.w	r2, [sp, #24]
     fa8:	str	r2, [sp, #12]
     faa:	b.n	efe <updateCircles()+0x376>
     fac:	ldr	r2, [pc, #256]	; (10b0 <updateCircles()+0x528>)
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     fae:	vldr	s12, [pc, #264]	; 10b8 <updateCircles()+0x530>
     fb2:	smull	r0, r2, r2, r3
     fb6:	vldr	s15, [pc, #252]	; 10b4 <updateCircles()+0x52c>
     fba:	add	r2, r3
     fbc:	rsb	r1, r1, r2, asr #5
     fc0:	ldr	r2, [pc, #236]	; (10b0 <updateCircles()+0x528>)
     fc2:	rsb	r1, r1, r1, lsl #4
     fc6:	sub.w	r3, r3, r1, lsl #2
     fca:	rsb	r3, r3, #60	; 0x3c
     fce:	rsb	r3, r3, r3, lsl #7
     fd2:	lsls	r3, r3, #1
     fd4:	smull	r2, r1, r2, r3
     fd8:	asrs	r2, r3, #31
     fda:	add	r3, r1
     fdc:	rsb	r3, r2, r3, asr #5
     fe0:	vmov	s13, r3
     fe4:	vcvt.f32.s32	s13, s13
     fe8:	b.n	f6c <updateCircles()+0x3e4>
     fea:	ldr	r2, [pc, #196]	; (10b0 <updateCircles()+0x528>)
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     fec:	vldr	s13, [pc, #200]	; 10b8 <updateCircles()+0x530>
     ff0:	smull	r0, r2, r2, r3
     ff4:	vldr	s15, [pc, #188]	; 10b4 <updateCircles()+0x52c>
     ff8:	add	r2, r3
     ffa:	rsb	r1, r1, r2, asr #5
     ffe:	rsb	r1, r1, r1, lsl #4
    1002:	sub.w	r3, r3, r1, lsl #2
    1006:	rsb	r3, r3, r3, lsl #7
    100a:	ldr	r2, [pc, #164]	; (10b0 <updateCircles()+0x528>)
    100c:	lsls	r3, r3, #1
    100e:	smull	r2, r1, r2, r3
    1012:	asrs	r2, r3, #31
    1014:	add	r3, r1
    1016:	rsb	r3, r2, r3, asr #5
    101a:	vmov	s12, r3
    101e:	vcvt.f32.s32	s12, s12
    1022:	b.n	f6c <updateCircles()+0x3e4>
    1024:	ldr	r2, [pc, #136]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
    1026:	vldr	s13, [pc, #144]	; 10b8 <updateCircles()+0x530>
    102a:	smull	r0, r2, r2, r3
    102e:	vldr	s12, [pc, #132]	; 10b4 <updateCircles()+0x52c>
    1032:	add	r2, r3
    1034:	rsb	r1, r1, r2, asr #5
    1038:	rsb	r1, r1, r1, lsl #4
    103c:	sub.w	r3, r3, r1, lsl #2
    1040:	rsb	r3, r3, #60	; 0x3c
    1044:	b.n	f50 <updateCircles()+0x3c8>
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
    1046:	rsb	r3, r3, r3, lsl #7
    104a:	ldr	r2, [pc, #100]	; (10b0 <updateCircles()+0x528>)
    104c:	vldr	s12, [pc, #100]	; 10b4 <updateCircles()+0x52c>
    1050:	lsls	r3, r3, #1
    1052:	vldr	s15, [pc, #100]	; 10b8 <updateCircles()+0x530>
    1056:	smull	r2, r1, r2, r3
    105a:	asrs	r2, r3, #31
    105c:	add	r3, r1
    105e:	rsb	r3, r2, r3, asr #5
    1062:	uxtb	r3, r3
    1064:	vmov	s13, r3
    1068:	vcvt.f32.s32	s13, s13
    106c:	b.n	f6c <updateCircles()+0x3e4>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
			active = false;
    106e:	movs	r3, #0
    1070:	strb.w	r3, [fp, #-52]
    1074:	b.n	c2c <updateCircles()+0xa4>

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
    1076:	add	sp, #52	; 0x34
    1078:	vpop	{d8}
    107c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1080:	ldr	r2, [pc, #44]	; (10b0 <updateCircles()+0x528>)
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
    1082:	vldr	s13, [pc, #48]	; 10b4 <updateCircles()+0x52c>
    1086:	smull	r0, r2, r2, r3
    108a:	vldr	s15, [pc, #44]	; 10b8 <updateCircles()+0x530>
    108e:	add	r2, r3
    1090:	rsb	r1, r1, r2, asr #5
    1094:	rsb	r1, r1, r1, lsl #4
    1098:	sub.w	r3, r3, r1, lsl #2
    109c:	rsb	r3, r3, #60	; 0x3c
    10a0:	b.n	1006 <updateCircles()+0x47e>
				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
    10a2:	vmov.f64	d0, d7
    10a6:	bl	e250 <sqrt>
    10aa:	b.n	db8 <updateCircles()+0x230>
    10ac:	.word	0x16c16c17
    10b0:	.word	0x88888889
    10b4:	.word	0x00000000
    10b8:	.word	0x437e0000

000010bc <updateRandomSeed()>:
      }
  }
}

unsigned int randomSeedN = 0;
void updateRandomSeed(){
    10bc:	push	{r4, r5, r6, lr}
    10be:	ldr	r6, [pc, #48]	; (10f0 <updateRandomSeed()+0x34>)
    10c0:	movs	r4, #0
    10c2:	mov	r5, r6

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    10c4:	mov	r0, r4
    10c6:	adds	r4, #1
    10c8:	bl	cd90 <eeprom_read_byte>

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    10cc:	strb.w	r0, [r5], #1
    10d0:	cmp	r4, #4
    10d2:	bne.n	10c4 <updateRandomSeed()+0x8>
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
    10d4:	ldr	r3, [r6, #0]
    }

    template< typename T > const T &put( int idx, const T &t ){        
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    10d6:	mov	r2, r4
    10d8:	ldr	r0, [pc, #20]	; (10f0 <updateRandomSeed()+0x34>)
    10da:	movs	r1, #0
    10dc:	adds	r3, #1
    10de:	str	r3, [r6, #0]
    10e0:	bl	cfac <eeprom_write_block>
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10e4:	ldr	r0, [r6, #0]
}
    10e6:	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int randomSeedN = 0;
void updateRandomSeed(){
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10ea:	b.w	dab4 <randomSeed(unsigned long)>
    10ee:	nop
    10f0:	.word	0x20008c98
    10f4:	.word	0x00000000

000010f8 <regular_setup()>:
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    10f8:	ldr	r3, [pc, #720]	; (13cc <regular_setup()+0x2d4>)
    10fa:	movs	r1, #255	; 0xff
}

elapsedMillis sinceAutomatonInit;

void regular_setup(){
    10fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1100:	ldr.w	r0, [r3, #448]	; 0x1c0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1104:	mov.w	fp, #1
    1108:	movw	r5, #4636	; 0x121c
    110c:	vpush	{d8-d9}
    1110:	sub	sp, #12
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1112:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    1116:	ldr	r3, [pc, #692]	; (13cc <regular_setup()+0x2d4>)
    1118:	movs	r1, #8
    111a:	movs	r0, #0
    111c:	ldr.w	r4, [r3, #436]	; 0x1b4
    1120:	bl	dac8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1124:	add.w	r1, r0, fp
    1128:	ldr	r3, [pc, #672]	; (13cc <regular_setup()+0x2d4>)
    112a:	add.w	r0, r0, r0, lsl #1
    112e:	mov.w	ip, #0
    1132:	add.w	r1, r1, r1, lsl #1
    1136:	ldr.w	lr, [r3, #452]	; 0x1c4
    113a:	add.w	r8, r3, r0, lsl #3
    113e:	ldr	r0, [pc, #652]	; (13cc <regular_setup()+0x2d4>)
    1140:	lsls	r1, r1, #3
    1142:	str.w	lr, [r4, r5]
    1146:	ldr.w	r2, [r8, #32]
    114a:	ldr.w	r6, [r8, #40]	; 0x28
    114e:	add.w	r9, r0, r1
    1152:	ldr	r0, [r0, r1]
    1154:	ldr.w	r1, [r8, #36]	; 0x24
    1158:	ldr.w	r7, [r3, #456]	; 0x1c8
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    115c:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1160:	str	r1, [r4, #12]
    1162:	ldr.w	r1, [r9, #4]
    1166:	add.w	r9, r3, #4640	; 0x1220
    116a:	str	r6, [r4, #16]
    116c:	ldr.w	r6, [r8, #44]	; 0x2c
    1170:	add.w	r8, r4, #4640	; 0x1220
    1174:	str	r2, [r4, #8]
    1176:	ldr	r2, [pc, #596]	; (13cc <regular_setup()+0x2d4>)
    1178:	str	r6, [r4, #20]
    117a:	ldr	r2, [r2, #4]
    117c:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    117e:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1180:	mov	r6, r2
    1182:	ldr	r2, [pc, #584]	; (13cc <regular_setup()+0x2d4>)
    1184:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    1186:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1188:	strb.w	ip, [r4, #24]
    118c:	ldr.w	ip, [r2, #12]
    1190:	ldr	r4, [r2, #8]
    1192:	ldr	r2, [r2, #16]
    1194:	str.w	r7, [r8]
    1198:	str	r2, [r3, #16]
    119a:	ldr	r2, [pc, #560]	; (13cc <regular_setup()+0x2d4>)
    119c:	str.w	lr, [r3, r5]
    11a0:	ldr	r2, [r2, #20]
    11a2:	strb.w	fp, [r3, #24]
    11a6:	str	r2, [r3, #20]
    11a8:	ldr	r2, [pc, #544]	; (13cc <regular_setup()+0x2d4>)
    11aa:	str.w	ip, [r3, #12]
    11ae:	ldr	r2, [r2, #0]
    11b0:	str	r6, [r3, #4]
    11b2:	str	r2, [r3, #0]
    11b4:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    11b6:	ldr	r3, [pc, #532]	; (13cc <regular_setup()+0x2d4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11b8:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    11bc:	ldr.w	r8, [r3, #440]	; 0x1b8
    11c0:	bl	dac8 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11c4:	ldr	r3, [pc, #516]	; (13cc <regular_setup()+0x2d4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11c6:	add.w	r0, r0, r0, lsl #1
    11ca:	add.w	sl, r8, #4640	; 0x1220
    11ce:	add.w	r0, r3, r0, lsl #3
    11d2:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11d6:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11da:	add.w	r1, r0, #200	; 0xc8
    11de:	str.w	ip, [r8, r5]
    11e2:	ldr.w	r3, [r3, #456]	; 0x1c8
    11e6:	add.w	r9, r7, #4640	; 0x1220
    11ea:	ldr.w	r4, [r0, #196]	; 0xc4
    11ee:	ldmia	r1, {r1, r2, r6}
    11f0:	str.w	r6, [r8, #16]
    11f4:	ldr.w	r6, [r0, #212]	; 0xd4
    11f8:	ldr.w	r0, [r0, #192]	; 0xc0
    11fc:	str.w	r1, [r8, #8]
    1200:	ldr	r1, [pc, #456]	; (13cc <regular_setup()+0x2d4>)
    1202:	str.w	r2, [r8, #12]
    1206:	ldr	r1, [r1, #4]
    1208:	ldr	r2, [pc, #448]	; (13cc <regular_setup()+0x2d4>)
    120a:	str.w	r6, [r8, #20]
    120e:	mov	r6, r1
    1210:	ldr.w	lr, [r2, #8]
    1214:	ldr	r1, [r2, #20]
    1216:	strb.w	fp, [r8, #24]
    121a:	stmia.w	r8, {r0, r4}
    121e:	ldr	r4, [r2, #16]
    1220:	ldr	r0, [r2, #12]
    1222:	ldr	r2, [r2, #0]
    1224:	str.w	r3, [sl]
    1228:	str.w	ip, [r7, r5]
    122c:	str	r6, [r7, #4]
    122e:	str	r2, [r7, #0]
    1230:	strb.w	fp, [r7, #24]
    1234:	str.w	lr, [r7, #8]
    1238:	str	r0, [r7, #12]
    123a:	str	r4, [r7, #16]
    123c:	str	r1, [r7, #20]
    123e:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1242:	ldr	r3, [pc, #392]	; (13cc <regular_setup()+0x2d4>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1244:	ldr	r2, [pc, #388]	; (13cc <regular_setup()+0x2d4>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1246:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    124a:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    124e:	subs	r3, #1
    1250:	ldr.w	r6, [r2, #364]	; 0x16c
    1254:	ldrb.w	sl, [r2, #368]	; 0x170
    1258:	cmp	r3, #4
    125a:	bhi.w	2946 <regular_setup()+0x184e>
    125e:	tbh	[pc, r3, lsl #1]
    1262:	.short	0x002f
    1264:	.word	0x00940059
    1268:	.word	0x000500eb
    126c:	add.w	r7, r5, #2304	; 0x900
    1270:	add.w	r6, r5, #28
    1274:	mov	r4, r5
    1276:	mov	r8, r7
    1278:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    127a:	cmp	r7, #0
    127c:	bne.w	2660 <regular_setup()+0x1568>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1280:	ldr	r3, [r5, #0]
    1282:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1284:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1288:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    128a:	str	r3, [r4, #120]	; 0x78
    128c:	adds	r4, #96	; 0x60
    128e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1290:	cmp	r4, r8
    1292:	bne.n	127a <regular_setup()+0x182>
    1294:	ldr	r3, [pc, #308]	; (13cc <regular_setup()+0x2d4>)
    1296:	ldr	r2, [pc, #308]	; (13cc <regular_setup()+0x2d4>)
    1298:	ldrb.w	sl, [r3, #368]	; 0x170
    129c:	ldr.w	r3, [r3, #360]	; 0x168
    12a0:	ldr.w	r6, [r2, #364]	; 0x16c
    12a4:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    12a6:	ldr	r2, [pc, #292]	; (13cc <regular_setup()+0x2d4>)
    12a8:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    12ac:	cmp	r3, #4
    12ae:	bhi.w	2a1a <regular_setup()+0x1922>
    12b2:	tbh	[pc, r3, lsl #1]
    12b6:	.short	0x01b6
    12b8:	.word	0x0126017a
    12bc:	.word	0x00f401e1
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12c0:	movs	r0, #8
    12c2:	bl	dac0 <random(unsigned long)>
    12c6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12ca:	movs	r0, #8
    12cc:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    12d0:	cmp	r6, #0
    12d2:	ble.n	1294 <regular_setup()+0x19c>
    12d4:	add.w	r3, r0, #15
    12d8:	add.w	r4, r4, r4, lsl #1
    12dc:	movs	r7, #0
    12de:	add.w	r4, r3, r4, lsl #3
    12e2:	add.w	r4, r5, r4, lsl #2
      if (rand){
    12e6:	cmp.w	sl, #0
    12ea:	bne.n	12fe <regular_setup()+0x206>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    12ec:	ldr	r3, [r5, #0]
    12ee:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    12f0:	adds	r7, #1
    12f2:	adds	r4, #4
    12f4:	cmp	r7, r6
    12f6:	beq.n	1294 <regular_setup()+0x19c>
      if (rand){
    12f8:	cmp.w	sl, #0
    12fc:	beq.n	12ec <regular_setup()+0x1f4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    12fe:	ldr	r3, [r5, #20]
    1300:	ldr	r2, [r5, #16]
    1302:	subs	r0, r3, r2
    1304:	adds	r0, #2
    1306:	bl	dac0 <random(unsigned long)>
    130a:	ldr	r3, [r5, #16]
    130c:	subs	r3, #1
    130e:	add	r0, r3
    1310:	str	r0, [r4, #0]
    1312:	b.n	12f0 <regular_setup()+0x1f8>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1314:	movs	r0, #8
    1316:	bl	dac0 <random(unsigned long)>
    131a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    131e:	movs	r0, #8
    1320:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1324:	cmp	r6, #0
    1326:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1328:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    132c:	it	lt
    132e:	addlt	r3, r6, #1
    1330:	cmp	r6, #0
    1332:	mov.w	fp, r3, asr #1
    1336:	it	lt
    1338:	addlt	r6, #1
    133a:	rsb	fp, fp, #0
    133e:	asrs	r6, r6, #1
    1340:	add.w	r7, r0, fp
    1344:	adds	r3, r0, r6
    1346:	cmp	r7, r3
    1348:	str	r3, [sp, #4]
    134a:	bge.n	1294 <regular_setup()+0x19c>
    134c:	add	fp, r4
    134e:	add	r4, r6
    1350:	add.w	r6, fp, fp, lsl #1
    1354:	add.w	r6, r7, r6, lsl #3
    1358:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    135c:	cmp	fp, r4
    135e:	bge.n	137e <regular_setup()+0x286>
    1360:	mov	r9, r6
    1362:	mov	r8, fp
        if (rand){
    1364:	cmp.w	sl, #0
    1368:	bne.w	2646 <regular_setup()+0x154e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    136c:	ldr	r3, [r5, #0]
    136e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1372:	add.w	r8, r8, #1
    1376:	add.w	r9, r9, #96	; 0x60
    137a:	cmp	r8, r4
    137c:	bne.n	1364 <regular_setup()+0x26c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    137e:	adds	r7, #1
    1380:	ldr	r3, [sp, #4]
    1382:	adds	r6, #4
    1384:	cmp	r7, r3
    1386:	bne.n	135c <regular_setup()+0x264>
    1388:	b.n	1294 <regular_setup()+0x19c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    138a:	movs	r0, #8
    138c:	mov	r7, r5
    138e:	bl	dac0 <random(unsigned long)>
    1392:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1394:	movs	r0, #8
    1396:	add.w	fp, r5, #96	; 0x60
    139a:	bl	dac0 <random(unsigned long)>
    139e:	vmov	s15, r6
    13a2:	adds	r4, #8
    13a4:	add.w	r3, r0, #8
    13a8:	vcvt.f64.s32	d9, s15
    13ac:	rsb	r9, r0, #16
    13b0:	negs	r3, r3
    13b2:	rsb	r8, r4, #0
    13b6:	str	r3, [sp, #4]
    13b8:	vmov	s15, r8
    13bc:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    13be:	mov	r6, r7
    13c0:	vcvt.f64.s32	d8, s15
    13c4:	vmul.f64	d8, d8, d8
    13c8:	b.n	13dc <regular_setup()+0x2e4>
    13ca:	nop
    13cc:	.word	0x20005074
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    13d0:	ldr	r3, [r5, #0]
    13d2:	str	r3, [r6, #28]
    13d4:	adds	r4, #1
    13d6:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    13d8:	cmp	r4, r9
    13da:	beq.n	142c <regular_setup()+0x334>
      double xx = x-midPoint_y;
    13dc:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    13e0:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    13e4:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    13e8:	vfma.f64	d0, d7, d7
    13ec:	vsqrt.f64	d7, d0
    13f0:	vcmp.f64	d7, d7
    13f4:	vmrs	APSR_nzcv, fpscr
    13f8:	bne.w	2c2a <regular_setup()+0x1b32>
    13fc:	vcmpe.f64	d7, d9
    1400:	vmrs	APSR_nzcv, fpscr
    1404:	bhi.n	13d4 <regular_setup()+0x2dc>
        if (rand){
    1406:	cmp.w	sl, #0
    140a:	beq.n	13d0 <regular_setup()+0x2d8>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    140c:	ldr	r3, [r5, #20]
    140e:	adds	r4, #1
    1410:	ldr	r0, [r5, #16]
    1412:	adds	r6, #96	; 0x60
    1414:	subs	r0, r3, r0
    1416:	adds	r0, #2
    1418:	bl	dac0 <random(unsigned long)>
    141c:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    141e:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1420:	add.w	r3, r3, #4294967295
    1424:	add	r0, r3
    1426:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    142a:	bne.n	13dc <regular_setup()+0x2e4>
    142c:	adds	r7, #4
    142e:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1432:	cmp	r7, fp
    1434:	bne.n	13b8 <regular_setup()+0x2c0>
    1436:	b.n	1294 <regular_setup()+0x19c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1438:	cmp	r6, #0
    143a:	ble.n	14c6 <regular_setup()+0x3ce>
    143c:	mov	r9, r5
    143e:	movs	r7, #0
    1440:	mov	r5, sl
    1442:	b.n	145a <regular_setup()+0x362>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1444:	add.w	r3, r8, r3, lsl #3
    1448:	ldr.w	r2, [r9]
    144c:	add.w	r3, r9, r3, lsl #2
    1450:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1452:	adds	r7, #1
    1454:	cmp	r7, r6
    1456:	beq.w	1294 <regular_setup()+0x19c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    145a:	movs	r0, #8
    145c:	bl	dac0 <random(unsigned long)>
    1460:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1464:	movs	r0, #8
    1466:	bl	dac0 <random(unsigned long)>
    146a:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    146e:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1472:	cmp	r5, #0
    1474:	beq.n	1444 <regular_setup()+0x34c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1476:	ldr.w	r3, [r9, #20]
    147a:	add.w	r4, r4, r4, lsl #1
    147e:	ldr.w	r2, [r9, #16]
    1482:	subs	r0, r3, r2
    1484:	adds	r0, #2
    1486:	bl	dac0 <random(unsigned long)>
    148a:	ldr.w	r3, [r9, #16]
    148e:	subs	r2, r3, #1
    1490:	add.w	r3, r8, r4, lsl #3
    1494:	add	r0, r2
    1496:	add.w	r3, r9, r3, lsl #2
    149a:	str	r0, [r3, #28]
    149c:	b.n	1452 <regular_setup()+0x35a>
    149e:	add.w	r7, r5, #2304	; 0x900
    14a2:	add.w	r6, r5, #28
    14a6:	mov	r4, r5
    14a8:	mov	r8, r7
    14aa:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    14ac:	cmp	r7, #0
    14ae:	bne.w	2700 <regular_setup()+0x1608>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    14b2:	ldr	r3, [r5, #0]
    14b4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    14b6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    14ba:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    14bc:	str	r3, [r4, #120]	; 0x78
    14be:	adds	r4, #96	; 0x60
    14c0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    14c2:	cmp	r4, r8
    14c4:	bne.n	14ac <regular_setup()+0x3b4>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    14c6:	ldr	r3, [pc, #800]	; (17e8 <regular_setup()+0x6f0>)
    14c8:	movs	r1, #4
    14ca:	movs	r0, #0
    14cc:	ldr.w	r5, [r3, #440]	; 0x1b8
    14d0:	bl	dac8 <random(long, long)>
    14d4:	ldr	r3, [pc, #784]	; (17e8 <regular_setup()+0x6f0>)
    14d6:	add.w	r0, r0, r0, lsl #1
    14da:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    14de:	ldr.w	r2, [r3, #372]	; 0x174
    14e2:	add.w	r3, r3, #372	; 0x174
    14e6:	subs	r2, #1
    14e8:	ldr	r6, [r3, #4]
    14ea:	ldrb.w	sl, [r3, #8]
    14ee:	cmp	r2, #4
    14f0:	bhi.w	28dc <regular_setup()+0x17e4>
    14f4:	tbh	[pc, r2, lsl #1]
    14f8:	.word	0x01ae01ea
    14fc:	.word	0x01260158
    1500:	.short	0x00f4
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1502:	movs	r0, #8
    1504:	mov	r7, r5
    1506:	bl	dac0 <random(unsigned long)>
    150a:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    150c:	movs	r0, #8
    150e:	add.w	fp, r5, #96	; 0x60
    1512:	bl	dac0 <random(unsigned long)>
    1516:	vmov	s15, r6
    151a:	adds	r4, #8
    151c:	add.w	r3, r0, #8
    1520:	vcvt.f64.s32	d9, s15
    1524:	rsb	r9, r0, #16
    1528:	negs	r3, r3
    152a:	rsb	r8, r4, #0
    152e:	str	r3, [sp, #4]
    1530:	vmov	s15, r8
    1534:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1536:	mov	r6, r7
    1538:	vcvt.f64.s32	d8, s15
    153c:	vmul.f64	d8, d8, d8
    1540:	b.n	154e <regular_setup()+0x456>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1542:	ldr	r3, [r5, #0]
    1544:	str	r3, [r6, #28]
    1546:	adds	r4, #1
    1548:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    154a:	cmp	r4, r9
    154c:	beq.n	159e <regular_setup()+0x4a6>
      double xx = x-midPoint_y;
    154e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1552:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1556:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    155a:	vfma.f64	d0, d7, d7
    155e:	vsqrt.f64	d7, d0
    1562:	vcmp.f64	d7, d7
    1566:	vmrs	APSR_nzcv, fpscr
    156a:	bne.w	2c7c <regular_setup()+0x1b84>
    156e:	vcmpe.f64	d7, d9
    1572:	vmrs	APSR_nzcv, fpscr
    1576:	bhi.n	1546 <regular_setup()+0x44e>
        if (rand){
    1578:	cmp.w	sl, #0
    157c:	beq.n	1542 <regular_setup()+0x44a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    157e:	ldr	r3, [r5, #20]
    1580:	adds	r4, #1
    1582:	ldr	r0, [r5, #16]
    1584:	adds	r6, #96	; 0x60
    1586:	subs	r0, r3, r0
    1588:	adds	r0, #2
    158a:	bl	dac0 <random(unsigned long)>
    158e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1590:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1592:	add.w	r3, r3, #4294967295
    1596:	add	r0, r3
    1598:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    159c:	bne.n	154e <regular_setup()+0x456>
    159e:	adds	r7, #4
    15a0:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    15a4:	cmp	r7, fp
    15a6:	bne.n	1530 <regular_setup()+0x438>
    15a8:	b.n	14c6 <regular_setup()+0x3ce>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15aa:	movs	r0, #8
    15ac:	bl	dac0 <random(unsigned long)>
    15b0:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15b4:	movs	r0, #8
    15b6:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15ba:	cmp	r6, #0
    15bc:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15be:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15c2:	it	lt
    15c4:	addlt	r3, r6, #1
    15c6:	cmp	r6, #0
    15c8:	mov.w	fp, r3, asr #1
    15cc:	it	lt
    15ce:	addlt	r6, #1
    15d0:	rsb	fp, fp, #0
    15d4:	asrs	r6, r6, #1
    15d6:	add.w	r7, r0, fp
    15da:	adds	r3, r0, r6
    15dc:	cmp	r7, r3
    15de:	str	r3, [sp, #4]
    15e0:	bge.w	14c6 <regular_setup()+0x3ce>
    15e4:	add	fp, r4
    15e6:	add	r4, r6
    15e8:	add.w	r6, fp, fp, lsl #1
    15ec:	add.w	r6, r7, r6, lsl #3
    15f0:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    15f4:	cmp	fp, r4
    15f6:	bge.n	1616 <regular_setup()+0x51e>
    15f8:	mov	r9, r6
    15fa:	mov	r8, fp
        if (rand){
    15fc:	cmp.w	sl, #0
    1600:	bne.w	2612 <regular_setup()+0x151a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1604:	ldr	r3, [r5, #0]
    1606:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    160a:	add.w	r8, r8, #1
    160e:	add.w	r9, r9, #96	; 0x60
    1612:	cmp	r8, r4
    1614:	bne.n	15fc <regular_setup()+0x504>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1616:	adds	r7, #1
    1618:	ldr	r3, [sp, #4]
    161a:	adds	r6, #4
    161c:	cmp	r7, r3
    161e:	bne.n	15f4 <regular_setup()+0x4fc>
    1620:	b.n	14c6 <regular_setup()+0x3ce>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1622:	movs	r0, #8
    1624:	bl	dac0 <random(unsigned long)>
    1628:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    162c:	movs	r0, #8
    162e:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1632:	cmp	r6, #0
    1634:	ble.w	14c6 <regular_setup()+0x3ce>
    1638:	add.w	r3, r0, #15
    163c:	add.w	r4, r4, r4, lsl #1
    1640:	mov	r8, r6
    1642:	mov	r6, sl
    1644:	add.w	r4, r3, r4, lsl #3
    1648:	movs	r7, #0
    164a:	add.w	r4, r5, r4, lsl #2
      if (rand){
    164e:	cbnz	r6, 1662 <regular_setup()+0x56a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1650:	ldr	r3, [r5, #0]
    1652:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1654:	adds	r7, #1
    1656:	adds	r4, #4
    1658:	cmp	r7, r8
    165a:	beq.w	14c6 <regular_setup()+0x3ce>
      if (rand){
    165e:	cmp	r6, #0
    1660:	beq.n	1650 <regular_setup()+0x558>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1662:	ldr	r3, [r5, #20]
    1664:	ldr	r2, [r5, #16]
    1666:	subs	r0, r3, r2
    1668:	adds	r0, #2
    166a:	bl	dac0 <random(unsigned long)>
    166e:	ldr	r3, [r5, #16]
    1670:	subs	r3, #1
    1672:	add	r0, r3
    1674:	str	r0, [r4, #0]
    1676:	b.n	1654 <regular_setup()+0x55c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1678:	cmp	r6, #0
    167a:	ble.w	14c6 <regular_setup()+0x3ce>
    167e:	mov	r9, r5
    1680:	movs	r7, #0
    1682:	mov	r5, sl
    1684:	b.n	169c <regular_setup()+0x5a4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1686:	add.w	r3, r4, r3, lsl #3
    168a:	ldr.w	r2, [r9]
    168e:	add.w	r3, r9, r3, lsl #2
    1692:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1694:	adds	r7, #1
    1696:	cmp	r7, r6
    1698:	beq.w	14c6 <regular_setup()+0x3ce>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    169c:	movs	r0, #8
    169e:	bl	dac0 <random(unsigned long)>
    16a2:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    16a6:	movs	r0, #8
    16a8:	bl	dac0 <random(unsigned long)>
    16ac:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    16b0:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    16b4:	cmp	r5, #0
    16b6:	beq.n	1686 <regular_setup()+0x58e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16b8:	ldr.w	r3, [r9, #20]
    16bc:	add.w	r8, r8, r8, lsl #1
    16c0:	ldr.w	r2, [r9, #16]
    16c4:	add.w	r4, r4, r8, lsl #3
    16c8:	subs	r0, r3, r2
    16ca:	add.w	r4, r9, r4, lsl #2
    16ce:	adds	r0, #2
    16d0:	bl	dac0 <random(unsigned long)>
    16d4:	ldr.w	r3, [r9, #16]
    16d8:	subs	r3, #1
    16da:	add	r0, r3
    16dc:	str	r0, [r4, #28]
    16de:	b.n	1694 <regular_setup()+0x59c>
    16e0:	add.w	r7, r5, #2304	; 0x900
    16e4:	add.w	r6, r5, #28
    16e8:	mov	r4, r5
    16ea:	mov	r8, r7
    16ec:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    16ee:	cmp	r7, #0
    16f0:	bne.w	26b0 <regular_setup()+0x15b8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    16f4:	ldr	r3, [r5, #0]
    16f6:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    16f8:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    16fc:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    16fe:	str	r3, [r4, #120]	; 0x78
    1700:	adds	r4, #96	; 0x60
    1702:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1704:	cmp	r4, r8
    1706:	bne.n	16ee <regular_setup()+0x5f6>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    1708:	ldr	r3, [pc, #220]	; (17e8 <regular_setup()+0x6f0>)
    170a:	movs	r1, #4
    170c:	movs	r0, #0
    170e:	ldr.w	r5, [r3, #444]	; 0x1bc
    1712:	bl	dac8 <random(long, long)>
    1716:	ldr	r3, [pc, #208]	; (17e8 <regular_setup()+0x6f0>)
    1718:	add.w	r0, r0, r0, lsl #1
    171c:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1720:	ldr.w	r2, [r3, #372]	; 0x174
    1724:	add.w	r3, r3, #372	; 0x174
    1728:	subs	r2, #1
    172a:	ldr	r4, [r3, #4]
    172c:	ldrb.w	fp, [r3, #8]
    1730:	cmp	r2, #4
    1732:	bhi.w	2bc0 <regular_setup()+0x1ac8>
    1736:	tbh	[pc, r2, lsl #1]
    173a:	.short	0x0281
    173c:	.word	0x01ef0243
    1740:	.word	0x00f401bd
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1744:	cmp	r6, #0
    1746:	ble.n	1708 <regular_setup()+0x610>
    1748:	mov	r9, r5
    174a:	movs	r7, #0
    174c:	mov	r5, sl
    174e:	b.n	1764 <regular_setup()+0x66c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1750:	add.w	r3, r4, r3, lsl #3
    1754:	ldr.w	r2, [r9]
    1758:	add.w	r3, r9, r3, lsl #2
    175c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    175e:	adds	r7, #1
    1760:	cmp	r7, r6
    1762:	beq.n	1708 <regular_setup()+0x610>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1764:	movs	r0, #8
    1766:	bl	dac0 <random(unsigned long)>
    176a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    176e:	movs	r0, #8
    1770:	bl	dac0 <random(unsigned long)>
    1774:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1778:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    177c:	cmp	r5, #0
    177e:	beq.n	1750 <regular_setup()+0x658>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1780:	ldr.w	r3, [r9, #20]
    1784:	add.w	r8, r8, r8, lsl #1
    1788:	ldr.w	r2, [r9, #16]
    178c:	add.w	r4, r4, r8, lsl #3
    1790:	subs	r0, r3, r2
    1792:	add.w	r4, r9, r4, lsl #2
    1796:	adds	r0, #2
    1798:	bl	dac0 <random(unsigned long)>
    179c:	ldr.w	r3, [r9, #16]
    17a0:	subs	r3, #1
    17a2:	add	r0, r3
    17a4:	str	r0, [r4, #28]
    17a6:	b.n	175e <regular_setup()+0x666>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17a8:	movs	r0, #8
    17aa:	mov	r7, r5
    17ac:	bl	dac0 <random(unsigned long)>
    17b0:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17b2:	movs	r0, #8
    17b4:	add.w	fp, r5, #96	; 0x60
    17b8:	bl	dac0 <random(unsigned long)>
    17bc:	vmov	s15, r6
    17c0:	adds	r4, #8
    17c2:	add.w	r3, r0, #8
    17c6:	vcvt.f64.s32	d9, s15
    17ca:	rsb	r9, r0, #16
    17ce:	negs	r3, r3
    17d0:	rsb	r8, r4, #0
    17d4:	str	r3, [sp, #4]
    17d6:	vmov	s15, r8
    17da:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    17dc:	mov	r6, r7
    17de:	vcvt.f64.s32	d8, s15
    17e2:	vmul.f64	d8, d8, d8
    17e6:	b.n	17f8 <regular_setup()+0x700>
    17e8:	.word	0x20005074
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    17ec:	ldr	r3, [r5, #0]
    17ee:	str	r3, [r6, #28]
    17f0:	adds	r4, #1
    17f2:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    17f4:	cmp	r4, r9
    17f6:	beq.n	1848 <regular_setup()+0x750>
      double xx = x-midPoint_y;
    17f8:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    17fc:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1800:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1804:	vfma.f64	d0, d7, d7
    1808:	vsqrt.f64	d7, d0
    180c:	vcmp.f64	d7, d7
    1810:	vmrs	APSR_nzcv, fpscr
    1814:	bne.w	2c70 <regular_setup()+0x1b78>
    1818:	vcmpe.f64	d7, d9
    181c:	vmrs	APSR_nzcv, fpscr
    1820:	bhi.n	17f0 <regular_setup()+0x6f8>
        if (rand){
    1822:	cmp.w	sl, #0
    1826:	beq.n	17ec <regular_setup()+0x6f4>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1828:	ldr	r3, [r5, #20]
    182a:	adds	r4, #1
    182c:	ldr	r0, [r5, #16]
    182e:	adds	r6, #96	; 0x60
    1830:	subs	r0, r3, r0
    1832:	adds	r0, #2
    1834:	bl	dac0 <random(unsigned long)>
    1838:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    183a:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    183c:	add.w	r3, r3, #4294967295
    1840:	add	r0, r3
    1842:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1846:	bne.n	17f8 <regular_setup()+0x700>
    1848:	adds	r7, #4
    184a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    184e:	cmp	r7, fp
    1850:	bne.n	17d6 <regular_setup()+0x6de>
    1852:	b.n	1708 <regular_setup()+0x610>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1854:	movs	r0, #8
    1856:	bl	dac0 <random(unsigned long)>
    185a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    185e:	movs	r0, #8
    1860:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1864:	cmp	r6, #0
    1866:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1868:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    186c:	it	lt
    186e:	addlt	r3, r6, #1
    1870:	cmp	r6, #0
    1872:	mov.w	fp, r3, asr #1
    1876:	it	lt
    1878:	addlt	r6, #1
    187a:	rsb	fp, fp, #0
    187e:	asrs	r6, r6, #1
    1880:	add.w	r7, r0, fp
    1884:	adds	r3, r0, r6
    1886:	cmp	r3, r7
    1888:	str	r3, [sp, #4]
    188a:	ble.w	1708 <regular_setup()+0x610>
    188e:	add	fp, r4
    1890:	add	r4, r6
    1892:	add.w	r6, fp, fp, lsl #1
    1896:	add.w	r6, r7, r6, lsl #3
    189a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    189e:	cmp	r4, fp
    18a0:	ble.n	18c0 <regular_setup()+0x7c8>
    18a2:	mov	r9, r6
    18a4:	mov	r8, fp
        if (rand){
    18a6:	cmp.w	sl, #0
    18aa:	bne.w	262c <regular_setup()+0x1534>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    18ae:	ldr	r3, [r5, #0]
    18b0:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    18b4:	add.w	r8, r8, #1
    18b8:	add.w	r9, r9, #96	; 0x60
    18bc:	cmp	r8, r4
    18be:	bne.n	18a6 <regular_setup()+0x7ae>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    18c0:	adds	r7, #1
    18c2:	ldr	r3, [sp, #4]
    18c4:	adds	r6, #4
    18c6:	cmp	r3, r7
    18c8:	bne.n	189e <regular_setup()+0x7a6>
    18ca:	b.n	1708 <regular_setup()+0x610>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18cc:	movs	r0, #8
    18ce:	bl	dac0 <random(unsigned long)>
    18d2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18d6:	movs	r0, #8
    18d8:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    18dc:	cmp	r6, #0
    18de:	ble.w	1708 <regular_setup()+0x610>
    18e2:	add.w	r3, r0, #15
    18e6:	add.w	r4, r4, r4, lsl #1
    18ea:	mov	r8, r6
    18ec:	mov	r6, sl
    18ee:	add.w	r4, r3, r4, lsl #3
    18f2:	movs	r7, #0
    18f4:	add.w	r4, r5, r4, lsl #2
      if (rand){
    18f8:	cbnz	r6, 190c <regular_setup()+0x814>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    18fa:	ldr	r3, [r5, #0]
    18fc:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    18fe:	adds	r7, #1
    1900:	adds	r4, #4
    1902:	cmp	r7, r8
    1904:	beq.w	1708 <regular_setup()+0x610>
      if (rand){
    1908:	cmp	r6, #0
    190a:	beq.n	18fa <regular_setup()+0x802>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    190c:	ldr	r3, [r5, #20]
    190e:	ldr	r2, [r5, #16]
    1910:	subs	r0, r3, r2
    1912:	adds	r0, #2
    1914:	bl	dac0 <random(unsigned long)>
    1918:	ldr	r3, [r5, #16]
    191a:	subs	r3, #1
    191c:	add	r0, r3
    191e:	str	r0, [r4, #0]
    1920:	b.n	18fe <regular_setup()+0x806>
    1922:	add.w	r7, r5, #2304	; 0x900
    1926:	add.w	r6, r5, #28
    192a:	mov	r4, r5
    192c:	mov	r8, r7
    192e:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1930:	cmp	r7, #0
    1932:	bne.w	283c <regular_setup()+0x1744>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1936:	ldr	r3, [r5, #0]
    1938:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    193a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    193e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1940:	str	r3, [r4, #120]	; 0x78
    1942:	adds	r4, #96	; 0x60
    1944:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1946:	cmp	r4, r8
    1948:	bne.n	1930 <regular_setup()+0x838>
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    194a:	ldr	r3, [pc, #748]	; (1c38 <regular_setup()+0xb40>)
    194c:	movs	r1, #255	; 0xff
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    194e:	mov.w	fp, #1
    1952:	movw	r5, #4636	; 0x121c
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1956:	ldr.w	r0, [r3, #448]	; 0x1c0
    195a:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    195e:	ldr	r3, [pc, #728]	; (1c38 <regular_setup()+0xb40>)
    1960:	movs	r1, #8
    1962:	movs	r0, #0
    1964:	ldr.w	r4, [r3, #436]	; 0x1b4
    1968:	bl	dac8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    196c:	add.w	r1, r0, fp
    1970:	ldr	r3, [pc, #708]	; (1c38 <regular_setup()+0xb40>)
    1972:	add.w	r0, r0, r0, lsl #1
    1976:	mov.w	ip, #0
    197a:	add.w	r1, r1, r1, lsl #1
    197e:	ldr.w	lr, [r3, #452]	; 0x1c4
    1982:	add.w	r8, r3, r0, lsl #3
    1986:	ldr	r0, [pc, #688]	; (1c38 <regular_setup()+0xb40>)
    1988:	lsls	r1, r1, #3
    198a:	str.w	lr, [r4, r5]
    198e:	ldr.w	r2, [r8, #32]
    1992:	ldr.w	r6, [r8, #40]	; 0x28
    1996:	add.w	r9, r0, r1
    199a:	ldr	r0, [r0, r1]
    199c:	ldr.w	r1, [r8, #36]	; 0x24
    19a0:	ldr.w	r7, [r3, #456]	; 0x1c8
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    19a4:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19a8:	str	r1, [r4, #12]
    19aa:	ldr.w	r1, [r9, #4]
    19ae:	add.w	r9, r3, #4640	; 0x1220
    19b2:	str	r6, [r4, #16]
    19b4:	ldr.w	r6, [r8, #44]	; 0x2c
    19b8:	add.w	r8, r4, #4640	; 0x1220
    19bc:	str	r2, [r4, #8]
    19be:	ldr	r2, [pc, #632]	; (1c38 <regular_setup()+0xb40>)
    19c0:	str	r6, [r4, #20]
    19c2:	ldr	r2, [r2, #4]
    19c4:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19c6:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19c8:	mov	r6, r2
    19ca:	ldr	r2, [pc, #620]	; (1c38 <regular_setup()+0xb40>)
    19cc:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19ce:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19d0:	strb.w	ip, [r4, #24]
    19d4:	ldr.w	ip, [r2, #12]
    19d8:	ldr	r4, [r2, #8]
    19da:	ldr	r2, [r2, #16]
    19dc:	str.w	r7, [r8]
    19e0:	str	r2, [r3, #16]
    19e2:	ldr	r2, [pc, #596]	; (1c38 <regular_setup()+0xb40>)
    19e4:	str.w	lr, [r3, r5]
    19e8:	ldr	r2, [r2, #20]
    19ea:	strb.w	fp, [r3, #24]
    19ee:	str	r2, [r3, #20]
    19f0:	ldr	r2, [pc, #580]	; (1c38 <regular_setup()+0xb40>)
    19f2:	str.w	ip, [r3, #12]
    19f6:	ldr	r2, [r2, #0]
    19f8:	str	r6, [r3, #4]
    19fa:	str	r2, [r3, #0]
    19fc:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19fe:	ldr	r3, [pc, #568]	; (1c38 <regular_setup()+0xb40>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a00:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    1a04:	ldr.w	r8, [r3, #440]	; 0x1b8
    1a08:	bl	dac8 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a0c:	ldr	r3, [pc, #552]	; (1c38 <regular_setup()+0xb40>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a0e:	add.w	r0, r0, r0, lsl #1
    1a12:	add.w	sl, r8, #4640	; 0x1220
    1a16:	add.w	r0, r3, r0, lsl #3
    1a1a:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a1e:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a22:	add.w	r1, r0, #200	; 0xc8
    1a26:	str.w	ip, [r8, r5]
    1a2a:	ldr.w	r3, [r3, #456]	; 0x1c8
    1a2e:	add.w	r9, r7, #4640	; 0x1220
    1a32:	ldr.w	r4, [r0, #196]	; 0xc4
    1a36:	ldmia	r1, {r1, r2, r6}
    1a38:	str.w	r6, [r8, #16]
    1a3c:	ldr.w	r6, [r0, #212]	; 0xd4
    1a40:	ldr.w	r0, [r0, #192]	; 0xc0
    1a44:	str.w	r1, [r8, #8]
    1a48:	ldr	r1, [pc, #492]	; (1c38 <regular_setup()+0xb40>)
    1a4a:	str.w	r2, [r8, #12]
    1a4e:	ldr	r1, [r1, #4]
    1a50:	ldr	r2, [pc, #484]	; (1c38 <regular_setup()+0xb40>)
    1a52:	str.w	r6, [r8, #20]
    1a56:	mov	r6, r1
    1a58:	ldr.w	lr, [r2, #8]
    1a5c:	ldr	r1, [r2, #20]
    1a5e:	strb.w	fp, [r8, #24]
    1a62:	stmia.w	r8, {r0, r4}
    1a66:	ldr	r4, [r2, #16]
    1a68:	ldr	r0, [r2, #12]
    1a6a:	ldr	r2, [r2, #0]
    1a6c:	str.w	r3, [sl]
    1a70:	str.w	ip, [r7, r5]
    1a74:	str	r6, [r7, #4]
    1a76:	str	r2, [r7, #0]
    1a78:	strb.w	fp, [r7, #24]
    1a7c:	str.w	lr, [r7, #8]
    1a80:	str	r0, [r7, #12]
    1a82:	str	r4, [r7, #16]
    1a84:	str	r1, [r7, #20]
    1a86:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a8a:	ldr	r3, [pc, #428]	; (1c38 <regular_setup()+0xb40>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a8c:	ldr	r2, [pc, #424]	; (1c38 <regular_setup()+0xb40>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a8e:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a92:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a96:	subs	r3, #1
    1a98:	ldr.w	r6, [r2, #364]	; 0x16c
    1a9c:	ldrb.w	sl, [r2, #368]	; 0x170
    1aa0:	cmp	r3, #4
    1aa2:	bhi.w	2b56 <regular_setup()+0x1a5e>
    1aa6:	tbh	[pc, r3, lsl #1]
    1aaa:	.short	0x01e1
    1aac:	.word	0x015101a5
    1ab0:	.word	0x00f4011e
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ab4:	cmp	r4, #0
    1ab6:	ble.w	194a <regular_setup()+0x852>
    1aba:	mov	r9, r4
    1abc:	mov.w	r8, #0
    1ac0:	mov	r4, fp
    1ac2:	b.n	1ada <regular_setup()+0x9e2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1ac4:	add.w	r3, r6, r3, lsl #3
    1ac8:	ldr	r2, [r5, #0]
    1aca:	add.w	r3, r5, r3, lsl #2
    1ace:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ad0:	add.w	r8, r8, #1
    1ad4:	cmp	r8, r9
    1ad6:	beq.w	194a <regular_setup()+0x852>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ada:	movs	r0, #8
    1adc:	bl	dac0 <random(unsigned long)>
    1ae0:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ae4:	movs	r0, #8
    1ae6:	bl	dac0 <random(unsigned long)>
    1aea:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1aee:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1af2:	cmp	r4, #0
    1af4:	beq.n	1ac4 <regular_setup()+0x9cc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1af6:	ldr	r3, [r5, #20]
    1af8:	add.w	r7, r7, r7, lsl #1
    1afc:	ldr	r2, [r5, #16]
    1afe:	add.w	r6, r6, r7, lsl #3
    1b02:	subs	r0, r3, r2
    1b04:	add.w	r6, r5, r6, lsl #2
    1b08:	adds	r0, #2
    1b0a:	bl	dac0 <random(unsigned long)>
    1b0e:	ldr	r3, [r5, #16]
    1b10:	subs	r3, #1
    1b12:	add	r0, r3
    1b14:	str	r0, [r6, #28]
    1b16:	b.n	1ad0 <regular_setup()+0x9d8>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b18:	movs	r0, #8
    1b1a:	mov	r7, r5
    1b1c:	bl	dac0 <random(unsigned long)>
    1b20:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b22:	movs	r0, #8
    1b24:	add.w	r9, r5, #96	; 0x60
    1b28:	bl	dac0 <random(unsigned long)>
    1b2c:	vmov	s15, r4
    1b30:	adds	r6, #8
    1b32:	add.w	r3, r0, #8
    1b36:	vcvt.f64.s32	d9, s15
    1b3a:	rsb	sl, r0, #16
    1b3e:	negs	r3, r3
    1b40:	rsb	r8, r6, #0
    1b44:	str	r3, [sp, #4]
    1b46:	vmov	s15, r8
    1b4a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1b4c:	mov	r6, r7
    1b4e:	vcvt.f64.s32	d8, s15
    1b52:	vmul.f64	d8, d8, d8
    1b56:	b.n	1b64 <regular_setup()+0xa6c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1b58:	ldr	r3, [r5, #0]
    1b5a:	str	r3, [r6, #28]
    1b5c:	adds	r4, #1
    1b5e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1b60:	cmp	r4, sl
    1b62:	beq.n	1bb4 <regular_setup()+0xabc>
      double xx = x-midPoint_y;
    1b64:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1b68:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1b6c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1b70:	vfma.f64	d0, d7, d7
    1b74:	vsqrt.f64	d7, d0
    1b78:	vcmp.f64	d7, d7
    1b7c:	vmrs	APSR_nzcv, fpscr
    1b80:	bne.w	2c64 <regular_setup()+0x1b6c>
    1b84:	vcmpe.f64	d7, d9
    1b88:	vmrs	APSR_nzcv, fpscr
    1b8c:	bhi.n	1b5c <regular_setup()+0xa64>
        if (rand){
    1b8e:	cmp.w	fp, #0
    1b92:	beq.n	1b58 <regular_setup()+0xa60>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1b94:	ldr	r3, [r5, #20]
    1b96:	adds	r4, #1
    1b98:	ldr	r0, [r5, #16]
    1b9a:	adds	r6, #96	; 0x60
    1b9c:	subs	r0, r3, r0
    1b9e:	adds	r0, #2
    1ba0:	bl	dac0 <random(unsigned long)>
    1ba4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1ba6:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ba8:	add.w	r3, r3, #4294967295
    1bac:	add	r0, r3
    1bae:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bb2:	bne.n	1b64 <regular_setup()+0xa6c>
    1bb4:	adds	r7, #4
    1bb6:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1bba:	cmp	r7, r9
    1bbc:	bne.n	1b46 <regular_setup()+0xa4e>
    1bbe:	b.n	194a <regular_setup()+0x852>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bc0:	movs	r0, #8
    1bc2:	bl	dac0 <random(unsigned long)>
    1bc6:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bca:	movs	r0, #8
    1bcc:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bd0:	cmp	r4, #0
    1bd2:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bd4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bd8:	it	lt
    1bda:	addlt	r3, r4, #1
    1bdc:	cmp	r4, #0
    1bde:	mov.w	r8, r3, asr #1
    1be2:	it	lt
    1be4:	addlt	r4, #1
    1be6:	rsb	r8, r8, #0
    1bea:	asrs	r4, r4, #1
    1bec:	add.w	r7, r0, r8
    1bf0:	adds	r3, r4, r0
    1bf2:	cmp	r3, r7
    1bf4:	str	r3, [sp, #4]
    1bf6:	ble.w	194a <regular_setup()+0x852>
    1bfa:	add	r8, r6
    1bfc:	add.w	sl, r4, r6
    1c00:	add.w	r6, r8, r8, lsl #1
    1c04:	add.w	r6, r7, r6, lsl #3
    1c08:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c0c:	cmp	r8, sl
    1c0e:	bge.n	1c2c <regular_setup()+0xb34>
    1c10:	mov	r9, r6
    1c12:	mov	r4, r8
        if (rand){
    1c14:	cmp.w	fp, #0
    1c18:	bne.w	25f8 <regular_setup()+0x1500>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1c1c:	ldr	r3, [r5, #0]
    1c1e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c22:	adds	r4, #1
    1c24:	add.w	r9, r9, #96	; 0x60
    1c28:	cmp	r4, sl
    1c2a:	bne.n	1c14 <regular_setup()+0xb1c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c2c:	adds	r7, #1
    1c2e:	ldr	r3, [sp, #4]
    1c30:	adds	r6, #4
    1c32:	cmp	r3, r7
    1c34:	bne.n	1c0c <regular_setup()+0xb14>
    1c36:	b.n	194a <regular_setup()+0x852>
    1c38:	.word	0x20005268
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c3c:	movs	r0, #8
    1c3e:	bl	dac0 <random(unsigned long)>
    1c42:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c46:	movs	r0, #8
    1c48:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1c4c:	cmp	r4, #0
    1c4e:	ble.w	194a <regular_setup()+0x852>
    1c52:	add.w	r3, r0, #15
    1c56:	add.w	r6, r6, r6, lsl #1
    1c5a:	mov	r8, r4
    1c5c:	mov	r4, fp
    1c5e:	add.w	r6, r3, r6, lsl #3
    1c62:	movs	r7, #0
    1c64:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1c68:	cbnz	r4, 1c7c <regular_setup()+0xb84>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1c6a:	ldr	r3, [r5, #0]
    1c6c:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1c6e:	adds	r7, #1
    1c70:	adds	r6, #4
    1c72:	cmp	r7, r8
    1c74:	beq.w	194a <regular_setup()+0x852>
      if (rand){
    1c78:	cmp	r4, #0
    1c7a:	beq.n	1c6a <regular_setup()+0xb72>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c7c:	ldr	r3, [r5, #20]
    1c7e:	ldr	r2, [r5, #16]
    1c80:	subs	r0, r3, r2
    1c82:	adds	r0, #2
    1c84:	bl	dac0 <random(unsigned long)>
    1c88:	ldr	r3, [r5, #16]
    1c8a:	subs	r3, #1
    1c8c:	add	r0, r3
    1c8e:	str	r0, [r6, #0]
    1c90:	b.n	1c6e <regular_setup()+0xb76>
    1c92:	add.w	r7, r5, #2304	; 0x900
    1c96:	add.w	r6, r5, #28
    1c9a:	mov	r4, r5
    1c9c:	mov	r8, r7
    1c9e:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ca0:	cmp	r7, #0
    1ca2:	bne.w	288c <regular_setup()+0x1794>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ca6:	ldr	r3, [r5, #0]
    1ca8:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1caa:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1cae:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1cb0:	str	r3, [r4, #120]	; 0x78
    1cb2:	adds	r4, #96	; 0x60
    1cb4:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1cb6:	cmp	r4, r8
    1cb8:	bne.n	1ca0 <regular_setup()+0xba8>
    1cba:	ldr	r3, [pc, #788]	; (1fd0 <regular_setup()+0xed8>)
    1cbc:	ldr	r2, [pc, #784]	; (1fd0 <regular_setup()+0xed8>)
    1cbe:	ldr.w	r3, [r3, #360]	; 0x168
    1cc2:	ldrb.w	sl, [r2, #368]	; 0x170
    1cc6:	ldr.w	r4, [r2, #364]	; 0x16c
    1cca:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1ccc:	ldr	r2, [pc, #768]	; (1fd0 <regular_setup()+0xed8>)
    1cce:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1cd2:	cmp	r3, #4
    1cd4:	bhi.w	29b0 <regular_setup()+0x18b8>
    1cd8:	tbh	[pc, r3, lsl #1]
    1cdc:	.word	0x017c01b8
    1ce0:	.word	0x01e30126
    1ce4:	.short	0x00f4
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ce6:	cmp	r6, #0
    1ce8:	ble.w	1eec <regular_setup()+0xdf4>
    1cec:	mov	r9, r5
    1cee:	movs	r7, #0
    1cf0:	mov	r5, sl
    1cf2:	b.n	1d08 <regular_setup()+0xc10>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1cf4:	add.w	r3, r4, r3, lsl #3
    1cf8:	ldr.w	r2, [r9]
    1cfc:	add.w	r3, r9, r3, lsl #2
    1d00:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1d02:	adds	r7, #1
    1d04:	cmp	r7, r6
    1d06:	beq.n	1cba <regular_setup()+0xbc2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d08:	movs	r0, #8
    1d0a:	bl	dac0 <random(unsigned long)>
    1d0e:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d12:	movs	r0, #8
    1d14:	bl	dac0 <random(unsigned long)>
    1d18:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1d1c:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1d20:	cmp	r5, #0
    1d22:	beq.n	1cf4 <regular_setup()+0xbfc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1d24:	ldr.w	r3, [r9, #20]
    1d28:	add.w	r8, r8, r8, lsl #1
    1d2c:	ldr.w	r2, [r9, #16]
    1d30:	add.w	r4, r4, r8, lsl #3
    1d34:	subs	r0, r3, r2
    1d36:	add.w	r4, r9, r4, lsl #2
    1d3a:	adds	r0, #2
    1d3c:	bl	dac0 <random(unsigned long)>
    1d40:	ldr.w	r3, [r9, #16]
    1d44:	subs	r3, #1
    1d46:	add	r0, r3
    1d48:	str	r0, [r4, #28]
    1d4a:	b.n	1d02 <regular_setup()+0xc0a>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d4c:	movs	r0, #8
    1d4e:	mov	r7, r5
    1d50:	bl	dac0 <random(unsigned long)>
    1d54:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d56:	movs	r0, #8
    1d58:	add.w	fp, r5, #96	; 0x60
    1d5c:	bl	dac0 <random(unsigned long)>
    1d60:	vmov	s15, r6
    1d64:	adds	r4, #8
    1d66:	add.w	r3, r0, #8
    1d6a:	vcvt.f64.s32	d9, s15
    1d6e:	rsb	r9, r0, #16
    1d72:	negs	r3, r3
    1d74:	rsb	r8, r4, #0
    1d78:	str	r3, [sp, #4]
    1d7a:	vmov	s15, r8
    1d7e:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1d80:	mov	r6, r7
    1d82:	vcvt.f64.s32	d8, s15
    1d86:	vmul.f64	d8, d8, d8
    1d8a:	b.n	1d98 <regular_setup()+0xca0>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1d8c:	ldr	r3, [r5, #0]
    1d8e:	str	r3, [r6, #28]
    1d90:	adds	r4, #1
    1d92:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d94:	cmp	r4, r9
    1d96:	beq.n	1de8 <regular_setup()+0xcf0>
      double xx = x-midPoint_y;
    1d98:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1d9c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1da0:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1da4:	vfma.f64	d0, d7, d7
    1da8:	vsqrt.f64	d7, d0
    1dac:	vcmp.f64	d7, d7
    1db0:	vmrs	APSR_nzcv, fpscr
    1db4:	bne.w	2c58 <regular_setup()+0x1b60>
    1db8:	vcmpe.f64	d7, d9
    1dbc:	vmrs	APSR_nzcv, fpscr
    1dc0:	bhi.n	1d90 <regular_setup()+0xc98>
        if (rand){
    1dc2:	cmp.w	sl, #0
    1dc6:	beq.n	1d8c <regular_setup()+0xc94>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1dc8:	ldr	r3, [r5, #20]
    1dca:	adds	r4, #1
    1dcc:	ldr	r0, [r5, #16]
    1dce:	adds	r6, #96	; 0x60
    1dd0:	subs	r0, r3, r0
    1dd2:	adds	r0, #2
    1dd4:	bl	dac0 <random(unsigned long)>
    1dd8:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1dda:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ddc:	add.w	r3, r3, #4294967295
    1de0:	add	r0, r3
    1de2:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1de6:	bne.n	1d98 <regular_setup()+0xca0>
    1de8:	adds	r7, #4
    1dea:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1dee:	cmp	r7, fp
    1df0:	bne.n	1d7a <regular_setup()+0xc82>
    1df2:	b.n	1cba <regular_setup()+0xbc2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1df4:	movs	r0, #8
    1df6:	bl	dac0 <random(unsigned long)>
    1dfa:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1dfe:	movs	r0, #8
    1e00:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e04:	cmp	r6, #0
    1e06:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e08:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e0c:	it	lt
    1e0e:	addlt	r3, r6, #1
    1e10:	cmp	r6, #0
    1e12:	mov.w	fp, r3, asr #1
    1e16:	it	lt
    1e18:	addlt	r6, #1
    1e1a:	rsb	fp, fp, #0
    1e1e:	asrs	r6, r6, #1
    1e20:	add.w	r7, r0, fp
    1e24:	adds	r3, r0, r6
    1e26:	cmp	r7, r3
    1e28:	str	r3, [sp, #4]
    1e2a:	bge.w	1cba <regular_setup()+0xbc2>
    1e2e:	add	fp, r4
    1e30:	add	r4, r6
    1e32:	add.w	r6, fp, fp, lsl #1
    1e36:	add.w	r6, r7, r6, lsl #3
    1e3a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e3e:	cmp	fp, r4
    1e40:	bge.n	1e60 <regular_setup()+0xd68>
    1e42:	mov	r9, r6
    1e44:	mov	r8, fp
        if (rand){
    1e46:	cmp.w	sl, #0
    1e4a:	bne.w	25e0 <regular_setup()+0x14e8>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1e4e:	ldr	r3, [r5, #0]
    1e50:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e54:	add.w	r8, r8, #1
    1e58:	add.w	r9, r9, #96	; 0x60
    1e5c:	cmp	r8, r4
    1e5e:	bne.n	1e46 <regular_setup()+0xd4e>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e60:	adds	r7, #1
    1e62:	ldr	r3, [sp, #4]
    1e64:	adds	r6, #4
    1e66:	cmp	r7, r3
    1e68:	bne.n	1e3e <regular_setup()+0xd46>
    1e6a:	b.n	1cba <regular_setup()+0xbc2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e6c:	movs	r0, #8
    1e6e:	bl	dac0 <random(unsigned long)>
    1e72:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e76:	movs	r0, #8
    1e78:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1e7c:	cmp	r6, #0
    1e7e:	ble.w	1cba <regular_setup()+0xbc2>
    1e82:	add.w	r3, r0, #15
    1e86:	add.w	r4, r4, r4, lsl #1
    1e8a:	movs	r7, #0
    1e8c:	add.w	r4, r3, r4, lsl #3
    1e90:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1e94:	cmp.w	sl, #0
    1e98:	bne.n	1eae <regular_setup()+0xdb6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1e9a:	ldr	r3, [r5, #0]
    1e9c:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1e9e:	adds	r7, #1
    1ea0:	adds	r4, #4
    1ea2:	cmp	r7, r6
    1ea4:	beq.w	1cba <regular_setup()+0xbc2>
      if (rand){
    1ea8:	cmp.w	sl, #0
    1eac:	beq.n	1e9a <regular_setup()+0xda2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1eae:	ldr	r3, [r5, #20]
    1eb0:	ldr	r2, [r5, #16]
    1eb2:	subs	r0, r3, r2
    1eb4:	adds	r0, #2
    1eb6:	bl	dac0 <random(unsigned long)>
    1eba:	ldr	r3, [r5, #16]
    1ebc:	subs	r3, #1
    1ebe:	add	r0, r3
    1ec0:	str	r0, [r4, #0]
    1ec2:	b.n	1e9e <regular_setup()+0xda6>
    1ec4:	add.w	r7, r5, #2304	; 0x900
    1ec8:	add.w	r6, r5, #28
    1ecc:	mov	r4, r5
    1ece:	mov	r8, r7
    1ed0:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ed2:	cmp	r7, #0
    1ed4:	bne.w	27ec <regular_setup()+0x16f4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ed8:	ldr	r3, [r5, #0]
    1eda:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1edc:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1ee0:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1ee2:	str	r3, [r4, #120]	; 0x78
    1ee4:	adds	r4, #96	; 0x60
    1ee6:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1ee8:	cmp	r4, r8
    1eea:	bne.n	1ed2 <regular_setup()+0xdda>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    1eec:	ldr	r3, [pc, #224]	; (1fd0 <regular_setup()+0xed8>)
    1eee:	movs	r1, #4
    1ef0:	movs	r0, #0
    1ef2:	ldr.w	r5, [r3, #440]	; 0x1b8
    1ef6:	bl	dac8 <random(long, long)>
    1efa:	ldr	r3, [pc, #212]	; (1fd0 <regular_setup()+0xed8>)
    1efc:	add.w	r0, r0, r0, lsl #1
    1f00:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1f04:	ldr.w	r2, [r3, #372]	; 0x174
    1f08:	add.w	r3, r3, #372	; 0x174
    1f0c:	subs	r2, #1
    1f0e:	ldr	r4, [r3, #4]
    1f10:	ldrb.w	sl, [r3, #8]
    1f14:	cmp	r2, #4
    1f16:	bhi.w	2aec <regular_setup()+0x19f4>
    1f1a:	tbh	[pc, r2, lsl #1]
    1f1e:	.short	0x01e2
    1f20:	.word	0x015201a6
    1f24:	.word	0x00f20124
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f28:	movs	r0, #8
    1f2a:	mov	r7, r5
    1f2c:	bl	dac0 <random(unsigned long)>
    1f30:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f32:	movs	r0, #8
    1f34:	add.w	fp, r5, #96	; 0x60
    1f38:	bl	dac0 <random(unsigned long)>
    1f3c:	vmov	s15, r4
    1f40:	adds	r6, #8
    1f42:	add.w	r3, r0, #8
    1f46:	vcvt.f64.s32	d9, s15
    1f4a:	rsb	r9, r0, #16
    1f4e:	negs	r3, r3
    1f50:	rsb	r8, r6, #0
    1f54:	str	r3, [sp, #4]
    1f56:	vmov	s15, r8
    1f5a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1f5c:	mov	r6, r7
    1f5e:	vcvt.f64.s32	d8, s15
    1f62:	vmul.f64	d8, d8, d8
    1f66:	b.n	1f74 <regular_setup()+0xe7c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1f68:	ldr	r3, [r5, #0]
    1f6a:	str	r3, [r6, #28]
    1f6c:	adds	r4, #1
    1f6e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f70:	cmp	r4, r9
    1f72:	beq.n	1fc4 <regular_setup()+0xecc>
      double xx = x-midPoint_y;
    1f74:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1f78:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1f7c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1f80:	vfma.f64	d0, d7, d7
    1f84:	vsqrt.f64	d7, d0
    1f88:	vcmp.f64	d7, d7
    1f8c:	vmrs	APSR_nzcv, fpscr
    1f90:	bne.w	2c4c <regular_setup()+0x1b54>
    1f94:	vcmpe.f64	d7, d9
    1f98:	vmrs	APSR_nzcv, fpscr
    1f9c:	bhi.n	1f6c <regular_setup()+0xe74>
        if (rand){
    1f9e:	cmp.w	sl, #0
    1fa2:	beq.n	1f68 <regular_setup()+0xe70>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fa4:	ldr	r3, [r5, #20]
    1fa6:	adds	r4, #1
    1fa8:	ldr	r0, [r5, #16]
    1faa:	adds	r6, #96	; 0x60
    1fac:	subs	r0, r3, r0
    1fae:	adds	r0, #2
    1fb0:	bl	dac0 <random(unsigned long)>
    1fb4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fb6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fb8:	add.w	r3, r3, #4294967295
    1fbc:	add	r0, r3
    1fbe:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fc2:	bne.n	1f74 <regular_setup()+0xe7c>
    1fc4:	adds	r7, #4
    1fc6:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1fca:	cmp	r7, fp
    1fcc:	bne.n	1f56 <regular_setup()+0xe5e>
    1fce:	b.n	1eec <regular_setup()+0xdf4>
    1fd0:	.word	0x20005268
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fd4:	movs	r0, #8
    1fd6:	bl	dac0 <random(unsigned long)>
    1fda:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fde:	movs	r0, #8
    1fe0:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fe4:	cmp	r4, #0
    1fe6:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fe8:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fec:	it	lt
    1fee:	addlt	r3, r4, #1
    1ff0:	cmp	r4, #0
    1ff2:	mov.w	fp, r3, asr #1
    1ff6:	it	lt
    1ff8:	addlt	r4, #1
    1ffa:	rsb	fp, fp, #0
    1ffe:	asrs	r4, r4, #1
    2000:	add.w	r7, r0, fp
    2004:	adds	r3, r4, r0
    2006:	cmp	r3, r7
    2008:	str	r3, [sp, #4]
    200a:	ble.w	1eec <regular_setup()+0xdf4>
    200e:	add	fp, r6
    2010:	add.w	r9, r4, r6
    2014:	add.w	r6, fp, fp, lsl #1
    2018:	add.w	r6, r7, r6, lsl #3
    201c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2020:	cmp	r9, fp
    2022:	ble.n	2040 <regular_setup()+0xf48>
    2024:	mov	r8, r6
    2026:	mov	r4, fp
        if (rand){
    2028:	cmp.w	sl, #0
    202c:	bne.w	25c8 <regular_setup()+0x14d0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2030:	ldr	r3, [r5, #0]
    2032:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2036:	adds	r4, #1
    2038:	add.w	r8, r8, #96	; 0x60
    203c:	cmp	r4, r9
    203e:	bne.n	2028 <regular_setup()+0xf30>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2040:	adds	r7, #1
    2042:	ldr	r3, [sp, #4]
    2044:	adds	r6, #4
    2046:	cmp	r3, r7
    2048:	bne.n	2020 <regular_setup()+0xf28>
    204a:	b.n	1eec <regular_setup()+0xdf4>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    204c:	movs	r0, #8
    204e:	bl	dac0 <random(unsigned long)>
    2052:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2056:	movs	r0, #8
    2058:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    205c:	cmp	r4, #0
    205e:	ble.w	1eec <regular_setup()+0xdf4>
    2062:	add.w	r6, r6, r6, lsl #1
    2066:	add.w	r3, r0, #15
    206a:	mov	r8, r4
    206c:	mov	r4, sl
    206e:	add.w	r6, r3, r6, lsl #3
    2072:	movs	r7, #0
    2074:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2078:	cbnz	r4, 208c <regular_setup()+0xf94>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    207a:	ldr	r3, [r5, #0]
    207c:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    207e:	adds	r7, #1
    2080:	adds	r6, #4
    2082:	cmp	r7, r8
    2084:	beq.w	1eec <regular_setup()+0xdf4>
      if (rand){
    2088:	cmp	r4, #0
    208a:	beq.n	207a <regular_setup()+0xf82>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    208c:	ldr	r3, [r5, #20]
    208e:	ldr	r2, [r5, #16]
    2090:	subs	r0, r3, r2
    2092:	adds	r0, #2
    2094:	bl	dac0 <random(unsigned long)>
    2098:	ldr	r3, [r5, #16]
    209a:	subs	r3, #1
    209c:	add	r0, r3
    209e:	str	r0, [r6, #0]
    20a0:	b.n	207e <regular_setup()+0xf86>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20a2:	cmp	r4, #0
    20a4:	ble.w	1eec <regular_setup()+0xdf4>
    20a8:	mov	r9, r4
    20aa:	movs	r7, #0
    20ac:	mov	r4, sl
    20ae:	b.n	20c4 <regular_setup()+0xfcc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20b0:	add.w	r3, r6, r3, lsl #3
    20b4:	ldr	r2, [r5, #0]
    20b6:	add.w	r3, r5, r3, lsl #2
    20ba:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20bc:	adds	r7, #1
    20be:	cmp	r7, r9
    20c0:	beq.w	1eec <regular_setup()+0xdf4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20c4:	movs	r0, #8
    20c6:	bl	dac0 <random(unsigned long)>
    20ca:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20ce:	movs	r0, #8
    20d0:	bl	dac0 <random(unsigned long)>
    20d4:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20d8:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    20dc:	cmp	r4, #0
    20de:	beq.n	20b0 <regular_setup()+0xfb8>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20e0:	ldr	r3, [r5, #20]
    20e2:	add.w	r8, r8, r8, lsl #1
    20e6:	ldr	r2, [r5, #16]
    20e8:	add.w	r6, r6, r8, lsl #3
    20ec:	subs	r0, r3, r2
    20ee:	add.w	r6, r5, r6, lsl #2
    20f2:	adds	r0, #2
    20f4:	bl	dac0 <random(unsigned long)>
    20f8:	ldr	r3, [r5, #16]
    20fa:	subs	r3, #1
    20fc:	add	r0, r3
    20fe:	str	r0, [r6, #28]
    2100:	b.n	20bc <regular_setup()+0xfc4>
    2102:	add.w	r7, r5, #2304	; 0x900
    2106:	add.w	r6, r5, #28
    210a:	mov	r4, r5
    210c:	mov	r8, r7
    210e:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2110:	cmp	r7, #0
    2112:	bne.w	2750 <regular_setup()+0x1658>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    2116:	ldr	r3, [r5, #0]
    2118:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    211a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    211e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2120:	str	r3, [r4, #120]	; 0x78
    2122:	adds	r4, #96	; 0x60
    2124:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    2126:	cmp	r4, r8
    2128:	bne.n	2110 <regular_setup()+0x1018>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    212a:	ldr	r3, [pc, #812]	; (2458 <regular_setup()+0x1360>)
    212c:	movs	r1, #4
    212e:	movs	r0, #0
    2130:	ldr.w	r5, [r3, #444]	; 0x1bc
    2134:	bl	dac8 <random(long, long)>
    2138:	ldr	r3, [pc, #796]	; (2458 <regular_setup()+0x1360>)
    213a:	add.w	r0, r0, r0, lsl #1
    213e:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    2142:	ldr.w	r2, [r3, #372]	; 0x174
    2146:	add.w	r3, r3, #372	; 0x174
    214a:	subs	r2, #1
    214c:	ldr	r4, [r3, #4]
    214e:	ldrb.w	fp, [r3, #8]
    2152:	cmp	r2, #4
    2154:	bhi.w	2a84 <regular_setup()+0x198c>
    2158:	tbh	[pc, r2, lsl #1]
    215c:	.word	0x01b801f3
    2160:	.word	0x01270157
    2164:	.short	0x00ee
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2166:	cmp	r4, #0
    2168:	ble.n	212a <regular_setup()+0x1032>
    216a:	mov	r9, r4
    216c:	movs	r7, #0
    216e:	mov	r4, sl
    2170:	b.n	2184 <regular_setup()+0x108c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2172:	add.w	r3, r6, r3, lsl #3
    2176:	ldr	r2, [r5, #0]
    2178:	add.w	r3, r5, r3, lsl #2
    217c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    217e:	adds	r7, #1
    2180:	cmp	r7, r9
    2182:	beq.n	212a <regular_setup()+0x1032>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2184:	movs	r0, #8
    2186:	bl	dac0 <random(unsigned long)>
    218a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    218e:	movs	r0, #8
    2190:	bl	dac0 <random(unsigned long)>
    2194:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2198:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    219c:	cmp	r4, #0
    219e:	beq.n	2172 <regular_setup()+0x107a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21a0:	ldr	r3, [r5, #20]
    21a2:	add.w	r8, r8, r8, lsl #1
    21a6:	ldr	r2, [r5, #16]
    21a8:	add.w	r6, r6, r8, lsl #3
    21ac:	subs	r0, r3, r2
    21ae:	add.w	r6, r5, r6, lsl #2
    21b2:	adds	r0, #2
    21b4:	bl	dac0 <random(unsigned long)>
    21b8:	ldr	r3, [r5, #16]
    21ba:	subs	r3, #1
    21bc:	add	r0, r3
    21be:	str	r0, [r6, #28]
    21c0:	b.n	217e <regular_setup()+0x1086>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21c2:	movs	r0, #8
    21c4:	mov	r7, r5
    21c6:	bl	dac0 <random(unsigned long)>
    21ca:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21cc:	movs	r0, #8
    21ce:	add.w	fp, r5, #96	; 0x60
    21d2:	bl	dac0 <random(unsigned long)>
    21d6:	vmov	s15, r4
    21da:	adds	r6, #8
    21dc:	add.w	r3, r0, #8
    21e0:	vcvt.f64.s32	d9, s15
    21e4:	rsb	r9, r0, #16
    21e8:	negs	r3, r3
    21ea:	rsb	r8, r6, #0
    21ee:	str	r3, [sp, #4]
    21f0:	vmov	s15, r8
    21f4:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    21f6:	mov	r6, r7
    21f8:	vcvt.f64.s32	d8, s15
    21fc:	vmul.f64	d8, d8, d8
    2200:	b.n	220e <regular_setup()+0x1116>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2202:	ldr	r3, [r5, #0]
    2204:	str	r3, [r6, #28]
    2206:	adds	r4, #1
    2208:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    220a:	cmp	r9, r4
    220c:	beq.n	225e <regular_setup()+0x1166>
      double xx = x-midPoint_y;
    220e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2212:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2216:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    221a:	vfma.f64	d0, d7, d7
    221e:	vsqrt.f64	d7, d0
    2222:	vcmp.f64	d7, d7
    2226:	vmrs	APSR_nzcv, fpscr
    222a:	bne.w	2c40 <regular_setup()+0x1b48>
    222e:	vcmpe.f64	d7, d9
    2232:	vmrs	APSR_nzcv, fpscr
    2236:	bhi.n	2206 <regular_setup()+0x110e>
        if (rand){
    2238:	cmp.w	sl, #0
    223c:	beq.n	2202 <regular_setup()+0x110a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    223e:	ldr	r3, [r5, #20]
    2240:	adds	r4, #1
    2242:	ldr	r0, [r5, #16]
    2244:	adds	r6, #96	; 0x60
    2246:	subs	r0, r3, r0
    2248:	adds	r0, #2
    224a:	bl	dac0 <random(unsigned long)>
    224e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2250:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2252:	add.w	r3, r3, #4294967295
    2256:	add	r0, r3
    2258:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    225c:	bne.n	220e <regular_setup()+0x1116>
    225e:	adds	r7, #4
    2260:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2264:	cmp	fp, r7
    2266:	bne.n	21f0 <regular_setup()+0x10f8>
    2268:	b.n	212a <regular_setup()+0x1032>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    226a:	movs	r0, #8
    226c:	bl	dac0 <random(unsigned long)>
    2270:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2274:	movs	r0, #8
    2276:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    227a:	cmp	r4, #0
    227c:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    227e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2282:	it	lt
    2284:	addlt	r3, r4, #1
    2286:	cmp	r4, #0
    2288:	mov.w	fp, r3, asr #1
    228c:	it	lt
    228e:	addlt	r4, #1
    2290:	rsb	fp, fp, #0
    2294:	asrs	r4, r4, #1
    2296:	add.w	r7, r0, fp
    229a:	adds	r3, r4, r0
    229c:	cmp	r7, r3
    229e:	str	r3, [sp, #4]
    22a0:	bge.w	212a <regular_setup()+0x1032>
    22a4:	add	fp, r6
    22a6:	add.w	r9, r4, r6
    22aa:	add.w	r6, fp, fp, lsl #1
    22ae:	add.w	r6, r7, r6, lsl #3
    22b2:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22b6:	cmp	fp, r9
    22b8:	bge.n	22d6 <regular_setup()+0x11de>
    22ba:	mov	r8, r6
    22bc:	mov	r4, fp
        if (rand){
    22be:	cmp.w	sl, #0
    22c2:	bne.w	25b0 <regular_setup()+0x14b8>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    22c6:	ldr	r3, [r5, #0]
    22c8:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22cc:	adds	r4, #1
    22ce:	add.w	r8, r8, #96	; 0x60
    22d2:	cmp	r4, r9
    22d4:	bne.n	22be <regular_setup()+0x11c6>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    22d6:	adds	r7, #1
    22d8:	ldr	r3, [sp, #4]
    22da:	adds	r6, #4
    22dc:	cmp	r7, r3
    22de:	bne.n	22b6 <regular_setup()+0x11be>
    22e0:	b.n	212a <regular_setup()+0x1032>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22e2:	movs	r0, #8
    22e4:	bl	dac0 <random(unsigned long)>
    22e8:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22ec:	movs	r0, #8
    22ee:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    22f2:	cmp	r4, #0
    22f4:	ble.w	212a <regular_setup()+0x1032>
    22f8:	add.w	r3, r0, #15
    22fc:	add.w	r6, r6, r6, lsl #1
    2300:	mov	r8, r4
    2302:	mov	r4, sl
    2304:	add.w	r6, r3, r6, lsl #3
    2308:	movs	r7, #0
    230a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    230e:	cbnz	r4, 2322 <regular_setup()+0x122a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2310:	ldr	r3, [r5, #0]
    2312:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2314:	adds	r7, #1
    2316:	adds	r6, #4
    2318:	cmp	r7, r8
    231a:	beq.w	212a <regular_setup()+0x1032>
      if (rand){
    231e:	cmp	r4, #0
    2320:	beq.n	2310 <regular_setup()+0x1218>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2322:	ldr	r3, [r5, #20]
    2324:	ldr	r2, [r5, #16]
    2326:	subs	r0, r3, r2
    2328:	adds	r0, #2
    232a:	bl	dac0 <random(unsigned long)>
    232e:	ldr	r3, [r5, #16]
    2330:	subs	r3, #1
    2332:	add	r0, r3
    2334:	str	r0, [r6, #0]
    2336:	b.n	2314 <regular_setup()+0x121c>
    2338:	add.w	r7, r5, #2304	; 0x900
    233c:	add.w	r6, r5, #28
    2340:	mov	r4, r5
    2342:	mov	r8, r7
    2344:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2346:	cmp	r7, #0
    2348:	bne.w	279e <regular_setup()+0x16a6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    234c:	ldr	r3, [r5, #0]
    234e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2350:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2354:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2356:	str	r3, [r4, #120]	; 0x78
    2358:	adds	r4, #96	; 0x60
    235a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    235c:	cmp	r4, r8
    235e:	bne.n	2346 <regular_setup()+0x124e>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2360:	ldr	r3, [pc, #248]	; (245c <regular_setup()+0x1364>)
    2362:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2364:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2366:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2368:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    236a:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    236c:	cmp	r3, r1
    236e:	it	eq
    2370:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2372:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2374:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2376:	ite	eq
    2378:	moveq	r5, #1
    237a:	movne	r5, #0
    237c:	cmp	r5, #0
    237e:	beq.n	2368 <regular_setup()+0x1270>
    2380:	lsrs	r1, r3, #5
    2382:	ldr	r3, [pc, #220]	; (2460 <regular_setup()+0x1368>)
    2384:	orr.w	r1, r1, r2, lsl #27
    2388:	vmov	s15, r1
    238c:	vldr	d5, [pc, #192]	; 2450 <regular_setup()+0x1358>
    2390:	vcvt.f64.u32	d7, s15
    2394:	vdiv.f64	d6, d7, d5
    2398:	vcvt.u32.f64	s12, d6
    239c:	vstr	s12, [r3]
  screen_A.init_screen();
  screen_B.init_screen();
  sinceAutomatonInit = 0;
}
    23a0:	add	sp, #12
    23a2:	vpop	{d8-d9}
    23a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23aa:	cmp	r4, #0
    23ac:	ble.n	2360 <regular_setup()+0x1268>
    23ae:	mov	r9, r4
    23b0:	mov.w	r8, #0
    23b4:	mov	r4, fp
    23b6:	b.n	23cc <regular_setup()+0x12d4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23b8:	add.w	r3, r6, r3, lsl #3
    23bc:	ldr	r2, [r5, #0]
    23be:	add.w	r3, r5, r3, lsl #2
    23c2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23c4:	add.w	r8, r8, #1
    23c8:	cmp	r8, r9
    23ca:	beq.n	2360 <regular_setup()+0x1268>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23cc:	movs	r0, #8
    23ce:	bl	dac0 <random(unsigned long)>
    23d2:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23d6:	movs	r0, #8
    23d8:	bl	dac0 <random(unsigned long)>
    23dc:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23e0:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    23e4:	cmp	r4, #0
    23e6:	beq.n	23b8 <regular_setup()+0x12c0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    23e8:	ldr	r3, [r5, #20]
    23ea:	add.w	r7, r7, r7, lsl #1
    23ee:	ldr	r2, [r5, #16]
    23f0:	add.w	r6, r6, r7, lsl #3
    23f4:	subs	r0, r3, r2
    23f6:	add.w	r6, r5, r6, lsl #2
    23fa:	adds	r0, #2
    23fc:	bl	dac0 <random(unsigned long)>
    2400:	ldr	r3, [r5, #16]
    2402:	subs	r3, #1
    2404:	add	r0, r3
    2406:	str	r0, [r6, #28]
    2408:	b.n	23c4 <regular_setup()+0x12cc>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    240a:	movs	r0, #8
    240c:	mov	r7, r5
    240e:	bl	dac0 <random(unsigned long)>
    2412:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2414:	movs	r0, #8
    2416:	add.w	r9, r5, #96	; 0x60
    241a:	bl	dac0 <random(unsigned long)>
    241e:	vmov	s15, r4
    2422:	adds	r6, #8
    2424:	add.w	r3, r0, #8
    2428:	vcvt.f64.s32	d9, s15
    242c:	rsb	sl, r0, #16
    2430:	negs	r3, r3
    2432:	rsb	r8, r6, #0
    2436:	str	r3, [sp, #4]
    2438:	vmov	s15, r8
    243c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    243e:	mov	r6, r7
    2440:	vcvt.f64.s32	d8, s15
    2444:	vmul.f64	d8, d8, d8
    2448:	b.n	2470 <regular_setup()+0x1378>
    244a:	nop
    244c:	nop.w
    2450:	.word	0xd2f1a9fc
    2454:	.word	0x3ff0624d
    2458:	.word	0x20005268
    245c:	.word	0x400d4000
    2460:	.word	0x20007a60
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2464:	ldr	r3, [r5, #0]
    2466:	str	r3, [r6, #28]
    2468:	adds	r4, #1
    246a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    246c:	cmp	sl, r4
    246e:	beq.n	24c0 <regular_setup()+0x13c8>
      double xx = x-midPoint_y;
    2470:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2474:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2478:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    247c:	vfma.f64	d0, d7, d7
    2480:	vsqrt.f64	d7, d0
    2484:	vcmp.f64	d7, d7
    2488:	vmrs	APSR_nzcv, fpscr
    248c:	bne.w	2c36 <regular_setup()+0x1b3e>
    2490:	vcmpe.f64	d7, d9
    2494:	vmrs	APSR_nzcv, fpscr
    2498:	bhi.n	2468 <regular_setup()+0x1370>
        if (rand){
    249a:	cmp.w	fp, #0
    249e:	beq.n	2464 <regular_setup()+0x136c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24a0:	ldr	r3, [r5, #20]
    24a2:	adds	r4, #1
    24a4:	ldr	r0, [r5, #16]
    24a6:	adds	r6, #96	; 0x60
    24a8:	subs	r0, r3, r0
    24aa:	adds	r0, #2
    24ac:	bl	dac0 <random(unsigned long)>
    24b0:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24b2:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24b4:	add.w	r3, r3, #4294967295
    24b8:	add	r0, r3
    24ba:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24be:	bne.n	2470 <regular_setup()+0x1378>
    24c0:	adds	r7, #4
    24c2:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    24c6:	cmp	r9, r7
    24c8:	bne.n	2438 <regular_setup()+0x1340>
    24ca:	b.n	2360 <regular_setup()+0x1268>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24cc:	movs	r0, #8
    24ce:	bl	dac0 <random(unsigned long)>
    24d2:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24d6:	movs	r0, #8
    24d8:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24dc:	cmp	r4, #0
    24de:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24e0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24e4:	it	lt
    24e6:	addlt	r3, r4, #1
    24e8:	cmp	r4, #0
    24ea:	mov.w	r8, r3, asr #1
    24ee:	it	lt
    24f0:	addlt	r4, #1
    24f2:	rsb	r8, r8, #0
    24f6:	asrs	r4, r4, #1
    24f8:	add.w	r7, r0, r8
    24fc:	adds	r3, r4, r0
    24fe:	cmp	r7, r3
    2500:	str	r3, [sp, #4]
    2502:	bge.w	2360 <regular_setup()+0x1268>
    2506:	add	r8, r6
    2508:	add.w	sl, r4, r6
    250c:	add.w	r6, r8, r8, lsl #1
    2510:	add.w	r6, r7, r6, lsl #3
    2514:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2518:	cmp	sl, r8
    251a:	ble.n	2536 <regular_setup()+0x143e>
    251c:	mov	r9, r6
    251e:	mov	r4, r8
        if (rand){
    2520:	cmp.w	fp, #0
    2524:	bne.n	2598 <regular_setup()+0x14a0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2526:	ldr	r3, [r5, #0]
    2528:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    252c:	adds	r4, #1
    252e:	add.w	r9, r9, #96	; 0x60
    2532:	cmp	r4, sl
    2534:	bne.n	2520 <regular_setup()+0x1428>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2536:	adds	r7, #1
    2538:	ldr	r3, [sp, #4]
    253a:	adds	r6, #4
    253c:	cmp	r7, r3
    253e:	bne.n	2518 <regular_setup()+0x1420>
    2540:	b.n	2360 <regular_setup()+0x1268>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2542:	movs	r0, #8
    2544:	bl	dac0 <random(unsigned long)>
    2548:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    254c:	movs	r0, #8
    254e:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2552:	cmp	r4, #0
    2554:	ble.w	2360 <regular_setup()+0x1268>
    2558:	add.w	r6, r6, r6, lsl #1
    255c:	add.w	r3, r0, #15
    2560:	mov	r8, r4
    2562:	mov	r4, fp
    2564:	add.w	r6, r3, r6, lsl #3
    2568:	movs	r7, #0
    256a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    256e:	cbnz	r4, 2582 <regular_setup()+0x148a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2570:	ldr	r3, [r5, #0]
    2572:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2574:	adds	r7, #1
    2576:	adds	r6, #4
    2578:	cmp	r7, r8
    257a:	beq.w	2360 <regular_setup()+0x1268>
      if (rand){
    257e:	cmp	r4, #0
    2580:	beq.n	2570 <regular_setup()+0x1478>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2582:	ldr	r3, [r5, #20]
    2584:	ldr	r2, [r5, #16]
    2586:	subs	r0, r3, r2
    2588:	adds	r0, #2
    258a:	bl	dac0 <random(unsigned long)>
    258e:	ldr	r3, [r5, #16]
    2590:	subs	r3, #1
    2592:	add	r0, r3
    2594:	str	r0, [r6, #0]
    2596:	b.n	2574 <regular_setup()+0x147c>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2598:	ldr	r3, [r5, #20]
    259a:	ldr	r0, [r5, #16]
    259c:	subs	r0, r3, r0
    259e:	adds	r0, #2
    25a0:	bl	dac0 <random(unsigned long)>
    25a4:	ldr	r3, [r5, #16]
    25a6:	subs	r3, #1
    25a8:	add	r0, r3
    25aa:	str.w	r0, [r9, #28]
    25ae:	b.n	252c <regular_setup()+0x1434>
    25b0:	ldr	r3, [r5, #20]
    25b2:	ldr	r0, [r5, #16]
    25b4:	subs	r0, r3, r0
    25b6:	adds	r0, #2
    25b8:	bl	dac0 <random(unsigned long)>
    25bc:	ldr	r3, [r5, #16]
    25be:	subs	r3, #1
    25c0:	add	r0, r3
    25c2:	str.w	r0, [r8, #28]
    25c6:	b.n	22cc <regular_setup()+0x11d4>
    25c8:	ldr	r3, [r5, #20]
    25ca:	ldr	r0, [r5, #16]
    25cc:	subs	r0, r3, r0
    25ce:	adds	r0, #2
    25d0:	bl	dac0 <random(unsigned long)>
    25d4:	ldr	r3, [r5, #16]
    25d6:	subs	r3, #1
    25d8:	add	r0, r3
    25da:	str.w	r0, [r8, #28]
    25de:	b.n	2036 <regular_setup()+0xf3e>
    25e0:	ldr	r3, [r5, #20]
    25e2:	ldr	r0, [r5, #16]
    25e4:	subs	r0, r3, r0
    25e6:	adds	r0, #2
    25e8:	bl	dac0 <random(unsigned long)>
    25ec:	ldr	r3, [r5, #16]
    25ee:	subs	r3, #1
    25f0:	add	r0, r3
    25f2:	str.w	r0, [r9, #28]
    25f6:	b.n	1e54 <regular_setup()+0xd5c>
    25f8:	ldr	r3, [r5, #20]
    25fa:	ldr	r0, [r5, #16]
    25fc:	subs	r0, r3, r0
    25fe:	adds	r0, #2
    2600:	bl	dac0 <random(unsigned long)>
    2604:	ldr	r3, [r5, #16]
    2606:	subs	r3, #1
    2608:	add	r0, r3
    260a:	str.w	r0, [r9, #28]
    260e:	b.w	1c22 <regular_setup()+0xb2a>
    2612:	ldr	r3, [r5, #20]
    2614:	ldr	r0, [r5, #16]
    2616:	subs	r0, r3, r0
    2618:	adds	r0, #2
    261a:	bl	dac0 <random(unsigned long)>
    261e:	ldr	r3, [r5, #16]
    2620:	subs	r3, #1
    2622:	add	r0, r3
    2624:	str.w	r0, [r9, #28]
    2628:	b.w	160a <regular_setup()+0x512>
    262c:	ldr	r3, [r5, #20]
    262e:	ldr	r0, [r5, #16]
    2630:	subs	r0, r3, r0
    2632:	adds	r0, #2
    2634:	bl	dac0 <random(unsigned long)>
    2638:	ldr	r3, [r5, #16]
    263a:	subs	r3, #1
    263c:	add	r0, r3
    263e:	str.w	r0, [r9, #28]
    2642:	b.w	18b4 <regular_setup()+0x7bc>
    2646:	ldr	r3, [r5, #20]
    2648:	ldr	r0, [r5, #16]
    264a:	subs	r0, r3, r0
    264c:	adds	r0, #2
    264e:	bl	dac0 <random(unsigned long)>
    2652:	ldr	r3, [r5, #16]
    2654:	subs	r3, #1
    2656:	add	r0, r3
    2658:	str.w	r0, [r9, #28]
    265c:	b.w	1372 <regular_setup()+0x27a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2660:	ldr	r3, [r5, #20]
    2662:	ldr	r2, [r5, #16]
    2664:	subs	r0, r3, r2
    2666:	adds	r0, #2
    2668:	bl	dac0 <random(unsigned long)>
    266c:	ldr	r1, [r5, #16]
    266e:	subs	r2, r1, #1
    2670:	add	r0, r2
    2672:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2674:	ldr	r3, [r5, #20]
    2676:	subs	r0, r3, r1
    2678:	adds	r0, #2
    267a:	bl	dac0 <random(unsigned long)>
    267e:	ldr	r1, [r5, #16]
    2680:	subs	r2, r1, #1
    2682:	add	r0, r2
    2684:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2688:	ldr	r3, [r5, #20]
    268a:	subs	r0, r3, r1
    268c:	adds	r0, #2
    268e:	bl	dac0 <random(unsigned long)>
    2692:	ldr	r1, [r5, #16]
    2694:	subs	r2, r1, #1
    2696:	add	r0, r2
    2698:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    269a:	ldr	r3, [r5, #20]
    269c:	subs	r0, r3, r1
    269e:	adds	r0, #2
    26a0:	bl	dac0 <random(unsigned long)>
    26a4:	ldr	r3, [r5, #16]
    26a6:	subs	r3, #1
    26a8:	add	r0, r3
    26aa:	str	r0, [r4, #120]	; 0x78
    26ac:	b.w	128c <regular_setup()+0x194>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26b0:	ldr	r3, [r5, #20]
    26b2:	ldr	r2, [r5, #16]
    26b4:	subs	r0, r3, r2
    26b6:	adds	r0, #2
    26b8:	bl	dac0 <random(unsigned long)>
    26bc:	ldr	r1, [r5, #16]
    26be:	subs	r2, r1, #1
    26c0:	add	r0, r2
    26c2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26c4:	ldr	r3, [r5, #20]
    26c6:	subs	r0, r3, r1
    26c8:	adds	r0, #2
    26ca:	bl	dac0 <random(unsigned long)>
    26ce:	ldr	r1, [r5, #16]
    26d0:	subs	r2, r1, #1
    26d2:	add	r0, r2
    26d4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26d8:	ldr	r3, [r5, #20]
    26da:	subs	r0, r3, r1
    26dc:	adds	r0, #2
    26de:	bl	dac0 <random(unsigned long)>
    26e2:	ldr	r1, [r5, #16]
    26e4:	subs	r2, r1, #1
    26e6:	add	r0, r2
    26e8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26ea:	ldr	r3, [r5, #20]
    26ec:	subs	r0, r3, r1
    26ee:	adds	r0, #2
    26f0:	bl	dac0 <random(unsigned long)>
    26f4:	ldr	r3, [r5, #16]
    26f6:	subs	r3, #1
    26f8:	add	r0, r3
    26fa:	str	r0, [r4, #120]	; 0x78
    26fc:	b.w	1700 <regular_setup()+0x608>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2700:	ldr	r3, [r5, #20]
    2702:	ldr	r2, [r5, #16]
    2704:	subs	r0, r3, r2
    2706:	adds	r0, #2
    2708:	bl	dac0 <random(unsigned long)>
    270c:	ldr	r1, [r5, #16]
    270e:	subs	r2, r1, #1
    2710:	add	r0, r2
    2712:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2714:	ldr	r3, [r5, #20]
    2716:	subs	r0, r3, r1
    2718:	adds	r0, #2
    271a:	bl	dac0 <random(unsigned long)>
    271e:	ldr	r1, [r5, #16]
    2720:	subs	r2, r1, #1
    2722:	add	r0, r2
    2724:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2728:	ldr	r3, [r5, #20]
    272a:	subs	r0, r3, r1
    272c:	adds	r0, #2
    272e:	bl	dac0 <random(unsigned long)>
    2732:	ldr	r1, [r5, #16]
    2734:	subs	r2, r1, #1
    2736:	add	r0, r2
    2738:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    273a:	ldr	r3, [r5, #20]
    273c:	subs	r0, r3, r1
    273e:	adds	r0, #2
    2740:	bl	dac0 <random(unsigned long)>
    2744:	ldr	r3, [r5, #16]
    2746:	subs	r3, #1
    2748:	add	r0, r3
    274a:	str	r0, [r4, #120]	; 0x78
    274c:	b.w	14be <regular_setup()+0x3c6>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2750:	ldr	r3, [r5, #20]
    2752:	ldr	r2, [r5, #16]
    2754:	subs	r0, r3, r2
    2756:	adds	r0, #2
    2758:	bl	dac0 <random(unsigned long)>
    275c:	ldr	r1, [r5, #16]
    275e:	subs	r2, r1, #1
    2760:	add	r0, r2
    2762:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2764:	ldr	r3, [r5, #20]
    2766:	subs	r0, r3, r1
    2768:	adds	r0, #2
    276a:	bl	dac0 <random(unsigned long)>
    276e:	ldr	r1, [r5, #16]
    2770:	subs	r2, r1, #1
    2772:	add	r0, r2
    2774:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2778:	ldr	r3, [r5, #20]
    277a:	subs	r0, r3, r1
    277c:	adds	r0, #2
    277e:	bl	dac0 <random(unsigned long)>
    2782:	ldr	r1, [r5, #16]
    2784:	subs	r2, r1, #1
    2786:	add	r0, r2
    2788:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    278a:	ldr	r3, [r5, #20]
    278c:	subs	r0, r3, r1
    278e:	adds	r0, #2
    2790:	bl	dac0 <random(unsigned long)>
    2794:	ldr	r3, [r5, #16]
    2796:	subs	r3, #1
    2798:	add	r0, r3
    279a:	str	r0, [r4, #120]	; 0x78
    279c:	b.n	2122 <regular_setup()+0x102a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    279e:	ldr	r3, [r5, #20]
    27a0:	ldr	r2, [r5, #16]
    27a2:	subs	r0, r3, r2
    27a4:	adds	r0, #2
    27a6:	bl	dac0 <random(unsigned long)>
    27aa:	ldr	r1, [r5, #16]
    27ac:	subs	r2, r1, #1
    27ae:	add	r0, r2
    27b0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27b2:	ldr	r3, [r5, #20]
    27b4:	subs	r0, r3, r1
    27b6:	adds	r0, #2
    27b8:	bl	dac0 <random(unsigned long)>
    27bc:	ldr	r1, [r5, #16]
    27be:	subs	r2, r1, #1
    27c0:	add	r0, r2
    27c2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27c6:	ldr	r3, [r5, #20]
    27c8:	subs	r0, r3, r1
    27ca:	adds	r0, #2
    27cc:	bl	dac0 <random(unsigned long)>
    27d0:	ldr	r1, [r5, #16]
    27d2:	subs	r2, r1, #1
    27d4:	add	r0, r2
    27d6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27d8:	ldr	r3, [r5, #20]
    27da:	subs	r0, r3, r1
    27dc:	adds	r0, #2
    27de:	bl	dac0 <random(unsigned long)>
    27e2:	ldr	r3, [r5, #16]
    27e4:	subs	r3, #1
    27e6:	add	r0, r3
    27e8:	str	r0, [r4, #120]	; 0x78
    27ea:	b.n	2358 <regular_setup()+0x1260>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27ec:	ldr	r3, [r5, #20]
    27ee:	ldr	r2, [r5, #16]
    27f0:	subs	r0, r3, r2
    27f2:	adds	r0, #2
    27f4:	bl	dac0 <random(unsigned long)>
    27f8:	ldr	r1, [r5, #16]
    27fa:	subs	r2, r1, #1
    27fc:	add	r0, r2
    27fe:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2800:	ldr	r3, [r5, #20]
    2802:	subs	r0, r3, r1
    2804:	adds	r0, #2
    2806:	bl	dac0 <random(unsigned long)>
    280a:	ldr	r1, [r5, #16]
    280c:	subs	r2, r1, #1
    280e:	add	r0, r2
    2810:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2814:	ldr	r3, [r5, #20]
    2816:	subs	r0, r3, r1
    2818:	adds	r0, #2
    281a:	bl	dac0 <random(unsigned long)>
    281e:	ldr	r1, [r5, #16]
    2820:	subs	r2, r1, #1
    2822:	add	r0, r2
    2824:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2826:	ldr	r3, [r5, #20]
    2828:	subs	r0, r3, r1
    282a:	adds	r0, #2
    282c:	bl	dac0 <random(unsigned long)>
    2830:	ldr	r3, [r5, #16]
    2832:	subs	r3, #1
    2834:	add	r0, r3
    2836:	str	r0, [r4, #120]	; 0x78
    2838:	b.w	1ee4 <regular_setup()+0xdec>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    283c:	ldr	r3, [r5, #20]
    283e:	ldr	r2, [r5, #16]
    2840:	subs	r0, r3, r2
    2842:	adds	r0, #2
    2844:	bl	dac0 <random(unsigned long)>
    2848:	ldr	r1, [r5, #16]
    284a:	subs	r2, r1, #1
    284c:	add	r0, r2
    284e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2850:	ldr	r3, [r5, #20]
    2852:	subs	r0, r3, r1
    2854:	adds	r0, #2
    2856:	bl	dac0 <random(unsigned long)>
    285a:	ldr	r1, [r5, #16]
    285c:	subs	r2, r1, #1
    285e:	add	r0, r2
    2860:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2864:	ldr	r3, [r5, #20]
    2866:	subs	r0, r3, r1
    2868:	adds	r0, #2
    286a:	bl	dac0 <random(unsigned long)>
    286e:	ldr	r1, [r5, #16]
    2870:	subs	r2, r1, #1
    2872:	add	r0, r2
    2874:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2876:	ldr	r3, [r5, #20]
    2878:	subs	r0, r3, r1
    287a:	adds	r0, #2
    287c:	bl	dac0 <random(unsigned long)>
    2880:	ldr	r3, [r5, #16]
    2882:	subs	r3, #1
    2884:	add	r0, r3
    2886:	str	r0, [r4, #120]	; 0x78
    2888:	b.w	1942 <regular_setup()+0x84a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    288c:	ldr	r3, [r5, #20]
    288e:	ldr	r2, [r5, #16]
    2890:	subs	r0, r3, r2
    2892:	adds	r0, #2
    2894:	bl	dac0 <random(unsigned long)>
    2898:	ldr	r1, [r5, #16]
    289a:	subs	r2, r1, #1
    289c:	add	r0, r2
    289e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28a0:	ldr	r3, [r5, #20]
    28a2:	subs	r0, r3, r1
    28a4:	adds	r0, #2
    28a6:	bl	dac0 <random(unsigned long)>
    28aa:	ldr	r1, [r5, #16]
    28ac:	subs	r2, r1, #1
    28ae:	add	r0, r2
    28b0:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28b4:	ldr	r3, [r5, #20]
    28b6:	subs	r0, r3, r1
    28b8:	adds	r0, #2
    28ba:	bl	dac0 <random(unsigned long)>
    28be:	ldr	r1, [r5, #16]
    28c0:	subs	r2, r1, #1
    28c2:	add	r0, r2
    28c4:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28c6:	ldr	r3, [r5, #20]
    28c8:	subs	r0, r3, r1
    28ca:	adds	r0, #2
    28cc:	bl	dac0 <random(unsigned long)>
    28d0:	ldr	r3, [r5, #16]
    28d2:	subs	r3, #1
    28d4:	add	r0, r3
    28d6:	str	r0, [r4, #120]	; 0x78
    28d8:	b.w	1cb2 <regular_setup()+0xbba>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    28dc:	movw	sl, #4636	; 0x121c
    28e0:	add.w	r3, r5, #28
    28e4:	movs	r7, #0
    28e6:	add.w	r9, r5, #4640	; 0x1220
    28ea:	add	sl, r5
    28ec:	str	r3, [sp, #4]
    28ee:	mov.w	r8, r7, lsl #3
    28f2:	ldr	r6, [sp, #4]
    28f4:	movs	r4, #0
    28f6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    28fa:	ldrb	r2, [r5, #24]
      return _background[x][y];
    28fc:	add	r3, r4
    28fe:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2900:	cbnz	r2, 2906 <regular_setup()+0x180e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2902:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2906:	cbnz	r3, 2922 <regular_setup()+0x182a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2908:	adds	r4, #1
    290a:	adds	r6, #4
    290c:	cmp	r4, #24
    290e:	bne.n	28f6 <regular_setup()+0x17fe>
    2910:	ldr	r3, [sp, #4]
    2912:	adds	r7, #24
    2914:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2916:	cmp.w	r7, #576	; 0x240
    291a:	str	r3, [sp, #4]
    291c:	bne.n	28ee <regular_setup()+0x17f6>
    291e:	b.w	1708 <regular_setup()+0x610>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2922:	ldr	r2, [r5, #20]
    2924:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2926:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    292a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    292c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    292e:	adds	r0, #2
    2930:	ldr.w	fp, [r3, r4, lsl #3]
    2934:	bl	dac0 <random(unsigned long)>
    2938:	ldr	r3, [r5, #16]
    293a:	rsb	r3, r3, fp
    293e:	adds	r3, #1
    2940:	subs	r0, r3, r0
    2942:	str	r0, [r6, #0]
    2944:	b.n	2908 <regular_setup()+0x1810>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2946:	movw	sl, #4636	; 0x121c
    294a:	add.w	r3, r5, #28
    294e:	movs	r7, #0
    2950:	add.w	r9, r5, #4640	; 0x1220
    2954:	add	sl, r5
    2956:	str	r3, [sp, #4]
    2958:	mov.w	r8, r7, lsl #3
    295c:	ldr	r6, [sp, #4]
    295e:	movs	r4, #0
    2960:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2964:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2966:	add	r3, r4
    2968:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    296a:	cbnz	r2, 2970 <regular_setup()+0x1878>
      return _background[x][y];
    } else {
      return !_background[x][y];
    296c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2970:	cbnz	r3, 298c <regular_setup()+0x1894>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2972:	adds	r4, #1
    2974:	adds	r6, #4
    2976:	cmp	r4, #24
    2978:	bne.n	2960 <regular_setup()+0x1868>
    297a:	ldr	r3, [sp, #4]
    297c:	adds	r7, #24
    297e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2980:	cmp.w	r7, #576	; 0x240
    2984:	str	r3, [sp, #4]
    2986:	bne.n	2958 <regular_setup()+0x1860>
    2988:	b.w	1294 <regular_setup()+0x19c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    298c:	ldr	r2, [r5, #20]
    298e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2990:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2994:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2996:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2998:	adds	r0, #2
    299a:	ldr.w	fp, [r3, r4, lsl #3]
    299e:	bl	dac0 <random(unsigned long)>
    29a2:	ldr	r3, [r5, #16]
    29a4:	rsb	r3, r3, fp
    29a8:	adds	r3, #1
    29aa:	subs	r0, r3, r0
    29ac:	str	r0, [r6, #0]
    29ae:	b.n	2972 <regular_setup()+0x187a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29b0:	movw	sl, #4636	; 0x121c
    29b4:	add.w	r3, r5, #28
    29b8:	movs	r7, #0
    29ba:	add.w	r9, r5, #4640	; 0x1220
    29be:	add	sl, r5
    29c0:	str	r3, [sp, #4]
    29c2:	mov.w	r8, r7, lsl #3
    29c6:	ldr	r6, [sp, #4]
    29c8:	movs	r4, #0
    29ca:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29ce:	ldrb	r2, [r5, #24]
      return _background[x][y];
    29d0:	add	r3, r4
    29d2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29d4:	cbnz	r2, 29da <regular_setup()+0x18e2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    29d6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    29da:	cbnz	r3, 29f6 <regular_setup()+0x18fe>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    29dc:	adds	r4, #1
    29de:	adds	r6, #4
    29e0:	cmp	r4, #24
    29e2:	bne.n	29ca <regular_setup()+0x18d2>
    29e4:	ldr	r3, [sp, #4]
    29e6:	adds	r7, #24
    29e8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    29ea:	cmp.w	r7, #576	; 0x240
    29ee:	str	r3, [sp, #4]
    29f0:	bne.n	29c2 <regular_setup()+0x18ca>
    29f2:	b.w	1eec <regular_setup()+0xdf4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29f6:	ldr	r2, [r5, #20]
    29f8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29fa:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29fe:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a00:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a02:	adds	r0, #2
    2a04:	ldr.w	fp, [r3, r4, lsl #3]
    2a08:	bl	dac0 <random(unsigned long)>
    2a0c:	ldr	r3, [r5, #16]
    2a0e:	rsb	r3, r3, fp
    2a12:	adds	r3, #1
    2a14:	subs	r0, r3, r0
    2a16:	str	r0, [r6, #0]
    2a18:	b.n	29dc <regular_setup()+0x18e4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a1a:	movw	sl, #4636	; 0x121c
    2a1e:	add.w	r3, r5, #28
    2a22:	movs	r7, #0
    2a24:	add.w	r9, r5, #4640	; 0x1220
    2a28:	add	sl, r5
    2a2a:	str	r3, [sp, #4]
    2a2c:	mov.w	r8, r7, lsl #3
    2a30:	ldr	r6, [sp, #4]
    2a32:	movs	r4, #0
    2a34:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a38:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2a3a:	add	r3, r4
    2a3c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a3e:	cbnz	r2, 2a44 <regular_setup()+0x194c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2a40:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2a44:	cbnz	r3, 2a60 <regular_setup()+0x1968>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2a46:	adds	r4, #1
    2a48:	adds	r6, #4
    2a4a:	cmp	r4, #24
    2a4c:	bne.n	2a34 <regular_setup()+0x193c>
    2a4e:	ldr	r3, [sp, #4]
    2a50:	adds	r7, #24
    2a52:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2a54:	cmp.w	r7, #576	; 0x240
    2a58:	str	r3, [sp, #4]
    2a5a:	bne.n	2a2c <regular_setup()+0x1934>
    2a5c:	b.w	14c6 <regular_setup()+0x3ce>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a60:	ldr	r2, [r5, #20]
    2a62:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a64:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a68:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a6a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a6c:	adds	r0, #2
    2a6e:	ldr.w	fp, [r3, r4, lsl #3]
    2a72:	bl	dac0 <random(unsigned long)>
    2a76:	ldr	r3, [r5, #16]
    2a78:	rsb	r3, r3, fp
    2a7c:	adds	r3, #1
    2a7e:	subs	r0, r3, r0
    2a80:	str	r0, [r6, #0]
    2a82:	b.n	2a46 <regular_setup()+0x194e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a84:	movw	sl, #4636	; 0x121c
    2a88:	add.w	r3, r5, #28
    2a8c:	movs	r7, #0
    2a8e:	add.w	r9, r5, #4640	; 0x1220
    2a92:	add	sl, r5
    2a94:	str	r3, [sp, #4]
    2a96:	mov.w	r8, r7, lsl #3
    2a9a:	ldr	r6, [sp, #4]
    2a9c:	movs	r4, #0
    2a9e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2aa2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2aa4:	add	r3, r4
    2aa6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2aa8:	cbnz	r2, 2aae <regular_setup()+0x19b6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2aaa:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2aae:	cbnz	r3, 2ac8 <regular_setup()+0x19d0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2ab0:	adds	r4, #1
    2ab2:	adds	r6, #4
    2ab4:	cmp	r4, #24
    2ab6:	bne.n	2a9e <regular_setup()+0x19a6>
    2ab8:	ldr	r3, [sp, #4]
    2aba:	adds	r7, #24
    2abc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2abe:	cmp.w	r7, #576	; 0x240
    2ac2:	str	r3, [sp, #4]
    2ac4:	bne.n	2a96 <regular_setup()+0x199e>
    2ac6:	b.n	2360 <regular_setup()+0x1268>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ac8:	ldr	r2, [r5, #20]
    2aca:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2acc:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ad0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ad2:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ad4:	adds	r0, #2
    2ad6:	ldr.w	fp, [r3, r4, lsl #3]
    2ada:	bl	dac0 <random(unsigned long)>
    2ade:	ldr	r3, [r5, #16]
    2ae0:	rsb	r3, r3, fp
    2ae4:	adds	r3, #1
    2ae6:	subs	r0, r3, r0
    2ae8:	str	r0, [r6, #0]
    2aea:	b.n	2ab0 <regular_setup()+0x19b8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2aec:	movw	sl, #4636	; 0x121c
    2af0:	add.w	r3, r5, #28
    2af4:	movs	r7, #0
    2af6:	add.w	r9, r5, #4640	; 0x1220
    2afa:	add	sl, r5
    2afc:	str	r3, [sp, #4]
    2afe:	mov.w	r8, r7, lsl #3
    2b02:	ldr	r6, [sp, #4]
    2b04:	movs	r4, #0
    2b06:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b0a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b0c:	add	r3, r4
    2b0e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b10:	cbnz	r2, 2b16 <regular_setup()+0x1a1e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b12:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b16:	cbnz	r3, 2b32 <regular_setup()+0x1a3a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b18:	adds	r4, #1
    2b1a:	adds	r6, #4
    2b1c:	cmp	r4, #24
    2b1e:	bne.n	2b06 <regular_setup()+0x1a0e>
    2b20:	ldr	r3, [sp, #4]
    2b22:	adds	r7, #24
    2b24:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b26:	cmp.w	r7, #576	; 0x240
    2b2a:	str	r3, [sp, #4]
    2b2c:	bne.n	2afe <regular_setup()+0x1a06>
    2b2e:	b.w	212a <regular_setup()+0x1032>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b32:	ldr	r2, [r5, #20]
    2b34:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b36:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b3a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b3c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b3e:	adds	r0, #2
    2b40:	ldr.w	fp, [r3, r4, lsl #3]
    2b44:	bl	dac0 <random(unsigned long)>
    2b48:	ldr	r3, [r5, #16]
    2b4a:	rsb	r3, r3, fp
    2b4e:	adds	r3, #1
    2b50:	subs	r0, r3, r0
    2b52:	str	r0, [r6, #0]
    2b54:	b.n	2b18 <regular_setup()+0x1a20>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b56:	movw	sl, #4636	; 0x121c
    2b5a:	add.w	r3, r5, #28
    2b5e:	movs	r7, #0
    2b60:	add.w	r9, r5, #4640	; 0x1220
    2b64:	add	sl, r5
    2b66:	str	r3, [sp, #4]
    2b68:	mov.w	r8, r7, lsl #3
    2b6c:	ldr	r6, [sp, #4]
    2b6e:	movs	r4, #0
    2b70:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b74:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b76:	add	r3, r4
    2b78:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b7a:	cbnz	r2, 2b80 <regular_setup()+0x1a88>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b7c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b80:	cbnz	r3, 2b9c <regular_setup()+0x1aa4>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b82:	adds	r4, #1
    2b84:	adds	r6, #4
    2b86:	cmp	r4, #24
    2b88:	bne.n	2b70 <regular_setup()+0x1a78>
    2b8a:	ldr	r3, [sp, #4]
    2b8c:	adds	r7, #24
    2b8e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b90:	cmp.w	r7, #576	; 0x240
    2b94:	str	r3, [sp, #4]
    2b96:	bne.n	2b68 <regular_setup()+0x1a70>
    2b98:	b.w	1cba <regular_setup()+0xbc2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b9c:	ldr	r2, [r5, #20]
    2b9e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ba0:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ba4:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ba6:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ba8:	adds	r0, #2
    2baa:	ldr.w	fp, [r3, r4, lsl #3]
    2bae:	bl	dac0 <random(unsigned long)>
    2bb2:	ldr	r3, [r5, #16]
    2bb4:	rsb	r3, r3, fp
    2bb8:	adds	r3, #1
    2bba:	subs	r0, r3, r0
    2bbc:	str	r0, [r6, #0]
    2bbe:	b.n	2b82 <regular_setup()+0x1a8a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bc0:	movw	sl, #4636	; 0x121c
    2bc4:	add.w	r3, r5, #28
    2bc8:	movs	r7, #0
    2bca:	add.w	r9, r5, #4640	; 0x1220
    2bce:	add	sl, r5
    2bd0:	str	r3, [sp, #4]
    2bd2:	mov.w	r8, r7, lsl #3
    2bd6:	ldr	r6, [sp, #4]
    2bd8:	movs	r4, #0
    2bda:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2bde:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2be0:	add	r3, r4
    2be2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2be4:	cbnz	r2, 2bea <regular_setup()+0x1af2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2be6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2bea:	cbnz	r3, 2c06 <regular_setup()+0x1b0e>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2bec:	adds	r4, #1
    2bee:	adds	r6, #4
    2bf0:	cmp	r4, #24
    2bf2:	bne.n	2bda <regular_setup()+0x1ae2>
    2bf4:	ldr	r3, [sp, #4]
    2bf6:	adds	r7, #24
    2bf8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2bfa:	cmp.w	r7, #576	; 0x240
    2bfe:	str	r3, [sp, #4]
    2c00:	bne.n	2bd2 <regular_setup()+0x1ada>
    2c02:	b.w	194a <regular_setup()+0x852>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c06:	ldr	r2, [r5, #20]
    2c08:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c0a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c0e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c10:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c12:	adds	r0, #2
    2c14:	ldr.w	fp, [r3, r4, lsl #3]
    2c18:	bl	dac0 <random(unsigned long)>
    2c1c:	ldr	r3, [r5, #16]
    2c1e:	rsb	r3, r3, fp
    2c22:	adds	r3, #1
    2c24:	subs	r0, r3, r0
    2c26:	str	r0, [r6, #0]
    2c28:	b.n	2bec <regular_setup()+0x1af4>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    2c2a:	bl	e250 <sqrt>
    2c2e:	vmov.f64	d7, d0
    2c32:	b.w	13fc <regular_setup()+0x304>
    2c36:	bl	e250 <sqrt>
    2c3a:	vmov.f64	d7, d0
    2c3e:	b.n	2490 <regular_setup()+0x1398>
    2c40:	bl	e250 <sqrt>
    2c44:	vmov.f64	d7, d0
    2c48:	b.w	222e <regular_setup()+0x1136>
    2c4c:	bl	e250 <sqrt>
    2c50:	vmov.f64	d7, d0
    2c54:	b.w	1f94 <regular_setup()+0xe9c>
    2c58:	bl	e250 <sqrt>
    2c5c:	vmov.f64	d7, d0
    2c60:	b.w	1db8 <regular_setup()+0xcc0>
    2c64:	bl	e250 <sqrt>
    2c68:	vmov.f64	d7, d0
    2c6c:	b.w	1b84 <regular_setup()+0xa8c>
    2c70:	bl	e250 <sqrt>
    2c74:	vmov.f64	d7, d0
    2c78:	b.w	1818 <regular_setup()+0x720>
    2c7c:	bl	e250 <sqrt>
    2c80:	vmov.f64	d7, d0
    2c84:	b.w	156e <regular_setup()+0x476>

00002c88 <updateScreensFade()>:
  renderInterrupt(); 
}


void updateScreensFade() {
  if(screenFadeUpdateSwitcher){
    2c88:	ldr	r3, [pc, #700]	; (2f48 <updateScreensFade()+0x2c0>)
    2c8a:	ldrb	r3, [r3, #0]
 
  renderInterrupt(); 
}


void updateScreensFade() {
    2c8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c90:	vpush	{d8}
    2c94:	sub	sp, #28
  if(screenFadeUpdateSwitcher){
    2c96:	cmp	r3, #0
    2c98:	beq.w	2f64 <updateScreensFade()+0x2dc>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2c9c:	ldr	r3, [pc, #684]	; (2f4c <updateScreensFade()+0x2c4>)
    2c9e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca0:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2ca2:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca4:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2ca6:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca8:	ldr	r6, [pc, #672]	; (2f4c <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2caa:	cmp	r3, r1
    2cac:	it	eq
    2cae:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cb0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2cb2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2cb4:	ite	eq
    2cb6:	moveq	r5, #1
    2cb8:	movne	r5, #0
    2cba:	cmp	r5, #0
    2cbc:	beq.n	2ca4 <updateScreensFade()+0x1c>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2cbe:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2cc0:	ldr.w	r8, [pc, #652]	; 2f50 <updateScreensFade()+0x2c8>
    2cc4:	orr.w	r1, r1, r2, lsl #27
    2cc8:	ldr.w	r3, [r8, #476]	; 0x1dc
    2ccc:	vmov	s15, r1
    2cd0:	vldr	d5, [pc, #620]	; 2f40 <updateScreensFade()+0x2b8>
    2cd4:	vcvt.f64.u32	d7, s15
    2cd8:	vdiv.f64	d6, d7, d5
    2cdc:	vcvt.u32.f64	s12, d6
    2ce0:	vmov	r2, s12
    2ce4:	subs	r3, r2, r3
    2ce6:	cmp	r3, #49	; 0x31
    2ce8:	bls.w	2f30 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2cec:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cee:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2cf0:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cf2:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2cf4:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cf6:	ldr	r4, [pc, #596]	; (2f4c <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2cf8:	cmp	r3, r1
    2cfa:	it	eq
    2cfc:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cfe:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2d00:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d02:	ite	eq
    2d04:	moveq	r6, #1
    2d06:	movne	r6, #0
    2d08:	cmp	r6, #0
    2d0a:	beq.n	2cf2 <updateScreensFade()+0x6a>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2d0c:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2d0e:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2d12:	vldr	s10, [r8, #468]	; 0x1d4
    2d16:	orr.w	r1, r1, r2, lsl #27
    2d1a:	ldr	r7, [pc, #564]	; (2f50 <updateScreensFade()+0x2c8>)
    2d1c:	vcmpe.f32	s10, s11
    2d20:	vmov	s15, r1
    2d24:	vldr	d4, [pc, #536]	; 2f40 <updateScreensFade()+0x2b8>
    2d28:	vcvt.f64.u32	d7, s15
    2d2c:	vmrs	APSR_nzcv, fpscr
    2d30:	vdiv.f64	d6, d7, d4
    2d34:	vcvt.u32.f64	s12, d6
    2d38:	vstr	s12, [r8, #476]	; 0x1dc
    2d3c:	blt.w	31ec <updateScreensFade()+0x564>
      		
			if (newFrameReady) {
    2d40:	ldrb.w	r1, [r7, #460]	; 0x1cc
    2d44:	cmp	r1, #0
    2d46:	beq.w	2f10 <updateScreensFade()+0x288>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d4a:	movs	r1, #0
    2d4c:	ldr	r0, [pc, #516]	; (2f54 <updateScreensFade()+0x2cc>)
    2d4e:	bl	de58 <Print::print(long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2d52:	movs	r1, #15
    2d54:	ldr	r0, [pc, #512]	; (2f58 <updateScreensFade()+0x2d0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d56:	mov	r6, r4
    2d58:	bl	c0ac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2d5c:	ldr	r0, [pc, #500]	; (2f54 <updateScreensFade()+0x2cc>)
    2d5e:	bl	ddb8 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    2d62:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2d66:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2d6a:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2d6e:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    2d70:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    2d74:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2d76:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2d7a:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d7e:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2d80:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2d82:	cmp	r3, r4
    2d84:	it	eq
    2d86:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d88:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2d8a:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d8c:	ite	eq
    2d8e:	moveq	r7, #1
    2d90:	movne	r7, #0
    2d92:	cmp	r7, #0
    2d94:	beq.n	2d7e <updateScreensFade()+0xf6>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    2d96:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    2d98:	movs	r3, #0
    2d9a:	orr.w	r4, r4, r1, lsl #27
    2d9e:	strb.w	r3, [r8, #460]	; 0x1cc
    2da2:	vmov	s15, r4
    2da6:	vldr	d5, [pc, #408]	; 2f40 <updateScreensFade()+0x2b8>
    2daa:	vcvt.f64.u32	d7, s15
    2dae:	vdiv.f64	d6, d7, d5
    2db2:	vcvt.u32.f64	s15, d6
    2db6:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    2dba:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2dbe:	ldr	r3, [pc, #396]	; (2f4c <updateScreensFade()+0x2c4>)
    2dc0:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dc2:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2dc4:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dc6:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2dc8:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2dca:	cmp	r3, r4
    2dcc:	it	eq
    2dce:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dd0:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2dd2:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2dd4:	ite	eq
    2dd6:	moveq	r6, #1
    2dd8:	movne	r6, #0
    2dda:	cmp	r6, #0
    2ddc:	beq.n	2dc6 <updateScreensFade()+0x13e>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dde:	lsrs	r4, r3, #5
    2de0:	vldr	s10, [pc, #376]	; 2f5c <updateScreensFade()+0x2d4>
    2de4:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    2de8:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dea:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dee:	ldr	r5, [pc, #352]	; (2f50 <updateScreensFade()+0x2c8>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2df0:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2df2:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2df6:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dfa:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dfc:	vcvt.f64.u32	d7, s15
    2e00:	vldr	d4, [pc, #316]	; 2f40 <updateScreensFade()+0x2b8>
    2e04:	vdiv.f64	d6, d7, d4
    2e08:	vcvt.u32.f64	s14, d6
    2e0c:	vmov	r3, s14
    2e10:	rsb	r6, lr, r3
    2e14:	vmov	s15, r6
    2e18:	vcvt.f32.u32	s14, s15
    2e1c:	vdiv.f32	s15, s14, s10
    2e20:	vcmpe.f32	s15, s11
    2e24:	vmrs	APSR_nzcv, fpscr
    2e28:	it	pl
    2e2a:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    2e2e:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e32:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2e36:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e38:	lsls	r6, r6, #3
    2e3a:	b.n	2e48 <updateScreensFade()+0x1c0>
    2e3c:	ldr.w	r2, [r5, #488]	; 0x1e8
    2e40:	vldr	s15, [r5, #468]	; 0x1d4
    2e44:	ldr.w	r0, [r5, #492]	; 0x1ec
    2e48:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2e4c:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e50:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2e52:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e54:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e56:	ldr.w	r9, [pc, #248]	; 2f50 <updateScreensFade()+0x2c8>
    2e5a:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e5c:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e60:	ldrb	r0, [r0, r3]
    2e62:	vmov	s14, r0
    2e66:	ldrb.w	r0, [lr, #2]
    2e6a:	ldrb.w	lr, [lr, #1]
    2e6e:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e72:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e74:	vmov	s13, lr
    2e78:	ldrb	r3, [r2, r3]
    2e7a:	ldrb.w	lr, [r0, #2]
    2e7e:	vcvt.f32.s32	s12, s12
    2e82:	vcvt.f32.s32	s13, s13
    2e86:	vmov	s10, r3
    2e8a:	vmov	s8, lr
    2e8e:	ldrb	r3, [r0, #1]
    2e90:	vcvt.f32.s32	s14, s14
    2e94:	ldr.w	r0, [r8, #448]	; 0x1c0
    2e98:	vmul.f32	s13, s13, s15
    2e9c:	vmov	s9, r3
    2ea0:	vcvt.f32.s32	s8, s8
    2ea4:	vmul.f32	s12, s12, s15
    2ea8:	vcvt.f32.s32	s9, s9
    2eac:	vmul.f32	s15, s14, s15
    2eb0:	vcvt.f32.s32	s10, s10
    2eb4:	vmov.f32	s14, s13
    2eb8:	vfma.f32	s12, s11, s8
    2ebc:	vfma.f32	s15, s10, s11
    2ec0:	vfma.f32	s14, s11, s9
    2ec4:	vcvt.s32.f32	s13, s12
    2ec8:	vcvt.s32.f32	s15, s15
    2ecc:	vcvt.s32.f32	s14, s14
    2ed0:	vstr	s13, [sp, #20]
    2ed4:	ldrb.w	r2, [sp, #20]
    2ed8:	vstr	s14, [sp, #12]
    2edc:	vstr	s15, [sp, #16]
    2ee0:	str	r2, [sp, #0]
    2ee2:	ldrb.w	r3, [sp, #12]
    2ee6:	ldrb.w	r2, [sp, #16]
    2eea:	bl	ba0c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2eee:	cmp	r4, #24
    2ef0:	bne.n	2e3c <updateScreensFade()+0x1b4>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2ef2:	add.w	sl, sl, #1
    2ef6:	adds	r7, #24
    2ef8:	cmp.w	sl, #24
    2efc:	uxth	r7, r7
    2efe:	beq.w	31d4 <updateScreensFade()+0x54c>
    2f02:	ldr.w	r2, [fp, #488]	; 0x1e8
    2f06:	vldr	s15, [fp, #468]	; 0x1d4
    2f0a:	ldr.w	r0, [fp, #492]	; 0x1ec
    2f0e:	b.n	2e32 <updateScreensFade()+0x1aa>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f10:	ldr	r0, [pc, #64]	; (2f54 <updateScreensFade()+0x2cc>)
    2f12:	bl	de58 <Print::print(long)>
    2f16:	movs	r1, #22
    2f18:	ldr	r0, [pc, #68]	; (2f60 <updateScreensFade()+0x2d8>)
    2f1a:	bl	c0ac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f1e:	ldr	r0, [pc, #52]	; (2f54 <updateScreensFade()+0x2cc>)
    2f20:	bl	ddb8 <Print::println()>
    if(screen_A.updateFade(0)) screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }else{
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
    2f24:	ldr	r3, [pc, #32]	; (2f48 <updateScreensFade()+0x2c0>)
    2f26:	ldr	r2, [pc, #32]	; (2f48 <updateScreensFade()+0x2c0>)
    2f28:	ldrb	r3, [r3, #0]
    2f2a:	eor.w	r3, r3, #1
    2f2e:	strb	r3, [r2, #0]
  }
}
    2f30:	add	sp, #28
    2f32:	vpop	{d8}
    2f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f3a:	nop
    2f3c:	nop.w
    2f40:	.word	0xd2f1a9fc
    2f44:	.word	0x3ff0624d
    2f48:	.word	0x200029b8
    2f4c:	.word	0x400d4000
    2f50:	.word	0x20005074
    2f54:	.word	0x20000f0c
    2f58:	.word	0x20000174
    2f5c:	.word	0x44160000
    2f60:	.word	0x20000184
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2f64:	ldr	r3, [pc, #672]	; (3208 <updateScreensFade()+0x580>)
    2f66:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f68:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2f6a:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f6c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2f6e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f70:	ldr	r6, [pc, #660]	; (3208 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2f72:	cmp	r3, r1
    2f74:	it	eq
    2f76:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f78:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2f7a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2f7c:	ite	eq
    2f7e:	moveq	r5, #1
    2f80:	movne	r5, #0
    2f82:	cmp	r5, #0
    2f84:	beq.n	2f6c <updateScreensFade()+0x2e4>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2f86:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2f88:	ldr.w	r8, [pc, #640]	; 320c <updateScreensFade()+0x584>
    2f8c:	orr.w	r1, r1, r2, lsl #27
    2f90:	ldr.w	r3, [r8, #476]	; 0x1dc
    2f94:	vmov	s15, r1
    2f98:	vldr	d5, [pc, #612]	; 3200 <updateScreensFade()+0x578>
    2f9c:	vcvt.f64.u32	d7, s15
    2fa0:	vdiv.f64	d6, d7, d5
    2fa4:	vcvt.u32.f64	s12, d6
    2fa8:	vmov	r2, s12
    2fac:	subs	r3, r2, r3
    2fae:	cmp	r3, #49	; 0x31
    2fb0:	bls.n	2f30 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2fb2:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fb4:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2fb6:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fb8:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2fba:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fbc:	ldr	r4, [pc, #584]	; (3208 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2fbe:	cmp	r3, r1
    2fc0:	it	eq
    2fc2:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fc4:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2fc6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2fc8:	ite	eq
    2fca:	moveq	r6, #1
    2fcc:	movne	r6, #0
    2fce:	cmp	r6, #0
    2fd0:	beq.n	2fb8 <updateScreensFade()+0x330>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2fd2:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2fd4:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2fd8:	vldr	s10, [r8, #468]	; 0x1d4
    2fdc:	orr.w	r1, r1, r2, lsl #27
    2fe0:	ldr	r7, [pc, #552]	; (320c <updateScreensFade()+0x584>)
    2fe2:	vcmpe.f32	s10, s11
    2fe6:	vmov	s15, r1
    2fea:	vldr	d4, [pc, #532]	; 3200 <updateScreensFade()+0x578>
    2fee:	vcvt.f64.u32	d7, s15
    2ff2:	vmrs	APSR_nzcv, fpscr
    2ff6:	vdiv.f64	d6, d7, d4
    2ffa:	vcvt.u32.f64	s12, d6
    2ffe:	vstr	s12, [r8, #476]	; 0x1dc
    3002:	blt.w	31de <updateScreensFade()+0x556>
      		
			if (newFrameReady) {
    3006:	ldrb.w	r3, [r7, #460]	; 0x1cc
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    300a:	movs	r1, #1
    300c:	ldr	r0, [pc, #512]	; (3210 <updateScreensFade()+0x588>)
    300e:	cmp	r3, #0
    3010:	beq.w	2f12 <updateScreensFade()+0x28a>
    3014:	bl	de58 <Print::print(long)>
    3018:	movs	r1, #15
    301a:	ldr	r0, [pc, #504]	; (3214 <updateScreensFade()+0x58c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    301c:	mov	r6, r4
    301e:	bl	c0ac <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3022:	ldr	r0, [pc, #492]	; (3210 <updateScreensFade()+0x588>)
    3024:	bl	ddb8 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    3028:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    302c:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    3030:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3034:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    3036:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    303a:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    303c:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    3040:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3044:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3046:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3048:	cmp	r3, r4
    304a:	it	eq
    304c:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    304e:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    3050:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3052:	ite	eq
    3054:	moveq	r7, #1
    3056:	movne	r7, #0
    3058:	cmp	r7, #0
    305a:	beq.n	3044 <updateScreensFade()+0x3bc>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    305c:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    305e:	movs	r3, #0
    3060:	orr.w	r4, r4, r1, lsl #27
    3064:	strb.w	r3, [r8, #460]	; 0x1cc
    3068:	vmov	s15, r4
    306c:	vldr	d5, [pc, #400]	; 3200 <updateScreensFade()+0x578>
    3070:	vcvt.f64.u32	d7, s15
    3074:	vdiv.f64	d6, d7, d5
    3078:	vcvt.u32.f64	s15, d6
    307c:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    3080:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3084:	ldr	r3, [pc, #384]	; (3208 <updateScreensFade()+0x580>)
    3086:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3088:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    308a:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    308c:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    308e:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3090:	cmp	r3, r4
    3092:	it	eq
    3094:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3096:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    3098:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    309a:	ite	eq
    309c:	moveq	r6, #1
    309e:	movne	r6, #0
    30a0:	cmp	r6, #0
    30a2:	beq.n	308c <updateScreensFade()+0x404>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30a4:	lsrs	r4, r3, #5
    30a6:	vldr	s10, [pc, #368]	; 3218 <updateScreensFade()+0x590>
    30aa:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    30ae:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30b0:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    30b4:	ldr	r5, [pc, #340]	; (320c <updateScreensFade()+0x584>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    30b6:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30b8:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    30bc:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    30c0:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30c2:	vcvt.f64.u32	d7, s15
    30c6:	vldr	d4, [pc, #312]	; 3200 <updateScreensFade()+0x578>
    30ca:	vdiv.f64	d6, d7, d4
    30ce:	vcvt.u32.f64	s14, d6
    30d2:	vmov	r3, s14
    30d6:	rsb	r6, lr, r3
    30da:	vmov	s15, r6
    30de:	vcvt.f32.u32	s14, s15
    30e2:	vdiv.f32	s15, s14, s10
    30e6:	vcmpe.f32	s15, s11
    30ea:	vmrs	APSR_nzcv, fpscr
    30ee:	it	pl
    30f0:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    30f4:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    30f8:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    30fc:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    30fe:	lsls	r6, r6, #3
    3100:	b.n	310e <updateScreensFade()+0x486>
    3102:	ldr.w	r2, [r5, #488]	; 0x1e8
    3106:	vldr	s15, [r5, #468]	; 0x1d4
    310a:	ldr.w	r0, [r5, #492]	; 0x1ec
    310e:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    3112:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3116:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    3118:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    311a:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    311c:	ldr.w	r9, [pc, #236]	; 320c <updateScreensFade()+0x584>
    3120:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3122:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3126:	ldrb	r0, [r0, r3]
    3128:	vmov	s14, r0
    312c:	ldrb.w	r0, [lr, #2]
    3130:	ldrb.w	lr, [lr, #1]
    3134:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3138:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    313a:	vmov	s13, lr
    313e:	ldrb	r3, [r2, r3]
    3140:	ldrb.w	lr, [r0, #2]
    3144:	vcvt.f32.s32	s12, s12
    3148:	vcvt.f32.s32	s13, s13
    314c:	vmov	s10, r3
    3150:	vmov	s8, lr
    3154:	ldrb	r3, [r0, #1]
    3156:	vcvt.f32.s32	s14, s14
    315a:	ldr.w	r0, [r8, #448]	; 0x1c0
    315e:	vmul.f32	s13, s13, s15
    3162:	vmov	s9, r3
    3166:	vcvt.f32.s32	s8, s8
    316a:	vmul.f32	s12, s12, s15
    316e:	vcvt.f32.s32	s9, s9
    3172:	vmul.f32	s15, s14, s15
    3176:	vcvt.f32.s32	s10, s10
    317a:	vmov.f32	s14, s13
    317e:	vfma.f32	s12, s11, s8
    3182:	vfma.f32	s15, s10, s11
    3186:	vfma.f32	s14, s11, s9
    318a:	vcvt.s32.f32	s13, s12
    318e:	vcvt.s32.f32	s15, s15
    3192:	vcvt.s32.f32	s14, s14
    3196:	vstr	s13, [sp, #20]
    319a:	ldrb.w	r2, [sp, #20]
    319e:	vstr	s14, [sp, #12]
    31a2:	vstr	s15, [sp, #16]
    31a6:	str	r2, [sp, #0]
    31a8:	ldrb.w	r3, [sp, #12]
    31ac:	ldrb.w	r2, [sp, #16]
    31b0:	bl	ba0c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    31b4:	cmp	r4, #24
    31b6:	bne.n	3102 <updateScreensFade()+0x47a>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    31b8:	add.w	sl, sl, #1
    31bc:	adds	r7, #24
    31be:	cmp.w	sl, #24
    31c2:	uxth	r7, r7
    31c4:	beq.n	31d4 <updateScreensFade()+0x54c>
    31c6:	ldr.w	r2, [fp, #488]	; 0x1e8
    31ca:	vldr	s15, [fp, #468]	; 0x1d4
    31ce:	ldr.w	r0, [fp, #492]	; 0x1ec
    31d2:	b.n	30f8 <updateScreensFade()+0x470>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    31d4:	ldr.w	r0, [r9, #448]	; 0x1c0
    31d8:	bl	b7c4 <Adafruit_NeoPixel::show()>
    31dc:	b.n	2f24 <updateScreensFade()+0x29c>
    31de:	ldr.w	lr, [r7, #472]	; 0x1d8
    31e2:	ldr.w	r2, [r7, #488]	; 0x1e8
    31e6:	ldr.w	r0, [r7, #492]	; 0x1ec
    31ea:	b.n	3084 <updateScreensFade()+0x3fc>
    31ec:	ldr.w	lr, [r7, #472]	; 0x1d8
    31f0:	ldr.w	r2, [r7, #488]	; 0x1e8
    31f4:	ldr.w	r0, [r7, #492]	; 0x1ec
    31f8:	b.n	2dbe <updateScreensFade()+0x136>
    31fa:	nop
    31fc:	nop.w
    3200:	.word	0xd2f1a9fc
    3204:	.word	0x3ff0624d
    3208:	.word	0x400d4000
    320c:	.word	0x20005268
    3210:	.word	0x20000f0c
    3214:	.word	0x20000174
    3218:	.word	0x44160000

0000321c <Screen::iterate_animation() [clone .part.20]>:
		return true;
	}


	void iterate_animation(){
    321c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3220:	movs	r3, #2
    3222:	sub	sp, #68	; 0x44
		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
    3224:	ldr.w	r9, [r0, #436]	; 0x1b4
    3228:	movs	r2, #32
    322a:	str	r3, [sp, #4]
		_screen->show();
		return true;
	}


	void iterate_animation(){
    322c:	mov	fp, r0
    322e:	addw	r3, r9, #2428	; 0x97c
    3232:	movs	r1, #0
    3234:	ldr.w	sl, [pc, #1608]	; 3880 <Screen::iterate_animation() [clone .part.20]+0x664>
    3238:	add.w	r0, sp, r2
    323c:	str	r3, [sp, #12]
    323e:	add.w	r3, r9, #4640	; 0x1220
    3242:	str	r1, [sp, #20]
    3244:	str	r3, [sp, #24]
    3246:	bl	ebbc <memset>
    324a:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
    324e:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3252:	movs	r7, #2
  updateScreensFade();
    3254:	bl	2c88 <updateScreensFade()>
    3258:	ldrb.w	r2, [r9, #24]
    325c:	ldr	r3, [sp, #24]
    325e:	str	r2, [sp, #16]
    3260:	ldr	r3, [r3, #0]
    3262:	ldr	r2, [sp, #20]
    3264:	ldr	r1, [sp, #12]
    3266:	add.w	r8, r3, r2
    326a:	sub.w	ip, r1, #96	; 0x60
    326e:	sub.w	r3, r1, #2400	; 0x960
    3272:	mov	fp, r8
    3274:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3276:	ldr	r3, [sp, #16]
    3278:	cmp	r3, #0
    327a:	beq.w	36b8 <Screen::iterate_animation() [clone .part.20]+0x49c>
      return _background[x][y];
    327e:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    3282:	cmp	r3, #0
    3284:	beq.n	335a <Screen::iterate_animation() [clone .part.20]+0x13e>
    3286:	ldr	r3, [sp, #4]
    3288:	add.w	lr, sp, #32
    328c:	subs	r6, r3, #3
    328e:	subs	r3, r7, #3
    3290:	str	r3, [sp, #8]
    3292:	smull	r3, r2, sl, r6
    3296:	asrs	r3, r6, #31
    3298:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    329a:	mov	r5, lr
    329c:	rsb	r3, r3, r2, asr #2
    32a0:	add.w	r3, r3, r3, lsl #1
    32a4:	sub.w	r3, r6, r3, lsl #3
    32a8:	adds	r3, #24
    32aa:	smull	r2, r1, sl, r3
    32ae:	asrs	r2, r3, #31
    32b0:	rsb	r2, r2, r1, asr #2
    32b4:	add.w	r2, r2, r2, lsl #1
    32b8:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    32bc:	add.w	r2, r2, r2, lsl #1
    32c0:	lsls	r4, r2, #3
    32c2:	smull	r3, r2, sl, r0
    32c6:	asrs	r3, r0, #31
    32c8:	rsb	r3, r3, r2, asr #2
    32cc:	add.w	r3, r3, r3, lsl #1
    32d0:	sub.w	r3, r0, r3, lsl #3
    32d4:	adds	r0, #1
    32d6:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    32d8:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    32da:	smull	r2, r1, sl, r3
    32de:	mov.w	r2, r3, asr #31
    32e2:	rsb	r2, r2, r1, asr #2
    32e6:	add.w	r2, r2, r2, lsl #1
    32ea:	sub.w	r3, r3, r2, lsl #3
    32ee:	add	r3, r4
    32f0:	add.w	r3, r9, r3, lsl #2
    32f4:	ldr	r3, [r3, #28]
    32f6:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    32fa:	bne.n	32c2 <Screen::iterate_animation() [clone .part.20]+0xa6>
    32fc:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    32fe:	ldr	r3, [sp, #4]
    3300:	add.w	lr, lr, #12
    3304:	cmp	r3, r6
    3306:	bne.n	3292 <Screen::iterate_animation() [clone .part.20]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3308:	ldr	r3, [sp, #0]
    330a:	movs	r0, #1
    330c:	ldr	r1, [r3, #0]
    330e:	ldr.w	r3, [r9]
    3312:	adds	r5, r1, r3
    3314:	movs	r4, #0
    3316:	mov	r3, r4
    3318:	b.n	3320 <Screen::iterate_animation() [clone .part.20]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    331a:	adds	r3, #1
    331c:	cmp	r3, #8
    331e:	beq.n	3336 <Screen::iterate_animation() [clone .part.20]+0x11a>
          if ((i >> j) % 2 == 1){
    3320:	asr.w	r2, r0, r3
    3324:	lsls	r6, r2, #31
    3326:	bpl.n	331a <Screen::iterate_animation() [clone .part.20]+0xfe>
            sum += neighbours[j];
    3328:	add	r2, sp, #32
    332a:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    332e:	adds	r3, #1
    3330:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3332:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3334:	bne.n	3320 <Screen::iterate_animation() [clone .part.20]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3336:	cmp	r5, r4
    3338:	beq.w	36c2 <Screen::iterate_animation() [clone .part.20]+0x4a6>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    333c:	adds	r0, #1
    333e:	cmp.w	r0, #256	; 0x100
    3342:	bne.n	3314 <Screen::iterate_animation() [clone .part.20]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3344:	ldr.w	r3, [r9, #8]
    3348:	subs	r1, r1, r3
    334a:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    334e:	ldr.w	r3, [r9, #12]
    3352:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    3354:	it	gt
    3356:	strgt.w	r3, [ip]
    335a:	ldr	r3, [sp, #0]
    335c:	add.w	ip, ip, #4
    3360:	adds	r7, #1
    3362:	add.w	r8, r8, #1
    3366:	adds	r3, #4
    3368:	add.w	fp, fp, #1
    336c:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    336e:	ldr	r3, [sp, #12]
    3370:	cmp	r3, ip
    3372:	bne.n	3276 <Screen::iterate_animation() [clone .part.20]+0x5a>
    3374:	ldr	r2, [sp, #12]
    3376:	ldr	r3, [sp, #20]
    3378:	adds	r2, #96	; 0x60
    337a:	adds	r3, #24
    337c:	str	r2, [sp, #12]
    337e:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3380:	cmp.w	r3, #576	; 0x240
    3384:	str	r3, [sp, #20]
    3386:	add.w	r2, r2, #1
    338a:	str	r2, [sp, #4]
    338c:	bne.w	324e <Screen::iterate_animation() [clone .part.20]+0x32>
    3390:	movw	r5, #4632	; 0x1218
    3394:	ldr.w	fp, [sp, #28]
    3398:	addw	r4, r9, #2328	; 0x918
    339c:	add	r5, r9
    339e:	sub.w	r3, r4, #2304	; 0x900
    33a2:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    33a6:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    33a8:	ldr.w	r1, [r2, #4]!
    33ac:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    33b0:	cmp	r0, r3
    33b2:	bne.n	33a8 <Screen::iterate_animation() [clone .part.20]+0x18c>
    33b4:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    33b6:	cmp	r5, r4
    33b8:	bne.n	339e <Screen::iterate_animation() [clone .part.20]+0x182>
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    33ba:	ldr.w	r9, [fp, #432]	; 0x1b0
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    33be:	movs	r3, #2
    33c0:	movs	r2, #32
    33c2:	movs	r1, #0
    33c4:	str	r3, [sp, #4]
    33c6:	addw	r3, r9, #2428	; 0x97c
    33ca:	ldr.w	sl, [pc, #1204]	; 3880 <Screen::iterate_animation() [clone .part.20]+0x664>
    33ce:	add.w	r0, sp, r2
    33d2:	str	r3, [sp, #12]
    33d4:	add.w	r3, r9, #4640	; 0x1220
    33d8:	str	r1, [sp, #20]
    33da:	str	r3, [sp, #24]
    33dc:	bl	ebbc <memset>
    33e0:	str.w	fp, [sp, #28]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    33e4:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    33e8:	movs	r7, #2
  updateScreensFade();
    33ea:	bl	2c88 <updateScreensFade()>
    33ee:	ldrb.w	r2, [r9, #24]
    33f2:	ldr	r3, [sp, #24]
    33f4:	str	r2, [sp, #16]
    33f6:	ldr	r3, [r3, #0]
    33f8:	ldr	r2, [sp, #20]
    33fa:	ldr	r1, [sp, #12]
    33fc:	add.w	r8, r3, r2
    3400:	sub.w	ip, r1, #96	; 0x60
    3404:	sub.w	r3, r1, #2400	; 0x960
    3408:	mov	fp, r8
    340a:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    340c:	ldr	r3, [sp, #16]
    340e:	cmp	r3, #0
    3410:	beq.w	36ce <Screen::iterate_animation() [clone .part.20]+0x4b2>
      return _background[x][y];
    3414:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    3418:	cmp	r3, #0
    341a:	beq.n	34f0 <Screen::iterate_animation() [clone .part.20]+0x2d4>
    341c:	ldr	r3, [sp, #4]
    341e:	add.w	lr, sp, #32
    3422:	subs	r6, r3, #3
    3424:	subs	r3, r7, #3
    3426:	str	r3, [sp, #8]
    3428:	smull	r3, r2, sl, r6
    342c:	asrs	r3, r6, #31
    342e:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3430:	mov	r5, lr
    3432:	rsb	r3, r3, r2, asr #2
    3436:	add.w	r3, r3, r3, lsl #1
    343a:	sub.w	r3, r6, r3, lsl #3
    343e:	adds	r3, #24
    3440:	smull	r2, r1, sl, r3
    3444:	asrs	r2, r3, #31
    3446:	rsb	r2, r2, r1, asr #2
    344a:	add.w	r2, r2, r2, lsl #1
    344e:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3452:	add.w	r2, r2, r2, lsl #1
    3456:	lsls	r4, r2, #3
    3458:	smull	r3, r2, sl, r0
    345c:	asrs	r3, r0, #31
    345e:	rsb	r3, r3, r2, asr #2
    3462:	add.w	r3, r3, r3, lsl #1
    3466:	sub.w	r3, r0, r3, lsl #3
    346a:	adds	r0, #1
    346c:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    346e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3470:	smull	r2, r1, sl, r3
    3474:	mov.w	r2, r3, asr #31
    3478:	rsb	r2, r2, r1, asr #2
    347c:	add.w	r2, r2, r2, lsl #1
    3480:	sub.w	r3, r3, r2, lsl #3
    3484:	add	r3, r4
    3486:	add.w	r3, r9, r3, lsl #2
    348a:	ldr	r3, [r3, #28]
    348c:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    3490:	bne.n	3458 <Screen::iterate_animation() [clone .part.20]+0x23c>
    3492:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    3494:	ldr	r3, [sp, #4]
    3496:	add.w	lr, lr, #12
    349a:	cmp	r3, r6
    349c:	bne.n	3428 <Screen::iterate_animation() [clone .part.20]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    349e:	ldr	r3, [sp, #0]
    34a0:	movs	r0, #1
    34a2:	ldr	r1, [r3, #0]
    34a4:	ldr.w	r3, [r9]
    34a8:	adds	r5, r1, r3
    34aa:	movs	r4, #0
    34ac:	mov	r3, r4
    34ae:	b.n	34b6 <Screen::iterate_animation() [clone .part.20]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34b0:	adds	r3, #1
    34b2:	cmp	r3, #8
    34b4:	beq.n	34cc <Screen::iterate_animation() [clone .part.20]+0x2b0>
          if ((i >> j) % 2 == 1){
    34b6:	asr.w	r2, r0, r3
    34ba:	lsls	r2, r2, #31
    34bc:	bpl.n	34b0 <Screen::iterate_animation() [clone .part.20]+0x294>
            sum += neighbours[j];
    34be:	add	r2, sp, #32
    34c0:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34c4:	adds	r3, #1
    34c6:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    34c8:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34ca:	bne.n	34b6 <Screen::iterate_animation() [clone .part.20]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    34cc:	cmp	r5, r4
    34ce:	beq.w	36d8 <Screen::iterate_animation() [clone .part.20]+0x4bc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    34d2:	adds	r0, #1
    34d4:	cmp.w	r0, #256	; 0x100
    34d8:	bne.n	34aa <Screen::iterate_animation() [clone .part.20]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    34da:	ldr.w	r3, [r9, #8]
    34de:	subs	r1, r1, r3
    34e0:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    34e4:	ldr.w	r3, [r9, #12]
    34e8:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    34ea:	it	gt
    34ec:	strgt.w	r3, [ip]
    34f0:	ldr	r3, [sp, #0]
    34f2:	add.w	ip, ip, #4
    34f6:	adds	r7, #1
    34f8:	add.w	r8, r8, #1
    34fc:	adds	r3, #4
    34fe:	add.w	fp, fp, #1
    3502:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3504:	ldr	r3, [sp, #12]
    3506:	cmp	r3, ip
    3508:	bne.n	340c <Screen::iterate_animation() [clone .part.20]+0x1f0>
    350a:	ldr	r2, [sp, #12]
    350c:	ldr	r3, [sp, #20]
    350e:	adds	r2, #96	; 0x60
    3510:	adds	r3, #24
    3512:	str	r2, [sp, #12]
    3514:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3516:	cmp.w	r3, #576	; 0x240
    351a:	str	r3, [sp, #20]
    351c:	add.w	r2, r2, #1
    3520:	str	r2, [sp, #4]
    3522:	bne.w	33e4 <Screen::iterate_animation() [clone .part.20]+0x1c8>
    3526:	movw	r5, #4632	; 0x1218
    352a:	ldr.w	fp, [sp, #28]
    352e:	addw	r4, r9, #2328	; 0x918
    3532:	add	r5, r9
    3534:	sub.w	r3, r4, #2304	; 0x900
    3538:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    353c:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    353e:	ldr.w	r1, [r2, #4]!
    3542:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3546:	cmp	r0, r3
    3548:	bne.n	353e <Screen::iterate_animation() [clone .part.20]+0x322>
    354a:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    354c:	cmp	r5, r4
    354e:	bne.n	3534 <Screen::iterate_animation() [clone .part.20]+0x318>
		ratio++;
    3550:	ldr.w	r3, [fp, #464]	; 0x1d0
    3554:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    3556:	cmp	r3, #1
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    3558:	str.w	r3, [fp, #464]	; 0x1d0
		if (ratio == RATIO_GROWTH){
    355c:	beq.w	3888 <Screen::iterate_animation() [clone .part.20]+0x66c>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3560:	movs	r3, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3562:	ldr.w	ip, [pc, #800]	; 3884 <Screen::iterate_animation() [clone .part.20]+0x668>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3566:	str	r3, [sp, #0]
    3568:	str	r3, [sp, #8]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    356a:	ldr	r2, [sp, #8]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    356c:	mov.w	lr, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3570:	mov.w	r8, #360	; 0x168
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3574:	add.w	r9, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    3578:	add.w	r3, r2, r2, lsl #3
    357c:	mov.w	r9, r9, lsl #3
    3580:	lsls	r3, r3, #3
    3582:	str	r3, [sp, #4]
    3584:	add.w	r3, r9, lr
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3588:	ldr.w	r2, [fp, #444]	; 0x1bc
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    358c:	ldr.w	r1, [fp, #440]	; 0x1b8
    3590:	adds	r3, #6
    3592:	lsls	r3, r3, #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3594:	add	r2, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3596:	add	r3, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3598:	ldr	r4, [r2, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    359a:	ldr	r0, [r3, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    359c:	adds	r4, #50	; 0x32
    359e:	ldr	r3, [pc, #720]	; (3870 <Screen::iterate_animation() [clone .part.20]+0x654>)
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35a0:	add.w	r0, r0, r0, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35a4:	smull	r2, r3, r4, r3
    35a8:	asrs	r1, r4, #31
    35aa:	adds	r5, r4, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35ac:	ldr	r3, [pc, #704]	; (3870 <Screen::iterate_animation() [clone .part.20]+0x654>)
    35ae:	smull	r2, r3, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35b2:	rsb	r2, r1, r5, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35b6:	adds	r1, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35b8:	rsb	r2, r2, r2, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35bc:	asrs	r3, r0, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35be:	subs	r2, r4, r2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35c0:	rsb	r1, r3, r1, asr #7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    35c4:	cmp	r2, #219	; 0xdb
    35c6:	rsb	r1, r1, r1, lsl #8
    35ca:	sub.w	r1, r0, r1
    35ce:	ble.w	3858 <Screen::iterate_animation() [clone .part.20]+0x63c>
    35d2:	rsb	r2, r2, #255	; 0xff
    35d6:	ldr	r3, [pc, #668]	; (3874 <Screen::iterate_animation() [clone .part.20]+0x658>)
    35d8:	ldr.w	r0, [r3, r2, lsl #2]
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				bri = (*_grow_automaton).brightnessMap(x, y);
				sat = (*_sat_automaton).saturationMap(x, y);	
				if ((*_fg_automaton).can_color(x, y)) {
    35dc:	ldr.w	r3, [fp, #436]	; 0x1b4
    35e0:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    35e4:	ldrb	r4, [r3, #24]
    35e6:	ldr	r2, [r2, #0]
      return _background[x][y];
    35e8:	add	r2, lr
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    35ea:	cmp	r4, #0
    35ec:	beq.w	385c <Screen::iterate_animation() [clone .part.20]+0x640>
      return _background[x][y];
    35f0:	ldr	r4, [sp, #0]
    35f2:	ldrb	r2, [r2, r4]
    35f4:	cbnz	r2, 35fa <Screen::iterate_animation() [clone .part.20]+0x3de>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    35f6:	ldr.w	r3, [fp, #432]	; 0x1b0
    35fa:	add.w	r2, r9, lr
    35fe:	ldr.w	r6, [fp, #480]	; 0x1e0
    3602:	add.w	r3, r3, r2, lsl #2
    3606:	ldr	r4, [r3, #28]
    3608:	add.w	r4, r4, r4, lsl #2
    360c:	smull	r2, r3, r4, ip
    3610:	asrs	r2, r4, #31
    3612:	adds	r5, r4, r3
    3614:	ldr.w	r3, [fp, #484]	; 0x1e4
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    3618:	cmp	r3, #0
    361a:	rsb	r5, r2, r5, asr #8
    361e:	mov	r2, r3
    3620:	it	lt
    3622:	addlt	r2, r3, #1
    3624:	mls	r5, r8, r5, r4
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3628:	add	r3, r6
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    362a:	asrs	r2, r2, #1
    362c:	adds	r4, r6, r2
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    362e:	negs	r2, r2
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3630:	subs	r3, r3, r4
    3632:	smull	r6, r7, r2, ip
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    3636:	subs	r6, r5, r4
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3638:	smull	r4, r5, r3, ip
    363c:	add	r7, r2
    363e:	asrs	r4, r2, #31
    3640:	add.w	sl, r3, r5
    3644:	asrs	r5, r3, #31
    3646:	rsb	r7, r4, r7, asr #8
    364a:	rsb	sl, r5, sl, asr #8
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    364e:	smull	r4, r5, r6, ip
    3652:	mls	r2, r8, r7, r2
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3656:	mls	sl, r8, sl, r3
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    365a:	adds	r4, r6, r5
    365c:	asrs	r3, r6, #31
    365e:	rsb	r2, sl, r2
    3662:	rsb	r3, r3, r4, asr #8
    3666:	cmp.w	r2, #360	; 0x168
    366a:	mls	r3, r8, r3, r6
    366e:	bge.w	382e <Screen::iterate_animation() [clone .part.20]+0x612>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    3672:	mla	r3, r2, r3, r3
    3676:	ldr	r2, [pc, #512]	; (3878 <Screen::iterate_animation() [clone .part.20]+0x65c>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3678:	cmp	r1, #120	; 0x78
    367a:	smull	r4, r2, r2, r3
    367e:	mov.w	r3, r3, asr #31
    3682:	rsb	r3, r3, r2, asr #7
    3686:	add	sl, r3
    3688:	bgt.w	3848 <Screen::iterate_animation() [clone .part.20]+0x62c>
    368c:	movs	r2, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    368e:	cmp	r0, #255	; 0xff
    3690:	beq.n	372e <Screen::iterate_animation() [clone .part.20]+0x512>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3692:	ldr	r3, [pc, #488]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    3694:	mul.w	r0, r2, r0
    switch(hue/60) {
    3698:	smull	r1, r3, r3, sl
    369c:	mov.w	r1, sl, asr #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    36a0:	asrs	r0, r0, #8
    switch(hue/60) {
    36a2:	add	r3, sl
    36a4:	rsb	r3, r1, r3, asr #5
    36a8:	cmp	r3, #5
    36aa:	bhi.w	3866 <Screen::iterate_animation() [clone .part.20]+0x64a>
    36ae:	tbb	[pc, r3]
    36b2:	.short	0xab53
    36b4:	.word	0x19647e9a

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    36b8:	ldrb.w	r3, [fp]
    36bc:	eor.w	r3, r3, #1
    36c0:	b.n	3282 <Screen::iterate_animation() [clone .part.20]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    36c2:	ldr.w	r2, [r9, #4]
    36c6:	add	r1, r2
    36c8:	str.w	r1, [ip]
    36cc:	b.n	334e <Screen::iterate_animation() [clone .part.20]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    36ce:	ldrb.w	r3, [fp]
    36d2:	eor.w	r3, r3, #1
    36d6:	b.n	3418 <Screen::iterate_animation() [clone .part.20]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    36d8:	ldr.w	r2, [r9, #4]
    36dc:	add	r1, r2
    36de:	str.w	r1, [ip]
    36e2:	b.n	34e4 <Screen::iterate_animation() [clone .part.20]+0x2c8>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    36e4:	ldr	r3, [pc, #404]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    36e6:	uxtb	r6, r2
    36e8:	uxtb	r5, r0
    36ea:	smull	r3, r4, r3, sl
    36ee:	subs	r3, r2, r0
    36f0:	add.w	r2, r4, sl
    36f4:	rsb	r1, r1, r2, asr #5
    36f8:	rsb	r1, r1, r1, lsl #4
    36fc:	sub.w	sl, sl, r1, lsl #2
    3700:	rsb	r2, sl, #60	; 0x3c
    3704:	mul.w	r3, r3, r2
    3708:	ldr	r2, [pc, #368]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    370a:	smull	r2, r1, r2, r3
    370e:	asrs	r2, r3, #31
    3710:	add	r3, r1
    3712:	rsb	r3, r2, r3, asr #5
    3716:	adds	r2, r0, r3
    3718:	uxtb	r4, r2
    break;
    }
    *r = colors[0];
    371a:	ldr	r1, [sp, #4]
    371c:	add.w	r3, lr, lr, lsl #1
				}
				
				hue = filter_hue(hue);
				bri = shift_bri(bri);
				
				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    3720:	ldr.w	r2, [fp, #496]	; 0x1f0
    3724:	add	r3, r1
    3726:	adds	r1, r2, r3
    3728:	strb	r6, [r2, r3]
    *g = colors[1];
    372a:	strb	r5, [r1, #1]
    *b = colors[2]; 
    372c:	strb	r4, [r1, #2]
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    372e:	add.w	lr, lr, #1
    3732:	cmp.w	lr, #24
    3736:	bne.w	3584 <Screen::iterate_animation() [clone .part.20]+0x368>
		return result;
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    373a:	ldr	r3, [sp, #8]
    373c:	ldr	r2, [sp, #0]
    373e:	adds	r3, #1
    3740:	adds	r2, #24
    3742:	cmp	r3, #24
    3744:	str	r3, [sp, #8]
    3746:	str	r2, [sp, #0]
    3748:	bne.w	356a <Screen::iterate_animation() [clone .part.20]+0x34e>
			(*_sat_automaton).iterate_growth();
			ratio = 0;
		}

		gen_color_matrix();
		newFrameReady = true;
    374c:	movs	r3, #1
    374e:	strb.w	r3, [fp, #460]	; 0x1cc
	}
    3752:	add	sp, #68	; 0x44
    3754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    3758:	subs	r3, r2, r0
    375a:	uxtb	r6, r2
    375c:	uxtb	r4, r0
    375e:	mul.w	sl, sl, r3
    3762:	ldr	r3, [pc, #280]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3764:	smull	r2, r3, r3, sl
    3768:	mov.w	r2, sl, asr #31
    376c:	add	sl, r3
    376e:	rsb	sl, r2, sl, asr #5
    3772:	add.w	r2, r0, sl
    3776:	uxtb	r5, r2
    3778:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    377a:	ldr	r3, [pc, #256]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    377c:	uxtb	r4, r2
    377e:	smull	r3, r5, r3, sl
    3782:	subs	r3, r2, r0
    3784:	add.w	r2, r5, sl
    3788:	uxtb	r5, r0
    378a:	rsb	r1, r1, r2, asr #5
    378e:	rsb	r1, r1, r1, lsl #4
    3792:	sub.w	sl, sl, r1, lsl #2
    3796:	mul.w	r3, sl, r3
    379a:	ldr	r2, [pc, #224]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    379c:	smull	r2, r1, r2, r3
    37a0:	asrs	r2, r3, #31
    37a2:	add	r3, r1
    37a4:	rsb	r3, r2, r3, asr #5
    37a8:	adds	r2, r0, r3
    37aa:	uxtb	r6, r2
    37ac:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    37ae:	ldr	r3, [pc, #204]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37b0:	uxtb	r4, r2
    37b2:	uxtb	r6, r0
    37b4:	smull	r3, r5, r3, sl
    37b8:	subs	r3, r2, r0
    37ba:	add.w	r2, r5, sl
    37be:	rsb	r1, r1, r2, asr #5
    37c2:	rsb	r1, r1, r1, lsl #4
    37c6:	sub.w	sl, sl, r1, lsl #2
    37ca:	rsb	r2, sl, #60	; 0x3c
    37ce:	mul.w	r3, r3, r2
    37d2:	ldr	r2, [pc, #168]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37d4:	smull	r2, r1, r2, r3
    37d8:	asrs	r2, r3, #31
    37da:	add	r3, r1
    37dc:	rsb	r3, r2, r3, asr #5
    37e0:	adds	r2, r0, r3
    37e2:	uxtb	r5, r2
    37e4:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    37e6:	ldr	r3, [pc, #148]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37e8:	uxtb	r5, r2
    37ea:	uxtb	r6, r0
    37ec:	smull	r3, r4, r3, sl
    37f0:	subs	r3, r2, r0
    37f2:	add.w	r2, r4, sl
    37f6:	rsb	r1, r1, r2, asr #5
    37fa:	rsb	r1, r1, r1, lsl #4
    37fe:	sub.w	sl, sl, r1, lsl #2
    3802:	mul.w	r3, sl, r3
    3806:	b.n	3708 <Screen::iterate_animation() [clone .part.20]+0x4ec>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    3808:	ldr	r3, [pc, #112]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    380a:	uxtb	r5, r2
    380c:	smull	r3, r4, r3, sl
    3810:	subs	r3, r2, r0
    3812:	add.w	r2, r4, sl
    3816:	uxtb	r4, r0
    3818:	rsb	r1, r1, r2, asr #5
    381c:	rsb	r1, r1, r1, lsl #4
    3820:	sub.w	sl, sl, r1, lsl #2
    3824:	rsb	r2, sl, #60	; 0x3c
    3828:	mul.w	r3, r3, r2
    382c:	b.n	379a <Screen::iterate_animation() [clone .part.20]+0x57e>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    382e:	mul.w	r3, r2, r3
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3832:	cmp	r1, #120	; 0x78
    3834:	smull	r2, r4, ip, r3
    3838:	mov.w	r2, r3, asr #31
    383c:	add	r3, r4
    383e:	rsb	r3, r2, r3, asr #8
    3842:	add	sl, r3
    3844:	ble.w	368c <Screen::iterate_animation() [clone .part.20]+0x470>
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    3848:	adds	r1, #70	; 0x46
    384a:	ldr	r3, [pc, #40]	; (3874 <Screen::iterate_animation() [clone .part.20]+0x658>)
    384c:	cmp	r1, #255	; 0xff
    384e:	it	ge
    3850:	movge	r1, #255	; 0xff
    3852:	ldr.w	r2, [r3, r1, lsl #2]
    3856:	b.n	368e <Screen::iterate_animation() [clone .part.20]+0x472>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    3858:	movs	r0, #5
    385a:	b.n	35dc <Screen::iterate_animation() [clone .part.20]+0x3c0>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    385c:	ldr	r4, [sp, #0]
    385e:	ldrb	r2, [r2, r4]
    3860:	eor.w	r2, r2, #1
    3864:	b.n	35f4 <Screen::iterate_animation() [clone .part.20]+0x3d8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3866:	movs	r4, #0
    3868:	mov	r5, r4
    386a:	mov	r6, r4
    386c:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
    386e:	nop
    3870:	.word	0x80808081
    3874:	.word	0x200001c0
    3878:	.word	0x5ac5242b
    387c:	.word	0x88888889
    3880:	.word	0x2aaaaaab
    3884:	.word	0xb60b60b7
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    3888:	ldr.w	sl, [fp, #440]	; 0x1b8
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    388c:	movs	r2, #32
    388e:	mov.w	r8, #2
    3892:	ldr.w	r9, [pc, #732]	; 3b70 <Screen::iterate_animation() [clone .part.20]+0x954>
    3896:	addw	r3, sl, #2332	; 0x91c
    389a:	movs	r1, #0
    389c:	add.w	r0, sp, r2
    38a0:	str	r3, [sp, #4]
    38a2:	bl	ebbc <memset>
    38a6:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    38aa:	bl	5d0 <updateBeams()>
  updateScreensFade();
    38ae:	bl	2c88 <updateScreensFade()>
    38b2:	ldr.w	r3, [sl]
    38b6:	ldr	r2, [sp, #4]
    38b8:	mov.w	ip, #4294967295
    38bc:	str	r3, [sp, #8]
    38be:	ldr.w	r3, [sl, #12]
    38c2:	mov	fp, r2
    38c4:	str	r3, [sp, #12]
    38c6:	subw	r3, r2, #2308	; 0x904
    38ca:	str	r3, [sp, #0]
    38cc:	sub.w	r3, r8, #3
    38d0:	str	r3, [sp, #16]
    38d2:	ldr	r6, [sp, #16]
    38d4:	add.w	lr, sp, #32
    38d8:	add.w	r7, ip, #3
    38dc:	smull	r3, r2, r9, r6
    38e0:	asrs	r3, r6, #31
    38e2:	mov	r4, lr
    38e4:	mov	r1, ip
    38e6:	rsb	r3, r3, r2, asr #2
    38ea:	add.w	r3, r3, r3, lsl #1
    38ee:	sub.w	r3, r6, r3, lsl #3
    38f2:	adds	r3, #24
    38f4:	smull	r2, r0, r9, r3
    38f8:	asrs	r2, r3, #31
    38fa:	rsb	r0, r2, r0, asr #2
    38fe:	add.w	r0, r0, r0, lsl #1
    3902:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3906:	add.w	r0, r0, r0, lsl #1
    390a:	lsls	r0, r0, #3
    390c:	smull	r3, r2, r9, r1
    3910:	asrs	r3, r1, #31
    3912:	rsb	r3, r3, r2, asr #2
    3916:	add.w	r3, r3, r3, lsl #1
    391a:	sub.w	r3, r1, r3, lsl #3
    391e:	adds	r1, #1
    3920:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3922:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3924:	smull	r2, r5, r9, r3
    3928:	mov.w	r2, r3, asr #31
    392c:	rsb	r2, r2, r5, asr #2
    3930:	add.w	r2, r2, r2, lsl #1
    3934:	sub.w	r3, r3, r2, lsl #3
    3938:	add	r3, r0
    393a:	add.w	r3, sl, r3, lsl #2
    393e:	ldr	r3, [r3, #28]
    3940:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3944:	bne.n	390c <Screen::iterate_animation() [clone .part.20]+0x6f0>
    3946:	adds	r6, #1
    3948:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    394c:	cmp	r8, r6
    394e:	bne.n	38dc <Screen::iterate_animation() [clone .part.20]+0x6c0>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3950:	ldr	r3, [sp, #0]
    3952:	movs	r1, #1
    3954:	ldr.w	r0, [r3, #4]!
    3958:	str	r3, [sp, #0]
    395a:	ldr	r3, [sp, #8]
    395c:	adds	r5, r0, r3
    395e:	movs	r4, #0
    3960:	mov	r3, r4
    3962:	b.n	396a <Screen::iterate_animation() [clone .part.20]+0x74e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3964:	adds	r3, #1
    3966:	cmp	r3, #8
    3968:	beq.n	3980 <Screen::iterate_animation() [clone .part.20]+0x764>
          if ((i >> j) % 2 == 1){
    396a:	asr.w	r2, r1, r3
    396e:	lsls	r6, r2, #31
    3970:	bpl.n	3964 <Screen::iterate_animation() [clone .part.20]+0x748>
            sum += neighbours[j];
    3972:	add	r2, sp, #32
    3974:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3978:	adds	r3, #1
    397a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    397c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    397e:	bne.n	396a <Screen::iterate_animation() [clone .part.20]+0x74e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3980:	cmp	r5, r4
    3982:	beq.w	3b56 <Screen::iterate_animation() [clone .part.20]+0x93a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3986:	adds	r1, #1
    3988:	cmp.w	r1, #256	; 0x100
    398c:	bne.n	395e <Screen::iterate_animation() [clone .part.20]+0x742>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    398e:	ldr.w	r3, [sl, #8]
    3992:	subs	r0, r0, r3
    3994:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3998:	ldr	r2, [sp, #12]
    399a:	add.w	ip, ip, #1
    399e:	add.w	fp, fp, #4
    39a2:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    39a4:	it	gt
    39a6:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    39aa:	cmp.w	ip, #23
    39ae:	bne.n	38d2 <Screen::iterate_animation() [clone .part.20]+0x6b6>
    39b0:	ldr	r3, [sp, #4]
    39b2:	add.w	r8, r8, #1
    39b6:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    39b8:	cmp.w	r8, #26
    39bc:	str	r3, [sp, #4]
    39be:	bne.w	38aa <Screen::iterate_animation() [clone .part.20]+0x68e>
    39c2:	movw	r0, #4632	; 0x1218
    39c6:	ldr.w	fp, [sp, #20]
    39ca:	addw	r3, sl, #2328	; 0x918
    39ce:	add	r0, sl
    39d0:	sub.w	r2, r3, #2304	; 0x900
    39d4:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    39d8:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    39da:	ldr.w	r4, [r1, #4]!
    39de:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    39e2:	cmp	r5, r2
    39e4:	bne.n	39da <Screen::iterate_animation() [clone .part.20]+0x7be>
    39e6:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    39e8:	cmp	r0, r3
    39ea:	bne.n	39d0 <Screen::iterate_animation() [clone .part.20]+0x7b4>
			(*_sat_automaton).iterate_growth();
    39ec:	ldr.w	sl, [fp, #444]	; 0x1bc
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    39f0:	movs	r2, #32
    39f2:	mov.w	r8, #2
    39f6:	ldr.w	r9, [pc, #376]	; 3b70 <Screen::iterate_animation() [clone .part.20]+0x954>
    39fa:	addw	r3, sl, #2332	; 0x91c
    39fe:	movs	r1, #0
    3a00:	add.w	r0, sp, r2
    3a04:	str	r3, [sp, #4]
    3a06:	bl	ebbc <memset>
    3a0a:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3a0e:	bl	5d0 <updateBeams()>
  updateScreensFade();
    3a12:	bl	2c88 <updateScreensFade()>
    3a16:	ldr.w	r3, [sl]
    3a1a:	ldr	r2, [sp, #4]
    3a1c:	mov.w	ip, #4294967295
    3a20:	str	r3, [sp, #8]
    3a22:	ldr.w	r3, [sl, #12]
    3a26:	mov	fp, r2
    3a28:	str	r3, [sp, #12]
    3a2a:	subw	r3, r2, #2308	; 0x904
    3a2e:	str	r3, [sp, #0]
    3a30:	sub.w	r3, r8, #3
    3a34:	str	r3, [sp, #16]
    3a36:	ldr	r6, [sp, #16]
    3a38:	add.w	lr, sp, #32
    3a3c:	add.w	r7, ip, #3
    3a40:	smull	r3, r2, r9, r6
    3a44:	asrs	r3, r6, #31
    3a46:	mov	r4, lr
    3a48:	mov	r1, ip
    3a4a:	rsb	r3, r3, r2, asr #2
    3a4e:	add.w	r3, r3, r3, lsl #1
    3a52:	sub.w	r3, r6, r3, lsl #3
    3a56:	adds	r3, #24
    3a58:	smull	r2, r0, r9, r3
    3a5c:	asrs	r2, r3, #31
    3a5e:	rsb	r0, r2, r0, asr #2
    3a62:	add.w	r0, r0, r0, lsl #1
    3a66:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3a6a:	add.w	r0, r0, r0, lsl #1
    3a6e:	lsls	r0, r0, #3
    3a70:	smull	r3, r2, r9, r1
    3a74:	asrs	r3, r1, #31
    3a76:	rsb	r3, r3, r2, asr #2
    3a7a:	add.w	r3, r3, r3, lsl #1
    3a7e:	sub.w	r3, r1, r3, lsl #3
    3a82:	adds	r1, #1
    3a84:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3a86:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3a88:	smull	r2, r5, r9, r3
    3a8c:	mov.w	r2, r3, asr #31
    3a90:	rsb	r2, r2, r5, asr #2
    3a94:	add.w	r2, r2, r2, lsl #1
    3a98:	sub.w	r3, r3, r2, lsl #3
    3a9c:	add	r3, r0
    3a9e:	add.w	r3, sl, r3, lsl #2
    3aa2:	ldr	r3, [r3, #28]
    3aa4:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3aa8:	bne.n	3a70 <Screen::iterate_animation() [clone .part.20]+0x854>
    3aaa:	adds	r6, #1
    3aac:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3ab0:	cmp	r6, r8
    3ab2:	bne.n	3a40 <Screen::iterate_animation() [clone .part.20]+0x824>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3ab4:	ldr	r3, [sp, #0]
    3ab6:	movs	r1, #1
    3ab8:	ldr.w	r0, [r3, #4]!
    3abc:	str	r3, [sp, #0]
    3abe:	ldr	r3, [sp, #8]
    3ac0:	adds	r5, r0, r3
    3ac2:	movs	r4, #0
    3ac4:	mov	r3, r4
    3ac6:	b.n	3ace <Screen::iterate_animation() [clone .part.20]+0x8b2>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3ac8:	adds	r3, #1
    3aca:	cmp	r3, #8
    3acc:	beq.n	3ae4 <Screen::iterate_animation() [clone .part.20]+0x8c8>
          if ((i >> j) % 2 == 1){
    3ace:	asr.w	r2, r1, r3
    3ad2:	lsls	r2, r2, #31
    3ad4:	bpl.n	3ac8 <Screen::iterate_animation() [clone .part.20]+0x8ac>
            sum += neighbours[j];
    3ad6:	add	r2, sp, #32
    3ad8:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3adc:	adds	r3, #1
    3ade:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3ae0:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3ae2:	bne.n	3ace <Screen::iterate_animation() [clone .part.20]+0x8b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3ae4:	cmp	r5, r4
    3ae6:	beq.n	3b62 <Screen::iterate_animation() [clone .part.20]+0x946>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3ae8:	adds	r1, #1
    3aea:	cmp.w	r1, #256	; 0x100
    3aee:	bne.n	3ac2 <Screen::iterate_animation() [clone .part.20]+0x8a6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3af0:	ldr.w	r3, [sl, #8]
    3af4:	subs	r0, r0, r3
    3af6:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3afa:	ldr	r2, [sp, #12]
    3afc:	add.w	ip, ip, #1
    3b00:	add.w	fp, fp, #4
    3b04:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    3b06:	it	gt
    3b08:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3b0c:	cmp.w	ip, #23
    3b10:	bne.n	3a36 <Screen::iterate_animation() [clone .part.20]+0x81a>
    3b12:	ldr	r3, [sp, #4]
    3b14:	add.w	r8, r8, #1
    3b18:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3b1a:	cmp.w	r8, #26
    3b1e:	str	r3, [sp, #4]
    3b20:	bne.w	3a0e <Screen::iterate_animation() [clone .part.20]+0x7f2>
    3b24:	movw	r0, #4632	; 0x1218
    3b28:	ldr.w	fp, [sp, #20]
    3b2c:	addw	r3, sl, #2328	; 0x918
    3b30:	add	r0, sl
    3b32:	sub.w	r2, r3, #2304	; 0x900
    3b36:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3b3a:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3b3c:	ldr.w	r4, [r1, #4]!
    3b40:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3b44:	cmp	r5, r2
    3b46:	bne.n	3b3c <Screen::iterate_animation() [clone .part.20]+0x920>
    3b48:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3b4a:	cmp	r0, r3
    3b4c:	bne.n	3b32 <Screen::iterate_animation() [clone .part.20]+0x916>
			ratio = 0;
    3b4e:	movs	r3, #0
    3b50:	str.w	r3, [fp, #464]	; 0x1d0
    3b54:	b.n	3560 <Screen::iterate_animation() [clone .part.20]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3b56:	ldr.w	r2, [sl, #4]
    3b5a:	add	r0, r2
    3b5c:	str.w	r0, [fp]
    3b60:	b.n	3998 <Screen::iterate_animation() [clone .part.20]+0x77c>
    3b62:	ldr.w	r2, [sl, #4]
    3b66:	add	r0, r2
    3b68:	str.w	r0, [fp]
    3b6c:	b.n	3afa <Screen::iterate_animation() [clone .part.20]+0x8de>
    3b6e:	nop
    3b70:	.word	0x2aaaaaab
    3b74:	.word	0x00000000

00003b78 <regular_animation()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3b78:	ldr	r3, [pc, #724]	; (3e50 <regular_animation()+0x2d8>)
  screen_B.init_screen();
  sinceAutomatonInit = 0;
}


void regular_animation(){
    3b7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b7e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b80:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3b82:	ldr	r1, [r3, #40]	; 0x28
    3b84:	vpush	{d8-d9}
    3b88:	sub	sp, #68	; 0x44
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b8a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3b8c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b8e:	ldr	r6, [pc, #704]	; (3e50 <regular_animation()+0x2d8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3b90:	cmp	r3, r1
    3b92:	it	eq
    3b94:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b96:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3b98:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3b9a:	ite	eq
    3b9c:	moveq	r5, #1
    3b9e:	movne	r5, #0
    3ba0:	cmp	r5, #0
    3ba2:	beq.n	3b8a <regular_animation()+0x12>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL && sinceAutomatonInit > 2000){
    3ba4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    3ba6:	ldr	r4, [pc, #684]	; (3e54 <regular_animation()+0x2dc>)
    3ba8:	orr.w	r1, r1, r2, lsl #27
    3bac:	ldr	r3, [r4, #0]
    3bae:	vmov	s15, r1
    3bb2:	vldr	d5, [pc, #660]	; 3e48 <regular_animation()+0x2d0>
    3bb6:	vcvt.f64.u32	d7, s15
    3bba:	vdiv.f64	d6, d7, d5
    3bbe:	vcvt.u32.f64	s12, d6
    3bc2:	vmov	r2, s12
    3bc6:	subs	r3, r2, r3
    3bc8:	cmp.w	r3, #800	; 0x320
    3bcc:	bls.n	3c18 <regular_animation()+0xa0>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3bce:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd0:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3bd2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd4:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3bd6:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd8:	ldr	r7, [pc, #628]	; (3e50 <regular_animation()+0x2d8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3bda:	cmp	r3, r1
    3bdc:	it	eq
    3bde:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3be0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3be2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3be4:	ite	eq
    3be6:	moveq	r6, #1
    3be8:	movne	r6, #0
    3bea:	cmp	r6, #0
    3bec:	beq.n	3bd4 <regular_animation()+0x5c>
    3bee:	lsrs	r1, r3, #5
    3bf0:	ldr	r3, [pc, #612]	; (3e58 <regular_animation()+0x2e0>)
    3bf2:	orr.w	r1, r1, r2, lsl #27
    3bf6:	ldr	r3, [r3, #0]
    3bf8:	vmov	s15, r1
    3bfc:	vldr	d5, [pc, #584]	; 3e48 <regular_animation()+0x2d0>
    3c00:	vcvt.f64.u32	d7, s15
    3c04:	vdiv.f64	d6, d7, d5
    3c08:	vcvt.u32.f64	s12, d6
    3c0c:	vmov	r2, s12
    3c10:	subs	r3, r2, r3
    3c12:	cmp.w	r3, #2000	; 0x7d0
    3c16:	bhi.n	3cd0 <regular_animation()+0x158>
    3c18:	ldr	r3, [pc, #576]	; (3e5c <regular_animation()+0x2e4>)
    3c1a:	ldr.w	fp, [pc, #580]	; 3e60 <regular_animation()+0x2e8>
    3c1e:	str	r3, [sp, #24]
		return true;
	}


	void iterate_animation(){
		if (allZero(_grow_automaton)){
    3c20:	ldr	r3, [sp, #24]
    3c22:	ldr.w	r7, [r3, #440]	; 0x1b8
    3c26:	add.w	r2, r7, #120	; 0x78
    3c2a:	addw	r1, r7, #2424	; 0x978
    3c2e:	sub.w	r3, r2, #96	; 0x60
    3c32:	b.n	3c3a <regular_animation()+0xc2>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c34:	cmp	r3, r2
    3c36:	beq.w	3ef0 <regular_animation()+0x378>
				if ((*automaton).cells[i][j] != 0){
    3c3a:	ldr.w	r4, [r3, #4]!
    3c3e:	cmp	r4, #0
    3c40:	beq.n	3c34 <regular_animation()+0xbc>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    3c42:	ldr	r3, [sp, #24]
    3c44:	ldr.w	r7, [r3, #436]	; 0x1b4
    3c48:	add.w	r2, r7, #120	; 0x78
    3c4c:	addw	r1, r7, #2424	; 0x978
    3c50:	sub.w	r3, r2, #96	; 0x60
    3c54:	b.n	3c5c <regular_animation()+0xe4>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c56:	cmp	r3, r2
    3c58:	beq.w	3f88 <regular_animation()+0x410>
				if ((*automaton).cells[i][j] != 0){
    3c5c:	ldr.w	r6, [r3, #4]!
    3c60:	cmp	r6, #0
    3c62:	beq.n	3c56 <regular_animation()+0xde>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    3c64:	ldr	r3, [sp, #24]
    3c66:	ldrb.w	r3, [r3, #460]	; 0x1cc
    3c6a:	cbnz	r3, 3c72 <regular_animation()+0xfa>
    3c6c:	ldr	r0, [pc, #492]	; (3e5c <regular_animation()+0x2e4>)
    3c6e:	bl	321c <Screen::iterate_animation() [clone .part.20]>
		return true;
	}


	void iterate_animation(){
		if (allZero(_grow_automaton)){
    3c72:	ldr.w	r7, [fp, #440]	; 0x1b8
    3c76:	add.w	r2, r7, #120	; 0x78
    3c7a:	addw	r1, r7, #2424	; 0x978
    3c7e:	sub.w	r3, r2, #96	; 0x60
    3c82:	b.n	3c8a <regular_animation()+0x112>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c84:	cmp	r2, r3
    3c86:	beq.w	4014 <regular_animation()+0x49c>
				if ((*automaton).cells[i][j] != 0){
    3c8a:	ldr.w	r4, [r3, #4]!
    3c8e:	cmp	r4, #0
    3c90:	beq.n	3c84 <regular_animation()+0x10c>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    3c92:	ldr.w	r7, [fp, #436]	; 0x1b4
    3c96:	add.w	r2, r7, #120	; 0x78
    3c9a:	addw	r1, r7, #2424	; 0x978
    3c9e:	sub.w	r3, r2, #96	; 0x60
    3ca2:	b.n	3caa <regular_animation()+0x132>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3ca4:	cmp	r2, r3
    3ca6:	beq.w	3e70 <regular_animation()+0x2f8>
				if ((*automaton).cells[i][j] != 0){
    3caa:	ldr.w	r4, [r3, #4]!
    3cae:	cmp	r4, #0
    3cb0:	beq.n	3ca4 <regular_animation()+0x12c>

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		if (newFrameReady) return;
    3cb2:	ldrb.w	r3, [fp, #460]	; 0x1cc
    3cb6:	cbnz	r3, 3cbe <regular_animation()+0x146>
    3cb8:	ldr	r0, [pc, #420]	; (3e60 <regular_animation()+0x2e8>)
    3cba:	bl	321c <Screen::iterate_animation() [clone .part.20]>
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3cbe:	bl	5d0 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt(); 
}
    3cc2:	add	sp, #68	; 0x44
    3cc4:	vpop	{d8-d9}
    3cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    3ccc:	b.w	2c88 <updateScreensFade()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3cd0:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3cd2:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3cd4:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3cd6:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3cd8:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3cda:	cmp	r3, r1
    3cdc:	it	eq
    3cde:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3ce0:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3ce2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3ce4:	ite	eq
    3ce6:	moveq	r6, #1
    3ce8:	movne	r6, #0
    3cea:	cmp	r6, #0
    3cec:	beq.n	3cd6 <regular_animation()+0x15e>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    3cee:	lsrs	r3, r3, #5


void regular_animation(){
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL && sinceAutomatonInit > 2000){
    sinceBeam = 0;
    int rand1 = random(0, 2);
    3cf0:	movs	r0, #0
    3cf2:	movs	r1, #2
    3cf4:	orr.w	r3, r3, r2, lsl #27

	public:
		

Color(){
	RGB_updated = false;
    3cf8:	mov	r6, r0
    3cfa:	vmov	s15, r3
    3cfe:	vldr	d5, [pc, #328]	; 3e48 <regular_animation()+0x2d0>
    3d02:	vcvt.f64.u32	d7, s15
    3d06:	vdiv.f64	d6, d7, d5
    3d0a:	vcvt.u32.f64	s12, d6
    3d0e:	vstr	s12, [r4]
    3d12:	bl	dac8 <random(long, long)>
    3d16:	mov	r5, r0
    int rand2 = random(0, 2);
    3d18:	movs	r1, #2
    3d1a:	mov	r0, r6
    3d1c:	bl	dac8 <random(long, long)>
    3d20:	mov	r4, r0
    Color color1, color2;
    if (rand1 == 0){
    3d22:	cmp	r5, #0
    3d24:	bne.w	40aa <regular_animation()+0x532>
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    3d28:	ldr	r3, [pc, #304]	; (3e5c <regular_animation()+0x2e4>)
    3d2a:	mov	r1, r3
    3d2c:	str	r3, [sp, #24]
    3d2e:	ldr.w	r3, [r3, #480]	; 0x1e0
    3d32:	ldr.w	r1, [r1, #484]	; 0x1e4
    3d36:	mov	r0, r3
    3d38:	add	r1, r3
    3d3a:	bl	dac8 <random(long, long)>
    3d3e:	movs	r1, #75	; 0x4b
    3d40:	mov	r6, r0
    3d42:	movs	r0, #50	; 0x32
    3d44:	bl	dac8 <random(long, long)>
    3d48:	movs	r1, #80	; 0x50
    3d4a:	mov	r7, r0
    3d4c:	movs	r0, #55	; 0x37
    3d4e:	bl	dac8 <random(long, long)>
    3d52:	add.w	r1, r6, #720	; 0x2d0
    3d56:	ldr	r2, [pc, #268]	; (3e64 <regular_animation()+0x2ec>)
    3d58:	mov.w	r6, #360	; 0x168
    3d5c:	lsrs	r3, r1, #3
    3d5e:	strb.w	r0, [sp, #41]	; 0x29
    3d62:	movs	r0, #1
    3d64:	strb.w	r7, [sp, #40]	; 0x28
    3d68:	umull	r3, r2, r2, r3
    3d6c:	strb.w	r5, [sp, #44]	; 0x2c
    3d70:	lsrs	r2, r2, #2
    3d72:	strb.w	r0, [sp, #45]	; 0x2d
    3d76:	mls	r3, r6, r2, r1
    3d7a:	str	r3, [sp, #36]	; 0x24
    } else {
      color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    }

    if (rand2 == 0){
    3d7c:	cmp	r4, #0
    3d7e:	bne.w	40fc <regular_animation()+0x584>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    3d82:	ldr.w	fp, [pc, #220]	; 3e60 <regular_animation()+0x2e8>
    3d86:	ldr.w	r3, [fp, #480]	; 0x1e0
    3d8a:	ldr.w	r1, [fp, #484]	; 0x1e4
    3d8e:	mov	r0, r3
    3d90:	add	r1, r3
    3d92:	bl	dac8 <random(long, long)>
    3d96:	movs	r1, #75	; 0x4b
    3d98:	mov	r6, r0
    3d9a:	movs	r0, #50	; 0x32
    3d9c:	bl	dac8 <random(long, long)>
    3da0:	movs	r1, #80	; 0x50
    3da2:	mov	r7, r0
    3da4:	movs	r0, #55	; 0x37
    3da6:	bl	dac8 <random(long, long)>
    3daa:	add.w	r1, r6, #720	; 0x2d0
    3dae:	ldr	r2, [pc, #180]	; (3e64 <regular_animation()+0x2ec>)
    3db0:	mov.w	r6, #360	; 0x168
    3db4:	lsrs	r3, r1, #3
    3db6:	strb.w	r0, [sp, #57]	; 0x39
    3dba:	movs	r0, #1
    3dbc:	strb.w	r7, [sp, #56]	; 0x38
    3dc0:	umull	r3, r2, r2, r3
    3dc4:	strb.w	r4, [sp, #60]	; 0x3c
    3dc8:	lsrs	r2, r2, #2
    3dca:	strb.w	r0, [sp, #61]	; 0x3d
    3dce:	mls	r3, r6, r2, r1
    3dd2:	str	r3, [sp, #52]	; 0x34
    } else {
      color2 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    }
    newBeam(&synapse_A, rand1, color1, random(3, 30),random(1000,6000));
    3dd4:	movs	r1, #30
    3dd6:	movs	r0, #3
    3dd8:	bl	dac8 <random(long, long)>
    3ddc:	movw	r1, #6000	; 0x1770
    3de0:	vmov	s16, r0
    3de4:	mov.w	r0, #1000	; 0x3e8
    3de8:	bl	dac8 <random(long, long)>
    3dec:	add	r2, sp, #40	; 0x28
    3dee:	str	r0, [sp, #8]
    3df0:	add	r3, sp, #32
    3df2:	vcvt.f32.s32	s0, s16
    3df6:	ldmia.w	r2, {r0, r1}
    3dfa:	ldmia	r3, {r2, r3}
    3dfc:	stmia.w	sp, {r0, r1}
    3e00:	adds	r1, r5, #0
    3e02:	ldr	r0, [pc, #100]	; (3e68 <regular_animation()+0x2f0>)
    3e04:	it	ne
    3e06:	movne	r1, #1
    3e08:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_B, rand2, color2, random(3, 30),random(1000,6000));
    3e0c:	movs	r1, #30
    3e0e:	movs	r0, #3
    3e10:	bl	dac8 <random(long, long)>
    3e14:	movw	r1, #6000	; 0x1770
    3e18:	vmov	s16, r0
    3e1c:	mov.w	r0, #1000	; 0x3e8
    3e20:	bl	dac8 <random(long, long)>
    3e24:	add	r2, sp, #64	; 0x40
    3e26:	str	r0, [sp, #8]
    3e28:	add	r3, sp, #48	; 0x30
    3e2a:	vcvt.f32.s32	s0, s16
    3e2e:	ldmdb	r2, {r0, r1}
    3e32:	ldmia	r3, {r2, r3}
    3e34:	stmia.w	sp, {r0, r1}
    3e38:	adds	r1, r4, #0
    3e3a:	ldr	r0, [pc, #48]	; (3e6c <regular_animation()+0x2f4>)
    3e3c:	it	ne
    3e3e:	movne	r1, #1
    3e40:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    3e44:	b.n	3c20 <regular_animation()+0xa8>
    3e46:	nop
    3e48:	.word	0xd2f1a9fc
    3e4c:	.word	0x3ff0624d
    3e50:	.word	0x400d4000
    3e54:	.word	0x20002c1c
    3e58:	.word	0x20007a60
    3e5c:	.word	0x20005074
    3e60:	.word	0x20005268
    3e64:	.word	0x16c16c17
    3e68:	.word	0x20008ca4
    3e6c:	.word	0x20008cb8
    3e70:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3e72:	cmp	r2, r1
    3e74:	bne.w	3c9e <regular_animation()+0x126>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3e78:	movs	r1, #8
    3e7a:	mov	r0, r4
    3e7c:	bl	dac8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3e80:	adds	r1, r0, #1
    3e82:	ldr.w	r2, [fp, #452]	; 0x1c4
    3e86:	movw	r3, #4636	; 0x121c
    3e8a:	add.w	r1, r1, r1, lsl #1
    3e8e:	ldr.w	r6, [fp, #456]	; 0x1c8
    3e92:	str	r2, [r7, r3]
    3e94:	add.w	r0, r0, r0, lsl #1
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3e98:	ldr.w	r2, [fp, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3e9c:	lsls	r1, r1, #3
    3e9e:	add.w	r3, fp, r0, lsl #3
    3ea2:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3ea6:	add.w	lr, r2, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3eaa:	add.w	r2, fp, r1
    3eae:	ldr.w	r5, [fp, r1]
    3eb2:	ldr	r2, [r2, #4]
    3eb4:	ldr	r0, [r3, #32]
    3eb6:	ldr	r1, [r3, #36]	; 0x24
    3eb8:	str	r2, [r7, #4]
    3eba:	ldr	r2, [r3, #40]	; 0x28
    3ebc:	ldr	r3, [r3, #44]	; 0x2c
    3ebe:	ldrb.w	sl, [fp, #368]	; 0x170
    3ec2:	str	r5, [r7, #0]
    3ec4:	str	r0, [r7, #8]
    3ec6:	str	r1, [r7, #12]
    3ec8:	str	r2, [r7, #16]
    3eca:	str	r3, [r7, #20]
    3ecc:	strb	r4, [r7, #24]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3ece:	ldr.w	r5, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3ed2:	str.w	r6, [ip]
    3ed6:	ldr.w	r6, [fp, #364]	; 0x16c
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3eda:	cmp.w	lr, #4
    3ede:	bhi.w	4c08 <regular_animation()+0x1090>
    3ee2:	tbh	[pc, lr, lsl #1]
    3ee6:	.short	0x0232
    3ee8:	.word	0x019f01f5
    3eec:	.word	0x01330170
    3ef0:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3ef4:	cmp	r2, r1
    3ef6:	bne.w	3c2e <regular_animation()+0xb6>
	}


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    3efa:	movs	r1, #8
    3efc:	mov	r0, r4
    3efe:	bl	dac8 <random(long, long)>
    3f02:	ldr	r6, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f04:	add.w	r5, r0, r0, lsl #1
    3f08:	movw	r2, #4636	; 0x121c
    3f0c:	ldr.w	r1, [r6, #452]	; 0x1c4


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f10:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f12:	add.w	r5, r6, r5, lsl #3
    3f16:	ldr.w	r3, [r6, #456]	; 0x1c8
    3f1a:	str	r1, [r7, r2]
    3f1c:	add.w	lr, r7, #4640	; 0x1220
    3f20:	ldr.w	r6, [r5, #208]	; 0xd0
    3f24:	mov.w	r9, #1
    3f28:	ldr.w	r4, [r5, #200]	; 0xc8
    3f2c:	ldr.w	r1, [r5, #196]	; 0xc4
    3f30:	ldr.w	r2, [r5, #204]	; 0xcc
    3f34:	str	r6, [r7, #16]
    3f36:	ldr.w	r6, [r5, #212]	; 0xd4
    3f3a:	ldr.w	r5, [r5, #192]	; 0xc0
    3f3e:	str	r4, [r7, #8]


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f40:	ldr	r4, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f42:	str	r1, [r7, #4]


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f44:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f46:	str	r5, [r7, #0]
    3f48:	str	r2, [r7, #12]
    3f4a:	str	r6, [r7, #20]
    3f4c:	strb.w	r9, [r7, #24]
    3f50:	str.w	r3, [lr]


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f54:	ldr.w	r5, [r4, #440]	; 0x1b8
    3f58:	bl	dac8 <random(long, long)>
    3f5c:	add.w	r0, r0, r0, lsl #1
    3f60:	add.w	r3, r4, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3f64:	ldr.w	r2, [r3, #372]	; 0x174
    3f68:	add.w	r3, r3, #372	; 0x174
    3f6c:	subs	r2, #1
    3f6e:	ldr	r4, [r3, #4]
    3f70:	ldrb.w	sl, [r3, #8]
    3f74:	cmp	r2, #4
    3f76:	bhi.w	4b9c <regular_animation()+0x1024>
    3f7a:	tbh	[pc, r2, lsl #1]
    3f7e:	.short	0x02dd
    3f80:	.word	0x02850309
    3f84:	.word	0x02190256
    3f88:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3f8c:	cmp	r2, r1
    3f8e:	bne.w	3c50 <regular_animation()+0xd8>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3f92:	movs	r1, #8
    3f94:	mov	r0, r6
    3f96:	bl	dac8 <random(long, long)>
    3f9a:	ldr	r5, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f9c:	movw	r1, #4636	; 0x121c
    3fa0:	adds	r2, r0, #1
    3fa2:	ldr.w	r3, [r5, #452]	; 0x1c4
    3fa6:	add.w	r0, r0, r0, lsl #1
    3faa:	add.w	r2, r2, r2, lsl #1
    3fae:	ldr.w	r4, [r5, #456]	; 0x1c8
    3fb2:	str	r3, [r7, r1]
    3fb4:	add.w	sl, r5, r0, lsl #3
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3fb8:	ldr.w	r3, [r5, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fbc:	lsls	r2, r2, #3
    3fbe:	ldr.w	r1, [sl, #36]	; 0x24
    3fc2:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3fc6:	add.w	lr, r3, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fca:	mov	r3, r5
    3fcc:	ldr.w	r0, [sl, #32]
    3fd0:	add	r3, r2
    3fd2:	ldr	r2, [r5, r2]
    3fd4:	ldr	r5, [r3, #4]
    3fd6:	str	r2, [r7, #0]
    3fd8:	ldr.w	r3, [sl, #44]	; 0x2c
    3fdc:	ldr.w	r2, [sl, #40]	; 0x28
    3fe0:	str	r1, [r7, #12]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3fe2:	ldr	r1, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fe4:	str	r5, [r7, #4]
    3fe6:	str	r0, [r7, #8]
    3fe8:	str	r2, [r7, #16]
    3fea:	str	r3, [r7, #20]
    3fec:	strb	r6, [r7, #24]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3fee:	ldr.w	r5, [r1, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3ff2:	str.w	r4, [ip]
    3ff6:	ldrb.w	sl, [r1, #368]	; 0x170
    3ffa:	ldr.w	r4, [r1, #364]	; 0x16c
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3ffe:	cmp.w	lr, #4
    4002:	bhi.w	4ac4 <regular_animation()+0xf4c>
    4006:	tbh	[pc, lr, lsl #1]
    400a:	.short	0x0404
    400c:	.word	0x036d03c5
    4010:	.word	0x0301033e
    4014:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    4016:	cmp	r2, r1
    4018:	bne.w	3c7e <regular_animation()+0x106>
	}


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    401c:	movs	r1, #8
    401e:	mov	r0, r4
    4020:	bl	dac8 <random(long, long)>
    4024:	ldr.w	r1, [fp, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4028:	add.w	r6, r0, r0, lsl #1
    402c:	movw	r2, #4636	; 0x121c
    4030:	ldr.w	r3, [fp, #456]	; 0x1c8


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4034:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4036:	add.w	r6, fp, r6, lsl #3
    403a:	str	r1, [r7, r2]
    403c:	mov.w	ip, #1
    4040:	add.w	r8, r7, #4640	; 0x1220
    4044:	ldr.w	r2, [r6, #208]	; 0xd0
    4048:	ldr.w	r1, [r6, #196]	; 0xc4
    404c:	str	r2, [sp, #20]
    404e:	ldr.w	r2, [r6, #212]	; 0xd4
    4052:	ldr.w	r5, [r6, #200]	; 0xc8
    4056:	ldr.w	r4, [r6, #204]	; 0xcc
    405a:	ldr.w	r6, [r6, #192]	; 0xc0
    405e:	str	r2, [r7, #20]
    4060:	ldr	r2, [sp, #20]
    4062:	str	r1, [r7, #4]


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4064:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4066:	str	r6, [r7, #0]
    4068:	str	r5, [r7, #8]
    406a:	str	r2, [r7, #16]
    406c:	str	r4, [r7, #12]
    406e:	strb.w	ip, [r7, #24]
    4072:	str.w	r3, [r8]


	void iterate_animation(){
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4076:	ldr.w	r5, [fp, #440]	; 0x1b8
    407a:	bl	dac8 <random(long, long)>
    407e:	add.w	r0, r0, r0, lsl #1
    4082:	add.w	r3, fp, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4086:	ldr.w	r2, [r3, #372]	; 0x174
    408a:	add.w	r3, r3, #372	; 0x174
    408e:	subs	r2, #1
    4090:	ldr	r6, [r3, #4]
    4092:	ldrb.w	sl, [r3, #8]
    4096:	cmp	r2, #4
    4098:	bhi.w	4b30 <regular_animation()+0xfb8>
    409c:	tbh	[pc, r2, lsl #1]
    40a0:	.word	0x04a804e6
    40a4:	.word	0x04220451
    40a8:	.short	0x03e5
    int rand2 = random(0, 2);
    Color color1, color2;
    if (rand1 == 0){
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    } else {
      color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    40aa:	mov.w	r1, #260	; 0x104
    40ae:	mov	r0, r6
    40b0:	bl	dac8 <random(long, long)>
    40b4:	movs	r1, #75	; 0x4b
    40b6:	mov	r7, r0
    40b8:	movs	r0, #50	; 0x32
    40ba:	bl	dac8 <random(long, long)>
    40be:	movs	r1, #80	; 0x50
    40c0:	mov	r8, r0
    40c2:	movs	r0, #55	; 0x37
    40c4:	bl	dac8 <random(long, long)>
    40c8:	add.w	r1, r7, #720	; 0x2d0
    40cc:	ldr	r2, [pc, #724]	; (43a4 <regular_animation()+0x82c>)
    40ce:	mov.w	r7, #360	; 0x168
    40d2:	lsrs	r3, r1, #3
    40d4:	strb.w	r0, [sp, #41]	; 0x29
    40d8:	movs	r0, #1
    40da:	strb.w	r8, [sp, #40]	; 0x28
    40de:	umull	r3, r2, r2, r3
    40e2:	ldr	r3, [pc, #708]	; (43a8 <regular_animation()+0x830>)
    40e4:	strb.w	r6, [sp, #44]	; 0x2c
    40e8:	lsrs	r2, r2, #2
    40ea:	str	r3, [sp, #24]
    40ec:	strb.w	r0, [sp, #45]	; 0x2d
    40f0:	mls	r3, r7, r2, r1
    40f4:	str	r3, [sp, #36]	; 0x24
    }

    if (rand2 == 0){
    40f6:	cmp	r4, #0
    40f8:	beq.w	3d82 <regular_animation()+0x20a>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    } else {
      color2 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    40fc:	mov.w	r1, #260	; 0x104
    4100:	movs	r0, #0
    4102:	bl	dac8 <random(long, long)>
    4106:	movs	r1, #75	; 0x4b
    4108:	mov	r6, r0
    410a:	movs	r0, #50	; 0x32
    410c:	bl	dac8 <random(long, long)>
    4110:	movs	r1, #80	; 0x50
    4112:	mov	r7, r0
    4114:	movs	r0, #55	; 0x37
    4116:	bl	dac8 <random(long, long)>
    411a:	add.w	r1, r6, #720	; 0x2d0
    411e:	ldr	r2, [pc, #644]	; (43a4 <regular_animation()+0x82c>)
    4120:	mov.w	r6, #360	; 0x168
    4124:	lsrs	r3, r1, #3
    4126:	strb.w	r0, [sp, #57]	; 0x39
    412a:	movs	r0, #0
    412c:	strb.w	r7, [sp, #56]	; 0x38
    4130:	umull	r3, r2, r2, r3
    4134:	movs	r3, #1
    4136:	strb.w	r0, [sp, #60]	; 0x3c
    413a:	lsrs	r2, r2, #2
    413c:	strb.w	r3, [sp, #61]	; 0x3d
    4140:	ldr.w	fp, [pc, #616]	; 43ac <regular_animation()+0x834>
    4144:	mls	r3, r6, r2, r1
    4148:	str	r3, [sp, #52]	; 0x34
    414a:	b.n	3dd4 <regular_animation()+0x25c>
    414c:	add.w	r6, r5, #28
    4150:	mov	r4, r5
    4152:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4156:	cmp.w	sl, #0
    415a:	bne.n	4178 <regular_animation()+0x600>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    415c:	ldr	r3, [r5, #0]
    415e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4160:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4164:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4166:	str	r3, [r4, #120]	; 0x78
    4168:	adds	r4, #96	; 0x60
    416a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    416c:	cmp	r7, r4
    416e:	beq.w	3cb2 <regular_animation()+0x13a>
    if (rand){
    4172:	cmp.w	sl, #0
    4176:	beq.n	415c <regular_animation()+0x5e4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4178:	ldr	r3, [r5, #20]
    417a:	ldr	r2, [r5, #16]
    417c:	subs	r0, r3, r2
    417e:	adds	r0, #2
    4180:	bl	dac0 <random(unsigned long)>
    4184:	ldr	r1, [r5, #16]
    4186:	subs	r2, r1, #1
    4188:	add	r0, r2
    418a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    418c:	ldr	r3, [r5, #20]
    418e:	subs	r0, r3, r1
    4190:	adds	r0, #2
    4192:	bl	dac0 <random(unsigned long)>
    4196:	ldr	r1, [r5, #16]
    4198:	subs	r2, r1, #1
    419a:	add	r0, r2
    419c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    41a0:	ldr	r3, [r5, #20]
    41a2:	subs	r0, r3, r1
    41a4:	adds	r0, #2
    41a6:	bl	dac0 <random(unsigned long)>
    41aa:	ldr	r1, [r5, #16]
    41ac:	subs	r2, r1, #1
    41ae:	add	r0, r2
    41b0:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    41b2:	ldr	r3, [r5, #20]
    41b4:	subs	r0, r3, r1
    41b6:	adds	r0, #2
    41b8:	bl	dac0 <random(unsigned long)>
    41bc:	ldr	r3, [r5, #16]
    41be:	subs	r3, #1
    41c0:	add	r0, r3
    41c2:	str	r0, [r4, #120]	; 0x78
    41c4:	b.n	4168 <regular_animation()+0x5f0>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    41c6:	cmp	r6, #0
    41c8:	ble.w	3cb2 <regular_animation()+0x13a>
    41cc:	movs	r7, #0
    41ce:	b.n	41e4 <regular_animation()+0x66c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    41d0:	add.w	r3, r4, r3, lsl #3
    41d4:	ldr	r2, [r5, #0]
    41d6:	add.w	r3, r5, r3, lsl #2
    41da:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    41dc:	adds	r7, #1
    41de:	cmp	r7, r6
    41e0:	beq.w	3cb2 <regular_animation()+0x13a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41e4:	movs	r0, #8
    41e6:	bl	dac0 <random(unsigned long)>
    41ea:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41ee:	movs	r0, #8
    41f0:	bl	dac0 <random(unsigned long)>
    41f4:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    41f8:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    41fc:	cmp.w	sl, #0
    4200:	beq.n	41d0 <regular_animation()+0x658>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4202:	ldr	r3, [r5, #20]
    4204:	add.w	r8, r8, r8, lsl #1
    4208:	ldr	r2, [r5, #16]
    420a:	add.w	r4, r4, r8, lsl #3
    420e:	subs	r0, r3, r2
    4210:	add.w	r4, r5, r4, lsl #2
    4214:	adds	r0, #2
    4216:	bl	dac0 <random(unsigned long)>
    421a:	ldr	r3, [r5, #16]
    421c:	subs	r3, #1
    421e:	add	r0, r3
    4220:	str	r0, [r4, #28]
    4222:	b.n	41dc <regular_animation()+0x664>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4224:	movs	r0, #8
    4226:	mov	r7, r5
    4228:	bl	dac0 <random(unsigned long)>
    422c:	add.w	r3, r5, #96	; 0x60
    4230:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4232:	movs	r0, #8
    4234:	str	r3, [sp, #20]
    4236:	bl	dac0 <random(unsigned long)>
    423a:	vmov	s15, r6
    423e:	adds	r4, #8
    4240:	add.w	r3, r0, #8
    4244:	rsb	r9, r0, #16
    4248:	vcvt.f64.s32	d9, s15
    424c:	rsb	r8, r4, #0
    4250:	negs	r3, r3
    4252:	str	r3, [sp, #24]
    4254:	vmov	s15, r8
    4258:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    425a:	mov	r6, r7
    425c:	vcvt.f64.s32	d8, s15
    4260:	vmul.f64	d8, d8, d8
    4264:	b.n	4272 <regular_animation()+0x6fa>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4266:	ldr	r3, [r5, #0]
    4268:	str	r3, [r6, #28]
    426a:	adds	r4, #1
    426c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    426e:	cmp	r9, r4
    4270:	beq.n	42c2 <regular_animation()+0x74a>
      double xx = x-midPoint_y;
    4272:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4276:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    427a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    427e:	vfma.f64	d0, d7, d7
    4282:	vsqrt.f64	d7, d0
    4286:	vcmp.f64	d7, d7
    428a:	vmrs	APSR_nzcv, fpscr
    428e:	bne.w	4cf2 <regular_animation()+0x117a>
    4292:	vcmpe.f64	d7, d9
    4296:	vmrs	APSR_nzcv, fpscr
    429a:	bhi.n	426a <regular_animation()+0x6f2>
        if (rand){
    429c:	cmp.w	sl, #0
    42a0:	beq.n	4266 <regular_animation()+0x6ee>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42a2:	ldr	r3, [r5, #20]
    42a4:	adds	r4, #1
    42a6:	ldr	r0, [r5, #16]
    42a8:	adds	r6, #96	; 0x60
    42aa:	subs	r0, r3, r0
    42ac:	adds	r0, #2
    42ae:	bl	dac0 <random(unsigned long)>
    42b2:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    42b4:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42b6:	add.w	r3, r3, #4294967295
    42ba:	add	r0, r3
    42bc:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    42c0:	bne.n	4272 <regular_animation()+0x6fa>
    42c2:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    42c4:	ldr	r3, [sp, #20]
    42c6:	add.w	r8, r8, #1
    42ca:	cmp	r3, r7
    42cc:	bne.n	4254 <regular_animation()+0x6dc>
    42ce:	b.n	3cb2 <regular_animation()+0x13a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42d0:	movs	r0, #8
    42d2:	bl	dac0 <random(unsigned long)>
    42d6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42da:	movs	r0, #8
    42dc:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    42e0:	cmp	r6, #0
    42e2:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42e4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    42e8:	it	lt
    42ea:	addlt	r3, r6, #1
    42ec:	cmp	r6, #0
    42ee:	mov.w	r3, r3, asr #1
    42f2:	it	lt
    42f4:	addlt	r6, #1
    42f6:	negs	r3, r3
    42f8:	asrs	r6, r6, #1
    42fa:	adds	r7, r0, r3
    42fc:	adds	r2, r0, r6
    42fe:	cmp	r7, r2
    4300:	str	r2, [sp, #24]
    4302:	bge.w	3cb2 <regular_animation()+0x13a>
    4306:	adds	r3, r4, r3
    4308:	add	r4, r6
    430a:	add.w	r6, r3, r3, lsl #1
    430e:	str	r3, [sp, #20]
    4310:	add.w	r6, r7, r6, lsl #3
    4314:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4318:	ldr	r3, [sp, #20]
    431a:	cmp	r3, r4
    431c:	bge.n	433e <regular_animation()+0x7c6>
    431e:	mov	r9, r6
    4320:	ldr.w	r8, [sp, #20]
        if (rand){
    4324:	cmp.w	sl, #0
    4328:	bne.w	4c8c <regular_animation()+0x1114>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    432c:	ldr	r3, [r5, #0]
    432e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4332:	add.w	r8, r8, #1
    4336:	add.w	r9, r9, #96	; 0x60
    433a:	cmp	r8, r4
    433c:	bne.n	4324 <regular_animation()+0x7ac>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    433e:	adds	r7, #1
    4340:	ldr	r3, [sp, #24]
    4342:	adds	r6, #4
    4344:	cmp	r7, r3
    4346:	bne.n	4318 <regular_animation()+0x7a0>
    4348:	b.n	3cb2 <regular_animation()+0x13a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    434a:	movs	r0, #8
    434c:	bl	dac0 <random(unsigned long)>
    4350:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4354:	movs	r0, #8
    4356:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    435a:	cmp	r6, #0
    435c:	ble.w	3cb2 <regular_animation()+0x13a>
    4360:	add.w	r4, r4, r4, lsl #1
    4364:	add.w	r3, r0, #15
    4368:	movs	r7, #0
    436a:	add.w	r4, r3, r4, lsl #3
    436e:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4372:	cmp.w	sl, #0
    4376:	bne.n	438c <regular_animation()+0x814>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4378:	ldr	r3, [r5, #0]
    437a:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    437c:	adds	r7, #1
    437e:	adds	r4, #4
    4380:	cmp	r7, r6
    4382:	beq.w	3cb2 <regular_animation()+0x13a>
      if (rand){
    4386:	cmp.w	sl, #0
    438a:	beq.n	4378 <regular_animation()+0x800>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    438c:	ldr	r3, [r5, #20]
    438e:	ldr	r2, [r5, #16]
    4390:	subs	r0, r3, r2
    4392:	adds	r0, #2
    4394:	bl	dac0 <random(unsigned long)>
    4398:	ldr	r3, [r5, #16]
    439a:	subs	r3, #1
    439c:	add	r0, r3
    439e:	str	r0, [r4, #0]
    43a0:	b.n	437c <regular_animation()+0x804>
    43a2:	nop
    43a4:	.word	0x16c16c17
    43a8:	.word	0x20005074
    43ac:	.word	0x20005268
    43b0:	add.w	r6, r5, #28
    43b4:	mov	r4, r5
    43b6:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    43ba:	cmp.w	sl, #0
    43be:	bne.n	43dc <regular_animation()+0x864>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    43c0:	ldr	r3, [r5, #0]
    43c2:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    43c4:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    43c8:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    43ca:	str	r3, [r4, #120]	; 0x78
    43cc:	adds	r4, #96	; 0x60
    43ce:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    43d0:	cmp	r4, r7
    43d2:	beq.w	3c42 <regular_animation()+0xca>
    if (rand){
    43d6:	cmp.w	sl, #0
    43da:	beq.n	43c0 <regular_animation()+0x848>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43dc:	ldr	r3, [r5, #20]
    43de:	ldr	r2, [r5, #16]
    43e0:	subs	r0, r3, r2
    43e2:	adds	r0, #2
    43e4:	bl	dac0 <random(unsigned long)>
    43e8:	ldr	r1, [r5, #16]
    43ea:	subs	r2, r1, #1
    43ec:	add	r0, r2
    43ee:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43f0:	ldr	r3, [r5, #20]
    43f2:	subs	r0, r3, r1
    43f4:	adds	r0, #2
    43f6:	bl	dac0 <random(unsigned long)>
    43fa:	ldr	r1, [r5, #16]
    43fc:	subs	r2, r1, #1
    43fe:	add	r0, r2
    4400:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4404:	ldr	r3, [r5, #20]
    4406:	subs	r0, r3, r1
    4408:	adds	r0, #2
    440a:	bl	dac0 <random(unsigned long)>
    440e:	ldr	r1, [r5, #16]
    4410:	subs	r2, r1, #1
    4412:	add	r0, r2
    4414:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4416:	ldr	r3, [r5, #20]
    4418:	subs	r0, r3, r1
    441a:	adds	r0, #2
    441c:	bl	dac0 <random(unsigned long)>
    4420:	ldr	r3, [r5, #16]
    4422:	subs	r3, #1
    4424:	add	r0, r3
    4426:	str	r0, [r4, #120]	; 0x78
    4428:	b.n	43cc <regular_animation()+0x854>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    442a:	cmp	r4, #0
    442c:	ble.w	3c42 <regular_animation()+0xca>
    4430:	movs	r7, #0
    4432:	b.n	4448 <regular_animation()+0x8d0>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4434:	add.w	r3, r6, r3, lsl #3
    4438:	ldr	r2, [r5, #0]
    443a:	add.w	r3, r5, r3, lsl #2
    443e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4440:	adds	r7, #1
    4442:	cmp	r7, r4
    4444:	beq.w	3c42 <regular_animation()+0xca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4448:	movs	r0, #8
    444a:	bl	dac0 <random(unsigned long)>
    444e:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4452:	movs	r0, #8
    4454:	bl	dac0 <random(unsigned long)>
    4458:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    445c:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4460:	cmp.w	sl, #0
    4464:	beq.n	4434 <regular_animation()+0x8bc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4466:	ldr	r3, [r5, #20]
    4468:	add.w	r9, r9, r9, lsl #1
    446c:	ldr	r2, [r5, #16]
    446e:	add.w	r6, r6, r9, lsl #3
    4472:	subs	r0, r3, r2
    4474:	add.w	r6, r5, r6, lsl #2
    4478:	adds	r0, #2
    447a:	bl	dac0 <random(unsigned long)>
    447e:	ldr	r3, [r5, #16]
    4480:	subs	r3, #1
    4482:	add	r0, r3
    4484:	str	r0, [r6, #28]
    4486:	b.n	4440 <regular_animation()+0x8c8>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4488:	movs	r0, #8
    448a:	mov	r7, r5
    448c:	bl	dac0 <random(unsigned long)>
    4490:	mov	r6, r0
    4492:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4496:	movs	r0, #8
    4498:	adds	r6, #8
    449a:	str	r3, [sp, #20]
    449c:	bl	dac0 <random(unsigned long)>
    44a0:	vmov	s15, r4
    44a4:	add.w	r3, r0, #8
    44a8:	negs	r2, r6
    44aa:	rsb	r9, r0, #16
    44ae:	vcvt.f64.s32	d9, s15
    44b2:	negs	r3, r3
    44b4:	mov	r8, r2
    44b6:	str	r3, [sp, #28]
    44b8:	vmov	s15, r8
    44bc:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    44be:	mov	r6, r7
    44c0:	vcvt.f64.s32	d8, s15
    44c4:	vmul.f64	d8, d8, d8
    44c8:	b.n	44d6 <regular_animation()+0x95e>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    44ca:	ldr	r3, [r5, #0]
    44cc:	str	r3, [r6, #28]
    44ce:	adds	r4, #1
    44d0:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    44d2:	cmp	r4, r9
    44d4:	beq.n	4526 <regular_animation()+0x9ae>
      double xx = x-midPoint_y;
    44d6:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    44da:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    44de:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    44e2:	vfma.f64	d0, d7, d7
    44e6:	vsqrt.f64	d7, d0
    44ea:	vcmp.f64	d7, d7
    44ee:	vmrs	APSR_nzcv, fpscr
    44f2:	bne.w	4cd4 <regular_animation()+0x115c>
    44f6:	vcmpe.f64	d7, d9
    44fa:	vmrs	APSR_nzcv, fpscr
    44fe:	bhi.n	44ce <regular_animation()+0x956>
        if (rand){
    4500:	cmp.w	sl, #0
    4504:	beq.n	44ca <regular_animation()+0x952>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4506:	ldr	r3, [r5, #20]
    4508:	adds	r4, #1
    450a:	ldr	r0, [r5, #16]
    450c:	adds	r6, #96	; 0x60
    450e:	subs	r0, r3, r0
    4510:	adds	r0, #2
    4512:	bl	dac0 <random(unsigned long)>
    4516:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4518:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    451a:	add.w	r3, r3, #4294967295
    451e:	add	r0, r3
    4520:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4524:	bne.n	44d6 <regular_animation()+0x95e>
    4526:	mov	r3, r8
    4528:	adds	r7, #4
    452a:	adds	r3, #1
    452c:	mov	r8, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    452e:	ldr	r3, [sp, #20]
    4530:	cmp	r7, r3
    4532:	bne.n	44b8 <regular_animation()+0x940>
    4534:	b.w	3c42 <regular_animation()+0xca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4538:	movs	r0, #8
    453a:	bl	dac0 <random(unsigned long)>
    453e:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4542:	movs	r0, #8
    4544:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4548:	cmp	r4, #0
    454a:	ble.w	3c42 <regular_animation()+0xca>
    454e:	add.w	r3, r0, #15
    4552:	add.w	r6, r6, r6, lsl #1
    4556:	movs	r7, #0
    4558:	add.w	r6, r3, r6, lsl #3
    455c:	add.w	r6, r5, r6, lsl #2
      if (rand){
    4560:	cmp.w	sl, #0
    4564:	bne.n	457a <regular_animation()+0xa02>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4566:	ldr	r3, [r5, #0]
    4568:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    456a:	adds	r7, #1
    456c:	adds	r6, #4
    456e:	cmp	r7, r4
    4570:	beq.w	3c42 <regular_animation()+0xca>
      if (rand){
    4574:	cmp.w	sl, #0
    4578:	beq.n	4566 <regular_animation()+0x9ee>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    457a:	ldr	r3, [r5, #20]
    457c:	ldr	r2, [r5, #16]
    457e:	subs	r0, r3, r2
    4580:	adds	r0, #2
    4582:	bl	dac0 <random(unsigned long)>
    4586:	ldr	r3, [r5, #16]
    4588:	subs	r3, #1
    458a:	add	r0, r3
    458c:	str	r0, [r6, #0]
    458e:	b.n	456a <regular_animation()+0x9f2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4590:	movs	r0, #8
    4592:	bl	dac0 <random(unsigned long)>
    4596:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    459a:	movs	r0, #8
    459c:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    45a0:	cmp	r4, #0
    45a2:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    45a4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    45a8:	it	lt
    45aa:	addlt	r3, r4, #1
    45ac:	cmp	r4, #0
    45ae:	mov.w	r3, r3, asr #1
    45b2:	it	lt
    45b4:	addlt	r4, #1
    45b6:	negs	r3, r3
    45b8:	asrs	r4, r4, #1
    45ba:	adds	r6, r0, r3
    45bc:	adds	r2, r4, r0
    45be:	cmp	r2, r6
    45c0:	str	r2, [sp, #28]
    45c2:	ble.w	3c42 <regular_animation()+0xca>
    45c6:	adds	r3, r7, r3
    45c8:	add.w	r9, r4, r7
    45cc:	str	r3, [sp, #20]
    45ce:	add.w	r3, r3, r3, lsl #1
    45d2:	add.w	r3, r6, r3, lsl #3
    45d6:	add.w	r3, r5, r3, lsl #2
    45da:	mov	r8, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    45dc:	ldr	r3, [sp, #20]
    45de:	cmp	r3, r9
    45e0:	bge.n	45fa <regular_animation()+0xa82>
    45e2:	mov	r7, r8
    45e4:	ldr	r4, [sp, #20]
        if (rand){
    45e6:	cmp.w	sl, #0
    45ea:	bne.w	4ca6 <regular_animation()+0x112e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    45ee:	ldr	r3, [r5, #0]
    45f0:	str	r3, [r7, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    45f2:	adds	r4, #1
    45f4:	adds	r7, #96	; 0x60
    45f6:	cmp	r4, r9
    45f8:	bne.n	45e6 <regular_animation()+0xa6e>
    45fa:	mov	r3, r8

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    45fc:	adds	r6, #1
    45fe:	adds	r3, #4
    4600:	mov	r8, r3
    4602:	ldr	r3, [sp, #28]
    4604:	cmp	r3, r6
    4606:	bne.n	45dc <regular_animation()+0xa64>
    4608:	b.w	3c42 <regular_animation()+0xca>
    460c:	add.w	r6, r5, #28
    4610:	mov	r4, r5
    4612:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4616:	cmp.w	sl, #0
    461a:	bne.n	4638 <regular_animation()+0xac0>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    461c:	ldr	r3, [r5, #0]
    461e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4620:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4624:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4626:	str	r3, [r4, #120]	; 0x78
    4628:	adds	r4, #96	; 0x60
    462a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    462c:	cmp	r4, r7
    462e:	beq.w	3c64 <regular_animation()+0xec>
    if (rand){
    4632:	cmp.w	sl, #0
    4636:	beq.n	461c <regular_animation()+0xaa4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4638:	ldr	r3, [r5, #20]
    463a:	ldr	r2, [r5, #16]
    463c:	subs	r0, r3, r2
    463e:	adds	r0, #2
    4640:	bl	dac0 <random(unsigned long)>
    4644:	ldr	r1, [r5, #16]
    4646:	subs	r2, r1, #1
    4648:	add	r0, r2
    464a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    464c:	ldr	r3, [r5, #20]
    464e:	subs	r0, r3, r1
    4650:	adds	r0, #2
    4652:	bl	dac0 <random(unsigned long)>
    4656:	ldr	r1, [r5, #16]
    4658:	subs	r2, r1, #1
    465a:	add	r0, r2
    465c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4660:	ldr	r3, [r5, #20]
    4662:	subs	r0, r3, r1
    4664:	adds	r0, #2
    4666:	bl	dac0 <random(unsigned long)>
    466a:	ldr	r1, [r5, #16]
    466c:	subs	r2, r1, #1
    466e:	add	r0, r2
    4670:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4672:	ldr	r3, [r5, #20]
    4674:	subs	r0, r3, r1
    4676:	adds	r0, #2
    4678:	bl	dac0 <random(unsigned long)>
    467c:	ldr	r3, [r5, #16]
    467e:	subs	r3, #1
    4680:	add	r0, r3
    4682:	str	r0, [r4, #120]	; 0x78
    4684:	b.n	4628 <regular_animation()+0xab0>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4686:	cmp	r4, #0
    4688:	ble.w	3c64 <regular_animation()+0xec>
    468c:	movs	r7, #0
    468e:	b.n	46a4 <regular_animation()+0xb2c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4690:	add.w	r3, r6, r3, lsl #3
    4694:	ldr	r2, [r5, #0]
    4696:	add.w	r3, r5, r3, lsl #2
    469a:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    469c:	adds	r7, #1
    469e:	cmp	r7, r4
    46a0:	beq.w	3c64 <regular_animation()+0xec>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46a4:	movs	r0, #8
    46a6:	bl	dac0 <random(unsigned long)>
    46aa:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46ae:	movs	r0, #8
    46b0:	bl	dac0 <random(unsigned long)>
    46b4:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    46b8:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    46bc:	cmp.w	sl, #0
    46c0:	beq.n	4690 <regular_animation()+0xb18>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    46c2:	ldr	r3, [r5, #20]
    46c4:	add.w	r9, r9, r9, lsl #1
    46c8:	ldr	r2, [r5, #16]
    46ca:	add.w	r6, r6, r9, lsl #3
    46ce:	subs	r0, r3, r2
    46d0:	add.w	r6, r5, r6, lsl #2
    46d4:	adds	r0, #2
    46d6:	bl	dac0 <random(unsigned long)>
    46da:	ldr	r3, [r5, #16]
    46dc:	subs	r3, #1
    46de:	add	r0, r3
    46e0:	str	r0, [r6, #28]
    46e2:	b.n	469c <regular_animation()+0xb24>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46e4:	movs	r0, #8
    46e6:	mov	r7, r5
    46e8:	bl	dac0 <random(unsigned long)>
    46ec:	mov	r6, r0
    46ee:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    46f2:	movs	r0, #8
    46f4:	adds	r6, #8
    46f6:	str	r3, [sp, #20]
    46f8:	bl	dac0 <random(unsigned long)>
    46fc:	vmov	s15, r4
    4700:	add.w	r3, r0, #8
    4704:	negs	r2, r6
    4706:	rsb	r9, r0, #16
    470a:	vcvt.f64.s32	d9, s15
    470e:	negs	r3, r3
    4710:	mov	r8, r2
    4712:	str	r3, [sp, #28]
    4714:	vmov	s15, r8
    4718:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    471a:	mov	r6, r7
    471c:	vcvt.f64.s32	d8, s15
    4720:	vmul.f64	d8, d8, d8
    4724:	b.n	4732 <regular_animation()+0xbba>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4726:	ldr	r3, [r5, #0]
    4728:	str	r3, [r6, #28]
    472a:	adds	r4, #1
    472c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    472e:	cmp	r4, r9
    4730:	beq.n	4782 <regular_animation()+0xc0a>
      double xx = x-midPoint_y;
    4732:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4736:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    473a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    473e:	vfma.f64	d0, d7, d7
    4742:	vsqrt.f64	d7, d0
    4746:	vcmp.f64	d7, d7
    474a:	vmrs	APSR_nzcv, fpscr
    474e:	bne.w	4ce8 <regular_animation()+0x1170>
    4752:	vcmpe.f64	d7, d9
    4756:	vmrs	APSR_nzcv, fpscr
    475a:	bhi.n	472a <regular_animation()+0xbb2>
        if (rand){
    475c:	cmp.w	sl, #0
    4760:	beq.n	4726 <regular_animation()+0xbae>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4762:	ldr	r3, [r5, #20]
    4764:	adds	r4, #1
    4766:	ldr	r0, [r5, #16]
    4768:	adds	r6, #96	; 0x60
    476a:	subs	r0, r3, r0
    476c:	adds	r0, #2
    476e:	bl	dac0 <random(unsigned long)>
    4772:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4774:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4776:	add.w	r3, r3, #4294967295
    477a:	add	r0, r3
    477c:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4780:	bne.n	4732 <regular_animation()+0xbba>
    4782:	mov	r3, r8
    4784:	adds	r7, #4
    4786:	adds	r3, #1
    4788:	mov	r8, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    478a:	ldr	r3, [sp, #20]
    478c:	cmp	r7, r3
    478e:	bne.n	4714 <regular_animation()+0xb9c>
    4790:	b.w	3c64 <regular_animation()+0xec>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4794:	movs	r0, #8
    4796:	bl	dac0 <random(unsigned long)>
    479a:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    479e:	movs	r0, #8
    47a0:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    47a4:	cmp	r4, #0
    47a6:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    47a8:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    47ac:	it	lt
    47ae:	addlt	r3, r4, #1
    47b0:	cmp	r4, #0
    47b2:	mov.w	r3, r3, asr #1
    47b6:	it	lt
    47b8:	addlt	r4, #1
    47ba:	negs	r3, r3
    47bc:	asrs	r4, r4, #1
    47be:	adds	r6, r0, r3
    47c0:	adds	r2, r0, r4
    47c2:	cmp	r6, r2
    47c4:	str	r2, [sp, #28]
    47c6:	bge.w	3c64 <regular_animation()+0xec>
    47ca:	adds	r3, r7, r3
    47cc:	add	r4, r7
    47ce:	str	r3, [sp, #20]
    47d0:	add.w	r3, r3, r3, lsl #1
    47d4:	add.w	r3, r6, r3, lsl #3
    47d8:	add.w	r3, r5, r3, lsl #2
    47dc:	mov	r8, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    47de:	ldr	r3, [sp, #20]
    47e0:	cmp	r3, r4
    47e2:	bge.n	4800 <regular_animation()+0xc88>
    47e4:	mov	r9, r8
    47e6:	ldr	r7, [sp, #20]
        if (rand){
    47e8:	cmp.w	sl, #0
    47ec:	bne.w	4c74 <regular_animation()+0x10fc>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    47f0:	ldr	r3, [r5, #0]
    47f2:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    47f6:	adds	r7, #1
    47f8:	add.w	r9, r9, #96	; 0x60
    47fc:	cmp	r7, r4
    47fe:	bne.n	47e8 <regular_animation()+0xc70>
    4800:	mov	r3, r8

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4802:	adds	r6, #1
    4804:	adds	r3, #4
    4806:	mov	r8, r3
    4808:	ldr	r3, [sp, #28]
    480a:	cmp	r6, r3
    480c:	bne.n	47de <regular_animation()+0xc66>
    480e:	b.w	3c64 <regular_animation()+0xec>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4812:	movs	r0, #8
    4814:	bl	dac0 <random(unsigned long)>
    4818:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    481c:	movs	r0, #8
    481e:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4822:	cmp	r4, #0
    4824:	ble.w	3c64 <regular_animation()+0xec>
    4828:	add.w	r3, r0, #15
    482c:	add.w	r6, r6, r6, lsl #1
    4830:	movs	r7, #0
    4832:	add.w	r6, r3, r6, lsl #3
    4836:	add.w	r6, r5, r6, lsl #2
      if (rand){
    483a:	cmp.w	sl, #0
    483e:	bne.n	4854 <regular_animation()+0xcdc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4840:	ldr	r3, [r5, #0]
    4842:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4844:	adds	r7, #1
    4846:	adds	r6, #4
    4848:	cmp	r7, r4
    484a:	beq.w	3c64 <regular_animation()+0xec>
      if (rand){
    484e:	cmp.w	sl, #0
    4852:	beq.n	4840 <regular_animation()+0xcc8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4854:	ldr	r3, [r5, #20]
    4856:	ldr	r2, [r5, #16]
    4858:	subs	r0, r3, r2
    485a:	adds	r0, #2
    485c:	bl	dac0 <random(unsigned long)>
    4860:	ldr	r3, [r5, #16]
    4862:	subs	r3, #1
    4864:	add	r0, r3
    4866:	str	r0, [r6, #0]
    4868:	b.n	4844 <regular_animation()+0xccc>
    486a:	add.w	r6, r5, #28
    486e:	mov	r4, r5
    4870:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4874:	cmp.w	sl, #0
    4878:	bne.n	4896 <regular_animation()+0xd1e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    487a:	ldr	r3, [r5, #0]
    487c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    487e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4882:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4884:	str	r3, [r4, #120]	; 0x78
    4886:	adds	r4, #96	; 0x60
    4888:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    488a:	cmp	r4, r7
    488c:	beq.w	3c92 <regular_animation()+0x11a>
    if (rand){
    4890:	cmp.w	sl, #0
    4894:	beq.n	487a <regular_animation()+0xd02>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4896:	ldr	r3, [r5, #20]
    4898:	ldr	r2, [r5, #16]
    489a:	subs	r0, r3, r2
    489c:	adds	r0, #2
    489e:	bl	dac0 <random(unsigned long)>
    48a2:	ldr	r1, [r5, #16]
    48a4:	subs	r2, r1, #1
    48a6:	add	r0, r2
    48a8:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    48aa:	ldr	r3, [r5, #20]
    48ac:	subs	r0, r3, r1
    48ae:	adds	r0, #2
    48b0:	bl	dac0 <random(unsigned long)>
    48b4:	ldr	r1, [r5, #16]
    48b6:	subs	r2, r1, #1
    48b8:	add	r0, r2
    48ba:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    48be:	ldr	r3, [r5, #20]
    48c0:	subs	r0, r3, r1
    48c2:	adds	r0, #2
    48c4:	bl	dac0 <random(unsigned long)>
    48c8:	ldr	r1, [r5, #16]
    48ca:	subs	r2, r1, #1
    48cc:	add	r0, r2
    48ce:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    48d0:	ldr	r3, [r5, #20]
    48d2:	subs	r0, r3, r1
    48d4:	adds	r0, #2
    48d6:	bl	dac0 <random(unsigned long)>
    48da:	ldr	r3, [r5, #16]
    48dc:	subs	r3, #1
    48de:	add	r0, r3
    48e0:	str	r0, [r4, #120]	; 0x78
    48e2:	b.n	4886 <regular_animation()+0xd0e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    48e4:	cmp	r6, #0
    48e6:	ble.w	3c92 <regular_animation()+0x11a>
    48ea:	movs	r7, #0
    48ec:	b.n	4902 <regular_animation()+0xd8a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    48ee:	add.w	r3, r4, r3, lsl #3
    48f2:	ldr	r2, [r5, #0]
    48f4:	add.w	r3, r5, r3, lsl #2
    48f8:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    48fa:	adds	r7, #1
    48fc:	cmp	r7, r6
    48fe:	beq.w	3c92 <regular_animation()+0x11a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4902:	movs	r0, #8
    4904:	bl	dac0 <random(unsigned long)>
    4908:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    490c:	movs	r0, #8
    490e:	bl	dac0 <random(unsigned long)>
    4912:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4916:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    491a:	cmp.w	sl, #0
    491e:	beq.n	48ee <regular_animation()+0xd76>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4920:	ldr	r3, [r5, #20]
    4922:	add.w	r8, r8, r8, lsl #1
    4926:	ldr	r2, [r5, #16]
    4928:	add.w	r4, r4, r8, lsl #3
    492c:	subs	r0, r3, r2
    492e:	add.w	r4, r5, r4, lsl #2
    4932:	adds	r0, #2
    4934:	bl	dac0 <random(unsigned long)>
    4938:	ldr	r3, [r5, #16]
    493a:	subs	r3, #1
    493c:	add	r0, r3
    493e:	str	r0, [r4, #28]
    4940:	b.n	48fa <regular_animation()+0xd82>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4942:	movs	r0, #8
    4944:	mov	r7, r5
    4946:	bl	dac0 <random(unsigned long)>
    494a:	add.w	r3, r5, #96	; 0x60
    494e:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4950:	movs	r0, #8
    4952:	str	r3, [sp, #20]
    4954:	bl	dac0 <random(unsigned long)>
    4958:	vmov	s15, r6
    495c:	adds	r4, #8
    495e:	add.w	r3, r0, #8
    4962:	rsb	r9, r0, #16
    4966:	vcvt.f64.s32	d9, s15
    496a:	rsb	r8, r4, #0
    496e:	negs	r3, r3
    4970:	str	r3, [sp, #24]
    4972:	vmov	s15, r8
    4976:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    4978:	mov	r6, r7
    497a:	vcvt.f64.s32	d8, s15
    497e:	vmul.f64	d8, d8, d8
    4982:	b.n	4990 <regular_animation()+0xe18>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4984:	ldr	r3, [r5, #0]
    4986:	str	r3, [r6, #28]
    4988:	adds	r4, #1
    498a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    498c:	cmp	r9, r4
    498e:	beq.n	49e0 <regular_animation()+0xe68>
      double xx = x-midPoint_y;
    4990:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4994:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    4998:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    499c:	vfma.f64	d0, d7, d7
    49a0:	vsqrt.f64	d7, d0
    49a4:	vcmp.f64	d7, d7
    49a8:	vmrs	APSR_nzcv, fpscr
    49ac:	bne.w	4cde <regular_animation()+0x1166>
    49b0:	vcmpe.f64	d7, d9
    49b4:	vmrs	APSR_nzcv, fpscr
    49b8:	bhi.n	4988 <regular_animation()+0xe10>
        if (rand){
    49ba:	cmp.w	sl, #0
    49be:	beq.n	4984 <regular_animation()+0xe0c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    49c0:	ldr	r3, [r5, #20]
    49c2:	adds	r4, #1
    49c4:	ldr	r0, [r5, #16]
    49c6:	adds	r6, #96	; 0x60
    49c8:	subs	r0, r3, r0
    49ca:	adds	r0, #2
    49cc:	bl	dac0 <random(unsigned long)>
    49d0:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    49d2:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    49d4:	add.w	r3, r3, #4294967295
    49d8:	add	r0, r3
    49da:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    49de:	bne.n	4990 <regular_animation()+0xe18>
    49e0:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    49e2:	ldr	r3, [sp, #20]
    49e4:	add.w	r8, r8, #1
    49e8:	cmp	r7, r3
    49ea:	bne.n	4972 <regular_animation()+0xdfa>
    49ec:	b.w	3c92 <regular_animation()+0x11a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49f0:	movs	r0, #8
    49f2:	bl	dac0 <random(unsigned long)>
    49f6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49fa:	movs	r0, #8
    49fc:	bl	dac0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4a00:	cmp	r6, #0
    4a02:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4a04:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4a08:	it	lt
    4a0a:	addlt	r3, r6, #1
    4a0c:	cmp	r6, #0
    4a0e:	mov.w	r3, r3, asr #1
    4a12:	it	lt
    4a14:	addlt	r6, #1
    4a16:	negs	r3, r3
    4a18:	asrs	r6, r6, #1
    4a1a:	adds	r7, r0, r3
    4a1c:	adds	r2, r0, r6
    4a1e:	cmp	r7, r2
    4a20:	str	r2, [sp, #24]
    4a22:	bge.w	3c92 <regular_animation()+0x11a>
    4a26:	adds	r3, r4, r3
    4a28:	add	r4, r6
    4a2a:	add.w	r6, r3, r3, lsl #1
    4a2e:	str	r3, [sp, #20]
    4a30:	add.w	r6, r7, r6, lsl #3
    4a34:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4a38:	ldr	r3, [sp, #20]
    4a3a:	cmp	r3, r4
    4a3c:	bge.n	4a5e <regular_animation()+0xee6>
    4a3e:	mov	r9, r6
    4a40:	ldr.w	r8, [sp, #20]
        if (rand){
    4a44:	cmp.w	sl, #0
    4a48:	bne.w	4cbc <regular_animation()+0x1144>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4a4c:	ldr	r3, [r5, #0]
    4a4e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4a52:	add.w	r8, r8, #1
    4a56:	add.w	r9, r9, #96	; 0x60
    4a5a:	cmp	r8, r4
    4a5c:	bne.n	4a44 <regular_animation()+0xecc>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4a5e:	adds	r7, #1
    4a60:	ldr	r3, [sp, #24]
    4a62:	adds	r6, #4
    4a64:	cmp	r7, r3
    4a66:	bne.n	4a38 <regular_animation()+0xec0>
    4a68:	b.w	3c92 <regular_animation()+0x11a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4a6c:	movs	r0, #8
    4a6e:	bl	dac0 <random(unsigned long)>
    4a72:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4a76:	movs	r0, #8
    4a78:	bl	dac0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    4a7c:	cmp	r6, #0
    4a7e:	ble.w	3c92 <regular_animation()+0x11a>
    4a82:	add.w	r3, r0, #15
    4a86:	add.w	r4, r4, r4, lsl #1
    4a8a:	movs	r7, #0
    4a8c:	add.w	r4, r3, r4, lsl #3
    4a90:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4a94:	cmp.w	sl, #0
    4a98:	bne.n	4aae <regular_animation()+0xf36>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    4a9a:	ldr	r3, [r5, #0]
    4a9c:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4a9e:	adds	r7, #1
    4aa0:	adds	r4, #4
    4aa2:	cmp	r7, r6
    4aa4:	beq.w	3c92 <regular_animation()+0x11a>
      if (rand){
    4aa8:	cmp.w	sl, #0
    4aac:	beq.n	4a9a <regular_animation()+0xf22>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4aae:	ldr	r3, [r5, #20]
    4ab0:	ldr	r2, [r5, #16]
    4ab2:	subs	r0, r3, r2
    4ab4:	adds	r0, #2
    4ab6:	bl	dac0 <random(unsigned long)>
    4aba:	ldr	r3, [r5, #16]
    4abc:	subs	r3, #1
    4abe:	add	r0, r3
    4ac0:	str	r0, [r4, #0]
    4ac2:	b.n	4a9e <regular_animation()+0xf26>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4ac4:	movw	sl, #4636	; 0x121c
    4ac8:	add.w	r3, r5, #28
    4acc:	movs	r7, #0
    4ace:	add.w	r9, r5, #4640	; 0x1220
    4ad2:	add	sl, r5
    4ad4:	str	r3, [sp, #28]
    4ad6:	lsls	r3, r7, #3
    4ad8:	ldr	r6, [sp, #28]
    4ada:	movs	r4, #0
    4adc:	str	r3, [sp, #20]
    4ade:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4ae2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4ae4:	add	r3, r4
    4ae6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4ae8:	cbnz	r2, 4aee <regular_animation()+0xf76>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4aea:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4aee:	cbnz	r3, 4b0a <regular_animation()+0xf92>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4af0:	adds	r4, #1
    4af2:	adds	r6, #4
    4af4:	cmp	r4, #24
    4af6:	bne.n	4ade <regular_animation()+0xf66>
    4af8:	ldr	r3, [sp, #28]
    4afa:	adds	r7, #24
    4afc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4afe:	cmp.w	r7, #576	; 0x240
    4b02:	str	r3, [sp, #28]
    4b04:	bne.n	4ad6 <regular_animation()+0xf5e>
    4b06:	b.w	3c64 <regular_animation()+0xec>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b0a:	ldr	r2, [r5, #20]
    4b0c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b0e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b12:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b14:	ldr	r2, [sp, #20]
    4b16:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b18:	adds	r0, #2
    4b1a:	ldr.w	r8, [r3, r4, lsl #3]
    4b1e:	bl	dac0 <random(unsigned long)>
    4b22:	ldr	r3, [r5, #16]
    4b24:	rsb	r3, r3, r8
    4b28:	adds	r3, #1
    4b2a:	subs	r0, r3, r0
    4b2c:	str	r0, [r6, #0]
    4b2e:	b.n	4af0 <regular_animation()+0xf78>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b30:	movw	r9, #4636	; 0x121c
    4b34:	add.w	r3, r5, #28
    4b38:	movs	r7, #0
    4b3a:	add.w	r8, r5, #4640	; 0x1220
    4b3e:	add	r9, r5
    4b40:	str	r3, [sp, #24]
    4b42:	lsls	r3, r7, #3
    4b44:	ldr	r6, [sp, #24]
    4b46:	movs	r4, #0
    4b48:	str	r3, [sp, #20]
    4b4a:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4b4e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4b50:	add	r3, r4
    4b52:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4b54:	cbnz	r2, 4b5a <regular_animation()+0xfe2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4b56:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4b5a:	cbnz	r3, 4b76 <regular_animation()+0xffe>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4b5c:	adds	r4, #1
    4b5e:	adds	r6, #4
    4b60:	cmp	r4, #24
    4b62:	bne.n	4b4a <regular_animation()+0xfd2>
    4b64:	ldr	r3, [sp, #24]
    4b66:	adds	r7, #24
    4b68:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4b6a:	cmp.w	r7, #576	; 0x240
    4b6e:	str	r3, [sp, #24]
    4b70:	bne.n	4b42 <regular_animation()+0xfca>
    4b72:	b.w	3c92 <regular_animation()+0x11a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b76:	ldr	r2, [r5, #20]
    4b78:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b7a:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b7e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b80:	ldr	r2, [sp, #20]
    4b82:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b84:	adds	r0, #2
    4b86:	ldr.w	sl, [r3, r4, lsl #3]
    4b8a:	bl	dac0 <random(unsigned long)>
    4b8e:	ldr	r3, [r5, #16]
    4b90:	rsb	r3, r3, sl
    4b94:	adds	r3, #1
    4b96:	subs	r0, r3, r0
    4b98:	str	r0, [r6, #0]
    4b9a:	b.n	4b5c <regular_animation()+0xfe4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b9c:	movw	sl, #4636	; 0x121c
    4ba0:	add.w	r3, r5, #28
    4ba4:	movs	r7, #0
    4ba6:	add.w	r9, r5, #4640	; 0x1220
    4baa:	add	sl, r5
    4bac:	str	r3, [sp, #28]
    4bae:	lsls	r3, r7, #3
    4bb0:	ldr	r6, [sp, #28]
    4bb2:	movs	r4, #0
    4bb4:	str	r3, [sp, #20]
    4bb6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4bba:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4bbc:	add	r3, r4
    4bbe:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4bc0:	cbnz	r2, 4bc6 <regular_animation()+0x104e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4bc2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4bc6:	cbnz	r3, 4be2 <regular_animation()+0x106a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4bc8:	adds	r4, #1
    4bca:	adds	r6, #4
    4bcc:	cmp	r4, #24
    4bce:	bne.n	4bb6 <regular_animation()+0x103e>
    4bd0:	ldr	r3, [sp, #28]
    4bd2:	adds	r7, #24
    4bd4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4bd6:	cmp.w	r7, #576	; 0x240
    4bda:	str	r3, [sp, #28]
    4bdc:	bne.n	4bae <regular_animation()+0x1036>
    4bde:	b.w	3c42 <regular_animation()+0xca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4be2:	ldr	r2, [r5, #20]
    4be4:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4be6:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4bea:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4bec:	ldr	r2, [sp, #20]
    4bee:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4bf0:	adds	r0, #2
    4bf2:	ldr.w	r8, [r3, r4, lsl #3]
    4bf6:	bl	dac0 <random(unsigned long)>
    4bfa:	ldr	r3, [r5, #16]
    4bfc:	rsb	r3, r3, r8
    4c00:	adds	r3, #1
    4c02:	subs	r0, r3, r0
    4c04:	str	r0, [r6, #0]
    4c06:	b.n	4bc8 <regular_animation()+0x1050>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c08:	movw	r9, #4636	; 0x121c
    4c0c:	add.w	r3, r5, #28
    4c10:	movs	r7, #0
    4c12:	add.w	r8, r5, #4640	; 0x1220
    4c16:	add	r9, r5
    4c18:	str	r3, [sp, #24]
    4c1a:	lsls	r3, r7, #3
    4c1c:	ldr	r6, [sp, #24]
    4c1e:	movs	r4, #0
    4c20:	str	r3, [sp, #20]
    4c22:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c26:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4c28:	add	r3, r4
    4c2a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c2c:	cbnz	r2, 4c32 <regular_animation()+0x10ba>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4c2e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4c32:	cbnz	r3, 4c4e <regular_animation()+0x10d6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4c34:	adds	r4, #1
    4c36:	adds	r6, #4
    4c38:	cmp	r4, #24
    4c3a:	bne.n	4c22 <regular_animation()+0x10aa>
    4c3c:	ldr	r3, [sp, #24]
    4c3e:	adds	r7, #24
    4c40:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4c42:	cmp.w	r7, #576	; 0x240
    4c46:	str	r3, [sp, #24]
    4c48:	bne.n	4c1a <regular_animation()+0x10a2>
    4c4a:	b.w	3cb2 <regular_animation()+0x13a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c4e:	ldr	r2, [r5, #20]
    4c50:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c52:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c56:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c58:	ldr	r2, [sp, #20]
    4c5a:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c5c:	adds	r0, #2
    4c5e:	ldr.w	sl, [r3, r4, lsl #3]
    4c62:	bl	dac0 <random(unsigned long)>
    4c66:	ldr	r3, [r5, #16]
    4c68:	rsb	r3, r3, sl
    4c6c:	adds	r3, #1
    4c6e:	subs	r0, r3, r0
    4c70:	str	r0, [r6, #0]
    4c72:	b.n	4c34 <regular_animation()+0x10bc>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4c74:	ldr	r3, [r5, #20]
    4c76:	ldr	r0, [r5, #16]
    4c78:	subs	r0, r3, r0
    4c7a:	adds	r0, #2
    4c7c:	bl	dac0 <random(unsigned long)>
    4c80:	ldr	r3, [r5, #16]
    4c82:	subs	r3, #1
    4c84:	add	r0, r3
    4c86:	str.w	r0, [r9, #28]
    4c8a:	b.n	47f6 <regular_animation()+0xc7e>
    4c8c:	ldr	r3, [r5, #20]
    4c8e:	ldr	r0, [r5, #16]
    4c90:	subs	r0, r3, r0
    4c92:	adds	r0, #2
    4c94:	bl	dac0 <random(unsigned long)>
    4c98:	ldr	r3, [r5, #16]
    4c9a:	subs	r3, #1
    4c9c:	add	r0, r3
    4c9e:	str.w	r0, [r9, #28]
    4ca2:	b.w	4332 <regular_animation()+0x7ba>
    4ca6:	ldr	r3, [r5, #20]
    4ca8:	ldr	r0, [r5, #16]
    4caa:	subs	r0, r3, r0
    4cac:	adds	r0, #2
    4cae:	bl	dac0 <random(unsigned long)>
    4cb2:	ldr	r3, [r5, #16]
    4cb4:	subs	r3, #1
    4cb6:	add	r0, r3
    4cb8:	str	r0, [r7, #28]
    4cba:	b.n	45f2 <regular_animation()+0xa7a>
    4cbc:	ldr	r3, [r5, #20]
    4cbe:	ldr	r0, [r5, #16]
    4cc0:	subs	r0, r3, r0
    4cc2:	adds	r0, #2
    4cc4:	bl	dac0 <random(unsigned long)>
    4cc8:	ldr	r3, [r5, #16]
    4cca:	subs	r3, #1
    4ccc:	add	r0, r3
    4cce:	str.w	r0, [r9, #28]
    4cd2:	b.n	4a52 <regular_animation()+0xeda>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    4cd4:	bl	e250 <sqrt>
    4cd8:	vmov.f64	d7, d0
    4cdc:	b.n	44f6 <regular_animation()+0x97e>
    4cde:	bl	e250 <sqrt>
    4ce2:	vmov.f64	d7, d0
    4ce6:	b.n	49b0 <regular_animation()+0xe38>
    4ce8:	bl	e250 <sqrt>
    4cec:	vmov.f64	d7, d0
    4cf0:	b.n	4752 <regular_animation()+0xbda>
    4cf2:	bl	e250 <sqrt>
    4cf6:	vmov.f64	d7, d0
    4cfa:	b.w	4292 <regular_animation()+0x71a>
    4cfe:	nop

00004d00 <ceremony_animation()>:
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4d00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  	if (!didPulse && !didIntro) {
    4d04:	ldr	r5, [pc, #664]	; (4fa0 <ceremony_animation()+0x2a0>)
    4d06:	ldrb	r3, [r5, #0]
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4d08:	vpush	{d8}
    4d0c:	sub	sp, #36	; 0x24

  	if (!didPulse && !didIntro) {
    4d0e:	cbnz	r3, 4d1a <ceremony_animation()+0x1a>
    4d10:	ldr	r3, [pc, #656]	; (4fa4 <ceremony_animation()+0x2a4>)
    4d12:	ldrb	r4, [r3, #0]
    4d14:	cmp	r4, #0
    4d16:	beq.w	50b4 <ceremony_animation()+0x3b4>
    4d1a:	ldr	r3, [pc, #652]	; (4fa8 <ceremony_animation()+0x2a8>)
    4d1c:	ldr.w	lr, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4d20:	ldr	r2, [pc, #648]	; (4fac <ceremony_animation()+0x2ac>)
    4d22:	ldr	r0, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d24:	mov	r6, r2

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4d26:	ldr	r1, [r2, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d28:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4d2a:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d2c:	ldr	r4, [pc, #636]	; (4fac <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4d2e:	cmp	r3, r1
    4d30:	it	eq
    4d32:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d34:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4d36:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4d38:	ite	eq
    4d3a:	moveq	r7, #1
    4d3c:	movne	r7, #0
    4d3e:	cmp	r7, #0
    4d40:	beq.n	4d28 <ceremony_animation()+0x28>

    didPulse = true;
	}

  
	if (sinceCircle > 1500 && didPulse && !didIntro) {
    4d42:	lsrs	r1, r3, #5
    4d44:	movw	r2, #1500	; 0x5dc
    4d48:	orr.w	r1, r1, r0, lsl #27
    4d4c:	vmov	s15, r1
    4d50:	vldr	d5, [pc, #580]	; 4f98 <ceremony_animation()+0x298>
    4d54:	vcvt.f64.u32	d7, s15
    4d58:	vdiv.f64	d6, d7, d5
    4d5c:	vcvt.u32.f64	s12, d6
    4d60:	vmov	r3, s12
    4d64:	rsb	r3, lr, r3
    4d68:	cmp	r3, r2
    4d6a:	bls.n	4d74 <ceremony_animation()+0x74>
    4d6c:	ldrb	r3, [r5, #0]
    4d6e:	cmp	r3, #0
    4d70:	bne.w	4fcc <ceremony_animation()+0x2cc>
    4d74:	ldr	r5, [pc, #568]	; (4fb0 <ceremony_animation()+0x2b0>)
    sinceIntro = 0;
	}



  updateBeams();
    4d76:	bl	5d0 <updateBeams()>
	updateCircles();
    4d7a:	bl	b88 <updateCircles()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4d7e:	ldr	r3, [pc, #556]	; (4fac <ceremony_animation()+0x2ac>)
    4d80:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d82:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4d84:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d86:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4d88:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d8a:	ldr	r7, [pc, #544]	; (4fac <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4d8c:	cmp	r3, r1
    4d8e:	it	eq
    4d90:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d92:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4d94:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4d96:	ite	eq
    4d98:	moveq	r6, #1
    4d9a:	movne	r6, #0
    4d9c:	cmp	r6, #0
    4d9e:	beq.n	4d86 <ceremony_animation()+0x86>

  if (sinceIntro > 3500 && didIntro){
    4da0:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    4da2:	ldr.w	lr, [r5]
    4da6:	movw	r2, #3500	; 0xdac
    4daa:	orr.w	r1, r1, r0, lsl #27
    4dae:	vmov	s15, r1
    4db2:	vldr	d5, [pc, #484]	; 4f98 <ceremony_animation()+0x298>
    4db6:	vcvt.f64.u32	d7, s15
    4dba:	vdiv.f64	d6, d7, d5
    4dbe:	vcvt.u32.f64	s15, d6
    4dc2:	vmov	r3, s15
    4dc6:	rsb	r3, lr, r3
    4dca:	cmp	r3, r2
    4dcc:	bls.n	4dd4 <ceremony_animation()+0xd4>
    4dce:	ldr	r3, [pc, #468]	; (4fa4 <ceremony_animation()+0x2a4>)
    4dd0:	ldrb	r3, [r3, #0]
    4dd2:	cbnz	r3, 4e38 <ceremony_animation()+0x138>
    4dd4:	mov	r6, lr
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4dd6:	ldr	r3, [pc, #468]	; (4fac <ceremony_animation()+0x2ac>)
    4dd8:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4dda:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4ddc:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4dde:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4de0:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4de2:	cmp	r3, r1
    4de4:	it	eq
    4de6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4de8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4dea:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4dec:	ite	eq
    4dee:	moveq	r5, #1
    4df0:	movne	r5, #0
    4df2:	cmp	r5, #0
    4df4:	beq.n	4dde <ceremony_animation()+0xde>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    }
  }

  if (sinceIntro > 8000 && didIntro){
    4df6:	lsrs	r1, r3, #5
    4df8:	orr.w	r1, r1, r2, lsl #27
    4dfc:	vmov	s15, r1
    4e00:	vldr	d5, [pc, #404]	; 4f98 <ceremony_animation()+0x298>
    4e04:	vcvt.f64.u32	d7, s15
    4e08:	vdiv.f64	d6, d7, d5
    4e0c:	vcvt.u32.f64	s12, d6
    4e10:	vmov	r3, s12
    4e14:	rsb	lr, r6, r3
    4e18:	cmp.w	lr, #8000	; 0x1f40
    4e1c:	bls.n	4e2e <ceremony_animation()+0x12e>
    4e1e:	ldr	r3, [pc, #388]	; (4fa4 <ceremony_animation()+0x2a4>)
    4e20:	ldrb	r3, [r3, #0]
    4e22:	cbz	r3, 4e2e <ceremony_animation()+0x12e>
    regular_setup();
    4e24:	bl	10f8 <regular_setup()>
    isRegularAnimation = true;
    4e28:	ldr	r3, [pc, #392]	; (4fb4 <ceremony_animation()+0x2b4>)
    4e2a:	movs	r2, #1
    4e2c:	strb	r2, [r3, #0]
  }
}
    4e2e:	add	sp, #36	; 0x24
    4e30:	vpop	{d8}
    4e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4e38:	movs	r4, #80	; 0x50
	HSB_color.b = b;
    4e3a:	movs	r0, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4e3c:	movs	r1, #195	; 0xc3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4e3e:	movs	r2, #0
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4e40:	strb.w	r4, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4e44:	movs	r3, #1
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e46:	mov	r4, r7
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
    4e48:	strb.w	r0, [sp, #25]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4e4c:	ldr	r0, [r7, #36]	; 0x24
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4e4e:	str	r1, [sp, #20]
  uint32_t lo1 = SNVS_HPRTCLR;
    4e50:	ldr	r1, [r7, #40]	; 0x28
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4e52:	strb.w	r2, [sp, #28]
	HSB_updated = true;
    4e56:	strb.w	r3, [sp, #29]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e5a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4e5c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e5e:	ldr	r7, [pc, #332]	; (4fac <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4e60:	cmp	r3, r1
    4e62:	it	eq
    4e64:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e66:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4e68:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4e6a:	ite	eq
    4e6c:	moveq	r6, #1
    4e6e:	movne	r6, #0
    4e70:	cmp	r6, #0
    4e72:	beq.n	4e5a <ceremony_animation()+0x15a>
  updateBeams();
	updateCircles();

  if (sinceIntro > 3500 && didIntro){
    Color c = Color(195, 80, 100, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
    4e74:	lsrs	r1, r3, #5
    4e76:	ldr	r6, [pc, #320]	; (4fb8 <ceremony_animation()+0x2b8>)
    4e78:	ldr	r4, [pc, #320]	; (4fbc <ceremony_animation()+0x2bc>)
    4e7a:	orr.w	r1, r1, r2, lsl #27
    4e7e:	ldr	r3, [r6, #0]
    4e80:	ldr	r2, [r4, #0]
    4e82:	vmov	s15, r1
    4e86:	rsb	r2, r2, #800	; 0x320
    4e8a:	vcvt.f64.u32	d7, s15
    4e8e:	vldr	d5, [pc, #264]	; 4f98 <ceremony_animation()+0x298>
    4e92:	vdiv.f64	d6, d7, d5
    4e96:	vcvt.u32.f64	s12, d6
    4e9a:	vmov	r1, s12
    4e9e:	subs	r3, r1, r3
    4ea0:	cmp	r2, r3
    4ea2:	bcs.n	4dd4 <ceremony_animation()+0xd4>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4ea4:	ldr.w	lr, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4ea8:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4eaa:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4eac:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4eae:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4eb0:	cmp	r3, r1
    4eb2:	it	eq
    4eb4:	cmpeq	r2, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4eb6:	mov	lr, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4eb8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4eba:	ite	eq
    4ebc:	moveq	r7, #1
    4ebe:	movne	r7, #0
    4ec0:	cmp	r7, #0
    4ec2:	beq.n	4eac <ceremony_animation()+0x1ac>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    4ec4:	lsrs	r3, r3, #5
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    4ec6:	ldr	r7, [pc, #248]	; (4fc0 <ceremony_animation()+0x2c0>)
    4ec8:	movs	r1, #2
    4eca:	movs	r0, #0
    4ecc:	orr.w	r3, r3, r2, lsl #27
    4ed0:	add.w	r9, sp, #24
    4ed4:	add.w	r8, sp, #16
    4ed8:	vmov	s15, r3
    4edc:	vldr	d5, [pc, #184]	; 4f98 <ceremony_animation()+0x298>
    4ee0:	vcvt.f64.u32	d7, s15
    4ee4:	vdiv.f64	d6, d7, d5
    4ee8:	vcvt.u32.f64	s12, d6
    4eec:	vstr	s12, [r6]
    4ef0:	bl	dac8 <random(long, long)>
    4ef4:	movs	r1, #10
    4ef6:	mov	r6, r0
    4ef8:	movs	r0, #2
    4efa:	bl	dac8 <random(long, long)>
    4efe:	vmov	s16, r0
    4f02:	ldr	r0, [r7, #0]
    4f04:	add.w	r1, r0, #900	; 0x384
    4f08:	add.w	r0, r0, #400	; 0x190
    4f0c:	bl	dac8 <random(long, long)>
    4f10:	str	r0, [sp, #8]
    4f12:	vcvt.f32.s32	s0, s16
    4f16:	ldmia.w	r9, {r0, r1}
    4f1a:	ldmia.w	r8, {r2, r3}
    4f1e:	stmia.w	sp, {r0, r1}
    4f22:	adds	r1, r6, #0
    4f24:	ldr	r0, [pc, #156]	; (4fc4 <ceremony_animation()+0x2c4>)
    4f26:	it	ne
    4f28:	movne	r1, #1
    4f2a:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    4f2e:	movs	r1, #2
    4f30:	movs	r0, #0
    4f32:	bl	dac8 <random(long, long)>
    4f36:	movs	r1, #10
    4f38:	mov	r6, r0
    4f3a:	movs	r0, #2
    4f3c:	bl	dac8 <random(long, long)>
    4f40:	vmov	s16, r0
    4f44:	ldr	r0, [r7, #0]
    4f46:	add.w	r1, r0, #900	; 0x384
    4f4a:	add.w	r0, r0, #400	; 0x190
    4f4e:	bl	dac8 <random(long, long)>
    4f52:	str	r0, [sp, #8]
    4f54:	vcvt.f32.s32	s0, s16
    4f58:	ldmia.w	r9, {r0, r1}
    4f5c:	ldmia.w	r8, {r2, r3}
    4f60:	stmia.w	sp, {r0, r1}
    4f64:	adds	r1, r6, #0
    4f66:	ldr	r0, [pc, #96]	; (4fc8 <ceremony_animation()+0x2c8>)
    4f68:	it	ne
    4f6a:	movne	r1, #1
    4f6c:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f70:	ldr	r3, [r7, #0]
    Color c = Color(195, 80, 100, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f72:	ldr	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f74:	adds	r3, #200	; 0xc8
    4f76:	ldr	r6, [r5, #0]
    Color c = Color(195, 80, 100, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f78:	subs	r2, #50	; 0x32
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f7a:	cmp.w	r3, #800	; 0x320
    Color c = Color(195, 80, 100, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f7e:	bic.w	r2, r2, r2, asr #31
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f82:	it	ge
    4f84:	movge.w	r3, #800	; 0x320
    Color c = Color(195, 80, 100, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f88:	str	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f8a:	bic.w	r3, r3, r3, asr #31
    4f8e:	str	r3, [r7, #0]
    4f90:	b.n	4dd6 <ceremony_animation()+0xd6>
    4f92:	nop
    4f94:	nop.w
    4f98:	.word	0xd2f1a9fc
    4f9c:	.word	0x3ff0624d
    4fa0:	.word	0x2000178d
    4fa4:	.word	0x20002c20
    4fa8:	.word	0x20002c18
    4fac:	.word	0x400d4000
    4fb0:	.word	0x20008c9c
    4fb4:	.word	0x20007a5c
    4fb8:	.word	0x20002c1c
    4fbc:	.word	0x2000096c
    4fc0:	.word	0x20005070
    4fc4:	.word	0x20008ca4
    4fc8:	.word	0x20008cb8

    didPulse = true;
	}

  
	if (sinceCircle > 1500 && didPulse && !didIntro) {
    4fcc:	ldr	r3, [pc, #464]	; (51a0 <ceremony_animation()+0x4a0>)
    4fce:	ldrb	r6, [r3, #0]
    4fd0:	cmp	r6, #0
    4fd2:	bne.w	4d74 <ceremony_animation()+0x74>
    newCircle(&matrix_A, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_A);
    4fd6:	mov.w	r1, #360	; 0x168
    4fda:	mov	r0, r6
    4fdc:	bl	dac8 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4fe0:	add.w	r0, r0, #720	; 0x2d0
    4fe4:	ldr.w	fp, [pc, #488]	; 51d0 <ceremony_animation()+0x4d0>
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4fe8:	mov.w	r8, #1
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4fec:	lsrs	r3, r0, #3
    4fee:	mov.w	r9, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4ff2:	strb.w	r6, [sp, #28]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4ff6:	movs	r7, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4ff8:	umull	r2, r3, fp, r3
    4ffc:	add	r5, sp, #16
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4ffe:	strb.w	r8, [sp, #29]
    5002:	mov.w	sl, #1000	; 0x3e8
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5006:	lsrs	r3, r3, #2
    5008:	ldr	r2, [sp, #28]
    500a:	ldr	r1, [pc, #408]	; (51a4 <ceremony_animation()+0x4a4>)
    500c:	mls	r3, r9, r3, r0
    5010:	ldr	r0, [pc, #404]	; (51a8 <ceremony_animation()+0x4a8>)
	HSB_color.s = s;
    5012:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5016:	str	r3, [sp, #20]
	HSB_color.s = s;
	HSB_color.b = b;
    5018:	strb.w	r7, [sp, #25]
    501c:	str	r2, [sp, #0]
    501e:	str	r1, [sp, #8]
    5020:	str.w	sl, [sp, #4]
    5024:	ldmia.w	r5, {r1, r2, r3}
    5028:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
		newCircle(&matrix_B, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_B);
    502c:	mov	r1, r9
    502e:	mov	r0, r6
    5030:	bl	dac8 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5034:	add.w	r0, r0, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    5038:	strb.w	r8, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    503c:	lsrs	r1, r0, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    503e:	strb.w	r6, [sp, #28]
    5042:	ldr	r2, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5044:	umull	r3, fp, fp, r1
    5048:	ldr	r1, [pc, #352]	; (51ac <ceremony_animation()+0x4ac>)
	HSB_color.s = s;
    504a:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    504e:	mov.w	fp, fp, lsr #2
	HSB_color.s = s;
	HSB_color.b = b;
    5052:	strb.w	r7, [sp, #25]
    5056:	str.w	sl, [sp, #4]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    505a:	mls	r3, r9, fp, r0
    505e:	ldr	r0, [pc, #336]	; (51b0 <ceremony_animation()+0x4b0>)
    5060:	str	r2, [sp, #0]
    5062:	str	r3, [sp, #20]
    5064:	str	r1, [sp, #8]
    5066:	ldmia.w	r5, {r1, r2, r3}
    506a:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    506e:	mov	r5, r4
    didIntro = true;
    5070:	ldr	r3, [pc, #300]	; (51a0 <ceremony_animation()+0x4a0>)
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5072:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    5074:	ldr	r1, [r4, #40]	; 0x28
    5076:	strb.w	r8, [r3]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    507a:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    507c:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    507e:	cmp	r3, r1
    5080:	it	eq
    5082:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5084:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    5086:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    5088:	ite	eq
    508a:	moveq	r4, #1
    508c:	movne	r4, #0
    508e:	cmp	r4, #0
    5090:	beq.n	507a <ceremony_animation()+0x37a>
    5092:	lsrs	r1, r3, #5
    5094:	ldr	r5, [pc, #284]	; (51b4 <ceremony_animation()+0x4b4>)
    5096:	orr.w	r1, r1, r2, lsl #27
    509a:	vmov	s15, r1
    509e:	vldr	d5, [pc, #248]	; 5198 <ceremony_animation()+0x498>
    50a2:	vcvt.f64.u32	d7, s15
    50a6:	vdiv.f64	d6, d7, d5
    50aa:	vcvt.u32.f64	s12, d6
    50ae:	vstr	s12, [r5]
    50b2:	b.n	4d76 <ceremony_animation()+0x76>
int speed_offset = 0;
void ceremony_animation(){

  	if (!didPulse && !didIntro) {
    Color c = Color(195, 80, 100, HSB_MODE);
		newBeam(&synapse_A, true, c, NUM_LEDS_SYNAPSE_A*1.5, 2000);
    50b4:	add	r7, sp, #24
    50b6:	mov.w	r8, #2000	; 0x7d0
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    50ba:	mov.w	r9, #1
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    50be:	movs	r1, #80	; 0x50
	HSB_color.b = b;
    50c0:	movs	r2, #100	; 0x64
    50c2:	add	r6, sp, #16
	RGB_updated = false;
    50c4:	strb.w	r4, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    50c8:	movs	r3, #195	; 0xc3
	HSB_color.s = s;
	HSB_color.b = b;
    50ca:	strb.w	r2, [sp, #25]
    50ce:	str.w	r8, [sp, #8]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    50d2:	strb.w	r1, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    50d6:	strb.w	r9, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    50da:	str	r3, [sp, #20]
    50dc:	vldr	s0, [pc, #216]	; 51b8 <ceremony_animation()+0x4b8>
    50e0:	ldmia.w	r7, {r0, r1}
    50e4:	ldmia.w	r6, {r2, r3}
    50e8:	stmia.w	sp, {r0, r1}
    50ec:	mov	r1, r9
    50ee:	ldr	r0, [pc, #204]	; (51bc <ceremony_animation()+0x4bc>)
    50f0:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_A, false, c, NUM_LEDS_SYNAPSE_A*1.5, 2000);
    50f4:	str.w	r8, [sp, #8]
    50f8:	vldr	s0, [pc, #188]	; 51b8 <ceremony_animation()+0x4b8>
    50fc:	ldmia.w	r7, {r0, r1}
    5100:	ldmia.w	r6, {r2, r3}
    5104:	stmia.w	sp, {r0, r1}
    5108:	mov	r1, r4
    510a:	ldr	r0, [pc, #176]	; (51bc <ceremony_animation()+0x4bc>)
    510c:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, true, c, NUM_LEDS_SYNAPSE_B*1.5, 2000);
    5110:	str.w	r8, [sp, #8]
    5114:	vldr	s0, [pc, #168]	; 51c0 <ceremony_animation()+0x4c0>
    5118:	ldmia.w	r7, {r0, r1}
    511c:	ldmia.w	r6, {r2, r3}
    5120:	stmia.w	sp, {r0, r1}
    5124:	mov	r1, r9
    5126:	ldr	r0, [pc, #156]	; (51c4 <ceremony_animation()+0x4c4>)
    5128:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, false, c, NUM_LEDS_SYNAPSE_B*1.5, 2000);
    512c:	str.w	r8, [sp, #8]
    5130:	vldr	s0, [pc, #140]	; 51c0 <ceremony_animation()+0x4c0>
    5134:	ldmia.w	r7, {r0, r1}
    5138:	ldmia.w	r6, {r2, r3}
    513c:	stmia.w	sp, {r0, r1}
    5140:	mov	r1, r4
    5142:	ldr	r0, [pc, #128]	; (51c4 <ceremony_animation()+0x4c4>)
    5144:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5148:	ldr	r3, [pc, #124]	; (51c8 <ceremony_animation()+0x4c8>)
    514a:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    514c:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    514e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5150:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    5152:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    5154:	cmp	r3, r1
    5156:	it	eq
    5158:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    515a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    515c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    515e:	ite	eq
    5160:	moveq	r6, #1
    5162:	movne	r6, #0
    5164:	cmp	r6, #0
    5166:	beq.n	5150 <ceremony_animation()+0x450>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    5168:	lsrs	r1, r3, #5
    516a:	ldr	r2, [pc, #96]	; (51cc <ceremony_animation()+0x4cc>)
		sinceCircle = 0;

    didPulse = true;
    516c:	movs	r3, #1
    516e:	orr.w	r1, r1, r0, lsl #27
    5172:	strb	r3, [r5, #0]
    5174:	vmov	s15, r1
    5178:	vldr	d5, [pc, #28]	; 5198 <ceremony_animation()+0x498>
    517c:	vcvt.f64.u32	d7, s15
    5180:	vdiv.f64	d6, d7, d5
    5184:	vcvt.u32.f64	s15, d6
    5188:	vmov	lr, s15
    518c:	vstr	s15, [r2]
    5190:	b.n	4d20 <ceremony_animation()+0x20>
    5192:	nop
    5194:	nop.w
    5198:	.word	0xd2f1a9fc
    519c:	.word	0x3ff0624d
    51a0:	.word	0x20002c20
    51a4:	.word	0x20009ef0
    51a8:	.word	0x20003e48
    51ac:	.word	0x20003e70
    51b0:	.word	0x20003e5c
    51b4:	.word	0x20008c9c
    51b8:	.word	0x436a0000
    51bc:	.word	0x20008ca4
    51c0:	.word	0x432c8000
    51c4:	.word	0x20008cb8
    51c8:	.word	0x400d4000
    51cc:	.word	0x20002c18
    51d0:	.word	0x16c16c17
    51d4:	.word	0x00000000

000051d8 <_GLOBAL__sub_I_bri_level>:
void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
}
    51d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    51dc:	bl	cd44 <eeprom_initialize>
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    51e0:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51e4:	ldr	r3, [pc, #972]	; (55b4 <_GLOBAL__sub_I_bri_level+0x3dc>)
      _s = s;
    51e6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51ea:	movs	r5, #0
      _s = s;
    51ec:	mov.w	lr, #252	; 0xfc
    51f0:	strb.w	r6, [r3, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51f4:	movs	r6, #152	; 0x98
      _s = s;
    51f6:	mov.w	fp, #251	; 0xfb
      _b = b;
    51fa:	mov.w	ip, #149	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51fe:	str	r6, [r3, #16]
      _s = s;
    5200:	mov.w	r6, #22
    5204:	strb.w	r1, [r3, #36]	; 0x24
    5208:	movs	r7, #121	; 0x79
    520a:	strb	r6, [r3, #20]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    520c:	movs	r6, #168	; 0xa8
      _s = s;
    520e:	strb.w	r1, [r3, #84]	; 0x54
    5212:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5216:	str	r6, [r3, #24]
      _s = s;
    5218:	mov.w	sl, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    521c:	str	r6, [r3, #80]	; 0x50
      _s = s;
    521e:	mvn.w	r6, #38	; 0x26
      _b = b;
    5222:	strb.w	ip, [r3, #21]
    5226:	mov.w	r8, #175	; 0xaf
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    522a:	strb	r6, [r3, #28]
      _b = b;
    522c:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5230:	strb.w	lr, [r3, #44]	; 0x2c
    5234:	movs	r0, #216	; 0xd8
      _b = b;
    5236:	strb	r6, [r3, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5238:	movs	r6, #145	; 0x91
      _s = s;
    523a:	strb.w	r1, [r3, #60]	; 0x3c
    523e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5242:	str	r6, [r3, #32]
      _s = s;
      _b = b;
    5244:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5248:	str	r5, [r3, #0]
    524a:	add.w	r2, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    524e:	strb.w	r6, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5252:	movs	r6, #165	; 0xa5
      _s = s;
    5254:	strb	r5, [r3, #4]
      _b = b;
    5256:	mov.w	r9, #254	; 0xfe
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    525a:	str	r6, [r3, #40]	; 0x28
      _s = s;
      _b = b;
    525c:	mov.w	r6, #120	; 0x78
    5260:	strb	r5, [r3, #5]
    5262:	strb.w	r6, [r3, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5266:	movs	r6, #186	; 0xba
    5268:	str	r5, [r3, #8]
    526a:	str	r6, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    526c:	mov.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5270:	strb	r5, [r3, #12]
      _b = b;
    5272:	strb.w	r6, [r3, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5276:	movs	r6, #159	; 0x9f
      _s = s;
      _b = b;
    5278:	strb	r5, [r3, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    527a:	str	r6, [r3, #56]	; 0x38
      _s = s;
      _b = b;
    527c:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5280:	strb.w	fp, [r3, #52]	; 0x34
      _b = b;
    5284:	strb.w	r6, [r3, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5288:	movs	r6, #92	; 0x5c
    528a:	ldr	r4, [pc, #812]	; (55b8 <_GLOBAL__sub_I_bri_level+0x3e0>)
    528c:	str	r6, [r3, #64]	; 0x40
      _s = s;
      _b = b;
    528e:	mvn.w	r6, #23
    5292:	strb.w	r6, [r3, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5296:	movs	r6, #106	; 0x6a
    5298:	str	r6, [r3, #72]	; 0x48
      _s = s;
    529a:	mvn.w	r6, #124	; 0x7c
    529e:	strb.w	r6, [r3, #76]	; 0x4c
      _b = b;
    52a2:	mvn.w	r6, #21
    52a6:	strb.w	r6, [r3, #77]	; 0x4d
    52aa:	mvn.w	r6, #36	; 0x24
    52ae:	strb.w	r6, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52b2:	movs	r6, #168	; 0xa8
      _s = s;
    52b4:	strb.w	r1, [r3, #92]	; 0x5c
    52b8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52bc:	str	r6, [r3, #88]	; 0x58
    52be:	movs	r6, #165	; 0xa5
      _s = s;
    52c0:	strb.w	r1, [r3, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52c4:	str	r6, [r3, #96]	; 0x60
      _s = s;
      _b = b;
    52c6:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52ca:	str	r5, [r3, #104]	; 0x68
      _s = s;
      _b = b;
    52cc:	strb.w	r6, [r3, #93]	; 0x5d
    52d0:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52d4:	strb.w	r5, [r3, #108]	; 0x6c
      _b = b;
    52d8:	strb.w	r6, [r3, #101]	; 0x65
    52dc:	mvn.w	r6, #46	; 0x2e
    52e0:	strb.w	r5, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52e4:	str	r5, [r3, #112]	; 0x70
      _s = s;
    52e6:	strb.w	r5, [r3, #116]	; 0x74
      _b = b;
    52ea:	strb.w	r5, [r3, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52ee:	str	r5, [r3, #120]	; 0x78
      _s = s;
    52f0:	strb.w	r5, [r3, #124]	; 0x7c
      _b = b;
    52f4:	strb.w	r5, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52f8:	str.w	r5, [r3, #128]	; 0x80
      _s = s;
    52fc:	strb.w	r5, [r3, #132]	; 0x84
      _b = b;
    5300:	strb.w	r5, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5304:	str.w	r5, [r3, #136]	; 0x88
      _s = s;
    5308:	strb.w	r5, [r3, #140]	; 0x8c
      _b = b;
    530c:	strb.w	r5, [r3, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5310:	str.w	r5, [r3, #144]	; 0x90
      _s = s;
    5314:	strb.w	r5, [r3, #148]	; 0x94
      _b = b;
    5318:	strb.w	r5, [r3, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    531c:	str.w	r5, [r3, #152]	; 0x98
      _s = s;
    5320:	strb.w	r5, [r3, #156]	; 0x9c
      _b = b;
    5324:	strb.w	r5, [r3, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5328:	str.w	r5, [r3, #160]	; 0xa0
      _s = s;
    532c:	strb.w	r5, [r3, #164]	; 0xa4
      _b = b;
    5330:	strb.w	r5, [r3, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5334:	str.w	r5, [r3, #168]	; 0xa8
      _s = s;
    5338:	strb.w	r5, [r3, #172]	; 0xac
      _b = b;
    533c:	strb.w	r5, [r3, #173]	; 0xad
    5340:	strb.w	r6, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5344:	movs	r6, #188	; 0xbc
      _s = s;
    5346:	strb.w	lr, [r3, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    534a:	str.w	r6, [r3, #240]	; 0xf0
    534e:	movs	r6, #131	; 0x83
      _s = s;
    5350:	strb.w	r1, [r3, #236]	; 0xec
    5354:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5358:	str.w	r6, [r3, #256]	; 0x100
      _s = s;
    535c:	mvn.w	r6, #124	; 0x7c
    5360:	strb.w	lr, [r3, #252]	; 0xfc
    5364:	strb.w	r6, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5368:	movs	r6, #52	; 0x34
    536a:	str.w	r5, [r3, #176]	; 0xb0
    536e:	str.w	r6, [r3, #208]	; 0xd0
      _s = s;
    5372:	mov.w	r6, #100	; 0x64
    5376:	strb.w	r5, [r3, #180]	; 0xb4
    537a:	strb.w	r6, [r3, #212]	; 0xd4
      _b = b;
    537e:	mvn.w	r6, #25
    5382:	strb.w	r5, [r3, #181]	; 0xb5
    5386:	strb.w	r6, [r3, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    538a:	movs	r6, #155	; 0x9b
    538c:	str.w	r5, [r3, #184]	; 0xb8
    5390:	str.w	r6, [r3, #216]	; 0xd8
      _s = s;
    5394:	mvn.w	r6, #118	; 0x76
    5398:	strb.w	r5, [r3, #188]	; 0xbc
    539c:	strb.w	r6, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53a0:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    53a2:	strb.w	r5, [r3, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53a6:	str.w	r6, [r3, #224]	; 0xe0
      _s = s;
      _b = b;
    53aa:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ae:	str.w	r5, [r3, #192]	; 0xc0
      _s = s;
      _b = b;
    53b2:	strb.w	r6, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53b6:	movs	r6, #184	; 0xb8
      _s = s;
    53b8:	strb.w	r5, [r3, #196]	; 0xc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53bc:	str.w	r6, [r3, #232]	; 0xe8
      _s = s;
      _b = b;
    53c0:	mov.w	r6, #97	; 0x61
    53c4:	strb.w	r5, [r3, #197]	; 0xc5
    53c8:	strb.w	r6, [r3, #237]	; 0xed
    53cc:	mov.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53d0:	str.w	r5, [r3, #200]	; 0xc8
      _s = s;
      _b = b;
    53d4:	strb.w	r6, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53d8:	movs	r6, #161	; 0xa1
      _s = s;
    53da:	strb.w	r5, [r3, #204]	; 0xcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53de:	str.w	r6, [r3, #248]	; 0xf8
      _s = s;
      _b = b;
    53e2:	mov.w	r6, #85	; 0x55
    53e6:	strb.w	r5, [r3, #205]	; 0xcd
    53ea:	strb.w	r6, [r3, #253]	; 0xfd
    53ee:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53f2:	strb.w	fp, [r3, #244]	; 0xf4
      _b = b;
    53f6:	strb.w	r6, [r3, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53fa:	movs	r6, #97	; 0x61
      _s = s;
    53fc:	strb.w	r7, [r3, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5400:	str.w	r6, [r3, #272]	; 0x110
      _s = s;
    5404:	mov.w	r6, #127	; 0x7f
    5408:	strb.w	r1, [r3, #300]	; 0x12c
      _b = b;
    540c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5410:	strb.w	r6, [r3, #276]	; 0x114
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5414:	movs	r6, #116	; 0x74
      _s = s;
      _b = b;
    5416:	strb.w	r7, [r3, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    541a:	str.w	r6, [r3, #264]	; 0x108
      _s = s;
      _b = b;
    541e:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5422:	str.w	r5, [r3, #312]	; 0x138
      _s = s;
      _b = b;
    5426:	strb.w	r6, [r3, #269]	; 0x10d
    542a:	strb.w	r6, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    542e:	mvn.w	r6, #46	; 0x2e
    5432:	strb.w	r5, [r3, #316]	; 0x13c
    5436:	strb.w	r6, [r3, #284]	; 0x11c
      _b = b;
    543a:	mvn.w	r6, #22
    543e:	strb.w	r5, [r3, #317]	; 0x13d
    5442:	strb.w	r6, [r3, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5446:	movs	r6, #92	; 0x5c
    5448:	str.w	r5, [r3, #320]	; 0x140
    544c:	str.w	r6, [r3, #288]	; 0x120
      _s = s;
      _b = b;
    5450:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5454:	strb.w	r5, [r3, #324]	; 0x144
      _b = b;
    5458:	strb.w	r6, [r3, #293]	; 0x125
    545c:	mvn.w	r6, #100	; 0x64
    5460:	strb.w	r5, [r3, #325]	; 0x145
    5464:	strb.w	r6, [r3, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5468:	movs	r6, #127	; 0x7f
    546a:	str.w	r5, [r3, #328]	; 0x148
    546e:	str.w	r6, [r3, #304]	; 0x130
    5472:	movs	r6, #73	; 0x49
      _s = s;
    5474:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5478:	str.w	r6, [r3, #280]	; 0x118
      _s = s;
    547c:	mvn.w	r6, #49	; 0x31
      _b = b;
    5480:	strb.w	r5, [r3, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5484:	strb.w	r6, [r3, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5488:	movs	r6, #123	; 0x7b
    548a:	str.w	r5, [r3, #336]	; 0x150
    548e:	str.w	r6, [r3, #296]	; 0x128
      _s = s;
    5492:	mvn.w	r6, #11
    5496:	strb.w	r5, [r3, #340]	; 0x154
    549a:	strb.w	r6, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    549e:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    54a0:	strb.w	r5, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54a4:	str.w	r5, [r3, #344]	; 0x158
      _s = s;
    54a8:	strb.w	r5, [r3, #348]	; 0x15c
      _b = b;
    54ac:	strb.w	r5, [r3, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54b0:	str.w	r6, [r3, #424]	; 0x1a8
      _s = s;
      _b = b;
    54b4:	mov.w	r6, #61	; 0x3d
    54b8:	strb.w	r1, [r3, #405]	; 0x195
    54bc:	strb.w	r6, [r3, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54c0:	movs	r6, #174	; 0xae
      _s = s;
    54c2:	strb.w	r1, [r3, #420]	; 0x1a4
    54c6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54ca:	str.w	r6, [r3, #432]	; 0x1b0
    54ce:	movs	r6, #48	; 0x30
      _s = s;
    54d0:	strb.w	r1, [r3, #428]	; 0x1ac
    54d4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54d8:	str.w	r6, [r3, #400]	; 0x190
      _s = s;
    54dc:	mvn.w	r6, #66	; 0x42
    54e0:	strb.w	lr, [r3, #436]	; 0x1b4
    54e4:	strb.w	r6, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54e8:	movs	r6, #142	; 0x8e
    54ea:	str.w	r5, [r3, #352]	; 0x160
    54ee:	str.w	r6, [r3, #408]	; 0x198
      _s = s;
    54f2:	mov.w	r6, #104	; 0x68
    54f6:	strb.w	r5, [r3, #356]	; 0x164
    54fa:	strb.w	r6, [r3, #412]	; 0x19c
      _b = b;
    54fe:	mvn.w	r6, #28
    5502:	strb.w	r5, [r3, #357]	; 0x165
    5506:	strb.w	r6, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    550a:	movs	r6, #180	; 0xb4
    550c:	str.w	r5, [r3, #360]	; 0x168
    5510:	str.w	r6, [r3, #416]	; 0x1a0
      _s = s;
      _b = b;
    5514:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5518:	strb.w	r5, [r3, #364]	; 0x16c
      _b = b;
    551c:	strb.w	r6, [r3, #421]	; 0x1a5
    5520:	mov.w	r6, #108	; 0x6c
    5524:	strb.w	r5, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5528:	str.w	r5, [r3, #368]	; 0x170
      _s = s;
    552c:	strb.w	r5, [r3, #372]	; 0x174
      _b = b;
    5530:	strb.w	r5, [r3, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5534:	str.w	r5, [r3, #376]	; 0x178
      _s = s;
    5538:	strb.w	r5, [r3, #380]	; 0x17c
      _b = b;
    553c:	strb.w	r5, [r3, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5540:	str.w	r5, [r3, #384]	; 0x180
      _s = s;
    5544:	strb.w	r5, [r3, #388]	; 0x184
      _b = b;
    5548:	strb.w	r5, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    554c:	str.w	r5, [r3, #392]	; 0x188
      _s = s;
    5550:	strb.w	r5, [r3, #396]	; 0x18c
      _b = b;
    5554:	strb.w	r5, [r3, #397]	; 0x18d
    5558:	strb.w	r6, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    555c:	mvn.w	r6, #54	; 0x36
    5560:	strb.w	r1, [r3, #444]	; 0x1bc
    5564:	strb.w	r6, [r3, #460]	; 0x1cc
      _b = b;
    5568:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    556c:	strb.w	r1, [r3, #452]	; 0x1c4
      _b = b;
    5570:	strb.w	r6, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5574:	mvn.w	r6, #45	; 0x2d
    5578:	strb.w	r1, [r3, #476]	; 0x1dc
    557c:	mvn.w	r1, #2
    5580:	strb.w	r6, [r3, #468]	; 0x1d4
      _b = b;
    5584:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5588:	strb.w	r1, [r3, #492]	; 0x1ec
    558c:	mvn.w	r1, #2
      _b = b;
    5590:	strb.w	r6, [r3, #469]	; 0x1d5
    5594:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5598:	strb.w	lr, [r3, #484]	; 0x1e4
      _b = b;
    559c:	strb.w	r6, [r3, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55a0:	movs	r6, #104	; 0x68
      _s = s;
    55a2:	strb.w	r1, [r3, #500]	; 0x1f4
    55a6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55aa:	str.w	r6, [r3, #488]	; 0x1e8
      _s = s;
      _b = b;
    55ae:	mvn.w	r6, #68	; 0x44
    55b2:	b.n	55bc <_GLOBAL__sub_I_bri_level+0x3e4>
    55b4:	.word	0x20009ef0
    55b8:	.word	0x20003e70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55bc:	str.w	ip, [r3, #512]	; 0x200
      _s = s;
      _b = b;
    55c0:	strb.w	r6, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55c4:	movs	r6, #115	; 0x73
    55c6:	str.w	r5, [r3, #520]	; 0x208
    55ca:	str.w	r6, [r3, #496]	; 0x1f0
      _s = s;
    55ce:	mvn.w	r6, #67	; 0x43
    55d2:	strb.w	r5, [r3, #524]	; 0x20c
    55d6:	strb.w	r6, [r3, #516]	; 0x204
      _b = b;
    55da:	mov.w	r6, #54	; 0x36
    55de:	strb.w	r6, [r3, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55e2:	movs	r6, #167	; 0xa7
    55e4:	str.w	r6, [r3, #440]	; 0x1b8
      _s = s;
      _b = b;
    55e8:	mov.w	r6, #102	; 0x66
    55ec:	strb.w	r6, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55f0:	movs	r6, #162	; 0xa2
    55f2:	str.w	r6, [r3, #448]	; 0x1c0
    55f6:	movs	r6, #74	; 0x4a
    55f8:	str.w	r6, [r3, #456]	; 0x1c8
    55fc:	movs	r6, #75	; 0x4b
    55fe:	str.w	r6, [r3, #464]	; 0x1d0
    5602:	movs	r6, #128	; 0x80
    5604:	str.w	r6, [r3, #472]	; 0x1d8
    5608:	movs	r6, #124	; 0x7c
    560a:	str.w	r6, [r3, #480]	; 0x1e0
      _s = s;
      _b = b;
    560e:	mov.w	r6, #112	; 0x70
    5612:	strb.w	r6, [r3, #485]	; 0x1e5
    5616:	mvn.w	r6, #65	; 0x41
    561a:	strb.w	r6, [r3, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    561e:	movs	r6, #66	; 0x42
    5620:	str.w	r6, [r3, #504]	; 0x1f8
      _s = s;
    5624:	mvn.w	r6, #7
    5628:	strb.w	r6, [r3, #508]	; 0x1fc
      _b = b;
    562c:	mvn.w	r6, #33	; 0x21
    5630:	strb.w	r6, [r3, #509]	; 0x1fd
    5634:	mvn.w	r6, #121	; 0x79
    5638:	strb.w	r6, [r3, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    563c:	movs	r6, #47	; 0x2f
      _s = s;
      _b = b;
    563e:	strb.w	r5, [r3, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5642:	str.w	r6, [r3, #592]	; 0x250
    5646:	movs	r6, #74	; 0x4a
      _s = s;
    5648:	strb.w	r1, [r3, #612]	; 0x264
    564c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5650:	str.w	r6, [r3, #600]	; 0x258
      _s = s;
      _b = b;
    5654:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5658:	str.w	r5, [r3, #528]	; 0x210
      _s = s;
      _b = b;
    565c:	strb.w	r6, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5660:	movs	r6, #171	; 0xab
      _s = s;
    5662:	strb.w	r5, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5666:	str.w	r6, [r3, #608]	; 0x260
      _s = s;
    566a:	mov.w	r6, #117	; 0x75
      _b = b;
    566e:	strb.w	r5, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5672:	strb.w	r6, [r3, #604]	; 0x25c
      _b = b;
    5676:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    567a:	str.w	r5, [r3, #536]	; 0x218
      _s = s;
      _b = b;
    567e:	strb.w	r6, [r3, #597]	; 0x255
    5682:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5686:	strb.w	r5, [r3, #540]	; 0x21c
      _b = b;
    568a:	strb.w	r5, [r3, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    568e:	str.w	r5, [r3, #544]	; 0x220
      _s = s;
    5692:	strb.w	r5, [r3, #548]	; 0x224
      _b = b;
    5696:	strb.w	r5, [r3, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    569a:	str.w	r5, [r3, #552]	; 0x228
      _s = s;
    569e:	strb.w	r5, [r3, #556]	; 0x22c
      _b = b;
    56a2:	strb.w	r5, [r3, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56a6:	str.w	r5, [r3, #560]	; 0x230
      _s = s;
    56aa:	strb.w	r5, [r3, #564]	; 0x234
      _b = b;
    56ae:	strb.w	r5, [r3, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56b2:	str.w	r5, [r3, #568]	; 0x238
      _s = s;
    56b6:	strb.w	r5, [r3, #572]	; 0x23c
      _b = b;
    56ba:	strb.w	r5, [r3, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56be:	str.w	r5, [r3, #576]	; 0x240
      _s = s;
    56c2:	strb.w	r5, [r3, #580]	; 0x244
      _b = b;
    56c6:	strb.w	r5, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ca:	str.w	r5, [r3, #584]	; 0x248
      _s = s;
    56ce:	strb.w	r5, [r3, #588]	; 0x24c
      _b = b;
    56d2:	strb.w	r5, [r3, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56d6:	strb.w	fp, [r3, #596]	; 0x254
      _b = b;
    56da:	strb.w	r6, [r3, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56de:	movs	r6, #183	; 0xb7
      _s = s;
    56e0:	strb.w	r1, [r3, #620]	; 0x26c
    56e4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56e8:	str.w	r6, [r3, #616]	; 0x268
    56ec:	movs	r6, #172	; 0xac
      _s = s;
    56ee:	strb.w	r1, [r3, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56f2:	str.w	r6, [r3, #624]	; 0x270
      _s = s;
      _b = b;
    56f6:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56fa:	strb.w	r1, [r3, #644]	; 0x284
    56fe:	mov.w	r1, #4294967295
      _b = b;
    5702:	strb.w	r6, [r3, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5706:	movs	r6, #144	; 0x90
      _s = s;
    5708:	strb.w	r1, [r3, #652]	; 0x28c
    570c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5710:	str.w	r6, [r3, #648]	; 0x288
    5714:	movs	r6, #142	; 0x8e
      _s = s;
    5716:	strb.w	r1, [r3, #668]	; 0x29c
    571a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    571e:	str.w	r6, [r3, #664]	; 0x298
      _s = s;
      _b = b;
    5722:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5726:	strb.w	r1, [r3, #676]	; 0x2a4
    572a:	mvn.w	r1, #2
      _b = b;
    572e:	strb.w	r6, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5732:	movs	r6, #85	; 0x55
      _s = s;
    5734:	strb.w	r1, [r3, #684]	; 0x2ac
    5738:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    573c:	str.w	r6, [r3, #680]	; 0x2a8
      _s = s;
      _b = b;
    5740:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5744:	strb.w	r1, [r3, #692]	; 0x2b4
    5748:	mvn.w	r1, #2
      _b = b;
    574c:	strb.w	r6, [r3, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5750:	movs	r6, #120	; 0x78
      _s = s;
    5752:	strb.w	r1, [r3, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5756:	str.w	r6, [r3, #688]	; 0x2b0
      _s = s;
      _b = b;
    575a:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    575e:	strb.w	lr, [r3, #636]	; 0x27c
      _b = b;
    5762:	strb.w	r6, [r3, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5766:	movs	r6, #66	; 0x42
      _s = s;
      _b = b;
    5768:	strb.w	r7, [r3, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    576c:	str.w	r6, [r3, #696]	; 0x2b8
      _s = s;
      _b = b;
    5770:	mov.w	r6, #86	; 0x56
    5774:	strb.w	r7, [r3, #653]	; 0x28d
    5778:	strb.w	r6, [r3, #661]	; 0x295
    577c:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5780:	strb.w	lr, [r3, #660]	; 0x294
      _b = b;
    5784:	strb.w	r6, [r3, #621]	; 0x26d
    5788:	mov.w	r6, #94	; 0x5e
    578c:	strb.w	r6, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5790:	movs	r6, #160	; 0xa0
    5792:	str.w	r6, [r3, #632]	; 0x278
    5796:	movs	r6, #148	; 0x94
    5798:	str.w	r6, [r3, #640]	; 0x280
    579c:	str.w	r6, [r3, #656]	; 0x290
      _s = s;
      _b = b;
    57a0:	mov.w	r6, #103	; 0x67
    57a4:	strb.w	r6, [r3, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57a8:	movs	r6, #122	; 0x7a
    57aa:	mov	r1, r6
    57ac:	str.w	r6, [r3, #672]	; 0x2a0
      _s = s;
      _b = b;
    57b0:	mvn.w	r6, #37	; 0x25
    57b4:	strb.w	r6, [r3, #701]	; 0x2bd
    57b8:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57bc:	str.w	r1, [r3, #704]	; 0x2c0
      _s = s;
    57c0:	mvn.w	r1, #2
      _b = b;
    57c4:	strb.w	r6, [r3, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57c8:	movs	r6, #112	; 0x70
    57ca:	str.w	r5, [r3, #728]	; 0x2d8
    57ce:	str.w	r6, [r3, #712]	; 0x2c8
      _s = s;
      _b = b;
    57d2:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57d6:	strb.w	r5, [r3, #732]	; 0x2dc
      _b = b;
    57da:	strb.w	r6, [r3, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57de:	mov.w	r6, #110	; 0x6e
      _b = b;
    57e2:	strb.w	r5, [r3, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57e6:	strb.w	r6, [r3, #708]	; 0x2c4
    57ea:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57ee:	str.w	r5, [r3, #736]	; 0x2e0
      _s = s;
    57f2:	strb.w	r6, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57f6:	movs	r6, #56	; 0x38
      _s = s;
    57f8:	strb.w	r5, [r3, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57fc:	str.w	r6, [r3, #720]	; 0x2d0
      _s = s;
    5800:	mvn.w	r6, #26
      _b = b;
    5804:	strb.w	r5, [r3, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5808:	strb.w	r6, [r3, #724]	; 0x2d4
      _b = b;
    580c:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5810:	str.w	r5, [r3, #744]	; 0x2e8
      _s = s;
      _b = b;
    5814:	strb.w	r6, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5818:	movs	r6, #40	; 0x28
      _s = s;
    581a:	strb.w	r5, [r3, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    581e:	str.w	r6, [r3, #784]	; 0x310
      _s = s;
    5822:	mvn.w	r6, #16
      _b = b;
    5826:	strb.w	r5, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    582a:	strb.w	r6, [r3, #788]	; 0x314
      _b = b;
    582e:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5832:	str.w	r5, [r3, #752]	; 0x2f0
      _s = s;
    5836:	strb.w	r5, [r3, #756]	; 0x2f4
      _b = b;
    583a:	strb.w	r5, [r3, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    583e:	str.w	r5, [r3, #760]	; 0x2f8
      _s = s;
    5842:	strb.w	r5, [r3, #764]	; 0x2fc
      _b = b;
    5846:	strb.w	r5, [r3, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    584a:	str.w	r5, [r3, #768]	; 0x300
      _s = s;
    584e:	strb.w	r5, [r3, #772]	; 0x304
      _b = b;
    5852:	strb.w	r5, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5856:	str.w	r5, [r3, #776]	; 0x308
      _s = s;
    585a:	strb.w	r5, [r3, #780]	; 0x30c
      _b = b;
    585e:	strb.w	r5, [r3, #781]	; 0x30d
    5862:	strb.w	r6, [r3, #789]	; 0x315
    5866:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    586a:	strb.w	r1, [r3, #836]	; 0x344
    586e:	mov.w	r1, #4294967295
      _b = b;
    5872:	strb.w	r6, [r3, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5876:	movs	r6, #174	; 0xae
      _s = s;
    5878:	strb.w	r1, [r3, #844]	; 0x34c
    587c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5880:	str.w	r6, [r3, #808]	; 0x328
    5884:	str.w	r6, [r3, #816]	; 0x330
    5888:	movs	r6, #148	; 0x94
      _s = s;
    588a:	strb.w	r1, [r3, #852]	; 0x354
    588e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5892:	str.w	r6, [r3, #832]	; 0x340
      _s = s;
      _b = b;
    5896:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    589a:	strb.w	r1, [r3, #860]	; 0x35c
    589e:	mov.w	r1, #4294967295
      _b = b;
    58a2:	strb.w	r6, [r3, #837]	; 0x345
    58a6:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58aa:	strb.w	r1, [r3, #868]	; 0x364
    58ae:	mvn.w	r1, #2
      _b = b;
    58b2:	strb.w	r6, [r3, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58b6:	movs	r6, #144	; 0x90
      _s = s;
    58b8:	strb.w	lr, [r3, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58bc:	str.w	r6, [r3, #848]	; 0x350
      _s = s;
      _b = b;
    58c0:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58c4:	strb.w	lr, [r3, #828]	; 0x33c
      _b = b;
    58c8:	strb.w	r6, [r3, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58cc:	movs	r6, #139	; 0x8b
      _s = s;
      _b = b;
    58ce:	strb.w	r7, [r3, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58d2:	str.w	r6, [r3, #856]	; 0x358
      _s = s;
      _b = b;
    58d6:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58da:	strb.w	r1, [r3, #876]	; 0x36c
    58de:	mov.w	r1, #4294967295
      _b = b;
    58e2:	strb.w	r6, [r3, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58e6:	movs	r6, #122	; 0x7a
    58e8:	str.w	r6, [r3, #864]	; 0x360
      _s = s;
      _b = b;
    58ec:	mvn.w	r6, #121	; 0x79
    58f0:	strb.w	r6, [r3, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58f4:	movs	r6, #85	; 0x55
    58f6:	str.w	r6, [r3, #872]	; 0x368
    58fa:	movs	r6, #37	; 0x25
    58fc:	str.w	r6, [r3, #792]	; 0x318
      _s = s;
    5900:	mvn.w	r6, #5
    5904:	strb.w	r6, [r3, #796]	; 0x31c
    5908:	strb.w	r6, [r3, #820]	; 0x334
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    590c:	movs	r6, #136	; 0x88
    590e:	str.w	r6, [r3, #800]	; 0x320
      _s = s;
    5912:	mov.w	r6, #109	; 0x6d
    5916:	strb.w	r6, [r3, #804]	; 0x324
      _b = b;
    591a:	mvn.w	r6, #24
    591e:	strb.w	r6, [r3, #805]	; 0x325
    5922:	mov.w	r6, #88	; 0x58
    5926:	strb.w	r6, [r3, #813]	; 0x32d
    592a:	mov.w	r6, #62	; 0x3e
    592e:	strb.w	r6, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5932:	movs	r6, #158	; 0x9e
    5934:	str.w	r6, [r3, #824]	; 0x338
    5938:	movs	r6, #141	; 0x8d
    593a:	str.w	r6, [r3, #840]	; 0x348
      _s = s;
      _b = b;
    593e:	mvn.w	r6, #57	; 0x39
    5942:	strb.w	r6, [r3, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5946:	movs	r6, #123	; 0x7b
      _s = s;
    5948:	strb.w	r1, [r3, #884]	; 0x374
    594c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5950:	str.w	r6, [r3, #880]	; 0x370
    5954:	movs	r6, #97	; 0x61
      _s = s;
      _b = b;
    5956:	strb.w	ip, [r3, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    595a:	str.w	r6, [r3, #888]	; 0x378
      _s = s;
    595e:	mvn.w	r6, #5
    5962:	strb.w	r1, [r3, #924]	; 0x39c
    5966:	mov.w	r1, #4294967295
    596a:	strb.w	r6, [r3, #892]	; 0x37c
      _b = b;
    596e:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5972:	str.w	r5, [r3, #928]	; 0x3a0
      _s = s;
      _b = b;
    5976:	strb.w	r6, [r3, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    597a:	movs	r6, #71	; 0x47
      _s = s;
    597c:	strb.w	r5, [r3, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5980:	str.w	r6, [r3, #896]	; 0x380
      _s = s;
      _b = b;
    5984:	mvn.w	r6, #14
    5988:	strb.w	r5, [r3, #933]	; 0x3a5
    598c:	strb.w	r6, [r3, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5990:	movs	r6, #120	; 0x78
    5992:	str.w	r5, [r3, #936]	; 0x3a8
    5996:	str.w	r6, [r3, #904]	; 0x388
      _s = s;
    599a:	mov.w	r6, #99	; 0x63
    599e:	strb.w	r5, [r3, #940]	; 0x3ac
    59a2:	strb.w	r6, [r3, #908]	; 0x38c
      _b = b;
    59a6:	mvn.w	r6, #11
    59aa:	strb.w	r5, [r3, #941]	; 0x3ad
    59ae:	strb.w	r6, [r3, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59b2:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59b6:	str.w	r5, [r3, #944]	; 0x3b0
      _s = s;
    59ba:	strb.w	r6, [r3, #916]	; 0x394
      _b = b;
    59be:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59c2:	strb.w	r5, [r3, #948]	; 0x3b4
      _b = b;
    59c6:	strb.w	r6, [r3, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ca:	movs	r6, #155	; 0x9b
      _s = s;
      _b = b;
    59cc:	strb.w	r5, [r3, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59d0:	str.w	r6, [r3, #920]	; 0x398
      _s = s;
      _b = b;
    59d4:	mov.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59d8:	str.w	r5, [r3, #952]	; 0x3b8
      _s = s;
      _b = b;
    59dc:	strb.w	r6, [r3, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59e0:	mvn.w	r6, #102	; 0x66
    59e4:	strb.w	r5, [r3, #956]	; 0x3bc
    59e8:	strb.w	r6, [r3, #900]	; 0x384
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ec:	movs	r6, #90	; 0x5a
      _s = s;
      _b = b;
    59ee:	strb.w	r5, [r3, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59f2:	str.w	r6, [r3, #912]	; 0x390
      _s = s;
    59f6:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59fa:	str.w	r5, [r3, #960]	; 0x3c0
      _s = s;
    59fe:	strb.w	r5, [r3, #964]	; 0x3c4
      _b = b;
    5a02:	strb.w	r5, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a06:	strb.w	r6, [r3, #980]	; 0x3d4
      _b = b;
    5a0a:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a0e:	strb.w	r1, [r3, #1004]	; 0x3ec
      _b = b;
    5a12:	strb.w	r6, [r3, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a16:	movs	r6, #40	; 0x28
      _s = s;
    5a18:	strb.w	r1, [r3, #1012]	; 0x3f4
    5a1c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a20:	str.w	r6, [r3, #984]	; 0x3d8
      _s = s;
    5a24:	mvn.w	r6, #45	; 0x2d
    5a28:	strb.w	lr, [r3, #1020]	; 0x3fc
    5a2c:	strb.w	r6, [r3, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a30:	movs	r6, #75	; 0x4b
    5a32:	str.w	r5, [r3, #968]	; 0x3c8
    5a36:	str.w	r6, [r3, #992]	; 0x3e0
      _s = s;
    5a3a:	mov.w	r6, #92	; 0x5c
    5a3e:	strb.w	r5, [r3, #972]	; 0x3cc
    5a42:	strb.w	r6, [r3, #996]	; 0x3e4
      _b = b;
    5a46:	mvn.w	r6, #25
    5a4a:	strb.w	r5, [r3, #973]	; 0x3cd
    5a4e:	strb.w	r6, [r3, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a52:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    5a54:	strb.w	fp, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a58:	str.w	r6, [r3, #1000]	; 0x3e8
      _s = s;
      _b = b;
    5a5c:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a60:	strb.w	sl, [r3, #1052]	; 0x41c
      _b = b;
    5a64:	strb.w	r6, [r3, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a68:	movs	r6, #164	; 0xa4
    5a6a:	str.w	r6, [r3, #1016]	; 0x3f8
      _s = s;
      _b = b;
    5a6e:	mov.w	r6, #92	; 0x5c
    5a72:	strb.w	r6, [r3, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a76:	movs	r6, #127	; 0x7f
    5a78:	str.w	r6, [r3, #1024]	; 0x400
      _s = s;
      _b = b;
    5a7c:	mvn.w	r6, #77	; 0x4d
    5a80:	strb.w	r6, [r3, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a84:	movs	r6, #94	; 0x5e
    5a86:	str.w	r6, [r3, #1032]	; 0x408
      _s = s;
    5a8a:	mvn.w	r6, #114	; 0x72
    5a8e:	strb.w	r6, [r3, #1036]	; 0x40c
      _b = b;
    5a92:	mvn.w	r6, #26
    5a96:	strb.w	r6, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a9a:	movs	r6, #128	; 0x80
    5a9c:	str.w	r6, [r3, #1048]	; 0x418
      _s = s;
      _b = b;
    5aa0:	mov.w	r6, #69	; 0x45
    5aa4:	strb.w	r6, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aa8:	movs	r6, #42	; 0x2a
    5aaa:	str.w	r6, [r3, #976]	; 0x3d0
    5aae:	movs	r6, #173	; 0xad
    5ab0:	str.w	r6, [r3, #1008]	; 0x3f0
      _s = s;
    5ab4:	mvn.w	r6, #125	; 0x7d
    5ab8:	strb.w	r6, [r3, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5abc:	movs	r6, #93	; 0x5d
    5abe:	str.w	r6, [r3, #1040]	; 0x410
      _s = s;
    5ac2:	mvn.w	r6, #85	; 0x55
    5ac6:	strb.w	r6, [r3, #1044]	; 0x414
      _b = b;
    5aca:	mvn.w	r6, #19
    5ace:	strb.w	r6, [r3, #1045]	; 0x415
    5ad2:	mvn.w	r6, #101	; 0x65
    5ad6:	strb.w	r6, [r3, #1053]	; 0x41d
    5ada:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ade:	strb.w	r1, [r3, #1068]	; 0x42c
    5ae2:	mvn.w	r1, #2
      _b = b;
    5ae6:	strb.w	r6, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aea:	movs	r6, #90	; 0x5a
      _s = s;
    5aec:	strb.w	r1, [r3, #1084]	; 0x43c
    5af0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5af4:	str.w	r6, [r3, #1064]	; 0x428
      _s = s;
      _b = b;
    5af8:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5afc:	strb.w	r1, [r3, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b00:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    5b02:	strb.w	r6, [r3, #1069]	; 0x42d
    5b06:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b0a:	str.w	r7, [r3, #1056]	; 0x420
      _s = s;
      _b = b;
    5b0e:	strb.w	r6, [r3, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b12:	movs	r6, #128	; 0x80
      _s = s;
    5b14:	strb.w	lr, [r3, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b18:	str.w	r6, [r3, #1080]	; 0x438
    5b1c:	movs	r6, #123	; 0x7b
      _s = s;
    5b1e:	strb.w	lr, [r3, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b22:	str.w	r6, [r3, #1088]	; 0x440
      _s = s;
      _b = b;
    5b26:	mvn.w	r6, #50	; 0x32
    5b2a:	strb.w	r8, [r3, #1085]	; 0x43d
    5b2e:	strb.w	r6, [r3, #1093]	; 0x445
    5b32:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b36:	str.w	r1, [r3, #1096]	; 0x448
      _s = s;
    5b3a:	mov.w	r1, #4294967295
      _b = b;
    5b3e:	strb.w	r6, [r3, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b42:	movs	r6, #159	; 0x9f
    5b44:	str.w	r5, [r3, #1128]	; 0x468
    5b48:	str.w	r6, [r3, #1104]	; 0x450
      _s = s;
    5b4c:	mvn.w	r6, #95	; 0x5f
    5b50:	strb.w	r5, [r3, #1132]	; 0x46c
    5b54:	strb.w	r6, [r3, #1108]	; 0x454
      _b = b;
    5b58:	mvn.w	r6, #69	; 0x45
    5b5c:	strb.w	r5, [r3, #1133]	; 0x46d
    5b60:	strb.w	r6, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b64:	movs	r6, #145	; 0x91
    5b66:	str.w	r5, [r3, #1136]	; 0x470
    5b6a:	str.w	r6, [r3, #1112]	; 0x458
      _s = s;
      _b = b;
    5b6e:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b72:	strb.w	r5, [r3, #1140]	; 0x474
      _b = b;
    5b76:	strb.w	r6, [r3, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b7a:	mov.w	r6, #5
    5b7e:	strb.w	r6, [r3, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b82:	movs	r6, #65	; 0x41
    5b84:	str.w	r6, [r3, #1072]	; 0x430
      _s = s;
    5b88:	mvn.w	r6, #76	; 0x4c
    5b8c:	strb.w	r6, [r3, #1092]	; 0x444
    5b90:	mov.w	r6, #68	; 0x44
    5b94:	strb.w	r6, [r3, #1116]	; 0x45c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b98:	movs	r6, #150	; 0x96
    5b9a:	str.w	r6, [r3, #1120]	; 0x460
      _s = s;
      _b = b;
    5b9e:	mov.w	r6, #96	; 0x60
    5ba2:	strb.w	r6, [r3, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ba6:	movs	r6, #40	; 0x28
      _s = s;
      _b = b;
    5ba8:	strb.w	r5, [r3, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bac:	str.w	r6, [r3, #1168]	; 0x490
      _s = s;
    5bb0:	mvn.w	r6, #104	; 0x68
    5bb4:	strb.w	r1, [r3, #1196]	; 0x4ac
    5bb8:	strb.w	r6, [r3, #1172]	; 0x494
      _b = b;
    5bbc:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bc0:	strb.w	lr, [r3, #1204]	; 0x4b4
      _b = b;
    5bc4:	strb.w	r6, [r3, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bc8:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bcc:	str.w	r5, [r3, #1144]	; 0x478
      _s = s;
    5bd0:	strb.w	r6, [r3, #1180]	; 0x49c
      _b = b;
    5bd4:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bd8:	strb.w	r5, [r3, #1148]	; 0x47c
      _b = b;
    5bdc:	strb.w	r6, [r3, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be0:	movs	r6, #100	; 0x64
      _s = s;
      _b = b;
    5be2:	strb.w	r5, [r3, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be6:	str.w	r6, [r3, #1184]	; 0x4a0
      _s = s;
      _b = b;
    5bea:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bee:	str.w	r5, [r3, #1152]	; 0x480
      _s = s;
      _b = b;
    5bf2:	strb.w	r6, [r3, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bf6:	movs	r6, #168	; 0xa8
      _s = s;
    5bf8:	strb.w	r5, [r3, #1156]	; 0x484
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bfc:	str.w	r6, [r3, #1192]	; 0x4a8
      _s = s;
      _b = b;
    5c00:	mov.w	r6, #123	; 0x7b
    5c04:	strb.w	r5, [r3, #1157]	; 0x485
    5c08:	strb.w	r6, [r3, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c0c:	movs	r6, #170	; 0xaa
    5c0e:	str.w	r5, [r3, #1160]	; 0x488
    5c12:	str.w	r6, [r3, #1200]	; 0x4b0
      _s = s;
      _b = b;
    5c16:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c1a:	strb.w	r5, [r3, #1164]	; 0x48c
      _b = b;
    5c1e:	strb.w	r6, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c22:	movs	r6, #151	; 0x97
      _s = s;
      _b = b;
    5c24:	strb.w	r5, [r3, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c28:	mov	r1, r6
    5c2a:	str.w	r6, [r3, #1208]	; 0x4b8
      _s = s;
    5c2e:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c32:	str.w	r1, [r3, #1224]	; 0x4c8
      _s = s;
    5c36:	mov.w	r1, #4294967295
    5c3a:	strb.w	r6, [r3, #1212]	; 0x4bc
      _b = b;
    5c3e:	mvn.w	r6, #117	; 0x75
    5c42:	strb.w	r6, [r3, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c46:	mov.w	r6, #106	; 0x6a
    5c4a:	strb.w	r6, [r3, #1220]	; 0x4c4
      _b = b;
    5c4e:	mvn.w	r6, #17
    5c52:	strb.w	r6, [r3, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c56:	mov.w	r6, #101	; 0x65
    5c5a:	strb.w	r6, [r3, #1228]	; 0x4cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c5e:	movs	r6, #38	; 0x26
    5c60:	str.w	r6, [r3, #1176]	; 0x498
      _s = s;
    5c64:	mov.w	r6, #59	; 0x3b
    5c68:	strb.w	r6, [r3, #1188]	; 0x4a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c6c:	movs	r6, #135	; 0x87
    5c6e:	str.w	r6, [r3, #1216]	; 0x4c0
      _s = s;
      _b = b;
    5c72:	mvn.w	r6, #18
    5c76:	strb.w	r6, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c7a:	movs	r6, #155	; 0x9b
      _s = s;
    5c7c:	strb.w	r1, [r3, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c80:	str.w	r6, [r3, #1232]	; 0x4d0
      _s = s;
    5c84:	mvn.w	r6, #91	; 0x5b
    5c88:	strb.w	r1, [r3, #1260]	; 0x4ec
    5c8c:	mov.w	r1, #4294967295
    5c90:	strb.w	r6, [r3, #1236]	; 0x4d4
      _b = b;
    5c94:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c98:	strb.w	r1, [r3, #1284]	; 0x504
    5c9c:	mvn.w	r1, #2
      _b = b;
    5ca0:	strb.w	r6, [r3, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ca4:	mvn.w	r6, #40	; 0x28
    5ca8:	strb.w	r1, [r3, #1292]	; 0x50c
    5cac:	mov.w	r1, #4294967295
    5cb0:	strb.w	r6, [r3, #1244]	; 0x4dc
      _b = b;
    5cb4:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5cb8:	strb.w	r1, [r3, #1300]	; 0x514
      _b = b;
    5cbc:	strb.w	r6, [r3, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cc0:	movs	r6, #127	; 0x7f
    5cc2:	str.w	r7, [r3, #1256]	; 0x4e8
    5cc6:	str.w	r6, [r3, #1248]	; 0x4e0
      _s = s;
      _b = b;
    5cca:	mvn.w	r6, #108	; 0x6c
    5cce:	strb.w	r6, [r3, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cd2:	movs	r6, #100	; 0x64
    5cd4:	str.w	r6, [r3, #1264]	; 0x4f0
      _s = s;
    5cd8:	mvn.w	r6, #6
    5cdc:	strb.w	r6, [r3, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ce0:	movs	r6, #96	; 0x60
    5ce2:	str.w	r6, [r3, #1272]	; 0x4f8
      _s = s;
    5ce6:	mvn.w	r6, #26
    5cea:	strb.w	r6, [r3, #1276]	; 0x4fc
      _b = b;
    5cee:	mvn.w	r6, #41	; 0x29
    5cf2:	strb.w	r6, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cf6:	movs	r6, #135	; 0x87
    5cf8:	str.w	r6, [r3, #1280]	; 0x500
      _s = s;
      _b = b;
    5cfc:	mvn.w	r6, #75	; 0x4b
    5d00:	strb.w	r6, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d04:	movs	r6, #139	; 0x8b
    5d06:	str.w	r6, [r3, #1288]	; 0x508
    5d0a:	movs	r6, #152	; 0x98
    5d0c:	str.w	r6, [r3, #1296]	; 0x510
      _s = s;
      _b = b;
    5d10:	mvn.w	r6, #88	; 0x58
    5d14:	strb.w	r6, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d18:	movs	r6, #165	; 0xa5
    5d1a:	mov	r1, r6
    5d1c:	str.w	r6, [r3, #1304]	; 0x518
      _s = s;
    5d20:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d24:	str.w	r1, [r3, #1312]	; 0x520
      _s = s;
      _b = b;
    5d28:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d2c:	strb.w	r6, [r3, #1308]	; 0x51c
      _b = b;
    5d30:	mvn.w	r6, #55	; 0x37
    5d34:	strb.w	r6, [r3, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d38:	mov.w	r6, #83	; 0x53
    5d3c:	strb.w	r6, [r3, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d40:	movs	r6, #143	; 0x8f
    5d42:	str.w	r6, [r3, #1240]	; 0x4d8
      _s = s;
      _b = b;
    5d46:	mov.w	r6, #91	; 0x5b
    5d4a:	strb.w	r6, [r3, #1253]	; 0x4e5
    5d4e:	mvn.w	r6, #53	; 0x35
    5d52:	strb.w	r6, [r3, #1269]	; 0x4f5
    5d56:	strb.w	r6, [r3, #1293]	; 0x50d
    5d5a:	mvn.w	r6, #77	; 0x4d
    5d5e:	strb.w	r6, [r3, #1317]	; 0x525
    5d62:	mov.w	r6, #71	; 0x47
    5d66:	strb.w	r1, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d6a:	mov.w	r1, #4294967295
      _b = b;
    5d6e:	strb.w	r6, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d72:	mvn.w	r6, #94	; 0x5e
    5d76:	strb.w	r1, [r3, #1396]	; 0x574
    5d7a:	mvn.w	r1, #2
    5d7e:	strb.w	r6, [r3, #1372]	; 0x55c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d82:	movs	r6, #27
      _s = s;
    5d84:	strb.w	r1, [r3, #1404]	; 0x57c
    5d88:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d8c:	str.w	r6, [r3, #1376]	; 0x560
      _s = s;
    5d90:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d94:	str.w	r5, [r3, #1320]	; 0x528
      _s = s;
    5d98:	strb.w	r6, [r3, #1380]	; 0x564
      _b = b;
    5d9c:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5da0:	strb.w	r5, [r3, #1324]	; 0x52c
      _b = b;
    5da4:	strb.w	r6, [r3, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5da8:	movs	r6, #155	; 0x9b
    5daa:	str.w	r5, [r3, #1328]	; 0x530
    5dae:	str.w	r6, [r3, #1384]	; 0x568
      _s = s;
      _b = b;
    5db2:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5db6:	strb.w	r5, [r3, #1332]	; 0x534
      _b = b;
    5dba:	strb.w	r6, [r3, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dbe:	movs	r6, #170	; 0xaa
      _s = s;
      _b = b;
    5dc0:	strb.w	r5, [r3, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dc4:	str.w	r6, [r3, #1392]	; 0x570
      _s = s;
      _b = b;
    5dc8:	mov.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dcc:	str.w	r5, [r3, #1336]	; 0x538
      _s = s;
      _b = b;
    5dd0:	strb.w	r6, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dd4:	movs	r6, #168	; 0xa8
      _s = s;
    5dd6:	strb.w	r5, [r3, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dda:	str.w	r6, [r3, #1400]	; 0x578
    5dde:	movs	r6, #41	; 0x29
      _s = s;
      _b = b;
    5de0:	strb.w	r5, [r3, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5de4:	str.w	r6, [r3, #1368]	; 0x558
      _s = s;
    5de8:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dec:	str.w	r5, [r3, #1344]	; 0x540
      _s = s;
    5df0:	strb.w	r6, [r3, #1388]	; 0x56c
      _b = b;
    5df4:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5df8:	strb.w	r5, [r3, #1348]	; 0x544
      _b = b;
    5dfc:	strb.w	r5, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e00:	str.w	r5, [r3, #1352]	; 0x548
      _s = s;
    5e04:	strb.w	r5, [r3, #1356]	; 0x54c
      _b = b;
    5e08:	strb.w	r5, [r3, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e0c:	str.w	r5, [r3, #1360]	; 0x550
      _s = s;
    5e10:	strb.w	r5, [r3, #1364]	; 0x554
      _b = b;
    5e14:	strb.w	r5, [r3, #1365]	; 0x555
    5e18:	strb.w	r6, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e1c:	movs	r6, #164	; 0xa4
      _s = s;
    5e1e:	strb.w	r1, [r3, #1412]	; 0x584
    5e22:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e26:	str.w	r6, [r3, #1408]	; 0x580
      _s = s;
      _b = b;
    5e2a:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e2e:	strb.w	r1, [r3, #1420]	; 0x58c
    5e32:	mvn.w	r1, #2
      _b = b;
    5e36:	strb.w	r6, [r3, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e3a:	movs	r6, #173	; 0xad
      _s = s;
    5e3c:	strb.w	r1, [r3, #1460]	; 0x5b4
    5e40:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e44:	str.w	r6, [r3, #1416]	; 0x588
      _s = s;
      _b = b;
    5e48:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e4c:	strb.w	r1, [r3, #1468]	; 0x5bc
      _b = b;
    5e50:	strb.w	r6, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e54:	movs	r6, #165	; 0xa5
      _s = s;
    5e56:	strb.w	r1, [r3, #1476]	; 0x5c4
    5e5a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e5e:	str.w	r6, [r3, #1424]	; 0x590
      _s = s;
    5e62:	mvn.w	r6, #27
    5e66:	strb.w	r1, [r3, #1484]	; 0x5cc
    5e6a:	mvn.w	r1, #2
    5e6e:	strb.w	r6, [r3, #1428]	; 0x594
      _b = b;
    5e72:	strb.w	r6, [r3, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e76:	movs	r6, #167	; 0xa7
    5e78:	str.w	r7, [r3, #1456]	; 0x5b0
    5e7c:	str.w	r6, [r3, #1432]	; 0x598
      _s = s;
      _b = b;
    5e80:	mvn.w	r6, #18
    5e84:	strb.w	r8, [r3, #1461]	; 0x5b5
    5e88:	strb.w	r6, [r3, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e8c:	movs	r6, #144	; 0x90
      _s = s;
    5e8e:	strb.w	r1, [r3, #1492]	; 0x5d4
    5e92:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e96:	str.w	r6, [r3, #1440]	; 0x5a0
      _s = s;
    5e9a:	mvn.w	r6, #75	; 0x4b
    5e9e:	strb.w	r0, [r3, #1436]	; 0x59c
    5ea2:	strb.w	r6, [r3, #1444]	; 0x5a4
    5ea6:	mvn.w	r6, #37	; 0x25
    5eaa:	strb.w	r6, [r3, #1452]	; 0x5ac
      _b = b;
    5eae:	mvn.w	r6, #57	; 0x39
    5eb2:	strb.w	r6, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eb6:	movs	r6, #127	; 0x7f
    5eb8:	str.w	r6, [r3, #1464]	; 0x5b8
      _s = s;
      _b = b;
    5ebc:	mvn.w	r6, #112	; 0x70
    5ec0:	strb.w	r6, [r3, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ec4:	movs	r6, #133	; 0x85
    5ec6:	str.w	r6, [r3, #1480]	; 0x5c8
    5eca:	movs	r6, #148	; 0x94
    5ecc:	str.w	r6, [r3, #1488]	; 0x5d0
      _s = s;
      _b = b;
    5ed0:	mvn.w	r6, #73	; 0x49
    5ed4:	strb.w	r6, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ed8:	movs	r6, #119	; 0x77
    5eda:	str.w	r6, [r3, #1448]	; 0x5a8
      _s = s;
      _b = b;
    5ede:	mov.w	r6, #111	; 0x6f
    5ee2:	strb.w	r6, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ee6:	movs	r6, #126	; 0x7e
    5ee8:	str.w	r6, [r3, #1472]	; 0x5c0
      _s = s;
      _b = b;
    5eec:	mvn.w	r6, #92	; 0x5c
    5ef0:	strb.w	r6, [r3, #1485]	; 0x5cd
    5ef4:	mvn.w	r6, #117	; 0x75
    5ef8:	strb.w	r6, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5efc:	movs	r6, #162	; 0xa2
      _s = s;
    5efe:	strb.w	r1, [r3, #1500]	; 0x5dc
    5f02:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f06:	str.w	r6, [r3, #1496]	; 0x5d8
      _s = s;
      _b = b;
    5f0a:	mov.w	r6, #119	; 0x77
    5f0e:	strb.w	lr, [r3, #1573]	; 0x625
    5f12:	strb.w	r6, [r3, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f16:	movs	r6, #167	; 0xa7
    5f18:	str.w	r5, [r3, #1520]	; 0x5f0
    5f1c:	str.w	r6, [r3, #1504]	; 0x5e0
      _s = s;
      _b = b;
    5f20:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f24:	strb.w	r5, [r3, #1524]	; 0x5f4
      _b = b;
    5f28:	strb.w	r6, [r3, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f2c:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    5f2e:	strb.w	r5, [r3, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f32:	str.w	r6, [r3, #1512]	; 0x5e8
      _s = s;
      _b = b;
    5f36:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f3a:	str.w	r5, [r3, #1528]	; 0x5f8
      _s = s;
      _b = b;
    5f3e:	strb.w	r6, [r3, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f42:	mvn.w	r6, #50	; 0x32
    5f46:	strb.w	r5, [r3, #1532]	; 0x5fc
    5f4a:	strb.w	r6, [r3, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f4e:	movs	r6, #31
      _s = s;
      _b = b;
    5f50:	strb.w	r5, [r3, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f54:	str.w	r6, [r3, #1568]	; 0x620
      _s = s;
    5f58:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f5c:	str.w	r5, [r3, #1536]	; 0x600
      _s = s;
    5f60:	strb.w	r6, [r3, #1572]	; 0x624
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f64:	movs	r6, #158	; 0x9e
      _s = s;
    5f66:	strb.w	r5, [r3, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f6a:	str.w	r6, [r3, #1576]	; 0x628
      _s = s;
    5f6e:	mov.w	r6, #67	; 0x43
      _b = b;
    5f72:	strb.w	r5, [r3, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f76:	strb.w	r6, [r3, #1508]	; 0x5e4
    5f7a:	mov.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f7e:	str.w	r5, [r3, #1544]	; 0x608
      _s = s;
    5f82:	strb.w	r6, [r3, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f86:	movs	r6, #45	; 0x2d
      _s = s;
    5f88:	strb.w	r5, [r3, #1548]	; 0x60c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f8c:	str.w	r6, [r3, #1560]	; 0x618
      _s = s;
    5f90:	mov.w	r6, #70	; 0x46
      _b = b;
    5f94:	strb.w	r5, [r3, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f98:	strb.w	r6, [r3, #1580]	; 0x62c
      _b = b;
    5f9c:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fa0:	str.w	r5, [r3, #1552]	; 0x610
      _s = s;
    5fa4:	strb.w	r5, [r3, #1556]	; 0x614
      _b = b;
    5fa8:	strb.w	r5, [r3, #1557]	; 0x615
    5fac:	strb.w	sl, [r3, #1565]	; 0x61d
    5fb0:	strb.w	r6, [r3, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fb4:	movs	r6, #174	; 0xae
      _s = s;
    5fb6:	strb.w	r1, [r3, #1588]	; 0x634
    5fba:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fbe:	str.w	r6, [r3, #1584]	; 0x630
      _s = s;
      _b = b;
    5fc2:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fc6:	strb.w	r1, [r3, #1596]	; 0x63c
    5fca:	mov.w	r1, #4294967295
      _b = b;
    5fce:	strb.w	r6, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fd2:	movs	r6, #145	; 0x91
      _s = s;
    5fd4:	strb.w	r1, [r3, #1604]	; 0x644
    5fd8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fdc:	str.w	r6, [r3, #1592]	; 0x638
      _s = s;
      _b = b;
    5fe0:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fe4:	strb.w	r1, [r3, #1652]	; 0x674
    5fe8:	mov.w	r1, #4294967295
      _b = b;
    5fec:	strb.w	r6, [r3, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ff0:	movs	r6, #139	; 0x8b
      _s = s;
    5ff2:	strb.w	r1, [r3, #1660]	; 0x67c
    5ff6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ffa:	str.w	r6, [r3, #1608]	; 0x648
      _s = s;
    5ffe:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6002:	str.w	r7, [r3, #1600]	; 0x640
      _s = s;
    6006:	strb.w	r6, [r3, #1612]	; 0x64c
      _b = b;
    600a:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    600e:	str.w	ip, [r3, #1624]	; 0x658
      _s = s;
      _b = b;
    6012:	strb.w	r6, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6016:	mvn.w	r6, #94	; 0x5e
      _b = b;
    601a:	strb.w	r0, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    601e:	strb.w	r6, [r3, #1620]	; 0x654
      _b = b;
    6022:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6026:	strb.w	r1, [r3, #1668]	; 0x684
    602a:	mvn.w	r1, #2
      _b = b;
    602e:	strb.w	r6, [r3, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6032:	mvn.w	r6, #103	; 0x67
      _b = b;
    6036:	strb.w	sl, [r3, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    603a:	strb.w	r6, [r3, #1628]	; 0x65c
      _b = b;
    603e:	mvn.w	r6, #18
    6042:	strb.w	r6, [r3, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6046:	movs	r6, #142	; 0x8e
    6048:	str.w	r6, [r3, #1632]	; 0x660
      _s = s;
    604c:	mvn.w	r6, #56	; 0x38
    6050:	strb.w	r6, [r3, #1636]	; 0x664
    6054:	mvn.w	r6, #66	; 0x42
    6058:	strb.w	r6, [r3, #1644]	; 0x66c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    605c:	movs	r6, #126	; 0x7e
    605e:	str.w	r6, [r3, #1656]	; 0x678
    6062:	movs	r6, #124	; 0x7c
    6064:	str.w	r6, [r3, #1664]	; 0x680
    6068:	movs	r6, #89	; 0x59
    606a:	str.w	r6, [r3, #1616]	; 0x650
      _s = s;
      _b = b;
    606e:	mov.w	r6, #107	; 0x6b
    6072:	strb.w	r6, [r3, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6076:	movs	r6, #114	; 0x72
    6078:	str.w	r6, [r3, #1640]	; 0x668
    607c:	movs	r6, #129	; 0x81
    607e:	str.w	r6, [r3, #1648]	; 0x670
      _s = s;
      _b = b;
    6082:	mvn.w	r6, #34	; 0x22
    6086:	strb.w	r6, [r3, #1653]	; 0x675
    608a:	mvn.w	r6, #70	; 0x46
    608e:	strb.w	r6, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6092:	movs	r6, #142	; 0x8e
      _s = s;
      _b = b;
    6094:	strb.w	r7, [r3, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6098:	str.w	r6, [r3, #1672]	; 0x688
      _s = s;
      _b = b;
    609c:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60a0:	strb.w	r1, [r3, #1684]	; 0x694
    60a4:	mov.w	r1, #4294967295
      _b = b;
    60a8:	strb.w	r6, [r3, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60ac:	movs	r6, #144	; 0x90
      _s = s;
    60ae:	strb.w	r1, [r3, #1692]	; 0x69c
    60b2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60b6:	str.w	r6, [r3, #1680]	; 0x690
      _s = s;
      _b = b;
    60ba:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60be:	strb.w	lr, [r3, #1676]	; 0x68c
      _b = b;
    60c2:	strb.w	r6, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60c6:	movs	r6, #150	; 0x96
      _s = s;
    60c8:	strb.w	r1, [r3, #1716]	; 0x6b4
    60cc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60d0:	str.w	r6, [r3, #1688]	; 0x698
      _s = s;
      _b = b;
    60d4:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60d8:	strb.w	fp, [r3, #1700]	; 0x6a4
      _b = b;
    60dc:	strb.w	r6, [r3, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60e0:	movs	r6, #166	; 0xa6
    60e2:	str.w	r5, [r3, #1720]	; 0x6b8
    60e6:	str.w	r6, [r3, #1696]	; 0x6a0
    60ea:	movs	r6, #168	; 0xa8
      _s = s;
    60ec:	strb.w	r5, [r3, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f0:	str.w	r6, [r3, #1704]	; 0x6a8
      _s = s;
    60f4:	mvn.w	r6, #119	; 0x77
      _b = b;
    60f8:	strb.w	r5, [r3, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60fc:	strb.w	r6, [r3, #1708]	; 0x6ac
      _b = b;
    6100:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6104:	str.w	r5, [r3, #1728]	; 0x6c0
      _s = s;
      _b = b;
    6108:	strb.w	r6, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    610c:	movs	r6, #171	; 0xab
      _s = s;
    610e:	strb.w	r5, [r3, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6112:	str.w	r6, [r3, #1712]	; 0x6b0
      _s = s;
      _b = b;
    6116:	mov.w	r6, #108	; 0x6c
    611a:	strb.w	r5, [r3, #1733]	; 0x6c5
    611e:	strb.w	r6, [r3, #1717]	; 0x6b5
    6122:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6126:	str.w	r5, [r3, #1736]	; 0x6c8
      _s = s;
      _b = b;
    612a:	strb.w	r6, [r3, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    612e:	movs	r6, #46	; 0x2e
      _s = s;
    6130:	strb.w	r5, [r3, #1740]	; 0x6cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6134:	str.w	r6, [r3, #1752]	; 0x6d8
      _s = s;
    6138:	mvn.w	r6, #20
      _b = b;
    613c:	strb.w	r5, [r3, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6140:	strb.w	r6, [r3, #1756]	; 0x6dc
      _b = b;
    6144:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6148:	str.w	r5, [r3, #1744]	; 0x6d0
      _s = s;
    614c:	strb.w	r5, [r3, #1748]	; 0x6d4
      _b = b;
    6150:	strb.w	r5, [r3, #1749]	; 0x6d5
    6154:	strb.w	r6, [r3, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6158:	movs	r6, #83	; 0x53
      _s = s;
    615a:	strb.w	r1, [r3, #1780]	; 0x6f4
    615e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6162:	str.w	r6, [r3, #1760]	; 0x6e0
      _s = s;
    6166:	mov.w	r6, #45	; 0x2d
    616a:	strb.w	r1, [r3, #1788]	; 0x6fc
    616e:	mvn.w	r1, #2
    6172:	strb.w	r6, [r3, #1764]	; 0x6e4
      _b = b;
    6176:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    617a:	strb.w	r1, [r3, #1796]	; 0x704
    617e:	mvn.w	r1, #2
      _b = b;
    6182:	strb.w	r6, [r3, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6186:	movs	r6, #162	; 0xa2
      _s = s;
    6188:	strb.w	r1, [r3, #1804]	; 0x70c
    618c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6190:	str.w	r6, [r3, #1768]	; 0x6e8
      _s = s;
    6194:	mvn.w	r6, #7
    6198:	strb.w	r6, [r3, #1772]	; 0x6ec
      _b = b;
    619c:	mov.w	r6, #119	; 0x77
    61a0:	strb.w	r6, [r3, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61a4:	movs	r6, #159	; 0x9f
    61a6:	str.w	r6, [r3, #1776]	; 0x6f0
      _s = s;
      _b = b;
    61aa:	mov.w	r6, #59	; 0x3b
    61ae:	strb.w	r6, [r3, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61b2:	movs	r6, #106	; 0x6a
    61b4:	str.w	r6, [r3, #1784]	; 0x6f8
    61b8:	movs	r6, #100	; 0x64
    61ba:	str.w	r6, [r3, #1792]	; 0x700
      _s = s;
      _b = b;
    61be:	mvn.w	r6, #71	; 0x47
    61c2:	strb.w	r6, [r3, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61c6:	movs	r6, #94	; 0x5e
    61c8:	str.w	r6, [r3, #1800]	; 0x708
      _s = s;
      _b = b;
    61cc:	mvn.w	r6, #45	; 0x2d
    61d0:	strb.w	r6, [r3, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61d4:	movs	r6, #144	; 0x90
    61d6:	str.w	r6, [r3, #1808]	; 0x710
      _s = s;
    61da:	mvn.w	r6, #122	; 0x7a
    61de:	strb.w	r6, [r3, #1812]	; 0x714
      _b = b;
    61e2:	mvn.w	r6, #37	; 0x25
    61e6:	strb.w	r6, [r3, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61ea:	mvn.w	r6, #97	; 0x61
    61ee:	strb.w	r6, [r3, #1820]	; 0x71c
      _b = b;
    61f2:	mvn.w	r6, #11
    61f6:	strb.w	r6, [r3, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61fa:	movs	r6, #92	; 0x5c
    61fc:	str.w	r6, [r3, #1824]	; 0x720
      _s = s;
    6200:	mvn.w	r6, #49	; 0x31
    6204:	strb.w	r6, [r3, #1828]	; 0x724
      _b = b;
    6208:	mvn.w	r6, #15
    620c:	strb.w	r6, [r3, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6210:	movs	r6, #93	; 0x5d
    6212:	str.w	r6, [r3, #1832]	; 0x728
      _s = s;
      _b = b;
    6216:	mvn.w	r6, #42	; 0x2a
    621a:	strb.w	r6, [r3, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    621e:	movs	r6, #131	; 0x83
    6220:	str.w	r6, [r3, #1840]	; 0x730
      _s = s;
    6224:	mvn.w	r6, #19
    6228:	strb.w	r6, [r3, #1844]	; 0x734
      _b = b;
    622c:	mvn.w	r6, #62	; 0x3e
    6230:	strb.w	r6, [r3, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6234:	movs	r6, #140	; 0x8c
    6236:	str.w	r6, [r3, #1816]	; 0x718
      _s = s;
    623a:	mvn.w	r6, #52	; 0x34
    623e:	strb.w	r6, [r3, #1836]	; 0x72c
      _b = b;
    6242:	mvn.w	r6, #67	; 0x43
    6246:	strb.w	r6, [r3, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    624a:	movs	r6, #128	; 0x80
      _s = s;
    624c:	strb.w	r1, [r3, #1852]	; 0x73c
    6250:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6254:	str.w	r6, [r3, #1848]	; 0x738
      _s = s;
      _b = b;
    6258:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    625c:	strb.w	r1, [r3, #1860]	; 0x744
    6260:	mov.w	r1, #4294967295
      _b = b;
    6264:	strb.w	r6, [r3, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6268:	movs	r6, #138	; 0x8a
      _s = s;
    626a:	strb.w	r1, [r3, #1868]	; 0x74c
    626e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6272:	str.w	r6, [r3, #1856]	; 0x740
      _s = s;
      _b = b;
    6276:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    627a:	strb.w	r1, [r3, #1876]	; 0x754
    627e:	mov.w	r1, #4294967295
      _b = b;
    6282:	strb.w	r6, [r3, #1861]	; 0x745
    6286:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    628a:	strb.w	r1, [r3, #1884]	; 0x75c
    628e:	mov.w	r1, #4294967295
      _b = b;
    6292:	strb.w	r6, [r3, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6296:	movs	r6, #148	; 0x94
      _s = s;
    6298:	strb.w	r1, [r3, #1892]	; 0x764
    629c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62a0:	str.w	r6, [r3, #1872]	; 0x750
      _s = s;
      _b = b;
    62a4:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62a8:	strb.w	r1, [r3, #1900]	; 0x76c
    62ac:	mov.w	r1, #4294967295
      _b = b;
    62b0:	strb.w	r6, [r3, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62b4:	movs	r6, #150	; 0x96
    62b6:	str.w	ip, [r3, #1864]	; 0x748
    62ba:	str.w	r6, [r3, #1880]	; 0x758
    62be:	movs	r6, #154	; 0x9a
      _s = s;
    62c0:	strb.w	r1, [r3, #1908]	; 0x774
    62c4:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62c8:	str.w	r6, [r3, #1888]	; 0x760
      _s = s;
      _b = b;
    62cc:	mvn.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62d0:	str.w	r5, [r3, #1912]	; 0x778
      _s = s;
      _b = b;
    62d4:	strb.w	r6, [r3, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62d8:	movs	r6, #168	; 0xa8
      _s = s;
    62da:	strb.w	r5, [r3, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62de:	str.w	r6, [r3, #1896]	; 0x768
      _s = s;
      _b = b;
    62e2:	mov.w	r6, #112	; 0x70
    62e6:	strb.w	r5, [r3, #1917]	; 0x77d
    62ea:	strb.w	r6, [r3, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ee:	movs	r6, #168	; 0xa8
    62f0:	str.w	r5, [r3, #1920]	; 0x780
    62f4:	str.w	r6, [r3, #1904]	; 0x770
      _s = s;
      _b = b;
    62f8:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62fc:	strb.w	r5, [r3, #1924]	; 0x784
      _b = b;
    6300:	strb.w	r6, [r3, #1909]	; 0x775
    6304:	mvn.w	r6, #51	; 0x33
    6308:	strb.w	r5, [r3, #1925]	; 0x785
    630c:	strb.w	r6, [r3, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6310:	movs	r6, #50	; 0x32
    6312:	str.w	r5, [r3, #1928]	; 0x788
      _s = s;
    6316:	strb.w	r5, [r3, #1932]	; 0x78c
      _b = b;
    631a:	strb.w	r5, [r3, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    631e:	str.w	r6, [r3, #1944]	; 0x798
      _s = s;
      _b = b;
    6322:	mvn.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6326:	strb.w	r0, [r3, #1948]	; 0x79c
      _b = b;
    632a:	strb.w	r6, [r3, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    632e:	movs	r6, #108	; 0x6c
      _s = s;
    6330:	strb.w	r1, [r3, #1980]	; 0x7bc
    6334:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6338:	str.w	r6, [r3, #1952]	; 0x7a0
      _s = s;
    633c:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6340:	str.w	r5, [r3, #1936]	; 0x790
      _s = s;
    6344:	strb.w	r6, [r3, #1956]	; 0x7a4
      _b = b;
    6348:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    634c:	strb.w	r5, [r3, #1940]	; 0x794
      _b = b;
    6350:	strb.w	r6, [r3, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6354:	movs	r6, #126	; 0x7e
      _s = s;
      _b = b;
    6356:	strb.w	r5, [r3, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    635a:	str.w	r6, [r3, #1960]	; 0x7a8
      _s = s;
    635e:	mvn.w	r6, #5
    6362:	strb.w	r6, [r3, #1964]	; 0x7ac
      _b = b;
    6366:	mov.w	r6, #108	; 0x6c
    636a:	strb.w	r6, [r3, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    636e:	movs	r6, #119	; 0x77
    6370:	str.w	r6, [r3, #1968]	; 0x7b0
      _s = s;
    6374:	mvn.w	r6, #5
    6378:	strb.w	r6, [r3, #1972]	; 0x7b4
      _b = b;
    637c:	mvn.w	r6, #96	; 0x60
    6380:	strb.w	r6, [r3, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6384:	movs	r6, #101	; 0x65
    6386:	str.w	r6, [r3, #1976]	; 0x7b8
      _s = s;
      _b = b;
    638a:	mvn.w	r6, #72	; 0x48
    638e:	strb.w	r6, [r3, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6392:	mvn.w	r6, #7
    6396:	strb.w	r6, [r3, #1988]	; 0x7c4
      _b = b;
    639a:	mvn.w	r6, #52	; 0x34
    639e:	strb.w	r6, [r3, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63a2:	movs	r6, #97	; 0x61
    63a4:	str.w	r6, [r3, #1992]	; 0x7c8
      _s = s;
    63a8:	mvn.w	r6, #41	; 0x29
    63ac:	strb.w	r6, [r3, #1996]	; 0x7cc
      _b = b;
    63b0:	mvn.w	r6, #37	; 0x25
    63b4:	strb.w	r6, [r3, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63b8:	movs	r6, #96	; 0x60
    63ba:	str.w	r6, [r3, #2000]	; 0x7d0
      _s = s;
    63be:	mvn.w	r6, #23
    63c2:	strb.w	r6, [r3, #2004]	; 0x7d4
      _b = b;
    63c6:	mvn.w	r6, #33	; 0x21
    63ca:	strb.w	r6, [r3, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63ce:	movs	r6, #92	; 0x5c
    63d0:	str.w	r6, [r3, #2008]	; 0x7d8
      _s = s;
    63d4:	mvn.w	r6, #25
    63d8:	strb.w	r6, [r3, #2012]	; 0x7dc
      _b = b;
    63dc:	mvn.w	r6, #49	; 0x31
    63e0:	strb.w	r6, [r3, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63e4:	movs	r6, #88	; 0x58
    63e6:	str.w	r6, [r3, #2016]	; 0x7e0
      _s = s;
    63ea:	mvn.w	r6, #21
    63ee:	strb.w	r6, [r3, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63f2:	movs	r6, #80	; 0x50
    63f4:	str.w	r6, [r3, #1984]	; 0x7c0
      _s = s;
      _b = b;
    63f8:	mvn.w	r6, #28
    63fc:	strb.w	r6, [r3, #2021]	; 0x7e5
    6400:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6404:	strb.w	r1, [r3, #2036]	; 0x7f4
    6408:	mov.w	r1, #4294967295
      _b = b;
    640c:	strb.w	r6, [r3, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6410:	movs	r6, #137	; 0x89
      _s = s;
    6412:	strb.w	r1, [r3, #2044]	; 0x7fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6416:	str.w	r6, [r3, #2032]	; 0x7f0
      _s = s;
      _b = b;
    641a:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    641e:	strb.w	ip, [r3, #2068]	; 0x814
      _b = b;
    6422:	strb.w	r6, [r3, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6426:	movs	r6, #123	; 0x7b
      _s = s;
    6428:	strb.w	sl, [r3, #2028]	; 0x7ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    642c:	str.w	r6, [r3, #2040]	; 0x7f8
      _s = s;
      _b = b;
    6430:	mvn.w	r6, #87	; 0x57
    6434:	strb.w	sl, [r3, #2077]	; 0x81d
    6438:	strb.w	r6, [r3, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    643c:	movs	r6, #148	; 0x94
    643e:	mov	r1, r6
    6440:	str.w	r6, [r3, #2048]	; 0x800
      _s = s;
    6444:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6448:	str.w	r1, [r3, #2056]	; 0x808
      _s = s;
    644c:	mov.w	r1, #4294967295
    6450:	strb.w	r6, [r3, #2052]	; 0x804
      _b = b;
    6454:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6458:	strb.w	r1, [r3, #2084]	; 0x824
    645c:	mov.w	r1, #4294967295
      _b = b;
    6460:	strb.w	r6, [r3, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6464:	mvn.w	r6, #119	; 0x77
    6468:	strb.w	r1, [r3, #2092]	; 0x82c
    646c:	mov.w	r1, #4294967295
    6470:	strb.w	r6, [r3, #2060]	; 0x80c
      _b = b;
    6474:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6478:	strb.w	r1, [r3, #2100]	; 0x834
    647c:	mov.w	r1, #4294967295
      _b = b;
    6480:	strb.w	r6, [r3, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6484:	movs	r6, #150	; 0x96
      _s = s;
    6486:	strb.w	r1, [r3, #2108]	; 0x83c
    648a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    648e:	str.w	r6, [r3, #2064]	; 0x810
      _s = s;
      _b = b;
    6492:	mvn.w	r6, #13
    6496:	strb.w	r6, [r3, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    649a:	movs	r6, #147	; 0x93
    649c:	str.w	r6, [r3, #2072]	; 0x818
      _s = s;
    64a0:	mvn.w	r6, #102	; 0x66
    64a4:	strb.w	r6, [r3, #2076]	; 0x81c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64a8:	movs	r6, #153	; 0x99
    64aa:	str.w	r6, [r3, #2080]	; 0x820
      _s = s;
      _b = b;
    64ae:	mvn.w	r6, #73	; 0x49
    64b2:	strb.w	r6, [r3, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64b6:	movs	r6, #158	; 0x9e
    64b8:	str.w	r6, [r3, #2088]	; 0x828
      _s = s;
      _b = b;
    64bc:	mvn.w	r6, #111	; 0x6f
    64c0:	strb.w	r6, [r3, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64c4:	movs	r6, #164	; 0xa4
    64c6:	str.w	r6, [r3, #2096]	; 0x830
      _s = s;
      _b = b;
    64ca:	mvn.w	r6, #91	; 0x5b
    64ce:	strb.w	r6, [r3, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64d2:	movs	r6, #161	; 0xa1
    64d4:	str.w	r6, [r3, #2104]	; 0x838
    64d8:	movs	r6, #105	; 0x69
    64da:	str.w	r6, [r3, #2024]	; 0x7e8
      _s = s;
      _b = b;
    64de:	mov.w	r6, #76	; 0x4c
    64e2:	strb.w	r6, [r3, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64e6:	movs	r6, #82	; 0x52
      _s = s;
    64e8:	strb.w	r1, [r3, #2156]	; 0x86c
    64ec:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64f0:	str.w	r6, [r3, #2136]	; 0x858
      _s = s;
    64f4:	mov.w	r6, #110	; 0x6e
    64f8:	strb.w	r1, [r3, #2164]	; 0x874
    64fc:	mvn.w	r1, #2
    6500:	strb.w	r6, [r3, #2140]	; 0x85c
      _b = b;
    6504:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6508:	strb.w	r1, [r3, #2172]	; 0x87c
    650c:	mvn.w	r1, #2
      _b = b;
    6510:	strb.w	r6, [r3, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6514:	movs	r6, #147	; 0x93
      _s = s;
    6516:	strb.w	r1, [r3, #2180]	; 0x884
    651a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    651e:	str.w	r6, [r3, #2144]	; 0x860
      _s = s;
    6522:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6526:	str.w	r5, [r3, #2112]	; 0x840
      _s = s;
    652a:	strb.w	r6, [r3, #2148]	; 0x864
      _b = b;
    652e:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6532:	strb.w	r5, [r3, #2116]	; 0x844
      _b = b;
    6536:	strb.w	r6, [r3, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    653a:	movs	r6, #134	; 0x86
      _s = s;
      _b = b;
    653c:	strb.w	r5, [r3, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6540:	str.w	r6, [r3, #2152]	; 0x868
      _s = s;
      _b = b;
    6544:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6548:	str.w	r5, [r3, #2120]	; 0x848
      _s = s;
      _b = b;
    654c:	strb.w	r6, [r3, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6550:	movs	r6, #110	; 0x6e
      _s = s;
    6552:	strb.w	r5, [r3, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6556:	str.w	r6, [r3, #2160]	; 0x870
      _s = s;
      _b = b;
    655a:	mvn.w	r6, #77	; 0x4d
    655e:	strb.w	r5, [r3, #2125]	; 0x84d
    6562:	strb.w	r6, [r3, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6566:	movs	r6, #94	; 0x5e
    6568:	str.w	r5, [r3, #2128]	; 0x850
    656c:	str.w	r6, [r3, #2168]	; 0x878
      _s = s;
      _b = b;
    6570:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6574:	strb.w	r5, [r3, #2132]	; 0x854
      _b = b;
    6578:	strb.w	r6, [r3, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    657c:	movs	r6, #104	; 0x68
      _s = s;
      _b = b;
    657e:	strb.w	r5, [r3, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6582:	str.w	r6, [r3, #2176]	; 0x880
      _s = s;
      _b = b;
    6586:	mvn.w	r6, #53	; 0x35
    658a:	strb.w	r6, [r3, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    658e:	movs	r6, #87	; 0x57
    6590:	str.w	r6, [r3, #2184]	; 0x888
      _s = s;
    6594:	mvn.w	r6, #65	; 0x41
    6598:	strb.w	r6, [r3, #2188]	; 0x88c
      _b = b;
    659c:	mvn.w	r6, #18
    65a0:	strb.w	r6, [r3, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65a4:	movs	r6, #111	; 0x6f
    65a6:	str.w	r6, [r3, #2192]	; 0x890
      _s = s;
    65aa:	mvn.w	r6, #34	; 0x22
    65ae:	strb.w	r6, [r3, #2196]	; 0x894
      _b = b;
    65b2:	mvn.w	r6, #32
    65b6:	strb.w	r6, [r3, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65ba:	movs	r6, #101	; 0x65
      _s = s;
    65bc:	strb.w	r1, [r3, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65c0:	str.w	r6, [r3, #2200]	; 0x898
      _s = s;
    65c4:	mvn.w	r6, #49	; 0x31
    65c8:	strb.w	r1, [r3, #2236]	; 0x8bc
    65cc:	mvn.w	r1, #2
    65d0:	strb.w	r6, [r3, #2204]	; 0x89c
      _b = b;
    65d4:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65d8:	strb.w	r1, [r3, #2244]	; 0x8c4
    65dc:	mov.w	r1, #4294967295
      _b = b;
    65e0:	strb.w	r6, [r3, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65e4:	mvn.w	r6, #54	; 0x36
    65e8:	strb.w	r0, [r3, #2220]	; 0x8ac
    65ec:	strb.w	r6, [r3, #2212]	; 0x8a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65f0:	movs	r6, #96	; 0x60
    65f2:	str.w	r7, [r3, #2232]	; 0x8b8
    65f6:	str.w	r6, [r3, #2216]	; 0x8a8
      _s = s;
      _b = b;
    65fa:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65fe:	strb.w	r1, [r3, #2284]	; 0x8ec
    6602:	mov.w	r1, #4294967295
      _b = b;
    6606:	strb.w	r6, [r3, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    660a:	movs	r6, #131	; 0x83
      _s = s;
      _b = b;
    660c:	strb.w	sl, [r3, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6610:	str.w	r6, [r3, #2224]	; 0x8b0
      _s = s;
      _b = b;
    6614:	mvn.w	r6, #75	; 0x4b
    6618:	strb.w	r6, [r3, #2229]	; 0x8b5
    661c:	mvn.w	r6, #89	; 0x59
    6620:	strb.w	r6, [r3, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6624:	movs	r6, #159	; 0x9f
    6626:	str.w	r6, [r3, #2240]	; 0x8c0
      _s = s;
      _b = b;
    662a:	mvn.w	r6, #44	; 0x2c
    662e:	strb.w	r6, [r3, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6632:	movs	r6, #140	; 0x8c
    6634:	str.w	r6, [r3, #2248]	; 0x8c8
      _s = s;
    6638:	mvn.w	r6, #107	; 0x6b
    663c:	strb.w	r6, [r3, #2252]	; 0x8cc
      _b = b;
    6640:	mvn.w	r6, #11
    6644:	strb.w	r6, [r3, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6648:	movs	r6, #103	; 0x67
    664a:	str.w	r6, [r3, #2256]	; 0x8d0
      _s = s;
      _b = b;
    664e:	mvn.w	r6, #14
    6652:	strb.w	r6, [r3, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6656:	movs	r6, #116	; 0x74
    6658:	str.w	r6, [r3, #2264]	; 0x8d8
      _s = s;
    665c:	strb.w	r6, [r3, #2268]	; 0x8dc
      _b = b;
    6660:	mvn.w	r6, #16
    6664:	strb.w	r6, [r3, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6668:	movs	r6, #159	; 0x9f
    666a:	str.w	r6, [r3, #2272]	; 0x8e0
      _s = s;
    666e:	mvn.w	r6, #65	; 0x41
    6672:	strb.w	r6, [r3, #2276]	; 0x8e4
      _b = b;
    6676:	mvn.w	r6, #57	; 0x39
    667a:	strb.w	r6, [r3, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    667e:	movs	r6, #158	; 0x9e
    6680:	str.w	r6, [r3, #2280]	; 0x8e8
    6684:	movs	r6, #98	; 0x62
    6686:	str.w	r6, [r3, #2208]	; 0x8a0
      _s = s;
    668a:	strb.w	r6, [r3, #2260]	; 0x8d4
      _b = b;
    668e:	mvn.w	r6, #50	; 0x32
    6692:	strb.w	r6, [r3, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6696:	movs	r6, #150	; 0x96
      _s = s;
    6698:	strb.w	r1, [r3, #2292]	; 0x8f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    669c:	str.w	r6, [r3, #2288]	; 0x8f0
      _s = s;
      _b = b;
    66a0:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66a4:	strb.w	r1, [r3, #2300]	; 0x8fc
    66a8:	mov.w	r1, #4294967295
      _b = b;
    66ac:	strb.w	r6, [r3, #2293]	; 0x8f5
    66b0:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66b4:	strb.w	r1, [r3, #2372]	; 0x944
      _b = b;
    66b8:	strb.w	r6, [r3, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66bc:	movs	r6, #166	; 0xa6
      _s = s;
    66be:	strb.w	lr, [r3, #2348]	; 0x92c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66c2:	str.w	r6, [r3, #2328]	; 0x918
      _s = s;
    66c6:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ca:	str.w	r5, [r3, #2304]	; 0x900
      _s = s;
    66ce:	strb.w	r6, [r3, #2332]	; 0x91c
      _b = b;
    66d2:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66d6:	strb.w	r5, [r3, #2308]	; 0x904
      _b = b;
    66da:	strb.w	r6, [r3, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66de:	movs	r6, #153	; 0x99
      _s = s;
      _b = b;
    66e0:	strb.w	r5, [r3, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66e4:	str.w	r6, [r3, #2336]	; 0x920
      _s = s;
      _b = b;
    66e8:	mov.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ec:	str.w	r5, [r3, #2312]	; 0x908
      _s = s;
      _b = b;
    66f0:	strb.w	r6, [r3, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66f4:	movs	r6, #150	; 0x96
      _s = s;
    66f6:	strb.w	r5, [r3, #2316]	; 0x90c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66fa:	str.w	r6, [r3, #2344]	; 0x928
      _s = s;
      _b = b;
    66fe:	mov.w	r6, #88	; 0x58
    6702:	strb.w	r5, [r3, #2317]	; 0x90d
    6706:	strb.w	r6, [r3, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    670a:	movs	r6, #108	; 0x6c
    670c:	str.w	r5, [r3, #2320]	; 0x910
    6710:	str.w	r6, [r3, #2352]	; 0x930
      _s = s;
    6714:	mvn.w	r6, #7
    6718:	strb.w	r5, [r3, #2324]	; 0x914
    671c:	strb.w	r6, [r3, #2356]	; 0x934
      _b = b;
    6720:	mvn.w	r6, #46	; 0x2e
    6724:	strb.w	r5, [r3, #2325]	; 0x915
    6728:	strb.w	r6, [r3, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    672c:	movs	r6, #99	; 0x63
      _s = s;
    672e:	strb.w	fp, [r3, #2340]	; 0x924
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6732:	str.w	r6, [r3, #2360]	; 0x938
      _s = s;
    6736:	mvn.w	r6, #6
    673a:	strb.w	r6, [r3, #2364]	; 0x93c
      _b = b;
    673e:	mvn.w	r6, #36	; 0x24
    6742:	strb.w	r6, [r3, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6746:	movs	r6, #157	; 0x9d
    6748:	str.w	r6, [r3, #2296]	; 0x8f8
    674c:	movs	r6, #125	; 0x7d
    674e:	mov	r1, r6
    6750:	str.w	r6, [r3, #2368]	; 0x940
      _s = s;
      _b = b;
    6754:	mvn.w	r6, #72	; 0x48
    6758:	strb.w	r6, [r3, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    675c:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6760:	str.w	r1, [r3, #2376]	; 0x948
      _s = s;
    6764:	mvn.w	r1, #2
    6768:	strb.w	r6, [r3, #2380]	; 0x94c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    676c:	movs	r6, #122	; 0x7a
      _s = s;
    676e:	strb.w	r1, [r3, #2396]	; 0x95c
    6772:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6776:	str.w	r6, [r3, #2384]	; 0x950
      _s = s;
    677a:	mvn.w	r6, #64	; 0x40
    677e:	strb.w	r1, [r3, #2420]	; 0x974
    6782:	mvn.w	r1, #2
    6786:	strb.w	r6, [r3, #2388]	; 0x954
      _b = b;
    678a:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    678e:	strb.w	r1, [r3, #2428]	; 0x97c
    6792:	mov.w	r1, #4294967295
      _b = b;
    6796:	strb.w	r6, [r3, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    679a:	movs	r6, #138	; 0x8a
      _s = s;
    679c:	strb.w	r1, [r3, #2460]	; 0x99c
    67a0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67a4:	str.w	r6, [r3, #2392]	; 0x958
      _s = s;
      _b = b;
    67a8:	mvn.w	r6, #67	; 0x43
    67ac:	strb.w	sl, [r3, #2413]	; 0x96d
    67b0:	strb.w	r6, [r3, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67b4:	movs	r6, #108	; 0x6c
    67b6:	str.w	r6, [r3, #2400]	; 0x960
      _s = s;
    67ba:	mvn.w	r6, #71	; 0x47
    67be:	strb.w	r6, [r3, #2404]	; 0x964
      _b = b;
    67c2:	mvn.w	r6, #24
    67c6:	strb.w	r6, [r3, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67ca:	movs	r6, #102	; 0x66
    67cc:	str.w	r6, [r3, #2408]	; 0x968
    67d0:	movs	r6, #125	; 0x7d
    67d2:	str.w	r6, [r3, #2416]	; 0x970
      _s = s;
      _b = b;
    67d6:	mvn.w	r6, #57	; 0x39
    67da:	strb.w	r6, [r3, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67de:	movs	r6, #135	; 0x87
    67e0:	str.w	r6, [r3, #2424]	; 0x978
      _s = s;
      _b = b;
    67e4:	mvn.w	r6, #107	; 0x6b
    67e8:	strb.w	r6, [r3, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67ec:	movs	r6, #155	; 0x9b
    67ee:	str.w	r6, [r3, #2432]	; 0x980
      _s = s;
    67f2:	mvn.w	r6, #73	; 0x49
    67f6:	strb.w	r6, [r3, #2436]	; 0x984
      _b = b;
    67fa:	mvn.w	r6, #27
    67fe:	strb.w	r6, [r3, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6802:	movs	r6, #105	; 0x69
    6804:	str.w	r6, [r3, #2440]	; 0x988
      _s = s;
    6808:	mvn.w	r6, #95	; 0x5f
    680c:	strb.w	r6, [r3, #2444]	; 0x98c
      _b = b;
    6810:	mvn.w	r6, #48	; 0x30
    6814:	strb.w	r6, [r3, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6818:	movs	r6, #120	; 0x78
    681a:	str.w	r6, [r3, #2448]	; 0x990
      _s = s;
    681e:	mvn.w	r6, #126	; 0x7e
    6822:	strb.w	r6, [r3, #2452]	; 0x994
      _b = b;
    6826:	mvn.w	r6, #17
    682a:	strb.w	r6, [r3, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    682e:	movs	r6, #75	; 0x4b
    6830:	str.w	r6, [r3, #2456]	; 0x998
      _s = s;
      _b = b;
    6834:	mvn.w	r6, #60	; 0x3c
    6838:	strb.w	r6, [r3, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    683c:	mvn.w	r6, #78	; 0x4e
    6840:	strb.w	r6, [r3, #2412]	; 0x96c
      _b = b;
    6844:	mvn.w	r6, #54	; 0x36
    6848:	strb.w	r6, [r3, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    684c:	movs	r6, #124	; 0x7c
      _s = s;
    684e:	strb.w	r1, [r3, #2476]	; 0x9ac
    6852:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6856:	str.w	r6, [r3, #2464]	; 0x9a0
      _s = s;
    685a:	mov.w	r6, #122	; 0x7a
    685e:	strb.w	r1, [r3, #2492]	; 0x9bc
    6862:	mov.w	r1, #4294967295
    6866:	strb.w	r6, [r3, #2468]	; 0x9a4
      _b = b;
    686a:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    686e:	strb.w	r1, [r3, #2516]	; 0x9d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6872:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    6874:	strb.w	r6, [r3, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6878:	movs	r6, #155	; 0x9b
    687a:	str.w	r1, [r3, #2520]	; 0x9d8
      _s = s;
    687e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6882:	str.w	r6, [r3, #2472]	; 0x9a8
      _s = s;
      _b = b;
    6886:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    688a:	strb.w	r1, [r3, #2524]	; 0x9dc
    688e:	mov.w	r1, #4294967295
      _b = b;
    6892:	strb.w	r6, [r3, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6896:	movs	r6, #140	; 0x8c
      _s = s;
    6898:	strb.w	r1, [r3, #2532]	; 0x9e4
    689c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68a0:	str.w	r6, [r3, #2480]	; 0x9b0
      _s = s;
    68a4:	mvn.w	r6, #25
    68a8:	strb.w	r1, [r3, #2540]	; 0x9ec
    68ac:	mov.w	r1, #4294967295
    68b0:	strb.w	r6, [r3, #2484]	; 0x9b4
      _b = b;
    68b4:	strb.w	r6, [r3, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68b8:	movs	r6, #144	; 0x90
      _s = s;
    68ba:	strb.w	r1, [r3, #2548]	; 0x9f4
    68be:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68c2:	str.w	r6, [r3, #2488]	; 0x9b8
      _s = s;
      _b = b;
    68c6:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68ca:	str.w	r5, [r3, #2496]	; 0x9c0
      _s = s;
      _b = b;
    68ce:	strb.w	r6, [r3, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68d2:	movs	r6, #170	; 0xaa
      _s = s;
    68d4:	strb.w	r5, [r3, #2500]	; 0x9c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68d8:	str.w	r6, [r3, #2512]	; 0x9d0
      _s = s;
      _b = b;
    68dc:	mov.w	r6, #119	; 0x77
    68e0:	strb.w	r5, [r3, #2501]	; 0x9c5
    68e4:	strb.w	r6, [r3, #2517]	; 0x9d5
    68e8:	mov.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68ec:	str.w	r5, [r3, #2504]	; 0x9c8
      _s = s;
      _b = b;
    68f0:	strb.w	r6, [r3, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68f4:	movs	r6, #151	; 0x97
      _s = s;
    68f6:	strb.w	r5, [r3, #2508]	; 0x9cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68fa:	str.w	r6, [r3, #2528]	; 0x9e0
      _s = s;
      _b = b;
    68fe:	mov.w	r6, #91	; 0x5b
    6902:	strb.w	r5, [r3, #2509]	; 0x9cd
    6906:	strb.w	r6, [r3, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    690a:	movs	r6, #160	; 0xa0
    690c:	str.w	r6, [r3, #2536]	; 0x9e8
      _s = s;
      _b = b;
    6910:	mov.w	r6, #101	; 0x65
    6914:	strb.w	r6, [r3, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6918:	movs	r6, #145	; 0x91
    691a:	str.w	r6, [r3, #2544]	; 0x9f0
      _s = s;
      _b = b;
    691e:	mvn.w	r6, #74	; 0x4a
    6922:	strb.w	r6, [r3, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6926:	movs	r6, #150	; 0x96
      _s = s;
    6928:	strb.w	r1, [r3, #2556]	; 0x9fc
    692c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6930:	str.w	r6, [r3, #2552]	; 0x9f8
      _s = s;
      _b = b;
    6934:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6938:	strb.w	r1, [r3, #2564]	; 0xa04
    693c:	mov.w	r1, #4294967295
      _b = b;
    6940:	strb.w	r6, [r3, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6944:	movs	r6, #139	; 0x8b
      _s = s;
    6946:	strb.w	r1, [r3, #2580]	; 0xa14
    694a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    694e:	str.w	r6, [r3, #2560]	; 0xa00
      _s = s;
      _b = b;
    6952:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6956:	strb.w	r1, [r3, #2588]	; 0xa1c
    695a:	mov.w	r1, #4294967295
      _b = b;
    695e:	strb.w	r6, [r3, #2565]	; 0xa05
    6962:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6966:	strb.w	r1, [r3, #2596]	; 0xa24
    696a:	mov.w	r1, #4294967295
      _b = b;
    696e:	strb.w	r6, [r3, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6972:	movs	r6, #133	; 0x85
      _s = s;
    6974:	strb.w	r1, [r3, #2604]	; 0xa2c
    6978:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    697c:	str.w	r6, [r3, #2576]	; 0xa10
      _s = s;
      _b = b;
    6980:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6984:	strb.w	r1, [r3, #2612]	; 0xa34
    6988:	mov.w	r1, #4294967295
      _b = b;
    698c:	strb.w	r6, [r3, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6990:	movs	r6, #151	; 0x97
      _s = s;
    6992:	strb.w	r1, [r3, #2620]	; 0xa3c
    6996:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    699a:	str.w	r6, [r3, #2584]	; 0xa18
      _s = s;
      _b = b;
    699e:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69a2:	strb.w	lr, [r3, #2572]	; 0xa0c
      _b = b;
    69a6:	strb.w	r6, [r3, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69aa:	movs	r6, #133	; 0x85
      _s = s;
    69ac:	strb.w	r1, [r3, #2628]	; 0xa44
    69b0:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69b4:	str.w	r6, [r3, #2592]	; 0xa20
    69b8:	movs	r6, #144	; 0x90
    69ba:	str.w	r6, [r3, #2600]	; 0xa28
      _s = s;
      _b = b;
    69be:	mvn.w	r6, #82	; 0x52
    69c2:	strb.w	r6, [r3, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69c6:	movs	r6, #134	; 0x86
    69c8:	str.w	r6, [r3, #2608]	; 0xa30
      _s = s;
      _b = b;
    69cc:	mvn.w	r6, #73	; 0x49
    69d0:	strb.w	r6, [r3, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69d4:	movs	r6, #148	; 0x94
    69d6:	str.w	r6, [r3, #2616]	; 0xa38
      _s = s;
      _b = b;
    69da:	mvn.w	r6, #76	; 0x4c
    69de:	strb.w	r6, [r3, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69e2:	movs	r6, #161	; 0xa1
    69e4:	str.w	r6, [r3, #2624]	; 0xa40
      _s = s;
      _b = b;
    69e8:	mvn.w	r6, #18
    69ec:	strb.w	r6, [r3, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69f0:	movs	r6, #153	; 0x99
    69f2:	str.w	r6, [r3, #2632]	; 0xa48
      _s = s;
    69f6:	mvn.w	r6, #108	; 0x6c
    69fa:	strb.w	r6, [r3, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69fe:	movs	r6, #132	; 0x84
    6a00:	str.w	r6, [r3, #2568]	; 0xa08
      _s = s;
      _b = b;
    6a04:	mvn.w	r6, #58	; 0x3a
    6a08:	strb.w	r6, [r3, #2597]	; 0xa25
    6a0c:	mvn.w	r6, #22
    6a10:	strb.w	r6, [r3, #2637]	; 0xa4d
    6a14:	mov.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a18:	strb.w	r1, [r3, #2668]	; 0xa6c
    6a1c:	mvn.w	r1, #2
      _b = b;
    6a20:	strb.w	r6, [r3, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a24:	mov.w	r6, #95	; 0x5f
    6a28:	strb.w	r1, [r3, #2676]	; 0xa74
    6a2c:	mov.w	r1, #4294967295
    6a30:	strb.w	r6, [r3, #2644]	; 0xa54
      _b = b;
    6a34:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a38:	strb.w	r1, [r3, #2700]	; 0xa8c
    6a3c:	mov.w	r1, #4294967295
      _b = b;
    6a40:	strb.w	r6, [r3, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a44:	movs	r6, #88	; 0x58
      _s = s;
    6a46:	strb.w	r1, [r3, #2716]	; 0xa9c
    6a4a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a4e:	str.w	r6, [r3, #2648]	; 0xa58
      _s = s;
      _b = b;
    6a52:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a56:	strb.w	lr, [r3, #2652]	; 0xa5c
      _b = b;
    6a5a:	strb.w	r6, [r3, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a5e:	movs	r6, #94	; 0x5e
      _s = s;
    6a60:	strb.w	ip, [r3, #2660]	; 0xa64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a64:	str.w	r6, [r3, #2656]	; 0xa60
      _s = s;
      _b = b;
    6a68:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a6c:	str.w	r8, [r3, #2712]	; 0xa98
      _s = s;
      _b = b;
    6a70:	strb.w	r6, [r3, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a74:	movs	r6, #144	; 0x90
      _s = s;
    6a76:	strb.w	r1, [r3, #2724]	; 0xaa4
    6a7a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a7e:	str.w	r6, [r3, #2664]	; 0xa68
      _s = s;
      _b = b;
    6a82:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a86:	str.w	r5, [r3, #2688]	; 0xa80
      _s = s;
      _b = b;
    6a8a:	strb.w	r6, [r3, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a8e:	movs	r6, #104	; 0x68
      _s = s;
    6a90:	strb.w	r5, [r3, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a94:	str.w	r6, [r3, #2672]	; 0xa70
      _s = s;
      _b = b;
    6a98:	mvn.w	r6, #29
    6a9c:	strb.w	r5, [r3, #2693]	; 0xa85
    6aa0:	strb.w	r6, [r3, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aa4:	movs	r6, #126	; 0x7e
    6aa6:	str.w	r6, [r3, #2680]	; 0xa78
      _s = s;
    6aaa:	mvn.w	r6, #12
    6aae:	strb.w	r6, [r3, #2684]	; 0xa7c
      _b = b;
    6ab2:	mvn.w	r6, #62	; 0x3e
    6ab6:	strb.w	r6, [r3, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aba:	movs	r6, #169	; 0xa9
    6abc:	str.w	r6, [r3, #2696]	; 0xa88
    6ac0:	movs	r6, #167	; 0xa7
    6ac2:	str.w	r6, [r3, #2704]	; 0xa90
      _s = s;
    6ac6:	mvn.w	r6, #88	; 0x58
    6aca:	strb.w	r6, [r3, #2708]	; 0xa94
      _b = b;
    6ace:	mvn.w	r6, #83	; 0x53
    6ad2:	strb.w	r6, [r3, #2709]	; 0xa95
    6ad6:	mov.w	r6, #25
    6ada:	strb.w	r6, [r3, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ade:	movs	r6, #166	; 0xa6
    6ae0:	str.w	r6, [r3, #2720]	; 0xaa0
    6ae4:	movs	r6, #118	; 0x76
    6ae6:	str.w	r6, [r3, #2640]	; 0xa50
      _s = s;
      _b = b;
    6aea:	mov.w	r6, #61	; 0x3d
    6aee:	strb.w	r6, [r3, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6af2:	movs	r6, #158	; 0x9e
      _s = s;
    6af4:	strb.w	r1, [r3, #2732]	; 0xaac
    6af8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6afc:	str.w	r6, [r3, #2728]	; 0xaa8
      _s = s;
      _b = b;
    6b00:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b04:	strb.w	r1, [r3, #2740]	; 0xab4
    6b08:	mvn.w	r1, #2
      _b = b;
    6b0c:	strb.w	r6, [r3, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b10:	movs	r6, #162	; 0xa2
      _s = s;
    6b12:	strb.w	r1, [r3, #2748]	; 0xabc
    6b16:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b1a:	str.w	r6, [r3, #2736]	; 0xab0
      _s = s;
      _b = b;
    6b1e:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b22:	strb.w	r1, [r3, #2756]	; 0xac4
    6b26:	mov.w	r1, #4294967295
      _b = b;
    6b2a:	strb.w	r6, [r3, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b2e:	movs	r6, #151	; 0x97
      _s = s;
    6b30:	strb.w	r1, [r3, #2764]	; 0xacc
    6b34:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b38:	str.w	r6, [r3, #2744]	; 0xab8
      _s = s;
      _b = b;
    6b3c:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b40:	strb.w	r1, [r3, #2772]	; 0xad4
    6b44:	mov.w	r1, #4294967295
      _b = b;
    6b48:	strb.w	r6, [r3, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b4c:	movs	r6, #154	; 0x9a
      _s = s;
    6b4e:	strb.w	r1, [r3, #2780]	; 0xadc
    6b52:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b56:	str.w	r6, [r3, #2752]	; 0xac0
    6b5a:	movs	r6, #136	; 0x88
      _s = s;
    6b5c:	strb.w	r1, [r3, #2788]	; 0xae4
    6b60:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b64:	str.w	r6, [r3, #2760]	; 0xac8
      _s = s;
      _b = b;
    6b68:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b6c:	strb.w	r1, [r3, #2796]	; 0xaec
    6b70:	mov.w	r1, #4294967295
      _b = b;
    6b74:	strb.w	r6, [r3, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b78:	movs	r6, #140	; 0x8c
      _s = s;
    6b7a:	strb.w	r1, [r3, #2812]	; 0xafc
    6b7e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b82:	str.w	r6, [r3, #2768]	; 0xad0
      _s = s;
      _b = b;
    6b86:	mvn.w	r6, #55	; 0x37
    6b8a:	strb.w	sl, [r3, #2757]	; 0xac5
    6b8e:	strb.w	r6, [r3, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b92:	movs	r6, #155	; 0x9b
    6b94:	str.w	r6, [r3, #2776]	; 0xad8
      _s = s;
      _b = b;
    6b98:	mvn.w	r6, #105	; 0x69
    6b9c:	strb.w	r6, [r3, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ba0:	movs	r6, #154	; 0x9a
    6ba2:	str.w	r6, [r3, #2784]	; 0xae0
      _s = s;
      _b = b;
    6ba6:	mvn.w	r6, #110	; 0x6e
    6baa:	strb.w	r6, [r3, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bae:	movs	r6, #153	; 0x99
    6bb0:	str.w	r6, [r3, #2792]	; 0xae8
      _s = s;
      _b = b;
    6bb4:	mvn.w	r6, #79	; 0x4f
    6bb8:	strb.w	r6, [r3, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bbc:	movs	r6, #132	; 0x84
    6bbe:	str.w	r6, [r3, #2800]	; 0xaf0
      _s = s;
    6bc2:	mvn.w	r6, #64	; 0x40
    6bc6:	strb.w	r6, [r3, #2804]	; 0xaf4
      _b = b;
    6bca:	mvn.w	r6, #49	; 0x31
    6bce:	strb.w	r6, [r3, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bd2:	movs	r6, #146	; 0x92
    6bd4:	str.w	r6, [r3, #2808]	; 0xaf8
      _s = s;
      _b = b;
    6bd8:	mvn.w	r6, #45	; 0x2d
    6bdc:	strb.w	r6, [r3, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6be0:	movs	r6, #164	; 0xa4
      _s = s;
    6be2:	strb.w	r1, [r3, #2820]	; 0xb04
    6be6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bea:	str.w	r6, [r3, #2816]	; 0xb00
      _s = s;
      _b = b;
    6bee:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bf2:	strb.w	r1, [r3, #2868]	; 0xb34
    6bf6:	mov.w	r1, #4294967295
      _b = b;
    6bfa:	strb.w	r6, [r3, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bfe:	movs	r6, #146	; 0x92
      _s = s;
    6c00:	strb.w	r1, [r3, #2876]	; 0xb3c
    6c04:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c08:	str.w	r6, [r3, #2824]	; 0xb08
      _s = s;
    6c0c:	mvn.w	r6, #109	; 0x6d
    6c10:	strb.w	lr, [r3, #2900]	; 0xb54
    6c14:	strb.w	r6, [r3, #2828]	; 0xb0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c18:	movs	r6, #102	; 0x66
      _s = s;
      _b = b;
    6c1a:	strb.w	sl, [r3, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c1e:	str.w	r6, [r3, #2832]	; 0xb10
      _s = s;
      _b = b;
    6c22:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c26:	str.w	r5, [r3, #2880]	; 0xb40
      _s = s;
      _b = b;
    6c2a:	strb.w	r6, [r3, #2837]	; 0xb15
    6c2e:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c32:	strb.w	r5, [r3, #2884]	; 0xb44
      _b = b;
    6c36:	strb.w	r6, [r3, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c3a:	movs	r6, #106	; 0x6a
      _s = s;
      _b = b;
    6c3c:	strb.w	r5, [r3, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c40:	str.w	r6, [r3, #2848]	; 0xb20
      _s = s;
    6c44:	mov.w	r6, #116	; 0x74
    6c48:	strb.w	r6, [r3, #2852]	; 0xb24
      _b = b;
    6c4c:	mvn.w	r6, #11
    6c50:	strb.w	r6, [r3, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c54:	movs	r6, #109	; 0x6d
    6c56:	str.w	r6, [r3, #2856]	; 0xb28
      _s = s;
    6c5a:	mvn.w	r6, #11
    6c5e:	strb.w	r6, [r3, #2860]	; 0xb2c
      _b = b;
    6c62:	mvn.w	r6, #42	; 0x2a
    6c66:	strb.w	r6, [r3, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c6a:	movs	r6, #119	; 0x77
    6c6c:	str.w	r6, [r3, #2864]	; 0xb30
      _s = s;
      _b = b;
    6c70:	mvn.w	r6, #34	; 0x22
    6c74:	strb.w	r6, [r3, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c78:	movs	r6, #105	; 0x69
    6c7a:	str.w	r6, [r3, #2872]	; 0xb38
      _s = s;
      _b = b;
    6c7e:	mvn.w	r6, #54	; 0x36
    6c82:	strb.w	r6, [r3, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c86:	movs	r6, #171	; 0xab
    6c88:	str.w	r6, [r3, #2888]	; 0xb48
      _s = s;
    6c8c:	mvn.w	r6, #70	; 0x46
    6c90:	strb.w	r6, [r3, #2892]	; 0xb4c
      _b = b;
    6c94:	mvn.w	r6, #65	; 0x41
    6c98:	strb.w	r6, [r3, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c9c:	movs	r6, #172	; 0xac
    6c9e:	str.w	r6, [r3, #2896]	; 0xb50
      _s = s;
    6ca2:	mvn.w	r6, #61	; 0x3d
    6ca6:	strb.w	r6, [r3, #2836]	; 0xb14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6caa:	movs	r6, #78	; 0x4e
    6cac:	str.w	r6, [r3, #2840]	; 0xb18
      _s = s;
    6cb0:	mvn.w	r6, #47	; 0x2f
    6cb4:	strb.w	r6, [r3, #2844]	; 0xb1c
      _b = b;
    6cb8:	mov.w	r6, #115	; 0x73
    6cbc:	strb.w	r6, [r3, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cc0:	movs	r6, #172	; 0xac
      _s = s;
    6cc2:	strb.w	r1, [r3, #2908]	; 0xb5c
    6cc6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cca:	str.w	r6, [r3, #2904]	; 0xb58
      _s = s;
      _b = b;
    6cce:	mov.w	r6, #17
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cd2:	strb.w	r1, [r3, #2916]	; 0xb64
      _b = b;
    6cd6:	strb.w	r6, [r3, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cda:	movs	r6, #176	; 0xb0
      _s = s;
    6cdc:	strb.w	r1, [r3, #2924]	; 0xb6c
    6ce0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ce4:	str.w	r6, [r3, #2912]	; 0xb60
      _s = s;
      _b = b;
    6ce8:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cec:	strb.w	r1, [r3, #2932]	; 0xb74
    6cf0:	mov.w	r1, #4294967295
      _b = b;
    6cf4:	strb.w	r6, [r3, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cf8:	movs	r6, #171	; 0xab
      _s = s;
    6cfa:	strb.w	r1, [r3, #2940]	; 0xb7c
    6cfe:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d02:	str.w	r6, [r3, #2928]	; 0xb70
      _s = s;
      _b = b;
    6d06:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d0a:	strb.w	r1, [r3, #2948]	; 0xb84
    6d0e:	mvn.w	r1, #2
      _b = b;
    6d12:	strb.w	r6, [r3, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d16:	movs	r6, #157	; 0x9d
      _s = s;
    6d18:	strb.w	r1, [r3, #2956]	; 0xb8c
    6d1c:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d20:	str.w	r6, [r3, #2936]	; 0xb78
      _s = s;
      _b = b;
    6d24:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d28:	strb.w	r1, [r3, #2964]	; 0xb94
    6d2c:	mov.w	r1, #4294967295
      _b = b;
    6d30:	strb.w	r6, [r3, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d34:	movs	r6, #162	; 0xa2
      _s = s;
    6d36:	strb.w	r1, [r3, #2972]	; 0xb9c
    6d3a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d3e:	str.w	r6, [r3, #2944]	; 0xb80
      _s = s;
      _b = b;
    6d42:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d46:	strb.w	r1, [r3, #2980]	; 0xba4
    6d4a:	mov.w	r1, #4294967295
      _b = b;
    6d4e:	strb.w	r6, [r3, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d52:	movs	r6, #152	; 0x98
    6d54:	str.w	r8, [r3, #2920]	; 0xb68
    6d58:	str.w	r6, [r3, #2952]	; 0xb88
    6d5c:	movs	r6, #151	; 0x97
      _s = s;
    6d5e:	strb.w	r1, [r3, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d62:	str.w	r6, [r3, #2960]	; 0xb90
      _s = s;
      _b = b;
    6d66:	mvn.w	r6, #96	; 0x60
    6d6a:	strb.w	r6, [r3, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d6e:	movs	r6, #159	; 0x9f
    6d70:	str.w	r6, [r3, #2968]	; 0xb98
      _s = s;
      _b = b;
    6d74:	mvn.w	r6, #114	; 0x72
    6d78:	strb.w	r6, [r3, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d7c:	movs	r6, #152	; 0x98
    6d7e:	str.w	r6, [r3, #2976]	; 0xba0
      _s = s;
      _b = b;
    6d82:	mvn.w	r6, #82	; 0x52
    6d86:	strb.w	r6, [r3, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d8a:	movs	r6, #154	; 0x9a
    6d8c:	str.w	r6, [r3, #2984]	; 0xba8
      _s = s;
      _b = b;
    6d90:	mov.w	r6, #32
    6d94:	strb.w	r6, [r3, #2917]	; 0xb65
    6d98:	mvn.w	r6, #43	; 0x2b
    6d9c:	strb.w	r6, [r3, #2957]	; 0xb8d
    6da0:	mvn.w	r6, #46	; 0x2e
    6da4:	strb.w	r6, [r3, #2989]	; 0xbad
    6da8:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dac:	strb.w	r1, [r3, #2996]	; 0xbb4
    6db0:	mov.w	r1, #4294967295
      _b = b;
    6db4:	strb.w	r6, [r3, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6db8:	movs	r6, #145	; 0x91
      _s = s;
    6dba:	strb.w	r1, [r3, #3020]	; 0xbcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dbe:	str.w	r6, [r3, #3000]	; 0xbb8
      _s = s;
    6dc2:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dc6:	str.w	ip, [r3, #2992]	; 0xbb0
      _s = s;
    6dca:	strb.w	r6, [r3, #3004]	; 0xbbc
      _b = b;
    6dce:	mvn.w	r6, #77	; 0x4d
    6dd2:	strb.w	lr, [r3, #3029]	; 0xbd5
    6dd6:	strb.w	r6, [r3, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dda:	movs	r6, #164	; 0xa4
    6ddc:	str.w	r6, [r3, #3008]	; 0xbc0
      _s = s;
    6de0:	mvn.w	r6, #6
    6de4:	strb.w	r6, [r3, #3012]	; 0xbc4
      _b = b;
    6de8:	mvn.w	r6, #9
    6dec:	strb.w	r6, [r3, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6df0:	movs	r6, #163	; 0xa3
    6df2:	str.w	r6, [r3, #3016]	; 0xbc8
      _s = s;
      _b = b;
    6df6:	mvn.w	r6, #16
    6dfa:	strb.w	r6, [r3, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dfe:	movs	r6, #112	; 0x70
    6e00:	mov	r1, r6
    6e02:	str.w	r6, [r3, #3024]	; 0xbd0
      _s = s;
    6e06:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e0a:	str.w	r1, [r3, #3032]	; 0xbd8
      _s = s;
    6e0e:	mov.w	r1, #4294967295
    6e12:	strb.w	r6, [r3, #3028]	; 0xbd4
    6e16:	mvn.w	r6, #115	; 0x73
    6e1a:	strb.w	r1, [r3, #3060]	; 0xbf4
    6e1e:	mov.w	r1, #4294967295
    6e22:	strb.w	r6, [r3, #3036]	; 0xbdc
      _b = b;
    6e26:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e2a:	strb.w	r1, [r3, #3076]	; 0xc04
    6e2e:	mov.w	r1, #4294967295
      _b = b;
    6e32:	strb.w	r6, [r3, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e36:	movs	r6, #128	; 0x80
    6e38:	str.w	r6, [r3, #3040]	; 0xbe0
      _s = s;
    6e3c:	mvn.w	r6, #74	; 0x4a
    6e40:	strb.w	r6, [r3, #3044]	; 0xbe4
      _b = b;
    6e44:	mvn.w	r6, #36	; 0x24
    6e48:	strb.w	r6, [r3, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e4c:	movs	r6, #129	; 0x81
    6e4e:	str.w	r6, [r3, #3048]	; 0xbe8
      _s = s;
    6e52:	mvn.w	r6, #50	; 0x32
    6e56:	strb.w	r6, [r3, #3052]	; 0xbec
      _b = b;
    6e5a:	mvn.w	r6, #40	; 0x28
    6e5e:	strb.w	r6, [r3, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e62:	movs	r6, #127	; 0x7f
    6e64:	str.w	r6, [r3, #3056]	; 0xbf0
      _s = s;
      _b = b;
    6e68:	mvn.w	r6, #41	; 0x29
    6e6c:	strb.w	r6, [r3, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e70:	movs	r6, #114	; 0x72
    6e72:	str.w	r6, [r3, #3064]	; 0xbf8
      _s = s;
    6e76:	mvn.w	r6, #14
    6e7a:	strb.w	r6, [r3, #3068]	; 0xbfc
      _b = b;
    6e7e:	mvn.w	r6, #33	; 0x21
    6e82:	strb.w	r6, [r3, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e86:	movs	r6, #165	; 0xa5
    6e88:	str.w	r6, [r3, #3072]	; 0xc00
      _s = s;
      _b = b;
    6e8c:	mov.w	r6, #95	; 0x5f
    6e90:	strb.w	r6, [r3, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e94:	movs	r6, #169	; 0xa9
      _s = s;
    6e96:	strb.w	r1, [r3, #3092]	; 0xc14
    6e9a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e9e:	str.w	r6, [r3, #3080]	; 0xc08
      _s = s;
    6ea2:	mvn.w	r6, #89	; 0x59
    6ea6:	strb.w	r1, [r3, #3100]	; 0xc1c
    6eaa:	strb.w	r6, [r3, #3084]	; 0xc0c
      _b = b;
    6eae:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6eb2:	strb.w	r1, [r3, #3108]	; 0xc24
    6eb6:	mov.w	r1, #4294967295
      _b = b;
    6eba:	strb.w	r6, [r3, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ebe:	movs	r6, #177	; 0xb1
      _s = s;
    6ec0:	strb.w	r1, [r3, #3140]	; 0xc44
    6ec4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ec8:	str.w	r6, [r3, #3088]	; 0xc10
      _s = s;
      _b = b;
    6ecc:	mov.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ed0:	strb.w	r1, [r3, #3148]	; 0xc4c
    6ed4:	mvn.w	r1, #2
      _b = b;
    6ed8:	strb.w	r6, [r3, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6edc:	movs	r6, #178	; 0xb2
      _s = s;
    6ede:	strb.w	r1, [r3, #3156]	; 0xc54
    6ee2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ee6:	str.w	r6, [r3, #3096]	; 0xc18
      _s = s;
      _b = b;
    6eea:	mov.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eee:	str.w	r8, [r3, #3104]	; 0xc20
      _s = s;
      _b = b;
    6ef2:	strb.w	r6, [r3, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ef6:	movs	r6, #161	; 0xa1
      _s = s;
      _b = b;
    6ef8:	strb.w	ip, [r3, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6efc:	str.w	r6, [r3, #3112]	; 0xc28
      _s = s;
    6f00:	mvn.w	r6, #123	; 0x7b
    6f04:	strb.w	r1, [r3, #3164]	; 0xc5c
    6f08:	mvn.w	r1, #2
    6f0c:	strb.w	r6, [r3, #3116]	; 0xc2c
      _b = b;
    6f10:	mvn.w	r6, #103	; 0x67
    6f14:	strb.w	r6, [r3, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f18:	movs	r6, #111	; 0x6f
    6f1a:	str.w	r6, [r3, #3120]	; 0xc30
      _s = s;
    6f1e:	mvn.w	r6, #55	; 0x37
    6f22:	strb.w	r6, [r3, #3124]	; 0xc34
      _b = b;
    6f26:	mvn.w	r6, #88	; 0x58
    6f2a:	strb.w	r6, [r3, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f2e:	movs	r6, #142	; 0x8e
    6f30:	str.w	r6, [r3, #3128]	; 0xc38
      _s = s;
    6f34:	mvn.w	r6, #62	; 0x3e
    6f38:	strb.w	r6, [r3, #3132]	; 0xc3c
      _b = b;
    6f3c:	mov.w	r6, #124	; 0x7c
    6f40:	strb.w	r6, [r3, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f44:	movs	r6, #168	; 0xa8
    6f46:	str.w	r6, [r3, #3136]	; 0xc40
      _s = s;
      _b = b;
    6f4a:	mvn.w	r6, #114	; 0x72
    6f4e:	strb.w	r6, [r3, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f52:	movs	r6, #164	; 0xa4
    6f54:	str.w	r6, [r3, #3144]	; 0xc48
      _s = s;
      _b = b;
    6f58:	mvn.w	r6, #75	; 0x4b
    6f5c:	strb.w	r6, [r3, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f60:	movs	r6, #162	; 0xa2
    6f62:	str.w	r6, [r3, #3152]	; 0xc50
    6f66:	str.w	r6, [r3, #3160]	; 0xc58
      _s = s;
      _b = b;
    6f6a:	mov.w	r6, #57	; 0x39
    6f6e:	strb.w	r6, [r3, #3109]	; 0xc25
    6f72:	mov.w	r6, #63	; 0x3f
    6f76:	strb.w	r6, [r3, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f7a:	movs	r6, #151	; 0x97
      _s = s;
    6f7c:	strb.w	r1, [r3, #3172]	; 0xc64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f80:	movs	r1, #156	; 0x9c
    6f82:	str.w	r6, [r3, #3168]	; 0xc60
      _s = s;
      _b = b;
    6f86:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f8a:	str.w	r1, [r3, #3176]	; 0xc68
      _s = s;
    6f8e:	mov.w	r1, #4294967295
      _b = b;
    6f92:	strb.w	r6, [r3, #3173]	; 0xc65
    6f96:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f9a:	strb.w	r1, [r3, #3180]	; 0xc6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f9e:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    6fa0:	strb.w	r6, [r3, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fa4:	movs	r6, #157	; 0x9d
    6fa6:	str.w	r1, [r3, #3192]	; 0xc78
      _s = s;
    6faa:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fae:	str.w	r6, [r3, #3184]	; 0xc70
      _s = s;
    6fb2:	mvn.w	r6, #8
    6fb6:	strb.w	r1, [r3, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fba:	movs	r1, #156	; 0x9c
      _s = s;
    6fbc:	strb.w	r6, [r3, #3188]	; 0xc74
      _b = b;
    6fc0:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fc4:	str.w	r1, [r3, #3200]	; 0xc80
      _s = s;
    6fc8:	mvn.w	r1, #2
      _b = b;
    6fcc:	strb.w	r6, [r3, #3189]	; 0xc75
    6fd0:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fd4:	strb.w	r1, [r3, #3204]	; 0xc84
    6fd8:	mov.w	r1, #4294967295
      _b = b;
    6fdc:	strb.w	r6, [r3, #3197]	; 0xc7d
    6fe0:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fe4:	strb.w	r1, [r3, #3228]	; 0xc9c
    6fe8:	mov.w	r1, #4294967295
      _b = b;
    6fec:	strb.w	r6, [r3, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ff0:	movs	r6, #160	; 0xa0
      _s = s;
    6ff2:	strb.w	r1, [r3, #3236]	; 0xca4
    6ff6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ffa:	str.w	r6, [r3, #3208]	; 0xc88
      _s = s;
    6ffe:	mvn.w	r6, #54	; 0x36
    7002:	strb.w	r1, [r3, #3244]	; 0xcac
    7006:	mvn.w	r1, #2
    700a:	strb.w	r6, [r3, #3212]	; 0xc8c
      _b = b;
    700e:	mvn.w	r6, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7012:	strb.w	r1, [r3, #3252]	; 0xcb4
    7016:	mvn.w	r1, #2
      _b = b;
    701a:	strb.w	r6, [r3, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    701e:	movs	r6, #143	; 0x8f
    7020:	str.w	r6, [r3, #3216]	; 0xc90
      _s = s;
    7024:	mvn.w	r6, #51	; 0x33
    7028:	strb.w	r6, [r3, #3220]	; 0xc94
      _b = b;
    702c:	mvn.w	r6, #48	; 0x30
    7030:	strb.w	r6, [r3, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7034:	movs	r6, #145	; 0x91
    7036:	str.w	r6, [r3, #3224]	; 0xc98
      _s = s;
      _b = b;
    703a:	mvn.w	r6, #78	; 0x4e
    703e:	strb.w	r6, [r3, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7042:	movs	r6, #134	; 0x86
    7044:	str.w	r6, [r3, #3232]	; 0xca0
      _s = s;
      _b = b;
    7048:	mvn.w	r6, #102	; 0x66
    704c:	strb.w	r6, [r3, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7050:	movs	r6, #144	; 0x90
    7052:	str.w	r6, [r3, #3240]	; 0xca8
      _s = s;
      _b = b;
    7056:	mvn.w	r6, #49	; 0x31
    705a:	strb.w	r6, [r3, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    705e:	movs	r6, #145	; 0x91
    7060:	str.w	r6, [r3, #3248]	; 0xcb0
      _s = s;
      _b = b;
    7064:	mvn.w	r6, #63	; 0x3f
    7068:	strb.w	r6, [r3, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    706c:	movs	r6, #139	; 0x8b
      _s = s;
    706e:	strb.w	r1, [r3, #3260]	; 0xcbc
    7072:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7076:	str.w	r6, [r3, #3256]	; 0xcb8
      _s = s;
      _b = b;
    707a:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    707e:	strb.w	r1, [r3, #3316]	; 0xcf4
    7082:	mvn.w	r1, #99	; 0x63
      _b = b;
    7086:	strb.w	r6, [r3, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    708a:	movs	r6, #164	; 0xa4
      _s = s;
    708c:	strb.w	r1, [r3, #3324]	; 0xcfc
    7090:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7094:	str.w	r6, [r3, #3264]	; 0xcc0
      _s = s;
    7098:	mvn.w	r6, #120	; 0x78
    709c:	strb.w	lr, [r3, #3340]	; 0xd0c
    70a0:	strb.w	r6, [r3, #3268]	; 0xcc4
      _b = b;
    70a4:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70a8:	strb.w	fp, [r3, #3284]	; 0xcd4
      _b = b;
    70ac:	strb.w	r6, [r3, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70b0:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    70b2:	strb.w	sl, [r3, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70b6:	str.w	r6, [r3, #3272]	; 0xcc8
      _s = s;
    70ba:	mvn.w	r6, #89	; 0x59
    70be:	strb.w	r6, [r3, #3276]	; 0xccc
      _b = b;
    70c2:	mvn.w	r6, #56	; 0x38
    70c6:	strb.w	r6, [r3, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ca:	movs	r6, #183	; 0xb7
    70cc:	str.w	r6, [r3, #3280]	; 0xcd0
      _s = s;
      _b = b;
    70d0:	mov.w	r6, #73	; 0x49
    70d4:	strb.w	r6, [r3, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70d8:	movs	r6, #174	; 0xae
    70da:	str.w	r6, [r3, #3288]	; 0xcd8
      _s = s;
    70de:	mvn.w	r6, #17
    70e2:	strb.w	r6, [r3, #3292]	; 0xcdc
      _b = b;
    70e6:	mov.w	r6, #107	; 0x6b
    70ea:	strb.w	r6, [r3, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ee:	movs	r6, #151	; 0x97
    70f0:	str.w	r6, [r3, #3296]	; 0xce0
      _s = s;
    70f4:	mov.w	r6, #93	; 0x5d
    70f8:	strb.w	r6, [r3, #3300]	; 0xce4
      _b = b;
    70fc:	mvn.w	r6, #40	; 0x28
    7100:	strb.w	r6, [r3, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7104:	movs	r6, #102	; 0x66
    7106:	str.w	r6, [r3, #3304]	; 0xce8
      _s = s;
    710a:	mvn.w	r6, #71	; 0x47
    710e:	strb.w	r6, [r3, #3308]	; 0xcec
      _b = b;
    7112:	mvn.w	r6, #31
    7116:	strb.w	r6, [r3, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    711a:	movs	r6, #126	; 0x7e
    711c:	str.w	r6, [r3, #3312]	; 0xcf0
    7120:	movs	r6, #135	; 0x87
    7122:	str.w	r6, [r3, #3320]	; 0xcf8
      _s = s;
      _b = b;
    7126:	mvn.w	r6, #32
    712a:	strb.w	r6, [r3, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    712e:	movs	r6, #118	; 0x76
    7130:	str.w	r6, [r3, #3328]	; 0xd00
      _s = s;
    7134:	mvn.w	r6, #100	; 0x64
    7138:	strb.w	r6, [r3, #3332]	; 0xd04
      _b = b;
    713c:	mvn.w	r6, #89	; 0x59
    7140:	strb.w	r6, [r3, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7144:	movs	r6, #173	; 0xad
    7146:	str.w	r6, [r3, #3336]	; 0xd08
      _s = s;
      _b = b;
    714a:	mov.w	r6, #127	; 0x7f
    714e:	strb.w	r6, [r3, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7152:	movs	r6, #176	; 0xb0
      _s = s;
    7154:	strb.w	r1, [r3, #3348]	; 0xd14
    7158:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    715c:	str.w	r6, [r3, #3344]	; 0xd10
    7160:	movs	r6, #160	; 0xa0
      _s = s;
    7162:	strb.w	r1, [r3, #3356]	; 0xd1c
    7166:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    716a:	str.w	r6, [r3, #3352]	; 0xd18
      _s = s;
      _b = b;
    716e:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7172:	strb.w	r1, [r3, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7176:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    7178:	strb.w	r6, [r3, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    717c:	movs	r6, #153	; 0x99
    717e:	str.w	r1, [r3, #3368]	; 0xd28
      _s = s;
    7182:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7186:	str.w	r6, [r3, #3360]	; 0xd20
      _s = s;
      _b = b;
    718a:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    718e:	strb.w	r1, [r3, #3372]	; 0xd2c
    7192:	mov.w	r1, #4294967295
      _b = b;
    7196:	strb.w	r6, [r3, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    719a:	movs	r6, #157	; 0x9d
      _s = s;
    719c:	strb.w	r1, [r3, #3380]	; 0xd34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71a0:	movs	r1, #156	; 0x9c
    71a2:	str.w	r6, [r3, #3376]	; 0xd30
      _s = s;
      _b = b;
    71a6:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71aa:	str.w	r1, [r3, #3384]	; 0xd38
      _s = s;
    71ae:	mov.w	r1, #4294967295
      _b = b;
    71b2:	strb.w	r6, [r3, #3381]	; 0xd35
    71b6:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71ba:	strb.w	r1, [r3, #3396]	; 0xd44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71be:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    71c0:	strb.w	r6, [r3, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71c4:	movs	r6, #165	; 0xa5
    71c6:	str.w	r1, [r3, #3400]	; 0xd48
      _s = s;
    71ca:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71ce:	str.w	r6, [r3, #3392]	; 0xd40
      _s = s;
      _b = b;
    71d2:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71d6:	strb.w	r1, [r3, #3404]	; 0xd4c
    71da:	mov.w	r1, #4294967295
      _b = b;
    71de:	strb.w	r6, [r3, #3397]	; 0xd45
    71e2:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71e6:	strb.w	lr, [r3, #3388]	; 0xd3c
      _b = b;
    71ea:	strb.w	r6, [r3, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71ee:	movs	r6, #145	; 0x91
      _s = s;
    71f0:	strb.w	r1, [r3, #3412]	; 0xd54
    71f4:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71f8:	str.w	r6, [r3, #3408]	; 0xd50
      _s = s;
      _b = b;
    71fc:	mvn.w	r6, #40	; 0x28
    7200:	strb.w	r6, [r3, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7204:	movs	r6, #134	; 0x86
    7206:	str.w	r6, [r3, #3416]	; 0xd58
      _s = s;
    720a:	mvn.w	r6, #38	; 0x26
    720e:	strb.w	r6, [r3, #3420]	; 0xd5c
      _b = b;
    7212:	mvn.w	r6, #71	; 0x47
    7216:	strb.w	r6, [r3, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    721a:	movs	r6, #125	; 0x7d
    721c:	str.w	r6, [r3, #3424]	; 0xd60
      _s = s;
    7220:	mvn.w	r6, #50	; 0x32
    7224:	strb.w	r6, [r3, #3428]	; 0xd64
      _b = b;
    7228:	mov.w	r6, #55	; 0x37
    722c:	strb.w	r6, [r3, #3365]	; 0xd25
    7230:	mov.w	r6, #81	; 0x51
    7234:	strb.w	r6, [r3, #3349]	; 0xd15
    7238:	mvn.w	r6, #90	; 0x5a
    723c:	strb.w	r6, [r3, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7240:	movs	r6, #136	; 0x88
      _s = s;
    7242:	strb.w	r1, [r3, #3436]	; 0xd6c
    7246:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    724a:	str.w	r6, [r3, #3432]	; 0xd68
      _s = s;
      _b = b;
    724e:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7252:	strb.w	r1, [r3, #3452]	; 0xd7c
    7256:	mvn.w	r1, #99	; 0x63
      _b = b;
    725a:	strb.w	r6, [r3, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    725e:	movs	r6, #136	; 0x88
      _s = s;
    7260:	strb.w	lr, [r3, #3468]	; 0xd8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7264:	str.w	r6, [r3, #3440]	; 0xd70
      _s = s;
    7268:	mvn.w	r6, #7
    726c:	strb.w	lr, [r3, #3476]	; 0xd94
    7270:	strb.w	r6, [r3, #3444]	; 0xd74
      _b = b;
    7274:	mvn.w	r6, #52	; 0x34
    7278:	strb.w	r8, [r3, #3485]	; 0xd9d
    727c:	strb.w	r6, [r3, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7280:	movs	r6, #141	; 0x8d
    7282:	str.w	r6, [r3, #3448]	; 0xd78
      _s = s;
      _b = b;
    7286:	mvn.w	r6, #69	; 0x45
    728a:	strb.w	r6, [r3, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    728e:	movs	r6, #174	; 0xae
    7290:	str.w	r6, [r3, #3456]	; 0xd80
      _s = s;
    7294:	mvn.w	r6, #22
    7298:	strb.w	r6, [r3, #3460]	; 0xd84
      _b = b;
    729c:	mvn.w	r6, #64	; 0x40
    72a0:	strb.w	r6, [r3, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72a4:	movs	r6, #178	; 0xb2
    72a6:	str.w	r6, [r3, #3464]	; 0xd88
      _s = s;
      _b = b;
    72aa:	mov.w	r6, #126	; 0x7e
    72ae:	strb.w	r6, [r3, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72b2:	movs	r6, #179	; 0xb3
    72b4:	str.w	r6, [r3, #3472]	; 0xd90
      _s = s;
      _b = b;
    72b8:	mov.w	r6, #97	; 0x61
    72bc:	strb.w	r6, [r3, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72c0:	movs	r6, #170	; 0xaa
    72c2:	str.w	r6, [r3, #3480]	; 0xd98
      _s = s;
    72c6:	mov.w	r6, #91	; 0x5b
    72ca:	strb.w	r6, [r3, #3484]	; 0xd9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72ce:	movs	r6, #140	; 0x8c
    72d0:	str.w	r6, [r3, #3488]	; 0xda0
      _s = s;
    72d4:	mov.w	r6, #112	; 0x70
    72d8:	strb.w	r6, [r3, #3492]	; 0xda4
      _b = b;
    72dc:	mvn.w	r6, #27
    72e0:	strb.w	r6, [r3, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72e4:	movs	r6, #102	; 0x66
    72e6:	str.w	r6, [r3, #3496]	; 0xda8
      _s = s;
    72ea:	mvn.w	r6, #90	; 0x5a
    72ee:	strb.w	r6, [r3, #3500]	; 0xdac
      _b = b;
    72f2:	mvn.w	r6, #21
    72f6:	strb.w	r6, [r3, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72fa:	movs	r6, #166	; 0xa6
    72fc:	str.w	r6, [r3, #3504]	; 0xdb0
      _s = s;
    7300:	mvn.w	r6, #66	; 0x42
    7304:	strb.w	r6, [r3, #3508]	; 0xdb4
      _b = b;
    7308:	mvn.w	r6, #25
    730c:	strb.w	r6, [r3, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7310:	movs	r6, #143	; 0x8f
    7312:	str.w	r6, [r3, #3512]	; 0xdb8
      _s = s;
    7316:	mvn.w	r6, #59	; 0x3b
    731a:	strb.w	r6, [r3, #3516]	; 0xdbc
      _b = b;
    731e:	mvn.w	r6, #40	; 0x28
    7322:	strb.w	r6, [r3, #3517]	; 0xdbd
    7326:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    732a:	strb.w	r1, [r3, #3524]	; 0xdc4
    732e:	mov.w	r1, #4294967295
      _b = b;
    7332:	strb.w	r6, [r3, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7336:	movs	r6, #171	; 0xab
      _s = s;
    7338:	strb.w	r1, [r3, #3532]	; 0xdcc
    733c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7340:	str.w	r6, [r3, #3528]	; 0xdc8
      _s = s;
      _b = b;
    7344:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7348:	strb.w	r1, [r3, #3540]	; 0xdd4
    734c:	mov.w	r1, #4294967295
      _b = b;
    7350:	strb.w	r6, [r3, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7354:	movs	r6, #168	; 0xa8
      _s = s;
    7356:	strb.w	r1, [r3, #3548]	; 0xddc
    735a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    735e:	str.w	r6, [r3, #3536]	; 0xdd0
    7362:	movs	r6, #135	; 0x87
      _s = s;
    7364:	strb.w	r1, [r3, #3556]	; 0xde4
    7368:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    736c:	str.w	r6, [r3, #3544]	; 0xdd8
    7370:	movs	r6, #143	; 0x8f
      _s = s;
    7372:	strb.w	r1, [r3, #3564]	; 0xdec
    7376:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    737a:	str.w	r6, [r3, #3552]	; 0xde0
    737e:	movs	r6, #150	; 0x96
      _s = s;
    7380:	strb.w	r1, [r3, #3580]	; 0xdfc
    7384:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7388:	str.w	r6, [r3, #3560]	; 0xde8
      _s = s;
      _b = b;
    738c:	mov.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7390:	str.w	r7, [r3, #3520]	; 0xdc0
      _s = s;
      _b = b;
    7394:	strb.w	r6, [r3, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7398:	movs	r6, #155	; 0x9b
      _s = s;
    739a:	strb.w	lr, [r3, #3572]	; 0xdf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    739e:	str.w	r6, [r3, #3568]	; 0xdf0
      _s = s;
      _b = b;
    73a2:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73a6:	strb.w	r1, [r3, #3588]	; 0xe04
    73aa:	mov.w	r1, #4294967295
      _b = b;
    73ae:	strb.w	r6, [r3, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73b2:	movs	r6, #167	; 0xa7
      _s = s;
      _b = b;
    73b4:	strb.w	r5, [r3, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73b8:	str.w	r6, [r3, #3576]	; 0xdf8
      _s = s;
      _b = b;
    73bc:	mvn.w	r6, #36	; 0x24
    73c0:	strb.w	r5, [r3, #3549]	; 0xddd
    73c4:	strb.w	r6, [r3, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73c8:	movs	r6, #164	; 0xa4
    73ca:	str.w	r6, [r3, #3584]	; 0xe00
      _s = s;
      _b = b;
    73ce:	mvn.w	r6, #49	; 0x31
    73d2:	strb.w	r6, [r3, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73d6:	mvn.w	r6, #78	; 0x4e
    73da:	strb.w	r6, [r3, #3596]	; 0xe0c
      _b = b;
    73de:	mvn.w	r6, #29
    73e2:	strb.w	r6, [r3, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73e6:	movs	r6, #95	; 0x5f
    73e8:	str.w	r6, [r3, #3600]	; 0xe10
      _s = s;
    73ec:	mvn.w	r6, #31
    73f0:	strb.w	r6, [r3, #3604]	; 0xe14
      _b = b;
    73f4:	mov.w	r6, #13
    73f8:	strb.w	r6, [r3, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73fc:	movs	r6, #113	; 0x71
    73fe:	str.w	r6, [r3, #3592]	; 0xe08
      _s = s;
      _b = b;
    7402:	mvn.w	r6, #48	; 0x30
    7406:	strb.w	r6, [r3, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    740a:	movs	r6, #94	; 0x5e
      _s = s;
    740c:	strb.w	r1, [r3, #3612]	; 0xe1c
    7410:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7414:	str.w	r6, [r3, #3608]	; 0xe18
      _s = s;
      _b = b;
    7418:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    741c:	strb.w	r1, [r3, #3628]	; 0xe2c
    7420:	mov.w	r1, #4294967295
      _b = b;
    7424:	strb.w	r6, [r3, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7428:	movs	r6, #133	; 0x85
      _s = s;
    742a:	strb.w	r1, [r3, #3652]	; 0xe44
    742e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7432:	str.w	r6, [r3, #3616]	; 0xe20
      _s = s;
    7436:	mvn.w	r6, #55	; 0x37
    743a:	strb.w	r1, [r3, #3660]	; 0xe4c
    743e:	mov.w	r1, #4294967295
    7442:	strb.w	r6, [r3, #3620]	; 0xe24
      _b = b;
    7446:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    744a:	strb.w	r1, [r3, #3668]	; 0xe54
    744e:	mvn.w	r1, #2
      _b = b;
    7452:	strb.w	r6, [r3, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7456:	movs	r6, #130	; 0x82
    7458:	str.w	r6, [r3, #3624]	; 0xe28
      _s = s;
      _b = b;
    745c:	mvn.w	r6, #74	; 0x4a
    7460:	strb.w	r6, [r3, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7464:	movs	r6, #135	; 0x87
    7466:	str.w	r6, [r3, #3632]	; 0xe30
      _s = s;
    746a:	mvn.w	r6, #8
    746e:	strb.w	r6, [r3, #3636]	; 0xe34
      _b = b;
    7472:	mvn.w	r6, #53	; 0x35
    7476:	strb.w	r6, [r3, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    747a:	movs	r6, #125	; 0x7d
    747c:	str.w	r6, [r3, #3640]	; 0xe38
      _s = s;
    7480:	mvn.w	r6, #117	; 0x75
    7484:	strb.w	r6, [r3, #3644]	; 0xe3c
      _b = b;
    7488:	mov.w	r6, #127	; 0x7f
    748c:	strb.w	r6, [r3, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7490:	movs	r6, #179	; 0xb3
    7492:	str.w	r6, [r3, #3648]	; 0xe40
      _s = s;
      _b = b;
    7496:	mov.w	r6, #120	; 0x78
    749a:	strb.w	r6, [r3, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    749e:	movs	r6, #179	; 0xb3
    74a0:	str.w	r6, [r3, #3656]	; 0xe48
      _s = s;
      _b = b;
    74a4:	mov.w	r6, #118	; 0x76
    74a8:	strb.w	r6, [r3, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74ac:	movs	r6, #180	; 0xb4
    74ae:	str.w	r6, [r3, #3664]	; 0xe50
      _s = s;
      _b = b;
    74b2:	mov.w	r6, #116	; 0x74
    74b6:	strb.w	r6, [r3, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74ba:	movs	r6, #173	; 0xad
    74bc:	str.w	r6, [r3, #3672]	; 0xe58
      _s = s;
    74c0:	mov.w	r6, #83	; 0x53
    74c4:	strb.w	r6, [r3, #3676]	; 0xe5c
      _b = b;
    74c8:	mvn.w	r6, #65	; 0x41
    74cc:	strb.w	r6, [r3, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74d0:	movs	r6, #163	; 0xa3
    74d2:	str.w	r6, [r3, #3680]	; 0xe60
      _s = s;
    74d6:	mvn.w	r6, #103	; 0x67
    74da:	strb.w	r6, [r3, #3684]	; 0xe64
      _b = b;
    74de:	mvn.w	r6, #23
    74e2:	strb.w	r6, [r3, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74e6:	movs	r6, #158	; 0x9e
    74e8:	str.w	r6, [r3, #3688]	; 0xe68
      _s = s;
    74ec:	mvn.w	r6, #108	; 0x6c
    74f0:	strb.w	r6, [r3, #3692]	; 0xe6c
      _b = b;
    74f4:	mvn.w	r6, #17
    74f8:	strb.w	r6, [r3, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74fc:	movs	r6, #173	; 0xad
      _s = s;
    74fe:	strb.w	r1, [r3, #3700]	; 0xe74
    7502:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7506:	str.w	r6, [r3, #3696]	; 0xe70
    750a:	movs	r6, #167	; 0xa7
      _s = s;
    750c:	strb.w	r1, [r3, #3708]	; 0xe7c
    7510:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7514:	str.w	r6, [r3, #3704]	; 0xe78
      _s = s;
      _b = b;
    7518:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    751c:	strb.w	r1, [r3, #3716]	; 0xe84
    7520:	mov.w	r1, #4294967295
      _b = b;
    7524:	strb.w	r6, [r3, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7528:	movs	r6, #162	; 0xa2
      _s = s;
    752a:	strb.w	r1, [r3, #3724]	; 0xe8c
    752e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7532:	str.w	r6, [r3, #3712]	; 0xe80
      _s = s;
      _b = b;
    7536:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    753a:	strb.w	r1, [r3, #3732]	; 0xe94
      _b = b;
    753e:	strb.w	r6, [r3, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7542:	movs	r6, #173	; 0xad
      _s = s;
    7544:	strb.w	r1, [r3, #3740]	; 0xe9c
    7548:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    754c:	str.w	r6, [r3, #3720]	; 0xe88
      _s = s;
      _b = b;
    7550:	mov.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7554:	strb.w	r1, [r3, #3756]	; 0xeac
    7558:	mov.w	r1, #4294967295
      _b = b;
    755c:	strb.w	r6, [r3, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7560:	movs	r6, #174	; 0xae
      _s = s;
    7562:	strb.w	r1, [r3, #3764]	; 0xeb4
    7566:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    756a:	str.w	r6, [r3, #3728]	; 0xe90
      _s = s;
      _b = b;
    756e:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7572:	str.w	r8, [r3, #3736]	; 0xe98
      _s = s;
      _b = b;
    7576:	strb.w	r6, [r3, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    757a:	movs	r6, #159	; 0x9f
      _s = s;
    757c:	strb.w	r1, [r3, #3772]	; 0xebc
    7580:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7584:	str.w	r6, [r3, #3744]	; 0xea0
      _s = s;
      _b = b;
    7588:	mov.w	r6, #71	; 0x47
    758c:	strb.w	sl, [r3, #3701]	; 0xe75
    7590:	strb.w	r6, [r3, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7594:	movs	r6, #153	; 0x99
      _s = s;
    7596:	strb.w	fp, [r3, #3748]	; 0xea4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    759a:	str.w	r6, [r3, #3752]	; 0xea8
      _s = s;
      _b = b;
    759e:	mov.w	r6, #81	; 0x51
    75a2:	strb.w	r6, [r3, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75a6:	movs	r6, #164	; 0xa4
    75a8:	str.w	r6, [r3, #3760]	; 0xeb0
      _s = s;
      _b = b;
    75ac:	mvn.w	r6, #53	; 0x35
    75b0:	strb.w	r6, [r3, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75b4:	movs	r6, #167	; 0xa7
    75b6:	str.w	r6, [r3, #3768]	; 0xeb8
      _s = s;
      _b = b;
    75ba:	mvn.w	r6, #32
    75be:	strb.w	r6, [r3, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75c2:	movs	r6, #161	; 0xa1
    75c4:	str.w	r6, [r3, #3776]	; 0xec0
      _s = s;
    75c8:	mvn.w	r6, #56	; 0x38
    75cc:	strb.w	r6, [r3, #3780]	; 0xec4
      _b = b;
    75d0:	mov.w	r6, #10
    75d4:	strb.w	r6, [r3, #3733]	; 0xe95
    75d8:	mvn.w	r6, #36	; 0x24
    75dc:	strb.w	r6, [r3, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75e0:	mov.w	r6, #85	; 0x55
    75e4:	strb.w	r1, [r3, #3804]	; 0xedc
    75e8:	mov.w	r1, #4294967295
    75ec:	strb.w	r6, [r3, #3868]	; 0xf1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75f0:	movs	r6, #135	; 0x87
      _s = s;
    75f2:	strb.w	r1, [r3, #3828]	; 0xef4
    75f6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75fa:	str.w	r6, [r3, #3784]	; 0xec8
      _s = s;
    75fe:	mov.w	r6, #120	; 0x78
    7602:	strb.w	r1, [r3, #3844]	; 0xf04
    7606:	mvn.w	r1, #2
    760a:	strb.w	r6, [r3, #3788]	; 0xecc
      _b = b;
    760e:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7612:	strb.w	r1, [r3, #3852]	; 0xf0c
    7616:	mvn.w	r1, #2
      _b = b;
    761a:	strb.w	r6, [r3, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    761e:	movs	r6, #73	; 0x49
      _s = s;
    7620:	strb.w	r1, [r3, #3860]	; 0xf14
    7624:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7628:	str.w	r6, [r3, #3792]	; 0xed0
      _s = s;
    762c:	mvn.w	r6, #84	; 0x54
      _b = b;
    7630:	strb.w	sl, [r3, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7634:	strb.w	r6, [r3, #3796]	; 0xed4
      _b = b;
    7638:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    763c:	str.w	r5, [r3, #3832]	; 0xef8
      _s = s;
      _b = b;
    7640:	strb.w	r6, [r3, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7644:	movs	r6, #76	; 0x4c
      _s = s;
    7646:	strb.w	r5, [r3, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    764a:	str.w	r6, [r3, #3800]	; 0xed8
      _s = s;
      _b = b;
    764e:	mvn.w	r6, #42	; 0x2a
    7652:	strb.w	r5, [r3, #3837]	; 0xefd
    7656:	strb.w	r6, [r3, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    765a:	movs	r6, #112	; 0x70
    765c:	str.w	r6, [r3, #3808]	; 0xee0
      _s = s;
    7660:	mvn.w	r6, #36	; 0x24
    7664:	strb.w	r6, [r3, #3812]	; 0xee4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7668:	movs	r6, #136	; 0x88
    766a:	str.w	r6, [r3, #3816]	; 0xee8
      _s = s;
    766e:	mvn.w	r6, #49	; 0x31
    7672:	strb.w	r6, [r3, #3820]	; 0xeec
      _b = b;
    7676:	mvn.w	r6, #108	; 0x6c
    767a:	strb.w	r6, [r3, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    767e:	movs	r6, #144	; 0x90
    7680:	str.w	r6, [r3, #3824]	; 0xef0
      _s = s;
      _b = b;
    7684:	mvn.w	r6, #95	; 0x5f
    7688:	strb.w	r6, [r3, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    768c:	movs	r6, #185	; 0xb9
    768e:	str.w	r6, [r3, #3840]	; 0xf00
      _s = s;
      _b = b;
    7692:	mov.w	r6, #94	; 0x5e
    7696:	strb.w	r6, [r3, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    769a:	movs	r6, #182	; 0xb6
    769c:	str.w	r6, [r3, #3848]	; 0xf08
      _s = s;
      _b = b;
    76a0:	mvn.w	r6, #111	; 0x6f
    76a4:	strb.w	r6, [r3, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76a8:	movs	r6, #182	; 0xb6
    76aa:	str.w	r6, [r3, #3856]	; 0xf10
      _s = s;
      _b = b;
    76ae:	mvn.w	r6, #127	; 0x7f
    76b2:	strb.w	r6, [r3, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76b6:	movs	r6, #170	; 0xaa
    76b8:	str.w	r6, [r3, #3864]	; 0xf18
    76bc:	movs	r6, #172	; 0xac
      _s = s;
      _b = b;
    76be:	strb.w	r8, [r3, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76c2:	str.w	r6, [r3, #3872]	; 0xf20
      _s = s;
    76c6:	mvn.w	r6, #76	; 0x4c
    76ca:	strb.w	r1, [r3, #3884]	; 0xf2c
    76ce:	mov.w	r1, #4294967295
    76d2:	strb.w	r6, [r3, #3876]	; 0xf24
      _b = b;
    76d6:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76da:	strb.w	r1, [r3, #3892]	; 0xf34
      _b = b;
    76de:	strb.w	r6, [r3, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76e2:	movs	r6, #173	; 0xad
      _s = s;
    76e4:	strb.w	r1, [r3, #3900]	; 0xf3c
    76e8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76ec:	str.w	r6, [r3, #3880]	; 0xf28
      _s = s;
      _b = b;
    76f0:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76f4:	strb.w	r1, [r3, #3908]	; 0xf44
    76f8:	mvn.w	r1, #2
      _b = b;
    76fc:	strb.w	r6, [r3, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7700:	movs	r6, #174	; 0xae
      _s = s;
    7702:	strb.w	r1, [r3, #3916]	; 0xf4c
    7706:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    770a:	str.w	r6, [r3, #3888]	; 0xf30
      _s = s;
      _b = b;
    770e:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7712:	strb.w	r1, [r3, #3924]	; 0xf54
    7716:	mov.w	r1, #4294967295
      _b = b;
    771a:	strb.w	r6, [r3, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    771e:	movs	r6, #174	; 0xae
      _s = s;
    7720:	strb.w	r1, [r3, #3932]	; 0xf5c
    7724:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7728:	str.w	r6, [r3, #3904]	; 0xf40
      _s = s;
      _b = b;
    772c:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7730:	strb.w	r1, [r3, #3940]	; 0xf64
    7734:	mov.w	r1, #4294967295
      _b = b;
    7738:	strb.w	r6, [r3, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    773c:	movs	r6, #173	; 0xad
      _s = s;
    773e:	strb.w	r1, [r3, #3948]	; 0xf6c
    7742:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7746:	str.w	r6, [r3, #3912]	; 0xf48
      _s = s;
      _b = b;
    774a:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    774e:	str.w	r8, [r3, #3896]	; 0xf38
      _s = s;
      _b = b;
    7752:	strb.w	r6, [r3, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7756:	movs	r6, #185	; 0xb9
      _s = s;
    7758:	strb.w	r1, [r3, #3956]	; 0xf74
    775c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7760:	str.w	r6, [r3, #3920]	; 0xf50
    7764:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    7766:	strb.w	sl, [r3, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    776a:	str.w	r6, [r3, #3928]	; 0xf58
      _s = s;
      _b = b;
    776e:	mvn.w	r6, #118	; 0x76
    7772:	strb.w	r6, [r3, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7776:	movs	r6, #171	; 0xab
    7778:	str.w	r6, [r3, #3936]	; 0xf60
      _s = s;
      _b = b;
    777c:	mvn.w	r6, #120	; 0x78
    7780:	strb.w	r6, [r3, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7784:	movs	r6, #161	; 0xa1
    7786:	str.w	r6, [r3, #3944]	; 0xf68
      _s = s;
      _b = b;
    778a:	mvn.w	r6, #90	; 0x5a
    778e:	strb.w	r6, [r3, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7792:	movs	r6, #164	; 0xa4
    7794:	str.w	r6, [r3, #3952]	; 0xf70
      _s = s;
      _b = b;
    7798:	mov.w	r6, #53	; 0x35
    779c:	strb.w	r6, [r3, #3925]	; 0xf55
    77a0:	mvn.w	r6, #25
    77a4:	strb.w	r6, [r3, #3957]	; 0xf75
    77a8:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77ac:	strb.w	r1, [r3, #3964]	; 0xf7c
    77b0:	mov.w	r1, #4294967295
      _b = b;
    77b4:	strb.w	r6, [r3, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77b8:	movs	r6, #166	; 0xa6
      _s = s;
    77ba:	strb.w	r1, [r3, #4020]	; 0xfb4
    77be:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77c2:	str.w	r6, [r3, #3960]	; 0xf78
      _s = s;
      _b = b;
    77c6:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77ca:	strb.w	r1, [r3, #4036]	; 0xfc4
    77ce:	mvn.w	r1, #2
      _b = b;
    77d2:	strb.w	r6, [r3, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77d6:	movs	r6, #162	; 0xa2
      _s = s;
    77d8:	strb.w	r1, [r3, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77dc:	movs	r1, #174	; 0xae
    77de:	str.w	r6, [r3, #3968]	; 0xf80
      _s = s;
    77e2:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77e6:	str.w	r5, [r3, #4024]	; 0xfb8
      _s = s;
    77ea:	strb.w	r6, [r3, #3972]	; 0xf84
      _b = b;
    77ee:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77f2:	strb.w	r5, [r3, #4028]	; 0xfbc
      _b = b;
    77f6:	strb.w	r6, [r3, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77fa:	movs	r6, #160	; 0xa0
      _s = s;
      _b = b;
    77fc:	strb.w	r5, [r3, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7800:	str.w	r6, [r3, #3976]	; 0xf88
      _s = s;
    7804:	mvn.w	r6, #90	; 0x5a
    7808:	strb.w	r6, [r3, #3980]	; 0xf8c
      _b = b;
    780c:	mvn.w	r6, #29
    7810:	strb.w	r6, [r3, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7814:	movs	r6, #88	; 0x58
    7816:	str.w	r6, [r3, #3984]	; 0xf90
      _s = s;
    781a:	mvn.w	r6, #32
    781e:	strb.w	r6, [r3, #3988]	; 0xf94
      _b = b;
    7822:	mvn.w	r6, #47	; 0x2f
    7826:	strb.w	r6, [r3, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    782a:	movs	r6, #81	; 0x51
    782c:	str.w	r6, [r3, #3992]	; 0xf98
      _s = s;
    7830:	mvn.w	r6, #23
    7834:	strb.w	r6, [r3, #3996]	; 0xf9c
      _b = b;
    7838:	mvn.w	r6, #87	; 0x57
    783c:	strb.w	r6, [r3, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7840:	movs	r6, #97	; 0x61
    7842:	str.w	r6, [r3, #4000]	; 0xfa0
      _s = s;
    7846:	mvn.w	r6, #11
    784a:	strb.w	r6, [r3, #4004]	; 0xfa4
      _b = b;
    784e:	mvn.w	r6, #40	; 0x28
    7852:	strb.w	r6, [r3, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7856:	movs	r6, #111	; 0x6f
    7858:	str.w	r6, [r3, #4008]	; 0xfa8
      _s = s;
    785c:	mvn.w	r6, #51	; 0x33
    7860:	strb.w	r6, [r3, #4012]	; 0xfac
      _b = b;
    7864:	mvn.w	r6, #52	; 0x34
    7868:	strb.w	r6, [r3, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    786c:	movs	r6, #126	; 0x7e
    786e:	str.w	r6, [r3, #4016]	; 0xfb0
      _s = s;
      _b = b;
    7872:	mov.w	r6, #70	; 0x46
    7876:	strb.w	r6, [r3, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    787a:	movs	r6, #183	; 0xb7
    787c:	str.w	r6, [r3, #4032]	; 0xfc0
    7880:	movs	r6, #180	; 0xb4
    7882:	str.w	r6, [r3, #4040]	; 0xfc8
      _s = s;
      _b = b;
    7886:	mvn.w	r6, #108	; 0x6c
    788a:	strb.w	r6, [r3, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    788e:	movs	r6, #180	; 0xb4
    7890:	str.w	r1, [r2], #32
    7894:	movs	r1, #171	; 0xab
    7896:	str.w	r6, [r3, #4048]	; 0xfd0
    789a:	str	r1, [r2, #0]
      _s = s;
    789c:	mov.w	r2, #4294967295
    78a0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78a4:	str.w	r6, [r3, #4056]	; 0xfd8
      _s = s;
    78a8:	strb.w	r2, [r3, #4052]	; 0xfd4
      _b = b;
    78ac:	mvn.w	r2, #105	; 0x69
    78b0:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78b4:	str.w	r8, [r3, #4088]	; 0xff8
      _s = s;
      _b = b;
    78b8:	strb.w	r2, [r3, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78bc:	mvn.w	r2, #2
    78c0:	strb.w	r2, [r3, #4060]	; 0xfdc
      _b = b;
    78c4:	mvn.w	r2, #124	; 0x7c
    78c8:	strb.w	r2, [r3, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78cc:	movs	r2, #170	; 0xaa
    78ce:	str.w	r2, [r3, #4064]	; 0xfe0
      _s = s;
    78d2:	mov.w	r2, #124	; 0x7c
    78d6:	strb.w	r2, [r3, #4068]	; 0xfe4
      _b = b;
    78da:	mvn.w	r2, #50	; 0x32
    78de:	strb.w	r2, [r3, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78e2:	movs	r2, #173	; 0xad
    78e4:	str.w	r2, [r3, #4072]	; 0xfe8
      _s = s;
    78e8:	mvn.w	r2, #2
    78ec:	strb.w	r2, [r3, #4076]	; 0xfec
      _b = b;
    78f0:	mvn.w	r2, #21
    78f4:	strb.w	r2, [r3, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f8:	movs	r2, #174	; 0xae
    78fa:	str.w	r2, [r3, #4080]	; 0xff0
      _s = s;
    78fe:	mov.w	r2, #4294967295
    7902:	strb.w	r2, [r3, #4084]	; 0xff4
      _b = b;
    7906:	mvn.w	r2, #33	; 0x21
    790a:	strb.w	r2, [r3, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    790e:	mov.w	r2, #4294967295
    7912:	strb.w	r2, [r3, #4092]	; 0xffc
      _b = b;
    7916:	mvn.w	r2, #81	; 0x51
    791a:	strb.w	r2, [r3, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    791e:	movw	r2, #4104	; 0x1008
    7922:	str.w	r8, [r3, r2]
      _s = s;
    7926:	movw	r2, #4100	; 0x1004
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    792a:	mov.w	r8, #6
      _s = s;
    792e:	strb	r1, [r3, r2]
      _b = b;
    7930:	movw	r2, #4101	; 0x1005
    7934:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7936:	movw	r2, #4108	; 0x100c
      _b = b;
    793a:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    793e:	strb	r1, [r3, r2]
      _b = b;
    7940:	movw	r2, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7944:	movs	r1, #177	; 0xb1
      _s = s;
      _b = b;
    7946:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7948:	movw	r2, #4112	; 0x1010
      _s = s;
      _b = b;
    794c:	mov.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7950:	str	r1, [r3, r2]
      _s = s;
    7952:	movw	r2, #4116	; 0x1014
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7956:	movs	r1, #172	; 0xac
      _s = s;
    7958:	strb.w	lr, [r3, r2]
      _b = b;
    795c:	movw	r2, #4117	; 0x1015
    7960:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7962:	movw	r2, #4120	; 0x1018
      _s = s;
      _b = b;
    7966:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    796a:	str	r1, [r3, r2]
      _s = s;
    796c:	mvn.w	r1, #2
    7970:	movw	r2, #4124	; 0x101c
    7974:	strb	r1, [r3, r2]
      _b = b;
    7976:	movw	r2, #4125	; 0x101d
    797a:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    797e:	movw	r2, #4132	; 0x1024
    7982:	strb	r1, [r3, r2]
      _b = b;
    7984:	movw	r2, #4133	; 0x1025
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7988:	add.w	r1, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    798c:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    798e:	movs	r2, #165	; 0xa5
    7990:	movw	r6, #4176	; 0x1050
    7994:	str	r2, [r1, #64]	; 0x40
    7996:	mov	r2, r1
    7998:	movs	r1, #110	; 0x6e
    799a:	str	r1, [r2, #96]	; 0x60
    799c:	movs	r2, #78	; 0x4e
      _s = s;
    799e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79a2:	str	r2, [r3, r6]
    79a4:	movw	r6, #4200	; 0x1068
    79a8:	movs	r2, #82	; 0x52
    79aa:	str	r2, [r3, r6]
    79ac:	movw	r6, #4136	; 0x1028
    79b0:	movs	r2, #161	; 0xa1
    79b2:	str	r2, [r3, r6]
      _s = s;
    79b4:	movw	r2, #4140	; 0x102c
      _b = b;
    79b8:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79bc:	strb	r1, [r3, r2]
      _b = b;
    79be:	movw	r2, #4141	; 0x102d
    79c2:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79c4:	movw	r6, #4144	; 0x1030
    79c8:	movs	r2, #153	; 0x99
    79ca:	str	r2, [r3, r6]
      _s = s;
    79cc:	movw	r2, #4148	; 0x1034
    79d0:	mvn.w	r6, #42	; 0x2a
    79d4:	strb	r6, [r3, r2]
      _b = b;
    79d6:	movw	r2, #4149	; 0x1035
    79da:	mvn.w	r6, #21
    79de:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79e0:	movw	r6, #4152	; 0x1038
    79e4:	movs	r2, #164	; 0xa4
    79e6:	str	r2, [r3, r6]
      _s = s;
    79e8:	movw	r2, #4156	; 0x103c
      _b = b;
    79ec:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79f0:	strb	r1, [r3, r2]
      _b = b;
    79f2:	movw	r2, #4157	; 0x103d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79f6:	mvn.w	r1, #2
      _b = b;
    79fa:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79fc:	movw	r2, #4164	; 0x1044
    7a00:	mvn.w	r6, #91	; 0x5b
    7a04:	strb	r1, [r3, r2]
      _b = b;
    7a06:	movw	r2, #4165	; 0x1045
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a0a:	movs	r1, #182	; 0xb6
      _s = s;
      _b = b;
    7a0c:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a0e:	movw	r2, #4168	; 0x1048
    7a12:	str.w	ip, [r3, r2]
      _s = s;
    7a16:	movw	r2, #4172	; 0x104c
    7a1a:	strb	r6, [r3, r2]
      _b = b;
    7a1c:	movw	r2, #4173	; 0x104d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a20:	mvn.w	r6, #54	; 0x36
      _b = b;
    7a24:	strb.w	sl, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a28:	movw	r2, #4180	; 0x1054
    7a2c:	strb	r6, [r3, r2]
      _b = b;
    7a2e:	movw	r2, #4181	; 0x1055
    7a32:	mvn.w	r6, #47	; 0x2f
    7a36:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a38:	movw	r6, #4184	; 0x1058
    7a3c:	movs	r2, #98	; 0x62
    7a3e:	str	r2, [r3, r6]
      _s = s;
    7a40:	movw	r2, #4188	; 0x105c
    7a44:	mvn.w	r6, #56	; 0x38
    7a48:	strb	r6, [r3, r2]
      _b = b;
    7a4a:	movw	r2, #4189	; 0x105d
    7a4e:	mvn.w	r6, #53	; 0x35
    7a52:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a54:	movw	r2, #4196	; 0x1064
    7a58:	mvn.w	r6, #14
    7a5c:	strb	r6, [r3, r2]
      _b = b;
    7a5e:	movw	r2, #4197	; 0x1065
    7a62:	mvn.w	r6, #50	; 0x32
    7a66:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a68:	movw	r2, #4204	; 0x106c
      _b = b;
    7a6c:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a70:	strb.w	lr, [r3, r2]
      _b = b;
    7a74:	movw	r2, #4205	; 0x106d
    7a78:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a7a:	movw	r2, #4208	; 0x1070
      _s = s;
      _b = b;
    7a7e:	mov.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a82:	str	r5, [r3, r2]
      _s = s;
    7a84:	movw	r2, #4212	; 0x1074
    7a88:	strb	r5, [r3, r2]
      _b = b;
    7a8a:	movw	r2, #4213	; 0x1075
    7a8e:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a90:	movw	r2, #4216	; 0x1078
    7a94:	str	r5, [r3, r2]
      _s = s;
    7a96:	movw	r2, #4220	; 0x107c
    7a9a:	strb	r5, [r3, r2]
      _b = b;
    7a9c:	movw	r2, #4221	; 0x107d
    7aa0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aa2:	add.w	r2, r3, #4224	; 0x1080
    7aa6:	str	r1, [r2, #32]
    7aa8:	movs	r1, #170	; 0xaa
    7aaa:	str	r5, [r2, #0]
    7aac:	add.w	r2, r3, #4096	; 0x1000
    7ab0:	str.w	r1, [r2, #192]	; 0xc0
      _s = s;
      _b = b;
    7ab4:	movw	r2, #4237	; 0x108d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ab8:	mov.w	r1, #4294967295
      _b = b;
    7abc:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7abe:	movw	r2, #4228	; 0x1084
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ac2:	movw	r6, #4232	; 0x1088
      _s = s;
    7ac6:	strb	r5, [r3, r2]
      _b = b;
    7ac8:	movw	r2, #4229	; 0x1085
    7acc:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ace:	movs	r2, #178	; 0xb2
    7ad0:	str	r2, [r3, r6]
      _s = s;
    7ad2:	movw	r2, #4236	; 0x108c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ad6:	movw	r6, #4240	; 0x1090
      _s = s;
    7ada:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7adc:	movs	r2, #178	; 0xb2
    7ade:	str	r2, [r3, r6]
      _s = s;
    7ae0:	movw	r2, #4244	; 0x1094
      _b = b;
    7ae4:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ae8:	strb	r1, [r3, r2]
      _b = b;
    7aea:	movw	r2, #4245	; 0x1095
    7aee:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7af0:	movw	r6, #4248	; 0x1098
    7af4:	movs	r2, #179	; 0xb3
    7af6:	str	r2, [r3, r6]
      _s = s;
    7af8:	movw	r2, #4252	; 0x109c
      _b = b;
    7afc:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b00:	strb	r1, [r3, r2]
      _b = b;
    7b02:	movw	r2, #4253	; 0x109d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b06:	mvn.w	r1, #2
      _b = b;
    7b0a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b0c:	movw	r2, #4260	; 0x10a4
      _b = b;
    7b10:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b14:	strb	r1, [r3, r2]
      _b = b;
    7b16:	movw	r2, #4261	; 0x10a5
    7b1a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b1c:	movw	r6, #4264	; 0x10a8
    7b20:	movs	r2, #176	; 0xb0
    7b22:	str	r2, [r3, r6]
      _s = s;
    7b24:	movw	r2, #4268	; 0x10ac
      _b = b;
    7b28:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b2c:	strb	r1, [r3, r2]
      _b = b;
    7b2e:	movw	r2, #4269	; 0x10ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b32:	mov.w	r1, #4294967295
      _b = b;
    7b36:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b38:	movw	r6, #4272	; 0x10b0
    7b3c:	movs	r2, #176	; 0xb0
    7b3e:	str	r2, [r3, r6]
      _s = s;
    7b40:	movw	r2, #4276	; 0x10b4
      _b = b;
    7b44:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b48:	strb	r1, [r3, r2]
      _b = b;
    7b4a:	movw	r2, #4277	; 0x10b5
    7b4e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b50:	movw	r6, #4280	; 0x10b8
    7b54:	movs	r2, #178	; 0xb2
    7b56:	str	r2, [r3, r6]
      _s = s;
    7b58:	movw	r2, #4284	; 0x10bc
      _b = b;
    7b5c:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b60:	strb	r1, [r3, r2]
      _b = b;
    7b62:	movw	r2, #4285	; 0x10bd
    7b66:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b68:	movw	r2, #4292	; 0x10c4
      _b = b;
    7b6c:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b70:	strb	r1, [r3, r2]
      _b = b;
    7b72:	movw	r2, #4293	; 0x10c5
    7b76:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b78:	movw	r6, #4296	; 0x10c8
    7b7c:	movs	r2, #171	; 0xab
    7b7e:	str	r2, [r3, r6]
      _s = s;
    7b80:	movw	r2, #4300	; 0x10cc
    7b84:	mvn.w	r6, #47	; 0x2f
    7b88:	strb	r6, [r3, r2]
      _b = b;
    7b8a:	movw	r2, #4301	; 0x10cd
    7b8e:	mvn.w	r6, #29
    7b92:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b94:	movw	r6, #4304	; 0x10d0
    7b98:	movs	r2, #173	; 0xad
    7b9a:	str	r2, [r3, r6]
      _s = s;
    7b9c:	movw	r2, #4308	; 0x10d4
      _b = b;
    7ba0:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ba4:	strb	r1, [r3, r2]
      _b = b;
    7ba6:	movw	r2, #4309	; 0x10d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7baa:	movs	r1, #161	; 0xa1
      _s = s;
      _b = b;
    7bac:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bae:	add.w	r2, r3, #4384	; 0x1120
      _s = s;
      _b = b;
    7bb2:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bb6:	str.w	r1, [r2, #-64]
    7bba:	movs	r1, #157	; 0x9d
    7bbc:	str	r5, [r2, #0]
    7bbe:	add.w	r2, r3, #4096	; 0x1000
    7bc2:	str.w	r1, [r2, #256]	; 0x100
      _s = s;
      _b = b;
    7bc6:	movw	r2, #4317	; 0x10dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bca:	add.w	r1, r3, #4448	; 0x1160
      _s = s;
      _b = b;
    7bce:	strb	r6, [r3, r2]
    7bd0:	movw	r2, #4381	; 0x111d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bd4:	movw	r6, #4312	; 0x10d8
      _s = s;
      _b = b;
    7bd8:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bdc:	movs	r2, #171	; 0xab
    7bde:	mov.w	ip, #356	; 0x164
    7be2:	str	r2, [r3, r6]
      _s = s;
    7be4:	movw	r2, #4316	; 0x10dc
    7be8:	mvn.w	r6, #35	; 0x23
    7bec:	strb.w	lr, [r3, r2]
    7bf0:	movw	r2, #4324	; 0x10e4
    7bf4:	strb	r6, [r3, r2]
      _b = b;
    7bf6:	movw	r2, #4325	; 0x10e5
    7bfa:	mvn.w	r6, #108	; 0x6c
    7bfe:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c00:	movw	r6, #4328	; 0x10e8
    7c04:	movs	r2, #150	; 0x96
    7c06:	str	r2, [r3, r6]
      _s = s;
    7c08:	movw	r2, #4332	; 0x10ec
    7c0c:	mvn.w	r6, #54	; 0x36
    7c10:	strb	r6, [r3, r2]
      _b = b;
    7c12:	movw	r2, #4333	; 0x10ed
    7c16:	mvn.w	r6, #64	; 0x40
    7c1a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c1c:	movw	r6, #4336	; 0x10f0
    7c20:	movs	r2, #143	; 0x8f
    7c22:	str	r2, [r3, r6]
      _s = s;
    7c24:	movw	r2, #4340	; 0x10f4
    7c28:	mvn.w	r6, #65	; 0x41
    7c2c:	strb	r6, [r3, r2]
      _b = b;
    7c2e:	movw	r2, #4341	; 0x10f5
    7c32:	mvn.w	r6, #31
    7c36:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c38:	movw	r6, #4344	; 0x10f8
    7c3c:	movs	r2, #133	; 0x85
    7c3e:	str	r2, [r3, r6]
      _s = s;
    7c40:	movw	r2, #4348	; 0x10fc
    7c44:	mvn.w	r6, #75	; 0x4b
    7c48:	strb	r6, [r3, r2]
      _b = b;
    7c4a:	movw	r2, #4349	; 0x10fd
    7c4e:	mvn.w	r6, #20
    7c52:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c54:	movw	r2, #4356	; 0x1104
    7c58:	mvn.w	r6, #29
    7c5c:	strb	r6, [r3, r2]
      _b = b;
    7c5e:	movw	r2, #4357	; 0x1105
    7c62:	mvn.w	r6, #34	; 0x22
    7c66:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c68:	movw	r6, #4360	; 0x1108
    7c6c:	movs	r2, #152	; 0x98
    7c6e:	str	r2, [r3, r6]
      _s = s;
    7c70:	mvn.w	r6, #27
    7c74:	movw	r2, #4364	; 0x110c
    7c78:	strb	r6, [r3, r2]
      _b = b;
    7c7a:	movw	r2, #4365	; 0x110d
    7c7e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c80:	movw	r6, #4368	; 0x1110
    7c84:	movs	r2, #93	; 0x5d
    7c86:	str	r2, [r3, r6]
      _s = s;
    7c88:	movw	r2, #4372	; 0x1114
    7c8c:	mvn.w	r6, #52	; 0x34
    7c90:	strb	r6, [r3, r2]
      _b = b;
    7c92:	movw	r2, #4373	; 0x1115
    7c96:	mvn.w	r6, #44	; 0x2c
    7c9a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c9c:	movw	r6, #4376	; 0x1118
    7ca0:	movs	r2, #112	; 0x70
    7ca2:	str	r2, [r3, r6]
      _s = s;
    7ca4:	mvn.w	r6, #88	; 0x58
    7ca8:	movw	r2, #4380	; 0x111c
    7cac:	strb	r6, [r3, r2]
    7cae:	movw	r2, #4388	; 0x1124
    7cb2:	strb	r5, [r3, r2]
      _b = b;
    7cb4:	movw	r2, #4389	; 0x1125
    7cb8:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cba:	movw	r2, #4392	; 0x1128
    7cbe:	str	r5, [r3, r2]
      _s = s;
    7cc0:	movw	r2, #4396	; 0x112c
    7cc4:	strb	r5, [r3, r2]
      _b = b;
    7cc6:	movw	r2, #4397	; 0x112d
    7cca:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ccc:	add.w	r2, r3, #4416	; 0x1140
    7cd0:	str	r5, [r2, #0]
    7cd2:	movs	r2, #180	; 0xb4
    7cd4:	str.w	r2, [r1], #32
    7cd8:	movw	r2, #4400	; 0x1130
    7cdc:	str	r5, [r3, r2]
    7cde:	movs	r2, #167	; 0xa7
    7ce0:	str	r2, [r1, #0]
      _s = s;
    7ce2:	movw	r2, #4404	; 0x1134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce6:	movw	r1, #4432	; 0x1150
      _s = s;
    7cea:	strb	r5, [r3, r2]
      _b = b;
    7cec:	movw	r2, #4405	; 0x1135
    7cf0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cf2:	movw	r2, #4408	; 0x1138
    7cf6:	str	r5, [r3, r2]
      _s = s;
    7cf8:	movw	r2, #4412	; 0x113c
    7cfc:	strb	r5, [r3, r2]
      _b = b;
    7cfe:	movw	r2, #4413	; 0x113d
    7d02:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d04:	movw	r2, #4420	; 0x1144
    7d08:	strb	r5, [r3, r2]
      _b = b;
    7d0a:	movw	r2, #4421	; 0x1145
    7d0e:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d10:	movw	r2, #4424	; 0x1148
    7d14:	str	r5, [r3, r2]
      _s = s;
    7d16:	movw	r2, #4428	; 0x114c
    7d1a:	strb	r5, [r3, r2]
      _b = b;
    7d1c:	movw	r2, #4429	; 0x114d
    7d20:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d22:	movs	r2, #180	; 0xb4
    7d24:	str	r2, [r3, r1]
      _s = s;
    7d26:	movw	r2, #4436	; 0x1154
    7d2a:	mov.w	r1, #4294967295
    7d2e:	strb	r1, [r3, r2]
      _b = b;
    7d30:	movw	r2, #4437	; 0x1155
    7d34:	mov.w	r1, #48	; 0x30
    7d38:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d3a:	movw	r1, #4440	; 0x1158
    7d3e:	movs	r2, #177	; 0xb1
    7d40:	str	r2, [r3, r1]
      _s = s;
    7d42:	movw	r2, #4444	; 0x115c
    7d46:	mov.w	r1, #4294967295
    7d4a:	strb	r1, [r3, r2]
      _b = b;
    7d4c:	movw	r2, #4445	; 0x115d
    7d50:	mvn.w	r1, #120	; 0x78
    7d54:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d56:	movw	r2, #4452	; 0x1164
    7d5a:	mov.w	r1, #4294967295
    7d5e:	strb	r1, [r3, r2]
      _b = b;
    7d60:	movw	r2, #4453	; 0x1165
    7d64:	mvn.w	r1, #109	; 0x6d
    7d68:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d6a:	movw	r1, #4456	; 0x1168
    7d6e:	movs	r2, #177	; 0xb1
    7d70:	str	r2, [r3, r1]
      _s = s;
    7d72:	movw	r2, #4460	; 0x116c
    7d76:	mov.w	r1, #4294967295
    7d7a:	strb	r1, [r3, r2]
      _b = b;
    7d7c:	movw	r2, #4461	; 0x116d
    7d80:	mvn.w	r1, #101	; 0x65
    7d84:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d86:	movw	r1, #4464	; 0x1170
    7d8a:	movs	r2, #174	; 0xae
    7d8c:	str	r2, [r3, r1]
      _s = s;
    7d8e:	movw	r2, #4468	; 0x1174
    7d92:	mvn.w	r1, #2
    7d96:	strb	r1, [r3, r2]
      _b = b;
    7d98:	movw	r2, #4469	; 0x1175
    7d9c:	mvn.w	r1, #76	; 0x4c
    7da0:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7da2:	movw	r1, #4472	; 0x1178
    7da6:	movs	r2, #178	; 0xb2
    7da8:	str	r2, [r3, r1]
      _s = s;
    7daa:	movw	r2, #4476	; 0x117c
    7dae:	mov.w	r1, #4294967295
    7db2:	strb	r1, [r3, r2]
      _b = b;
    7db4:	movw	r2, #4477	; 0x117d
    7db8:	mvn.w	r1, #82	; 0x52
    7dbc:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dbe:	movw	r2, #4484	; 0x1184
      _b = b;
    7dc2:	mov.w	r1, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dc6:	strb.w	lr, [r3, r2]
      _b = b;
    7dca:	movw	r2, #4485	; 0x1185
    7dce:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dd0:	add.w	r2, r3, #4448	; 0x1160
    7dd4:	movs	r1, #159	; 0x9f
    7dd6:	str	r1, [r2, #64]	; 0x40
    7dd8:	movs	r1, #137	; 0x89
    7dda:	str	r1, [r2, #96]	; 0x60
      _s = s;
      _b = b;
    7ddc:	movw	r2, #4517	; 0x11a5
    7de0:	mov.w	r1, #109	; 0x6d
    7de4:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7de6:	movw	r1, #4528	; 0x11b0
    7dea:	movs	r2, #143	; 0x8f
    7dec:	str	r2, [r3, r1]
    7dee:	movw	r1, #4536	; 0x11b8
    7df2:	movs	r2, #125	; 0x7d
    7df4:	str	r2, [r3, r1]
    7df6:	movw	r1, #4488	; 0x1188
    7dfa:	movs	r2, #152	; 0x98
    7dfc:	str	r2, [r3, r1]
      _s = s;
    7dfe:	movw	r2, #4492	; 0x118c
    7e02:	mvn.w	r1, #127	; 0x7f
    7e06:	strb	r1, [r3, r2]
      _b = b;
    7e08:	movw	r2, #4493	; 0x118d
    7e0c:	mvn.w	r1, #78	; 0x4e
    7e10:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e12:	movs	r1, #156	; 0x9c
    7e14:	movw	r2, #4496	; 0x1190
    7e18:	str	r1, [r3, r2]
    7e1a:	movw	r2, #4520	; 0x11a8
    7e1e:	str	r1, [r3, r2]
      _s = s;
    7e20:	movw	r2, #4500	; 0x1194
    7e24:	mvn.w	r1, #103	; 0x67
    7e28:	strb	r1, [r3, r2]
      _b = b;
    7e2a:	movw	r2, #4501	; 0x1195
    7e2e:	mvn.w	r1, #33	; 0x21
    7e32:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e34:	movw	r1, #4504	; 0x1198
    7e38:	movs	r2, #162	; 0xa2
    7e3a:	str	r2, [r3, r1]
      _s = s;
    7e3c:	movw	r2, #4508	; 0x119c
    7e40:	mov.w	r1, #4294967295
    7e44:	strb.w	lr, [r3, r2]
      _b = b;
    7e48:	movw	r2, #4509	; 0x119d
    7e4c:	strb	r7, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e4e:	movw	r2, #4516	; 0x11a4
    7e52:	strb	r1, [r3, r2]
    7e54:	movw	r2, #4524	; 0x11ac
    7e58:	strb	r1, [r3, r2]
      _b = b;
    7e5a:	movw	r2, #4525	; 0x11ad
    7e5e:	mov.w	r1, #103	; 0x67
    7e62:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e64:	movw	r2, #4532	; 0x11b4
    7e68:	mov.w	r1, #4294967295
    7e6c:	strb	r1, [r3, r2]
      _b = b;
    7e6e:	movw	r2, #4533	; 0x11b5
    7e72:	mvn.w	r1, #69	; 0x45
    7e76:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e78:	movw	r2, #4540	; 0x11bc
    7e7c:	mvn.w	r1, #94	; 0x5e
    7e80:	strb	r1, [r3, r2]
      _b = b;
    7e82:	movw	r2, #4541	; 0x11bd
    7e86:	mvn.w	r1, #73	; 0x49
    7e8a:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e8c:	movw	r2, #4548	; 0x11c4
    7e90:	mvn.w	r1, #50	; 0x32
    7e94:	strb	r1, [r3, r2]
      _b = b;
    7e96:	movw	r2, #4549	; 0x11c5
    7e9a:	mvn.w	r1, #89	; 0x59
    7e9e:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ea0:	movw	r1, #4552	; 0x11c8
    7ea4:	movs	r2, #139	; 0x8b
    7ea6:	str	r2, [r3, r1]
      _s = s;
    7ea8:	movw	r2, #4556	; 0x11cc
    7eac:	mov.w	r1, #4294967295
    7eb0:	strb	r1, [r3, r2]
      _b = b;
    7eb2:	movw	r2, #4557	; 0x11cd
    7eb6:	mov.w	r1, #88	; 0x58
    7eba:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ebc:	movw	r2, #4560	; 0x11d0
      _s = s;
      _b = b;
    7ec0:	movs	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ec2:	str	r5, [r3, r2]
      _s = s;
    7ec4:	movw	r2, #4564	; 0x11d4
    7ec8:	strb	r5, [r3, r2]
      _b = b;
    7eca:	movw	r2, #4565	; 0x11d5
    7ece:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ed0:	movw	r2, #4568	; 0x11d8
    7ed4:	str	r5, [r3, r2]
      _s = s;
    7ed6:	movw	r2, #4572	; 0x11dc
    7eda:	strb	r5, [r3, r2]
      _b = b;
    7edc:	movw	r2, #4573	; 0x11dd
    7ee0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ee2:	add.w	r2, r3, #4576	; 0x11e0
    7ee6:	str	r5, [r4, #0]
    7ee8:	str	r5, [r2, #0]
    7eea:	movs	r2, #5
      _s = s;
    7eec:	strb	r5, [r4, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eee:	str	r2, [r4, #48]	; 0x30
      _s = s;
    7ef0:	mvn.w	r2, #22
      _b = b;
    7ef4:	strb	r5, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ef6:	strb.w	r2, [r4, #52]	; 0x34
    7efa:	movw	r2, #4580	; 0x11e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7efe:	str	r5, [r4, #8]
      _s = s;
    7f00:	strb	r5, [r3, r2]
      _b = b;
    7f02:	movw	r2, #4581	; 0x11e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f06:	strb	r5, [r4, #12]
      _b = b;
    7f08:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f0a:	movw	r2, #4584	; 0x11e8
      _s = s;
      _b = b;
    7f0e:	strb	r5, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f10:	str	r5, [r3, r2]
      _s = s;
    7f12:	movw	r2, #4588	; 0x11ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f16:	str	r5, [r4, #16]
      _s = s;
    7f18:	strb	r5, [r3, r2]
      _b = b;
    7f1a:	movw	r2, #4589	; 0x11ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f1e:	strb	r5, [r4, #20]
      _b = b;
    7f20:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f22:	movw	r2, #4592	; 0x11f0
      _s = s;
      _b = b;
    7f26:	strb	r5, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f28:	str	r5, [r3, r2]
      _s = s;
    7f2a:	movw	r2, #4596	; 0x11f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f2e:	str	r5, [r4, #24]
      _s = s;
    7f30:	strb	r5, [r3, r2]
      _b = b;
    7f32:	movw	r2, #4597	; 0x11f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f36:	strb	r5, [r4, #28]
      _b = b;
    7f38:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f3a:	movw	r2, #4600	; 0x11f8
      _s = s;
      _b = b;
    7f3e:	strb	r5, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f40:	str	r5, [r3, r2]
      _s = s;
    7f42:	movw	r2, #4604	; 0x11fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f46:	str	r5, [r4, #32]
      _s = s;
    7f48:	strb	r5, [r3, r2]
      _b = b;
    7f4a:	movw	r2, #4605	; 0x11fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f4e:	strb.w	r5, [r4, #36]	; 0x24
      _b = b;
    7f52:	strb	r5, [r3, r2]
    7f54:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f58:	mvn.w	r2, #46	; 0x2e
      _b = b;
    7f5c:	strb.w	r5, [r4, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f60:	str	r5, [r4, #40]	; 0x28
      _s = s;
    7f62:	strb.w	r5, [r4, #44]	; 0x2c
      _b = b;
    7f66:	strb.w	r5, [r4, #45]	; 0x2d
    7f6a:	strb.w	r3, [r4, #53]	; 0x35
    7f6e:	mvn.w	r3, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f72:	strb.w	r2, [r4, #84]	; 0x54
      _b = b;
    7f76:	mvn.w	r2, #25
    7f7a:	strb.w	r3, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f7e:	mvn.w	r3, #63	; 0x3f
      _b = b;
    7f82:	strb.w	r2, [r4, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f86:	mov.w	r2, #4294967295
    7f8a:	strb.w	r3, [r4, #68]	; 0x44
    7f8e:	mvn.w	r3, #124	; 0x7c
    7f92:	strb.w	r2, [r4, #92]	; 0x5c
      _b = b;
    7f96:	mvn.w	r2, #83	; 0x53
    7f9a:	strb.w	r0, [r4, #69]	; 0x45
    7f9e:	strb.w	r2, [r4, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fa2:	movs	r2, #7
      _s = s;
    7fa4:	strb.w	r3, [r4, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fa8:	movs	r3, #35	; 0x23
    7faa:	str	r2, [r4, #96]	; 0x60
      _s = s;
    7fac:	mvn.w	r2, #20
      _b = b;
    7fb0:	strb.w	lr, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fb4:	strb.w	r2, [r4, #100]	; 0x64
      _b = b;
    7fb8:	mvn.w	r2, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fbc:	strb.w	r7, [r4, #108]	; 0x6c
      _b = b;
    7fc0:	strb.w	r2, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fc4:	movs	r2, #7
      _s = s;
      _b = b;
    7fc6:	strb.w	lr, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fca:	str	r2, [r4, #112]	; 0x70
      _s = s;
    7fcc:	mvn.w	r2, #103	; 0x67
      _b = b;
    7fd0:	strb.w	r9, [r4, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fd4:	strb.w	r2, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fd8:	movs	r2, #16
      _s = s;
    7fda:	strb.w	sl, [r4, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fde:	str	r2, [r4, #120]	; 0x78
      _s = s;
    7fe0:	mvn.w	r2, #36	; 0x24
    7fe4:	strb.w	r2, [r4, #124]	; 0x7c
      _b = b;
    7fe8:	mov.w	r2, #4294967295
    7fec:	strb.w	r2, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ff0:	movs	r2, #12
    7ff2:	str.w	r2, [r4, #128]	; 0x80
      _s = s;
    7ff6:	mvn.w	r2, #35	; 0x23
    7ffa:	strb.w	r2, [r4, #132]	; 0x84
      _b = b;
    7ffe:	mov.w	r2, #4294967295
    8002:	strb.w	r2, [r4, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8006:	movs	r2, #10
    8008:	str.w	r2, [r4, #136]	; 0x88
      _s = s;
    800c:	mvn.w	r2, #82	; 0x52
    8010:	strb.w	r2, [r4, #140]	; 0x8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8014:	movs	r2, #2
    8016:	str	r2, [r4, #56]	; 0x38
    8018:	str	r2, [r4, #104]	; 0x68
    801a:	movs	r2, #4
    801c:	str	r2, [r4, #64]	; 0x40
    801e:	movs	r2, #1
    8020:	str	r2, [r4, #72]	; 0x48
    8022:	movw	r2, #359	; 0x167
    8026:	str	r2, [r4, #80]	; 0x50
    8028:	movw	r2, #355	; 0x163
    802c:	str	r2, [r4, #88]	; 0x58
      _s = s;
      _b = b;
    802e:	mov.w	r2, #4294967295
    8032:	strb.w	r2, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8036:	movs	r2, #2
      _s = s;
    8038:	strb.w	r0, [r4, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    803c:	str.w	r2, [r4, #144]	; 0x90
      _s = s;
    8040:	mvn.w	r2, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8044:	str.w	r5, [r4, #176]	; 0xb0
      _s = s;
    8048:	strb.w	r2, [r4, #148]	; 0x94
      _b = b;
    804c:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8050:	str.w	r5, [r4, #184]	; 0xb8
      _s = s;
      _b = b;
    8054:	strb.w	r2, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8058:	mvn.w	r2, #13
    805c:	strb.w	r5, [r4, #188]	; 0xbc
    8060:	strb.w	r2, [r4, #156]	; 0x9c
      _b = b;
    8064:	mvn.w	r2, #64	; 0x40
    8068:	strb.w	r5, [r4, #189]	; 0xbd
    806c:	strb.w	r2, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8070:	movs	r2, #2
    8072:	str.w	r5, [r4, #192]	; 0xc0
    8076:	str.w	r2, [r4, #160]	; 0xa0
      _s = s;
    807a:	mvn.w	r2, #27
    807e:	strb.w	r5, [r4, #196]	; 0xc4
    8082:	strb.w	r2, [r4, #164]	; 0xa4
      _b = b;
    8086:	mvn.w	r2, #23
    808a:	strb.w	r5, [r4, #197]	; 0xc5
    808e:	strb.w	r2, [r4, #165]	; 0xa5
    8092:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8096:	str.w	r5, [r4, #200]	; 0xc8
      _s = s;
      _b = b;
    809a:	strb.w	r2, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    809e:	mov.w	r2, #4294967295
    80a2:	strb.w	r5, [r4, #204]	; 0xcc
    80a6:	strb.w	r2, [r4, #180]	; 0xb4
      _b = b;
    80aa:	mov.w	r2, #14
    80ae:	strb.w	r5, [r4, #205]	; 0xcd
    80b2:	strb.w	r2, [r4, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80b6:	movw	r2, #359	; 0x167
    80ba:	str.w	r5, [r4, #208]	; 0xd0
    80be:	str.w	r2, [r4, #224]	; 0xe0
      _s = s;
    80c2:	mvn.w	r2, #8
    80c6:	strb.w	r5, [r4, #212]	; 0xd4
    80ca:	strb.w	r2, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80ce:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    80d2:	strb.w	r5, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80d6:	str.w	r2, [r4, #152]	; 0x98
    80da:	movs	r2, #15
    80dc:	str.w	r5, [r4, #216]	; 0xd8
    80e0:	str.w	r2, [r4, #168]	; 0xa8
      _s = s;
      _b = b;
    80e4:	mov.w	r2, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80e8:	strb.w	r5, [r4, #220]	; 0xdc
      _b = b;
    80ec:	strb.w	r5, [r4, #221]	; 0xdd
    80f0:	strb.w	r2, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f4:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    80f8:	strb.w	r9, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80fc:	str.w	r2, [r4, #232]	; 0xe8
      _s = s;
    8100:	mvn.w	r2, #54	; 0x36
      _b = b;
    8104:	strb.w	r9, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8108:	strb.w	r2, [r4, #236]	; 0xec
      _b = b;
    810c:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8110:	str.w	r8, [r4, #296]	; 0x128
      _s = s;
      _b = b;
    8114:	strb.w	r2, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8118:	mvn.w	r2, #34	; 0x22
    811c:	strb.w	r2, [r4, #244]	; 0xf4
      _b = b;
    8120:	mvn.w	r2, #13
    8124:	strb.w	r2, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8128:	movs	r2, #9
    812a:	str.w	r2, [r4, #248]	; 0xf8
      _s = s;
    812e:	mvn.w	r2, #32
    8132:	strb.w	r2, [r4, #252]	; 0xfc
      _b = b;
    8136:	mov.w	r2, #4294967295
    813a:	strb.w	r2, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    813e:	movs	r2, #11
    8140:	str.w	r2, [r4, #256]	; 0x100
      _s = s;
    8144:	mvn.w	r2, #32
    8148:	strb.w	r2, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    814c:	movs	r2, #10
    814e:	str.w	r2, [r4, #264]	; 0x108
      _s = s;
    8152:	mvn.w	r2, #76	; 0x4c
    8156:	strb.w	r2, [r4, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    815a:	movs	r2, #2
    815c:	str.w	r2, [r4, #272]	; 0x110
      _s = s;
    8160:	mov.w	r2, #99	; 0x63
    8164:	strb.w	r2, [r4, #276]	; 0x114
      _b = b;
    8168:	mvn.w	r2, #2
    816c:	strb.w	r2, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8170:	movw	r2, #359	; 0x167
    8174:	str.w	r2, [r4, #280]	; 0x118
      _s = s;
    8178:	mvn.w	r2, #43	; 0x2b
    817c:	strb.w	r2, [r4, #284]	; 0x11c
      _b = b;
    8180:	mvn.w	r2, #38	; 0x26
    8184:	strb.w	r2, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8188:	movs	r2, #2
    818a:	str.w	r2, [r4, #288]	; 0x120
      _s = s;
    818e:	mvn.w	r2, #34	; 0x22
    8192:	strb.w	r2, [r4, #292]	; 0x124
      _b = b;
    8196:	mvn.w	r2, #52	; 0x34
    819a:	strb.w	r2, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    819e:	mvn.w	r2, #121	; 0x79
    81a2:	strb.w	r2, [r4, #300]	; 0x12c
      _b = b;
    81a6:	mov.w	r2, #4294967295
    81aa:	strb.w	r2, [r4, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81ae:	movs	r2, #15
    81b0:	str.w	r2, [r4, #304]	; 0x130
      _s = s;
    81b4:	mvn.w	r2, #32
    81b8:	strb.w	r2, [r4, #308]	; 0x134
      _b = b;
    81bc:	mov.w	r2, #4294967295
    81c0:	strb.w	r2, [r4, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81c4:	movs	r2, #11
    81c6:	str.w	r2, [r4, #312]	; 0x138
      _s = s;
    81ca:	mvn.w	r2, #19
    81ce:	strb.w	r2, [r4, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81d2:	movs	r2, #8
    81d4:	str.w	r2, [r4, #240]	; 0xf0
      _s = s;
      _b = b;
    81d8:	mvn.w	r2, #57	; 0x39
    81dc:	strb.w	r2, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81e0:	movs	r2, #9
      _s = s;
      _b = b;
    81e2:	strb.w	lr, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81e6:	str.w	r2, [r4, #320]	; 0x140
      _s = s;
    81ea:	mvn.w	r2, #16
      _b = b;
    81ee:	strb.w	r9, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81f2:	strb.w	r2, [r4, #324]	; 0x144
      _b = b;
    81f6:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81fa:	str.w	r5, [r4, #344]	; 0x158
      _s = s;
      _b = b;
    81fe:	strb.w	r2, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8202:	movs	r2, #11
      _s = s;
      _b = b;
    8204:	strb.w	sl, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8208:	str.w	r2, [r4, #328]	; 0x148
      _s = s;
    820c:	mvn.w	r2, #32
      _b = b;
    8210:	strb.w	fp, [r4, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8214:	strb.w	r2, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8218:	movs	r2, #1
    821a:	str.w	r5, [r4, #376]	; 0x178
    821e:	str.w	r2, [r4, #336]	; 0x150
      _s = s;
    8222:	mvn.w	r2, #121	; 0x79
    8226:	strb.w	r5, [r4, #380]	; 0x17c
    822a:	strb.w	r2, [r4, #340]	; 0x154
    822e:	mvn.w	r2, #81	; 0x51
      _b = b;
    8232:	strb.w	r5, [r4, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8236:	strb.w	r2, [r4, #348]	; 0x15c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    823a:	movs	r2, #17
    823c:	str.w	r5, [r4, #384]	; 0x180
    8240:	str.w	r2, [r4, #352]	; 0x160
      _s = s;
    8244:	mvn.w	r2, #23
    8248:	strb.w	r5, [r4, #388]	; 0x184
    824c:	strb.w	r2, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8250:	movs	r2, #5
      _s = s;
      _b = b;
    8252:	strb.w	r5, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8256:	str.w	r2, [r4, #360]	; 0x168
      _s = s;
    825a:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    825e:	str.w	r5, [r4, #392]	; 0x188
      _s = s;
    8262:	strb.w	r2, [r4, #364]	; 0x16c
      _b = b;
    8266:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    826a:	strb.w	r5, [r4, #396]	; 0x18c
      _b = b;
    826e:	strb.w	r2, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8272:	movs	r2, #2
      _s = s;
      _b = b;
    8274:	strb.w	r5, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8278:	str.w	r2, [r4, #368]	; 0x170
      _s = s;
    827c:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8280:	str.w	r5, [r4, #400]	; 0x190
      _s = s;
    8284:	strb.w	r2, [r4, #372]	; 0x174
      _b = b;
    8288:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    828c:	strb.w	r5, [r4, #404]	; 0x194
      _b = b;
    8290:	strb.w	r2, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8294:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    8298:	strb.w	r5, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    829c:	str.w	r2, [r4, #408]	; 0x198
      _s = s;
    82a0:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82a4:	str.w	ip, [r4, #416]	; 0x1a0
      _s = s;
    82a8:	strb.w	r2, [r4, #412]	; 0x19c
      _b = b;
    82ac:	mov.w	r2, #94	; 0x5e
    82b0:	strb.w	lr, [r4, #429]	; 0x1ad
    82b4:	strb.w	r2, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82b8:	mvn.w	r2, #11
      _b = b;
    82bc:	strb.w	r9, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82c0:	strb.w	r2, [r4, #420]	; 0x1a4
    82c4:	mvn.w	r2, #42	; 0x2a
      _b = b;
    82c8:	strb.w	sl, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82cc:	strb.w	r2, [r4, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82d0:	movs	r2, #13
    82d2:	str.w	r8, [r4, #424]	; 0x1a8
    82d6:	str.w	r2, [r4, #432]	; 0x1b0
      _s = s;
    82da:	mvn.w	r2, #32
    82de:	strb.w	r2, [r4, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82e2:	movs	r2, #13
    82e4:	str.w	r2, [r4, #440]	; 0x1b8
      _s = s;
    82e8:	mvn.w	r2, #25
    82ec:	strb.w	r2, [r4, #444]	; 0x1bc
      _b = b;
    82f0:	mvn.w	r2, #10
    82f4:	strb.w	r2, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82f8:	movs	r2, #15
    82fa:	str.w	r2, [r4, #448]	; 0x1c0
      _s = s;
    82fe:	mvn.w	r2, #24
    8302:	strb.w	r2, [r4, #452]	; 0x1c4
      _b = b;
    8306:	mvn.w	r2, #16
    830a:	strb.w	r2, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    830e:	movs	r2, #17
    8310:	str.w	r2, [r4, #456]	; 0x1c8
      _s = s;
    8314:	mvn.w	r2, #34	; 0x22
    8318:	strb.w	r2, [r4, #460]	; 0x1cc
      _b = b;
    831c:	mov.w	r2, #4294967295
    8320:	strb.w	r2, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8324:	movs	r2, #16
    8326:	str.w	r2, [r4, #464]	; 0x1d0
      _s = s;
    832a:	mvn.w	r2, #37	; 0x25
    832e:	strb.w	r2, [r4, #468]	; 0x1d4
      _b = b;
    8332:	mov.w	r2, #4294967295
    8336:	strb.w	r2, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    833a:	movs	r2, #3
    833c:	str.w	r2, [r4, #472]	; 0x1d8
      _s = s;
    8340:	mvn.w	r2, #89	; 0x59
    8344:	strb.w	r2, [r4, #476]	; 0x1dc
      _b = b;
    8348:	mvn.w	r2, #16
    834c:	strb.w	r2, [r4, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8350:	movs	r2, #2
    8352:	str.w	r2, [r4, #480]	; 0x1e0
      _s = s;
    8356:	mvn.w	r2, #116	; 0x74
    835a:	strb.w	r2, [r4, #484]	; 0x1e4
      _b = b;
    835e:	mvn.w	r2, #40	; 0x28
    8362:	strb.w	r2, [r4, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8366:	movs	r2, #10
    8368:	str.w	r2, [r4, #488]	; 0x1e8
      _s = s;
    836c:	mvn.w	r2, #73	; 0x49
    8370:	strb.w	r2, [r4, #492]	; 0x1ec
      _b = b;
    8374:	mov.w	r2, #4294967295
    8378:	strb.w	r2, [r4, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    837c:	movs	r2, #13
      _s = s;
    837e:	strb.w	lr, [r4, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8382:	str.w	r2, [r4, #496]	; 0x1f0
    8386:	movs	r2, #14
      _s = s;
      _b = b;
    8388:	strb.w	r9, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    838c:	str.w	r2, [r4, #504]	; 0x1f8
      _s = s;
      _b = b;
    8390:	mov.w	r2, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8394:	strb.w	sl, [r4, #500]	; 0x1f4
      _b = b;
    8398:	strb.w	r2, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    839c:	movs	r2, #9
      _s = s;
      _b = b;
    839e:	strb.w	fp, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83a2:	str.w	r2, [r4, #512]	; 0x200
      _s = s;
      _b = b;
    83a6:	mov.w	r2, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83aa:	strb.w	fp, [r4, #516]	; 0x204
      _b = b;
    83ae:	strb.w	r2, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83b2:	movs	r2, #10
      _s = s;
    83b4:	strb.w	sl, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83b8:	str.w	r2, [r4, #520]	; 0x208
      _s = s;
      _b = b;
    83bc:	mvn.w	r2, #20
    83c0:	strb.w	fp, [r4, #549]	; 0x225
    83c4:	strb.w	r2, [r4, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83c8:	movs	r2, #4
    83ca:	str.w	r5, [r4, #568]	; 0x238
    83ce:	str.w	r2, [r4, #528]	; 0x210
      _s = s;
    83d2:	mvn.w	r2, #104	; 0x68
    83d6:	strb.w	r5, [r4, #572]	; 0x23c
    83da:	strb.w	r2, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83de:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    83e2:	strb.w	r5, [r4, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83e6:	str.w	r2, [r4, #536]	; 0x218
      _s = s;
    83ea:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83ee:	str.w	r5, [r4, #576]	; 0x240
      _s = s;
    83f2:	strb.w	r2, [r4, #540]	; 0x21c
      _b = b;
    83f6:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83fa:	strb.w	r5, [r4, #580]	; 0x244
      _b = b;
    83fe:	strb.w	r2, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8402:	movs	r2, #17
    8404:	str.w	r2, [r4, #544]	; 0x220
      _s = s;
    8408:	mvn.w	r2, #22
    840c:	strb.w	r2, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8410:	movw	r2, #357	; 0x165
    8414:	str.w	r2, [r4, #552]	; 0x228
      _s = s;
    8418:	mvn.w	r2, #16
    841c:	strb.w	r2, [r4, #556]	; 0x22c
      _b = b;
    8420:	mvn.w	r2, #56	; 0x38
    8424:	strb.w	r2, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8428:	mov.w	r2, #4294967295
    842c:	strb.w	r2, [r4, #564]	; 0x234
      _b = b;
    8430:	mvn.w	r2, #78	; 0x4e
    8434:	strb.w	r2, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8438:	mov.w	r2, #354	; 0x162
    843c:	str.w	r2, [r4, #560]	; 0x230
    8440:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    8444:	strb.w	r5, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8448:	str.w	r2, [r4, #592]	; 0x250
      _s = s;
    844c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8450:	str.w	r3, [r4, #640]	; 0x280
      _s = s;
      _b = b;
    8454:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8458:	strb.w	r2, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    845c:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    8460:	strb.w	r9, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8464:	str.w	r2, [r4, #600]	; 0x258
      _s = s;
    8468:	mov.w	r2, #4294967295
    846c:	strb.w	r0, [r4, #668]	; 0x29c
    8470:	strb.w	r2, [r4, #604]	; 0x25c
      _b = b;
    8474:	mvn.w	r2, #113	; 0x71
    8478:	strb.w	r1, [r4, #597]	; 0x255
    847c:	mvn.w	r1, #32
    8480:	strb.w	r2, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8484:	movs	r2, #3
    8486:	str.w	r5, [r4, #584]	; 0x248
    848a:	str.w	r2, [r4, #608]	; 0x260
      _s = s;
    848e:	mvn.w	r2, #28
    8492:	strb.w	r5, [r4, #588]	; 0x24c
    8496:	strb.w	r2, [r4, #612]	; 0x264
      _b = b;
    849a:	mvn.w	r2, #34	; 0x22
    849e:	strb.w	r5, [r4, #589]	; 0x24d
    84a2:	strb.w	r2, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84a6:	movs	r2, #10
      _s = s;
    84a8:	strb.w	fp, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84ac:	str.w	r2, [r4, #616]	; 0x268
      _s = s;
    84b0:	mvn.w	r2, #33	; 0x21
    84b4:	strb.w	r2, [r4, #620]	; 0x26c
      _b = b;
    84b8:	mvn.w	r2, #7
    84bc:	strb.w	r2, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84c0:	movs	r2, #15
    84c2:	str.w	r2, [r4, #624]	; 0x270
      _s = s;
    84c6:	mvn.w	r2, #25
    84ca:	strb.w	r2, [r4, #628]	; 0x274
      _b = b;
    84ce:	mov.w	r2, #4294967295
    84d2:	strb.w	r2, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84d6:	movs	r2, #17
    84d8:	str.w	r2, [r4, #632]	; 0x278
      _s = s;
    84dc:	mvn.w	r2, #10
    84e0:	strb.w	r2, [r4, #636]	; 0x27c
      _b = b;
    84e4:	mvn.w	r2, #45	; 0x2d
    84e8:	strb.w	r2, [r4, #637]	; 0x27d
    84ec:	mvn.w	r2, #102	; 0x66
    84f0:	strb.w	r2, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84f4:	movs	r2, #20
    84f6:	str.w	r2, [r4, #648]	; 0x288
      _s = s;
    84fa:	mvn.w	r2, #35	; 0x23
    84fe:	strb.w	r2, [r4, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8502:	movs	r2, #18
    8504:	str.w	r2, [r4, #656]	; 0x290
      _s = s;
    8508:	mvn.w	r2, #37	; 0x25
    850c:	strb.w	r2, [r4, #660]	; 0x294
      _b = b;
    8510:	mov.w	r2, #4294967295
    8514:	strb.w	r2, [r4, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8518:	movs	r2, #10
    851a:	str.w	r2, [r4, #664]	; 0x298
      _s = s;
      _b = b;
    851e:	strb.w	r3, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8522:	movs	r3, #3
    8524:	str.w	r2, [r4, #680]	; 0x2a8
      _s = s;
      _b = b;
    8528:	mvn.w	r2, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    852c:	str.w	r3, [r4, #672]	; 0x2a0
      _s = s;
    8530:	mvn.w	r3, #73	; 0x49
      _b = b;
    8534:	strb.w	r9, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8538:	strb.w	r3, [r4, #676]	; 0x2a4
      _b = b;
    853c:	mvn.w	r3, #51	; 0x33
    8540:	strb.w	r9, [r4, #717]	; 0x2cd
    8544:	strb.w	r3, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8548:	mvn.w	r3, #81	; 0x51
      _b = b;
    854c:	strb.w	r6, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8550:	movs	r6, #14
      _s = s;
    8552:	strb.w	r3, [r4, #684]	; 0x2ac
      _b = b;
    8556:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    855a:	strb.w	lr, [r4, #756]	; 0x2f4
      _b = b;
    855e:	strb.w	r3, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8562:	movs	r3, #13
      _s = s;
    8564:	strb.w	fp, [r4, #708]	; 0x2c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8568:	str.w	r3, [r4, #688]	; 0x2b0
      _s = s;
    856c:	mvn.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8570:	str.w	r8, [r4, #736]	; 0x2e0
      _s = s;
    8574:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8578:	movs	r3, #12
    857a:	str.w	r3, [r4, #696]	; 0x2b8
      _s = s;
    857e:	mvn.w	r3, #9
    8582:	strb.w	r3, [r4, #700]	; 0x2bc
      _b = b;
    8586:	mvn.w	r3, #81	; 0x51
    858a:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    858e:	movs	r3, #12
    8590:	str.w	r3, [r4, #704]	; 0x2c0
      _s = s;
      _b = b;
    8594:	mvn.w	r3, #114	; 0x72
    8598:	strb.w	r3, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    859c:	movs	r3, #12
    859e:	str.w	r3, [r4, #712]	; 0x2c8
      _s = s;
    85a2:	mvn.w	r3, #33	; 0x21
    85a6:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85aa:	movs	r3, #7
    85ac:	str.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    85b0:	mvn.w	r3, #110	; 0x6e
    85b4:	strb.w	r3, [r4, #724]	; 0x2d4
      _b = b;
    85b8:	mov.w	r3, #4294967295
    85bc:	strb.w	r3, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85c0:	movs	r3, #1
    85c2:	str.w	r3, [r4, #728]	; 0x2d8
      _s = s;
    85c6:	mvn.w	r3, #28
    85ca:	strb.w	r3, [r4, #732]	; 0x2dc
      _b = b;
    85ce:	mvn.w	r3, #36	; 0x24
    85d2:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85d6:	mvn.w	r3, #23
    85da:	strb.w	r3, [r4, #740]	; 0x2e4
      _b = b;
    85de:	mvn.w	r3, #26
    85e2:	strb.w	r3, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85e6:	movw	r3, #357	; 0x165
    85ea:	str.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    85ee:	mvn.w	r3, #11
    85f2:	strb.w	r3, [r4, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85f6:	mov.w	r3, #354	; 0x162
    85fa:	str.w	r3, [r4, #752]	; 0x2f0
      _s = s;
      _b = b;
    85fe:	mvn.w	r3, #50	; 0x32
    8602:	strb.w	r3, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8606:	movs	r3, #1
      _s = s;
      _b = b;
    8608:	strb.w	r2, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    860c:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8610:	str.w	r3, [r4, #776]	; 0x308
      _s = s;
    8614:	mvn.w	r3, #10
    8618:	strb.w	r2, [r4, #844]	; 0x34c
      _b = b;
    861c:	mvn.w	r2, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8620:	strb.w	r3, [r4, #780]	; 0x30c
      _b = b;
    8624:	mov.w	r3, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8628:	str.w	ip, [r4, #792]	; 0x318
      _s = s;
      _b = b;
    862c:	strb.w	r3, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8630:	movs	r3, #2
    8632:	str.w	r5, [r4, #760]	; 0x2f8
    8636:	str.w	r3, [r4, #784]	; 0x310
      _s = s;
    863a:	mvn.w	r3, #16
    863e:	strb.w	r5, [r4, #764]	; 0x2fc
    8642:	strb.w	r3, [r4, #788]	; 0x314
      _b = b;
    8646:	mvn.w	r3, #57	; 0x39
    864a:	strb.w	r5, [r4, #765]	; 0x2fd
    864e:	strb.w	r3, [r4, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8652:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8656:	str.w	r5, [r4, #768]	; 0x300
      _s = s;
    865a:	strb.w	r3, [r4, #796]	; 0x31c
      _b = b;
    865e:	mvn.w	r3, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8662:	strb.w	r5, [r4, #772]	; 0x304
      _b = b;
    8666:	strb.w	r3, [r4, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    866a:	movs	r3, #8
      _s = s;
      _b = b;
    866c:	strb.w	r5, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8670:	str.w	r3, [r4, #800]	; 0x320
      _s = s;
    8674:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8678:	str.w	r8, [r4, #808]	; 0x328
      _s = s;
    867c:	strb.w	r3, [r4, #804]	; 0x324
      _b = b;
    8680:	mvn.w	r3, #18
    8684:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8688:	mvn.w	r3, #25
    868c:	strb.w	r3, [r4, #812]	; 0x32c
      _b = b;
    8690:	mvn.w	r3, #26
    8694:	strb.w	r3, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8698:	mvn.w	r3, #20
    869c:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    86a0:	mov.w	r3, #4294967295
    86a4:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86a8:	movs	r3, #22
    86aa:	str.w	r3, [r4, #824]	; 0x338
      _s = s;
    86ae:	mvn.w	r3, #26
    86b2:	strb.w	r3, [r4, #828]	; 0x33c
      _b = b;
    86b6:	mvn.w	r3, #31
    86ba:	strb.w	r3, [r4, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86be:	movs	r3, #32
    86c0:	str.w	r3, [r4, #832]	; 0x340
      _s = s;
    86c4:	mvn.w	r3, #2
    86c8:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86cc:	movs	r3, #17
    86ce:	str.w	r3, [r4, #840]	; 0x348
    86d2:	movs	r3, #19
    86d4:	str.w	r3, [r4, #816]	; 0x330
      _s = s;
      _b = b;
    86d8:	strb.w	r2, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86dc:	mvn.w	r2, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86e0:	str.w	r3, [r4, #848]	; 0x350
      _s = s;
      _b = b;
    86e4:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86e8:	strb.w	r2, [r4, #916]	; 0x394
    86ec:	mvn.w	r2, #73	; 0x49
      _b = b;
    86f0:	strb.w	r3, [r4, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86f4:	movs	r3, #9
      _s = s;
    86f6:	strb.w	r2, [r4, #852]	; 0x354
    86fa:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86fe:	str.w	r3, [r4, #856]	; 0x358
    8702:	movw	r3, #355	; 0x163
      _s = s;
    8706:	strb.w	r2, [r4, #860]	; 0x35c
      _b = b;
    870a:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    870e:	str.w	r3, [r4, #864]	; 0x360
      _s = s;
    8712:	mvn.w	r3, #2
      _b = b;
    8716:	strb.w	r2, [r4, #861]	; 0x35d
    871a:	mvn.w	r2, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    871e:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    8722:	strb.w	r3, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8726:	movs	r3, #15
      _s = s;
      _b = b;
    8728:	strb.w	r2, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    872c:	mvn.w	r2, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8730:	str.w	r3, [r4, #880]	; 0x370
    8734:	movs	r3, #13
      _s = s;
    8736:	strb.w	r2, [r4, #876]	; 0x36c
    873a:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    873e:	str.w	r3, [r4, #888]	; 0x378
    8742:	str.w	r3, [r4, #896]	; 0x380
      _s = s;
      _b = b;
    8746:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    874a:	strb.w	r2, [r4, #892]	; 0x37c
    874e:	mvn.w	r2, #33	; 0x21
      _b = b;
    8752:	strb.w	r3, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8756:	movs	r3, #15
      _s = s;
    8758:	strb.w	r2, [r4, #900]	; 0x384
    875c:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8760:	str.w	r3, [r4, #904]	; 0x388
      _s = s;
      _b = b;
    8764:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8768:	strb.w	r2, [r4, #924]	; 0x39c
    876c:	mvn.w	r2, #23
      _b = b;
    8770:	strb.w	r3, [r4, #909]	; 0x38d
    8774:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8778:	movs	r3, #3
      _s = s;
    877a:	strb.w	r2, [r4, #932]	; 0x3a4
      _b = b;
    877e:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8782:	str.w	r3, [r4, #920]	; 0x398
    8786:	movs	r3, #7
      _s = s;
    8788:	strb.w	r0, [r4, #884]	; 0x374
      _b = b;
    878c:	strb.w	r9, [r4, #885]	; 0x375
    8790:	strb.w	r9, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8794:	strb.w	r0, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8798:	str.w	r3, [r4, #928]	; 0x3a0
    879c:	movw	r3, #355	; 0x163
    87a0:	str.w	r8, [r4, #872]	; 0x368
    87a4:	str.w	r8, [r4, #912]	; 0x390
      _s = s;
      _b = b;
    87a8:	strb.w	sl, [r4, #925]	; 0x39d
    87ac:	strb.w	r2, [r4, #933]	; 0x3a5
    87b0:	mov.w	r2, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87b4:	str.w	r3, [r4, #944]	; 0x3b0
    87b8:	movw	r3, #359	; 0x167
      _s = s;
      _b = b;
    87bc:	strb.w	r2, [r4, #965]	; 0x3c5
    87c0:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87c4:	str.w	r3, [r4, #960]	; 0x3c0
      _s = s;
    87c8:	mov.w	r3, #4294967295
      _b = b;
    87cc:	strb.w	r2, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87d0:	mvn.w	r2, #10
    87d4:	strb.w	r3, [r4, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87d8:	movs	r3, #5
      _s = s;
    87da:	strb.w	r2, [r4, #948]	; 0x3b4
      _b = b;
    87de:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87e2:	str.w	r3, [r4, #968]	; 0x3c8
    87e6:	movs	r3, #4
      _s = s;
      _b = b;
    87e8:	strb.w	r2, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87ec:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87f0:	str.w	r3, [r4, #976]	; 0x3d0
      _s = s;
    87f4:	strb.w	r2, [r4, #972]	; 0x3cc
      _b = b;
    87f8:	mvn.w	r2, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87fc:	str.w	r3, [r4, #992]	; 0x3e0
    8800:	movs	r3, #14
      _s = s;
      _b = b;
    8802:	strb.w	r2, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8806:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    880a:	str.w	r3, [r4, #1008]	; 0x3f0
    880e:	movs	r3, #26
      _s = s;
    8810:	strb.w	r2, [r4, #980]	; 0x3d4
      _b = b;
    8814:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8818:	strb.w	r0, [r4, #940]	; 0x3ac
      _b = b;
    881c:	strb.w	r2, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8820:	mov.w	r2, #106	; 0x6a
      _b = b;
    8824:	strb.w	r9, [r4, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8828:	strb.w	r2, [r4, #988]	; 0x3dc
      _b = b;
    882c:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8830:	str.w	r3, [r4, #1016]	; 0x3f8
    8834:	movs	r3, #25
      _s = s;
      _b = b;
    8836:	strb.w	r2, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    883a:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    883e:	str.w	r5, [r4, #936]	; 0x3a8
      _s = s;
    8842:	strb.w	r2, [r4, #996]	; 0x3e4
    8846:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    884a:	str.w	r5, [r4, #952]	; 0x3b8
      _s = s;
    884e:	strb.w	r2, [r4, #1004]	; 0x3ec
      _b = b;
    8852:	mvn.w	r2, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8856:	strb.w	r5, [r4, #956]	; 0x3bc
      _b = b;
    885a:	strb.w	r2, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    885e:	mvn.w	r2, #24
      _b = b;
    8862:	strb.w	r5, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8866:	strb.w	r2, [r4, #1012]	; 0x3f4
      _b = b;
    886a:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    886e:	str.w	r8, [r4, #984]	; 0x3d8
      _s = s;
      _b = b;
    8872:	strb.w	r2, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8876:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    887a:	str.w	r5, [r4, #1000]	; 0x3e8
      _s = s;
    887e:	strb.w	r2, [r4, #1020]	; 0x3fc
      _b = b;
    8882:	mvn.w	r2, #7
    8886:	strb.w	r2, [r4, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    888a:	mov.w	r2, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    888e:	str.w	r3, [r4, #1024]	; 0x400
    8892:	movs	r3, #21
      _s = s;
    8894:	strb.w	r2, [r4, #1036]	; 0x40c
      _b = b;
    8898:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    889c:	str.w	r3, [r4, #1032]	; 0x408
    88a0:	movs	r3, #14
      _s = s;
      _b = b;
    88a2:	strb.w	r2, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88a6:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88aa:	str.w	r3, [r4, #1040]	; 0x410
    88ae:	movs	r3, #10
      _s = s;
    88b0:	strb.w	r2, [r4, #1044]	; 0x414
      _b = b;
    88b4:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88b8:	str.w	r3, [r4, #1048]	; 0x418
      _s = s;
    88bc:	mov.w	r3, #4294967295
      _b = b;
    88c0:	strb.w	r2, [r4, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88c4:	mvn.w	r2, #42	; 0x2a
    88c8:	strb.w	r3, [r4, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88cc:	movs	r3, #8
      _s = s;
    88ce:	strb.w	r2, [r4, #1052]	; 0x41c
      _b = b;
    88d2:	mvn.w	r2, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88d6:	str.w	r3, [r4, #1072]	; 0x430
    88da:	movs	r3, #16
      _s = s;
      _b = b;
    88dc:	strb.w	r2, [r4, #1053]	; 0x41d
    88e0:	mov.w	r2, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88e4:	str.w	r3, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    88e8:	mov.w	r3, #4294967295
    88ec:	strb.w	r2, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88f0:	mvn.w	r2, #85	; 0x55
      _b = b;
    88f4:	strb.w	r3, [r4, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88f8:	movs	r3, #13
      _s = s;
    88fa:	strb.w	r2, [r4, #1068]	; 0x42c
      _b = b;
    88fe:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8902:	str.w	r3, [r4, #1088]	; 0x440
      _s = s;
      _b = b;
    8906:	mov.w	r3, #4294967295
    890a:	strb.w	r2, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    890e:	mvn.w	r2, #90	; 0x5a
      _b = b;
    8912:	strb.w	r3, [r4, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8916:	movs	r3, #3
      _s = s;
    8918:	strb.w	r2, [r4, #1076]	; 0x434
    891c:	mvn.w	r2, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8920:	str.w	r3, [r4, #1104]	; 0x450
      _s = s;
      _b = b;
    8924:	mvn.w	r3, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8928:	strb.w	r2, [r4, #1084]	; 0x43c
    892c:	mvn.w	r2, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8930:	str.w	ip, [r4, #1056]	; 0x420
      _s = s;
    8934:	strb.w	r2, [r4, #1092]	; 0x444
    8938:	mov.w	r2, #127	; 0x7f
    893c:	strb.w	r0, [r4, #1028]	; 0x404
    8940:	strb.w	r2, [r4, #1100]	; 0x44c
    8944:	mvn.w	r2, #57	; 0x39
      _b = b;
    8948:	strb.w	r9, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    894c:	strb.w	r2, [r4, #1108]	; 0x454
    8950:	mvn.w	r2, #15
      _b = b;
    8954:	strb.w	r9, [r4, #1101]	; 0x44d
    8958:	strb.w	fp, [r4, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    895c:	str.w	r5, [r4, #1064]	; 0x428
    8960:	str.w	r8, [r4, #1096]	; 0x448
      _s = s;
      _b = b;
    8964:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8968:	movw	r3, #357	; 0x165
      _s = s;
    896c:	strb.w	r2, [r4, #1116]	; 0x45c
      _b = b;
    8970:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8974:	str.w	r3, [r4, #1112]	; 0x458
    8978:	movs	r3, #1
      _s = s;
      _b = b;
    897a:	strb.w	r2, [r4, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    897e:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8982:	str.w	r3, [r4, #1120]	; 0x460
      _s = s;
    8986:	strb.w	r2, [r4, #1124]	; 0x464
      _b = b;
    898a:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    898e:	str.w	r3, [r4, #1128]	; 0x468
    8992:	movs	r3, #4
      _s = s;
      _b = b;
    8994:	strb.w	r2, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8998:	mov.w	r2, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    899c:	str.w	r3, [r4, #1136]	; 0x470
    89a0:	mov.w	r3, #358	; 0x166
      _s = s;
    89a4:	strb.w	r2, [r4, #1132]	; 0x46c
    89a8:	mov.w	r2, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89ac:	str.w	r3, [r4, #1152]	; 0x480
    89b0:	movs	r3, #8
      _s = s;
    89b2:	strb.w	r2, [r4, #1140]	; 0x474
      _b = b;
    89b6:	mov.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89ba:	str.w	r3, [r4, #1160]	; 0x488
      _s = s;
      _b = b;
    89be:	strb.w	r2, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89c2:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89c6:	str.w	r3, [r4, #1168]	; 0x490
    89ca:	movs	r3, #10
      _s = s;
    89cc:	strb.w	r2, [r4, #1156]	; 0x484
      _b = b;
    89d0:	mvn.w	r2, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89d4:	str.w	r3, [r4, #1176]	; 0x498
      _s = s;
      _b = b;
    89d8:	mov.w	r3, #4294967295
    89dc:	strb.w	r2, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89e0:	mvn.w	r2, #19
      _b = b;
    89e4:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89e8:	movs	r3, #18
      _s = s;
    89ea:	strb.w	r2, [r4, #1164]	; 0x48c
      _b = b;
    89ee:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89f2:	str.w	r3, [r4, #1184]	; 0x4a0
      _s = s;
      _b = b;
    89f6:	mov.w	r3, #4294967295
    89fa:	strb.w	r2, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89fe:	mov.w	r2, #88	; 0x58
      _b = b;
    8a02:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a06:	movs	r3, #15
      _s = s;
    8a08:	strb.w	r2, [r4, #1172]	; 0x494
    8a0c:	mvn.w	r2, #113	; 0x71
      _b = b;
    8a10:	strb.w	r9, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a14:	strb.w	r2, [r4, #1180]	; 0x49c
    8a18:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a1c:	str.w	r3, [r4, #1192]	; 0x4a8
    8a20:	movw	r3, #359	; 0x167
      _s = s;
    8a24:	strb.w	r2, [r4, #1188]	; 0x4a4
    8a28:	mvn.w	r2, #23
    8a2c:	strb.w	r0, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a30:	str.w	r5, [r4, #1144]	; 0x478
      _s = s;
    8a34:	strb.w	r5, [r4, #1148]	; 0x47c
      _b = b;
    8a38:	strb.w	r5, [r4, #1149]	; 0x47d
    8a3c:	strb.w	fp, [r4, #1173]	; 0x495
    8a40:	strb.w	lr, [r4, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a44:	strb.w	r2, [r4, #1204]	; 0x4b4
      _b = b;
    8a48:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a4c:	str.w	r3, [r4, #1200]	; 0x4b0
    8a50:	movs	r3, #8
      _s = s;
      _b = b;
    8a52:	strb.w	r2, [r4, #1205]	; 0x4b5
    8a56:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a5a:	str.w	r3, [r4, #1208]	; 0x4b8
    8a5e:	movs	r3, #12
      _s = s;
      _b = b;
    8a60:	strb.w	r2, [r4, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a64:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a68:	str.w	r3, [r4, #1216]	; 0x4c0
    8a6c:	movs	r3, #5
      _s = s;
    8a6e:	strb.w	r2, [r4, #1220]	; 0x4c4
      _b = b;
    8a72:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a76:	str.w	r3, [r4, #1224]	; 0x4c8
    8a7a:	movw	r3, #357	; 0x165
      _s = s;
      _b = b;
    8a7e:	strb.w	r2, [r4, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a82:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a86:	str.w	r3, [r4, #1232]	; 0x4d0
      _s = s;
    8a8a:	mov.w	r3, #4294967295
    8a8e:	strb.w	r2, [r4, #1228]	; 0x4cc
      _b = b;
    8a92:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a96:	strb.w	r3, [r4, #1236]	; 0x4d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a9a:	movs	r3, #12
      _s = s;
      _b = b;
    8a9c:	strb.w	r2, [r4, #1229]	; 0x4cd
    8aa0:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aa4:	str.w	r3, [r4, #1240]	; 0x4d8
    8aa8:	movs	r3, #11
      _s = s;
      _b = b;
    8aaa:	strb.w	r2, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8aae:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ab2:	str.w	r3, [r4, #1248]	; 0x4e0
    8ab6:	movs	r3, #14
      _s = s;
    8ab8:	strb.w	r2, [r4, #1244]	; 0x4dc
      _b = b;
    8abc:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ac0:	str.w	r3, [r4, #1256]	; 0x4e8
    8ac4:	movs	r3, #2
      _s = s;
      _b = b;
    8ac6:	strb.w	r2, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8aca:	mvn.w	r2, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ace:	str.w	r3, [r4, #1272]	; 0x4f8
    8ad2:	movw	r3, #359	; 0x167
      _s = s;
    8ad6:	strb.w	r2, [r4, #1252]	; 0x4e4
      _b = b;
    8ada:	mvn.w	r2, #12
    8ade:	strb.w	r0, [r4, #1269]	; 0x4f5
    8ae2:	strb.w	r2, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ae6:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aea:	str.w	r3, [r4, #1280]	; 0x500
    8aee:	movs	r3, #1
      _s = s;
    8af0:	strb.w	r2, [r4, #1260]	; 0x4ec
      _b = b;
    8af4:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8af8:	strb.w	sl, [r4, #1212]	; 0x4bc
      _b = b;
    8afc:	strb.w	r2, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b00:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b04:	str.w	r5, [r4, #1264]	; 0x4f0
      _s = s;
    8b08:	strb.w	r2, [r4, #1268]	; 0x4f4
    8b0c:	mvn.w	r2, #79	; 0x4f
    8b10:	strb.w	r2, [r4, #1276]	; 0x4fc
      _b = b;
    8b14:	mvn.w	r2, #5
    8b18:	strb.w	r2, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b1c:	mov.w	r2, #123	; 0x7b
    8b20:	strb.w	r2, [r4, #1284]	; 0x504
    8b24:	mov.w	r2, #93	; 0x5d
      _b = b;
    8b28:	strb.w	lr, [r4, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b2c:	strb.w	r2, [r4, #1316]	; 0x524
    8b30:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b34:	str.w	r3, [r4, #1296]	; 0x510
    8b38:	movs	r3, #4
      _s = s;
    8b3a:	strb.w	r2, [r4, #1292]	; 0x50c
    8b3e:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b42:	str.w	r3, [r4, #1312]	; 0x520
    8b46:	movs	r3, #8
      _s = s;
    8b48:	strb.w	r2, [r4, #1300]	; 0x514
      _b = b;
    8b4c:	mvn.w	r2, #13
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b50:	str.w	r3, [r4, #1320]	; 0x528
    8b54:	movs	r3, #2
      _s = s;
      _b = b;
    8b56:	strb.w	r2, [r4, #1301]	; 0x515
    8b5a:	mvn.w	r2, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b5e:	str.w	r3, [r4, #1344]	; 0x540
    8b62:	movs	r3, #11
      _s = s;
      _b = b;
    8b64:	strb.w	r2, [r4, #1309]	; 0x51d
    8b68:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b6c:	str.w	r3, [r4, #1352]	; 0x548
    8b70:	movs	r3, #9
      _s = s;
      _b = b;
    8b72:	strb.w	r2, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b76:	mvn.w	r2, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b7a:	str.w	r3, [r4, #1360]	; 0x550
    8b7e:	movs	r3, #15
      _s = s;
    8b80:	strb.w	r2, [r4, #1324]	; 0x52c
      _b = b;
    8b84:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b88:	str.w	ip, [r4, #1304]	; 0x518
      _s = s;
      _b = b;
    8b8c:	strb.w	r2, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b90:	mvn.w	r2, #14
      _b = b;
    8b94:	strb.w	r9, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b98:	strb.w	r2, [r4, #1348]	; 0x544
      _b = b;
    8b9c:	mvn.w	r2, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ba0:	strb.w	lr, [r4, #1308]	; 0x51c
      _b = b;
    8ba4:	strb.w	r2, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ba8:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bac:	str.w	r3, [r4, #1368]	; 0x558
    8bb0:	movs	r3, #16
      _s = s;
    8bb2:	strb.w	r2, [r4, #1356]	; 0x54c
    8bb6:	mvn.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bba:	str.w	r5, [r4, #1288]	; 0x508
      _s = s;
    8bbe:	strb.w	r2, [r4, #1364]	; 0x554
      _b = b;
    8bc2:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bc6:	str.w	r5, [r4, #1328]	; 0x530
      _s = s;
      _b = b;
    8bca:	strb.w	r2, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bce:	mvn.w	r2, #11
    8bd2:	strb.w	r5, [r4, #1332]	; 0x534
    8bd6:	strb.w	r2, [r4, #1372]	; 0x55c
      _b = b;
    8bda:	mvn.w	r2, #79	; 0x4f
    8bde:	strb.w	r5, [r4, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8be2:	str.w	r5, [r4, #1336]	; 0x538
      _s = s;
    8be6:	strb.w	r5, [r4, #1340]	; 0x53c
      _b = b;
    8bea:	strb.w	r5, [r4, #1341]	; 0x53d
    8bee:	strb.w	fp, [r4, #1357]	; 0x54d
    8bf2:	strb.w	r2, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bf6:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bfa:	str.w	r3, [r4, #1376]	; 0x560
    8bfe:	movs	r3, #14
      _s = s;
    8c00:	strb.w	r2, [r4, #1380]	; 0x564
      _b = b;
    8c04:	mvn.w	r2, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c08:	str.w	r3, [r4, #1384]	; 0x568
      _s = s;
      _b = b;
    8c0c:	mov.w	r3, #4294967295
    8c10:	strb.w	r2, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c14:	mvn.w	r2, #41	; 0x29
      _b = b;
    8c18:	strb.w	r3, [r4, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c1c:	movs	r3, #8
      _s = s;
    8c1e:	strb.w	r2, [r4, #1388]	; 0x56c
    8c22:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c26:	str.w	r3, [r4, #1392]	; 0x570
    8c2a:	mov.w	r3, #354	; 0x162
      _s = s;
    8c2e:	strb.w	r2, [r4, #1396]	; 0x574
      _b = b;
    8c32:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c36:	str.w	r3, [r4, #1400]	; 0x578
      _s = s;
    8c3a:	mov.w	r3, #4294967295
      _b = b;
    8c3e:	strb.w	r2, [r4, #1405]	; 0x57d
    8c42:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c46:	strb.w	r3, [r4, #1404]	; 0x57c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c4a:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    8c4e:	strb.w	r2, [r4, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c52:	mvn.w	r2, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c56:	str.w	r3, [r4, #1408]	; 0x580
      _s = s;
    8c5a:	mov.w	r3, #4294967295
    8c5e:	strb.w	r2, [r4, #1420]	; 0x58c
      _b = b;
    8c62:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c66:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c6a:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    8c6e:	strb.w	r2, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c72:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c76:	str.w	r3, [r4, #1416]	; 0x588
    8c7a:	movs	r3, #11
      _s = s;
    8c7c:	strb.w	r2, [r4, #1428]	; 0x594
      _b = b;
    8c80:	mvn.w	r2, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c84:	str.w	r3, [r4, #1424]	; 0x590
    8c88:	movs	r3, #21
      _s = s;
      _b = b;
    8c8a:	strb.w	r2, [r4, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c8e:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c92:	str.w	r3, [r4, #1432]	; 0x598
    8c96:	movs	r3, #26
      _s = s;
    8c98:	strb.w	r2, [r4, #1436]	; 0x59c
      _b = b;
    8c9c:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ca0:	str.w	r3, [r4, #1440]	; 0x5a0
    8ca4:	movs	r3, #25
      _s = s;
      _b = b;
    8ca6:	strb.w	r2, [r4, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8caa:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cae:	str.w	r3, [r4, #1448]	; 0x5a8
    8cb2:	movs	r3, #15
      _s = s;
    8cb4:	strb.w	r2, [r4, #1444]	; 0x5a4
      _b = b;
    8cb8:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cbc:	str.w	r3, [r4, #1456]	; 0x5b0
    8cc0:	mov.w	r3, #358	; 0x166
      _s = s;
      _b = b;
    8cc4:	strb.w	r2, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cc8:	mvn.w	r2, #24
      _b = b;
    8ccc:	strb.w	fp, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cd0:	strb.w	r2, [r4, #1452]	; 0x5ac
      _b = b;
    8cd4:	mvn.w	r2, #13
    8cd8:	strb.w	r2, [r4, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cdc:	mvn.w	r2, #15
    8ce0:	strb.w	r2, [r4, #1460]	; 0x5b4
      _b = b;
    8ce4:	strb.w	r2, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ce8:	mvn.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cec:	str.w	r3, [r4, #1464]	; 0x5b8
    8cf0:	movw	r3, #359	; 0x167
      _s = s;
    8cf4:	strb.w	r2, [r4, #1508]	; 0x5e4
    8cf8:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cfc:	str.w	r3, [r4, #1480]	; 0x5c8
    8d00:	movs	r3, #1
      _s = s;
    8d02:	strb.w	r2, [r4, #1468]	; 0x5bc
      _b = b;
    8d06:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d0a:	str.w	r3, [r4, #1488]	; 0x5d0
    8d0e:	movs	r3, #12
      _s = s;
      _b = b;
    8d10:	strb.w	r2, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d14:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d18:	str.w	r3, [r4, #1504]	; 0x5e0
      _s = s;
      _b = b;
    8d1c:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d20:	strb.w	r2, [r4, #1476]	; 0x5c4
      _b = b;
    8d24:	mvn.w	r2, #43	; 0x2b
    8d28:	strb.w	r3, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d2c:	movs	r3, #18
      _s = s;
      _b = b;
    8d2e:	strb.w	r2, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d32:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d36:	str.w	r3, [r4, #1512]	; 0x5e8
    8d3a:	movs	r3, #9
      _s = s;
    8d3c:	strb.w	r2, [r4, #1484]	; 0x5cc
      _b = b;
    8d40:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d44:	str.w	r3, [r4, #1536]	; 0x600
    8d48:	movs	r3, #8
      _s = s;
      _b = b;
    8d4a:	strb.w	r2, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d4e:	mvn.w	r2, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d52:	str.w	ip, [r4, #1472]	; 0x5c0
      _s = s;
    8d56:	strb.w	r2, [r4, #1492]	; 0x5d4
      _b = b;
    8d5a:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d5e:	str.w	ip, [r4, #1496]	; 0x5d8
      _s = s;
      _b = b;
    8d62:	strb.w	r2, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d66:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d6a:	str.w	r3, [r4, #1544]	; 0x608
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 4
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 5
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8d6e:	movs	r3, #82	; 0x52
      _s = s;
    8d70:	strb.w	r2, [r4, #1500]	; 0x5dc
      _b = b;
    8d74:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d78:	str.w	r5, [r4, #1520]	; 0x5f0
      _s = s;
      _b = b;
    8d7c:	strb.w	r2, [r4, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d80:	mvn.w	r2, #28
    8d84:	strb.w	r5, [r4, #1524]	; 0x5f4
    8d88:	strb.w	r2, [r4, #1516]	; 0x5ec
      _b = b;
    8d8c:	mvn.w	r2, #115	; 0x73
    8d90:	strb.w	r5, [r4, #1525]	; 0x5f5
    8d94:	strb.w	r2, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d98:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d9c:	str.w	r5, [r4, #1528]	; 0x5f8
      _s = s;
    8da0:	strb.w	r2, [r4, #1540]	; 0x604
      _b = b;
    8da4:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8da8:	strb.w	r5, [r4, #1532]	; 0x5fc
      _b = b;
    8dac:	strb.w	r2, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8db0:	mvn.w	r2, #74	; 0x4a
      _b = b;
    8db4:	strb.w	r5, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8db8:	strb.w	r2, [r4, #1548]	; 0x60c
      _b = b;
    8dbc:	mvn.w	r2, #16
    8dc0:	strb.w	r2, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8dc4:	mvn.w	r2, #53	; 0x35
    8dc8:	strb.w	fp, [r4, #1612]	; 0x64c
    8dcc:	strb.w	r2, [r4, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dd0:	movs	r2, #12
    8dd2:	str.w	r2, [r4, #1552]	; 0x610
      _s = s;
    8dd6:	mvn.w	r2, #77	; 0x4d
    8dda:	strb.w	r2, [r4, #1556]	; 0x614
      _b = b;
    8dde:	mvn.w	r2, #55	; 0x37
    8de2:	strb.w	r2, [r4, #1557]	; 0x615
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8de6:	movs	r2, #18
    8de8:	str.w	r2, [r4, #1560]	; 0x618
      _s = s;
    8dec:	mov.w	r2, #4294967295
    8df0:	strb.w	r2, [r4, #1564]	; 0x61c
      _b = b;
    8df4:	mov.w	r2, #68	; 0x44
    8df8:	strb.w	r2, [r4, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dfc:	movs	r2, #15
    8dfe:	str.w	r2, [r4, #1568]	; 0x620
      _s = s;
    8e02:	mvn.w	r2, #28
    8e06:	strb.w	r2, [r4, #1572]	; 0x624
      _b = b;
    8e0a:	mvn.w	r2, #22
    8e0e:	strb.w	r2, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e12:	movs	r2, #12
    8e14:	str.w	r2, [r4, #1576]	; 0x628
      _s = s;
    8e18:	mvn.w	r2, #57	; 0x39
    8e1c:	strb.w	r2, [r4, #1580]	; 0x62c
      _b = b;
    8e20:	mov.w	r2, #4294967295
    8e24:	strb.w	r2, [r4, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e28:	movs	r2, #11
    8e2a:	str.w	r2, [r4, #1584]	; 0x630
      _s = s;
      _b = b;
    8e2e:	mov.w	r2, #4294967295
    8e32:	strb.w	r2, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e36:	movw	r2, #355	; 0x163
    8e3a:	str.w	r2, [r4, #1592]	; 0x638
      _s = s;
    8e3e:	mvn.w	r2, #8
    8e42:	strb.w	r2, [r4, #1596]	; 0x63c
      _b = b;
    8e46:	mvn.w	r2, #38	; 0x26
    8e4a:	strb.w	r2, [r4, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e4e:	movw	r2, #355	; 0x163
    8e52:	str.w	r2, [r4, #1600]	; 0x640
      _s = s;
    8e56:	mov.w	r2, #4294967295
    8e5a:	strb.w	r2, [r4, #1604]	; 0x644
      _b = b;
    8e5e:	mvn.w	r2, #56	; 0x38
    8e62:	strb.w	r2, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e66:	movw	r2, #355	; 0x163
    8e6a:	str.w	r2, [r4, #1608]	; 0x648
      _s = s;
      _b = b;
    8e6e:	mvn.w	r2, #48	; 0x30
    8e72:	strb.w	r2, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e76:	movs	r2, #9
    8e78:	str.w	r2, [r4, #1616]	; 0x650
      _s = s;
    8e7c:	mvn.w	r2, #61	; 0x3d
    8e80:	strb.w	r2, [r4, #1620]	; 0x654
      _b = b;
    8e84:	mvn.w	r2, #24
    8e88:	strb.w	r2, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e8c:	movs	r2, #20
    8e8e:	str.w	r2, [r4, #1624]	; 0x658
      _s = s;
    8e92:	mov.w	r2, #4294967295
    8e96:	strb.w	r2, [r4, #1628]	; 0x65c
      _b = b;
    8e9a:	mvn.w	r2, #71	; 0x47
    8e9e:	strb.w	r2, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea2:	movs	r2, #26
    8ea4:	str.w	r2, [r4, #1632]	; 0x660
      _s = s;
    8ea8:	mvn.w	r2, #2
    8eac:	strb.w	r2, [r4, #1636]	; 0x664
      _b = b;
    8eb0:	mvn.w	r2, #25
    8eb4:	strb.w	r2, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eb8:	movs	r2, #19
      _s = s;
      _b = b;
    8eba:	strb.w	r9, [r4, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ebe:	str.w	r2, [r4, #1640]	; 0x668
      _s = s;
    8ec2:	mvn.w	r2, #2
    8ec6:	strb.w	r7, [r4, #1692]	; 0x69c
    8eca:	strb.w	r2, [r4, #1644]	; 0x66c
      _b = b;
    8ece:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ed2:	str.w	r5, [r4, #1664]	; 0x680
      _s = s;
      _b = b;
    8ed6:	strb.w	r2, [r4, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eda:	movs	r2, #22
    8edc:	str.w	r5, [r4, #1704]	; 0x6a8
    8ee0:	str.w	r2, [r4, #1648]	; 0x670
      _s = s;
    8ee4:	mvn.w	r2, #66	; 0x42
    8ee8:	strb.w	r5, [r4, #1708]	; 0x6ac
    8eec:	strb.w	r2, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ef0:	movs	r2, #12
      _s = s;
      _b = b;
    8ef2:	strb.w	r5, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ef6:	str.w	r2, [r4, #1656]	; 0x678
      _s = s;
    8efa:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8efe:	str.w	r5, [r4, #1712]	; 0x6b0
      _s = s;
    8f02:	strb.w	r2, [r4, #1660]	; 0x67c
      _b = b;
    8f06:	strb.w	r2, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f0a:	mvn.w	r2, #13
    8f0e:	strb.w	r5, [r4, #1716]	; 0x6b4
    8f12:	strb.w	r2, [r4, #1668]	; 0x684
      _b = b;
    8f16:	mvn.w	r2, #57	; 0x39
    8f1a:	strb.w	r5, [r4, #1717]	; 0x6b5
    8f1e:	strb.w	r2, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f22:	movs	r2, #4
    8f24:	str.w	r5, [r4, #1720]	; 0x6b8
    8f28:	str.w	r2, [r4, #1672]	; 0x688
      _s = s;
    8f2c:	mvn.w	r2, #21
    8f30:	strb.w	r5, [r4, #1724]	; 0x6bc
    8f34:	strb.w	r2, [r4, #1676]	; 0x68c
      _b = b;
    8f38:	mvn.w	r2, #35	; 0x23
    8f3c:	strb.w	r2, [r4, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f40:	movs	r2, #16
    8f42:	str.w	r2, [r4, #1680]	; 0x690
      _s = s;
    8f46:	mvn.w	r2, #35	; 0x23
    8f4a:	strb.w	r2, [r4, #1684]	; 0x694
      _b = b;
    8f4e:	mvn.w	r2, #9
    8f52:	strb.w	r2, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f56:	movs	r2, #3
    8f58:	str.w	r2, [r4, #1688]	; 0x698
      _s = s;
      _b = b;
    8f5c:	mvn.w	r2, #20
    8f60:	strb.w	r2, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f64:	movs	r2, #13
    8f66:	str.w	r2, [r4, #1696]	; 0x6a0
      _s = s;
    8f6a:	mvn.w	r2, #31
    8f6e:	strb.w	r2, [r4, #1700]	; 0x6a4
      _b = b;
    8f72:	strb.w	r2, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f76:	movs	r2, #10
      _s = s;
      _b = b;
    8f78:	strb.w	r5, [r4, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f7c:	str.w	r2, [r4, #1728]	; 0x6c0
      _s = s;
      _b = b;
    8f80:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f84:	str.w	ip, [r4, #1792]	; 0x700
      _s = s;
      _b = b;
    8f88:	strb.w	r2, [r4, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f8c:	movs	r2, #1
      _s = s;
    8f8e:	strb.w	r7, [r4, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f92:	str.w	r2, [r4, #1736]	; 0x6c8
      _s = s;
    8f96:	mvn.w	r2, #82	; 0x52
    8f9a:	strb.w	fp, [r4, #1756]	; 0x6dc
    8f9e:	strb.w	r2, [r4, #1740]	; 0x6cc
      _b = b;
    8fa2:	mvn.w	r2, #63	; 0x3f
    8fa6:	strb.w	r2, [r4, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8faa:	movs	r2, #8
    8fac:	str.w	r2, [r4, #1744]	; 0x6d0
      _s = s;
    8fb0:	mvn.w	r2, #83	; 0x53
    8fb4:	strb.w	r2, [r4, #1748]	; 0x6d4
      _b = b;
    8fb8:	mvn.w	r2, #60	; 0x3c
    8fbc:	strb.w	r2, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fc0:	movs	r2, #23
    8fc2:	str.w	r2, [r4, #1752]	; 0x6d8
    8fc6:	movs	r2, #11
    8fc8:	str.w	r2, [r4, #1760]	; 0x6e0
      _s = s;
    8fcc:	mvn.w	r2, #11
    8fd0:	strb.w	r2, [r4, #1764]	; 0x6e4
      _b = b;
    8fd4:	mvn.w	r2, #79	; 0x4f
    8fd8:	strb.w	r2, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fdc:	movs	r2, #12
    8fde:	str.w	r2, [r4, #1768]	; 0x6e8
      _s = s;
    8fe2:	mvn.w	r2, #42	; 0x2a
    8fe6:	strb.w	r2, [r4, #1772]	; 0x6ec
      _b = b;
    8fea:	mov.w	r2, #4294967295
    8fee:	strb.w	r2, [r4, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ff2:	movs	r2, #10
    8ff4:	str.w	r2, [r4, #1776]	; 0x6f0
      _s = s;
    8ff8:	mvn.w	r2, #36	; 0x24
    8ffc:	strb.w	r2, [r4, #1780]	; 0x6f4
      _b = b;
    9000:	mov.w	r2, #4294967295
    9004:	strb.w	r2, [r4, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9008:	movw	r2, #355	; 0x163
    900c:	str.w	r2, [r4, #1784]	; 0x6f8
      _s = s;
    9010:	mvn.w	r2, #5
    9014:	strb.w	r2, [r4, #1788]	; 0x6fc
      _b = b;
    9018:	mvn.w	r2, #40	; 0x28
    901c:	strb.w	r2, [r4, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9020:	mov.w	r2, #4294967295
    9024:	strb.w	r2, [r4, #1796]	; 0x704
      _b = b;
    9028:	mvn.w	r2, #86	; 0x56
    902c:	strb.w	r2, [r4, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9030:	movs	r2, #2
    9032:	str.w	r2, [r4, #1800]	; 0x708
      _s = s;
    9036:	mvn.w	r2, #31
    903a:	strb.w	r2, [r4, #1804]	; 0x70c
      _b = b;
    903e:	mvn.w	r2, #57	; 0x39
    9042:	strb.w	r2, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9046:	movs	r2, #12
    9048:	str.w	r2, [r4, #1808]	; 0x710
      _s = s;
    904c:	mvn.w	r2, #21
    9050:	strb.w	r2, [r4, #1812]	; 0x714
      _b = b;
    9054:	mov.w	r2, #64	; 0x40
    9058:	strb.w	r2, [r4, #1757]	; 0x6dd
    905c:	movs	r2, #8
    905e:	strb.w	r1, [r4, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9062:	movs	r1, #48	; 0x30
      _s = s;
      _b = b;
    9064:	strb.w	r0, [r4, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9068:	movs	r0, #2
    906a:	str.w	r6, [r4, #1816]	; 0x718
      _s = s;
    906e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9072:	str.w	r0, [r4, #1856]	; 0x740
      _s = s;
    9076:	mvn.w	r0, #15
    907a:	strb.w	r6, [r4, #1820]	; 0x71c
      _b = b;
    907e:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9082:	strb.w	r0, [r4, #1860]	; 0x744
      _b = b;
    9086:	mvn.w	r0, #42	; 0x2a
    908a:	strb.w	r6, [r4, #1821]	; 0x71d
    908e:	mov.w	r6, #127	; 0x7f
    9092:	strb.w	r0, [r4, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9096:	mvn.w	r0, #21
      _b = b;
    909a:	strb.w	r6, [r4, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    909e:	movs	r6, #17
      _s = s;
    90a0:	strb.w	r0, [r4, #1868]	; 0x74c
      _b = b;
    90a4:	mvn.w	r0, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a8:	mov	r7, r6
    90aa:	str.w	r6, [r4, #1832]	; 0x728
      _s = s;
      _b = b;
    90ae:	strb.w	r0, [r4, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90b2:	movs	r0, #16
      _s = s;
    90b4:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90b8:	str.w	r7, [r4, #1840]	; 0x730
    90bc:	str.w	r0, [r4, #1872]	; 0x750
      _s = s;
    90c0:	mvn.w	r0, #18
    90c4:	strb.w	r6, [r4, #1836]	; 0x72c
      _b = b;
    90c8:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90cc:	strb.w	r0, [r4, #1876]	; 0x754
      _b = b;
    90d0:	mvn.w	r0, #5
    90d4:	strb.w	r6, [r4, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90d8:	mvn.w	r6, #111	; 0x6f
      _b = b;
    90dc:	strb.w	r0, [r4, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90e0:	movs	r0, #13
      _s = s;
    90e2:	strb.w	r6, [r4, #1844]	; 0x734
      _b = b;
    90e6:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90ea:	str.w	r0, [r4, #1880]	; 0x758
      _s = s;
    90ee:	mvn.w	r0, #34	; 0x22
      _b = b;
    90f2:	strb.w	r6, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90f6:	movs	r6, #10
      _s = s;
    90f8:	strb.w	r0, [r4, #1884]	; 0x75c
      _b = b;
    90fc:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9100:	mov	r7, r6
    9102:	str.w	r6, [r4, #1848]	; 0x738
      _s = s;
      _b = b;
    9106:	strb.w	r0, [r4, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    910a:	mvn.w	r6, #25
    910e:	strb.w	r0, [r4, #1892]	; 0x764
      _b = b;
    9112:	mvn.w	r0, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9116:	str.w	r1, [r4, #1824]	; 0x720
    911a:	mov.w	r1, #576	; 0x240
      _s = s;
    911e:	strb.w	lr, [r4, #1828]	; 0x724
    9122:	strb.w	r6, [r4, #1852]	; 0x73c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9126:	str.w	r7, [r4, #1864]	; 0x748
      _s = s;
      _b = b;
    912a:	strb.w	r0, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    912e:	mvn.w	r0, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9132:	str.w	r5, [r4, #1888]	; 0x760
    9136:	str.w	r5, [r4, #1896]	; 0x768
      _s = s;
    913a:	strb.w	r5, [r4, #1900]	; 0x76c
      _b = b;
    913e:	strb.w	r5, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9142:	strb.w	r6, [r4, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9146:	movs	r6, #14
      _s = s;
    9148:	strb.w	r0, [r4, #1924]	; 0x784
      _b = b;
    914c:	mvn.w	r0, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9150:	str.w	r6, [r4, #1952]	; 0x7a0
      _s = s;
    9154:	mvn.w	r6, #7
      _b = b;
    9158:	strb.w	r0, [r4, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    915c:	movw	r0, #355	; 0x163
      _s = s;
    9160:	strb.w	r6, [r4, #1956]	; 0x7a4
      _b = b;
    9164:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9168:	str.w	r0, [r4, #1928]	; 0x788
      _s = s;
    916c:	mov.w	r0, #4294967295
      _b = b;
    9170:	strb.w	r6, [r4, #1957]	; 0x7a5
    9174:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9178:	strb.w	r0, [r4, #1932]	; 0x78c
      _b = b;
    917c:	mvn.w	r0, #76	; 0x4c
    9180:	strb.w	r6, [r4, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9184:	movs	r6, #3
    9186:	str.w	r7, [r4, #1920]	; 0x780
    918a:	str.w	r6, [r4, #1968]	; 0x7b0
      _s = s;
      _b = b;
    918e:	mvn.w	r6, #7
    9192:	strb.w	r0, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9196:	movs	r0, #5
      _s = s;
      _b = b;
    9198:	strb.w	r6, [r4, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    919c:	movs	r6, #1
    919e:	str.w	r0, [r4, #1936]	; 0x790
      _s = s;
      _b = b;
    91a2:	mvn.w	r0, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a6:	mov	r7, r6
    91a8:	str.w	r6, [r4, #1976]	; 0x7b8
      _s = s;
    91ac:	mvn.w	r6, #28
      _b = b;
    91b0:	strb.w	r0, [r4, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91b4:	movs	r0, #17
    91b6:	str.w	ip, [r4, #1984]	; 0x7c0
      _s = s;
    91ba:	strb.w	r6, [r4, #1980]	; 0x7bc
      _b = b;
    91be:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91c2:	str.w	r0, [r4, #1944]	; 0x798
      _s = s;
      _b = b;
    91c6:	mov.w	r0, #113	; 0x71
    91ca:	strb.w	r6, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91ce:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91d2:	str.w	r2, [r4, #1960]	; 0x7a8
      _s = s;
    91d6:	strb.w	r6, [r4, #1988]	; 0x7c4
      _b = b;
    91da:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91de:	strb.w	lr, [r4, #1948]	; 0x79c
      _b = b;
    91e2:	strb.w	r0, [r4, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91e6:	str.w	r5, [r4, #1904]	; 0x770
      _s = s;
    91ea:	strb.w	r5, [r4, #1908]	; 0x774
      _b = b;
    91ee:	strb.w	r5, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91f2:	str.w	r5, [r4, #1912]	; 0x778
      _s = s;
    91f6:	strb.w	r5, [r4, #1916]	; 0x77c
      _b = b;
    91fa:	strb.w	r5, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91fe:	strb.w	sl, [r4, #1964]	; 0x7ac
    9202:	strb.w	sl, [r4, #1972]	; 0x7b4
      _b = b;
    9206:	strb.w	r6, [r4, #1989]	; 0x7c5
    920a:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    920e:	str.w	r7, [r4, #1992]	; 0x7c8
      _s = s;
      _b = b;
    9212:	strb.w	r6, [r4, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9216:	mvn.w	r6, #37	; 0x25
    921a:	strb.w	lr, [r4, #2012]	; 0x7dc
    921e:	strb.w	r6, [r4, #1996]	; 0x7cc
      _b = b;
    9222:	mvn.w	r6, #61	; 0x3d
    9226:	ldr	r0, [pc, #1012]	; (961c <_GLOBAL__sub_I_bri_level+0x4444>)
    9228:	strb.w	r6, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    922c:	movs	r6, #11
    922e:	str.w	r6, [r4, #2000]	; 0x7d0
      _s = s;
    9232:	mvn.w	r6, #15
    9236:	strb.w	r6, [r4, #2004]	; 0x7d4
      _b = b;
    923a:	mvn.w	r6, #63	; 0x3f
    923e:	strb.w	r6, [r4, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9242:	movs	r6, #18
    9244:	str.w	r6, [r4, #2008]	; 0x7d8
    9248:	movs	r6, #42	; 0x2a
    924a:	str.w	r6, [r4, #2016]	; 0x7e0
      _s = s;
    924e:	mvn.w	r6, #2
    9252:	strb.w	r6, [r4, #2020]	; 0x7e4
      _b = b;
    9256:	mvn.w	r6, #117	; 0x75
    925a:	strb.w	r6, [r4, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    925e:	movs	r6, #16
    9260:	mov	r7, r6
    9262:	str.w	r6, [r4, #2024]	; 0x7e8
      _s = s;
    9266:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    926a:	str.w	r7, [r4, #2032]	; 0x7f0
      _s = s;
    926e:	strb.w	r6, [r4, #2028]	; 0x7ec
      _b = b;
    9272:	mvn.w	r6, #98	; 0x62
    9276:	strb.w	r6, [r4, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    927a:	mvn.w	r6, #78	; 0x4e
    927e:	strb.w	r6, [r4, #2036]	; 0x7f4
      _b = b;
    9282:	mvn.w	r6, #7
    9286:	strb.w	r6, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    928a:	movs	r6, #1
    928c:	str.w	r6, [r4, #2040]	; 0x7f8
      _s = s;
    9290:	mvn.w	r6, #24
    9294:	strb.w	r6, [r4, #2044]	; 0x7fc
      _b = b;
    9298:	mvn.w	r6, #45	; 0x2d
    929c:	strb.w	r6, [r4, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92a0:	movw	r6, #355	; 0x163
    92a4:	str.w	r6, [r4, #2048]	; 0x800
      _s = s;
    92a8:	mvn.w	r6, #2
    92ac:	strb.w	r6, [r4, #2052]	; 0x804
      _b = b;
    92b0:	mvn.w	r6, #62	; 0x3e
    92b4:	strb.w	r6, [r4, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92b8:	movs	r6, #11
    92ba:	str.w	r6, [r4, #2056]	; 0x808
      _s = s;
    92be:	mvn.w	r6, #20
    92c2:	strb.w	r6, [r4, #2060]	; 0x80c
      _b = b;
    92c6:	mvn.w	r6, #16
    92ca:	strb.w	r6, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92ce:	movs	r6, #9
    92d0:	str.w	r6, [r4, #2064]	; 0x810
      _s = s;
    92d4:	mvn.w	r6, #66	; 0x42
    92d8:	strb.w	r6, [r4, #2068]	; 0x814
      _b = b;
    92dc:	mvn.w	r6, #9
    92e0:	strb.w	r6, [r4, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92e4:	movs	r6, #22
    92e6:	str.w	r6, [r4, #2072]	; 0x818
      _s = s;
    92ea:	mvn.w	r6, #16
    92ee:	strb.w	r6, [r4, #2076]	; 0x81c
      _b = b;
    92f2:	mvn.w	r6, #18
    92f6:	strb.w	r6, [r4, #2077]	; 0x81d
    92fa:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92fe:	str.w	ip, [r4, #2120]	; 0x848
      _s = s;
      _b = b;
    9302:	strb.w	r6, [r4, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9306:	movs	r6, #3
    9308:	str.w	r5, [r4, #2080]	; 0x820
    930c:	str.w	r6, [r4, #2112]	; 0x840
      _s = s;
    9310:	mvn.w	r6, #107	; 0x6b
    9314:	strb.w	r5, [r4, #2084]	; 0x824
    9318:	strb.w	r6, [r4, #2116]	; 0x844
    931c:	mvn.w	r6, #2
      _b = b;
    9320:	strb.w	r5, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9324:	strb.w	r6, [r4, #2124]	; 0x84c
      _b = b;
    9328:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    932c:	str.w	r5, [r4, #2088]	; 0x828
      _s = s;
      _b = b;
    9330:	strb.w	r6, [r4, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9334:	movw	r6, #357	; 0x165
      _s = s;
    9338:	strb.w	r5, [r4, #2092]	; 0x82c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    933c:	str.w	r6, [r4, #2128]	; 0x850
      _s = s;
    9340:	mvn.w	r6, #15
      _b = b;
    9344:	strb.w	r5, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9348:	strb.w	r6, [r4, #2132]	; 0x854
      _b = b;
    934c:	strb.w	r6, [r4, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9350:	movs	r6, #3
    9352:	str.w	r5, [r4, #2096]	; 0x830
    9356:	str.w	r6, [r4, #2136]	; 0x858
      _s = s;
    935a:	mvn.w	r6, #22
    935e:	strb.w	r5, [r4, #2100]	; 0x834
    9362:	strb.w	r6, [r4, #2140]	; 0x85c
      _b = b;
    9366:	mvn.w	r6, #34	; 0x22
    936a:	strb.w	r5, [r4, #2101]	; 0x835
    936e:	strb.w	r6, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9372:	movs	r6, #11
    9374:	str.w	r5, [r4, #2104]	; 0x838
    9378:	mov	r7, r6
    937a:	str.w	r6, [r4, #2144]	; 0x860
      _s = s;
    937e:	mvn.w	r6, #23
    9382:	strb.w	r5, [r4, #2108]	; 0x83c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9386:	str.w	r7, [r4, #2152]	; 0x868
      _s = s;
    938a:	strb.w	r6, [r4, #2148]	; 0x864
      _b = b;
    938e:	mvn.w	r6, #20
    9392:	strb.w	r5, [r4, #2109]	; 0x83d
    9396:	strb.w	r6, [r4, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    939a:	mvn.w	r6, #20
    939e:	strb.w	r6, [r4, #2156]	; 0x86c
      _b = b;
    93a2:	mvn.w	r6, #6
    93a6:	strb.w	r6, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93aa:	movs	r6, #13
    93ac:	str.w	r6, [r4, #2160]	; 0x870
      _s = s;
    93b0:	mvn.w	r6, #21
    93b4:	strb.w	r6, [r4, #2164]	; 0x874
      _b = b;
    93b8:	mvn.w	r6, #7
    93bc:	strb.w	r6, [r4, #2165]	; 0x875
    93c0:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93c4:	str.w	ip, [r4, #2176]	; 0x880
      _s = s;
      _b = b;
    93c8:	strb.w	r6, [r4, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93cc:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93d0:	str.w	r8, [r4, #2168]	; 0x878
      _s = s;
    93d4:	strb.w	r6, [r4, #2172]	; 0x87c
    93d8:	mov.w	r6, #4294967295
      _b = b;
    93dc:	strb.w	sl, [r4, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93e0:	strb.w	r6, [r4, #2180]	; 0x884
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93e4:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    93e8:	strb.w	sl, [r4, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93ec:	str.w	r6, [r4, #2184]	; 0x888
      _s = s;
    93f0:	mov.w	r6, #4294967295
    93f4:	strb.w	r6, [r4, #2188]	; 0x88c
      _b = b;
    93f8:	mvn.w	r6, #76	; 0x4c
    93fc:	strb.w	r6, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9400:	movs	r6, #10
    9402:	str.w	r6, [r4, #2192]	; 0x890
      _s = s;
    9406:	mvn.w	r6, #26
    940a:	strb.w	r6, [r4, #2196]	; 0x894
      _b = b;
    940e:	mvn.w	r6, #31
    9412:	strb.w	r6, [r4, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9416:	movs	r6, #19
    9418:	str.w	r6, [r4, #2200]	; 0x898
      _s = s;
    941c:	mvn.w	r6, #28
    9420:	strb.w	r6, [r4, #2204]	; 0x89c
      _b = b;
    9424:	mvn.w	r6, #61	; 0x3d
    9428:	strb.w	r6, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    942c:	movs	r6, #21
    942e:	str.w	r6, [r4, #2208]	; 0x8a0
      _s = s;
    9432:	mvn.w	r6, #33	; 0x21
    9436:	strb.w	r6, [r4, #2212]	; 0x8a4
      _b = b;
    943a:	mvn.w	r6, #68	; 0x44
    943e:	strb.w	r6, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9442:	movs	r6, #16
    9444:	str.w	r6, [r4, #2216]	; 0x8a8
      _s = s;
    9448:	mvn.w	r6, #28
    944c:	strb.w	r6, [r4, #2220]	; 0x8ac
      _b = b;
    9450:	mvn.w	r6, #22
    9454:	strb.w	r6, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9458:	movs	r6, #7
    945a:	str.w	r6, [r4, #2224]	; 0x8b0
      _s = s;
    945e:	mvn.w	r6, #28
    9462:	strb.w	r6, [r4, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9466:	movs	r6, #10
    9468:	str.w	r6, [r4, #2232]	; 0x8b8
      _s = s;
    946c:	mvn.w	r6, #45	; 0x2d
    9470:	strb.w	r6, [r4, #2236]	; 0x8bc
      _b = b;
    9474:	mvn.w	r6, #13
    9478:	strb.w	r6, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    947c:	movs	r6, #12
    947e:	mov	r7, r6
    9480:	str.w	r6, [r4, #2240]	; 0x8c0
      _s = s;
    9484:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9488:	str.w	r7, [r4, #2248]	; 0x8c8
      _s = s;
    948c:	strb.w	r6, [r4, #2244]	; 0x8c4
      _b = b;
    9490:	mvn.w	r6, #2
    9494:	strb.w	r6, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9498:	mvn.w	r6, #52	; 0x34
    949c:	strb.w	r6, [r4, #2252]	; 0x8cc
      _b = b;
    94a0:	mvn.w	r6, #12
    94a4:	strb.w	r6, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94a8:	movs	r6, #19
    94aa:	str.w	ip, [r4, #2312]	; 0x908
    94ae:	str.w	r6, [r4, #2256]	; 0x8d0
      _s = s;
    94b2:	mvn.w	r6, #20
      _b = b;
    94b6:	strb.w	r9, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94ba:	strb.w	r6, [r4, #2260]	; 0x8d4
      _b = b;
    94be:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94c2:	str.w	r5, [r4, #2272]	; 0x8e0
      _s = s;
      _b = b;
    94c6:	strb.w	r6, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94ca:	movs	r6, #10
      _s = s;
    94cc:	strb.w	r5, [r4, #2276]	; 0x8e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94d0:	str.w	r6, [r4, #2264]	; 0x8d8
      _s = s;
    94d4:	mvn.w	r6, #9
      _b = b;
    94d8:	strb.w	r5, [r4, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94dc:	strb.w	r6, [r4, #2268]	; 0x8dc
      _b = b;
    94e0:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94e4:	str.w	r5, [r4, #2280]	; 0x8e8
      _s = s;
      _b = b;
    94e8:	strb.w	r6, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94ec:	movs	r6, #2
      _s = s;
    94ee:	strb.w	r5, [r4, #2284]	; 0x8ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94f2:	str.w	r6, [r4, #2304]	; 0x900
      _s = s;
    94f6:	mvn.w	r6, #111	; 0x6f
      _b = b;
    94fa:	strb.w	r5, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94fe:	strb.w	r6, [r4, #2308]	; 0x904
      _b = b;
    9502:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9506:	str.w	r5, [r4, #2288]	; 0x8f0
      _s = s;
      _b = b;
    950a:	strb.w	r6, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    950e:	mov.w	r6, #4294967295
    9512:	strb.w	r5, [r4, #2292]	; 0x8f4
    9516:	strb.w	r6, [r4, #2316]	; 0x90c
      _b = b;
    951a:	mvn.w	r6, #84	; 0x54
    951e:	strb.w	r5, [r4, #2293]	; 0x8f5
    9522:	strb.w	r6, [r4, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9526:	movs	r6, #9
    9528:	str.w	r5, [r4, #2296]	; 0x8f8
    952c:	str.w	r6, [r4, #2320]	; 0x910
      _s = s;
    9530:	mvn.w	r6, #32
    9534:	strb.w	r5, [r4, #2300]	; 0x8fc
    9538:	strb.w	r6, [r4, #2324]	; 0x914
      _b = b;
    953c:	mvn.w	r6, #6
    9540:	strb.w	r5, [r4, #2301]	; 0x8fd
    9544:	strb.w	r6, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9548:	movs	r6, #16
    954a:	str.w	r6, [r4, #2328]	; 0x918
      _s = s;
    954e:	mvn.w	r6, #31
    9552:	strb.w	r6, [r4, #2332]	; 0x91c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9556:	movs	r6, #18
    9558:	str.w	r6, [r4, #2336]	; 0x920
      _s = s;
    955c:	mvn.w	r6, #19
    9560:	strb.w	r6, [r4, #2340]	; 0x924
      _b = b;
    9564:	mvn.w	r6, #2
    9568:	strb.w	r6, [r4, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    956c:	movs	r6, #19
    956e:	str.w	ip, [r4, #2376]	; 0x948
    9572:	mov	r7, r6
    9574:	str.w	r6, [r4, #2344]	; 0x928
      _s = s;
      _b = b;
    9578:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    957c:	str.w	ip, [r4, #2384]	; 0x950
    9580:	str.w	r2, [r4, #2416]	; 0x970
      _s = s;
      _b = b;
    9584:	strb.w	r6, [r4, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9588:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    958c:	str.w	r7, [r4, #2352]	; 0x930
      _s = s;
    9590:	strb.w	r6, [r4, #2356]	; 0x934
      _b = b;
    9594:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9598:	strb.w	fp, [r4, #2348]	; 0x92c
      _b = b;
    959c:	strb.w	r6, [r4, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95a0:	movs	r6, #15
    95a2:	str.w	r8, [r4, #2392]	; 0x958
    95a6:	str.w	r6, [r4, #2360]	; 0x938
      _s = s;
    95aa:	mvn.w	r6, #31
    95ae:	strb.w	r6, [r4, #2364]	; 0x93c
      _b = b;
    95b2:	mvn.w	r6, #6
    95b6:	strb.w	r6, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95ba:	movs	r6, #1
    95bc:	str.w	r6, [r4, #2368]	; 0x940
      _s = s;
    95c0:	mvn.w	r6, #20
    95c4:	strb.w	r6, [r4, #2372]	; 0x944
      _b = b;
    95c8:	mvn.w	r6, #73	; 0x49
    95cc:	strb.w	r6, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95d0:	mov.w	r6, #4294967295
    95d4:	strb.w	r6, [r4, #2380]	; 0x94c
      _b = b;
    95d8:	mvn.w	r6, #91	; 0x5b
    95dc:	strb.w	r6, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95e0:	mov.w	r6, #4294967295
    95e4:	strb.w	r6, [r4, #2388]	; 0x954
      _b = b;
    95e8:	mvn.w	r6, #111	; 0x6f
    95ec:	strb.w	r6, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95f0:	mvn.w	r6, #26
    95f4:	strb.w	r6, [r4, #2396]	; 0x95c
      _b = b;
    95f8:	mvn.w	r6, #54	; 0x36
    95fc:	strb.w	r6, [r4, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9600:	movs	r6, #9
    9602:	str.w	r6, [r4, #2400]	; 0x960
      _s = s;
    9606:	mvn.w	r6, #34	; 0x22
    960a:	strb.w	r6, [r4, #2404]	; 0x964
      _b = b;
    960e:	mvn.w	r6, #44	; 0x2c
    9612:	strb.w	r6, [r4, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9616:	movs	r6, #1
    9618:	b.n	9620 <_GLOBAL__sub_I_bri_level+0x4448>
    961a:	nop
    961c:	.word	0x20003e48
    9620:	str.w	r6, [r4, #2408]	; 0x968
      _s = s;
    9624:	mvn.w	r6, #27
    9628:	strb.w	r6, [r4, #2412]	; 0x96c
      _b = b;
    962c:	mvn.w	r6, #72	; 0x48
    9630:	strb.w	r6, [r4, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9634:	mvn.w	r6, #28
    9638:	strb.w	r6, [r4, #2420]	; 0x974
      _b = b;
    963c:	mvn.w	r6, #45	; 0x2d
    9640:	strb.w	r6, [r4, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9644:	movs	r6, #19
    9646:	str.w	r6, [r4, #2424]	; 0x978
      _s = s;
    964a:	mvn.w	r6, #34	; 0x22
    964e:	strb.w	r6, [r4, #2428]	; 0x97c
      _b = b;
    9652:	mov.w	r6, #4294967295
    9656:	strb.w	r6, [r4, #2429]	; 0x97d
    965a:	mov.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    965e:	str.w	r5, [r4, #2464]	; 0x9a0
      _s = s;
      _b = b;
    9662:	strb.w	r6, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9666:	movs	r6, #22
      _s = s;
    9668:	strb.w	r5, [r4, #2468]	; 0x9a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    966c:	str.w	r6, [r4, #2432]	; 0x980
      _s = s;
    9670:	mvn.w	r6, #55	; 0x37
      _b = b;
    9674:	strb.w	r5, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9678:	strb.w	r6, [r4, #2436]	; 0x984
      _b = b;
    967c:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9680:	str.w	r5, [r4, #2472]	; 0x9a8
      _s = s;
      _b = b;
    9684:	strb.w	r6, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9688:	movs	r6, #23
      _s = s;
    968a:	strb.w	r5, [r4, #2476]	; 0x9ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    968e:	str.w	r6, [r4, #2440]	; 0x988
      _s = s;
    9692:	mvn.w	r6, #68	; 0x44
      _b = b;
    9696:	strb.w	r5, [r4, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    969a:	strb.w	r6, [r4, #2444]	; 0x98c
      _b = b;
    969e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96a2:	str.w	r5, [r4, #2480]	; 0x9b0
      _s = s;
      _b = b;
    96a6:	strb.w	r6, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96aa:	movs	r6, #13
      _s = s;
    96ac:	strb.w	r5, [r4, #2484]	; 0x9b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96b0:	str.w	r6, [r4, #2448]	; 0x990
      _s = s;
    96b4:	mvn.w	r6, #54	; 0x36
      _b = b;
    96b8:	strb.w	r5, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96bc:	strb.w	r6, [r4, #2452]	; 0x994
      _b = b;
    96c0:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96c4:	str.w	r5, [r4, #2488]	; 0x9b8
      _s = s;
      _b = b;
    96c8:	strb.w	r6, [r4, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96cc:	movw	r6, #357	; 0x165
      _s = s;
    96d0:	strb.w	r5, [r4, #2492]	; 0x9bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96d4:	mov	r7, r6
    96d6:	str.w	r6, [r4, #2456]	; 0x998
      _s = s;
    96da:	mov.w	r6, #4294967295
      _b = b;
    96de:	strb.w	r5, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96e2:	str.w	r7, [r4, #2496]	; 0x9c0
      _s = s;
    96e6:	strb.w	r6, [r4, #2460]	; 0x99c
    96ea:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96ee:	str.w	r7, [r4, #2504]	; 0x9c8
      _s = s;
    96f2:	strb.w	r6, [r4, #2500]	; 0x9c4
      _b = b;
    96f6:	mvn.w	r6, #116	; 0x74
    96fa:	strb.w	r6, [r4, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96fe:	mov.w	r6, #4294967295
    9702:	strb.w	r6, [r4, #2508]	; 0x9cc
      _b = b;
    9706:	mvn.w	r6, #82	; 0x52
    970a:	strb.w	r6, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    970e:	movs	r6, #18
    9710:	str.w	r6, [r4, #2512]	; 0x9d0
      _s = s;
    9714:	mvn.w	r6, #46	; 0x2e
    9718:	strb.w	r6, [r4, #2516]	; 0x9d4
      _b = b;
    971c:	mvn.w	r6, #2
    9720:	strb.w	r6, [r4, #2517]	; 0x9d5
    9724:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9728:	str.w	ip, [r4, #2568]	; 0xa08
      _s = s;
      _b = b;
    972c:	strb.w	r6, [r4, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9730:	movs	r6, #21
    9732:	str.w	r6, [r4, #2520]	; 0x9d8
      _s = s;
    9736:	mvn.w	r6, #29
    973a:	strb.w	r6, [r4, #2524]	; 0x9dc
      _b = b;
    973e:	mvn.w	r6, #2
    9742:	strb.w	r6, [r4, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9746:	movs	r6, #19
    9748:	str.w	r6, [r4, #2528]	; 0x9e0
      _s = s;
    974c:	mvn.w	r6, #2
    9750:	strb.w	r6, [r4, #2532]	; 0x9e4
      _b = b;
    9754:	mvn.w	r6, #83	; 0x53
    9758:	strb.w	r6, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    975c:	movs	r6, #34	; 0x22
    975e:	str.w	r6, [r4, #2536]	; 0x9e8
      _s = s;
    9762:	mvn.w	r6, #2
    9766:	strb.w	r6, [r4, #2540]	; 0x9ec
      _b = b;
    976a:	mvn.w	r6, #6
    976e:	strb.w	r6, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9772:	movs	r6, #20
    9774:	str.w	r6, [r4, #2544]	; 0x9f0
      _s = s;
    9778:	mvn.w	r6, #2
    977c:	strb.w	r6, [r4, #2548]	; 0x9f4
      _b = b;
    9780:	mvn.w	r6, #54	; 0x36
    9784:	strb.w	r6, [r4, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9788:	movs	r6, #15
    978a:	str.w	r6, [r4, #2552]	; 0x9f8
      _s = s;
    978e:	mvn.w	r6, #10
    9792:	strb.w	r6, [r4, #2556]	; 0x9fc
      _b = b;
    9796:	mvn.w	r6, #36	; 0x24
    979a:	strb.w	r6, [r4, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    979e:	movs	r6, #11
    97a0:	str.w	r6, [r4, #2560]	; 0xa00
      _s = s;
    97a4:	mvn.w	r6, #41	; 0x29
    97a8:	strb.w	r6, [r4, #2564]	; 0xa04
      _b = b;
    97ac:	mvn.w	r6, #42	; 0x2a
    97b0:	strb.w	r6, [r4, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    97b4:	mov.w	r6, #4294967295
    97b8:	strb.w	r6, [r4, #2572]	; 0xa0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97bc:	movs	r6, #5
    97be:	str.w	r6, [r4, #2576]	; 0xa10
      _s = s;
    97c2:	mvn.w	r6, #22
    97c6:	strb.w	r6, [r4, #2580]	; 0xa14
      _b = b;
    97ca:	mvn.w	r6, #65	; 0x41
    97ce:	strb.w	r6, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97d2:	movs	r6, #17
    97d4:	str.w	r6, [r4, #2584]	; 0xa18
      _s = s;
    97d8:	mvn.w	r6, #36	; 0x24
    97dc:	strb.w	r6, [r4, #2588]	; 0xa1c
      _b = b;
    97e0:	mvn.w	r6, #18
    97e4:	strb.w	r6, [r4, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97e8:	movs	r6, #13
    97ea:	str.w	r6, [r4, #2592]	; 0xa20
      _s = s;
    97ee:	mvn.w	r6, #42	; 0x2a
    97f2:	strb.w	r6, [r4, #2596]	; 0xa24
      _b = b;
    97f6:	mvn.w	r6, #21
    97fa:	strb.w	r6, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97fe:	movs	r6, #4
    9800:	str.w	r6, [r4, #2600]	; 0xa28
      _s = s;
    9804:	mvn.w	r6, #29
    9808:	strb.w	r6, [r4, #2604]	; 0xa2c
      _b = b;
    980c:	mvn.w	r6, #13
    9810:	strb.w	r6, [r4, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9814:	mov.w	r6, #81	; 0x51
      _b = b;
    9818:	strb.w	lr, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    981c:	strb.w	r6, [r4, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9820:	movs	r6, #12
      _s = s;
    9822:	strb.w	sl, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9826:	str.w	r6, [r4, #2608]	; 0xa30
      _s = s;
    982a:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    982e:	str.w	r5, [r4, #2656]	; 0xa60
      _s = s;
    9832:	strb.w	r6, [r4, #2612]	; 0xa34
      _b = b;
    9836:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    983a:	strb.w	r5, [r4, #2660]	; 0xa64
      _b = b;
    983e:	strb.w	r6, [r4, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9842:	movs	r6, #13
      _s = s;
      _b = b;
    9844:	strb.w	r5, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9848:	str.w	r6, [r4, #2616]	; 0xa38
      _s = s;
      _b = b;
    984c:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9850:	str.w	r5, [r4, #2664]	; 0xa68
      _s = s;
      _b = b;
    9854:	strb.w	r6, [r4, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9858:	movs	r6, #16
      _s = s;
    985a:	strb.w	r5, [r4, #2668]	; 0xa6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    985e:	str.w	r6, [r4, #2624]	; 0xa40
      _s = s;
    9862:	mvn.w	r6, #21
      _b = b;
    9866:	strb.w	r5, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    986a:	strb.w	r6, [r4, #2628]	; 0xa44
      _b = b;
    986e:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9872:	str.w	r5, [r4, #2672]	; 0xa70
      _s = s;
      _b = b;
    9876:	strb.w	r6, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    987a:	movs	r6, #22
      _s = s;
    987c:	strb.w	r5, [r4, #2676]	; 0xa74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9880:	str.w	r6, [r4, #2632]	; 0xa48
      _s = s;
    9884:	mvn.w	r6, #37	; 0x25
      _b = b;
    9888:	strb.w	r5, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    988c:	strb.w	r6, [r4, #2636]	; 0xa4c
      _b = b;
    9890:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9894:	str.w	r5, [r4, #2680]	; 0xa78
      _s = s;
      _b = b;
    9898:	strb.w	r6, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    989c:	movs	r6, #20
      _s = s;
    989e:	strb.w	r5, [r4, #2684]	; 0xa7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98a2:	str.w	r6, [r4, #2640]	; 0xa50
      _s = s;
    98a6:	mvn.w	r6, #45	; 0x2d
      _b = b;
    98aa:	strb.w	r5, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    98ae:	strb.w	r6, [r4, #2644]	; 0xa54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98b2:	movs	r6, #4
    98b4:	str.w	r6, [r4, #2648]	; 0xa58
      _s = s;
    98b8:	mvn.w	r6, #22
    98bc:	strb.w	r6, [r4, #2652]	; 0xa5c
      _b = b;
    98c0:	mvn.w	r6, #114	; 0x72
    98c4:	strb.w	r6, [r4, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98c8:	movs	r6, #3
    98ca:	str.w	r6, [r4, #2688]	; 0xa80
      _s = s;
      _b = b;
    98ce:	mvn.w	r6, #29
    98d2:	strb.w	r6, [r4, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98d6:	movs	r6, #4
      _s = s;
      _b = b;
    98d8:	strb.w	r9, [r4, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98dc:	str.w	r6, [r4, #2696]	; 0xa88
      _s = s;
    98e0:	mvn.w	r6, #18
      _b = b;
    98e4:	strb.w	lr, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    98e8:	strb.w	r6, [r4, #2700]	; 0xa8c
      _b = b;
    98ec:	mvn.w	r6, #38	; 0x26
    98f0:	strb.w	r9, [r4, #2773]	; 0xad5
    98f4:	strb.w	r6, [r4, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98f8:	movs	r6, #20
    98fa:	str.w	r6, [r4, #2704]	; 0xa90
      _s = s;
    98fe:	mvn.w	r6, #66	; 0x42
    9902:	strb.w	r6, [r4, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9906:	movs	r6, #21
    9908:	str.w	r6, [r4, #2712]	; 0xa98
      _s = s;
    990c:	mvn.w	r6, #28
    9910:	strb.w	r6, [r4, #2716]	; 0xa9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9914:	movs	r6, #25
    9916:	str.w	r6, [r4, #2720]	; 0xaa0
      _s = s;
    991a:	mvn.w	r6, #2
    991e:	strb.w	r6, [r4, #2724]	; 0xaa4
      _b = b;
    9922:	mvn.w	r6, #88	; 0x58
    9926:	strb.w	r6, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    992a:	movs	r6, #30
    992c:	str.w	r6, [r4, #2728]	; 0xaa8
      _s = s;
    9930:	mvn.w	r6, #2
    9934:	strb.w	r6, [r4, #2732]	; 0xaac
      _b = b;
    9938:	mvn.w	r6, #42	; 0x2a
    993c:	strb.w	r6, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9940:	movs	r6, #28
    9942:	str.w	r6, [r4, #2736]	; 0xab0
      _s = s;
    9946:	mov.w	r6, #4294967295
    994a:	strb.w	r6, [r4, #2740]	; 0xab4
      _b = b;
    994e:	mvn.w	r6, #40	; 0x28
    9952:	strb.w	r6, [r4, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9956:	movs	r6, #19
    9958:	str.w	r6, [r4, #2744]	; 0xab8
      _s = s;
    995c:	mvn.w	r6, #6
    9960:	strb.w	r6, [r4, #2748]	; 0xabc
      _b = b;
    9964:	mvn.w	r6, #32
    9968:	strb.w	r6, [r4, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    996c:	movs	r6, #14
    996e:	str.w	r6, [r4, #2752]	; 0xac0
      _s = s;
    9972:	mvn.w	r6, #29
    9976:	strb.w	r6, [r4, #2756]	; 0xac4
      _b = b;
    997a:	mvn.w	r6, #20
    997e:	strb.w	r6, [r4, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9982:	movs	r6, #11
    9984:	str.w	r6, [r4, #2760]	; 0xac8
      _s = s;
    9988:	mvn.w	r6, #41	; 0x29
    998c:	strb.w	r6, [r4, #2764]	; 0xacc
      _b = b;
    9990:	mvn.w	r6, #37	; 0x25
    9994:	strb.w	r6, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9998:	movs	r6, #22
    999a:	str.w	r6, [r4, #2768]	; 0xad0
      _s = s;
    999e:	mvn.w	r6, #79	; 0x4f
    99a2:	strb.w	r6, [r4, #2772]	; 0xad4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99a6:	movs	r6, #19
    99a8:	str.w	r6, [r4, #2776]	; 0xad8
      _s = s;
    99ac:	mvn.w	r6, #31
    99b0:	strb.w	r6, [r4, #2780]	; 0xadc
      _b = b;
    99b4:	mvn.w	r6, #6
    99b8:	strb.w	r6, [r4, #2781]	; 0xadd
    99bc:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99c0:	str.w	r2, [r4, #2808]	; 0xaf8
      _s = s;
      _b = b;
    99c4:	strb.w	r6, [r4, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99c8:	movs	r6, #10
    99ca:	str.w	r2, [r4, #2816]	; 0xb00
    99ce:	str.w	r6, [r4, #2784]	; 0xae0
      _s = s;
      _b = b;
    99d2:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99d6:	strb.w	sl, [r4, #2788]	; 0xae4
      _b = b;
    99da:	strb.w	r6, [r4, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99de:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99e2:	str.w	r8, [r4, #2792]	; 0xae8
      _s = s;
    99e6:	strb.w	r6, [r4, #2796]	; 0xaec
      _b = b;
    99ea:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99ee:	str.w	r8, [r4, #2800]	; 0xaf0
      _s = s;
      _b = b;
    99f2:	strb.w	r6, [r4, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99f6:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99fa:	str.w	r5, [r4, #2848]	; 0xb20
      _s = s;
    99fe:	strb.w	r6, [r4, #2804]	; 0xaf4
      _b = b;
    9a02:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a06:	strb.w	r5, [r4, #2852]	; 0xb24
      _b = b;
    9a0a:	strb.w	r6, [r4, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a0e:	mvn.w	r6, #22
      _b = b;
    9a12:	strb.w	r5, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a16:	strb.w	r6, [r4, #2812]	; 0xafc
    9a1a:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a1e:	str.w	r5, [r4, #2856]	; 0xb28
      _s = s;
    9a22:	strb.w	r6, [r4, #2820]	; 0xb04
      _b = b;
    9a26:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a2a:	strb.w	r5, [r4, #2860]	; 0xb2c
      _b = b;
    9a2e:	strb.w	r6, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a32:	movs	r6, #12
      _s = s;
      _b = b;
    9a34:	strb.w	r5, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a38:	str.w	r6, [r4, #2824]	; 0xb08
      _s = s;
    9a3c:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a40:	str.w	r5, [r4, #2864]	; 0xb30
      _s = s;
    9a44:	strb.w	r6, [r4, #2828]	; 0xb0c
      _b = b;
    9a48:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a4c:	strb.w	r5, [r4, #2868]	; 0xb34
      _b = b;
    9a50:	strb.w	r6, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a54:	movs	r6, #17
    9a56:	str.w	r6, [r4, #2832]	; 0xb10
      _s = s;
    9a5a:	mvn.w	r6, #43	; 0x2b
    9a5e:	strb.w	r6, [r4, #2836]	; 0xb14
      _b = b;
    9a62:	mov.w	r6, #4294967295
    9a66:	strb.w	r6, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a6a:	mov.w	r6, #358	; 0x166
    9a6e:	str.w	r6, [r4, #2840]	; 0xb18
      _s = s;
    9a72:	mvn.w	r6, #15
    9a76:	strb.w	r6, [r4, #2844]	; 0xb1c
      _b = b;
    9a7a:	mvn.w	r6, #102	; 0x66
    9a7e:	strb.w	r6, [r4, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a82:	mvn.w	r6, #113	; 0x71
      _b = b;
    9a86:	strb.w	r5, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a8a:	strb.w	r6, [r4, #2884]	; 0xb44
      _b = b;
    9a8e:	mvn.w	r6, #12
    9a92:	strb.w	r9, [r4, #2909]	; 0xb5d
    9a96:	strb.w	r6, [r4, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a9a:	mvn.w	r6, #24
    9a9e:	strb.w	lr, [r4, #2916]	; 0xb64
    9aa2:	strb.w	r6, [r4, #2892]	; 0xb4c
      _b = b;
    9aa6:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aaa:	str.w	r5, [r4, #2872]	; 0xb38
      _s = s;
      _b = b;
    9aae:	strb.w	r6, [r4, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ab2:	movs	r6, #15
      _s = s;
    9ab4:	strb.w	r5, [r4, #2876]	; 0xb3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ab8:	str.w	r6, [r4, #2896]	; 0xb50
      _s = s;
    9abc:	mvn.w	r6, #47	; 0x2f
      _b = b;
    9ac0:	strb.w	r5, [r4, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ac4:	strb.w	r6, [r4, #2900]	; 0xb54
      _b = b;
    9ac8:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9acc:	str.w	r5, [r4, #2880]	; 0xb40
      _s = s;
      _b = b;
    9ad0:	strb.w	r6, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ad4:	movs	r6, #20
    9ad6:	str.w	r8, [r4, #2888]	; 0xb48
    9ada:	str.w	r6, [r4, #2904]	; 0xb58
      _s = s;
    9ade:	mvn.w	r6, #56	; 0x38
    9ae2:	strb.w	r6, [r4, #2908]	; 0xb5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ae6:	movs	r6, #28
    9ae8:	str.w	r6, [r4, #2912]	; 0xb60
      _s = s;
      _b = b;
    9aec:	mvn.w	r6, #47	; 0x2f
    9af0:	strb.w	r6, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9af4:	mvn.w	r6, #2
    9af8:	strb.w	r6, [r4, #2924]	; 0xb6c
      _b = b;
    9afc:	mvn.w	r6, #60	; 0x3c
    9b00:	strb.w	r6, [r4, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b04:	movs	r6, #24
    9b06:	mov	r7, r6
    9b08:	str.w	r6, [r4, #2928]	; 0xb70
      _s = s;
    9b0c:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b10:	str.w	r7, [r4, #2936]	; 0xb78
      _s = s;
    9b14:	strb.w	r6, [r4, #2932]	; 0xb74
      _b = b;
    9b18:	mvn.w	r6, #49	; 0x31
    9b1c:	strb.w	r6, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b20:	mvn.w	r6, #12
    9b24:	strb.w	r6, [r4, #2940]	; 0xb7c
      _b = b;
    9b28:	mvn.w	r6, #17
    9b2c:	strb.w	r6, [r4, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b30:	movs	r6, #15
    9b32:	str.w	r6, [r4, #2944]	; 0xb80
      _s = s;
    9b36:	mvn.w	r6, #24
    9b3a:	strb.w	r6, [r4, #2948]	; 0xb84
      _b = b;
    9b3e:	mvn.w	r6, #17
    9b42:	strb.w	r6, [r4, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b46:	movs	r6, #23
    9b48:	str.w	r6, [r4, #2952]	; 0xb88
      _s = s;
    9b4c:	mvn.w	r6, #58	; 0x3a
    9b50:	strb.w	r6, [r4, #2956]	; 0xb8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b54:	movs	r6, #29
    9b56:	str.w	r6, [r4, #2920]	; 0xb68
      _s = s;
      _b = b;
    9b5a:	mvn.w	r6, #27
    9b5e:	strb.w	r6, [r4, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b62:	movs	r6, #24
    9b64:	str.w	ip, [r4, #3032]	; 0xbd8
    9b68:	str.w	r6, [r4, #2960]	; 0xb90
      _s = s;
    9b6c:	mvn.w	r6, #17
    9b70:	strb.w	fp, [r4, #2980]	; 0xba4
    9b74:	strb.w	r6, [r4, #2964]	; 0xb94
      _b = b;
    9b78:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b7c:	str.w	r8, [r4, #2984]	; 0xba8
      _s = s;
      _b = b;
    9b80:	strb.w	r6, [r4, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b84:	movs	r6, #29
      _s = s;
    9b86:	strb.w	fp, [r4, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b8a:	str.w	r6, [r4, #2968]	; 0xb98
      _s = s;
    9b8e:	mvn.w	r6, #7
      _b = b;
    9b92:	strb.w	fp, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b96:	strb.w	r6, [r4, #2972]	; 0xb9c
      _b = b;
    9b9a:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b9e:	str.w	r5, [r4, #3040]	; 0xbe0
      _s = s;
      _b = b;
    9ba2:	strb.w	r6, [r4, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ba6:	movs	r6, #14
      _s = s;
    9ba8:	strb.w	r5, [r4, #3044]	; 0xbe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bac:	str.w	r6, [r4, #2976]	; 0xba0
      _s = s;
      _b = b;
    9bb0:	mvn.w	r6, #59	; 0x3b
    9bb4:	strb.w	r6, [r4, #2981]	; 0xba5
    9bb8:	mvn.w	r6, #90	; 0x5a
    9bbc:	strb.w	r6, [r4, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bc0:	movw	r6, #359	; 0x167
    9bc4:	str.w	r6, [r4, #2992]	; 0xbb0
      _s = s;
    9bc8:	mvn.w	r6, #21
    9bcc:	strb.w	r6, [r4, #2996]	; 0xbb4
      _b = b;
    9bd0:	mvn.w	r6, #45	; 0x2d
    9bd4:	strb.w	r6, [r4, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bd8:	movs	r6, #9
    9bda:	str.w	r6, [r4, #3000]	; 0xbb8
      _s = s;
    9bde:	mvn.w	r6, #27
    9be2:	strb.w	r6, [r4, #3004]	; 0xbbc
      _b = b;
    9be6:	mvn.w	r6, #64	; 0x40
    9bea:	strb.w	r6, [r4, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bee:	movs	r6, #10
    9bf0:	str.w	r6, [r4, #3008]	; 0xbc0
      _s = s;
    9bf4:	mvn.w	r6, #18
    9bf8:	strb.w	r6, [r4, #3012]	; 0xbc4
      _b = b;
    9bfc:	mvn.w	r6, #113	; 0x71
    9c00:	strb.w	r6, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c04:	movs	r6, #17
    9c06:	str.w	r6, [r4, #3016]	; 0xbc8
      _s = s;
    9c0a:	mvn.w	r6, #37	; 0x25
    9c0e:	strb.w	r6, [r4, #3020]	; 0xbcc
      _b = b;
    9c12:	mvn.w	r6, #18
    9c16:	strb.w	r6, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c1a:	movs	r6, #14
    9c1c:	str.w	r6, [r4, #3024]	; 0xbd0
      _s = s;
    9c20:	mvn.w	r6, #44	; 0x2c
    9c24:	strb.w	r6, [r4, #3028]	; 0xbd4
    9c28:	mov.w	r6, #4294967295
    9c2c:	strb.w	r6, [r4, #3036]	; 0xbdc
      _b = b;
    9c30:	mvn.w	r6, #105	; 0x69
    9c34:	strb.w	r6, [r4, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c38:	mov.w	r6, #87	; 0x57
      _b = b;
    9c3c:	strb.w	r5, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c40:	strb.w	r6, [r4, #3084]	; 0xc0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c44:	movs	r6, #25
      _s = s;
      _b = b;
    9c46:	strb.w	r9, [r4, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c4a:	str.w	r6, [r4, #3072]	; 0xc00
      _s = s;
    9c4e:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c52:	str.w	r5, [r4, #3048]	; 0xbe8
      _s = s;
    9c56:	strb.w	r6, [r4, #3076]	; 0xc04
      _b = b;
    9c5a:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c5e:	strb.w	r5, [r4, #3052]	; 0xbec
      _b = b;
    9c62:	strb.w	r6, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c66:	movs	r6, #5
      _s = s;
      _b = b;
    9c68:	strb.w	r5, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c6c:	str.w	r6, [r4, #3080]	; 0xc08
      _s = s;
      _b = b;
    9c70:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c74:	str.w	r5, [r4, #3056]	; 0xbf0
      _s = s;
      _b = b;
    9c78:	strb.w	r6, [r4, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c7c:	movs	r6, #13
      _s = s;
    9c7e:	strb.w	r5, [r4, #3060]	; 0xbf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c82:	str.w	r6, [r4, #3088]	; 0xc10
      _s = s;
    9c86:	mvn.w	r6, #20
      _b = b;
    9c8a:	strb.w	r5, [r4, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c8e:	strb.w	r6, [r4, #3092]	; 0xc14
      _b = b;
    9c92:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c96:	str.w	r5, [r4, #3064]	; 0xbf8
      _s = s;
      _b = b;
    9c9a:	strb.w	r6, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c9e:	movs	r6, #18
      _s = s;
    9ca0:	strb.w	r5, [r4, #3068]	; 0xbfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ca4:	str.w	r6, [r4, #3096]	; 0xc18
      _s = s;
    9ca8:	mvn.w	r6, #93	; 0x5d
      _b = b;
    9cac:	strb.w	r5, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9cb0:	strb.w	r6, [r4, #3100]	; 0xc1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cb4:	movs	r6, #26
      _s = s;
    9cb6:	strb.w	fp, [r4, #3124]	; 0xc34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cba:	str.w	r6, [r4, #3104]	; 0xc20
      _s = s;
    9cbe:	mvn.w	r6, #55	; 0x37
    9cc2:	strb.w	r6, [r4, #3108]	; 0xc24
      _b = b;
    9cc6:	mov.w	r6, #4294967295
    9cca:	strb.w	r6, [r4, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cce:	movs	r6, #27
    9cd0:	str.w	r6, [r4, #3112]	; 0xc28
      _s = s;
    9cd4:	mvn.w	r6, #26
    9cd8:	strb.w	r6, [r4, #3116]	; 0xc2c
      _b = b;
    9cdc:	mvn.w	r6, #15
    9ce0:	strb.w	r6, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ce4:	movs	r6, #28
    9ce6:	str.w	r6, [r4, #3120]	; 0xc30
      _s = s;
      _b = b;
    9cea:	mvn.w	r6, #19
    9cee:	strb.w	r6, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cf2:	movs	r6, #24
    9cf4:	str.w	r6, [r4, #3128]	; 0xc38
      _s = s;
    9cf8:	mvn.w	r6, #19
    9cfc:	strb.w	r6, [r4, #3132]	; 0xc3c
      _b = b;
    9d00:	mov.w	r6, #4294967295
    9d04:	strb.w	r6, [r4, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d08:	movs	r6, #31
      _s = s;
      _b = b;
    9d0a:	strb.w	lr, [r4, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d0e:	str.w	r6, [r4, #3168]	; 0xc60
    9d12:	movs	r6, #5
      _s = s;
      _b = b;
    9d14:	strb.w	r9, [r4, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d18:	str.w	r6, [r4, #3136]	; 0xc40
      _s = s;
    9d1c:	mvn.w	r6, #16
    9d20:	strb.w	r6, [r4, #3140]	; 0xc44
      _b = b;
    9d24:	mvn.w	r6, #71	; 0x47
    9d28:	strb.w	r6, [r4, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d2c:	movs	r6, #21
    9d2e:	str.w	r6, [r4, #3144]	; 0xc48
      _s = s;
    9d32:	mvn.w	r6, #64	; 0x40
    9d36:	strb.w	r6, [r4, #3148]	; 0xc4c
      _b = b;
    9d3a:	mvn.w	r6, #23
    9d3e:	strb.w	r6, [r4, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d42:	movs	r6, #28
    9d44:	str.w	r6, [r4, #3152]	; 0xc50
      _s = s;
    9d48:	mvn.w	r6, #16
    9d4c:	strb.w	r6, [r4, #3156]	; 0xc54
      _b = b;
    9d50:	mvn.w	r6, #25
    9d54:	strb.w	r6, [r4, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d58:	movs	r6, #30
    9d5a:	str.w	r6, [r4, #3160]	; 0xc58
      _s = s;
    9d5e:	mvn.w	r6, #2
    9d62:	strb.w	r6, [r4, #3164]	; 0xc5c
      _b = b;
    9d66:	mvn.w	r6, #77	; 0x4d
    9d6a:	strb.w	r6, [r4, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9d6e:	mvn.w	r6, #2
    9d72:	strb.w	r6, [r4, #3172]	; 0xc64
      _b = b;
    9d76:	mvn.w	r6, #32
    9d7a:	strb.w	r6, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d7e:	movs	r6, #24
    9d80:	str.w	r6, [r4, #3176]	; 0xc68
      _s = s;
    9d84:	mvn.w	r6, #18
    9d88:	strb.w	r6, [r4, #3180]	; 0xc6c
      _b = b;
    9d8c:	mvn.w	r6, #11
    9d90:	strb.w	r6, [r4, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d94:	movs	r6, #12
    9d96:	str.w	r6, [r4, #3184]	; 0xc70
      _s = s;
    9d9a:	mvn.w	r6, #31
    9d9e:	strb.w	r6, [r4, #3188]	; 0xc74
      _b = b;
    9da2:	mvn.w	r6, #9
    9da6:	strb.w	r6, [r4, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9daa:	movs	r6, #11
    9dac:	str.w	r6, [r4, #3192]	; 0xc78
      _s = s;
    9db0:	mvn.w	r6, #35	; 0x23
    9db4:	strb.w	r6, [r4, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9db8:	movs	r6, #14
    9dba:	str.w	r6, [r4, #3200]	; 0xc80
      _s = s;
    9dbe:	mvn.w	r6, #37	; 0x25
    9dc2:	strb.w	r6, [r4, #3204]	; 0xc84
      _b = b;
    9dc6:	mvn.w	r6, #10
    9dca:	strb.w	r6, [r4, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dce:	movs	r6, #16
    9dd0:	str.w	r6, [r4, #3208]	; 0xc88
      _s = s;
    9dd4:	mvn.w	r6, #42	; 0x2a
    9dd8:	strb.w	r6, [r4, #3212]	; 0xc8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ddc:	movs	r6, #7
    9dde:	str.w	r6, [r4, #3216]	; 0xc90
      _s = s;
    9de2:	mvn.w	r6, #27
    9de6:	strb.w	r6, [r4, #3220]	; 0xc94
      _b = b;
    9dea:	mvn.w	r6, #18
    9dee:	strb.w	r6, [r4, #3221]	; 0xc95
    9df2:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9df6:	str.w	r5, [r4, #3240]	; 0xca8
      _s = s;
      _b = b;
    9dfa:	strb.w	r6, [r4, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dfe:	movs	r6, #20
      _s = s;
    9e00:	strb.w	r5, [r4, #3244]	; 0xcac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e04:	str.w	r6, [r4, #3224]	; 0xc98
      _s = s;
    9e08:	mvn.w	r6, #32
      _b = b;
    9e0c:	strb.w	r5, [r4, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e10:	strb.w	r6, [r4, #3228]	; 0xc9c
      _b = b;
    9e14:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e18:	str.w	r5, [r4, #3248]	; 0xcb0
      _s = s;
      _b = b;
    9e1c:	strb.w	r6, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e20:	movs	r6, #27
      _s = s;
    9e22:	strb.w	r5, [r4, #3252]	; 0xcb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e26:	str.w	r6, [r4, #3232]	; 0xca0
      _s = s;
    9e2a:	mvn.w	r6, #44	; 0x2c
      _b = b;
    9e2e:	strb.w	r5, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e32:	strb.w	r6, [r4, #3236]	; 0xca4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e36:	movs	r6, #36	; 0x24
    9e38:	str.w	r5, [r4, #3256]	; 0xcb8
    9e3c:	str.w	r6, [r4, #3264]	; 0xcc0
      _s = s;
    9e40:	mov.w	r6, #17
    9e44:	strb.w	r5, [r4, #3260]	; 0xcbc
    9e48:	strb.w	r6, [r4, #3268]	; 0xcc4
      _b = b;
    9e4c:	mov.w	r6, #71	; 0x47
    9e50:	strb.w	r5, [r4, #3261]	; 0xcbd
    9e54:	strb.w	r6, [r4, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e58:	movs	r6, #21
    9e5a:	str.w	r6, [r4, #3272]	; 0xcc8
      _s = s;
    9e5e:	mov.w	r6, #18
    9e62:	strb.w	r6, [r4, #3276]	; 0xccc
      _b = b;
    9e66:	mvn.w	r6, #23
    9e6a:	strb.w	r6, [r4, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e6e:	movs	r6, #7
    9e70:	str.w	r6, [r4, #3280]	; 0xcd0
      _s = s;
    9e74:	mvn.w	r6, #91	; 0x5b
    9e78:	strb.w	r6, [r4, #3284]	; 0xcd4
      _b = b;
    9e7c:	mvn.w	r6, #6
    9e80:	strb.w	r6, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e84:	movs	r6, #9
    9e86:	str.w	r6, [r4, #3288]	; 0xcd8
      _s = s;
    9e8a:	mvn.w	r6, #56	; 0x38
    9e8e:	strb.w	r6, [r4, #3292]	; 0xcdc
      _b = b;
    9e92:	mvn.w	r6, #8
    9e96:	strb.w	r6, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e9a:	movs	r6, #20
    9e9c:	str.w	r6, [r4, #3296]	; 0xce0
      _s = s;
    9ea0:	mvn.w	r6, #88	; 0x58
    9ea4:	strb.w	r6, [r4, #3300]	; 0xce4
      _b = b;
    9ea8:	mvn.w	r6, #2
    9eac:	strb.w	r6, [r4, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9eb0:	movs	r6, #25
    9eb2:	str.w	r6, [r4, #3304]	; 0xce8
      _s = s;
    9eb6:	mvn.w	r6, #42	; 0x2a
    9eba:	strb.w	r6, [r4, #3308]	; 0xcec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ebe:	movs	r6, #27
      _s = s;
      _b = b;
    9ec0:	strb.w	r9, [r4, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ec4:	str.w	r6, [r4, #3312]	; 0xcf0
      _s = s;
    9ec8:	mvn.w	r6, #24
      _b = b;
    9ecc:	strb.w	sl, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ed0:	strb.w	r6, [r4, #3316]	; 0xcf4
      _b = b;
    9ed4:	mov.w	r6, #4294967295
    9ed8:	strb.w	r6, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9edc:	movs	r6, #21
    9ede:	str.w	r6, [r4, #3320]	; 0xcf8
      _s = s;
    9ee2:	mvn.w	r6, #27
    9ee6:	strb.w	r6, [r4, #3324]	; 0xcfc
      _b = b;
    9eea:	mvn.w	r6, #5
    9eee:	strb.w	r6, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ef2:	mov.w	r6, #358	; 0x166
    9ef6:	str.w	r6, [r4, #3328]	; 0xd00
      _s = s;
    9efa:	mvn.w	r6, #2
    9efe:	strb.w	r6, [r4, #3332]	; 0xd04
      _b = b;
    9f02:	mvn.w	r6, #117	; 0x75
    9f06:	strb.w	r6, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f0a:	movs	r6, #14
    9f0c:	str.w	r6, [r4, #3336]	; 0xd08
      _s = s;
    9f10:	mvn.w	r6, #44	; 0x2c
    9f14:	strb.w	r6, [r4, #3340]	; 0xd0c
      _b = b;
    9f18:	mvn.w	r6, #55	; 0x37
    9f1c:	strb.w	r6, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f20:	movs	r6, #23
    9f22:	str.w	r6, [r4, #3344]	; 0xd10
      _s = s;
    9f26:	mvn.w	r6, #41	; 0x29
    9f2a:	strb.w	r6, [r4, #3348]	; 0xd14
      _b = b;
    9f2e:	mvn.w	r6, #2
    9f32:	strb.w	r6, [r4, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f36:	movs	r6, #26
    9f38:	str.w	r6, [r4, #3352]	; 0xd18
      _s = s;
    9f3c:	mvn.w	r6, #2
    9f40:	strb.w	r6, [r4, #3356]	; 0xd1c
      _b = b;
    9f44:	mvn.w	r6, #68	; 0x44
    9f48:	strb.w	r6, [r4, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f4c:	movs	r6, #34	; 0x22
    9f4e:	str.w	r6, [r4, #3360]	; 0xd20
      _s = s;
    9f52:	mvn.w	r6, #2
    9f56:	strb.w	r6, [r4, #3364]	; 0xd24
      _b = b;
    9f5a:	mvn.w	r6, #44	; 0x2c
    9f5e:	strb.w	r6, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f62:	movs	r6, #20
    9f64:	str.w	r6, [r4, #3368]	; 0xd28
      _s = s;
    9f68:	mvn.w	r6, #24
    9f6c:	strb.w	r6, [r4, #3372]	; 0xd2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f70:	movs	r6, #11
    9f72:	str.w	r6, [r4, #3376]	; 0xd30
      _s = s;
    9f76:	mvn.w	r6, #23
    9f7a:	strb.w	r6, [r4, #3380]	; 0xd34
      _b = b;
    9f7e:	mvn.w	r6, #11
    9f82:	strb.w	r6, [r4, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f86:	movs	r6, #3
    9f88:	str.w	r6, [r4, #3384]	; 0xd38
      _s = s;
    9f8c:	mvn.w	r6, #31
    9f90:	strb.w	r6, [r4, #3388]	; 0xd3c
      _b = b;
    9f94:	mvn.w	r6, #11
    9f98:	strb.w	r6, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f9c:	movs	r6, #9
    9f9e:	str.w	r6, [r4, #3392]	; 0xd40
      _s = s;
    9fa2:	mvn.w	r6, #33	; 0x21
    9fa6:	strb.w	r6, [r4, #3396]	; 0xd44
      _b = b;
    9faa:	mvn.w	r6, #14
    9fae:	strb.w	r6, [r4, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fb2:	movs	r6, #37	; 0x25
      _s = s;
      _b = b;
    9fb4:	strb.w	r9, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fb8:	str.w	r6, [r4, #3464]	; 0xd88
    9fbc:	movs	r6, #4
      _s = s;
      _b = b;
    9fbe:	strb.w	sl, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fc2:	str.w	r6, [r4, #3400]	; 0xd48
      _s = s;
    9fc6:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fca:	str.w	r5, [r4, #3432]	; 0xd68
      _s = s;
    9fce:	strb.w	r6, [r4, #3404]	; 0xd4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fd2:	movs	r6, #24
      _s = s;
    9fd4:	strb.w	r5, [r4, #3436]	; 0xd6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fd8:	str.w	r6, [r4, #3408]	; 0xd50
      _s = s;
    9fdc:	mvn.w	r6, #46	; 0x2e
      _b = b;
    9fe0:	strb.w	r5, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9fe4:	strb.w	r6, [r4, #3412]	; 0xd54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fe8:	movs	r6, #29
    9fea:	str.w	r5, [r4, #3440]	; 0xd70
    9fee:	str.w	r6, [r4, #3416]	; 0xd58
      _s = s;
    9ff2:	mvn.w	r6, #86	; 0x56
    9ff6:	strb.w	r5, [r4, #3444]	; 0xd74
    9ffa:	strb.w	r6, [r4, #3420]	; 0xd5c
      _b = b;
    9ffe:	mov.w	r6, #4294967295
    a002:	strb.w	r5, [r4, #3445]	; 0xd75
    a006:	strb.w	r6, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a00a:	movs	r6, #30
    a00c:	str.w	r5, [r4, #3448]	; 0xd78
    a010:	str.w	r6, [r4, #3424]	; 0xd60
      _s = s;
    a014:	mvn.w	r6, #127	; 0x7f
    a018:	strb.w	r5, [r4, #3452]	; 0xd7c
    a01c:	strb.w	r6, [r4, #3428]	; 0xd64
      _b = b;
    a020:	mvn.w	r6, #83	; 0x53
    a024:	strb.w	r5, [r4, #3453]	; 0xd7d
    a028:	strb.w	r6, [r4, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a02c:	mov.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a030:	str.w	r5, [r4, #3456]	; 0xd80
      _s = s;
    a034:	strb.w	r6, [r4, #3468]	; 0xd8c
      _b = b;
    a038:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a03c:	strb.w	r5, [r4, #3460]	; 0xd84
      _b = b;
    a040:	strb.w	r6, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a044:	movs	r6, #5
      _s = s;
      _b = b;
    a046:	strb.w	r5, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a04a:	str.w	r6, [r4, #3472]	; 0xd90
      _s = s;
    a04e:	mov.w	r6, #68	; 0x44
    a052:	strb.w	r6, [r4, #3476]	; 0xd94
      _b = b;
    a056:	mvn.w	r6, #14
    a05a:	strb.w	r6, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a05e:	movs	r6, #2
    a060:	str.w	r6, [r4, #3480]	; 0xd98
      _s = s;
    a064:	mvn.w	r6, #15
    a068:	strb.w	r6, [r4, #3484]	; 0xd9c
      _b = b;
    a06c:	mvn.w	r6, #48	; 0x30
    a070:	strb.w	r6, [r4, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a074:	movs	r6, #9
    a076:	str.w	ip, [r4, #3520]	; 0xdc0
    a07a:	str.w	r6, [r4, #3488]	; 0xda0
      _s = s;
    a07e:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a082:	str.w	ip, [r4, #3528]	; 0xdc8
      _s = s;
    a086:	strb.w	r6, [r4, #3492]	; 0xda4
      _b = b;
    a08a:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a08e:	strb.w	lr, [r4, #3532]	; 0xdcc
      _b = b;
    a092:	strb.w	r6, [r4, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a096:	movs	r6, #14
    a098:	str.w	r6, [r4, #3496]	; 0xda8
      _s = s;
    a09c:	mvn.w	r6, #40	; 0x28
    a0a0:	strb.w	r6, [r4, #3500]	; 0xdac
      _b = b;
    a0a4:	strb.w	r6, [r4, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0a8:	movs	r6, #19
    a0aa:	str.w	r6, [r4, #3504]	; 0xdb0
      _s = s;
    a0ae:	mvn.w	r6, #33	; 0x21
    a0b2:	strb.w	r6, [r4, #3508]	; 0xdb4
      _b = b;
    a0b6:	mvn.w	r6, #7
    a0ba:	strb.w	r6, [r4, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0be:	movs	r6, #16
    a0c0:	str.w	r6, [r4, #3512]	; 0xdb8
      _s = s;
    a0c4:	mvn.w	r6, #26
    a0c8:	strb.w	r6, [r4, #3516]	; 0xdbc
      _b = b;
    a0cc:	mvn.w	r6, #48	; 0x30
    a0d0:	strb.w	r6, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a0d4:	mov.w	r6, #4294967295
    a0d8:	strb.w	r6, [r4, #3524]	; 0xdc4
      _b = b;
    a0dc:	mvn.w	r6, #58	; 0x3a
    a0e0:	strb.w	r6, [r4, #3525]	; 0xdc5
    a0e4:	strb.w	r6, [r4, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0e8:	movs	r6, #20
    a0ea:	str.w	r6, [r4, #3536]	; 0xdd0
      _s = s;
    a0ee:	mvn.w	r6, #44	; 0x2c
    a0f2:	strb.w	r6, [r4, #3540]	; 0xdd4
      _b = b;
    a0f6:	mvn.w	r6, #20
    a0fa:	strb.w	r6, [r4, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0fe:	movs	r6, #19
    a100:	str.w	r6, [r4, #3544]	; 0xdd8
      _s = s;
    a104:	mvn.w	r6, #34	; 0x22
    a108:	strb.w	r6, [r4, #3548]	; 0xddc
      _b = b;
    a10c:	mvn.w	r6, #22
    a110:	strb.w	r6, [r4, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a114:	movs	r6, #21
    a116:	str.w	r6, [r4, #3552]	; 0xde0
      _s = s;
    a11a:	mvn.w	r6, #18
    a11e:	strb.w	r6, [r4, #3556]	; 0xde4
      _b = b;
    a122:	mvn.w	r6, #33	; 0x21
    a126:	strb.w	r6, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a12a:	movs	r6, #24
    a12c:	str.w	r6, [r4, #3560]	; 0xde8
      _s = s;
    a130:	mvn.w	r6, #23
    a134:	strb.w	r6, [r4, #3564]	; 0xdec
      _b = b;
    a138:	mvn.w	r6, #28
    a13c:	strb.w	r6, [r4, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a140:	movs	r6, #16
    a142:	str.w	r6, [r4, #3568]	; 0xdf0
      _s = s;
    a146:	mvn.w	r6, #21
    a14a:	strb.w	r6, [r4, #3572]	; 0xdf4
      _b = b;
    a14e:	mvn.w	r6, #22
    a152:	strb.w	r6, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a156:	movw	r6, #355	; 0x163
    a15a:	str.w	r5, [r4, #3624]	; 0xe28
    a15e:	mov	r7, r6
    a160:	str.w	r6, [r4, #3576]	; 0xdf8
      _s = s;
    a164:	mov.w	r6, #4294967295
    a168:	strb.w	r5, [r4, #3628]	; 0xe2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a16c:	str.w	r7, [r4, #3584]	; 0xe00
      _s = s;
    a170:	strb.w	r6, [r4, #3580]	; 0xdfc
      _b = b;
    a174:	mvn.w	r6, #45	; 0x2d
    a178:	strb.w	r5, [r4, #3629]	; 0xe2d
    a17c:	strb.w	r6, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a180:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a184:	str.w	r5, [r4, #3632]	; 0xe30
      _s = s;
    a188:	strb.w	r6, [r4, #3588]	; 0xe04
      _b = b;
    a18c:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a190:	strb.w	r5, [r4, #3636]	; 0xe34
      _b = b;
    a194:	strb.w	r6, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a198:	movs	r6, #13
      _s = s;
      _b = b;
    a19a:	strb.w	r5, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a19e:	str.w	r6, [r4, #3592]	; 0xe08
      _s = s;
    a1a2:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1a6:	str.w	r5, [r4, #3640]	; 0xe38
      _s = s;
    a1aa:	strb.w	r6, [r4, #3596]	; 0xe0c
      _b = b;
    a1ae:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1b2:	strb.w	r5, [r4, #3644]	; 0xe3c
      _b = b;
    a1b6:	strb.w	r6, [r4, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1ba:	movs	r6, #30
      _s = s;
      _b = b;
    a1bc:	strb.w	r5, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1c0:	str.w	r6, [r4, #3600]	; 0xe10
      _s = s;
    a1c4:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1c8:	str.w	r5, [r4, #3648]	; 0xe40
      _s = s;
    a1cc:	strb.w	r6, [r4, #3604]	; 0xe14
      _b = b;
    a1d0:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1d4:	strb.w	r5, [r4, #3652]	; 0xe44
      _b = b;
    a1d8:	strb.w	r6, [r4, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1dc:	movs	r6, #25
      _s = s;
      _b = b;
    a1de:	strb.w	r5, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1e2:	str.w	r6, [r4, #3608]	; 0xe18
      _s = s;
    a1e6:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1ea:	str.w	r5, [r4, #3656]	; 0xe48
      _s = s;
    a1ee:	strb.w	r6, [r4, #3612]	; 0xe1c
      _b = b;
    a1f2:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1f6:	strb.w	r5, [r4, #3660]	; 0xe4c
      _b = b;
    a1fa:	strb.w	r6, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1fe:	movs	r6, #29
    a200:	str.w	r6, [r4, #3616]	; 0xe20
      _s = s;
    a204:	mvn.w	r6, #96	; 0x60
    a208:	strb.w	r6, [r4, #3620]	; 0xe24
      _b = b;
    a20c:	mvn.w	r6, #103	; 0x67
    a210:	strb.w	r6, [r4, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a214:	mov.w	r6, #104	; 0x68
      _b = b;
    a218:	strb.w	r5, [r4, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a21c:	strb.w	r6, [r4, #3668]	; 0xe54
      _b = b;
    a220:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a224:	str.w	r2, [r4, #3664]	; 0xe50
      _s = s;
      _b = b;
    a228:	strb.w	r6, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a22c:	mov.w	r6, #358	; 0x166
    a230:	str.w	r8, [r4, #3712]	; 0xe80
    a234:	str.w	r6, [r4, #3672]	; 0xe58
      _s = s;
    a238:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a23c:	str.w	r8, [r4, #3736]	; 0xe98
      _s = s;
    a240:	strb.w	r6, [r4, #3676]	; 0xe5c
      _b = b;
    a244:	mvn.w	r6, #42	; 0x2a
    a248:	strb.w	r6, [r4, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a24c:	movw	r6, #355	; 0x163
    a250:	str.w	r6, [r4, #3680]	; 0xe60
      _s = s;
    a254:	mvn.w	r6, #2
    a258:	strb.w	r6, [r4, #3684]	; 0xe64
      _b = b;
    a25c:	mvn.w	r6, #31
    a260:	strb.w	r6, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a264:	movw	r6, #357	; 0x165
    a268:	mov	r7, r6
    a26a:	str.w	r6, [r4, #3688]	; 0xe68
      _s = s;
    a26e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a272:	str.w	r7, [r4, #3696]	; 0xe70
      _s = s;
    a276:	strb.w	r6, [r4, #3692]	; 0xe6c
      _b = b;
    a27a:	mvn.w	r6, #75	; 0x4b
    a27e:	strb.w	r6, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a282:	mov.w	r6, #4294967295
    a286:	strb.w	r6, [r4, #3700]	; 0xe74
      _b = b;
    a28a:	mvn.w	r6, #102	; 0x66
    a28e:	strb.w	r6, [r4, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a292:	movw	r6, #355	; 0x163
    a296:	str.w	r6, [r4, #3704]	; 0xe78
      _s = s;
    a29a:	mov.w	r6, #4294967295
    a29e:	strb.w	r6, [r4, #3708]	; 0xe7c
      _b = b;
    a2a2:	mvn.w	r6, #76	; 0x4c
    a2a6:	strb.w	r6, [r4, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2aa:	mvn.w	r6, #49	; 0x31
    a2ae:	strb.w	r6, [r4, #3716]	; 0xe84
      _b = b;
    a2b2:	mvn.w	r6, #8
    a2b6:	strb.w	r6, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2ba:	movs	r6, #9
    a2bc:	str.w	r6, [r4, #3720]	; 0xe88
      _s = s;
    a2c0:	mvn.w	r6, #74	; 0x4a
    a2c4:	strb.w	r6, [r4, #3724]	; 0xe8c
      _b = b;
    a2c8:	mvn.w	r6, #10
    a2cc:	strb.w	r6, [r4, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2d0:	movw	r6, #355	; 0x163
    a2d4:	str.w	r6, [r4, #3728]	; 0xe90
      _s = s;
    a2d8:	mov.w	r6, #4294967295
    a2dc:	strb.w	r6, [r4, #3732]	; 0xe94
      _b = b;
    a2e0:	mvn.w	r6, #33	; 0x21
    a2e4:	strb.w	r6, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2e8:	mvn.w	r6, #31
    a2ec:	strb.w	r6, [r4, #3740]	; 0xe9c
      _b = b;
    a2f0:	mvn.w	r6, #6
    a2f4:	strb.w	r6, [r4, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2f8:	movs	r6, #5
    a2fa:	str.w	r6, [r4, #3744]	; 0xea0
      _s = s;
    a2fe:	mvn.w	r6, #32
    a302:	strb.w	r6, [r4, #3748]	; 0xea4
    a306:	mvn.w	r6, #67	; 0x43
      _b = b;
    a30a:	strb.w	lr, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a30e:	strb.w	r6, [r4, #3796]	; 0xed4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a312:	movs	r6, #2
    a314:	str.w	ip, [r4, #3760]	; 0xeb0
    a318:	str.w	r6, [r4, #3752]	; 0xea8
      _s = s;
    a31c:	mvn.w	r6, #28
    a320:	strb.w	lr, [r4, #3780]	; 0xec4
    a324:	strb.w	r6, [r4, #3756]	; 0xeac
      _b = b;
    a328:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a32c:	str.w	r5, [r4, #3816]	; 0xee8
      _s = s;
      _b = b;
    a330:	strb.w	r6, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a334:	mvn.w	r6, #11
    a338:	strb.w	r5, [r4, #3820]	; 0xeec
    a33c:	strb.w	r6, [r4, #3764]	; 0xeb4
      _b = b;
    a340:	mvn.w	r6, #36	; 0x24
    a344:	strb.w	r5, [r4, #3821]	; 0xeed
    a348:	strb.w	r6, [r4, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a34c:	mov.w	r6, #354	; 0x162
    a350:	str.w	r5, [r4, #3824]	; 0xef0
    a354:	mov	r7, r6
    a356:	str.w	r6, [r4, #3768]	; 0xeb8
      _s = s;
    a35a:	mov.w	r6, #4294967295
    a35e:	strb.w	r5, [r4, #3828]	; 0xef4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a362:	str.w	r7, [r4, #3776]	; 0xec0
      _s = s;
    a366:	strb.w	r6, [r4, #3772]	; 0xebc
      _b = b;
    a36a:	mvn.w	r6, #37	; 0x25
    a36e:	strb.w	r5, [r4, #3829]	; 0xef5
    a372:	strb.w	r6, [r4, #3773]	; 0xebd
    a376:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a37a:	str.w	r5, [r4, #3832]	; 0xef8
      _s = s;
      _b = b;
    a37e:	strb.w	r6, [r4, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a382:	movs	r6, #7
      _s = s;
    a384:	strb.w	r5, [r4, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a388:	str.w	r6, [r4, #3784]	; 0xec8
      _s = s;
    a38c:	mvn.w	r6, #19
    a390:	strb.w	r6, [r4, #3788]	; 0xecc
      _b = b;
    a394:	mvn.w	r6, #34	; 0x22
    a398:	strb.w	r6, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a39c:	movs	r6, #21
    a39e:	str.w	r6, [r4, #3792]	; 0xed0
      _s = s;
      _b = b;
    a3a2:	mvn.w	r6, #6
    a3a6:	strb.w	r6, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3aa:	movs	r6, #22
    a3ac:	str.w	r6, [r4, #3800]	; 0xed8
      _s = s;
    a3b0:	mvn.w	r6, #11
    a3b4:	strb.w	r6, [r4, #3804]	; 0xedc
      _b = b;
    a3b8:	mvn.w	r6, #60	; 0x3c
    a3bc:	strb.w	r6, [r4, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3c0:	movs	r6, #10
    a3c2:	str.w	r6, [r4, #3808]	; 0xee0
      _s = s;
    a3c6:	mov.w	r6, #4294967295
    a3ca:	strb.w	r6, [r4, #3812]	; 0xee4
      _b = b;
    a3ce:	mov.w	r6, #22
    a3d2:	strb.w	r6, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3d6:	mov.w	r6, #110	; 0x6e
      _b = b;
    a3da:	strb.w	r5, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3de:	strb.w	r6, [r4, #3908]	; 0xf44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3e2:	mov.w	r6, #358	; 0x166
    a3e6:	str.w	ip, [r4, #3896]	; 0xf38
    a3ea:	str.w	r6, [r4, #3864]	; 0xf18
      _s = s;
      _b = b;
    a3ee:	mov.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3f2:	str.w	r5, [r4, #3840]	; 0xf00
      _s = s;
      _b = b;
    a3f6:	strb.w	r6, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3fa:	movs	r6, #5
      _s = s;
    a3fc:	strb.w	r5, [r4, #3844]	; 0xf04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a400:	str.w	r6, [r4, #3872]	; 0xf20
      _s = s;
    a404:	mvn.w	r6, #47	; 0x2f
      _b = b;
    a408:	strb.w	r5, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a40c:	strb.w	r6, [r4, #3876]	; 0xf24
      _b = b;
    a410:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a414:	str.w	r5, [r4, #3848]	; 0xf08
      _s = s;
      _b = b;
    a418:	strb.w	r6, [r4, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a41c:	movs	r6, #3
      _s = s;
    a41e:	strb.w	r5, [r4, #3852]	; 0xf0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a422:	str.w	r6, [r4, #3880]	; 0xf28
      _s = s;
    a426:	mvn.w	r6, #102	; 0x66
      _b = b;
    a42a:	strb.w	r5, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a42e:	strb.w	r6, [r4, #3884]	; 0xf2c
      _b = b;
    a432:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a436:	str.w	r5, [r4, #3856]	; 0xf10
      _s = s;
      _b = b;
    a43a:	strb.w	r6, [r4, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a43e:	movw	r6, #355	; 0x163
      _s = s;
    a442:	strb.w	r5, [r4, #3860]	; 0xf14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a446:	str.w	r6, [r4, #3888]	; 0xf30
      _s = s;
    a44a:	mov.w	r6, #4294967295
      _b = b;
    a44e:	strb.w	r5, [r4, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a452:	strb.w	r6, [r4, #3892]	; 0xf34
      _b = b;
    a456:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a45a:	strb.w	fp, [r4, #3868]	; 0xf1c
      _b = b;
    a45e:	strb.w	r6, [r4, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a462:	mvn.w	r6, #9
    a466:	strb.w	r6, [r4, #3900]	; 0xf3c
      _b = b;
    a46a:	mvn.w	r6, #27
    a46e:	strb.w	r6, [r4, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a472:	movs	r6, #13
    a474:	str.w	r6, [r4, #3904]	; 0xf40
      _s = s;
      _b = b;
    a478:	mov.w	r6, #4294967295
    a47c:	strb.w	r6, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a480:	movs	r6, #7
    a482:	str.w	r6, [r4, #3912]	; 0xf48
      _s = s;
    a486:	mvn.w	r6, #46	; 0x2e
    a48a:	strb.w	r6, [r4, #3916]	; 0xf4c
      _b = b;
    a48e:	mvn.w	r6, #11
    a492:	strb.w	r6, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a496:	mov.w	r6, #354	; 0x162
    a49a:	str.w	r6, [r4, #3920]	; 0xf50
      _s = s;
    a49e:	mov.w	r6, #4294967295
    a4a2:	strb.w	r6, [r4, #3924]	; 0xf54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4a6:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    a4aa:	strb.w	sl, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4ae:	str.w	r6, [r4, #3928]	; 0xf58
      _s = s;
    a4b2:	mvn.w	r6, #5
      _b = b;
    a4b6:	strb.w	r9, [r4, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4ba:	strb.w	r6, [r4, #3932]	; 0xf5c
      _b = b;
    a4be:	mvn.w	r6, #26
    a4c2:	strb.w	r9, [r4, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4c6:	mvn.w	r9, #115	; 0x73
      _b = b;
    a4ca:	strb.w	r6, [r4, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4ce:	mov.w	r6, #354	; 0x162
      _s = s;
    a4d2:	strb.w	fp, [r4, #4004]	; 0xfa4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4d6:	mov	r7, r6
    a4d8:	str.w	r6, [r4, #3936]	; 0xf60
      _s = s;
    a4dc:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4e0:	str.w	r5, [r4, #4008]	; 0xfa8
    a4e4:	str.w	r7, [r4, #3952]	; 0xf70
    a4e8:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
    a4ec:	strb.w	r6, [r4, #3940]	; 0xf64
      _b = b;
    a4f0:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4f4:	strb.w	r5, [r4, #4012]	; 0xfac
      _b = b;
    a4f8:	strb.w	r6, [r4, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4fc:	mov.w	r6, #4294967295
    a500:	strb.w	r6, [r4, #3948]	; 0xf6c
      _b = b;
    a504:	mvn.w	r6, #16
    a508:	strb.w	r6, [r4, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a50c:	mov.w	r6, #4294967295
    a510:	strb.w	r6, [r4, #3956]	; 0xf74
      _b = b;
    a514:	mvn.w	r6, #69	; 0x45
    a518:	strb.w	r6, [r4, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a51c:	movw	r6, #357	; 0x165
    a520:	str.w	r6, [r4, #3960]	; 0xf78
      _s = s;
    a524:	mvn.w	r6, #18
    a528:	strb.w	r6, [r4, #3964]	; 0xf7c
      _b = b;
    a52c:	mvn.w	r6, #19
    a530:	strb.w	r6, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a534:	movs	r6, #1
    a536:	str.w	r6, [r4, #3968]	; 0xf80
      _s = s;
    a53a:	mvn.w	r6, #29
    a53e:	strb.w	r6, [r4, #3972]	; 0xf84
      _b = b;
    a542:	mvn.w	r6, #10
    a546:	strb.w	r6, [r4, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a54a:	movs	r6, #13
    a54c:	str.w	r6, [r4, #3976]	; 0xf88
      _s = s;
    a550:	mvn.w	r6, #35	; 0x23
    a554:	strb.w	r6, [r4, #3980]	; 0xf8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a558:	movs	r6, #10
    a55a:	str.w	r6, [r4, #3984]	; 0xf90
      _s = s;
    a55e:	mvn.w	r6, #22
    a562:	strb.w	r6, [r4, #3988]	; 0xf94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a566:	movs	r6, #14
    a568:	str.w	r6, [r4, #3992]	; 0xf98
      _s = s;
    a56c:	mvn.w	r6, #19
    a570:	strb.w	r6, [r4, #3996]	; 0xf9c
      _b = b;
    a574:	mvn.w	r6, #6
    a578:	strb.w	r6, [r4, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a57c:	movs	r6, #16
    a57e:	str.w	r6, [r4, #4000]	; 0xfa0
      _s = s;
      _b = b;
    a582:	mvn.w	r6, #110	; 0x6e
    a586:	strb.w	r6, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a58a:	movw	r6, #353	; 0x161
    a58e:	str.w	r6, [r4, #3944]	; 0xf68
      _s = s;
    a592:	movw	r6, #4100	; 0x1004
      _b = b;
    a596:	strb.w	r5, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a59a:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a59e:	mov.w	r6, #358	; 0x166
      _s = s;
      _b = b;
    a5a2:	mvn.w	r9, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5a6:	str.w	r5, [r4, #4016]	; 0xfb0
    a5aa:	str.w	r6, [r4, #4072]	; 0xfe8
      _s = s;
    a5ae:	mvn.w	r6, #7
    a5b2:	strb.w	r5, [r4, #4020]	; 0xfb4
    a5b6:	strb.w	r6, [r4, #4076]	; 0xfec
      _b = b;
    a5ba:	mov.w	r6, #123	; 0x7b
    a5be:	strb.w	r5, [r4, #4021]	; 0xfb5
    a5c2:	strb.w	r6, [r4, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5c6:	movw	r6, #357	; 0x165
    a5ca:	str.w	r5, [r4, #4024]	; 0xfb8
    a5ce:	str.w	r6, [r4, #4080]	; 0xff0
      _s = s;
    a5d2:	mvn.w	r6, #16
    a5d6:	strb.w	r5, [r4, #4028]	; 0xfbc
    a5da:	strb.w	r6, [r4, #4084]	; 0xff4
      _b = b;
    a5de:	mvn.w	r6, #27
    a5e2:	strb.w	r5, [r4, #4029]	; 0xfbd
    a5e6:	strb.w	r6, [r4, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5ea:	movs	r6, #17
    a5ec:	str.w	r5, [r4, #4032]	; 0xfc0
    a5f0:	str.w	r6, [r4, #4088]	; 0xff8
      _s = s;
    a5f4:	mvn.w	r6, #23
    a5f8:	strb.w	r5, [r4, #4036]	; 0xfc4
    a5fc:	strb.w	r6, [r4, #4092]	; 0xffc
      _b = b;
    a600:	mvn.w	r6, #16
    a604:	strb.w	r5, [r4, #4037]	; 0xfc5
    a608:	strb.w	r6, [r4, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a60c:	mov	r6, r7
    a60e:	movs	r7, #22
    a610:	str.w	r5, [r4, #4040]	; 0xfc8
      _s = s;
    a614:	strb.w	r5, [r4, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a618:	str.w	r7, [r6], #32
    a61c:	mov	r7, r6
      _s = s;
      _b = b;
    a61e:	movw	r6, #4101	; 0x1005
    a622:	strb.w	r5, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a626:	str.w	r5, [r4, #4048]	; 0xfd0
      _s = s;
    a62a:	strb.w	r5, [r4, #4052]	; 0xfd4
      _b = b;
    a62e:	strb.w	r5, [r4, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a632:	str.w	r5, [r4, #4056]	; 0xfd8
      _s = s;
    a636:	strb.w	r5, [r4, #4060]	; 0xfdc
      _b = b;
    a63a:	strb.w	r5, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a63e:	str.w	r5, [r4, #4064]	; 0xfe0
      _s = s;
    a642:	strb.w	r5, [r4, #4068]	; 0xfe4
      _b = b;
    a646:	strb.w	r5, [r4, #4069]	; 0xfe5
    a64a:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a64e:	mov.w	r6, #354	; 0x162
    a652:	str.w	ip, [r7]
    a656:	add.w	r7, r4, #4096	; 0x1000
    a65a:	str	r6, [r7, #64]	; 0x40
    a65c:	movw	r7, #4104	; 0x1008
    a660:	movs	r6, #7
    a662:	str	r6, [r4, r7]
    a664:	movw	r7, #4120	; 0x1018
    a668:	mov.w	r6, #354	; 0x162
    a66c:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a66e:	movw	r6, #4133	; 0x1025
    a672:	mvn.w	r7, #13
    a676:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a678:	movw	r7, #4136	; 0x1028
    a67c:	movs	r6, #1
    a67e:	str	r6, [r4, r7]
    a680:	movw	r7, #4144	; 0x1030
    a684:	movw	r6, #357	; 0x165
    a688:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a68a:	movw	r6, #4165	; 0x1045
    a68e:	mvn.w	r7, #20
    a692:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a694:	movw	r7, #4168	; 0x1048
    a698:	movs	r6, #4
    a69a:	str	r6, [r4, r7]
    a69c:	movw	r7, #4176	; 0x1050
    a6a0:	movs	r6, #7
    a6a2:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a6a4:	mvn.w	r7, #20
    a6a8:	movw	r6, #4181	; 0x1055
    a6ac:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a6ae:	movw	r6, #4184	; 0x1058
    a6b2:	str.w	r8, [r4, r6]
      _s = s;
    a6b6:	movw	r6, #4188	; 0x105c
    a6ba:	strb	r7, [r4, r6]
      _b = b;
    a6bc:	movw	r6, #4125	; 0x101d
    a6c0:	mvn.w	r7, #44	; 0x2c
    a6c4:	strb	r7, [r4, r6]
    a6c6:	movw	r6, #4157	; 0x103d
    a6ca:	mvn.w	r7, #41	; 0x29
    a6ce:	strb	r7, [r4, r6]
    a6d0:	movw	r6, #4141	; 0x102d
    a6d4:	mvn.w	r7, #6
    a6d8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a6da:	movw	r6, #4116	; 0x1014
    a6de:	mvn.w	r7, #24
    a6e2:	strb	r7, [r4, r6]
    a6e4:	movw	r6, #4180	; 0x1054
    a6e8:	mvn.w	r7, #28
    a6ec:	strb	r7, [r4, r6]
    a6ee:	movw	r6, #4108	; 0x100c
    a6f2:	mvn.w	r7, #25
    a6f6:	strb	r7, [r4, r6]
    a6f8:	movw	r6, #4148	; 0x1034
    a6fc:	mvn.w	r7, #55	; 0x37
    a700:	strb	r7, [r4, r6]
      _b = b;
    a702:	movw	r6, #4117	; 0x1015
    a706:	mvn.w	r7, #23
    a70a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a70c:	movw	r6, #4156	; 0x103c
    a710:	mov.w	r7, #83	; 0x53
    a714:	strb	r7, [r4, r6]
      _b = b;
    a716:	movw	r6, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a71a:	mvn.w	r7, #90	; 0x5a
      _b = b;
    a71e:	strb.w	fp, [r4, r6]
    a722:	movw	r6, #4173	; 0x104d
    a726:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a72a:	movw	r6, #4172	; 0x104c
    a72e:	strb	r7, [r4, r6]
    a730:	movw	r6, #4124	; 0x101c
    a734:	mov.w	r7, #4294967295
    a738:	strb	r7, [r4, r6]
    a73a:	movw	r6, #4164	; 0x1044
    a73e:	mov.w	r7, #115	; 0x73
    a742:	strb	r7, [r4, r6]
    a744:	movw	r6, #4140	; 0x102c
    a748:	mvn.w	r7, #46	; 0x2e
    a74c:	strb	r7, [r4, r6]
      _b = b;
    a74e:	movw	r6, #4149	; 0x1035
    a752:	mvn.w	r7, #63	; 0x3f
    a756:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a758:	movw	r6, #4132	; 0x1024
    a75c:	mvn.w	r7, #17
    a760:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a762:	movw	r6, #4112	; 0x1010
    a766:	movw	r7, #4152	; 0x1038
    a76a:	str	r5, [r4, r6]
    a76c:	mov.w	r6, #342	; 0x156
    a770:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a772:	movw	r6, #4189	; 0x105d
    a776:	mvn.w	r7, #19
    a77a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a77c:	add.w	r6, r4, #4096	; 0x1000
      _s = s;
    a780:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a784:	str.w	r8, [r6, #96]	; 0x60
      _s = s;
    a788:	movw	r6, #4196	; 0x1064
    a78c:	strb	r7, [r4, r6]
      _b = b;
    a78e:	movw	r6, #4197	; 0x1065
    a792:	mov.w	r7, #106	; 0x6a
    a796:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a798:	movw	r6, #4200	; 0x1068
    a79c:	movw	r7, #4280	; 0x10b8
    a7a0:	str	r5, [r4, r6]
      _s = s;
    a7a2:	movw	r6, #4204	; 0x106c
    a7a6:	strb	r5, [r4, r6]
      _b = b;
    a7a8:	movw	r6, #4205	; 0x106d
    a7ac:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7ae:	movw	r6, #4208	; 0x1070
    a7b2:	str	r5, [r4, r6]
      _s = s;
    a7b4:	movw	r6, #4212	; 0x1074
    a7b8:	strb	r5, [r4, r6]
      _b = b;
    a7ba:	movw	r6, #4213	; 0x1075
    a7be:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7c0:	movw	r6, #4216	; 0x1078
    a7c4:	str	r5, [r4, r6]
      _s = s;
    a7c6:	movw	r6, #4220	; 0x107c
    a7ca:	strb	r5, [r4, r6]
      _b = b;
    a7cc:	movw	r6, #4221	; 0x107d
    a7d0:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a7d2:	movw	r6, #4228	; 0x1084
    a7d6:	strb	r5, [r4, r6]
      _b = b;
    a7d8:	movw	r6, #4229	; 0x1085
    a7dc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7de:	movw	r6, #4232	; 0x1088
    a7e2:	str	r5, [r4, r6]
      _s = s;
    a7e4:	movw	r6, #4236	; 0x108c
    a7e8:	strb	r5, [r4, r6]
      _b = b;
    a7ea:	movw	r6, #4237	; 0x108d
    a7ee:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7f0:	movw	r6, #4240	; 0x1090
    a7f4:	str	r5, [r4, r6]
      _s = s;
    a7f6:	movw	r6, #4244	; 0x1094
    a7fa:	strb	r5, [r4, r6]
      _b = b;
    a7fc:	movw	r6, #4245	; 0x1095
    a800:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a802:	movw	r6, #4248	; 0x1098
    a806:	str	r5, [r4, r6]
      _s = s;
    a808:	movw	r6, #4252	; 0x109c
    a80c:	strb	r5, [r4, r6]
      _b = b;
    a80e:	movw	r6, #4253	; 0x109d
    a812:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a814:	movw	r6, #4260	; 0x10a4
    a818:	strb	r5, [r4, r6]
      _b = b;
    a81a:	movw	r6, #4261	; 0x10a5
    a81e:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a820:	movw	r6, #4264	; 0x10a8
    a824:	str	r5, [r4, r6]
      _s = s;
    a826:	movw	r6, #4268	; 0x10ac
    a82a:	strb	r5, [r4, r6]
      _b = b;
    a82c:	movw	r6, #4269	; 0x10ad
    a830:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a832:	movw	r6, #4272	; 0x10b0
    a836:	str	r5, [r4, r6]
      _s = s;
    a838:	movw	r6, #4276	; 0x10b4
    a83c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a83e:	add.w	r6, r4, #4224	; 0x1080
    a842:	str	r5, [r6, #0]
    a844:	str	r5, [r6, #32]
      _s = s;
      _b = b;
    a846:	movw	r6, #4277	; 0x10b5
    a84a:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a84c:	add.w	r6, r4, #4096	; 0x1000
    a850:	str.w	r8, [r6, #224]	; 0xe0
    a854:	movs	r6, #28
    a856:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a858:	movw	r6, #4293	; 0x10c5
    a85c:	mvn.w	r7, #109	; 0x6d
    a860:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a862:	movw	r6, #4308	; 0x10d4
    a866:	mov.w	r7, #70	; 0x46
    a86a:	strb	r7, [r4, r6]
    a86c:	movw	r6, #4316	; 0x10dc
    a870:	mov.w	r7, #46	; 0x2e
    a874:	strb	r7, [r4, r6]
    a876:	movw	r6, #4340	; 0x10f4
    a87a:	mov.w	r7, #76	; 0x4c
    a87e:	strb	r7, [r4, r6]
      _b = b;
    a880:	movw	r6, #4341	; 0x10f5
    a884:	mvn.w	r7, #109	; 0x6d
    a888:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a88a:	movw	r7, #4344	; 0x10f8
    a88e:	movs	r6, #181	; 0xb5
    a890:	str	r6, [r4, r7]
    a892:	add.w	r6, r4, #4096	; 0x1000
    a896:	mov.w	r7, #342	; 0x156
    a89a:	str.w	r7, [r6, #256]	; 0x100
    a89e:	movw	r7, #4360	; 0x1108
    a8a2:	mov.w	r6, #342	; 0x156
    a8a6:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a8a8:	movw	r6, #4309	; 0x10d5
    a8ac:	mvn.w	r7, #41	; 0x29
    a8b0:	strb	r7, [r4, r6]
    a8b2:	movw	r6, #4285	; 0x10bd
    a8b6:	mvn.w	r7, #114	; 0x72
    a8ba:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8bc:	movw	r6, #4292	; 0x10c4
    a8c0:	mvn.w	r7, #119	; 0x77
    a8c4:	strb	r7, [r4, r6]
    a8c6:	movw	r6, #4300	; 0x10cc
    a8ca:	mov.w	r7, #103	; 0x67
    a8ce:	strb	r7, [r4, r6]
      _b = b;
    a8d0:	movw	r6, #4325	; 0x10e5
    a8d4:	mvn.w	r7, #116	; 0x74
    a8d8:	strb	r7, [r4, r6]
    a8da:	movw	r6, #4357	; 0x1105
    a8de:	mov.w	r7, #71	; 0x47
    a8e2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8e4:	add.w	r6, r4, #4096	; 0x1000
    a8e8:	movs	r7, #112	; 0x70
    a8ea:	str.w	r7, [r6, #192]	; 0xc0
      _s = s;
      _b = b;
    a8ee:	movw	r6, #4317	; 0x10dd
    a8f2:	mvn.w	r7, #75	; 0x4b
    a8f6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8f8:	movw	r6, #4324	; 0x10e4
    a8fc:	mov.w	r7, #102	; 0x66
    a900:	strb	r7, [r4, r6]
    a902:	movw	r6, #4356	; 0x1104
    a906:	mov.w	r7, #75	; 0x4b
    a90a:	strb	r7, [r4, r6]
      _b = b;
    a90c:	movw	r6, #4349	; 0x10fd
    a910:	mov.w	r7, #73	; 0x49
    a914:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a916:	movw	r6, #4284	; 0x10bc
    a91a:	mvn.w	r7, #71	; 0x47
    a91e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a920:	movw	r7, #4296	; 0x10c8
    a924:	movs	r6, #100	; 0x64
    a926:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a928:	movw	r6, #4301	; 0x10cd
    a92c:	mvn.w	r7, #55	; 0x37
    a930:	strb	r7, [r4, r6]
    a932:	movw	r6, #4333	; 0x10ed
    a936:	mvn.w	r7, #96	; 0x60
    a93a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a93c:	movw	r6, #4332	; 0x10ec
    a940:	mov.w	r7, #83	; 0x53
    a944:	strb	r7, [r4, r6]
    a946:	movw	r6, #4348	; 0x10fc
    a94a:	mvn.w	r7, #77	; 0x4d
    a94e:	strb.w	fp, [r4, r6]
    a952:	movw	r6, #4364	; 0x110c
    a956:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a958:	movw	r7, #4304	; 0x10d0
    a95c:	movs	r6, #151	; 0x97
    a95e:	str	r6, [r4, r7]
    a960:	movw	r7, #4312	; 0x10d8
    a964:	movs	r6, #138	; 0x8a
    a966:	str	r6, [r4, r7]
    a968:	movw	r7, #4336	; 0x10f0
    a96c:	movs	r6, #207	; 0xcf
    a96e:	str	r6, [r4, r7]
    a970:	movw	r7, #4328	; 0x10e8
    a974:	mov.w	r6, #268	; 0x10c
    a978:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a97a:	movw	r6, #4365	; 0x110d
    a97e:	mov.w	r7, #83	; 0x53
    a982:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a984:	movw	r7, #4368	; 0x1110
    a988:	movs	r6, #7
    a98a:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a98c:	movw	r6, #4373	; 0x1115
    a990:	mvn.w	r7, #60	; 0x3c
    a994:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a996:	movw	r6, #4372	; 0x1114
    a99a:	mvn.w	r7, #44	; 0x2c
    a99e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9a0:	movw	r7, #4376	; 0x1118
    a9a4:	movs	r6, #5
    a9a6:	str	r6, [r4, r7]
      _s = s;
    a9a8:	movw	r6, #4380	; 0x111c
    a9ac:	mvn.w	r7, #24
    a9b0:	strb	r7, [r4, r6]
      _b = b;
    a9b2:	movw	r6, #4381	; 0x111d
    a9b6:	mvn.w	r7, #89	; 0x59
    a9ba:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a9bc:	movw	r6, #4388	; 0x1124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9c0:	movw	r7, #4488	; 0x1188
      _s = s;
    a9c4:	strb	r5, [r4, r6]
      _b = b;
    a9c6:	movw	r6, #4389	; 0x1125
    a9ca:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9cc:	movw	r6, #4392	; 0x1128
    a9d0:	str	r5, [r4, r6]
      _s = s;
    a9d2:	movw	r6, #4396	; 0x112c
    a9d6:	strb	r5, [r4, r6]
      _b = b;
    a9d8:	movw	r6, #4397	; 0x112d
    a9dc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9de:	movw	r6, #4400	; 0x1130
    a9e2:	str	r5, [r4, r6]
      _s = s;
    a9e4:	movw	r6, #4404	; 0x1134
    a9e8:	strb	r5, [r4, r6]
      _b = b;
    a9ea:	movw	r6, #4405	; 0x1135
    a9ee:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9f0:	movw	r6, #4408	; 0x1138
    a9f4:	str	r5, [r4, r6]
      _s = s;
    a9f6:	movw	r6, #4412	; 0x113c
    a9fa:	strb	r5, [r4, r6]
      _b = b;
    a9fc:	movw	r6, #4413	; 0x113d
    aa00:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa02:	movw	r6, #4420	; 0x1144
    aa06:	strb	r5, [r4, r6]
      _b = b;
    aa08:	movw	r6, #4421	; 0x1145
    aa0c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa0e:	movw	r6, #4424	; 0x1148
    aa12:	str	r5, [r4, r6]
      _s = s;
    aa14:	movw	r6, #4428	; 0x114c
    aa18:	strb	r5, [r4, r6]
      _b = b;
    aa1a:	movw	r6, #4429	; 0x114d
    aa1e:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa20:	movw	r6, #4432	; 0x1150
    aa24:	str	r5, [r4, r6]
      _s = s;
    aa26:	movw	r6, #4436	; 0x1154
    aa2a:	strb	r5, [r4, r6]
      _b = b;
    aa2c:	movw	r6, #4437	; 0x1155
    aa30:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa32:	movw	r6, #4440	; 0x1158
    aa36:	str	r5, [r4, r6]
      _s = s;
    aa38:	movw	r6, #4444	; 0x115c
    aa3c:	strb	r5, [r4, r6]
      _b = b;
    aa3e:	movw	r6, #4445	; 0x115d
    aa42:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa44:	movw	r6, #4452	; 0x1164
    aa48:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa4a:	add.w	r6, r4, #4384	; 0x1120
    aa4e:	str	r5, [r6, #0]
    aa50:	str	r5, [r6, #32]
    aa52:	str	r5, [r6, #64]	; 0x40
      _s = s;
      _b = b;
    aa54:	movw	r6, #4453	; 0x1165
    aa58:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa5a:	movs	r6, #150	; 0x96
    aa5c:	str	r6, [r4, r7]
      _s = s;
    aa5e:	movw	r6, #4492	; 0x118c
    aa62:	mov.w	r7, #91	; 0x5b
    aa66:	strb	r7, [r4, r6]
      _b = b;
    aa68:	movw	r6, #4517	; 0x11a5
    aa6c:	mvn.w	r7, #105	; 0x69
    aa70:	strb	r7, [r4, r6]
    aa72:	movw	r6, #4525	; 0x11ad
    aa76:	mvn.w	r7, #120	; 0x78
    aa7a:	strb	r7, [r4, r6]
    aa7c:	movw	r6, #4533	; 0x11b5
    aa80:	mvn.w	r7, #79	; 0x4f
    aa84:	strb	r7, [r4, r6]
    aa86:	movw	r6, #4509	; 0x119d
    aa8a:	mvn.w	r7, #27
    aa8e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa90:	movw	r6, #4540	; 0x11bc
    aa94:	mvn.w	r7, #16
    aa98:	strb	r7, [r4, r6]
      _b = b;
    aa9a:	movw	r6, #4493	; 0x118d
    aa9e:	mov.w	r7, #112	; 0x70
    aaa2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aaa4:	movw	r6, #4500	; 0x1194
    aaa8:	mvn.w	r7, #127	; 0x7f
    aaac:	strb	r7, [r4, r6]
      _b = b;
    aaae:	movw	r6, #4501	; 0x1195
    aab2:	mvn.w	r7, #65	; 0x41
    aab6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aab8:	movw	r7, #4520	; 0x11a8
    aabc:	movs	r6, #180	; 0xb4
    aabe:	str	r6, [r4, r7]
      _s = s;
    aac0:	movw	r6, #4508	; 0x119c
    aac4:	mvn.w	r7, #122	; 0x7a
    aac8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaca:	movw	r7, #4536	; 0x11b8
    aace:	movs	r6, #166	; 0xa6
    aad0:	str	r6, [r4, r7]
      _s = s;
    aad2:	movw	r6, #4532	; 0x11b4
    aad6:	mvn.w	r7, #2
    aada:	strb	r7, [r4, r6]
    aadc:	mov.w	r7, #4294967295
    aae0:	movw	r6, #4516	; 0x11a4
    aae4:	strb	r7, [r4, r6]
    aae6:	movw	r6, #4524	; 0x11ac
    aaea:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaec:	add.w	r6, r4, #4096	; 0x1000
    aaf0:	movs	r7, #183	; 0xb7
    aaf2:	str.w	r7, [r6, #416]	; 0x1a0
    aaf6:	movw	r7, #4528	; 0x11b0
    aafa:	movs	r6, #171	; 0xab
    aafc:	str	r6, [r4, r7]
    aafe:	movs	r6, #174	; 0xae
    ab00:	movw	r7, #4496	; 0x1190
    ab04:	str	r6, [r4, r7]
    ab06:	movw	r7, #4504	; 0x1198
    ab0a:	str	r6, [r4, r7]
    ab0c:	movw	r6, #4456	; 0x1168
      _s = s;
      _b = b;
    ab10:	mvn.w	r7, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab14:	str	r5, [r4, r6]
      _s = s;
    ab16:	movw	r6, #4460	; 0x116c
    ab1a:	strb	r5, [r4, r6]
      _b = b;
    ab1c:	movw	r6, #4461	; 0x116d
    ab20:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab22:	movw	r6, #4464	; 0x1170
    ab26:	str	r5, [r4, r6]
      _s = s;
    ab28:	movw	r6, #4468	; 0x1174
    ab2c:	strb	r5, [r4, r6]
      _b = b;
    ab2e:	movw	r6, #4469	; 0x1175
    ab32:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab34:	movw	r6, #4472	; 0x1178
    ab38:	str	r5, [r4, r6]
      _s = s;
    ab3a:	movw	r6, #4476	; 0x117c
    ab3e:	strb	r5, [r4, r6]
      _b = b;
    ab40:	movw	r6, #4477	; 0x117d
    ab44:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab46:	movw	r6, #4484	; 0x1184
    ab4a:	strb	r5, [r4, r6]
      _b = b;
    ab4c:	movw	r6, #4485	; 0x1185
    ab50:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab52:	add.w	r6, r4, #4480	; 0x1180
    ab56:	str	r5, [r6, #0]
      _s = s;
      _b = b;
    ab58:	movw	r6, #4541	; 0x11bd
    ab5c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab5e:	movw	r6, #4564	; 0x11d4
    ab62:	mvn.w	r7, #47	; 0x2f
    ab66:	strb	r7, [r4, r6]
      _b = b;
    ab68:	movw	r6, #4549	; 0x11c5
    ab6c:	mvn.w	r7, #44	; 0x2c
    ab70:	strb	r7, [r4, r6]
    ab72:	movw	r6, #4557	; 0x11cd
    ab76:	mov.w	r7, #84	; 0x54
    ab7a:	strb	r7, [r4, r6]
    ab7c:	movw	r6, #4565	; 0x11d5
    ab80:	mov.w	r7, #94	; 0x5e
    ab84:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab86:	add.w	r6, r4, #4096	; 0x1000
    ab8a:	movs	r7, #166	; 0xa6
    ab8c:	str.w	r5, [r6, #480]	; 0x1e0
    ab90:	str.w	r7, [r6, #448]	; 0x1c0
      _s = s;
    ab94:	movw	r6, #4548	; 0x11c4
    ab98:	mvn.w	r7, #25
    ab9c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab9e:	movw	r7, #4560	; 0x11d0
    aba2:	movs	r6, #187	; 0xbb
    aba4:	str	r6, [r4, r7]
      _s = s;
    aba6:	movw	r6, #4556	; 0x11cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abaa:	movw	r7, #4552	; 0x11c8
      _s = s;
    abae:	strb.w	fp, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abb2:	movs	r6, #174	; 0xae
    abb4:	str	r6, [r4, r7]
    abb6:	movw	r6, #4568	; 0x11d8
    abba:	str	r5, [r4, r6]
      _s = s;
    abbc:	movw	r6, #4572	; 0x11dc
    abc0:	strb	r5, [r4, r6]
      _b = b;
    abc2:	movw	r6, #4573	; 0x11dd
    abc6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    abc8:	movw	r6, #4580	; 0x11e4
    abcc:	strb	r5, [r4, r6]
      _b = b;
    abce:	movw	r6, #4581	; 0x11e5
    abd2:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abd4:	movw	r6, #4584	; 0x11e8
    abd8:	str	r5, [r4, r6]
      _s = s;
    abda:	movw	r6, #4588	; 0x11ec
    abde:	strb	r5, [r4, r6]
      _b = b;
    abe0:	movw	r6, #4589	; 0x11ed
    abe4:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abe6:	movw	r6, #4592	; 0x11f0
    abea:	str	r5, [r4, r6]
      _s = s;
    abec:	movw	r6, #4596	; 0x11f4
    abf0:	strb	r5, [r4, r6]
      _b = b;
    abf2:	movw	r6, #4597	; 0x11f5
    abf6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abf8:	movw	r6, #4600	; 0x11f8
    abfc:	str	r5, [r4, r6]
      _s = s;
    abfe:	movw	r6, #4604	; 0x11fc
    ac02:	strb	r5, [r4, r6]
      _b = b;
    ac04:	movw	r6, #4605	; 0x11fd
    ac08:	strb	r5, [r4, r6]
    ac0a:	bl	b9e0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac0e:	ldr	r2, [pc, #624]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac10:	ldr	r1, [pc, #624]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac12:	ldr	r0, [pc, #628]	; (ae88 <_GLOBAL__sub_I_bri_level+0x5cb0>)
    ac14:	bl	e480 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    ac18:	movs	r3, #82	; 0x52
    ac1a:	movs	r2, #7
    ac1c:	mov.w	r1, #576	; 0x240
    ac20:	ldr	r0, [pc, #616]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cb4>)
    ac22:	bl	b9e0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac26:	ldr	r2, [pc, #600]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac28:	ldr	r1, [pc, #600]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac2a:	ldr	r0, [pc, #608]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cb4>)
    ac2c:	bl	e480 <__aeabi_atexit>
#endif

//--------------------------------------------Screens

Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_A, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    ac30:	movs	r3, #82	; 0x52
    ac32:	movs	r2, #2
    ac34:	movs	r1, #156	; 0x9c
    ac36:	ldr	r0, [pc, #600]	; (ae90 <_GLOBAL__sub_I_bri_level+0x5cb8>)
    ac38:	bl	b9e0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac3c:	ldr	r2, [pc, #576]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac3e:	ldr	r1, [pc, #580]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac40:	ldr	r0, [pc, #588]	; (ae90 <_GLOBAL__sub_I_bri_level+0x5cb8>)
    ac42:	bl	e480 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_B, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    ac46:	movs	r3, #82	; 0x52
    ac48:	movs	r2, #14
    ac4a:	movs	r1, #115	; 0x73
    ac4c:	ldr	r0, [pc, #580]	; (ae94 <_GLOBAL__sub_I_bri_level+0x5cbc>)
    ac4e:	bl	b9e0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac52:	ldr	r2, [pc, #556]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac54:	ldr	r1, [pc, #556]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac56:	ldr	r0, [pc, #572]	; (ae94 <_GLOBAL__sub_I_bri_level+0x5cbc>)
    ac58:	bl	e480 <__aeabi_atexit>
    ac5c:	ldr	r3, [pc, #568]	; (ae98 <_GLOBAL__sub_I_bri_level+0x5cc0>)

	public:
		

Color(){
	RGB_updated = false;
    ac5e:	mov	r2, r5
    ac60:	add.w	r1, r3, #440	; 0x1b8
    ac64:	strb.w	r2, [r3, #-20]
    ac68:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    ac6a:	strb.w	r2, [r3, #-63]
		unsigned long startTime;
		float position;


Beam() {
	active = false;
    ac6e:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    ac72:	cmp	r1, r3
    ac74:	bne.n	ac64 <_GLOBAL__sub_I_bri_level+0x5a8c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ac76:	ldr	r3, [pc, #548]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    ac78:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac7a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    ac7c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac7e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ac80:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    ac82:	cmp	r3, r1
    ac84:	it	eq
    ac86:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac88:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ac8a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ac8c:	ite	eq
    ac8e:	moveq	r5, #1
    ac90:	movne	r5, #0
    ac92:	cmp	r5, #0
    ac94:	beq.n	ac7e <_GLOBAL__sub_I_bri_level+0x5aa6>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    ac96:	lsrs	r1, r3, #5
    ac98:	ldr	r3, [pc, #516]	; (aea0 <_GLOBAL__sub_I_bri_level+0x5cc8>)
    ac9a:	ldr	r4, [pc, #520]	; (aea4 <_GLOBAL__sub_I_bri_level+0x5ccc>)

	public:
		

Color(){
	RGB_updated = false;
    ac9c:	movs	r2, #0
    ac9e:	orr.w	r1, r1, r0, lsl #27
    aca2:	add.w	r0, r3, #600	; 0x258
    aca6:	vmov	s15, r1
    acaa:	vldr	d5, [pc, #460]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    acae:	vcvt.f64.u32	d7, s15
    acb2:	vdiv.f64	d6, d7, d5
    acb6:	vcvt.u32.f64	s12, d6
    acba:	vstr	s12, [r4]
    acbe:	strb.w	r2, [r3, #-16]
    acc2:	adds	r3, #60	; 0x3c
	HSB_updated = false;
    acc4:	strb.w	r2, [r3, #-75]
	int duration;
	unsigned long startTime;
	float borderSize;

	
	Circle() { active = false; };
    acc8:	strb.w	r2, [r3, #-120]
#define CIRCLE_AM 10


Circle circles[CIRCLE_AM];
    accc:	cmp	r3, r0
    acce:	bne.n	acbe <_GLOBAL__sub_I_bri_level+0x5ae6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    acd0:	ldr	r3, [pc, #456]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    acd2:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acd4:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    acd6:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acd8:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    acda:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acdc:	ldr	r6, [pc, #444]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    acde:	cmp	r3, r1
    ace0:	it	eq
    ace2:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ace4:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ace6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ace8:	ite	eq
    acea:	moveq	r5, #1
    acec:	movne	r5, #0
    acee:	cmp	r5, #0
    acf0:	beq.n	acd8 <_GLOBAL__sub_I_bri_level+0x5b00>
    acf2:	lsrs	r1, r3, #5
    acf4:	ldr	r3, [pc, #432]	; (aea8 <_GLOBAL__sub_I_bri_level+0x5cd0>)
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A; //= Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    acf6:	ldr	r0, [pc, #436]	; (aeac <_GLOBAL__sub_I_bri_level+0x5cd4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acf8:	mov	r4, r6
    acfa:	orr.w	r1, r1, r2, lsl #27
    acfe:	vmov	s15, r1
    ad02:	vldr	d5, [pc, #372]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ad06:	vcvt.f64.u32	d7, s15
    ad0a:	vdiv.f64	d6, d7, d5
    ad0e:	vcvt.u32.f64	s12, d6
    ad12:	vstr	s12, [r3]
    ad16:	bl	80 <Screen::Screen()>
Screen screen_B; //= Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    ad1a:	ldr	r0, [pc, #404]	; (aeb0 <_GLOBAL__sub_I_bri_level+0x5cd8>)
    ad1c:	bl	80 <Screen::Screen()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ad20:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ad22:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad24:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ad26:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad28:	ldr	r6, [pc, #368]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    ad2a:	cmp	r3, r1
    ad2c:	it	eq
    ad2e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad30:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ad32:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ad34:	ite	eq
    ad36:	moveq	r5, #1
    ad38:	movne	r5, #0
    ad3a:	cmp	r5, #0
    ad3c:	beq.n	ad24 <_GLOBAL__sub_I_bri_level+0x5b4c>
    ad3e:	lsrs	r1, r3, #5
    ad40:	ldr	r3, [pc, #368]	; (aeb4 <_GLOBAL__sub_I_bri_level+0x5cdc>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad42:	mov	r4, r6
    ad44:	orr.w	r1, r1, r2, lsl #27
    ad48:	vmov	s15, r1
    ad4c:	vldr	d5, [pc, #296]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ad50:	vcvt.f64.u32	d7, s15
    ad54:	vdiv.f64	d6, d7, d5
    ad58:	vcvt.u32.f64	s12, d6
    ad5c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ad60:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ad62:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad64:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ad66:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad68:	ldr	r7, [pc, #304]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    ad6a:	cmp	r3, r1
    ad6c:	it	eq
    ad6e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad70:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ad72:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ad74:	ite	eq
    ad76:	moveq	r5, #1
    ad78:	movne	r5, #0
    ad7a:	cmp	r5, #0
    ad7c:	beq.n	ad64 <_GLOBAL__sub_I_bri_level+0x5b8c>
    ad7e:	lsrs	r1, r3, #5
    ad80:	ldr	r3, [pc, #308]	; (aeb8 <_GLOBAL__sub_I_bri_level+0x5ce0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad82:	mov	r6, r7
    ad84:	orr.w	r1, r1, r2, lsl #27
    ad88:	vmov	s15, r1
    ad8c:	vldr	d5, [pc, #232]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ad90:	vcvt.f64.u32	d7, s15
    ad94:	vdiv.f64	d6, d7, d5
    ad98:	vcvt.u32.f64	s12, d6
    ad9c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ada0:	ldr	r4, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ada2:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ada4:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ada6:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ada8:	ldr	r5, [pc, #240]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    adaa:	cmp	r3, r1
    adac:	it	eq
    adae:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adb0:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    adb2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    adb4:	ite	eq
    adb6:	moveq	r0, #1
    adb8:	movne	r0, #0
    adba:	cmp	r0, #0
    adbc:	beq.n	ada4 <_GLOBAL__sub_I_bri_level+0x5bcc>
    adbe:	lsrs	r3, r3, #5
    adc0:	ldr	r2, [pc, #248]	; (aebc <_GLOBAL__sub_I_bri_level+0x5ce4>)
elapsedMillis implosionTimer;



byte incomingByte;
String readBuffer;  
    adc2:	movs	r1, #0
    adc4:	ldr	r0, [pc, #248]	; (aec0 <_GLOBAL__sub_I_bri_level+0x5ce8>)
    adc6:	orr.w	r3, r3, r4, lsl #27
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adca:	mov	r4, r5
    adcc:	vmov	s15, r3
    add0:	vldr	d5, [pc, #164]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    add4:	vcvt.f64.u32	d7, s15
    add8:	vdiv.f64	d6, d7, d5
    addc:	vcvt.u32.f64	s12, d6
    ade0:	vstr	s12, [r2]
    ade4:	bl	d850 <String::String(char const*)>
    ade8:	ldr	r1, [pc, #216]	; (aec4 <_GLOBAL__sub_I_bri_level+0x5cec>)
    adea:	ldr	r2, [pc, #148]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    adec:	ldr	r0, [pc, #208]	; (aec0 <_GLOBAL__sub_I_bri_level+0x5ce8>)
    adee:	bl	e480 <__aeabi_atexit>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    adf2:	ldr	r0, [r5, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    adf4:	ldr	r1, [r5, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adf6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    adf8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adfa:	ldr	r6, [pc, #160]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    adfc:	cmp	r3, r1
    adfe:	it	eq
    ae00:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae02:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ae04:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ae06:	ite	eq
    ae08:	moveq	r5, #1
    ae0a:	movne	r5, #0
    ae0c:	cmp	r5, #0
    ae0e:	beq.n	adf6 <_GLOBAL__sub_I_bri_level+0x5c1e>
    ae10:	lsrs	r1, r3, #5
    ae12:	ldr	r3, [pc, #180]	; (aec8 <_GLOBAL__sub_I_bri_level+0x5cf0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae14:	mov	r4, r6
    ae16:	orr.w	r1, r1, r2, lsl #27
    ae1a:	vmov	s15, r1
    ae1e:	vldr	d5, [pc, #88]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ae22:	vcvt.f64.u32	d7, s15
    ae26:	vdiv.f64	d6, d7, d5
    ae2a:	vcvt.u32.f64	s12, d6
    ae2e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ae32:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ae34:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae36:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ae38:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    ae3a:	cmp	r3, r1
    ae3c:	it	eq
    ae3e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae40:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ae42:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ae44:	ite	eq
    ae46:	moveq	r5, #1
    ae48:	movne	r5, #0
    ae4a:	cmp	r5, #0
    ae4c:	beq.n	ae36 <_GLOBAL__sub_I_bri_level+0x5c5e>
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
    ae4e:	lsrs	r1, r3, #5
    ae50:	ldr	r3, [pc, #120]	; (aecc <_GLOBAL__sub_I_bri_level+0x5cf4>)
    ae52:	orr.w	r1, r1, r2, lsl #27
    ae56:	vmov	s15, r1
    ae5a:	vldr	d5, [pc, #28]	; ae78 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ae5e:	vcvt.f64.u32	d7, s15
    ae62:	vdiv.f64	d6, d7, d5
    ae66:	vcvt.u32.f64	s12, d6
    ae6a:	vstr	s12, [r3]
    ae6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae72:	nop
    ae74:	nop.w
    ae78:	.word	0xd2f1a9fc
    ae7c:	.word	0x3ff0624d
    ae80:	.word	0x20000964
    ae84:	.word	0x0000b6f9
    ae88:	.word	0x20003e48
    ae8c:	.word	0x20003e5c
    ae90:	.word	0x20008ca4
    ae94:	.word	0x20008cb8
    ae98:	.word	0x20005488
    ae9c:	.word	0x400d4000
    aea0:	.word	0x200029f8
    aea4:	.word	0x20002c14
    aea8:	.word	0x20001790
    aeac:	.word	0x20005074
    aeb0:	.word	0x20005268
    aeb4:	.word	0x20002c1c
    aeb8:	.word	0x20002c18
    aebc:	.word	0x20008ca0
    aec0:	.word	0x20007a64
    aec4:	.word	0x0000d7d1
    aec8:	.word	0x20007a60
    aecc:	.word	0x20008c9c

0000aed0 <readMessages()>:

void readMessages(){
    aed0:	push	{r4, lr}
  if(Serial1.available()){
    aed2:	ldr	r0, [pc, #196]	; (af98 <readMessages()+0xc8>)
    aed4:	bl	d208 <HardwareSerial::available()>
    aed8:	cmp	r0, #0
    aeda:	beq.n	af36 <readMessages()+0x66>
    while (Serial1.available()){
      incomingByte = Serial1.read();
    aedc:	ldr	r4, [pc, #188]	; (af9c <readMessages()+0xcc>)
    aede:	b.n	aef2 <readMessages()+0x22>
    aee0:	ldr	r0, [pc, #180]	; (af98 <readMessages()+0xc8>)
    aee2:	bl	d25c <HardwareSerial::read()>
    aee6:	uxtb	r3, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    aee8:	ldr	r0, [pc, #180]	; (afa0 <readMessages()+0xd0>)
    aeea:	mov	r1, r3
    aeec:	strb	r3, [r4, #0]
    aeee:	bl	d918 <String::append(char)>
byte incomingByte;
String readBuffer;  

void readMessages(){
  if(Serial1.available()){
    while (Serial1.available()){
    aef2:	ldr	r0, [pc, #164]	; (af98 <readMessages()+0xc8>)
    aef4:	bl	d208 <HardwareSerial::available()>
    aef8:	cmp	r0, #0
    aefa:	bne.n	aee0 <readMessages()+0x10>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    aefc:	ldr	r1, [pc, #160]	; (afa0 <readMessages()+0xd0>)
    aefe:	ldr	r0, [pc, #164]	; (afa4 <readMessages()+0xd4>)
    af00:	bl	dd6c <Print::print(String const&)>
    af04:	ldr	r0, [pc, #156]	; (afa4 <readMessages()+0xd4>)
    af06:	bl	ddb8 <Print::println()>
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
    af0a:	ldr	r1, [pc, #156]	; (afa8 <readMessages()+0xd8>)
    af0c:	ldr	r0, [pc, #144]	; (afa0 <readMessages()+0xd0>)
    af0e:	bl	d938 <String::equals(char const*) const>
    af12:	cbz	r0, af42 <readMessages()+0x72>
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af14:	ldr	r4, [pc, #148]	; (afac <readMessages()+0xdc>)
    af16:	ldr	r3, [r4, #0]
    af18:	adds	r3, #50	; 0x32
    af1a:	cmp	r3, #119	; 0x77
    af1c:	ble.n	af8a <readMessages()+0xba>
    af1e:	cmp	r3, #255	; 0xff
    af20:	it	ge
    af22:	movge	r3, #255	; 0xff
    af24:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    af26:	ldr	r0, [pc, #136]	; (afb0 <readMessages()+0xe0>)
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af28:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    af2a:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    af2e:	ldrb	r1, [r4, #0]
    af30:	ldr	r0, [pc, #128]	; (afb4 <readMessages()+0xe4>)
    af32:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af36:	ldr	r1, [pc, #128]	; (afb8 <readMessages()+0xe8>)
    af38:	ldr	r0, [pc, #100]	; (afa0 <readMessages()+0xd0>)
}
    af3a:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af3e:	b.w	d894 <String::operator=(char const*)>
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
    af42:	ldr	r1, [pc, #120]	; (afbc <readMessages()+0xec>)
    af44:	ldr	r0, [pc, #88]	; (afa0 <readMessages()+0xd0>)
    af46:	bl	d938 <String::equals(char const*) const>
    af4a:	cmp	r0, #0
    af4c:	beq.n	af36 <readMessages()+0x66>
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af4e:	ldr	r4, [pc, #92]	; (afac <readMessages()+0xdc>)
    af50:	ldr	r3, [r4, #0]
    af52:	subs	r3, #50	; 0x32
    af54:	cmp	r3, #119	; 0x77
    af56:	ble.n	af90 <readMessages()+0xc0>
    af58:	cmp	r3, #255	; 0xff
    af5a:	it	ge
    af5c:	movge	r3, #255	; 0xff
    af5e:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    af60:	ldr	r0, [pc, #76]	; (afb0 <readMessages()+0xe0>)
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af62:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    af64:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    af68:	ldrb	r1, [r4, #0]
    af6a:	ldr	r0, [pc, #72]	; (afb4 <readMessages()+0xe4>)
    af6c:	bl	bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>
    af70:	movs	r1, #4
    af72:	ldr	r0, [pc, #76]	; (afc0 <readMessages()+0xf0>)
    af74:	bl	c0ac <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    af78:	ldr	r0, [pc, #40]	; (afa4 <readMessages()+0xd4>)
    af7a:	bl	ddb8 <Print::println()>
      Serial.println("down");
    }
  }
  readBuffer = "";
    af7e:	ldr	r1, [pc, #56]	; (afb8 <readMessages()+0xe8>)
    af80:	ldr	r0, [pc, #28]	; (afa0 <readMessages()+0xd0>)
}
    af82:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af86:	b.w	d894 <String::operator=(char const*)>
    af8a:	movs	r1, #120	; 0x78
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af8c:	mov	r3, r1
    af8e:	b.n	af26 <readMessages()+0x56>
    af90:	movs	r1, #120	; 0x78
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af92:	mov	r3, r1
    af94:	b.n	af60 <readMessages()+0x90>
    af96:	nop
    af98:	.word	0x20000ea8
    af9c:	.word	0x2000178c
    afa0:	.word	0x20007a64
    afa4:	.word	0x20000f0c
    afa8:	.word	0x2000019c
    afac:	.word	0x20000968
    afb0:	.word	0x20003e48
    afb4:	.word	0x20003e5c
    afb8:	.word	0x200001a8
    afbc:	.word	0x200001a4
    afc0:	.word	0x200001ac

0000afc4 <loop>:
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}


void loop() {
    afc4:	push	{r3, lr}
  readMessages();
    afc6:	bl	aed0 <readMessages()>

  if (isRegularAnimation) regular_animation();
    afca:	ldr	r3, [pc, #20]	; (afe0 <loop+0x1c>)
    afcc:	ldrb	r3, [r3, #0]
    afce:	cbnz	r3, afd8 <loop+0x14>
  else ceremony_animation();
}
    afd0:	ldmia.w	sp!, {r3, lr}

void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
    afd4:	b.w	4d00 <ceremony_animation()>
}
    afd8:	ldmia.w	sp!, {r3, lr}


void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
    afdc:	b.w	3b78 <regular_animation()>
    afe0:	.word	0x20007a5c
    afe4:	.word	0x00000000

0000afe8 <readAnimationType()>:
    }
  }
  readBuffer = "";
}

void readAnimationType(){
    afe8:	push	{r4, r5, r6, r7, lr}
    afea:	vpush	{d8}
    afee:	sub	sp, #20
  String animReadBuffer = "";
    aff0:	ldr	r1, [pc, #252]	; (b0f0 <readAnimationType()+0x108>)
    aff2:	mov	r0, sp
    aff4:	bl	d850 <String::String(char const*)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    aff8:	ldr	r3, [pc, #248]	; (b0f4 <readAnimationType()+0x10c>)
    affa:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    affc:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    affe:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b000:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b002:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b004:	cmp	r3, r1
    b006:	it	eq
    b008:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b00a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b00c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b00e:	ite	eq
    b010:	moveq	r5, #1
    b012:	movne	r5, #0
    b014:	cmp	r5, #0
    b016:	beq.n	b000 <readAnimationType()+0x18>
    b018:	lsrs	r1, r3, #5
  unsigned int readStartTime = rtcMillis();
  isRegularAnimation = true;
    b01a:	ldr	r6, [pc, #220]	; (b0f8 <readAnimationType()+0x110>)
    b01c:	movs	r3, #1
    b01e:	movw	r5, #5000	; 0x1388
    b022:	orr.w	r1, r1, r2, lsl #27
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b026:	ldr	r4, [pc, #204]	; (b0f4 <readAnimationType()+0x10c>)
    b028:	strb	r3, [r6, #0]
    b02a:	vmov	s15, r1
    b02e:	vldr	d8, [pc, #184]	; b0e8 <readAnimationType()+0x100>
    b032:	vcvt.f64.u32	d7, s15
    b036:	vdiv.f64	d6, d7, d8
    b03a:	vcvt.u32.f64	s12, d6
    b03e:	vmov	r3, s12
    b042:	add	r3, r5
    b044:	mov	r5, r3
    b046:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b048:	ldr	r1, [r4, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b04a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b04c:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b04e:	cmp	r3, r1
    b050:	it	eq
    b052:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b054:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b056:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b058:	ite	eq
    b05a:	moveq	r7, #1
    b05c:	movne	r7, #0
    b05e:	cmp	r7, #0
    b060:	beq.n	b04a <readAnimationType()+0x62>
  while(rtcMillis()<readStartTime+5000){
    b062:	lsrs	r1, r3, #5
    b064:	orr.w	r1, r1, r2, lsl #27
    b068:	vmov	s15, r1
    b06c:	vcvt.f64.u32	d7, s15
    b070:	vdiv.f64	d6, d7, d8
    b074:	vcvt.u32.f64	s12, d6
    b078:	vmov	r3, s12
    b07c:	cmp	r5, r3
    b07e:	bhi.n	b08a <readAnimationType()+0xa2>
    b080:	b.n	b0d4 <readAnimationType()+0xec>
    b082:	mov	r1, r7
    b084:	mov	r0, sp
    b086:	bl	d918 <String::append(char)>
      while (Serial1.available()){
    b08a:	ldr	r0, [pc, #112]	; (b0fc <readAnimationType()+0x114>)
    b08c:	bl	d208 <HardwareSerial::available()>
    b090:	cbz	r0, b0ac <readAnimationType()+0xc4>
        char inChar = Serial1.read();
    b092:	ldr	r0, [pc, #104]	; (b0fc <readAnimationType()+0x114>)
    b094:	bl	d25c <HardwareSerial::read()>
    b098:	uxtb	r7, r0
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
    b09a:	sub.w	r3, r7, #114	; 0x72
    b09e:	cmp	r3, #1
    b0a0:	bhi.n	b082 <readAnimationType()+0x9a>
    b0a2:	ldr	r1, [pc, #76]	; (b0f0 <readAnimationType()+0x108>)
    b0a4:	mov	r0, sp
    b0a6:	bl	d894 <String::operator=(char const*)>
    b0aa:	b.n	b082 <readAnimationType()+0x9a>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    b0ac:	mov	r1, sp
    b0ae:	ldr	r0, [pc, #80]	; (b100 <readAnimationType()+0x118>)
    b0b0:	bl	dd6c <Print::print(String const&)>
    b0b4:	ldr	r0, [pc, #72]	; (b100 <readAnimationType()+0x118>)
    b0b6:	bl	ddb8 <Print::println()>
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
    b0ba:	ldr	r1, [pc, #72]	; (b104 <readAnimationType()+0x11c>)
    b0bc:	mov	r0, sp
    b0be:	bl	d938 <String::equals(char const*) const>
    b0c2:	mov	r7, r0
    b0c4:	cbnz	r0, b0e2 <readAnimationType()+0xfa>
        isRegularAnimation = true;
        break;
      } else if (animReadBuffer.equals("spec")){
    b0c6:	ldr	r1, [pc, #64]	; (b108 <readAnimationType()+0x120>)
    b0c8:	mov	r0, sp
    b0ca:	bl	d938 <String::equals(char const*) const>
    b0ce:	cmp	r0, #0
    b0d0:	beq.n	b046 <readAnimationType()+0x5e>
        isRegularAnimation = false;
    b0d2:	strb	r7, [r6, #0]
  }
  readBuffer = "";
}

void readAnimationType(){
  String animReadBuffer = "";
    b0d4:	mov	r0, sp
    b0d6:	bl	d7d0 <String::~String()>
      } else if (animReadBuffer.equals("spec")){
        isRegularAnimation = false;
        break;
      }
  }
}
    b0da:	add	sp, #20
    b0dc:	vpop	{d8}
    b0e0:	pop	{r4, r5, r6, r7, pc}
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
        isRegularAnimation = true;
    b0e2:	movs	r3, #1
    b0e4:	strb	r3, [r6, #0]
        break;
    b0e6:	b.n	b0d4 <readAnimationType()+0xec>
    b0e8:	.word	0xd2f1a9fc
    b0ec:	.word	0x3ff0624d
    b0f0:	.word	0x200001a8
    b0f4:	.word	0x400d4000
    b0f8:	.word	0x20007a5c
    b0fc:	.word	0x20000ea8
    b100:	.word	0x20000f0c
    b104:	.word	0x200001b4
    b108:	.word	0x200001b8
    b10c:	.word	0x00000000

0000b110 <setup>:
}




void setup() {
    b110:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.begin(9600);
  Serial1.begin(9600);
    b114:	movs	r2, #0
}




void setup() {
    b116:	sub.w	sp, sp, #532	; 0x214
  Serial.begin(9600);
  Serial1.begin(9600);
    b11a:	mov.w	r1, #9600	; 0x2580
    b11e:	ldr	r0, [pc, #824]	; (b458 <setup+0x348>)
    b120:	bl	d324 <HardwareSerial::begin(unsigned long, unsigned short)>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b124:	ldr	r4, [pc, #820]	; (b45c <setup+0x34c>)
  delay(SETUP_DELAY);
    b126:	movw	r0, #3500	; 0xdac
    b12a:	add	r5, sp, #28
    b12c:	bl	cfcc <delay>
    b130:	add.w	fp, sp, #388	; 0x184

  updateRandomSeed();
    b134:	bl	10bc <updateRandomSeed()>

  rtc_set(0);
    b138:	movs	r0, #0
    b13a:	bl	cbe0 <rtc_set>
  
  readAnimationType();
    b13e:	bl	afe8 <readAnimationType()>
    b142:	ldmia	r4!, {r0, r1, r2, r3}
    b144:	stmia	r5!, {r0, r1, r2, r3}
    b146:	ldmia.w	r4, {r0, r1}
    b14a:	movs	r2, #168	; 0xa8
    b14c:	stmia.w	r5, {r0, r1}
    b150:	add.w	r1, r4, #8
    b154:	add	r0, sp, #52	; 0x34
    b156:	bl	bbe0 <memcpy>
    b15a:	add.w	r1, r4, #176	; 0xb0
    b15e:	movs	r2, #168	; 0xa8
    b160:	add	r0, sp, #220	; 0xdc
    b162:	bl	bbe0 <memcpy>
    b166:	add.w	r3, r4, #344	; 0x158
    b16a:	ldmia.w	r3, {r0, r1, r2}
    b16e:	stmia.w	fp, {r0, r1, r2}
    b172:	movs	r2, #60	; 0x3c
    b174:	movs	r1, #0
    b176:	add	r0, sp, #400	; 0x190
    b178:	bl	ebbc <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b17c:	movs	r1, #3
    b17e:	movs	r0, #2
    b180:	bl	dac8 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    b184:	movs	r1, #4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b186:	str	r0, [sp, #0]
		{CIRCLE, random(2, 4), false},
    b188:	movs	r0, #2
    b18a:	bl	dac8 <random(long, long)>
		{LINE, random(3, 10), false}
    b18e:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    b190:	mov	r9, r0
		{LINE, random(3, 10), false}
    b192:	movs	r0, #3
    b194:	bl	dac8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b198:	ldr	r3, [pc, #708]	; (b460 <setup+0x350>)
    b19a:	mov	r8, r0
    b19c:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b19e:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b1a0:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b1a2:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b1a4:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b1a6:	ldr	r4, [pc, #696]	; (b460 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b1a8:	cmp	r3, r1
    b1aa:	it	eq
    b1ac:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b1ae:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b1b0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b1b2:	ite	eq
    b1b4:	moveq	r6, #1
    b1b6:	movne	r6, #0
    b1b8:	cmp	r6, #0
    b1ba:	beq.n	b1a2 <setup+0x92>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1bc:	mov.w	r0, #1728	; 0x6c0
    b1c0:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1c4:	mov.w	r2, #1728	; 0x6c0
    b1c8:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1ca:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1cc:	bl	ebbc <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1d0:	mov.w	r0, #1728	; 0x6c0
    b1d4:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1d8:	mov.w	r2, #1728	; 0x6c0
    b1dc:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1de:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1e0:	bl	ebbc <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1e4:	mov.w	r0, #1728	; 0x6c0
    b1e8:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1ec:	mov.w	r2, #1728	; 0x6c0
    b1f0:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1f2:	str	r0, [sp, #12]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1f4:	bl	ebbc <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b1f8:	mov.w	r1, #360	; 0x168
    b1fc:	movs	r0, #0
    b1fe:	bl	dac8 <random(long, long)>
		hue_difference = random(60, 260);
    b202:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b206:	str	r0, [sp, #16]
		hue_difference = random(60, 260);
    b208:	movs	r0, #60	; 0x3c
    b20a:	bl	dac8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b20e:	ldr	r6, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b210:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b212:	ldr	r5, [r4, #40]	; 0x28
    b214:	str	r0, [sp, #20]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b216:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b218:	ldr	r3, [r1, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b21a:	ldr	r7, [pc, #580]	; (b460 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b21c:	cmp	r3, r5
    b21e:	it	eq
    b220:	cmpeq	r2, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b222:	mov	r6, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b224:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b226:	ite	eq
    b228:	moveq	r0, #1
    b22a:	movne	r0, #0
    b22c:	cmp	r0, #0
    b22e:	beq.n	b216 <setup+0x106>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b230:	ldr	r4, [pc, #560]	; (b464 <setup+0x354>)
    b232:	add.w	sl, sp, #28
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
    b236:	lsrs	r5, r5, #5
    b238:	mov	lr, r4
    b23a:	ldmia.w	sl!, {r0, r1, r2, r3}
    b23e:	stmia.w	lr!, {r0, r1, r2, r3}
    b242:	ldmia.w	sl, {r0, r1}
    b246:	movs	r2, #168	; 0xa8
    b248:	stmia.w	lr, {r0, r1}
    b24c:	add	r1, sp, #52	; 0x34
    b24e:	add.w	r0, r4, #24
    b252:	bl	bbe0 <memcpy>
    b256:	movs	r2, #168	; 0xa8
    b258:	add	r1, sp, #220	; 0xdc
    b25a:	add.w	r0, r4, #192	; 0xc0
    b25e:	bl	bbe0 <memcpy>
    b262:	ldr	r0, [sp, #0]
    b264:	movs	r2, #1
    b266:	movs	r1, #5
    b268:	str	r0, [sp, #416]	; 0x1a0
    b26a:	orr.w	r0, r5, r6, lsl #27
    b26e:	str	r2, [sp, #404]	; 0x194
    b270:	add.w	r3, r4, #360	; 0x168
    b274:	vmov	s14, r0
    b278:	str	r2, [sp, #436]	; 0x1b4
    b27a:	movs	r2, #2
    b27c:	str	r1, [sp, #400]	; 0x190
    b27e:	vcvt.f64.u32	d7, s14
    b282:	add	r6, sp, #400	; 0x190
    b284:	str	r2, [sp, #412]	; 0x19c
    b286:	movs	r2, #3
    b288:	str.w	r9, [sp, #428]	; 0x1ac
    b28c:	add.w	r5, r4, #372	; 0x174
    b290:	str	r2, [sp, #424]	; 0x1a8
    b292:	mov.w	r9, #0
    b296:	str.w	r8, [sp, #440]	; 0x1b8


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b29a:	add.w	lr, sp, #28
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b29e:	ldr.w	ip, [pc, #488]	; b488 <setup+0x378>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b2a2:	ldr.w	r8, [pc, #440]	; b45c <setup+0x34c>
    b2a6:	vldr	d5, [pc, #424]	; b450 <setup+0x340>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b2aa:	ldmia.w	fp, {r0, r1, r2}
    b2ae:	vdiv.f64	d6, d7, d5
    b2b2:	vldr	s15, [pc, #436]	; b468 <setup+0x358>
    b2b6:	stmia.w	r3, {r0, r1, r2}
    b2ba:	ldmia	r6!, {r0, r1, r2, r3}
    b2bc:	stmia	r5!, {r0, r1, r2, r3}
    b2be:	ldmia	r6!, {r0, r1, r2, r3}
    b2c0:	stmia	r5!, {r0, r1, r2, r3}
    b2c2:	ldmia	r6!, {r0, r1, r2, r3}
    b2c4:	stmia	r5!, {r0, r1, r2, r3}
    b2c6:	ldr	r3, [sp, #16]
    b2c8:	ldr	r0, [pc, #416]	; (b46c <setup+0x35c>)
    b2ca:	str.w	r3, [r4, #480]	; 0x1e0
    b2ce:	ldr	r3, [sp, #20]
    b2d0:	ldr	r1, [pc, #412]	; (b470 <setup+0x360>)
    b2d2:	str.w	r3, [r4, #484]	; 0x1e4
    b2d6:	ldr	r3, [sp, #4]
    b2d8:	ldr	r2, [pc, #408]	; (b474 <setup+0x364>)
    b2da:	str.w	r3, [r4, #488]	; 0x1e8
    b2de:	ldr	r3, [sp, #8]
    b2e0:	str.w	r0, [r4, #444]	; 0x1bc
    b2e4:	str.w	r3, [r4, #492]	; 0x1ec
    b2e8:	ldr	r3, [sp, #12]
    b2ea:	vcvt.u32.f64	s12, d6
    b2ee:	str.w	r1, [r4, #448]	; 0x1c0
    b2f2:	str.w	r3, [r4, #496]	; 0x1f0
    b2f6:	ldr	r3, [pc, #384]	; (b478 <setup+0x368>)
    b2f8:	str.w	r2, [r4, #452]	; 0x1c4
    b2fc:	str.w	r3, [r4, #436]	; 0x1b4
    b300:	ldr	r3, [pc, #376]	; (b47c <setup+0x36c>)
    b302:	str.w	ip, [r4, #432]	; 0x1b0
    b306:	str.w	r3, [r4, #440]	; 0x1b8
    b30a:	ldr	r3, [pc, #372]	; (b480 <setup+0x370>)
    b30c:	vstr	s15, [r4, #468]	; 0x1d4
    b310:	str.w	r3, [r4, #456]	; 0x1c8
    b314:	strb.w	r9, [r4, #460]	; 0x1cc
    b318:	str.w	r9, [r4, #464]	; 0x1d0
    b31c:	str.w	r9, [r4, #472]	; 0x1d8
    b320:	ldmia.w	r6, {r0, r1, r2}
    b324:	stmia.w	r5, {r0, r1, r2}


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b328:	ldmia.w	r8!, {r0, r1, r2, r3}
    b32c:	stmia.w	lr!, {r0, r1, r2, r3}
    b330:	ldmia.w	r8, {r0, r1}
    b334:	vstr	s12, [r4, #476]	; 0x1dc
    b338:	movs	r2, #168	; 0xa8
    b33a:	stmia.w	sl, {r0, r1}
    b33e:	add.w	r1, r8, #8
    b342:	add	r0, sp, #52	; 0x34
    b344:	bl	bbe0 <memcpy>
    b348:	add.w	r1, r8, #176	; 0xb0
    b34c:	movs	r2, #168	; 0xa8
    b34e:	add	r0, sp, #220	; 0xdc
    b350:	bl	bbe0 <memcpy>
    b354:	add.w	r3, r8, #344	; 0x158
    b358:	ldmia.w	r3, {r0, r1, r2}
    b35c:	stmia.w	fp, {r0, r1, r2}
    b360:	movs	r2, #60	; 0x3c
    b362:	mov	r1, r9
    b364:	add	r0, sp, #400	; 0x190
    b366:	bl	ebbc <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b36a:	movs	r1, #3
    b36c:	movs	r0, #2
    b36e:	bl	dac8 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    b372:	movs	r1, #4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b374:	mov	r8, r0
		{CIRCLE, random(2, 4), false},
    b376:	movs	r0, #2
    b378:	bl	dac8 <random(long, long)>
		{LINE, random(3, 10), false}
    b37c:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    b37e:	mov	r9, r0
		{LINE, random(3, 10), false}
    b380:	movs	r0, #3
    b382:	bl	dac8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b386:	ldr	r5, [r7, #36]	; 0x24
    b388:	mov	sl, r0
  uint32_t lo1 = SNVS_HPRTCLR;
    b38a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b38c:	mov	r0, r7
    b38e:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b390:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b392:	ldr	r4, [pc, #204]	; (b460 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b394:	cmp	r3, r1
    b396:	it	eq
    b398:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b39a:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b39c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b39e:	ite	eq
    b3a0:	moveq	r6, #1
    b3a2:	movne	r6, #0
    b3a4:	cmp	r6, #0
    b3a6:	beq.n	b38e <setup+0x27e>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3a8:	mov.w	r0, #1728	; 0x6c0
    b3ac:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3b0:	mov.w	r2, #1728	; 0x6c0
    b3b4:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3b6:	str	r0, [sp, #0]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3b8:	bl	ebbc <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3bc:	mov.w	r0, #1728	; 0x6c0
    b3c0:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3c4:	mov.w	r2, #1728	; 0x6c0
    b3c8:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3ca:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3cc:	bl	ebbc <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3d0:	mov.w	r0, #1728	; 0x6c0
    b3d4:	bl	de70 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3d8:	mov.w	r2, #1728	; 0x6c0
    b3dc:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3de:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3e0:	bl	ebbc <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b3e4:	mov.w	r1, #360	; 0x168
    b3e8:	movs	r0, #0
    b3ea:	bl	dac8 <random(long, long)>
		hue_difference = random(60, 260);
    b3ee:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b3f2:	str	r0, [sp, #12]
		hue_difference = random(60, 260);
    b3f4:	movs	r0, #60	; 0x3c
    b3f6:	bl	dac8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b3fa:	ldr	r7, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b3fc:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b3fe:	ldr	r6, [r4, #40]	; 0x28
    b400:	str	r0, [sp, #16]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b402:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b404:	ldr	r3, [r1, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b406:	cmp	r3, r6
    b408:	it	eq
    b40a:	cmpeq	r2, r7
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b40c:	mov	r7, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b40e:	mov	r6, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b410:	ite	eq
    b412:	moveq	r0, #1
    b414:	movne	r0, #0
    b416:	cmp	r0, #0
    b418:	beq.n	b402 <setup+0x2f2>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b41a:	ldr	r5, [pc, #104]	; (b484 <setup+0x374>)
    b41c:	add.w	lr, sp, #28
    b420:	lsrs	r6, r6, #5
    b422:	mov	r4, r5
    b424:	orr.w	r6, r6, r7, lsl #27
    b428:	movs	r7, #0
    b42a:	ldmia.w	lr!, {r0, r1, r2, r3}
    b42e:	stmia	r4!, {r0, r1, r2, r3}
    b430:	ldmia.w	lr, {r0, r1}
    b434:	movs	r2, #168	; 0xa8
    b436:	stmia.w	r4, {r0, r1}
    b43a:	add	r1, sp, #52	; 0x34
    b43c:	add.w	r0, r5, #24
    b440:	bl	bbe0 <memcpy>
    b444:	add	r1, sp, #220	; 0xdc
    b446:	movs	r2, #168	; 0xa8
    b448:	add.w	r0, r5, #192	; 0xc0
    b44c:	b.n	b48c <setup+0x37c>
    b44e:	nop
    b450:	.word	0xd2f1a9fc
    b454:	.word	0x3ff0624d
    b458:	.word	0x20000ea8
    b45c:	.word	0x20000000
    b460:	.word	0x400d4000
    b464:	.word	0x20005074
    b468:	.word	0x00000000
    b46c:	.word	0x20005614
    b470:	.word	0x20003e48
    b474:	.word	0x20009ef0
    b478:	.word	0x20001794
    b47c:	.word	0x20008ccc
    b480:	.word	0x20000bb0
    b484:	.word	0x20005268
    b488:	.word	0x2000b0f0
    b48c:	bl	bbe0 <memcpy>
    b490:	vmov	s15, r6
    b494:	movs	r2, #1
    b496:	mov.w	lr, #5
    b49a:	vcvt.f64.u32	d7, s15
    b49e:	movs	r0, #2
    b4a0:	movs	r1, #3
    b4a2:	str.w	lr, [sp, #400]	; 0x190
    b4a6:	str	r2, [sp, #436]	; 0x1b4
    b4a8:	add.w	r3, r5, #360	; 0x168
    b4ac:	str	r1, [sp, #424]	; 0x1a8
    b4ae:	add	r4, sp, #400	; 0x190
    b4b0:	str	r2, [sp, #404]	; 0x194
    b4b2:	add.w	r6, r5, #372	; 0x174
    b4b6:	str	r0, [sp, #412]	; 0x19c
    b4b8:	str.w	r8, [sp, #416]	; 0x1a0
    b4bc:	str.w	r9, [sp, #428]	; 0x1ac
    b4c0:	str.w	sl, [sp, #440]	; 0x1b8
    b4c4:	ldr.w	ip, [pc, #436]	; b67c <setup+0x56c>
    b4c8:	ldr.w	lr, [pc, #436]	; b680 <setup+0x570>
    b4cc:	vldr	s11, [pc, #384]	; b650 <setup+0x540>
    b4d0:	ldr.w	sl, [pc, #432]	; b684 <setup+0x574>
    b4d4:	ldr.w	r9, [pc, #432]	; b688 <setup+0x578>
    b4d8:	ldr.w	r8, [pc, #432]	; b68c <setup+0x57c>
    b4dc:	vldr	d4, [pc, #360]	; b648 <setup+0x538>
    b4e0:	ldmia.w	fp, {r0, r1, r2}
    b4e4:	vdiv.f64	d6, d7, d4
    b4e8:	stmia.w	r3, {r0, r1, r2}
    b4ec:	ldmia	r4!, {r0, r1, r2, r3}
    b4ee:	stmia	r6!, {r0, r1, r2, r3}
    b4f0:	ldmia	r4!, {r0, r1, r2, r3}
    b4f2:	stmia	r6!, {r0, r1, r2, r3}
    b4f4:	ldmia	r4!, {r0, r1, r2, r3}
    b4f6:	stmia	r6!, {r0, r1, r2, r3}
    b4f8:	ldr	r3, [sp, #12]
    b4fa:	str.w	ip, [r5, #452]	; 0x1c4
    b4fe:	str.w	r3, [r5, #480]	; 0x1e0
    b502:	ldr	r3, [sp, #16]
    b504:	str.w	lr, [r5, #456]	; 0x1c8
    b508:	str.w	r3, [r5, #484]	; 0x1e4
    b50c:	ldr	r3, [sp, #0]
    b50e:	vstr	s11, [r5, #468]	; 0x1d4
    b512:	str.w	r3, [r5, #488]	; 0x1e8
    b516:	ldr	r3, [sp, #4]
    b518:	str.w	sl, [r5, #436]	; 0x1b4
    b51c:	str.w	r3, [r5, #492]	; 0x1ec
    b520:	ldr	r3, [sp, #8]
    b522:	vcvt.u32.f64	s12, d6
    b526:	str.w	r9, [r5, #440]	; 0x1b8
    b52a:	str.w	r3, [r5, #496]	; 0x1f0
    b52e:	ldr	r3, [pc, #292]	; (b654 <setup+0x544>)
    b530:	str.w	r8, [r5, #444]	; 0x1bc
    b534:	str.w	r3, [r5, #432]	; 0x1b0
    b538:	ldr	r3, [pc, #284]	; (b658 <setup+0x548>)
    b53a:	strb.w	r7, [r5, #460]	; 0x1cc
    b53e:	str.w	r3, [r5, #448]	; 0x1c0
    b542:	ldmia.w	r4, {r0, r1, r2}
    b546:	stmia.w	r6, {r0, r1, r2}
  screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
  screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);

  

  synapse_A.begin();
    b54a:	ldr	r0, [pc, #272]	; (b65c <setup+0x54c>)
    b54c:	vstr	s12, [r5, #476]	; 0x1dc
    b550:	str.w	r7, [r5, #464]	; 0x1d0
    b554:	str.w	r7, [r5, #472]	; 0x1d8
    b558:	bl	b718 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    b55c:	ldr	r0, [pc, #256]	; (b660 <setup+0x550>)
    b55e:	bl	b718 <Adafruit_NeoPixel::begin()>

  matrix_A.begin();
    b562:	ldr	r0, [pc, #256]	; (b664 <setup+0x554>)
    b564:	bl	b718 <Adafruit_NeoPixel::begin()>
  matrix_B.begin();
    b568:	ldr	r0, [pc, #236]	; (b658 <setup+0x548>)
    b56a:	bl	b718 <Adafruit_NeoPixel::begin()>
  
 
  if(isRegularAnimation){
    b56e:	ldr	r3, [pc, #248]	; (b668 <setup+0x558>)
    b570:	ldrb	r3, [r3, #0]
    b572:	cmp	r3, #0
    b574:	bne.n	b63e <setup+0x52e>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b576:	ldr	r3, [pc, #244]	; (b66c <setup+0x55c>)
    b578:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b57a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b57c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b57e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b580:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b582:	ldr	r6, [pc, #232]	; (b66c <setup+0x55c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b584:	cmp	r3, r1
    b586:	it	eq
    b588:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b58a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b58c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b58e:	ite	eq
    b590:	moveq	r5, #1
    b592:	movne	r5, #0
    b594:	cmp	r5, #0
    b596:	beq.n	b57e <setup+0x46e>
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    b598:	lsrs	r1, r3, #5
    b59a:	ldr	r3, [pc, #212]	; (b670 <setup+0x560>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b59c:	mov	r4, r6
    b59e:	orr.w	r1, r1, r2, lsl #27
    b5a2:	vmov	s15, r1
    b5a6:	vldr	d5, [pc, #160]	; b648 <setup+0x538>
    b5aa:	vcvt.f64.u32	d7, s15
    b5ae:	vdiv.f64	d6, d7, d5
    b5b2:	vcvt.u32.f64	s12, d6
    b5b6:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b5ba:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b5bc:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5be:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b5c0:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5c2:	ldr	r6, [pc, #168]	; (b66c <setup+0x55c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b5c4:	cmp	r3, r1
    b5c6:	it	eq
    b5c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b5cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b5ce:	ite	eq
    b5d0:	moveq	r5, #1
    b5d2:	movne	r5, #0
    b5d4:	cmp	r5, #0
    b5d6:	beq.n	b5be <setup+0x4ae>
    b5d8:	lsrs	r1, r3, #5
    b5da:	ldr	r3, [pc, #152]	; (b674 <setup+0x564>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5dc:	mov	r4, r6
    b5de:	orr.w	r1, r1, r2, lsl #27
    b5e2:	vmov	s15, r1
    b5e6:	vldr	d5, [pc, #96]	; b648 <setup+0x538>
    b5ea:	vcvt.f64.u32	d7, s15
    b5ee:	vdiv.f64	d6, d7, d5
    b5f2:	vcvt.u32.f64	s12, d6
    b5f6:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b5fa:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b5fc:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5fe:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b600:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b602:	cmp	r3, r1
    b604:	it	eq
    b606:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b608:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b60a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b60c:	ite	eq
    b60e:	moveq	r5, #1
    b610:	movne	r5, #0
    b612:	cmp	r5, #0
    b614:	beq.n	b5fe <setup+0x4ee>
    b616:	lsrs	r1, r3, #5
    b618:	ldr	r3, [pc, #92]	; (b678 <setup+0x568>)
    b61a:	orr.w	r1, r1, r2, lsl #27
    b61e:	vmov	s15, r1
    b622:	vldr	d5, [pc, #36]	; b648 <setup+0x538>
    b626:	vcvt.f64.u32	d7, s15
    b62a:	vdiv.f64	d6, d7, d5
    b62e:	vcvt.u32.f64	s12, d6
    b632:	vstr	s12, [r3]


  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}
    b636:	add.w	sp, sp, #532	; 0x214
    b63a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  matrix_A.begin();
  matrix_B.begin();
  
 
  if(isRegularAnimation){
    regular_setup();
    b63e:	bl	10f8 <regular_setup()>
    b642:	b.n	b576 <setup+0x466>
    b644:	nop.w
    b648:	.word	0xd2f1a9fc
    b64c:	.word	0x3ff0624d
    b650:	.word	0x00000000
    b654:	.word	0x2000c314
    b658:	.word	0x20003e5c
    b65c:	.word	0x20008ca4
    b660:	.word	0x20008cb8
    b664:	.word	0x20003e48
    b668:	.word	0x20007a5c
    b66c:	.word	0x400d4000
    b670:	.word	0x20002c1c
    b674:	.word	0x20002c14
    b678:	.word	0x20001790
    b67c:	.word	0x20003e70
    b680:	.word	0x20000970
    b684:	.word	0x20002c24
    b688:	.word	0x20007a74
    b68c:	.word	0x20006838

0000b690 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    b690:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    b692:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    b694:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    b696:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    b698:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    b69a:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    b69c:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    b6a0:	cbz	r3, b6ba <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    b6a2:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    b6a6:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    b6aa:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    b6ae:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    b6b2:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    b6b6:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    b6ba:	ldrb	r7, [r0, #15]
    b6bc:	ldrb	r4, [r0, #12]
    b6be:	cmp	r4, r7
    b6c0:	beq.n	b6ec <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    b6c2:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    b6c4:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    b6c6:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6ca:	add	r7, r1
    b6cc:	cbnz	r3, b6e2 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    b6ce:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6d0:	strb	r3, [r7, #0]
    b6d2:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    b6d4:	strb	r6, [r1, r7]
    p[gOffset] = g;
    b6d6:	ldrb	r3, [r0, #13]
    b6d8:	strb	r5, [r1, r3]
    p[bOffset] = b;
    b6da:	ldrb	r3, [r0, #14]
    b6dc:	strb.w	lr, [r1, r3]
    b6e0:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6e2:	mul.w	r3, r3, r2
    b6e6:	ubfx	r3, r3, #8, #8
    b6ea:	b.n	b6d0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    b6ec:	add.w	r1, r1, r1, lsl #1
    b6f0:	ldr	r3, [r0, #8]
    b6f2:	add	r1, r3
    b6f4:	b.n	b6d4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    b6f6:	nop

0000b6f8 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    b6f8:	push	{r4, lr}
    b6fa:	mov	r4, r0
  if(pixels)   free(pixels);
    b6fc:	ldr	r0, [r0, #8]
    b6fe:	cbz	r0, b704 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    b700:	bl	e574 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    b704:	ldrsb.w	r0, [r4, #6]
    b708:	cmp	r0, #0
    b70a:	blt.n	b714 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    b70c:	uxtb	r0, r0
    b70e:	movs	r1, #0
    b710:	bl	d110 <pinMode>
}
    b714:	mov	r0, r4
    b716:	pop	{r4, pc}

0000b718 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    b718:	push	{r4, lr}
    b71a:	mov	r4, r0
  if(pin >= 0) {
    b71c:	ldrsb.w	r0, [r0, #6]
    b720:	cmp	r0, #0
    b722:	blt.n	b734 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    b724:	uxtb	r0, r0
    b726:	movs	r1, #1
    b728:	bl	d110 <pinMode>
    digitalWrite(pin, LOW);
    b72c:	movs	r1, #0
    b72e:	ldrb	r0, [r4, #6]
    b730:	bl	d104 <digitalWrite>
  }
  begun = true;
    b734:	movs	r3, #1
    b736:	strb	r3, [r4, #1]
    b738:	pop	{r4, pc}
    b73a:	nop

0000b73c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    b73c:	push	{r3, r4, r5, lr}
    b73e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    b740:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    b742:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    b744:	cbz	r0, b74a <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    b746:	bl	e574 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    b74a:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    b74c:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    b74e:	ldrb	r0, [r4, #12]
    b750:	cmp	r3, r0
    b752:	ite	eq
    b754:	moveq	r0, #3
    b756:	movne	r0, #4
    b758:	smulbb	r0, r0, r5
    b75c:	uxth	r0, r0
    b75e:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    b760:	bl	e48c <calloc>
    b764:	str	r0, [r4, #8]
    b766:	cbz	r0, b76c <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    b768:	strh	r5, [r4, #2]
    b76a:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    b76c:	strh	r0, [r4, #4]
    b76e:	strh	r0, [r4, #2]
    b770:	pop	{r3, r4, r5, pc}
    b772:	nop

0000b774 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    b774:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b776:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    b778:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b77c:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b780:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    b782:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    b786:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b78a:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b78e:	ite	hi
    b790:	movhi	r6, #0
    b792:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    b794:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b798:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    b79c:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    b79e:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    b7a0:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b7a2:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    b7a4:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b7a6:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    b7a8:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    b7aa:	cbz	r5, b7c2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    b7ac:	subs	r1, r2, r1
    b7ae:	clz	r1, r1
    b7b2:	lsrs	r1, r1, #5
    b7b4:	cmp	r1, r4
    b7b6:	beq.n	b7c2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    b7b8:	ldrh	r1, [r0, #2]
  }
}
    b7ba:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    b7be:	b.w	b73c <Adafruit_NeoPixel::updateLength(unsigned short)>
    b7c2:	pop	{r4, r5, r6, r7, pc}

0000b7c4 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    b7c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    b7c8:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    b7ca:	sub	sp, #20
    b7cc:	str	r0, [sp, #12]

  if(!pixels) return;
    b7ce:	cmp	r3, #0
    b7d0:	beq.n	b8b6 <Adafruit_NeoPixel::show()+0xf2>
    b7d2:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    b7d4:	bl	d08c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    b7d8:	ldr	r3, [r4, #16]
    b7da:	subs	r0, r0, r3
    b7dc:	cmp.w	r0, #300	; 0x12c
    b7e0:	bcc.n	b7d4 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    b7e2:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7e4:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7e6:	ldr	r0, [pc, #408]	; (b980 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7e8:	ldrsb.w	r3, [r6, #6]
    b7ec:	ldr	r4, [pc, #404]	; (b984 <Adafruit_NeoPixel::show()+0x1c0>)
    b7ee:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7f0:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b7f2:	ldr	r1, [pc, #404]	; (b988 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7f4:	ldr.w	ip, [r4, r3]
    b7f8:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    b7fa:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7fc:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    b800:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    b804:	mov	r5, r6
    b806:	mov	r6, r3
    b808:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    b80a:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b80c:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b80e:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b810:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b812:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b814:	ldr	r4, [pc, #372]	; (b98c <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b816:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b81a:	str	r2, [sp, #8]
    b81c:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    b81e:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b820:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b822:	ldr	r1, [pc, #364]	; (b990 <Adafruit_NeoPixel::show()+0x1cc>)
    b824:	ldr	r0, [r4, #0]
    b826:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    b828:	cmp	r2, #0
    b82a:	beq.n	b8bc <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b82c:	ldr	r5, [pc, #356]	; (b994 <Adafruit_NeoPixel::show()+0x1d0>)
    b82e:	lsrs	r3, r3, #8
    while(p < end) {
    b830:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b832:	umull	r2, r3, r5, r3
    b836:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    b83a:	bcs.n	b896 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    b83c:	ldr	r7, [pc, #344]	; (b998 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    b83e:	ldr	r6, [pc, #348]	; (b99c <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    b840:	ldr	r3, [sp, #4]
    b842:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    b846:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    b84a:	ldrb.w	sl, [r3], #1
    b84e:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    b850:	ldr	r2, [r4, #0]
    b852:	ldr	r3, [r1, #0]
    b854:	subs	r2, r2, r0
    b856:	lsrs	r3, r3, #8
    b858:	umull	fp, r3, r5, r3
    b85c:	cmp.w	r2, r3, lsr #4
    b860:	bcc.n	b850 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    b862:	ldr	r3, [pc, #296]	; (b98c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    b864:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    b868:	ldr	r0, [r3, #0]
        *set = msk;
    b86a:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    b86e:	beq.n	b96e <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    b870:	ldr	r3, [r4, #0]
    b872:	ldr	r2, [r1, #0]
    b874:	subs	r3, r3, r0
    b876:	umull	fp, r2, r7, r2
    b87a:	cmp.w	r3, r2, lsr #19
    b87e:	bcc.n	b870 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b880:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    b884:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b888:	mov.w	lr, lr, lsr #1
    b88c:	bne.n	b850 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    b88e:	ldr	r3, [sp, #8]
    b890:	ldr	r2, [sp, #4]
    b892:	cmp	r3, r2
    b894:	bne.n	b840 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    b896:	ldr	r5, [pc, #244]	; (b98c <Adafruit_NeoPixel::show()+0x1c8>)
    b898:	ldr	r4, [pc, #248]	; (b994 <Adafruit_NeoPixel::show()+0x1d0>)
    b89a:	ldr	r2, [r5, #0]
    b89c:	ldr	r3, [r1, #0]
    b89e:	subs	r2, r2, r0
    b8a0:	lsrs	r3, r3, #8
    b8a2:	umull	r6, r3, r4, r3
    b8a6:	cmp.w	r2, r3, lsr #4
    b8aa:	bcc.n	b89a <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    b8ac:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    b8ae:	bl	d08c <micros>
    b8b2:	ldr	r3, [sp, #12]
    b8b4:	str	r0, [r3, #16]
}
    b8b6:	add	sp, #20
    b8b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    b8bc:	ldr	r6, [pc, #212]	; (b994 <Adafruit_NeoPixel::show()+0x1d0>)
    b8be:	lsrs	r3, r3, #7
    b8c0:	umull	r2, r3, r6, r3
    while(p < end) {
    b8c4:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    b8c6:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    b8ca:	ldr	r3, [sp, #4]
    b8cc:	cmp	r3, r2
    b8ce:	bcs.n	b93a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    b8d0:	ldr.w	lr, [pc, #204]	; b9a0 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    b8d4:	ldr	r7, [pc, #196]	; (b99c <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    b8d6:	ldr	r3, [sp, #4]
    b8d8:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    b8dc:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    b8e0:	ldrb.w	fp, [r3], #1
    b8e4:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    b8e6:	ldr	r2, [r4, #0]
    b8e8:	ldr	r3, [r1, #0]
    b8ea:	subs	r2, r2, r0
    b8ec:	lsrs	r3, r3, #7
    b8ee:	umull	r5, r3, r6, r3
    b8f2:	cmp.w	r2, r3, lsr #4
    b8f6:	bcc.n	b8e6 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    b8f8:	ldr	r3, [pc, #144]	; (b98c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    b8fa:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    b8fe:	ldr	r0, [r3, #0]
        *set = msk;
    b900:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    b904:	beq.n	b95c <Adafruit_NeoPixel::show()+0x198>
    b906:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    b90a:	ldr	r2, [r4, #0]
    b90c:	ldr	r5, [r1, #0]
    b90e:	subs	r2, r2, r0
    b910:	umull	ip, r3, lr, r5
    b914:	subs	r5, r5, r3
    b916:	add.w	r3, r3, r5, lsr #1
    b91a:	cmp.w	r2, r3, lsr #19
    b91e:	bcc.n	b90a <Adafruit_NeoPixel::show()+0x146>
    b920:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b924:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    b928:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b92c:	mov.w	r9, r9, lsr #1
    b930:	bne.n	b8e6 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    b932:	ldr	r3, [sp, #8]
    b934:	ldr	r2, [sp, #4]
    b936:	cmp	r3, r2
    b938:	bne.n	b8d6 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    b93a:	ldr	r5, [pc, #80]	; (b98c <Adafruit_NeoPixel::show()+0x1c8>)
    b93c:	ldr	r4, [pc, #84]	; (b994 <Adafruit_NeoPixel::show()+0x1d0>)
    b93e:	ldr	r2, [r5, #0]
    b940:	ldr	r3, [r1, #0]
    b942:	subs	r2, r2, r0
    b944:	lsrs	r3, r3, #7
    b946:	umull	r6, r3, r4, r3
    b94a:	cmp.w	r2, r3, lsr #4
    b94e:	bcc.n	b93e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    b950:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    b952:	bl	d08c <micros>
    b956:	ldr	r3, [sp, #12]
    b958:	str	r0, [r3, #16]
    b95a:	b.n	b8b6 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    b95c:	ldr	r3, [r4, #0]
    b95e:	ldr	r2, [r1, #0]
    b960:	subs	r3, r3, r0
    b962:	umull	r5, r2, r7, r2
    b966:	cmp.w	r3, r2, lsr #19
    b96a:	bcc.n	b95c <Adafruit_NeoPixel::show()+0x198>
    b96c:	b.n	b924 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    b96e:	ldr	r3, [r4, #0]
    b970:	ldr	r2, [r1, #0]
    b972:	subs	r3, r3, r0
    b974:	umull	fp, r2, r6, r2
    b978:	cmp.w	r3, r2, lsr #20
    b97c:	bcc.n	b96e <Adafruit_NeoPixel::show()+0x1aa>
    b97e:	b.n	b880 <Adafruit_NeoPixel::show()+0xbc>
    b980:	.word	0xe000edfc
    b984:	.word	0x200005c0
    b988:	.word	0xe0001000
    b98c:	.word	0xe0001004
    b990:	.word	0x20000df4
    b994:	.word	0x014f8b59
    b998:	.word	0x6b5fca6b
    b99c:	.word	0x431bde83
    b9a0:	.word	0x421f67b3

0000b9a4 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    b9a4:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    b9a6:	ldrb	r3, [r0, #1]
    b9a8:	cbz	r3, b9c6 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    b9aa:	mov	r4, r0
    b9ac:	ldrsb.w	r0, [r0, #6]
    b9b0:	mov	r5, r1
    b9b2:	cmp	r0, #0
    b9b4:	blt.n	b9ca <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    b9b6:	uxtb	r0, r0
    b9b8:	movs	r1, #0
    b9ba:	bl	d110 <pinMode>
    b9be:	ldrb	r3, [r4, #1]
    pin = p;
    b9c0:	strb	r5, [r4, #6]
    if(begun) {
    b9c2:	cbnz	r3, b9cc <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    b9c4:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    b9c6:	strb	r1, [r0, #6]
    b9c8:	pop	{r3, r4, r5, pc}
    b9ca:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    b9cc:	mov	r0, r5
    b9ce:	movs	r1, #1
    b9d0:	bl	d110 <pinMode>
      digitalWrite(p, LOW);
    b9d4:	mov	r0, r5
    b9d6:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    b9d8:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    b9dc:	b.w	d104 <digitalWrite>

0000b9e0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    b9e0:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    b9e2:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    b9e4:	mov	r4, r0
    b9e6:	mov	r7, r1
    b9e8:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    b9ea:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    b9ec:	strb	r5, [r0, #1]
    b9ee:	strb	r5, [r0, #7]
    b9f0:	str	r5, [r0, #8]
    b9f2:	str	r5, [r0, #16]
{
  updateType(t);
    b9f4:	bl	b774 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    b9f8:	mov	r1, r7
    b9fa:	mov	r0, r4
    b9fc:	bl	b73c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    ba00:	mov	r0, r4
    ba02:	mov	r1, r6
    ba04:	bl	b9a4 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    ba08:	mov	r0, r4
    ba0a:	pop	{r3, r4, r5, r6, r7, pc}

0000ba0c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    ba0c:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    ba0e:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    ba10:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    ba14:	cmp	r4, r1
    ba16:	bls.n	ba4c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    ba18:	ldrb	r4, [r0, #7]
    ba1a:	cbz	r4, ba2e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    ba1c:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    ba20:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    ba24:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    ba28:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    ba2a:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    ba2c:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    ba2e:	ldrb	r5, [r0, #15]
    ba30:	ldrb	r4, [r0, #12]
    ba32:	cmp	r4, r5
    ba34:	beq.n	ba50 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ba36:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ba38:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ba3a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ba3e:	strb	r7, [r1, r5]
    ba40:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    ba42:	strb	r2, [r1, r5]
    p[gOffset] = g;
    ba44:	ldrb	r2, [r0, #13]
    ba46:	strb	r3, [r1, r2]
    p[bOffset] = b;
    ba48:	ldrb	r3, [r0, #14]
    ba4a:	strb	r6, [r1, r3]
  }
}
    ba4c:	pop	{r4, r5, r6, r7}
    ba4e:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    ba50:	add.w	r1, r1, r1, lsl #1
    ba54:	ldr	r4, [r0, #8]
    ba56:	add	r1, r4
    ba58:	b.n	ba42 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    ba5a:	nop

0000ba5c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    ba5c:	ldrh	r3, [r0, #2]
    ba5e:	cmp	r3, r1
    ba60:	bls.n	ba66 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    ba62:	b.w	b690 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    ba66:	bx	lr

0000ba68 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    ba68:	ldrh	r3, [r0, #2]
    ba6a:	cmp	r3, r1
    ba6c:	bls.n	ba9e <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    ba6e:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    ba70:	ldrb	r2, [r0, #15]
    ba72:	ldrb	r3, [r0, #12]
    ba74:	cmp	r2, r3
    ba76:	beq.n	baa2 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ba78:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    ba7a:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ba7c:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ba80:	ldrb	r3, [r1, r3]
    ba82:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    ba84:	cbnz	r4, bad4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    ba86:	lsls	r3, r3, #16
    ba88:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    ba8a:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    ba8c:	orr.w	r0, r3, r5, lsl #24
    ba90:	ldrb	r3, [r1, r4]
    ba92:	ldrb	r2, [r1, r2]
    ba94:	orrs	r3, r0
    ba96:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    ba9a:	pop	{r4, r5}
    ba9c:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    ba9e:	movs	r0, #0
    baa0:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    baa2:	add.w	r1, r1, r1, lsl #1
    baa6:	ldr	r3, [r0, #8]
    if(brightness) {
    baa8:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    baaa:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    baac:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    baae:	cbz	r4, bb04 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    bab0:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    bab2:	lsls	r2, r2, #8
    bab4:	ldrb	r3, [r0, #14]
    bab6:	ldrb	r0, [r1, r5]
    bab8:	ldrb	r3, [r1, r3]
    baba:	lsls	r0, r0, #8
    babc:	lsls	r3, r3, #8
    babe:	udiv	r2, r2, r4
    bac2:	udiv	r0, r0, r4
    bac6:	lsls	r2, r2, #16
    bac8:	udiv	r3, r3, r4
    bacc:	orr.w	r0, r2, r0, lsl #8
    bad0:	orrs	r0, r3
    bad2:	b.n	ba9a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    bad4:	lsls	r3, r3, #8
    bad6:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    bad8:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    bada:	lsls	r5, r5, #8
    badc:	ldrb	r2, [r1, r2]
    bade:	ldrb	r0, [r1, r0]
    bae0:	lsls	r2, r2, #8
    bae2:	lsls	r0, r0, #8
    bae4:	udiv	r1, r3, r4
    bae8:	udiv	r5, r5, r4
    baec:	udiv	r2, r2, r4
    baf0:	lsls	r3, r1, #16
    baf2:	udiv	r0, r0, r4
    baf6:	orr.w	r3, r3, r5, lsl #24
    bafa:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    bafc:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    bafe:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    bb02:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    bb04:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    bb06:	lsls	r2, r2, #16
    bb08:	ldrb	r3, [r0, #14]
    bb0a:	ldrb	r0, [r1, r4]
    bb0c:	ldrb	r3, [r1, r3]
    bb0e:	orr.w	r0, r2, r0, lsl #8
    bb12:	orrs	r0, r3
    bb14:	b.n	ba9a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    bb16:	nop

0000bb18 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    bb18:	ldrh	r0, [r0, #2]
    bb1a:	bx	lr

0000bb1c <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    bb1c:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    bb1e:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    bb20:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    bb22:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    bb24:	cmp	r6, r4
    bb26:	beq.n	bb50 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    bb28:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    bb2a:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    bb2c:	ands.w	r4, r4, #255	; 0xff
    bb30:	bne.n	bb54 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    bb32:	ldrh	r3, [r0, #4]
    bb34:	cbz	r3, bb4e <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    bb36:	mov	r2, r5
      c      = *ptr;
    bb38:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    bb3a:	mul.w	r3, r4, r3
    bb3e:	asrs	r3, r3, #8
    bb40:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    bb44:	subs	r3, r2, r5
    bb46:	ldrh	r1, [r0, #4]
    bb48:	uxth	r3, r3
    bb4a:	cmp	r1, r3
    bb4c:	bhi.n	bb38 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    bb4e:	strb	r6, [r0, #7]
  }
}
    bb50:	pop	{r4, r5, r6}
    bb52:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    bb54:	cmp	r1, #255	; 0xff
    bb56:	beq.n	bb64 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    bb58:	lsls	r3, r6, #8
    bb5a:	subs	r3, #1
    bb5c:	sdiv	r4, r3, r4
    bb60:	uxth	r4, r4
    bb62:	b.n	bb32 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    bb64:	movw	r3, #65535	; 0xffff
    bb68:	sdiv	r4, r3, r4
    bb6c:	b.n	bb32 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    bb6e:	nop

0000bb70 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    bb70:	ldrh	r2, [r0, #4]
    bb72:	movs	r1, #0
    bb74:	ldr	r0, [r0, #8]
    bb76:	b.w	ebbc <memset>
    bb7a:	nop

0000bb7c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    bb7c:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    bb7e:	movs	r1, #0
    bb80:	mov	r3, r0
    bb82:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    bb86:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    bb88:	movs	r4, #0
    bb8a:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    bb8c:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    bb90:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    bb92:	bfc	r2, #0, #4
    bb96:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    bb98:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    bb9c:	cmp	r3, r5
    bb9e:	bne.n	bb86 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    bba0:	mov	r2, r4
    bba2:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    bba4:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    bba6:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bbaa:	add.w	r3, r0, r2, lsl #4
    bbae:	adds	r3, #8
    bbb0:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bbb2:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bbb6:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bbba:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bbbe:	beq.n	bbc8 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bbc0:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    bbc2:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    bbc4:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    bbc6:	str	r6, [r1, #8]
    bbc8:	adds	r2, #1
    bbca:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    bbcc:	cmp	r2, #12
    bbce:	bne.n	bbaa <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    bbd0:	pop	{r4, r5, r6}
    bbd2:	bx	lr

0000bbd4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    bbd4:	ldr	r0, [pc, #4]	; (bbdc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    bbd6:	b.w	bb7c <TimeAlarmsClass::TimeAlarmsClass()>
    bbda:	nop
    bbdc:	.word	0x2000d538

0000bbe0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    bbe0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    bbe2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    bbe6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    bbea:	bne.n	bcc8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bbec:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    bbee:	bcc.n	bc74 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bbf0:	ldr.w	r3, [r1], #4
    bbf4:	str.w	r3, [r0], #4
    bbf8:	ldr.w	r3, [r1], #4
    bbfc:	str.w	r3, [r0], #4
    bc00:	ldr.w	r3, [r1], #4
    bc04:	str.w	r3, [r0], #4
    bc08:	ldr.w	r3, [r1], #4
    bc0c:	str.w	r3, [r0], #4
    bc10:	ldr.w	r3, [r1], #4
    bc14:	str.w	r3, [r0], #4
    bc18:	ldr.w	r3, [r1], #4
    bc1c:	str.w	r3, [r0], #4
    bc20:	ldr.w	r3, [r1], #4
    bc24:	str.w	r3, [r0], #4
    bc28:	ldr.w	r3, [r1], #4
    bc2c:	str.w	r3, [r0], #4
    bc30:	ldr.w	r3, [r1], #4
    bc34:	str.w	r3, [r0], #4
    bc38:	ldr.w	r3, [r1], #4
    bc3c:	str.w	r3, [r0], #4
    bc40:	ldr.w	r3, [r1], #4
    bc44:	str.w	r3, [r0], #4
    bc48:	ldr.w	r3, [r1], #4
    bc4c:	str.w	r3, [r0], #4
    bc50:	ldr.w	r3, [r1], #4
    bc54:	str.w	r3, [r0], #4
    bc58:	ldr.w	r3, [r1], #4
    bc5c:	str.w	r3, [r0], #4
    bc60:	ldr.w	r3, [r1], #4
    bc64:	str.w	r3, [r0], #4
    bc68:	ldr.w	r3, [r1], #4
    bc6c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bc70:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    bc72:	bcs.n	bbf0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    bc74:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    bc76:	bcc.n	bc9c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bc78:	ldr.w	r3, [r1], #4
    bc7c:	str.w	r3, [r0], #4
    bc80:	ldr.w	r3, [r1], #4
    bc84:	str.w	r3, [r0], #4
    bc88:	ldr.w	r3, [r1], #4
    bc8c:	str.w	r3, [r0], #4
    bc90:	ldr.w	r3, [r1], #4
    bc94:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    bc98:	subs	r2, #16
	bhs	.Lmid_block_loop
    bc9a:	bcs.n	bc78 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    bc9c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    bc9e:	bcc.n	bcac <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    bca0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    bca4:	str.w	r3, [r0], #4
	subs	r2, #4
    bca8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    bcaa:	bcs.n	bca0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    bcac:	adds	r2, #4
	beq	.Ldone
    bcae:	beq.n	bcc2 <memcpy+0xe2>

	lsls	r2, r2, #31
    bcb0:	lsls	r2, r2, #31
	itt ne
    bcb2:	itt	ne
	ldrbne  r3, [r1], #1
    bcb4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bcb8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    bcbc:	bcc.n	bcc2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    bcbe:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    bcc0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bcc2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bcc4:	bx	lr
    bcc6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    bcc8:	cmp	r2, #8
	blo	.Lbyte_copy
    bcca:	bcc.n	bcf4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    bccc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    bcce:	beq.n	bbec <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    bcd0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    bcd4:	beq.n	bbec <memcpy+0xc>

	rsb	r3, #4
    bcd6:	rsb	r3, r3, #4
	subs	r2, r3
    bcda:	subs	r2, r2, r3

	lsls    r3, r3, #31
    bcdc:	lsls	r3, r3, #31
	itt ne
    bcde:	itt	ne
	ldrbne  r3, [r1], #1
    bce0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bce4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    bce8:	bcc.n	bbec <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    bcea:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    bcee:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    bcf2:	b.n	bbec <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    bcf4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    bcf6:	bcc.n	bcac <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    bcf8:	subs	r2, #1
	ldrb    r3, [r1], #1
    bcfa:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    bcfe:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    bd02:	bcs.n	bcf8 <memcpy+0x118>

	ldrb	r3, [r1]
    bd04:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    bd06:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    bd08:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    bd0a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    bd0c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    bd0e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bd10:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bd12:	bx	lr

0000bd14 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    bd14:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    bd16:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd18:	ubfx	r3, r3, #16, #15
    bd1c:	ldr	r1, [pc, #20]	; (bd34 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    bd1e:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd20:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    bd24:	ldr	r4, [pc, #16]	; (bd38 <rx_event+0x24>)
    bd26:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd28:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    bd2c:	strh.w	r5, [r4, r2, lsl #1]
}
    bd30:	pop	{r4, r5}
    bd32:	bx	lr
    bd34:	.word	0x2000ddc8
    bd38:	.word	0x2000ddc0

0000bd3c <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    bd3c:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    bd3e:	ldr	r3, [pc, #84]	; (bd94 <usb_serial_flush_callback+0x58>)
    bd40:	ldrb	r3, [r3, #0]
    bd42:	cbnz	r3, bd54 <usb_serial_flush_callback+0x18>
    bd44:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    bd48:	ldr	r3, [pc, #76]	; (bd98 <usb_serial_flush_callback+0x5c>)
    bd4a:	ldrb	r3, [r3, #0]
    bd4c:	cbz	r3, bd54 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    bd4e:	ldr	r5, [pc, #76]	; (bd9c <usb_serial_flush_callback+0x60>)
    bd50:	ldrh	r2, [r5, #0]
    bd52:	cbnz	r2, bd56 <usb_serial_flush_callback+0x1a>
    bd54:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd56:	ldr	r7, [pc, #72]	; (bda0 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd58:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd5a:	ldr	r6, [pc, #72]	; (bda4 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd5c:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd60:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd62:	ldr	r0, [pc, #68]	; (bda8 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd64:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd68:	add.w	r1, r0, r1, lsl #8
    bd6c:	mov	r0, r6
    bd6e:	bl	cb3c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    bd72:	mov	r1, r6
    bd74:	movs	r0, #4
    bd76:	bl	cb6c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd7a:	ldrb	r3, [r7, #0]
    bd7c:	adds	r3, #1
    bd7e:	uxtb	r3, r3
    bd80:	cmp	r3, #6
    bd82:	it	ls
    bd84:	strbls	r3, [r7, #0]
	tx_available = 0;
    bd86:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd8a:	it	hi
    bd8c:	strbhi	r4, [r7, #0]
	tx_available = 0;
    bd8e:	strh	r3, [r5, #0]
    bd90:	pop	{r3, r4, r5, r6, r7, pc}
    bd92:	nop
    bd94:	.word	0x2000dcfc
    bd98:	.word	0x2000df70
    bd9c:	.word	0x2000de40
    bda0:	.word	0x2000dcfd
    bda4:	.word	0x2000de60
    bda8:	.word	0x2000d5fc

0000bdac <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    bdac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdb0:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bdb2:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    bdb4:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bdb6:	cmp	r1, #0
    bdb8:	beq.w	bee4 <usb_serial_write.part.1+0x138>
    bdbc:	movs	r3, #0
    bdbe:	ldr.w	r8, [pc, #320]	; bf00 <usb_serial_write.part.1+0x154>
    bdc2:	ldr.w	r9, [pc, #304]	; bef4 <usb_serial_write.part.1+0x148>
    bdc6:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    bdc8:	ldr	r6, [pc, #284]	; (bee8 <usb_serial_write.part.1+0x13c>)
    bdca:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    bdce:	ldr.w	sl, [pc, #308]	; bf04 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    bdd2:	ldr	r2, [pc, #280]	; (beec <usb_serial_write.part.1+0x140>)
    bdd4:	ldrb	r4, [r2, #0]
    bdd6:	ldr	r2, [pc, #280]	; (bef0 <usb_serial_write.part.1+0x144>)
    bdd8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    bddc:	cmp	r3, #0
    bdde:	bne.n	be9c <usb_serial_write.part.1+0xf0>
    bde0:	mov	r5, r3
    bde2:	mov	r4, r3
    bde4:	b.n	be10 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    bde6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    bdea:	cbnz	r4, bdee <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    bdec:	ldr	r5, [r6, #0]
    bdee:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    bdf0:	cmp	r3, #0
    bdf2:	bne.n	be90 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    bdf4:	ldr	r3, [r6, #0]
    bdf6:	subs	r3, r3, r5
    bdf8:	cmp	r3, #120	; 0x78
    bdfa:	bhi.n	bed8 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    bdfc:	ldrb.w	r3, [sl]
    be00:	cmp	r3, #0
    be02:	beq.n	be90 <usb_serial_write.part.1+0xe4>
			yield();
    be04:	bl	d998 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    be08:	ldrh.w	r3, [r8]
    be0c:	cmp	r3, #0
    be0e:	bne.n	be98 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    be10:	mov	r0, r7
    be12:	bl	cbb8 <usb_transfer_status>
			if (!(status & 0x80)) {
    be16:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    be1a:	ldr	r2, [pc, #216]	; (bef4 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    be1c:	bne.n	bde6 <usb_serial_write.part.1+0x3a>
    be1e:	ldr	r2, [pc, #204]	; (beec <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    be20:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    be24:	strb.w	r0, [r9]
    be28:	ldrb	r4, [r2, #0]
    be2a:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be2c:	ldr	r1, [pc, #200]	; (bef8 <usb_serial_write.part.1+0x14c>)
    be2e:	lsls	r4, r4, #8
		if (size >= tx_available) {
    be30:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    be32:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be36:	add	r0, r4
    be38:	add	r0, r1
		if (size >= tx_available) {
    be3a:	bcc.n	beae <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    be3c:	ldr	r1, [sp, #8]
    be3e:	bl	bbe0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    be42:	ldr	r3, [pc, #180]	; (bef8 <usb_serial_write.part.1+0x14c>)
    be44:	mov.w	r2, #256	; 0x100
    be48:	mov	r0, r7
    be4a:	adds	r1, r3, r4
    be4c:	movs	r3, #0
    be4e:	bl	cb3c <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    be52:	mov	r1, r7
    be54:	movs	r0, #4
    be56:	bl	cb6c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    be5a:	ldr	r3, [pc, #144]	; (beec <usb_serial_write.part.1+0x140>)
    be5c:	ldr	r2, [pc, #140]	; (beec <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    be5e:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    be60:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    be62:	ldr	r0, [pc, #152]	; (befc <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    be64:	adds	r3, #1
    be66:	uxtb	r3, r3
    be68:	cmp	r3, #6
    be6a:	it	hi
    be6c:	movhi	r3, #0
    be6e:	strb	r3, [r2, #0]
			size -= tx_available;
    be70:	ldrh.w	r2, [r8]
			sent += tx_available;
    be74:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    be76:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    be7a:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    be7e:	add	r3, r2
    be80:	str	r3, [sp, #4]
			data += tx_available;
    be82:	ldr	r3, [sp, #8]
    be84:	add	r3, r2
    be86:	str	r3, [sp, #8]
    be88:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    be8a:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    be8e:	bne.n	bdd2 <usb_serial_write.part.1+0x26>
    be90:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    be92:	add	sp, #20
    be94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be98:	ldr	r2, [pc, #80]	; (beec <usb_serial_write.part.1+0x140>)
    be9a:	ldrb	r4, [r2, #0]
    be9c:	mov	r2, r3
    be9e:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    bea2:	lsls	r4, r4, #8
    bea4:	ldr	r1, [pc, #80]	; (bef8 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    bea6:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    bea8:	add	r0, r4
    beaa:	add	r0, r1
		if (size >= tx_available) {
    beac:	bcs.n	be3c <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    beae:	ldr	r1, [sp, #8]
    beb0:	mov	r2, fp
    beb2:	str	r3, [sp, #12]
    beb4:	bl	bbe0 <memcpy>
			tx_available -= size;
    beb8:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    beba:	mov.w	r1, #3221225472	; 0xc0000000
    bebe:	ldr	r2, [pc, #60]	; (befc <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    bec0:	rsb	r3, fp, r3
    bec4:	strh.w	r3, [r8]
    bec8:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    beca:	str.w	r1, [r2, #132]	; 0x84
    bece:	add	r3, fp
    bed0:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bed2:	add	sp, #20
    bed4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    bed8:	movs	r3, #1
				return sent;
    beda:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    bedc:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bede:	add	sp, #20
    bee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bee4:	mov	r0, r1
    bee6:	b.n	be92 <usb_serial_write.part.1+0xe6>
    bee8:	.word	0x2000df98
    beec:	.word	0x2000dcfd
    bef0:	.word	0x2000de60
    bef4:	.word	0x2000df40
    bef8:	.word	0x2000d5fc
    befc:	.word	0x402e0000
    bf00:	.word	0x2000de40
    bf04:	.word	0x2000df70

0000bf08 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    bf08:	bx	lr
    bf0a:	nop

0000bf0c <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf0c:	movs	r1, #0
    bf0e:	movs	r2, #224	; 0xe0
    bf10:	ldr	r0, [pc, #128]	; (bf94 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    bf12:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    bf14:	mov	r4, r1
    bf16:	ldr	r6, [pc, #128]	; (bf98 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf18:	ldr	r5, [pc, #128]	; (bf9c <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf1a:	bl	ebbc <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bf1e:	ldr	r7, [pc, #128]	; (bfa0 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf20:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    bf22:	ldr	r3, [pc, #128]	; (bfa4 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf24:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    bf26:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf28:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    bf2a:	ldr	r6, [pc, #124]	; (bfa8 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    bf2c:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf2e:	bl	ebbc <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    bf32:	mov	r3, r4
    bf34:	mov	r2, r4
    bf36:	movs	r1, #16
    bf38:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bf3a:	str	r4, [r7, #0]
    bf3c:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    bf3e:	str	r4, [r6, #0]
    bf40:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    bf42:	bl	cad4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    bf46:	mov	r2, r4
    bf48:	ldr	r3, [pc, #96]	; (bfac <usb_serial_configure+0xa0>)
    bf4a:	movs	r1, #64	; 0x40
    bf4c:	movs	r0, #3
    bf4e:	bl	ca70 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    bf52:	mov	r3, r4
    bf54:	mov	r2, r4
    bf56:	movs	r1, #64	; 0x40
    bf58:	movs	r0, #4
    bf5a:	bl	cad4 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    bf5e:	mov	r3, r4
    bf60:	movs	r2, #64	; 0x40
    bf62:	mov	r0, r5
    bf64:	ldr	r1, [pc, #72]	; (bfb0 <usb_serial_configure+0xa4>)
    bf66:	bl	cb3c <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    bf6a:	mov	r1, r5
    bf6c:	movs	r0, #3
    bf6e:	bl	cb94 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    bf72:	ldr	r3, [pc, #64]	; (bfb4 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    bf74:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    bf76:	ldr	r1, [pc, #64]	; (bfb8 <usb_serial_configure+0xac>)
    bf78:	ldr	r0, [pc, #64]	; (bfbc <usb_serial_configure+0xb0>)
    bf7a:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    bf7c:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    bf80:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    bf84:	ldr.w	r2, [r3, #328]	; 0x148
    bf88:	orr.w	r2, r2, #16777216	; 0x1000000
    bf8c:	str.w	r2, [r3, #328]	; 0x148
    bf90:	pop	{r3, r4, r5, r6, r7, pc}
    bf92:	nop
    bf94:	.word	0x2000de60
    bf98:	.word	0x2000dcfd
    bf9c:	.word	0x2000dde0
    bfa0:	.word	0x2000ddc8
    bfa4:	.word	0x2000de40
    bfa8:	.word	0x2000ddc0
    bfac:	.word	0x0000bd15
    bfb0:	.word	0x2000dd00
    bfb4:	.word	0x402e0000
    bfb8:	.word	0x2000df44
    bfbc:	.word	0x0000bd3d

0000bfc0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    bfc0:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    bfc2:	ldr	r5, [pc, #56]	; (bffc <usb_serial_getchar+0x3c>)
    bfc4:	ldr	r3, [pc, #56]	; (c000 <usb_serial_getchar+0x40>)
    bfc6:	ldrh	r2, [r5, #0]
    bfc8:	ldrh	r0, [r3, #0]
    bfca:	cmp	r2, r0
    bfcc:	bcs.n	bff6 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    bfce:	adds	r3, r2, #1
    bfd0:	ldr	r1, [pc, #48]	; (c004 <usb_serial_getchar+0x44>)
    bfd2:	uxth	r3, r3
    bfd4:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    bfd6:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    bfd8:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    bfda:	bls.n	bfe0 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    bfdc:	mov	r0, r4
	}
	return -1;
}
    bfde:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    bfe0:	movs	r3, #0
    bfe2:	movs	r2, #64	; 0x40
    bfe4:	ldr	r0, [pc, #32]	; (c008 <usb_serial_getchar+0x48>)
    bfe6:	bl	cb3c <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    bfea:	ldr	r1, [pc, #28]	; (c008 <usb_serial_getchar+0x48>)
    bfec:	movs	r0, #3
    bfee:	bl	cb94 <usb_receive>
		}
		return c;
    bff2:	mov	r0, r4
    bff4:	pop	{r3, r4, r5, pc}
	}
	return -1;
    bff6:	mov.w	r0, #4294967295
    bffa:	pop	{r3, r4, r5, pc}
    bffc:	.word	0x2000ddc0
    c000:	.word	0x2000ddc8
    c004:	.word	0x2000dd00
    c008:	.word	0x2000dde0

0000c00c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    c00c:	ldr	r3, [pc, #20]	; (c024 <usb_serial_peekchar+0x18>)
    c00e:	ldr	r2, [pc, #24]	; (c028 <usb_serial_peekchar+0x1c>)
    c010:	ldrh	r3, [r3, #0]
    c012:	ldrh	r2, [r2, #0]
    c014:	cmp	r2, r3
    c016:	bls.n	c01e <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    c018:	ldr	r2, [pc, #16]	; (c02c <usb_serial_peekchar+0x20>)
    c01a:	ldrb	r0, [r2, r3]
    c01c:	bx	lr
	}

	return -1;
    c01e:	mov.w	r0, #4294967295
}
    c022:	bx	lr
    c024:	.word	0x2000ddc0
    c028:	.word	0x2000ddc8
    c02c:	.word	0x2000dd00

0000c030 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    c030:	ldr	r2, [pc, #8]	; (c03c <usb_serial_available+0xc>)
    c032:	ldr	r3, [pc, #12]	; (c040 <usb_serial_available+0x10>)
    c034:	ldrh	r0, [r2, #0]
    c036:	ldrh	r3, [r3, #0]
}
    c038:	subs	r0, r0, r3
    c03a:	bx	lr
    c03c:	.word	0x2000ddc8
    c040:	.word	0x2000ddc0

0000c044 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    c044:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    c046:	ldr	r3, [pc, #40]	; (c070 <usb_serial_flush_input+0x2c>)
    c048:	ldr	r4, [pc, #40]	; (c074 <usb_serial_flush_input+0x30>)
    c04a:	ldrh	r5, [r3, #0]
    c04c:	ldrh	r3, [r4, #0]
    c04e:	cmp	r3, r5
    c050:	bcc.n	c054 <usb_serial_flush_input+0x10>
    c052:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    c054:	movs	r3, #0
    c056:	ldr	r1, [pc, #32]	; (c078 <usb_serial_flush_input+0x34>)
    c058:	ldr	r0, [pc, #32]	; (c07c <usb_serial_flush_input+0x38>)
    c05a:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    c05c:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    c05e:	bl	cb3c <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    c062:	ldr	r1, [pc, #24]	; (c07c <usb_serial_flush_input+0x38>)
    c064:	movs	r0, #3
	}
}
    c066:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    c06a:	b.w	cb94 <usb_receive>
    c06e:	nop
    c070:	.word	0x2000ddc8
    c074:	.word	0x2000ddc0
    c078:	.word	0x2000dd00
    c07c:	.word	0x2000dde0

0000c080 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c080:	ldr	r3, [pc, #36]	; (c0a8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c082:	push	{lr}
    c084:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c086:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c088:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c08c:	cbnz	r3, c098 <usb_serial_putchar+0x18>
    c08e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    c092:	add	sp, #12
    c094:	ldr.w	pc, [sp], #4
    c098:	movs	r1, #1
    c09a:	add.w	r0, sp, #7
    c09e:	bl	bdac <usb_serial_write.part.1>
    c0a2:	add	sp, #12
    c0a4:	ldr.w	pc, [sp], #4
    c0a8:	.word	0x2000df70

0000c0ac <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c0ac:	ldr	r3, [pc, #16]	; (c0c0 <usb_serial_write+0x14>)
    c0ae:	ldrb	r3, [r3, #0]
    c0b0:	and.w	r2, r3, #255	; 0xff
    c0b4:	cbz	r3, c0ba <usb_serial_write+0xe>
    c0b6:	b.w	bdac <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    c0ba:	mov	r0, r2
    c0bc:	bx	lr
    c0be:	nop
    c0c0:	.word	0x2000df70

0000c0c4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c0c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0c8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    c0ca:	ldr.w	r8, [pc, #64]	; c10c <usb_serial_write_buffer_free+0x48>
    c0ce:	movs	r3, #1
    c0d0:	ldr	r5, [pc, #48]	; (c104 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    c0d2:	mov	r7, r4
    c0d4:	ldr	r6, [pc, #48]	; (c108 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    c0d6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    c0da:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c0dc:	mov	r0, r5
    c0de:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    c0e0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0e2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    c0e6:	beq.n	c0f4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c0e8:	bl	cbb8 <usb_transfer_status>
    c0ec:	lsls	r3, r0, #24
    c0ee:	it	pl
    c0f0:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0f4:	cmp	r4, #7
    c0f6:	bne.n	c0da <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    c0f8:	movs	r3, #0
	return sum;
}
    c0fa:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    c0fc:	strb.w	r3, [r8]
	return sum;
}
    c100:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c104:	.word	0x2000de60
    c108:	.word	0x2000dcfd
    c10c:	.word	0x2000dcfc

0000c110 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c110:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c112:	ldr	r3, [pc, #80]	; (c164 <usb_serial_flush_output+0x54>)
    c114:	ldrb	r3, [r3, #0]
    c116:	cbz	r3, c11e <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    c118:	ldr	r4, [pc, #76]	; (c168 <usb_serial_flush_output+0x58>)
    c11a:	ldrh	r2, [r4, #0]
    c11c:	cbnz	r2, c120 <usb_serial_flush_output+0x10>
    c11e:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c120:	ldr	r6, [pc, #72]	; (c16c <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c122:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    c126:	ldr	r5, [pc, #72]	; (c170 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c128:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c12a:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c12c:	rsb	r2, r2, #256	; 0x100
    c130:	ldr	r0, [pc, #64]	; (c174 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c132:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c136:	ldr	r7, [pc, #64]	; (c178 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c138:	add.w	r1, r0, r1, lsl #8
    c13c:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c13e:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c142:	bl	cb3c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    c146:	mov	r1, r5
    c148:	movs	r0, #4
    c14a:	bl	cb6c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c14e:	ldrb	r3, [r6, #0]
    c150:	adds	r3, #1
    c152:	uxtb	r3, r3
    c154:	cmp	r3, #6
    c156:	it	hi
    c158:	movhi	r3, #0
    c15a:	strb	r3, [r6, #0]
	tx_available = 0;
    c15c:	movs	r3, #0
    c15e:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    c160:	strb	r3, [r7, #0]
    c162:	pop	{r3, r4, r5, r6, r7, pc}
    c164:	.word	0x2000df70
    c168:	.word	0x2000de40
    c16c:	.word	0x2000dcfd
    c170:	.word	0x2000de60
    c174:	.word	0x2000d5fc
    c178:	.word	0x2000dcfc

0000c17c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c17c:	ldr	r2, [pc, #556]	; (c3ac <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c17e:	ldr	r3, [pc, #560]	; (c3b0 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c180:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    c182:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    c186:	ldr	r5, [pc, #556]	; (c3b4 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c188:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    c18a:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    c18c:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c18e:	bls.n	c1cc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    c190:	ldr	r3, [pc, #548]	; (c3b8 <set_arm_clock+0x23c>)
    c192:	cmp	r0, r3
    c194:	bls.w	c398 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    c198:	ldr	r3, [pc, #544]	; (c3bc <set_arm_clock+0x240>)
    c19a:	movw	r6, #1300	; 0x514
    c19e:	ldr.w	lr, [pc, #600]	; c3f8 <set_arm_clock+0x27c>
    c1a2:	add	r3, r0
    c1a4:	ldr	r5, [pc, #536]	; (c3c0 <set_arm_clock+0x244>)
    c1a6:	lsrs	r2, r3, #8
    c1a8:	umull	r3, r2, lr, r2
    c1ac:	lsrs	r3, r2, #7
    c1ae:	add.w	r3, r3, r3, lsl #2
    c1b2:	add.w	r2, r3, r3, lsl #2
    c1b6:	addw	r3, r2, #1250	; 0x4e2
    c1ba:	cmp	r3, r6
    c1bc:	it	cs
    c1be:	movcs	r3, r6
    c1c0:	sub.w	r3, r3, #800	; 0x320
    c1c4:	umull	r3, r6, r5, r3
    c1c8:	lsrs	r6, r6, #3
    c1ca:	b.n	c1d4 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    c1cc:	cmp	r0, #25
    c1ce:	ite	cc
    c1d0:	movcc	r6, #6
    c1d2:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1d4:	ldr	r2, [pc, #472]	; (c3b0 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1d6:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1da:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1de:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1e0:	orr.w	r3, r3, #192	; 0xc0
    c1e4:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1e8:	bcs.n	c200 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c1ea:	ldr	r3, [pc, #456]	; (c3b4 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c1ec:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c1f0:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c1f2:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    c1f4:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c1f6:	ldr	r3, [r2, #0]
    c1f8:	cmp	r3, #0
    c1fa:	bge.n	c1f6 <set_arm_clock+0x7a>
    c1fc:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    c200:	ands.w	r3, r4, #33554432	; 0x2000000
    c204:	bne.n	c264 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    c206:	ldr	r5, [pc, #444]	; (c3c4 <set_arm_clock+0x248>)
    c208:	ldr	r2, [pc, #444]	; (c3c8 <set_arm_clock+0x24c>)
    c20a:	ldr.w	ip, [r5, #16]
    c20e:	mov	r5, r2
    c210:	and.w	r2, ip, r2
    c214:	cmp	r2, r5
    c216:	itet	eq
    c218:	moveq.w	r3, #402653184	; 0x18000000
    c21c:	movne.w	r2, #4096	; 0x1000
    c220:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    c222:	eor.w	r5, r4, r3
    c226:	tst.w	r5, #939524096	; 0x38000000
    c22a:	beq.n	c23a <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    c22c:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    c230:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    c234:	ldr	r5, [pc, #376]	; (c3b0 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    c236:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    c238:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    c23a:	eor.w	r3, r1, r2
    c23e:	tst.w	r3, #12288	; 0x3000
    c242:	beq.n	c256 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    c244:	ldr	r3, [pc, #360]	; (c3b0 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    c246:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    c24a:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    c24c:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    c24e:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    c250:	ldr	r3, [r2, #72]	; 0x48
    c252:	lsls	r5, r3, #28
    c254:	bmi.n	c250 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    c256:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    c25a:	ldr	r2, [pc, #340]	; (c3b0 <set_arm_clock+0x234>)
    c25c:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c25e:	ldr	r3, [r2, #72]	; 0x48
    c260:	lsls	r1, r3, #26
    c262:	bmi.n	c25e <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    c264:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c266:	ldr	r5, [pc, #356]	; (c3cc <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    c268:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    c26a:	mul.w	r3, r1, r2
    c26e:	mul.w	r3, r0, r3
    c272:	cmp	r3, r5
    c274:	bhi.n	c28a <set_arm_clock+0x10e>
		if (div_arm < 8) {
    c276:	cmp	r2, #7
    c278:	bhi.w	c384 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    c27c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    c27e:	mul.w	r3, r1, r2
    c282:	mul.w	r3, r0, r3
    c286:	cmp	r3, r5
    c288:	bls.n	c276 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c28a:	ldr	r0, [pc, #324]	; (c3d0 <set_arm_clock+0x254>)
    c28c:	ldr	r5, [pc, #324]	; (c3d4 <set_arm_clock+0x258>)
    c28e:	add	r0, r3
    c290:	umull	r3, r0, r5, r0
    c294:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    c296:	cmp	r3, #108	; 0x6c
    c298:	bhi.n	c38e <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    c29a:	cmp	r3, #53	; 0x35
    c29c:	bhi.n	c39c <set_arm_clock+0x220>
    c29e:	ldr.w	r8, [pc, #348]	; c3fc <set_arm_clock+0x280>
    c2a2:	movs	r3, #54	; 0x36
    c2a4:	ldr	r0, [pc, #304]	; (c3d8 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c2a6:	ldr.w	ip, [pc, #284]	; c3c4 <set_arm_clock+0x248>
    c2aa:	ldr	r5, [pc, #304]	; (c3dc <set_arm_clock+0x260>)
    c2ac:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    c2b0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c2b4:	and.w	r5, r9, r5
    c2b8:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    c2ba:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c2be:	beq.n	c2d8 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    c2c0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    c2c4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    c2c8:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    c2ca:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    c2ce:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    c2d2:	ldr	r3, [r5, #0]
    c2d4:	cmp	r3, #0
    c2d6:	bge.n	c2d2 <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    c2d8:	ldr.w	ip, [pc, #212]	; c3b0 <set_arm_clock+0x234>
    c2dc:	subs	r2, #1
    c2de:	ldr.w	r3, [ip, #16]
    c2e2:	and.w	r3, r3, #7
    c2e6:	cmp	r3, r2
    c2e8:	beq.n	c2fa <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    c2ea:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    c2ee:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    c2f0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    c2f4:	ldr	r3, [r5, #72]	; 0x48
    c2f6:	lsls	r3, r3, #15
    c2f8:	bmi.n	c2f4 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c2fa:	subs	r1, #1
    c2fc:	lsls	r1, r1, #10
    c2fe:	eor.w	r3, r4, r1
    c302:	tst.w	r3, #7168	; 0x1c00
    c306:	beq.n	c31e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    c308:	ldr	r3, [pc, #164]	; (c3b0 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    c30a:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c30e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    c312:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c314:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    c316:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    c318:	ldr	r3, [r2, #72]	; 0x48
    c31a:	lsls	r1, r3, #30
    c31c:	bmi.n	c318 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    c31e:	ldr	r3, [pc, #192]	; (c3e0 <set_arm_clock+0x264>)
    c320:	ldr	r1, [pc, #192]	; (c3e4 <set_arm_clock+0x268>)
    c322:	add	r3, r0
    c324:	lsrs	r3, r3, #7
    c326:	umull	r3, r1, r1, r3
    c32a:	lsrs	r1, r1, #12
    c32c:	cmp	r1, #4
    c32e:	it	cs
    c330:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    c332:	subs	r3, r1, #1
    c334:	lsls	r3, r3, #8
    c336:	eor.w	r2, r4, r3
    c33a:	tst.w	r2, #768	; 0x300
    c33e:	beq.n	c34e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    c340:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c344:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    c348:	ldr	r2, [pc, #100]	; (c3b0 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c34a:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    c34c:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    c34e:	ldr	r3, [pc, #96]	; (c3b0 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    c350:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c354:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    c356:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c358:	ldr	r3, [r2, #72]	; 0x48
    c35a:	lsls	r3, r3, #26
    c35c:	bmi.n	c358 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    c35e:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    c362:	ldr	r2, [pc, #132]	; (c3e8 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c364:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    c366:	ldr	r3, [pc, #132]	; (c3ec <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    c368:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    c36a:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c36c:	bcs.n	c380 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c36e:	ldr	r3, [pc, #68]	; (c3b4 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c370:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c374:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c376:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    c378:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c37a:	ldr	r3, [r2, #0]
    c37c:	cmp	r3, #0
    c37e:	bge.n	c37a <set_arm_clock+0x1fe>
	}

	return frequency;
}
    c380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    c384:	cmp	r1, #4
    c386:	bhi.n	c28a <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    c388:	adds	r1, #1
				div_arm = 1;
    c38a:	movs	r2, #1
    c38c:	b.n	c26a <set_arm_clock+0xee>
    c38e:	ldr.w	r8, [pc, #112]	; c400 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    c392:	movs	r3, #108	; 0x6c
    c394:	ldr	r0, [pc, #88]	; (c3f0 <set_arm_clock+0x274>)
    c396:	b.n	c2a6 <set_arm_clock+0x12a>
    c398:	movs	r6, #18
    c39a:	b.n	c1d4 <set_arm_clock+0x58>
    c39c:	ldr	r0, [pc, #84]	; (c3f4 <set_arm_clock+0x278>)
    c39e:	ldr.w	r8, [pc, #100]	; c404 <set_arm_clock+0x288>
    c3a2:	mul.w	r0, r0, r3
    c3a6:	orr.w	r8, r3, r8
    c3aa:	b.n	c2a6 <set_arm_clock+0x12a>
    c3ac:	.word	0x1f78a400
    c3b0:	.word	0x400fc000
    c3b4:	.word	0x40080000
    c3b8:	.word	0x23c34600
    c3bc:	.word	0xdc3cba00
    c3c0:	.word	0x51eb851f
    c3c4:	.word	0x400d8000
    c3c8:	.word	0x80003040
    c3cc:	.word	0x269fb1ff
    c3d0:	.word	0x005b8d80
    c3d4:	.word	0x165e9f81
    c3d8:	.word	0x269fb200
    c3dc:	.word	0x8001307f
    c3e0:	.word	0x08f0d17f
    c3e4:	.word	0x00e5109f
    c3e8:	.word	0x20000df4
    c3ec:	.word	0x20000df0
    c3f0:	.word	0x4d3f6400
    c3f4:	.word	0x00b71b00
    c3f8:	.word	0x004cb223
    c3fc:	.word	0x80002036
    c400:	.word	0x8000206c
    c404:	.word	0x80002000

0000c408 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    c408:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    c40a:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    c40c:	cbz	r3, c416 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    c40e:	ldr	r3, [r2, #4]
    c410:	orr.w	r3, r3, #32768	; 0x8000
    c414:	str	r3, [r2, #4]
	}
	__disable_irq();
    c416:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    c418:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    c41a:	cbz	r4, c444 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    c41c:	ldr	r3, [pc, #64]	; (c460 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    c41e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    c420:	ldr.w	r4, [r3, #432]	; 0x1b0
    c424:	tst	r4, r1
    c426:	bne.n	c458 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    c428:	ldr.w	r4, [r3, #320]	; 0x140
    c42c:	orr.w	r4, r4, #16384	; 0x4000
    c430:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    c434:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    c438:	ldr.w	r4, [r3, #320]	; 0x140
    c43c:	lsls	r4, r4, #17
    c43e:	bpl.n	c428 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    c440:	tst	r1, r5
    c442:	bne.n	c458 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    c444:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    c446:	ldr	r4, [pc, #24]	; (c460 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    c448:	str	r2, [r0, #8]
	endpoint->status = 0;
    c44a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    c44c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c450:	orrs	r1, r3
    c452:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    c456:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    c458:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    c45a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    c45c:	pop	{r4, r5}
    c45e:	bx	lr
    c460:	.word	0x402e0000

0000c464 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    c464:	push	{r3, r4, r5, lr}
    c466:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    c468:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    c46a:	b.n	c47a <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    c46c:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    c46e:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    c470:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    c472:	ldr	r2, [r5, #52]	; 0x34
    c474:	mov	r3, r4
    c476:	cmp	r4, r2
    c478:	beq.n	c48c <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    c47a:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    c47c:	cbz	r3, c48c <run_callbacks+0x28>
    c47e:	cmp	r3, #1
    c480:	beq.n	c48c <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    c482:	ldr	r2, [r3, #4]
    c484:	lsls	r2, r2, #24
    c486:	bpl.n	c46c <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    c488:	str	r3, [r5, #48]	; 0x30
			return;
    c48a:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    c48c:	movs	r3, #0
    c48e:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    c490:	str	r3, [r5, #52]	; 0x34
    c492:	pop	{r3, r4, r5, pc}

0000c494 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    c494:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    c496:	cbnz	r1, c4ca <endpoint0_transmit.constprop.0+0x36>
    c498:	ldr	r4, [pc, #124]	; (c518 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c49a:	ldr	r3, [pc, #128]	; (c51c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    c49c:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c49e:	ldr	r0, [pc, #128]	; (c520 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c4a0:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c4a2:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c4a4:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c4a6:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    c4a8:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c4aa:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    c4ac:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    c4ae:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c4b2:	ldr	r5, [pc, #112]	; (c524 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c4b4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    c4b8:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c4ba:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c4be:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    c4c0:	ldr.w	r3, [r2, #432]	; 0x1b0
    c4c4:	cmp	r3, #0
    c4c6:	bne.n	c4c0 <endpoint0_transmit.constprop.0+0x2c>
}
    c4c8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4ca:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4cc:	ldr	r3, [pc, #88]	; (c528 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4ce:	ldr	r5, [pc, #80]	; (c520 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4d0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c4d2:	ldr	r4, [pc, #68]	; (c518 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4d4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    c4d8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4da:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4dc:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c4de:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    c4e2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c4e4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c4e8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c4ea:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4ee:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c4f2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    c4f6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c4f8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4fa:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c4fe:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c502:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c506:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c508:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c50a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    c50e:	ldr.w	r3, [r2, #432]	; 0x1b0
    c512:	cmp	r3, #0
    c514:	bne.n	c50e <endpoint0_transmit.constprop.0+0x7a>
    c516:	b.n	c49a <endpoint0_transmit.constprop.0+0x6>
    c518:	.word	0x20010000
    c51c:	.word	0x2000f020
    c520:	.word	0x402e0000
    c524:	.word	0x2000df50
    c528:	.word	0x2000f000

0000c52c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    c52c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    c530:	ldr	r4, [pc, #696]	; (c7ec <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    c532:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    c534:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    c538:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    c53c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    c540:	beq.n	c600 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    c542:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c546:	cmp	r3, #0
    c548:	beq.n	c5f6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c54a:	mov.w	r9, #65537	; 0x10001
    c54e:	ldr.w	fp, [pc, #700]	; c80c <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    c552:	mov	r6, r4
    c554:	ldr	r7, [pc, #664]	; (c7f0 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c556:	mov	sl, r9
    c558:	ldr	r1, [r7, #40]	; 0x28
    c55a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    c55c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    c560:	ldr.w	r3, [r4, #320]	; 0x140
    c564:	orr.w	r3, r3, #8192	; 0x2000
    c568:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    c56c:	ldr.w	r3, [r4, #320]	; 0x140
    c570:	lsls	r5, r3, #18
    c572:	bpl.n	c560 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    c574:	ldr.w	r3, [r6, #320]	; 0x140
    c578:	bic.w	r3, r3, #8192	; 0x2000
    c57c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c580:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    c584:	ldr.w	r3, [r4, #436]	; 0x1b4
    c588:	ands.w	r3, r3, #65537	; 0x10001
    c58c:	bne.n	c584 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c58e:	uxth	r0, r1
    c590:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    c594:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c598:	cmp	r0, r5
    c59a:	bhi.w	c6be <isr+0x192>
    c59e:	cmp.w	r0, #1664	; 0x680
    c5a2:	bcs.w	c908 <isr+0x3dc>
    c5a6:	cmp.w	r0, #258	; 0x102
    c5aa:	beq.w	c828 <isr+0x2fc>
    c5ae:	bhi.w	c744 <isr+0x218>
    c5b2:	cmp	r0, #128	; 0x80
    c5b4:	beq.w	c7d2 <isr+0x2a6>
    c5b8:	cmp	r0, #130	; 0x82
    c5ba:	bne.w	c734 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c5be:	uxth	r2, r2
    c5c0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c5c4:	cmp	r1, #7
    c5c6:	bhi.w	c734 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c5ca:	lsls	r1, r1, #2
    c5cc:	ldr	r0, [pc, #548]	; (c7f4 <isr+0x2c8>)
		reply_buffer[0] = 0;
    c5ce:	ldr	r5, [pc, #552]	; (c7f8 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c5d0:	add	r0, r1
    c5d2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c5d4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    c5d6:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    c5d8:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c5da:	bpl.w	c95a <isr+0x42e>
    c5de:	lsls	r2, r1, #15
    c5e0:	bpl.n	c5e6 <isr+0xba>
			reply_buffer[0] = 1;
    c5e2:	movs	r3, #1
    c5e4:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    c5e6:	movs	r1, #2
    c5e8:	ldr	r0, [pc, #524]	; (c7f8 <isr+0x2cc>)
    c5ea:	bl	c494 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c5ee:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c5f2:	cmp	r3, #0
    c5f4:	bne.n	c558 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    c5f6:	ldr	r2, [pc, #500]	; (c7ec <isr+0x2c0>)
    c5f8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    c5fc:	cmp	r3, #0
    c5fe:	bne.n	c68a <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    c600:	tst.w	r8, #64	; 0x40
    c604:	beq.n	c638 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    c606:	ldr	r3, [pc, #484]	; (c7ec <isr+0x2c0>)
    c608:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    c60c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    c60e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    c612:	ldr.w	r1, [r3, #444]	; 0x1bc
    c616:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    c61a:	ldr.w	r4, [r2, #432]	; 0x1b0
    c61e:	ldr	r3, [pc, #460]	; (c7ec <isr+0x2c0>)
    c620:	cmp	r4, #0
    c622:	bne.n	c61a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    c624:	mov.w	r2, #4294967295
    c628:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    c62c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    c630:	bl	bf08 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    c634:	ldr	r3, [pc, #452]	; (c7fc <isr+0x2d0>)
    c636:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    c638:	tst.w	r8, #16777216	; 0x1000000
    c63c:	beq.n	c646 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    c63e:	ldr	r3, [pc, #448]	; (c800 <isr+0x2d4>)
    c640:	ldr	r3, [r3, #0]
    c642:	cbz	r3, c646 <isr+0x11a>
    c644:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    c646:	tst.w	r8, #33554432	; 0x2000000
    c64a:	beq.n	c654 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    c64c:	ldr	r3, [pc, #436]	; (c804 <isr+0x2d8>)
    c64e:	ldr	r3, [r3, #0]
    c650:	cbz	r3, c654 <isr+0x128>
    c652:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    c654:	tst.w	r8, #4
    c658:	beq.n	c660 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    c65a:	ldr	r3, [pc, #400]	; (c7ec <isr+0x2c0>)
    c65c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    c660:	ldr	r3, [pc, #392]	; (c7ec <isr+0x2c0>)
    c662:	ldr.w	r2, [r3, #328]	; 0x148
    c666:	lsls	r2, r2, #24
    c668:	bpl.n	c684 <isr+0x158>
    c66a:	tst.w	r8, #128	; 0x80
    c66e:	beq.n	c684 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    c670:	ldr	r1, [pc, #404]	; (c808 <isr+0x2dc>)
    c672:	ldrb	r2, [r1, #0]
    c674:	cmp	r2, #0
    c676:	beq.w	c948 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    c67a:	subs	r3, r2, #1
    c67c:	uxtb	r3, r3
    c67e:	strb	r3, [r1, #0]
    c680:	cbnz	r3, c684 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    c682:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    c684:	add	sp, #12
    c686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    c68a:	ldr	r1, [pc, #384]	; (c80c <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    c68c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    c690:	ldr	r0, [r1, #0]
    c692:	tst	r3, r0
    c694:	bne.w	c9d6 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    c698:	ldr	r2, [pc, #352]	; (c7fc <isr+0x2d0>)
    c69a:	ldr	r4, [r2, #0]
			if (completestatus) {
    c69c:	ands	r4, r3
    c69e:	beq.n	c600 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    c6a0:	lsls	r6, r4, #29
    c6a2:	bmi.w	ca10 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    c6a6:	lsls	r5, r4, #13
    c6a8:	bmi.w	ca20 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    c6ac:	lsls	r0, r4, #28
    c6ae:	bmi.w	ca18 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    c6b2:	lsls	r1, r4, #12
    c6b4:	bpl.n	c600 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    c6b6:	ldr	r0, [pc, #344]	; (c810 <isr+0x2e4>)
    c6b8:	bl	c464 <run_callbacks>
    c6bc:	b.n	c600 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c6be:	movw	r5, #8225	; 0x2021
    c6c2:	cmp	r0, r5
    c6c4:	beq.n	c72c <isr+0x200>
    c6c6:	bhi.n	c790 <isr+0x264>
    c6c8:	cmp.w	r0, #2176	; 0x880
    c6cc:	beq.w	c8ec <isr+0x3c0>
    c6d0:	cmp.w	r0, #2304	; 0x900
    c6d4:	bne.n	c734 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    c6d6:	ubfx	r1, r1, #16, #8
    c6da:	ldr	r2, [pc, #312]	; (c814 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c6dc:	ldr	r0, [pc, #312]	; (c818 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    c6de:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c6e0:	ldr	r1, [pc, #312]	; (c81c <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c6e2:	ldr	r2, [pc, #316]	; (c820 <isr+0x2f4>)
    c6e4:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c6e6:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c6ea:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c6ee:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    c6f2:	bl	bf0c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c6f6:	ldr	r2, [pc, #300]	; (c824 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c6f8:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c6fa:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c6fc:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    c6fe:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c700:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c702:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c704:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c708:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c70a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c70c:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c710:	ldr	r2, [pc, #248]	; (c80c <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c712:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c716:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    c718:	ldr.w	r3, [r4, #432]	; 0x1b0
    c71c:	cmp	r3, #0
    c71e:	bne.n	c718 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c720:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c724:	cmp	r3, #0
    c726:	bne.w	c558 <isr+0x2c>
    c72a:	b.n	c5f6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    c72c:	lsrs	r0, r2, #16
    c72e:	cmp	r0, #7
    c730:	beq.w	c962 <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    c734:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c738:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c73c:	cmp	r3, #0
    c73e:	bne.w	c558 <isr+0x2c>
    c742:	b.n	c5f6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c744:	movw	r5, #770	; 0x302
    c748:	cmp	r0, r5
    c74a:	beq.w	c892 <isr+0x366>
    c74e:	cmp.w	r0, #1280	; 0x500
    c752:	bne.n	c734 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c754:	ldr	r2, [pc, #204]	; (c824 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    c756:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c758:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c75a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c75c:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c75e:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c760:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c764:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c766:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c76a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c76c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c770:	ldr.w	r3, [r4, #432]	; 0x1b0
    c774:	cmp	r3, #0
    c776:	bne.n	c770 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    c778:	lsrs	r3, r1, #16
    c77a:	lsls	r3, r3, #25
    c77c:	orr.w	r3, r3, #16777216	; 0x1000000
    c780:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c784:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c788:	cmp	r3, #0
    c78a:	bne.w	c558 <isr+0x2c>
    c78e:	b.n	c5f6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c790:	movw	r3, #8737	; 0x2221
    c794:	cmp	r0, r3
    c796:	beq.n	c880 <isr+0x354>
    c798:	movw	r3, #8993	; 0x2321
    c79c:	cmp	r0, r3
    c79e:	bne.n	c734 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c7a0:	ldr	r3, [pc, #128]	; (c824 <isr+0x2f8>)
    c7a2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    c7a4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c7a6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c7a8:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c7aa:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c7ac:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c7b0:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c7b2:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c7b6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c7b8:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c7ba:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c7be:	ldr.w	r3, [r4, #432]	; 0x1b0
    c7c2:	cmp	r3, #0
    c7c4:	bne.n	c7be <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c7c6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c7ca:	cmp	r3, #0
    c7cc:	bne.w	c558 <isr+0x2c>
    c7d0:	b.n	c5f6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c7d2:	ldr	r2, [pc, #36]	; (c7f8 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    c7d4:	movs	r1, #2
    c7d6:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c7d8:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    c7da:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    c7dc:	bl	c494 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c7e0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c7e4:	cmp	r3, #0
    c7e6:	bne.w	c558 <isr+0x2c>
    c7ea:	b.n	c5f6 <isr+0xca>
    c7ec:	.word	0x402e0000
    c7f0:	.word	0x20010000
    c7f4:	.word	0x402e01c0
    c7f8:	.word	0x2000df60
    c7fc:	.word	0x2000df48
    c800:	.word	0x2000df44
    c804:	.word	0x2000df4c
    c808:	.word	0x2000df54
    c80c:	.word	0x2000df50
    c810:	.word	0x200101c0
    c814:	.word	0x2000df70
    c818:	.word	0x00cc0002
    c81c:	.word	0x000200c8
    c820:	.word	0x00c80002
    c824:	.word	0x2000f020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c828:	uxth	r2, r2
    c82a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c82e:	cmp	r3, #7
    c830:	bhi.n	c734 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    c832:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c836:	mov.w	r3, r3, lsl #2
    c83a:	ldr	r2, [pc, #492]	; (ca28 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c83c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c840:	add	r2, r3
    c842:	ldr	r3, [r2, #0]
    c844:	ite	ne
    c846:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c84a:	biceq.w	r3, r3, #1
    c84e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c850:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c852:	ldr	r3, [pc, #472]	; (ca2c <isr+0x500>)
    c854:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c856:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c858:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c85a:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c85e:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c860:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c864:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c866:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c868:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c86c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c870:	cmp	r3, #0
    c872:	bne.n	c86c <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c874:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c878:	cmp	r3, #0
    c87a:	bne.w	c558 <isr+0x2c>
    c87e:	b.n	c5f6 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c880:	ldr	r3, [pc, #428]	; (ca30 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    c882:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c886:	ldr	r2, [pc, #428]	; (ca34 <isr+0x508>)
    c888:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    c88a:	ldr	r3, [pc, #428]	; (ca38 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c88c:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    c88e:	strb	r1, [r3, #0]
    c890:	b.n	c7a0 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c892:	uxth	r2, r2
    c894:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c898:	cmp	r3, #7
    c89a:	bhi.w	c734 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    c89e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c8a2:	mov.w	r3, r3, lsl #2
    c8a6:	ldr	r2, [pc, #384]	; (ca28 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c8a8:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c8ac:	add	r2, r3
    c8ae:	ldr	r3, [r2, #0]
    c8b0:	ite	ne
    c8b2:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    c8b6:	orreq.w	r3, r3, #1
    c8ba:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c8bc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c8be:	ldr	r3, [pc, #364]	; (ca2c <isr+0x500>)
    c8c0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c8c2:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c8c4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c8c6:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c8ca:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c8cc:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c8d0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c8d2:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c8d4:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c8d8:	ldr.w	r3, [r4, #432]	; 0x1b0
    c8dc:	cmp	r3, #0
    c8de:	bne.n	c8d8 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c8e0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c8e4:	cmp	r3, #0
    c8e6:	bne.w	c558 <isr+0x2c>
    c8ea:	b.n	c5f6 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8ec:	ldr	r2, [pc, #332]	; (ca3c <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    c8ee:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8f0:	ldr	r3, [pc, #332]	; (ca40 <isr+0x514>)
    c8f2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c8f4:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8f6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c8f8:	bl	c494 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c8fc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c900:	cmp	r3, #0
    c902:	bne.w	c558 <isr+0x2c>
    c906:	b.n	c5f6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c908:	ldr	r3, [pc, #312]	; (ca44 <isr+0x518>)
    c90a:	ldr	r0, [r3, #4]
    c90c:	cmp	r0, #0
    c90e:	beq.w	c734 <isr+0x208>
    c912:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c914:	uxth.w	lr, r2
    c918:	b.n	c924 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c91a:	adds	r3, #12
    c91c:	ldr	r0, [r3, #4]
    c91e:	cmp	r0, #0
    c920:	beq.w	c734 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c924:	ldrh	r5, [r3, #0]
    c926:	cmp	r5, r1
    c928:	bne.n	c91a <isr+0x3ee>
    c92a:	ldrh	r5, [r3, #2]
    c92c:	cmp	r5, lr
    c92e:	bne.n	c91a <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    c930:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    c932:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    c934:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    c936:	ite	eq
    c938:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    c93a:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    c93c:	cmp	r1, r2
    c93e:	it	cs
    c940:	movcs	r1, r2
    c942:	bl	c494 <endpoint0_transmit.constprop.0>
    c946:	b.n	c5ee <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    c948:	ldr.w	r2, [r3, #328]	; 0x148
    c94c:	bic.w	r2, r2, #128	; 0x80
    c950:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    c954:	add	sp, #12
    c956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c95a:	lsls	r3, r1, #31
    c95c:	bpl.w	c5e6 <isr+0xba>
    c960:	b.n	c5e2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c962:	ldr	r5, [pc, #228]	; (ca48 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c964:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    c966:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c968:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c96a:	ldr	r3, [pc, #224]	; (ca4c <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    c96c:	ldr	r1, [pc, #224]	; (ca50 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c96e:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    c970:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c972:	ldr	r1, [pc, #224]	; (ca54 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c974:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c978:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c97a:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c97e:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c982:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c986:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    c98a:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c98c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c98e:	sub.w	r0, r1, #4096	; 0x1000
    c992:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c994:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c998:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c99a:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c99c:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    c9a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    c9a4:	cmp	r3, #0
    c9a6:	bne.n	c9a0 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    c9a8:	ldr	r2, [pc, #128]	; (ca2c <isr+0x500>)
    c9aa:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    c9ac:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c9ae:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c9b0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c9b2:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c9b6:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9b8:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c9bc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9be:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c9c2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9c4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c9c8:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    c9cc:	ldr.w	r3, [r4, #432]	; 0x1b0
    c9d0:	cmp	r3, #0
    c9d2:	bne.n	c9cc <isr+0x4a0>
    c9d4:	b.n	c5ee <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    c9d6:	ldr	r4, [pc, #112]	; (ca48 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9d8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    c9dc:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9de:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    c9e0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9e2:	cmp	r4, r0
    c9e4:	bne.w	c698 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c9e8:	ldr	r1, [pc, #108]	; (ca58 <isr+0x52c>)
    c9ea:	ldr	r4, [pc, #112]	; (ca5c <isr+0x530>)
    c9ec:	ldmia	r1, {r0, r1}
    c9ee:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    c9f0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c9f2:	str	r0, [r4, #0]
    c9f4:	strh	r1, [r4, #4]
    c9f6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    c9f8:	bne.w	c698 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    c9fc:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ca00:	movs	r4, #80	; 0x50
    ca02:	ldr	r0, [pc, #92]	; (ca60 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    ca04:	orr.w	r1, r1, #128	; 0x80
    ca08:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ca0c:	strb	r4, [r0, #0]
    ca0e:	b.n	c698 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    ca10:	ldr	r0, [pc, #80]	; (ca64 <isr+0x538>)
    ca12:	bl	c464 <run_callbacks>
    ca16:	b.n	c6a6 <isr+0x17a>
    ca18:	ldr	r0, [pc, #76]	; (ca68 <isr+0x53c>)
    ca1a:	bl	c464 <run_callbacks>
    ca1e:	b.n	c6b2 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    ca20:	ldr	r0, [pc, #72]	; (ca6c <isr+0x540>)
    ca22:	bl	c464 <run_callbacks>
    ca26:	b.n	c6ac <isr+0x180>
    ca28:	.word	0x402e01c0
    ca2c:	.word	0x2000f020
    ca30:	.word	0x2000df98
    ca34:	.word	0x2000e82c
    ca38:	.word	0x2000df41
    ca3c:	.word	0x2000df70
    ca40:	.word	0x2000df60
    ca44:	.word	0x20000840
    ca48:	.word	0x2000df58
    ca4c:	.word	0x2000f000
    ca50:	.word	0x00078080
    ca54:	.word	0x2000ff68
    ca58:	.word	0x2000df68
    ca5c:	.word	0x2000e824
    ca60:	.word	0x2000df54
    ca64:	.word	0x20010100
    ca68:	.word	0x20010180
    ca6c:	.word	0x20010140

0000ca70 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca70:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ca72:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ca76:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca7a:	ite	ne
    ca7c:	movne	r7, #0
    ca7e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ca82:	cmp	r2, #2
    ca84:	bls.n	ca8a <usb_config_rx+0x1a>
    ca86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ca8a:	mov.w	sl, r0, lsl #7
    ca8e:	ldr.w	r9, [pc, #64]	; cad0 <usb_config_rx+0x60>
    ca92:	mov	r5, r1
    ca94:	mov	r4, r0
    ca96:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ca9a:	movs	r1, #0
    ca9c:	movs	r2, #64	; 0x40
    ca9e:	mov	r8, r3
    caa0:	mov	r0, r6
    caa2:	bl	ebbc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    caa6:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    caa8:	orr.w	r1, r7, r5, lsl #16
    caac:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    cab0:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    cab4:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    cab6:	cmp.w	r8, #0
    caba:	beq.n	ca86 <usb_config_rx+0x16>
    cabc:	ldr	r3, [pc, #12]	; (cacc <usb_config_rx+0x5c>)
    cabe:	lsls	r0, r4
    cac0:	ldr	r4, [r3, #0]
    cac2:	orrs	r0, r4
    cac4:	str	r0, [r3, #0]
    cac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caca:	nop
    cacc:	.word	0x2000df48
    cad0:	.word	0x20010000

0000cad4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cad4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cad6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    cada:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cade:	ite	ne
    cae0:	movne	r7, #0
    cae2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cae6:	cmp	r2, #2
    cae8:	bls.n	caee <usb_config_tx+0x1a>
    caea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    caee:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    caf0:	lsls	r5, r0, #7
    caf2:	ldr.w	r9, [pc, #68]	; cb38 <usb_config_tx+0x64>
    caf6:	mov	r8, r1
    caf8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    cafa:	movs	r1, #0
    cafc:	mov	r4, r0
    cafe:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cb00:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    cb04:	mov	r0, sl
    cb06:	bl	ebbc <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    cb0a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    cb0c:	orr.w	r1, r7, r8, lsl #16
    cb10:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    cb14:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    cb18:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    cb1c:	cmp	r6, #0
    cb1e:	beq.n	caea <usb_config_tx+0x16>
    cb20:	add.w	r0, r4, #16
    cb24:	ldr	r3, [pc, #12]	; (cb34 <usb_config_tx+0x60>)
    cb26:	lsls	r2, r0
    cb28:	ldr	r0, [r3, #0]
    cb2a:	orrs	r2, r0
    cb2c:	str	r2, [r3, #0]
    cb2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb32:	nop
    cb34:	.word	0x2000df48
    cb38:	.word	0x20010000

0000cb3c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb3c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    cb3e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    cb40:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb42:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    cb46:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb48:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    cb4a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    cb4c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    cb50:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    cb54:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    cb58:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    cb5c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    cb5e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    cb60:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    cb62:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    cb64:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    cb66:	pop	{r4, r5, r6, r7}
    cb68:	bx	lr
    cb6a:	nop

0000cb6c <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cb6c:	subs	r3, r0, #2
    cb6e:	cmp	r3, #2
    cb70:	bls.n	cb74 <usb_transmit+0x8>
    cb72:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    cb74:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    cb76:	ldr	r3, [pc, #24]	; (cb90 <usb_transmit+0x24>)
    cb78:	add.w	r4, r0, #16
    cb7c:	movs	r5, #1
    cb7e:	mov	r2, r1
    cb80:	add.w	r0, r3, r0, lsl #7
    cb84:	lsl.w	r1, r5, r4
}
    cb88:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    cb8a:	b.w	c408 <schedule_transfer>
    cb8e:	nop
    cb90:	.word	0x20010040

0000cb94 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cb94:	subs	r3, r0, #2
    cb96:	cmp	r3, #2
    cb98:	bls.n	cb9c <usb_receive+0x8>
    cb9a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    cb9c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    cb9e:	ldr	r3, [pc, #20]	; (cbb4 <usb_receive+0x20>)
    cba0:	movs	r4, #1
    cba2:	mov	r2, r1
    cba4:	lsl.w	r1, r4, r0
    cba8:	add.w	r0, r3, r0, lsl #7
}
    cbac:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    cbb0:	b.w	c408 <schedule_transfer>
    cbb4:	.word	0x20010000

0000cbb8 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    cbb8:	ldr	r2, [pc, #32]	; (cbdc <usb_transfer_status+0x24>)
    cbba:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    cbbe:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    cbc0:	orr.w	r3, r3, #16384	; 0x4000
    cbc4:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    cbc8:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    cbca:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    cbce:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    cbd0:	tst.w	r3, #16384	; 0x4000
    cbd4:	beq.n	cbbe <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    cbd6:	mov	r0, r1
    cbd8:	bx	lr
    cbda:	nop
    cbdc:	.word	0x402e0000

0000cbe0 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    cbe0:	ldr	r3, [pc, #36]	; (cc08 <rtc_set+0x28>)
    cbe2:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    cbe4:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    cbe6:	bic.w	r2, r2, #1
    cbea:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    cbec:	ldr	r3, [r1, #8]
    cbee:	ldr	r2, [pc, #24]	; (cc08 <rtc_set+0x28>)
    cbf0:	lsls	r3, r3, #31
    cbf2:	bmi.n	cbec <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    cbf4:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    cbf6:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    cbf8:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    cbfa:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    cbfc:	ldr	r3, [r2, #8]
    cbfe:	orr.w	r3, r3, #1
    cc02:	str	r3, [r2, #8]
    cc04:	bx	lr
    cc06:	nop
    cc08:	.word	0x400d4000

0000cc0c <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cc0c:	ldr	r3, [pc, #84]	; (cc64 <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    cc0e:	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    cc10:	movs	r1, #1
    cc12:	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    cc14:	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cc16:	ldr	r7, [pc, #80]	; (cc68 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    cc18:	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    cc1a:	ldr	r5, [pc, #80]	; (cc6c <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    cc1c:	ldr	r4, [pc, #80]	; (cc70 <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cc1e:	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    cc22:	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    cc26:	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    cc2a:	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    cc2e:	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cc32:	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    cc36:	ldr	r3, [r2, #20]
    cc38:	lsls	r0, r3, #31
    cc3a:	bmi.n	cc44 <flash_wait+0x38>
			asm("nop");
    cc3c:	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    cc3e:	ldr	r3, [r2, #20]
    cc40:	lsls	r3, r3, #31
    cc42:	bpl.n	cc3c <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc44:	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cc46:	ldr	r0, [pc, #28]	; (cc64 <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc48:	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cc4a:	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc4c:	bmi.n	cc26 <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    cc4e:	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    cc50:	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    cc52:	orr.w	r3, r3, #1
    cc56:	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    cc58:	ldr	r3, [r2, #0]
    cc5a:	lsls	r3, r3, #31
    cc5c:	bmi.n	cc58 <flash_wait+0x4c>
	__enable_irq();
    cc5e:	cpsie	i
}
    cc60:	pop	{r4, r5, r6, r7}
    cc62:	bx	lr
    cc64:	.word	0x402a8000
    cc68:	.word	0x24010405
    cc6c:	.word	0x000f0001
    cc70:	.word	0x402a8100

0000cc74 <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    cc74:	push	{r3, r4, r5, r6, r7, lr}
    cc76:	mov	r5, r1
{
	__disable_irq();
    cc78:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc7a:	ldr	r2, [pc, #176]	; (cd2c <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    cc7c:	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc7e:	ldr	r6, [pc, #176]	; (cd30 <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cc80:	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cc82:	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cc86:	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc8a:	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cc8c:	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cc8e:	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cc90:	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    cc94:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cc98:	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    cc9c:	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    cc9e:	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    cca2:	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    cca6:	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ccaa:	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ccae:	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    ccb2:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    ccb6:	ldr	r2, [pc, #124]	; (cd34 <flash_write.constprop.0+0xc0>)
    ccb8:	str	r3, [r2, #0]
		location += 32;
    ccba:	adds	r3, #32
	} while (location < end_addr);
    ccbc:	cmp	r1, r3
    ccbe:	bhi.n	ccb8 <flash_write.constprop.0+0x44>
	asm("dsb");
    ccc0:	dsb	sy
	asm("isb");
    ccc4:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ccc8:	ldr	r2, [pc, #96]	; (cd2c <flash_write.constprop.0+0xb8>)
    ccca:	ldr	r3, [r2, #20]
    cccc:	ldr	r1, [pc, #92]	; (cd2c <flash_write.constprop.0+0xb8>)
    ccce:	lsls	r7, r3, #31
    ccd0:	bpl.n	ccca <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ccd2:	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    ccd4:	ldr	r2, [pc, #96]	; (cd38 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    ccd6:	ubfx	r0, r0, #0, #21
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    ccda:	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    ccde:	ldr	r6, [pc, #92]	; (cd3c <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    cce0:	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cce2:	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    cce4:	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cce8:	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    ccea:	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    ccee:	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    ccf2:	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    ccf6:	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ccfa:	str.w	r3, [r1, #176]	; 0xb0
    ccfe:	b.n	cd04 <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    cd00:	lsls	r6, r3, #25
    cd02:	bmi.n	cd18 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    cd04:	ldr	r3, [r4, #20]
    cd06:	ldr	r1, [pc, #36]	; (cd2c <flash_write.constprop.0+0xb8>)
    cd08:	lsls	r0, r3, #31
    cd0a:	bpl.n	cd00 <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    cd0c:	movs	r3, #65	; 0x41
    cd0e:	str	r3, [r1, #20]
	flash_wait();
}
    cd10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    cd14:	b.w	cc0c <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    cd18:	cbz	r2, cd24 <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    cd1a:	mov	r1, r5
    cd1c:	ldr	r0, [pc, #32]	; (cd40 <flash_write.constprop.0+0xcc>)
				src += wrlen;
    cd1e:	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    cd20:	bl	bbe0 <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    cd24:	movs	r3, #64	; 0x40
    cd26:	movs	r2, #0
    cd28:	str	r3, [r4, #20]
    cd2a:	b.n	cd04 <flash_write.constprop.0+0x90>
    cd2c:	.word	0x402a8000
    cd30:	.word	0x5af05af0
    cd34:	.word	0xe000ef5c
    cd38:	.word	0x08180432
    cd3c:	.word	0x000f0002
    cd40:	.word	0x402a8180

0000cd44 <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    cd44:	push	{r4, r5, r6, r7}
    cd46:	ldr	r6, [pc, #56]	; (cd80 <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd48:	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    cd4c:	ldr	r4, [pc, #52]	; (cd84 <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    cd4e:	ldr	r7, [pc, #56]	; (cd88 <eeprom_initialize+0x44>)
    cd50:	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    cd54:	movs	r2, #0
    cd56:	b.n	cd5e <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    cd58:	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    cd5a:	uxth	r2, r0
		} while (p < end);
    cd5c:	bls.n	cd68 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd5e:	ldrh.w	r1, [r3], #2
			index++;
    cd62:	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd64:	cmp	r1, r5
    cd66:	bne.n	cd58 <eeprom_initialize+0x14>
    cd68:	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    cd6c:	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    cd70:	cmp	r4, r7
    cd72:	bne.n	cd50 <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    cd74:	ldr	r3, [pc, #20]	; (cd8c <eeprom_initialize+0x48>)
    cd76:	movs	r2, #1
    cd78:	strb	r2, [r3, #0]
}
    cd7a:	pop	{r4, r5, r6, r7}
    cd7c:	bx	lr
    cd7e:	nop
    cd80:	.word	0x2000df72
    cd84:	.word	0x601f1000
    cd88:	.word	0x60200000
    cd8c:	.word	0x2000df92

0000cd90 <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    cd90:	cmp.w	r0, #1080	; 0x438
    cd94:	bcc.n	cd9a <eeprom_read_byte+0xa>
    cd96:	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    cd98:	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cd9a:	ldr	r3, [pc, #84]	; (cdf0 <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    cd9c:	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cd9e:	ldrb	r3, [r3, #0]
    cda0:	mov	r4, r0
    cda2:	cbz	r3, cde6 <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    cda4:	lsrs	r5, r4, #2
    cda6:	ldr	r1, [pc, #76]	; (cdf4 <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cda8:	ldr	r3, [pc, #76]	; (cdf8 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    cdaa:	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    cdae:	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    cdb2:	ldr	r4, [pc, #72]	; (cdfc <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    cdb4:	lsrs	r1, r1, #3
    cdb6:	rsb	r6, r1, r1, lsl #4
    cdba:	mov	r2, r1
    cdbc:	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    cdbe:	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    cdc2:	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cdc4:	add	r3, r1
	end = p + sector_index[sector];
    cdc6:	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cdca:	lsls	r3, r3, #12
	end = p + sector_index[sector];
    cdcc:	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    cdd0:	cmp	r3, r5
    cdd2:	bcs.n	cdec <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    cdd4:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    cdd8:	uxtb	r4, r1
    cdda:	cmp	r2, r4
    cddc:	it	eq
    cdde:	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    cde0:	cmp	r5, r3
    cde2:	bhi.n	cdd4 <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    cde4:	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cde6:	bl	cd44 <eeprom_initialize>
    cdea:	b.n	cda4 <eeprom_read_byte+0x14>
    cdec:	pop	{r4, r5, r6, pc}
    cdee:	nop
    cdf0:	.word	0x2000df92
    cdf4:	.word	0x88888889
    cdf8:	.word	0x000601f0
    cdfc:	.word	0x2000df74

0000ce00 <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    ce00:	cmp.w	r0, #1080	; 0x438
    ce04:	bcs.w	cf60 <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    ce08:	ldr	r3, [pc, #380]	; (cf88 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    ce0a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ce0e:	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    ce10:	sub	sp, #268	; 0x10c
    ce12:	mov	r9, r1
    ce14:	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ce16:	cmp	r3, #0
    ce18:	beq.w	cf7c <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce1c:	mov.w	r3, r8, lsr #2
    ce20:	ldr	r5, [pc, #360]	; (cf8c <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ce22:	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce26:	ldr	r7, [pc, #360]	; (cf90 <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce28:	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    ce2c:	ldr	r6, [pc, #356]	; (cf94 <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce2e:	lsrs	r5, r5, #3
    ce30:	rsb	r2, r5, r5, lsl #4
    ce34:	mov	r8, r5
    ce36:	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ce38:	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce3c:	add	r7, r5
	end = p + sector_index[sector];
    ce3e:	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce42:	lsls	r7, r7, #12
	end = p + sector_index[sector];
    ce44:	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    ce48:	cmp	r7, r0
    ce4a:	bcs.w	cf82 <eeprom_write_byte+0x182>
    ce4e:	mov	r3, r7
    ce50:	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    ce54:	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    ce58:	uxtb	r1, r2
    ce5a:	cmp	r8, r1
    ce5c:	it	eq
    ce5e:	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    ce62:	cmp	r0, r3
    ce64:	bhi.n	ce54 <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    ce66:	cmp	r9, lr
    ce68:	beq.n	cf5a <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    ce6a:	cmp.w	r4, #2048	; 0x800
    ce6e:	bcc.n	cf62 <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    ce70:	add	r4, sp, #8
    ce72:	mov.w	r2, #256	; 0x100
    ce76:	movs	r1, #255	; 0xff
    ce78:	mov	r0, r4
    ce7a:	bl	ebbc <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    ce7e:	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce82:	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    ce84:	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    ce88:	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    ce8a:	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    ce8c:	mov.w	r3, r3, lsr #8
    ce90:	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    ce92:	bhi.n	ce84 <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    ce94:	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    ce98:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ce9a:	ldr	r3, [pc, #252]	; (cf98 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    ce9c:	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ce9e:	ldr	r0, [pc, #252]	; (cf9c <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cea0:	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cea4:	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cea8:	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ceac:	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ceae:	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    ceb0:	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    ceb4:	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    ceb8:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    cebc:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    cec0:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    cec4:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cec8:	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cecc:	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    ced0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    ced4:	ldr	r2, [pc, #200]	; (cfa0 <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ced6:	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    ced8:	str	r3, [r2, #0]
		location += 32;
    ceda:	adds	r3, #32
	} while (location < end_addr);
    cedc:	cmp	r1, r3
    cede:	bhi.n	ced8 <eeprom_write_byte+0xd8>
	asm("dsb");
    cee0:	dsb	sy
	asm("isb");
    cee4:	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    cee8:	ldr	r1, [pc, #172]	; (cf98 <eeprom_write_byte+0x198>)
    ceea:	ldr	r3, [r1, #20]
    ceec:	ldr	r2, [pc, #168]	; (cf98 <eeprom_write_byte+0x198>)
    ceee:	lsls	r0, r3, #31
    cef0:	bpl.n	ceea <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    cef2:	ldr	r3, [pc, #176]	; (cfa4 <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cef4:	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    cef6:	ldr.w	lr, [pc, #176]	; cfa8 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cefa:	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    cefe:	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    cf00:	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cf02:	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    cf04:	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    cf08:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cf0c:	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cf10:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    cf14:	ldr	r3, [r1, #20]
    cf16:	ldr	r2, [pc, #128]	; (cf98 <eeprom_write_byte+0x198>)
    cf18:	lsls	r3, r3, #31
    cf1a:	bpl.n	cf14 <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cf1c:	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf1e:	movs	r4, #0
    cf20:	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cf24:	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    cf26:	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    cf28:	bl	cc0c <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    cf2c:	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    cf30:	add.w	r0, r7, r8, lsl #1
    cf34:	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    cf38:	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    cf3a:	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf3e:	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    cf42:	beq.n	cf50 <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    cf44:	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    cf48:	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    cf4c:	bl	cc74 <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf50:	cmp.w	r4, #256	; 0x100
    cf54:	bne.n	cf2c <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    cf56:	strh.w	r8, [r6, r5, lsl #1]
	}
}
    cf5a:	add	sp, #268	; 0x10c
    cf5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf60:	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    cf62:	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    cf66:	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    cf68:	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    cf6a:	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    cf6e:	bl	cc74 <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    cf72:	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    cf76:	add	sp, #268	; 0x10c
    cf78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    cf7c:	bl	cd44 <eeprom_initialize>
    cf80:	b.n	ce1c <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    cf82:	mov.w	lr, #255	; 0xff
    cf86:	b.n	ce66 <eeprom_write_byte+0x66>
    cf88:	.word	0x2000df92
    cf8c:	.word	0x88888889
    cf90:	.word	0x000601f0
    cf94:	.word	0x2000df74
    cf98:	.word	0x402a8000
    cf9c:	.word	0x5af05af0
    cfa0:	.word	0xe000ef5c
    cfa4:	.word	0x001ff000
    cfa8:	.word	0x08180420

0000cfac <eeprom_write_block>:

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfac:	cbz	r2, cfc8 <eeprom_write_block+0x1c>
	eeprom_write_byte(p++, value >> 16);
	eeprom_write_byte(p, value >> 24);
}

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
    cfae:	push	{r4, r5, r6, lr}
    cfb0:	mov	r5, r0
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfb2:	mov	r4, r2
    cfb4:	mov	r0, r1
		eeprom_write_byte(p++, *src++);
    cfb6:	ldrb.w	r1, [r5], #1
    cfba:	adds	r6, r0, #1
    cfbc:	bl	ce00 <eeprom_write_byte>

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfc0:	subs	r4, #1
		eeprom_write_byte(p++, *src++);
    cfc2:	mov	r0, r6

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfc4:	bne.n	cfb6 <eeprom_write_block+0xa>
    cfc6:	pop	{r4, r5, r6, pc}
    cfc8:	bx	lr
    cfca:	nop

0000cfcc <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    cfcc:	cmp	r0, #0
    cfce:	beq.n	d076 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    cfd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfd4:	mov	r9, r0
    cfd6:	sub	sp, #12
    cfd8:	ldr	r4, [pc, #156]	; (d078 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfda:	movs	r0, #1
    cfdc:	ldr	r5, [pc, #156]	; (d07c <delay+0xb0>)
    cfde:	ldr	r6, [pc, #160]	; (d080 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cfe0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    cfe4:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    cfe6:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfe8:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    cfec:	cmp	r3, #0
    cfee:	bne.n	cfe0 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    cff0:	ldr	r7, [pc, #144]	; (d084 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    cff2:	mov.w	lr, #1000	; 0x3e8
    cff6:	ldr	r0, [pc, #144]	; (d088 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    cff8:	ldr.w	ip, [r7]
    cffc:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    cffe:	add.w	r7, r7, #1660944384	; 0x63000000
    d002:	ldr	r3, [r0, #0]
    d004:	rsb	r1, r1, ip
    d008:	add.w	r7, r7, #1818624	; 0x1bc000
    d00c:	addw	r7, r7, #3711	; 0xe7f
    d010:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d014:	mov	sl, r7
    d016:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d018:	lsrs	r3, r3, #18
    d01a:	udiv	r3, r1, r3
    d01e:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d022:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d026:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d028:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d02a:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    d02e:	cmp	r3, #0
    d030:	bne.n	d022 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    d032:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d036:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d03a:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d03c:	mul.w	r2, lr, r2
    d040:	rsb	r1, r1, ip
    d044:	umull	r3, lr, sl, r3
    d048:	rsb	r3, r8, r2
    d04c:	mov.w	r2, lr, lsr #18
    d050:	udiv	r1, r1, r2
    d054:	adds	r2, r1, r3
    d056:	cmp.w	r2, #1000	; 0x3e8
    d05a:	bcc.n	d06c <delay+0xa0>
			if (--msec == 0) return;
    d05c:	subs.w	r9, r9, #1
			start += 1000;
    d060:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    d064:	bne.n	d022 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    d066:	add	sp, #12
    d068:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d06c:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    d06e:	bl	d998 <yield>
	}
    d072:	ldr	r0, [sp, #4]
    d074:	b.n	d022 <delay+0x56>
    d076:	bx	lr
    d078:	.word	0x20010280
    d07c:	.word	0x2000df98
    d080:	.word	0x2000df94
    d084:	.word	0xe0001004
    d088:	.word	0x20000df4

0000d08c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    d08c:	push	{r4, r5, r6}
    d08e:	ldr	r3, [pc, #56]	; (d0c8 <micros+0x3c>)
    d090:	movs	r6, #1
    d092:	ldr	r5, [pc, #56]	; (d0cc <micros+0x40>)
    d094:	ldr	r0, [pc, #56]	; (d0d0 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d096:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d09a:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    d09c:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d09e:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    d0a2:	cmp	r2, #0
    d0a4:	bne.n	d096 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    d0a6:	ldr	r3, [pc, #44]	; (d0d4 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    d0a8:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d0ac:	ldr	r2, [pc, #40]	; (d0d8 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    d0ae:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    d0b0:	ldr	r5, [pc, #40]	; (d0dc <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d0b2:	ldr	r2, [r2, #0]
	return usec;
    d0b4:	subs	r4, r3, r4
    d0b6:	umull	r2, r3, r5, r2
    d0ba:	lsrs	r3, r3, #18
    d0bc:	udiv	r4, r4, r3
}
    d0c0:	mla	r0, r0, r1, r4
    d0c4:	pop	{r4, r5, r6}
    d0c6:	bx	lr
    d0c8:	.word	0x20010280
    d0cc:	.word	0x2000df98
    d0d0:	.word	0x2000df94
    d0d4:	.word	0xe0001004
    d0d8:	.word	0x20000df4
    d0dc:	.word	0x431bde83

0000d0e0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    d0e0:	lsls	r0, r0, #4
    d0e2:	ldr	r3, [pc, #28]	; (d100 <digitalWrite.part.0+0x20>)
    d0e4:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    d0e6:	ldr	r3, [r3, r0]
	mask = p->mask;
    d0e8:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    d0ea:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    d0ec:	tst	r0, r2
    d0ee:	beq.n	d0f6 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    d0f0:	cbnz	r1, d0f8 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    d0f2:	str.w	r2, [r3, #136]	; 0x88
    d0f6:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    d0f8:	str.w	r2, [r3, #132]	; 0x84
    d0fc:	bx	lr
    d0fe:	nop
    d100:	.word	0x200005c0

0000d104 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d104:	cmp	r0, #39	; 0x27
    d106:	bhi.n	d10c <digitalWrite+0x8>
    d108:	b.w	d0e0 <digitalWrite.part.0>
    d10c:	bx	lr
    d10e:	nop

0000d110 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d110:	cmp	r0, #39	; 0x27
    d112:	bhi.n	d14e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    d114:	lsls	r0, r0, #4
    d116:	ldr	r2, [pc, #104]	; (d180 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d118:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    d11a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d11e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    d120:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d122:	beq.n	d150 <pinMode+0x40>
    d124:	cmp	r1, #4
    d126:	beq.n	d150 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d128:	ldr	r4, [r3, #12]
    d12a:	ldr	r2, [r0, #4]
    d12c:	bic.w	r2, r2, r4
    d130:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d132:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    d134:	cbz	r1, d172 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    d136:	cmp	r1, #2
    d138:	beq.n	d178 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    d13a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d13c:	ldr	r3, [r3, #4]
}
    d13e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d142:	ite	eq
    d144:	ldreq	r1, [pc, #60]	; (d184 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d146:	ldrne	r1, [pc, #64]	; (d188 <pinMode+0x78>)
    d148:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    d14a:	movs	r2, #21
    d14c:	str	r2, [r3, #0]
}
    d14e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d150:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    d152:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d154:	ldr	r4, [r0, #4]
    d156:	orr.w	r2, r2, r4
    d15a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d15c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    d15e:	beq.n	d172 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d160:	movw	r1, #2104	; 0x838
    d164:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d166:	ldr	r3, [r3, #4]
    d168:	movs	r2, #21
}
    d16a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d16e:	str	r2, [r3, #0]
}
    d170:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d172:	movs	r1, #56	; 0x38
    d174:	str	r1, [r2, #0]
    d176:	b.n	d166 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d178:	ldr	r1, [pc, #16]	; (d18c <pinMode+0x7c>)
    d17a:	str	r1, [r2, #0]
    d17c:	b.n	d166 <pinMode+0x56>
    d17e:	nop
    d180:	.word	0x200005c0
    d184:	.word	0x00013038
    d188:	.word	0x00010038
    d18c:	.word	0x0001f038

0000d190 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d190:	ldr	r2, [pc, #72]	; (d1dc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d192:	ldr	r3, [pc, #76]	; (d1e0 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d194:	ldr.w	r0, [r2, #544]	; 0x220
    d198:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d19c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    d19e:	push	{r4, lr}
    d1a0:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d1a2:	bhi.n	d1aa <usb_init_serialnumber+0x1a>
    d1a4:	add.w	r0, r0, r0, lsl #2
    d1a8:	lsls	r0, r0, #1
    d1aa:	ldr	r4, [pc, #56]	; (d1e4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    d1ac:	add	r1, sp, #4
    d1ae:	movs	r2, #10
    d1b0:	bl	df48 <ultoa>
    d1b4:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    d1b6:	movs	r3, #0
    d1b8:	mov	r0, r4
		char c = buf[i];
    d1ba:	ldrb.w	r2, [r1], #1
    d1be:	adds	r3, #1
		if (!c) break;
    d1c0:	cbz	r2, d1d2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d1c2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    d1c4:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d1c8:	bne.n	d1ba <usb_init_serialnumber+0x2a>
    d1ca:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d1cc:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    d1ce:	add	sp, #16
    d1d0:	pop	{r4, pc}
    d1d2:	lsls	r3, r3, #1
    d1d4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d1d6:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    d1d8:	add	sp, #16
    d1da:	pop	{r4, pc}
    d1dc:	.word	0x401f4400
    d1e0:	.word	0x0098967f
    d1e4:	.word	0x20000e90

0000d1e8 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    d1e8:	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    d1ec:	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    d1f0:	uxth	r3, r3
	tail = tx_buffer_tail_;
    d1f2:	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d1f4:	cmp	r3, r2
    d1f6:	bcs.n	d1fe <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    d1f8:	subs	r0, r2, #1
    d1fa:	subs	r0, r0, r3
}
    d1fc:	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d1fe:	ldr	r0, [r0, #52]	; 0x34
    d200:	subs	r0, #1
    d202:	add	r0, r2
    d204:	subs	r0, r0, r3
    d206:	bx	lr

0000d208 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d208:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d20c:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d210:	uxth	r2, r2
	tail = rx_buffer_tail_;
    d212:	uxth	r3, r3
	if (head >= tail) return head - tail;
    d214:	cmp	r2, r3
    d216:	bcs.n	d220 <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    d218:	ldr	r0, [r0, #56]	; 0x38
    d21a:	add	r0, r2
    d21c:	subs	r0, r0, r3
}
    d21e:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    d220:	subs	r0, r2, r3
    d222:	bx	lr

0000d224 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d224:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d228:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d22c:	uxth	r2, r2
	tail = rx_buffer_tail_;
    d22e:	uxth	r3, r3
	if (head == tail) return -1;
    d230:	cmp	r2, r3
    d232:	beq.n	d256 <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d234:	adds	r3, #1
    d236:	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    d238:	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d23a:	cmp	r3, r1
    d23c:	it	cs
    d23e:	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    d240:	cmp	r3, r2
    d242:	bcc.n	d24e <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    d244:	subs	r3, r3, r2
    d246:	ldr	r2, [r0, #36]	; 0x24
    d248:	ldrb	r0, [r2, r3]
    d24a:	uxtb	r0, r0
    d24c:	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    d24e:	ldr	r2, [r0, #32]
    d250:	ldrb	r0, [r2, r3]
    d252:	uxtb	r0, r0
    d254:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    d256:	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    d25a:	bx	lr

0000d25c <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    d25c:	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d260:	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    d264:	uxth	r1, r1
	tail = rx_buffer_tail_;
    d266:	uxth	r3, r3
	if (head == tail) return -1;
    d268:	cmp	r1, r3
    d26a:	beq.n	d2c0 <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d26c:	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    d26e:	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d270:	ldr	r4, [r0, #56]	; 0x38
    d272:	cmp	r3, r4
    d274:	bcs.n	d2a6 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    d276:	ldr	r2, [r0, #48]	; 0x30
    d278:	uxth	r6, r3
    d27a:	cmp	r3, r2
    d27c:	bcs.n	d2b0 <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    d27e:	ldr	r2, [r0, #32]
    d280:	ldrb	r2, [r2, r3]
    d282:	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    d284:	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    d286:	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    d28a:	cbz	r5, d2ba <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    d28c:	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    d28e:	it	hi
    d290:	addhi	r1, r1, r4
    d292:	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    d294:	ldr	r1, [r0, #60]	; 0x3c
    d296:	cmp	r3, r1
    d298:	bhi.n	d2ba <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    d29a:	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    d29c:	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    d29e:	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    d2a2:	pop	{r4, r5, r6}
    d2a4:	bx	lr
    d2a6:	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    d2a8:	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d2aa:	mov	r3, r6
	if (tail < rx_buffer_size_) {
    d2ac:	cmp	r3, r2
    d2ae:	bcc.n	d27e <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    d2b0:	subs	r2, r3, r2
    d2b2:	ldr	r5, [r0, #36]	; 0x24
    d2b4:	ldrb	r2, [r5, r2]
    d2b6:	uxtb	r2, r2
    d2b8:	b.n	d284 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    d2ba:	mov	r0, r2
}	
    d2bc:	pop	{r4, r5, r6}
    d2be:	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    d2c0:	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    d2c4:	bx	lr
    d2c6:	nop

0000d2c8 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    d2c8:	ldrb.w	r3, [r0, #68]	; 0x44
    d2cc:	cbz	r3, d2e0 <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    d2ce:	push	{r4, lr}
    d2d0:	mov	r4, r0
	while (transmitting_) yield(); // wait
    d2d2:	bl	d998 <yield>
    d2d6:	ldrb.w	r3, [r4, #68]	; 0x44
    d2da:	cmp	r3, #0
    d2dc:	bne.n	d2d2 <HardwareSerial::flush()+0xa>
    d2de:	pop	{r4, pc}
    d2e0:	bx	lr
    d2e2:	nop

0000d2e4 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    d2e4:	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    d2e8:	cbnz	r0, d31a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d2ea:	mrs	r3, PRIMASK
	if (primask) return 0;
    d2ee:	cbnz	r3, d304 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d2f0:	mrs	r2, IPSR
	if (ipsr) {
    d2f4:	cbnz	r2, d306 <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    d2f6:	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d2fa:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d2fe:	cbz	r0, d316 <nvic_execution_priority()+0x32>
    d300:	cmp	r0, r3
    d302:	bcs.n	d316 <nvic_execution_priority()+0x32>
	return priority;
}
    d304:	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    d306:	cmp	r2, #15
    d308:	bls.n	d2fa <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    d30a:	ldr	r3, [pc, #20]	; (d320 <nvic_execution_priority()+0x3c>)
    d30c:	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d30e:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d312:	cmp	r0, #0
    d314:	bne.n	d300 <nvic_execution_priority()+0x1c>
    d316:	mov	r0, r3
    d318:	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    d31a:	mov.w	r0, #4294967295
    d31e:	b.n	d304 <nvic_execution_priority()+0x20>
    d320:	.word	0xe000e3f0

0000d324 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d324:	vmov	s15, r1
    d328:	vldr	s14, [pc, #528]	; d53c <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    d32c:	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    d32e:	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d332:	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    d336:	vldr	s12, [pc, #520]	; d540 <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    d33a:	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d33c:	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    d340:	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    d342:	movs	r6, #1
    d344:	movw	r5, #8191	; 0x1fff
    d348:	b.n	d386 <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    d34a:	cmp	r3, r5
    d34c:	it	ge
    d34e:	movge	r3, r5
    d350:	vmov	s15, r3
    d354:	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    d358:	vsub.f32	s13, s13, s14
    d35c:	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    d360:	vcmpe.f32	s15, #0.0
    d364:	vmrs	APSR_nzcv, fpscr
    d368:	it	mi
    d36a:	vnegmi.f32	s15, s15
		if (err <= besterr) {
    d36e:	vcmpe.f32	s15, s12
    d372:	vmrs	APSR_nzcv, fpscr
    d376:	bhi.n	d380 <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    d378:	vmov.f32	s12, s15
    d37c:	mov	r4, r1
			bestdiv = divint;
    d37e:	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    d380:	adds	r1, #1
    d382:	cmp	r1, #33	; 0x21
    d384:	beq.n	d3aa <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    d386:	vmov	s15, r1
    d38a:	vcvt.f32.s32	s15, s15
    d38e:	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    d392:	vadd.f32	s15, s14, s10
    d396:	vcvt.s32.f32	s15, s15
    d39a:	vmov	r3, s15
		if (divint < 1) divint = 1;
    d39e:	cmp	r3, #0
    d3a0:	bgt.n	d34a <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    d3a2:	vmov.f32	s13, #112	; 0x3f800000  1.0
    d3a6:	movs	r3, #1
    d3a8:	b.n	d358 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3aa:	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    d3ac:	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3ae:	ldr	r5, [r0, #56]	; 0x38
    d3b0:	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3b4:	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    d3b8:	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3bc:	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    d3be:	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3c2:	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    d3c6:	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    d3ca:	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    d3ce:	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    d3d2:	ldr.w	lr, [r1, #12]
    d3d6:	ldr	r3, [r1, #16]
    d3d8:	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3dc:	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    d3de:	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3e2:	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d3e4:	ldr	r5, [pc, #348]	; (d544 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    d3e6:	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d3ea:	ldrb	r3, [r0, #24]
    d3ec:	ldr	r7, [pc, #344]	; (d548 <HardwareSerial::begin(unsigned long, unsigned short)+0x224>)
    d3ee:	add.w	r3, r1, r3, lsl #4
    d3f2:	ldrb	r3, [r3, #20]
    d3f4:	add.w	r3, r5, r3, lsl #4
    d3f8:	ldr	r3, [r3, #8]
    d3fa:	str	r7, [r3, #0]
    d3fc:	ldrb	r3, [r0, #24]
    d3fe:	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    d402:	ldrb	r7, [r3, #20]
    d404:	ldr.w	lr, [r3, #24]
    d408:	add.w	r3, r5, r7, lsl #4
    d40c:	ldr	r3, [r3, #4]
    d40e:	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    d412:	ldrb	r3, [r0, #24]
    d414:	add.w	r3, r1, r3, lsl #4
    d418:	ldr	r7, [r3, #28]
    d41a:	cbz	r7, d420 <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    d41c:	ldr	r3, [r3, #32]
    d41e:	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d420:	ldrb.w	lr, [r0, #25]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d424:	subs	r3, r4, #1
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d426:	movs	r7, #217	; 0xd9
    d428:	add.w	r4, r1, lr, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;
    d42c:	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d430:	lsls	r3, r3, #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d432:	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d436:	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d43a:	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d43e:	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d440:	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d442:	ldr	r4, [r4, #8]
    d444:	adds	r6, #16
    d446:	str	r7, [r4, #0]
    d448:	ldrb	r4, [r0, #25]

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    d44a:	ldr	r7, [r1, #4]
    d44c:	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    d450:	ldrb.w	r1, [r4, #52]	; 0x34
    d454:	ldr.w	ip, [r4, #56]	; 0x38
    d458:	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d45c:	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    d45e:	ldr	r4, [r5, #4]
    d460:	str.w	ip, [r4]
    d464:	ldr	r4, [pc, #228]	; (d54c <HardwareSerial::begin(unsigned long, unsigned short)+0x228>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d466:	str	r3, [r1, #16]
	port->PINCFG = 0;
    d468:	str.w	lr, [r1, #12]
    d46c:	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d470:	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    d472:	movs	r5, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d474:	ldr	r1, [pc, #216]	; (d550 <HardwareSerial::begin(unsigned long, unsigned short)+0x22c>)
    d476:	ldrb	r4, [r3, #1]
    d478:	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    d47c:	ldr	r6, [pc, #212]	; (d554 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>)
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d47e:	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    d480:	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    d482:	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    d484:	ldrb	r3, [r4, #1]
    d486:	and.w	r0, r3, #31
    d48a:	asrs	r3, r3, #5
    d48c:	lsl.w	r0, r5, r0
    d490:	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    d494:	ldr	r3, [r1, #40]	; 0x28
    d496:	lsrs	r3, r3, #2
    d498:	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    d49c:	cmp	r3, #15
    d49e:	bhi.n	d522 <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
    d4a0:	asrs	r3, r5
    d4a2:	and.w	r3, r3, #3
    d4a6:	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    d4a8:	ldr	r3, [r1, #40]	; 0x28
    d4aa:	lsls	r3, r3, #2
    d4ac:	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    d4b0:	cmp	r3, #15
    d4b2:	bhi.n	d51c <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    d4b4:	lsls	r3, r3, #15
    d4b6:	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d4ba:	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d4bc:	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d4be:	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d4c2:	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    d4c4:	ldr	r3, [r1, #40]	; 0x28
    d4c6:	orr.w	r3, r3, #136	; 0x88
    d4ca:	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d4cc:	bmi.n	d526 <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d4ce:	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    d4d2:	and.w	r0, r2, #15
    d4d6:	cmp	r0, #4
    d4d8:	it	eq
    d4da:	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    d4de:	lsls	r6, r2, #26
    d4e0:	it	mi
    d4e2:	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d4e6:	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    d4e8:	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d4ea:	bpl.n	d4f4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1d0>
    d4ec:	ldr	r3, [r1, #16]
    d4ee:	orr.w	r3, r3, #536870912	; 0x20000000
    d4f2:	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d4f4:	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d4f6:	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d4f8:	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d4fc:	it	mi
    d4fe:	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    d502:	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    d504:	lsls	r3, r2, #23
    d506:	bpl.n	d510 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ec>
    d508:	ldr	r3, [r1, #16]
    d50a:	orr.w	r3, r3, #8192	; 0x2000
    d50e:	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    d510:	ldrb	r2, [r4, #0]
    d512:	ldr	r3, [pc, #68]	; (d558 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>)
    d514:	ldr.w	r1, [r3, r2, lsl #2]
    d518:	cbz	r1, d52c <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
    d51a:	pop	{r4, r5, r6, r7, pc}
    d51c:	mov.w	r3, #196608	; 0x30000
    d520:	b.n	d4ba <HardwareSerial::begin(unsigned long, unsigned short)+0x196>
    d522:	movs	r0, #3
    d524:	b.n	d4a8 <HardwareSerial::begin(unsigned long, unsigned short)+0x184>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d526:	ldr	r3, [pc, #52]	; (d55c <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
    d528:	orrs	r3, r0
    d52a:	b.n	d4d2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    d52c:	ldr	r0, [pc, #48]	; (d560 <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    d52e:	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    d530:	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    d532:	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    d536:	adds	r3, r1, #1
    d538:	strb	r3, [r0, #0]
    d53a:	pop	{r4, r5, r6, r7, pc}
    d53c:	.word	0x4bb71b00
    d540:	.word	0x60ad78ec
    d544:	.word	0x200005c0
    d548:	.word	0x0001f038
    d54c:	.word	0x20010400
    d550:	.word	0xe000e400
    d554:	.word	0xe000e100
    d558:	.word	0x2000df9c
    d55c:	.word	0x003c0010
    d560:	.word	0x2000dfb8

0000d564 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    d564:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d566:	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    d568:	mov	r4, r0
    d56a:	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d56c:	cbz	r3, d574 <HardwareSerial::write9bit(unsigned long)+0x10>
    d56e:	ldr	r2, [r0, #84]	; 0x54
    d570:	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    d574:	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    d578:	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    d57a:	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    d57c:	adds	r5, #1
    d57e:	cmp	r5, r3
    d580:	bcs.n	d616 <HardwareSerial::write9bit(unsigned long)+0xb2>
    d582:	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    d584:	ldrh.w	r3, [r4, #72]	; 0x48
    d588:	uxth	r3, r3
    d58a:	cmp	r3, r5
    d58c:	bne.n	d5d0 <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    d58e:	bl	d2e4 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    d592:	ldr	r3, [r4, #20]
    d594:	ldrh.w	r3, [r3, #86]	; 0x56
    d598:	cmp	r0, r3
    d59a:	bgt.n	d5f8 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    d59c:	ldr	r1, [r4, #16]
    d59e:	ldr	r3, [r1, #20]
    d5a0:	lsls	r3, r3, #8
    d5a2:	bpl.n	d584 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    d5a4:	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d5a8:	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    d5aa:	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d5ac:	adds	r3, #1
    d5ae:	cmp	r3, r2
    d5b0:	bcs.n	d602 <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    d5b2:	ldr	r2, [r4, #44]	; 0x2c
    d5b4:	uxth	r0, r3
    d5b6:	cmp	r3, r2
    d5b8:	bcs.n	d60c <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    d5ba:	ldr	r2, [r4, #28]
    d5bc:	ldrb	r3, [r2, r3]
    d5be:	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    d5c0:	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    d5c2:	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    d5c6:	ldrh.w	r3, [r4, #72]	; 0x48
    d5ca:	uxth	r3, r3
    d5cc:	cmp	r3, r5
    d5ce:	beq.n	d58e <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    d5d0:	ldr	r3, [r4, #44]	; 0x2c
    d5d2:	cmp	r5, r3
    d5d4:	bcc.n	d61c <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    d5d6:	subs	r5, r5, r3
    d5d8:	uxtb	r6, r6
    d5da:	ldr	r3, [r4, #40]	; 0x28
    d5dc:	strb	r6, [r3, r5]
	}
	__disable_irq();
    d5de:	cpsid	i
	transmitting_ = 1;
    d5e0:	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d5e2:	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    d5e4:	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    d5e8:	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d5ec:	ldr	r3, [r2, #24]
    d5ee:	orr.w	r3, r3, #8388608	; 0x800000
    d5f2:	str	r3, [r2, #24]
	__enable_irq();
    d5f4:	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    d5f6:	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    d5f8:	cmp	r0, #255	; 0xff
    d5fa:	ble.n	d584 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    d5fc:	bl	d998 <yield>
    d600:	b.n	d584 <HardwareSerial::write9bit(unsigned long)+0x20>
    d602:	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    d604:	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d606:	mov	r3, r0
				if (tail < tx_buffer_size_) {
    d608:	cmp	r3, r2
    d60a:	bcc.n	d5ba <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    d60c:	subs	r3, r3, r2
    d60e:	ldr	r2, [r4, #40]	; 0x28
    d610:	ldrb	r3, [r2, r3]
    d612:	uxtb	r3, r3
    d614:	b.n	d5c0 <HardwareSerial::write9bit(unsigned long)+0x5c>
    d616:	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    d618:	mov	r5, r7
    d61a:	b.n	d584 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    d61c:	uxtb	r6, r6
    d61e:	ldr	r3, [r4, #28]
    d620:	strb	r6, [r3, r5]
    d622:	b.n	d5de <HardwareSerial::write9bit(unsigned long)+0x7a>

0000d624 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    d624:	b.w	d564 <HardwareSerial::write9bit(unsigned long)>

0000d628 <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d628:	ldr	r2, [r0, #16]
    d62a:	ldr	r3, [r2, #20]
    d62c:	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    d630:	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d632:	beq.n	d6ba <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d634:	ldr	r3, [r2, #44]	; 0x2c
    d636:	ubfx	r5, r3, #24, #3
		if (avail) {
    d63a:	cmp	r5, #0
    d63c:	beq.n	d6b4 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    d63e:	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    d642:	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    d646:	uxth	r7, r7
			tail = rx_buffer_tail_;
    d648:	uxth.w	lr, lr
    d64c:	b.n	d65c <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    d64e:	ldr	r2, [r0, #32]
    d650:	strb	r6, [r2, r3]
    d652:	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    d654:	subs	r3, r5, #1
    d656:	ands.w	r5, r3, #255	; 0xff
    d65a:	beq.n	d692 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d65c:	ldr	r1, [r2, #28]
				newhead = head + 1;
    d65e:	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d660:	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    d662:	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d666:	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d66a:	cmp	r3, r6
    d66c:	it	cs
    d66e:	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    d670:	uxth	r4, r4
    d672:	cmp	r3, r4
    d674:	beq.n	d654 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d676:	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d678:	uxtb	r6, r1
    d67a:	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d67c:	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d67e:	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d682:	bcc.n	d64e <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d684:	ldr	r3, [r0, #36]	; 0x24
    d686:	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    d688:	subs	r3, r5, #1
    d68a:	ldr	r2, [r0, #16]
    d68c:	ands.w	r5, r3, #255	; 0xff
    d690:	bne.n	d65c <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    d692:	uxth	r3, r7
			if (rts_pin_baseReg_) {
    d694:	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    d696:	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    d69a:	cbz	r1, d6b4 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    d69c:	cmp	r7, lr
    d69e:	bcs.n	d774 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    d6a0:	ldr	r3, [r0, #56]	; 0x38
    d6a2:	rsb	r3, lr, r3
    d6a6:	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    d6a8:	ldr	r3, [r0, #64]	; 0x40
    d6aa:	cmp	r7, r3
    d6ac:	bcc.n	d6b4 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    d6ae:	ldr	r3, [r0, #92]	; 0x5c
    d6b0:	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    d6b4:	ldr	r3, [r2, #20]
    d6b6:	lsls	r4, r3, #11
    d6b8:	bmi.n	d752 <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    d6ba:	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    d6be:	tst.w	lr, #8388608	; 0x800000
    d6c2:	beq.n	d6ca <HardwareSerial::IRQHandler()+0xa2>
    d6c4:	ldr	r3, [r2, #20]
    d6c6:	lsls	r1, r3, #8
    d6c8:	bmi.n	d6f0 <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d6ca:	tst.w	lr, #4194304	; 0x400000
    d6ce:	beq.n	d74e <HardwareSerial::IRQHandler()+0x126>
    d6d0:	ldr	r3, [r2, #20]
    d6d2:	lsls	r3, r3, #9
    d6d4:	bpl.n	d750 <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    d6d6:	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d6d8:	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    d6da:	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d6de:	cbz	r3, d6e6 <HardwareSerial::IRQHandler()+0xbe>
    d6e0:	ldr	r1, [r0, #84]	; 0x54
    d6e2:	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    d6e6:	ldr	r3, [r2, #24]
    d6e8:	bic.w	r3, r3, #4194304	; 0x400000
    d6ec:	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    d6ee:	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    d6f0:	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    d6f4:	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    d6f8:	uxth	r5, r5
		tail = tx_buffer_tail_;
    d6fa:	uxth	r3, r3
		do {
			if (head == tail) break;
    d6fc:	cmp	r5, r3
    d6fe:	beq.n	d75c <HardwareSerial::IRQHandler()+0x134>
    d700:	ldr	r6, [r0, #52]	; 0x34
    d702:	ldr	r4, [r0, #44]	; 0x2c
    d704:	b.n	d71c <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    d706:	ldr	r1, [r0, #28]
    d708:	ldrb	r1, [r1, r3]
    d70a:	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    d70c:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d70e:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    d710:	ubfx	r1, r1, #8, #3
    d714:	cmp	r1, #3
    d716:	bhi.n	d73e <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    d718:	cmp	r3, r5
    d71a:	beq.n	d75c <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d71c:	adds	r3, #1
    d71e:	cmp	r6, r3
    d720:	it	ls
    d722:	movls	r3, #0
			if (tail < tx_buffer_size_) {
    d724:	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d726:	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    d72a:	bcc.n	d706 <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d72c:	ldr	r7, [r0, #40]	; 0x28
    d72e:	ldrb	r1, [r7, r1]
    d730:	uxtb	r1, r1
			}
			port->DATA = n;
    d732:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d734:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    d736:	ubfx	r1, r1, #8, #3
    d73a:	cmp	r1, #3
    d73c:	bls.n	d718 <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d73e:	uxth	r1, r3
		if (head == tail) {
    d740:	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d742:	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    d746:	beq.n	d762 <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d748:	tst.w	lr, #4194304	; 0x400000
    d74c:	bne.n	d6d0 <HardwareSerial::IRQHandler()+0xa8>
    d74e:	pop	{r4, r5, r6, r7, pc}
    d750:	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    d752:	ldr	r3, [r2, #20]
    d754:	orr.w	r3, r3, #1048576	; 0x100000
    d758:	str	r3, [r2, #20]
    d75a:	b.n	d6ba <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d75c:	uxth	r5, r5
    d75e:	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    d762:	ldr	r3, [r2, #24]
    d764:	bic.w	r3, r3, #8388608	; 0x800000
    d768:	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    d76a:	ldr	r3, [r2, #24]
    d76c:	orr.w	r3, r3, #4194304	; 0x400000
    d770:	str	r3, [r2, #24]
    d772:	b.n	d6ca <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    d774:	rsb	r7, lr, r7
    d778:	b.n	d6a8 <HardwareSerial::IRQHandler()+0x80>
    d77a:	nop

0000d77c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    d77c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    d77e:	ldr	r3, [pc, #28]	; (d79c <HardwareSerial::processSerialEvents()+0x20>)
    d780:	ldrb	r4, [r3, #0]
    d782:	cbz	r4, d798 <HardwareSerial::processSerialEvents()+0x1c>
    d784:	ldr	r5, [pc, #24]	; (d7a0 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    d786:	ldr.w	r3, [r5, #4]!
    d78a:	cmp	r3, #0
    d78c:	beq.n	d786 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    d78e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    d790:	subs	r3, r4, #1
    d792:	ands.w	r4, r3, #255	; 0xff
    d796:	bne.n	d786 <HardwareSerial::processSerialEvents()+0xa>
    d798:	pop	{r3, r4, r5, pc}
    d79a:	nop
    d79c:	.word	0x2000dfb8
    d7a0:	.word	0x2000df98

0000d7a4 <HardwareSerial::disableSerialEvents()>:
	}
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
    d7a4:	ldr	r3, [r0, #20]
    d7a6:	ldr	r2, [pc, #32]	; (d7c8 <HardwareSerial::disableSerialEvents()+0x24>)
    d7a8:	ldrb	r1, [r3, #0]
    d7aa:	ldr.w	r3, [r2, r1, lsl #2]
    d7ae:	cbz	r3, d7c4 <HardwareSerial::disableSerialEvents()+0x20>
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    d7b0:	ldr	r0, [pc, #24]	; (d7cc <HardwareSerial::disableSerialEvents()+0x28>)
		serial_event_handlers_active++;
	}
}

void HardwareSerial::disableSerialEvents() 
{
    d7b2:	push	{r4}
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    d7b4:	ldrb	r3, [r0, #0]
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    d7b6:	movs	r4, #0
		serial_event_handlers_active--;
    d7b8:	subs	r3, #1
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    d7ba:	str.w	r4, [r2, r1, lsl #2]
		serial_event_handlers_active--;
    d7be:	strb	r3, [r0, #0]
	}
}
    d7c0:	ldr.w	r4, [sp], #4
    d7c4:	bx	lr
    d7c6:	nop
    d7c8:	.word	0x2000df9c
    d7cc:	.word	0x2000dfb8

0000d7d0 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    d7d0:	push	{r4, lr}
    d7d2:	mov	r4, r0
{
	free(buffer);
    d7d4:	ldr	r0, [r0, #0]
    d7d6:	bl	e574 <free>
}
    d7da:	mov	r0, r4
    d7dc:	pop	{r4, pc}
    d7de:	nop

0000d7e0 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    d7e0:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    d7e2:	ldr	r3, [r0, #4]
    d7e4:	cmp	r3, r1
    d7e6:	bcc.n	d7ec <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d7e8:	movs	r0, #1
		return 1;
	}
	return 0;
}
    d7ea:	pop	{r3, r4, r5, pc}
    d7ec:	mov	r5, r1
    d7ee:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    d7f0:	adds	r1, #1
    d7f2:	ldr	r0, [r0, #0]
    d7f4:	bl	ec60 <realloc>
	if (newbuffer) {
    d7f8:	cmp	r0, #0
    d7fa:	beq.n	d7ea <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d7fc:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    d7fe:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d802:	cmp	r3, #0
    d804:	bne.n	d7e8 <String::reserve(unsigned int)+0x8>
    d806:	strb	r3, [r0, #0]
    d808:	b.n	d7e8 <String::reserve(unsigned int)+0x8>
    d80a:	nop

0000d80c <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    d80c:	push	{r3, r4, r5, r6, r7, lr}
    d80e:	mov	r4, r0
	if (length == 0) {
    d810:	mov	r5, r2
    d812:	cbnz	r2, d822 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    d814:	ldr	r3, [r0, #0]
    d816:	cbz	r3, d81a <String::copy(char const*, unsigned int)+0xe>
    d818:	strb	r2, [r3, #0]
		len = 0;
    d81a:	movs	r3, #0
    d81c:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d81e:	mov	r0, r4
    d820:	pop	{r3, r4, r5, r6, r7, pc}
    d822:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    d824:	mov	r1, r2
    d826:	bl	d7e0 <String::reserve(unsigned int)>
    d82a:	mov	r7, r0
    d82c:	cbnz	r0, d842 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    d82e:	ldr	r0, [r4, #0]
    d830:	cbz	r0, d838 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    d832:	bl	e574 <free>
			buffer = NULL;
    d836:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    d838:	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d83a:	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    d83c:	str	r3, [r4, #4]
    d83e:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d840:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    d842:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    d844:	mov	r1, r6
    d846:	ldr	r0, [r4, #0]
    d848:	bl	f35c <strcpy>
	return *this;
    d84c:	b.n	d81e <String::copy(char const*, unsigned int)+0x12>
    d84e:	nop

0000d850 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d850:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d852:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d854:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d856:	str	r3, [r0, #0]
	capacity = 0;
    d858:	str	r3, [r0, #4]
	len = 0;
    d85a:	str	r3, [r0, #8]
	flags = 0;
    d85c:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    d85e:	cbz	r1, d872 <String::String(char const*)+0x22>
    d860:	mov	r5, r1
    d862:	mov	r0, r1
    d864:	bl	f440 <strlen>
    d868:	mov	r2, r0
    d86a:	mov	r1, r5
    d86c:	mov	r0, r4
    d86e:	bl	d80c <String::copy(char const*, unsigned int)>
}
    d872:	mov	r0, r4
    d874:	pop	{r3, r4, r5, pc}
    d876:	nop

0000d878 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    d878:	push	{r3, r4, r5, lr}
    d87a:	mov	r4, r1
    d87c:	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    d87e:	mov	r0, r1
    d880:	bl	f440 <strlen>
    d884:	mov	r1, r4
    d886:	mov	r2, r0
    d888:	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    d88a:	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    d88e:	b.w	d80c <String::copy(char const*, unsigned int)>
    d892:	nop

0000d894 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    d894:	push	{r4, lr}
    d896:	mov	r4, r0
	if (cstr) {
    d898:	cbz	r1, d8a2 <String::operator=(char const*)+0xe>
    d89a:	bl	d878 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    d89e:	mov	r0, r4
    d8a0:	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    d8a2:	str	r1, [r4, #8]
	}
	return *this;
}
    d8a4:	mov	r0, r4
    d8a6:	pop	{r4, pc}

0000d8a8 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    d8a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d8ac:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d8ae:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    d8b0:	mov	r4, r0
    d8b2:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d8b4:	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    d8b6:	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d8b8:	bhi.n	d8d0 <String::append(char const*, unsigned int)+0x28>
    d8ba:	adds	r2, r3, r1
    d8bc:	cmp	r7, r2
    d8be:	bcs.n	d8d0 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    d8c0:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    d8c4:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8c8:	cbnz	r5, d8d8 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    d8ca:	mov	r0, r4
    d8cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    d8d0:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8d4:	cmp	r5, #0
    d8d6:	beq.n	d8ca <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    d8d8:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8da:	mov	r0, r4
    d8dc:	mov	r1, r6
    d8de:	bl	d7e0 <String::reserve(unsigned int)>
    d8e2:	cmp	r0, #0
    d8e4:	beq.n	d8ca <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    d8e6:	cmp.w	r8, #0
    d8ea:	beq.n	d90a <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    d8ec:	ldr	r3, [r4, #0]
    d8ee:	mov	r2, r5
    d8f0:	ldr	r0, [r4, #8]
    d8f2:	add.w	r1, r3, r9
    d8f6:	add	r0, r3
    d8f8:	bl	bbe0 <memcpy>
		buffer[newlen] = 0;
    d8fc:	ldr	r3, [r4, #0]
    d8fe:	movs	r2, #0
    d900:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    d902:	str	r6, [r4, #8]
	return *this;
}
    d904:	mov	r0, r4
    d906:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    d90a:	ldr	r0, [r4, #0]
    d90c:	mov	r1, r7
    d90e:	ldr	r3, [r4, #8]
    d910:	add	r0, r3
    d912:	bl	f35c <strcpy>
    d916:	b.n	d902 <String::append(char const*, unsigned int)+0x5a>

0000d918 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    d918:	push	{r4, lr}
    d91a:	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    d91c:	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    d91e:	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    d920:	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    d922:	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    d926:	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    d928:	strb.w	r3, [sp, #5]
	append(buf, 1);
    d92c:	bl	d8a8 <String::append(char const*, unsigned int)>
	return *this;
}
    d930:	mov	r0, r4
    d932:	add	sp, #8
    d934:	pop	{r4, pc}
    d936:	nop

0000d938 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d938:	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    d93a:	push	{r3, lr}
    d93c:	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d93e:	cbnz	r2, d94c <String::equals(char const*) const+0x14>
    d940:	cbz	r1, d960 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    d942:	ldrb	r0, [r3, #0]
    d944:	clz	r0, r0
    d948:	lsrs	r0, r0, #5
    d94a:	pop	{r3, pc}
    d94c:	cbz	r1, d95c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    d94e:	ldr	r0, [r0, #0]
    d950:	bl	f088 <strcmp>
    d954:	clz	r0, r0
    d958:	lsrs	r0, r0, #5
}
    d95a:	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    d95c:	ldr	r3, [r0, #0]
    d95e:	b.n	d942 <String::equals(char const*) const+0xa>
    d960:	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d962:	pop	{r3, pc}

0000d964 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    d964:	cbz	r2, d996 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    d966:	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    d968:	clz	r4, r1
    d96c:	lsrs	r4, r4, #5
    d96e:	cbnz	r4, d990 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    d970:	ldr	r6, [r0, #8]
    d972:	cmp	r6, r3
    d974:	bls.n	d992 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    d976:	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    d978:	subs	r2, #1
    d97a:	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    d97c:	ldr	r1, [r0, #0]
    d97e:	cmp	r6, r2
    d980:	mov	r0, r5
    d982:	add	r1, r3
    d984:	it	cs
    d986:	movcs	r6, r2
    d988:	mov	r2, r6
    d98a:	bl	f51c <strncpy>
	buf[n] = 0;
    d98e:	strb	r4, [r5, r6]
    d990:	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    d992:	strb	r4, [r1, #0]
		return;
    d994:	pop	{r4, r5, r6, pc}
    d996:	bx	lr

0000d998 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    d998:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    d99a:	ldr	r4, [pc, #132]	; (da20 <yield+0x88>)
    d99c:	ldrb	r3, [r4, #0]
    d99e:	cbnz	r3, d9c2 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d9a0:	ldr	r3, [pc, #128]	; (da24 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    d9a2:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d9a4:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    d9a6:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d9a8:	cbnz	r3, d9f2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    d9aa:	ldr	r3, [pc, #124]	; (da28 <yield+0x90>)
    d9ac:	ldrb	r3, [r3, #0]
    d9ae:	cmp	r3, #0
    d9b0:	bne.n	da06 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    d9b2:	ldr	r3, [pc, #120]	; (da2c <yield+0x94>)

	running = 0;
    d9b4:	movs	r1, #0
    d9b6:	ldr	r2, [r3, #0]
    d9b8:	strb	r1, [r4, #0]
    d9ba:	cbz	r2, d9c2 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d9bc:	mrs	r2, IPSR
		if (ipsr != 0) return;
    d9c0:	cbz	r2, d9c4 <yield+0x2c>
    d9c2:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d9c4:	mrs	r0, PRIMASK
		__disable_irq();
    d9c8:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    d9ca:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    d9cc:	cbz	r2, da0c <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    d9ce:	ldr	r4, [pc, #96]	; (da30 <yield+0x98>)
    d9d0:	ldrb	r1, [r4, #0]
    d9d2:	cbnz	r1, da0c <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    d9d4:	movs	r6, #1
		firstYield = first->_next;
    d9d6:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    d9d8:	strb	r6, [r4, #0]
		firstYield = first->_next;
    d9da:	str	r5, [r3, #0]
		if (firstYield) {
    d9dc:	cbz	r5, da14 <yield+0x7c>
			firstYield->_prev = nullptr;
    d9de:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d9e0:	cbnz	r0, d9e4 <yield+0x4c>
    d9e2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    d9e4:	movs	r5, #0
		(*(first->_function))(*first);
    d9e6:	ldr	r3, [r2, #8]
    d9e8:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    d9ea:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    d9ec:	blx	r3
		runningFromYield = false;
    d9ee:	strb	r5, [r4, #0]
    d9f0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    d9f2:	bl	c030 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d9f6:	cmp	r0, #0
    d9f8:	beq.n	d9aa <yield+0x12>
    d9fa:	bl	dd34 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    d9fe:	ldr	r3, [pc, #40]	; (da28 <yield+0x90>)
    da00:	ldrb	r3, [r3, #0]
    da02:	cmp	r3, #0
    da04:	beq.n	d9b2 <yield+0x1a>
    da06:	bl	d77c <HardwareSerial::processSerialEvents()>
    da0a:	b.n	d9b2 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    da0c:	cmp	r0, #0
    da0e:	bne.n	d9c2 <yield+0x2a>
    da10:	cpsie	i
    da12:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    da14:	ldr	r3, [pc, #28]	; (da34 <yield+0x9c>)
    da16:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    da18:	cmp	r0, #0
    da1a:	bne.n	d9e4 <yield+0x4c>
    da1c:	b.n	d9e2 <yield+0x4a>
    da1e:	nop
    da20:	.word	0x2000dfb9
    da24:	.word	0x20000f08
    da28:	.word	0x2000dfb8
    da2c:	.word	0x2000e7d0
    da30:	.word	0x2000e7d4
    da34:	.word	0x2000e7cc

0000da38 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    da38:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    da3a:	ldr	r4, [pc, #100]	; (daa0 <random(unsigned long) [clone .part.0]+0x68>)
    da3c:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    da3e:	cbz	r3, da84 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    da40:	ldr	r1, [pc, #96]	; (daa4 <random(unsigned long) [clone .part.0]+0x6c>)
    da42:	asrs	r5, r3, #31
    da44:	ldr.w	lr, [pc, #104]	; dab0 <random(unsigned long) [clone .part.0]+0x78>
    da48:	smull	r6, r7, r3, r1
    da4c:	ldr	r6, [pc, #88]	; (daa8 <random(unsigned long) [clone .part.0]+0x70>)
    da4e:	smull	r2, r1, r1, r3
    da52:	adds	r2, r3, r7
    da54:	add	r1, r3
    da56:	rsb	r2, r5, r2, asr #16
    da5a:	rsb	r1, r5, r1, asr #16
    da5e:	movw	r5, #16807	; 0x41a7
    da62:	mls	r2, lr, r2, r3
    da66:	mul.w	r1, r6, r1
    da6a:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    da6e:	cmp	r3, #0
    da70:	bge.n	da92 <random(unsigned long) [clone .part.0]+0x5a>
    da72:	mvn.w	r2, #2147483648	; 0x80000000
    da76:	add	r2, r3
    da78:	udiv	r3, r2, r0
	seed = x;
    da7c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da7e:	mls	r0, r0, r3, r2
    da82:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    da84:	ldr	r2, [pc, #36]	; (daac <random(unsigned long) [clone .part.0]+0x74>)
    da86:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    da8a:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da8c:	mls	r0, r0, r3, r2
    da90:	pop	{r4, r5, r6, r7, pc}
    da92:	mov	r2, r3
    da94:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    da98:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da9a:	mls	r0, r0, r3, r2
    da9e:	pop	{r4, r5, r6, r7, pc}
    daa0:	.word	0x2000dfbc
    daa4:	.word	0x834e0b5f
    daa8:	.word	0xfffff4ec
    daac:	.word	0x1f0cce42
    dab0:	.word	0x0001f31d

0000dab4 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    dab4:	cbz	r0, daba <randomSeed(unsigned long)+0x6>
    dab6:	ldr	r3, [pc, #4]	; (dabc <randomSeed(unsigned long)+0x8>)
    dab8:	str	r0, [r3, #0]
    daba:	bx	lr
    dabc:	.word	0x2000dfbc

0000dac0 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    dac0:	cbz	r0, dac6 <random(unsigned long)+0x6>
    dac2:	b.w	da38 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    dac6:	bx	lr

0000dac8 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    dac8:	cmp	r0, r1
    daca:	bge.n	dada <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    dacc:	push	{r4, lr}
    dace:	mov	r4, r0
    dad0:	subs	r0, r1, r0
    dad2:	bl	da38 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    dad6:	add	r0, r4
}
    dad8:	pop	{r4, pc}
    dada:	bx	lr

0000dadc <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    dadc:	ldr	r0, [pc, #4]	; (dae4 <IRQHandler_Serial1+0x8>)
    dade:	b.w	d628 <HardwareSerial::IRQHandler()>
    dae2:	nop
    dae4:	.word	0x20000ea8

0000dae8 <serialEvent1()>:
};
HardwareSerial Serial1(&IMXRT_LPUART6, &UART6_Hardware, tx_buffer1, SERIAL1_TX_BUFFER_SIZE,
	rx_buffer1,  SERIAL1_RX_BUFFER_SIZE);

void serialEvent1() __attribute__((weak));
void serialEvent1() {Serial1.disableSerialEvents(); }		// No use calling this so disable if called...
    dae8:	ldr	r0, [pc, #4]	; (daf0 <serialEvent1()+0x8>)
    daea:	b.w	d7a4 <HardwareSerial::disableSerialEvents()>
    daee:	nop
    daf0:	.word	0x20000ea8

0000daf4 <serial_event_check_serial1()>:
{
	Serial1.IRQHandler();
}

void serial_event_check_serial1()
{
    daf4:	push	{r3, lr}
	if (Serial1.available()) serialEvent1();
    daf6:	ldr	r0, [pc, #12]	; (db04 <serial_event_check_serial1()+0x10>)
    daf8:	bl	d208 <HardwareSerial::available()>
    dafc:	cbz	r0, db02 <serial_event_check_serial1()+0xe>
    dafe:	bl	dae8 <serialEvent1()>
    db02:	pop	{r3, pc}
    db04:	.word	0x20000ea8

0000db08 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    db08:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    db0a:	mrs	r2, PRIMASK
		__disable_irq();
    db0e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    db10:	ldrb	r3, [r0, #29]
    db12:	cbnz	r3, db22 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    db14:	ldrb	r1, [r0, #28]
    db16:	cmp	r1, #1
    db18:	beq.n	db2c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    db1a:	cmp	r1, #3
    db1c:	beq.n	db40 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    db1e:	movs	r3, #1
    db20:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    db22:	cbnz	r2, db26 <EventResponder::triggerEventNotImmediate()+0x1e>
    db24:	cpsie	i
	}
	enableInterrupts(irq);
}
    db26:	ldr.w	r4, [sp], #4
    db2a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    db2c:	ldr	r4, [pc, #68]	; (db74 <EventResponder::triggerEventNotImmediate()+0x6c>)
    db2e:	ldr	r1, [r4, #0]
    db30:	cbz	r1, db5c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    db32:	ldr	r1, [pc, #68]	; (db78 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    db34:	str	r3, [r0, #20]
				_prev = lastYield;
    db36:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    db38:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    db3a:	str	r3, [r0, #24]
				_prev->_next = this;
    db3c:	str	r0, [r3, #20]
    db3e:	b.n	db1e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    db40:	ldr	r4, [pc, #56]	; (db7c <EventResponder::triggerEventNotImmediate()+0x74>)
    db42:	ldr	r1, [r4, #0]
    db44:	cbz	r1, db68 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    db46:	ldr	r1, [pc, #56]	; (db80 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    db48:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    db4a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    db4c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    db4e:	str	r3, [r0, #24]
				_prev->_next = this;
    db50:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    db52:	ldr	r3, [pc, #48]	; (db84 <EventResponder::triggerEventNotImmediate()+0x7c>)
    db54:	mov.w	r1, #268435456	; 0x10000000
    db58:	str	r1, [r3, #0]
    db5a:	b.n	db1e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    db5c:	ldr	r3, [pc, #24]	; (db78 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    db5e:	str	r1, [r0, #20]
				_prev = nullptr;
    db60:	str	r1, [r0, #24]
				firstYield = this;
    db62:	str	r0, [r4, #0]
				lastYield = this;
    db64:	str	r0, [r3, #0]
    db66:	b.n	db1e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    db68:	ldr	r3, [pc, #20]	; (db80 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    db6a:	str	r1, [r0, #20]
				_prev = nullptr;
    db6c:	str	r1, [r0, #24]
				firstInterrupt = this;
    db6e:	str	r0, [r4, #0]
				lastInterrupt = this;
    db70:	str	r0, [r3, #0]
    db72:	b.n	db52 <EventResponder::triggerEventNotImmediate()+0x4a>
    db74:	.word	0x2000e7d0
    db78:	.word	0x2000e7cc
    db7c:	.word	0x2000e7c0
    db80:	.word	0x2000e7c4
    db84:	.word	0xe000ed04

0000db88 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    db88:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    db8a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    db8c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    db8e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    db90:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    db92:	beq.n	db9c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    db94:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    db98:	b.w	db08 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    db9c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    db9e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    dba2:	bx	r3

0000dba4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    dba4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dba6:	mrs	r1, PRIMASK
		__disable_irq();
    dbaa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dbac:	ldr	r4, [pc, #48]	; (dbe0 <EventResponder::runFromInterrupt()+0x3c>)
    dbae:	ldr	r3, [r4, #0]
		if (first) {
    dbb0:	cbz	r3, dbd6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dbb2:	ldr	r6, [pc, #48]	; (dbe4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    dbb4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    dbb6:	ldr	r2, [r3, #20]
    dbb8:	str	r2, [r4, #0]
			if (firstInterrupt) {
    dbba:	cbz	r2, dbdc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    dbbc:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dbbe:	cbnz	r1, dbc2 <EventResponder::runFromInterrupt()+0x1e>
    dbc0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    dbc2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    dbc4:	mov	r0, r3
    dbc6:	ldr	r3, [r3, #8]
    dbc8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dbca:	mrs	r1, PRIMASK
		__disable_irq();
    dbce:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dbd0:	ldr	r3, [r4, #0]
		if (first) {
    dbd2:	cmp	r3, #0
    dbd4:	bne.n	dbb6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dbd6:	cbnz	r1, dbda <EventResponder::runFromInterrupt()+0x36>
    dbd8:	cpsie	i
    dbda:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dbdc:	str	r2, [r6, #0]
    dbde:	b.n	dbbe <EventResponder::runFromInterrupt()+0x1a>
    dbe0:	.word	0x2000e7c0
    dbe4:	.word	0x2000e7c4

0000dbe8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    dbe8:	b.w	dba4 <EventResponder::runFromInterrupt()>

0000dbec <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    dbec:	ldr	r2, [pc, #96]	; (dc50 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    dbee:	push	{r4, r5}
	if (listActive == nullptr) {
    dbf0:	ldr	r4, [r2, #0]
    dbf2:	cmp	r4, #0
    dbf4:	beq.n	dc48 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    dbf6:	ldr	r3, [r0, #0]
    dbf8:	ldr	r1, [r4, #0]
    dbfa:	cmp	r3, r1
    dbfc:	bcs.n	dc1e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    dbfe:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    dc00:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    dc02:	str	r4, [r0, #8]
		_prev = nullptr;
    dc04:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    dc06:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    dc08:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    dc0a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    dc0c:	movs	r3, #2
}
    dc0e:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    dc10:	strb	r3, [r0, #20]
}
    dc12:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    dc14:	str	r3, [r0, #0]
    dc16:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    dc18:	ldr	r1, [r2, #0]
    dc1a:	cmp	r3, r1
    dc1c:	bcc.n	dc30 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    dc1e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    dc20:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    dc22:	cmp	r2, #0
    dc24:	bne.n	dc14 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    dc26:	str	r2, [r0, #8]
		_prev = timer;
    dc28:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    dc2a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    dc2c:	str	r0, [r4, #8]
    dc2e:	b.n	dc0c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    dc30:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    dc32:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    dc34:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    dc36:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    dc38:	str	r5, [r0, #12]
				timer->_prev = this;
    dc3a:	str	r0, [r4, #12]
				_prev->_next = this;
    dc3c:	ldr	r1, [r0, #12]
    dc3e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    dc40:	str	r3, [r4, #0]
				_state = TimerActive;
    dc42:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    dc44:	pop	{r4, r5}
    dc46:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    dc48:	str	r4, [r0, #8]
		_prev = nullptr;
    dc4a:	str	r4, [r0, #12]
		listActive = this;
    dc4c:	str	r0, [r2, #0]
    dc4e:	b.n	dc0c <MillisTimer::addToActiveList()+0x20>
    dc50:	.word	0x2000e7c8

0000dc54 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    dc54:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    dc56:	ldr	r6, [pc, #136]	; (dce0 <MillisTimer::runFromTimer()+0x8c>)
    dc58:	ldr	r4, [r6, #0]
	while (timer) {
    dc5a:	cbz	r4, dca8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    dc5c:	ldr	r3, [r4, #0]
    dc5e:	cmp	r3, #0
    dc60:	bne.n	dcd8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    dc62:	mov	r5, r3
    dc64:	ldr	r7, [pc, #124]	; (dce4 <MillisTimer::runFromTimer()+0x90>)
    dc66:	b.n	dc72 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    dc68:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    dc6a:	cbz	r4, dca8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    dc6c:	ldr	r3, [r4, #0]
    dc6e:	cmp	r3, #0
    dc70:	bne.n	dcd8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    dc72:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    dc74:	cbz	r3, dc78 <MillisTimer::runFromTimer()+0x24>
    dc76:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    dc78:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    dc7a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dc7c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    dc7e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dc80:	ldr	r3, [r3, #0]
    dc82:	cmp	r3, r7
    dc84:	bne.n	dcca <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    dc86:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    dc88:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    dc8a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    dc8c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    dc8e:	beq.n	dcd2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    dc90:	bl	db08 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    dc94:	ldr	r3, [r4, #4]
    dc96:	cmp	r3, #0
    dc98:	beq.n	dc68 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    dc9a:	str	r3, [r4, #0]
				timer->addToActiveList();
    dc9c:	mov	r0, r4
    dc9e:	bl	dbec <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    dca2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    dca4:	cmp	r4, #0
    dca6:	bne.n	dc6c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dca8:	mrs	r3, PRIMASK
		__disable_irq();
    dcac:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    dcae:	ldr	r2, [pc, #56]	; (dce8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    dcb0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    dcb2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    dcb4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    dcb6:	cbnz	r3, dcba <MillisTimer::runFromTimer()+0x66>
    dcb8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    dcba:	cbz	r0, dcc8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    dcbc:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    dcbe:	bl	dbec <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    dcc2:	mov	r0, r4
    dcc4:	cmp	r0, #0
    dcc6:	bne.n	dcbc <MillisTimer::runFromTimer()+0x68>
    dcc8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dcca:	mov	r2, r4
    dccc:	movs	r1, #0
    dcce:	blx	r3
    dcd0:	b.n	dc94 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    dcd2:	ldr	r3, [r0, #8]
    dcd4:	blx	r3
    dcd6:	b.n	dc94 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    dcd8:	subs	r3, #1
    dcda:	str	r3, [r4, #0]
			break;
    dcdc:	b.n	dca8 <MillisTimer::runFromTimer()+0x54>
    dcde:	nop
    dce0:	.word	0x2000e7c8
    dce4:	.word	0x0000db89
    dce8:	.word	0x2000e7d8

0000dcec <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    dcec:	ldr	r2, [pc, #16]	; (dd00 <systick_isr+0x14>)
    dcee:	ldr	r3, [pc, #20]	; (dd04 <systick_isr+0x18>)
    dcf0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    dcf2:	ldr	r2, [pc, #20]	; (dd08 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    dcf4:	str	r1, [r3, #0]
	systick_millis_count++;
    dcf6:	ldr	r3, [r2, #0]
    dcf8:	adds	r3, #1
    dcfa:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    dcfc:	b.w	dc54 <MillisTimer::runFromTimer()>
    dd00:	.word	0xe0001004
    dd04:	.word	0x2000df94
    dd08:	.word	0x2000df98

0000dd0c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    dd0c:	b.w	c044 <usb_serial_flush_input>

0000dd10 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    dd10:	b.w	c00c <usb_serial_peekchar>

0000dd14 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    dd14:	b.w	bfc0 <usb_serial_getchar>

0000dd18 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    dd18:	b.w	c030 <usb_serial_available>

0000dd1c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    dd1c:	b.w	c110 <usb_serial_flush_output>

0000dd20 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    dd20:	b.w	c0c4 <usb_serial_write_buffer_free>

0000dd24 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dd24:	mov	r0, r1
    dd26:	mov	r1, r2
    dd28:	b.w	c0ac <usb_serial_write>

0000dd2c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dd2c:	mov	r0, r1
    dd2e:	b.w	c080 <usb_serial_putchar>
    dd32:	nop

0000dd34 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    dd34:	ldr	r3, [pc, #4]	; (dd3c <serialEvent()+0x8>)
    dd36:	movs	r2, #0
    dd38:	strb	r2, [r3, #0]
    dd3a:	bx	lr
    dd3c:	.word	0x20000f08

0000dd40 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    dd40:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    dd42:	mov	r6, r1
    dd44:	cbz	r1, dd64 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    dd46:	cbz	r2, dd68 <Print::write(unsigned char const*, unsigned int)+0x28>
    dd48:	mov	r7, r0
    dd4a:	mov	r4, r2
    dd4c:	movs	r5, #0
    dd4e:	ldr	r3, [r7, #0]
    dd50:	mov	r0, r7
    dd52:	ldrb.w	r1, [r6], #1
    dd56:	ldr	r3, [r3, #0]
    dd58:	blx	r3
    dd5a:	subs	r4, #1
    dd5c:	add	r5, r0
    dd5e:	bne.n	dd4e <Print::write(unsigned char const*, unsigned int)+0xe>
    dd60:	mov	r0, r5
    dd62:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    dd64:	mov	r0, r1
    dd66:	pop	{r3, r4, r5, r6, r7, pc}
    dd68:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    dd6a:	pop	{r3, r4, r5, r6, r7, pc}

0000dd6c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    dd6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd70:	ldr	r4, [r1, #8]
    dd72:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    dd74:	cbz	r4, ddb2 <Print::print(String const&)+0x46>
    dd76:	movs	r5, #0
    dd78:	mov	r6, r0
    dd7a:	mov	r9, r1
    dd7c:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    dd7e:	mov	r3, r5
    dd80:	movs	r2, #33	; 0x21
    dd82:	add	r1, sp, #4
    dd84:	mov	r0, r9
    dd86:	bl	d964 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    dd8a:	cmp	r4, #32
    dd8c:	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    dd8e:	ldr	r0, [r6, #0]
    dd90:	it	cs
    dd92:	movcs	r3, #32
    dd94:	add	r1, sp, #4
    dd96:	ldr.w	r8, [r0, #4]
    dd9a:	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    dd9c:	subs	r4, r4, r3
		count += write(buffer, nbytes);
    dd9e:	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    dda0:	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    dda2:	blx	r8
    dda4:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    dda6:	cmp	r4, #0
    dda8:	bne.n	dd7e <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    ddaa:	mov	r0, r7
    ddac:	add	sp, #44	; 0x2c
    ddae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    ddb2:	mov	r7, r4
    ddb4:	b.n	ddaa <Print::print(String const&)+0x3e>
    ddb6:	nop

0000ddb8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ddb8:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    ddba:	ldr	r4, [pc, #24]	; (ddd4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ddbc:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ddbe:	ldr	r3, [r0, #0]
    ddc0:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ddc2:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    ddc4:	add	r1, sp, #4
    ddc6:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ddc8:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    ddcc:	blx	r3
}
    ddce:	add	sp, #8
    ddd0:	pop	{r4, pc}
    ddd2:	nop
    ddd4:	.word	0x20000954

0000ddd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ddd8:	push	{r4, r5, r6, r7, lr}
    ddda:	mov	r6, r0
    dddc:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ddde:	cmp	r2, #0
    dde0:	beq.n	de4a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    dde2:	cmp	r2, #1
    dde4:	it	eq
    dde6:	moveq	r2, #10
	}


	if (n == 0) {
    dde8:	cbz	r1, de40 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ddea:	movs	r5, #33	; 0x21
    ddec:	b.n	ddf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ddee:	uxtb	r5, r7
    ddf0:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ddf2:	udiv	r4, r1, r2
    ddf6:	mls	r1, r2, r4, r1
    ddfa:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ddfc:	cmp	r1, #9
    ddfe:	add.w	r1, r0, #55	; 0x37
    de02:	add.w	r0, r0, #48	; 0x30
    de06:	it	hi
    de08:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    de0a:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    de0c:	add	r4, sp, #40	; 0x28
    de0e:	it	ls
    de10:	uxtbls	r0, r0
    de12:	add	r4, r5
    de14:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    de18:	cmp	r1, #0
    de1a:	bne.n	ddee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    de1c:	cbz	r3, de2c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    de1e:	subs	r5, #1
		buf[i] = '-';
    de20:	add	r3, sp, #40	; 0x28
    de22:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    de24:	uxtb	r5, r5
		buf[i] = '-';
    de26:	add	r3, r5
    de28:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    de2c:	ldr	r3, [r6, #0]
    de2e:	add	r1, sp, #4
    de30:	rsb	r2, r5, #34	; 0x22
    de34:	mov	r0, r6
    de36:	add	r1, r5
    de38:	ldr	r3, [r3, #4]
    de3a:	blx	r3
}
    de3c:	add	sp, #44	; 0x2c
    de3e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    de40:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    de42:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    de44:	strb.w	r2, [sp, #37]	; 0x25
    de48:	b.n	de1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    de4a:	ldr	r3, [r0, #0]
    de4c:	uxtb	r1, r1
    de4e:	ldr	r3, [r3, #0]
    de50:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    de52:	add	sp, #44	; 0x2c
    de54:	pop	{r4, r5, r6, r7, pc}
    de56:	nop

0000de58 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    de58:	cmp	r1, #0
    de5a:	blt.n	de64 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    de5c:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    de5e:	movs	r2, #10
    de60:	b.w	ddd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    de64:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    de66:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    de68:	movs	r2, #10
    de6a:	b.w	ddd8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    de6e:	nop

0000de70 <operator new(unsigned int)>:
    de70:	b.w	e564 <malloc>

0000de74 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    de74:	movs	r0, #4
    de76:	mov	r1, lr
    de78:	tst	r0, r1
    de7a:	beq.n	de84 <_MSP>
    de7c:	mrs	r0, PSP
    de80:	b.w	de8c <HardFault_HandlerC>

0000de84 <_MSP>:
    de84:	mrs	r0, MSP
    de88:	b.w	de8c <HardFault_HandlerC>

0000de8c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    de8c:	ldr	r3, [pc, #108]	; (defc <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    de8e:	movs	r1, #5
    de90:	ldr	r2, [pc, #108]	; (df00 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    de92:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    de94:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    de96:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    de9a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    de9c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    dea0:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    dea2:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    dea4:	ldr	r4, [pc, #92]	; (df04 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    dea6:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    dea8:	ldr	r0, [pc, #92]	; (df08 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    deaa:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    deac:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    deb0:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    deb4:	ldr	r3, [r4, #0]
    deb6:	cmp	r3, r0
    deb8:	bls.n	dec0 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    deba:	ldr	r0, [pc, #80]	; (df0c <HardFault_HandlerC+0x80>)
    debc:	bl	c17c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    dec0:	ldr	r5, [pc, #56]	; (defc <HardFault_HandlerC+0x70>)
    dec2:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    dec4:	movs	r0, #0
    dec6:	ldr	r2, [pc, #72]	; (df10 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    dec8:	ldr	r1, [pc, #72]	; (df14 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    deca:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    dece:	str	r0, [sp, #4]
    ded0:	ldr	r3, [sp, #4]
    ded2:	cmp	r3, r2
    ded4:	bhi.n	dee2 <HardFault_HandlerC+0x56>
    ded6:	ldr	r3, [sp, #4]
    ded8:	adds	r3, #1
    deda:	str	r3, [sp, #4]
    dedc:	ldr	r3, [sp, #4]
    dede:	cmp	r3, r2
    dee0:	bls.n	ded6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    dee2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    dee6:	str	r0, [sp, #4]
    dee8:	ldr	r3, [sp, #4]
    deea:	cmp	r3, r1
    deec:	bhi.n	deca <HardFault_HandlerC+0x3e>
    deee:	ldr	r3, [sp, #4]
    def0:	adds	r3, #1
    def2:	str	r3, [sp, #4]
    def4:	ldr	r3, [sp, #4]
    def6:	cmp	r3, r1
    def8:	bls.n	deee <HardFault_HandlerC+0x62>
    defa:	b.n	deca <HardFault_HandlerC+0x3e>
    defc:	.word	0x401bc000
    df00:	.word	0x401f8000
    df04:	.word	0x20000df4
    df08:	.word	0x23c345ff
    df0c:	.word	0x11e1a300
    df10:	.word	0x000f423f
    df14:	.word	0x0089543f

0000df18 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    df18:	ldr	r2, [pc, #36]	; (df40 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    df1a:	push	{r3, lr}
        char *prev = __brkval;
    df1c:	ldr	r3, [r2, #0]
        if (incr != 0) {
    df1e:	cbz	r0, df2a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    df20:	add	r0, r3
    df22:	ldr	r1, [pc, #32]	; (df44 <_sbrk+0x2c>)
    df24:	cmp	r0, r1
    df26:	bhi.n	df2e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    df28:	str	r0, [r2, #0]
        }
        return prev;
}
    df2a:	mov	r0, r3
    df2c:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    df2e:	bl	e508 <__errno>
    df32:	movs	r2, #12
                        return (void *)-1;
    df34:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    df38:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    df3a:	mov	r0, r3
    df3c:	pop	{r3, pc}
    df3e:	nop
    df40:	.word	0x20000f1c
    df44:	.word	0x20280000

0000df48 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    df48:	push	{r4, r5, r6, r7}
    df4a:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    df4c:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    df4e:	mov	r7, r6
    df50:	b.n	df54 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    df52:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    df54:	udiv	r3, r0, r2
    df58:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    df5c:	add.w	r4, r0, #55	; 0x37
    df60:	cmp	r0, #9
    df62:	add.w	r0, r0, #48	; 0x30
    df66:	uxtb	r4, r4
    df68:	it	ls
    df6a:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    df6c:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    df6e:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    df72:	cmp	r3, #0
    df74:	bne.n	df52 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    df76:	adds	r2, r1, r5
    df78:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    df7a:	cbz	r5, df90 <ultoa+0x48>
    df7c:	adds	r3, #1
		t = buf[j];
    df7e:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    df82:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df84:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    df86:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df88:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    df8a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df8e:	blt.n	df7c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    df90:	mov	r0, r1
    df92:	pop	{r4, r5, r6, r7}
    df94:	bx	lr
    df96:	nop

0000df98 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    df98:	ldr	r0, [pc, #656]	; (e22c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    df9a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    df9e:	ldr	r3, [pc, #656]	; (e230 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    dfa0:	ldr	r2, [r0, #120]	; 0x78
    dfa2:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    dfa6:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    dfa8:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    dfaa:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfac:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dfb0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfb4:	ldr	r4, [pc, #636]	; (e234 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dfb6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    dfba:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dfbc:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfc0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    dfc2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfc4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dfc8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    dfcc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    dfd0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    dfd4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    dfd8:	ldrh.w	r0, [r3, #392]	; 0x188
    dfdc:	uxth	r0, r0
    dfde:	orr.w	r0, r0, #240	; 0xf0
    dfe2:	strh.w	r0, [r3, #392]	; 0x188
    dfe6:	add.w	r0, r1, r1, lsl #1
    dfea:	ldr	r3, [pc, #580]	; (e230 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    dfec:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    dfee:	movs	r5, #0
    dff0:	lsls	r0, r0, #5
    dff2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    dff4:	cmp	r1, #4
    dff6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dff8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dffc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    dffe:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e000:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e002:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e004:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e006:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    e008:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e00a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e00c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e00e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e010:	bne.n	dfe6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e012:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e016:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e01a:	ldr	r3, [pc, #540]	; (e238 <pwm_init+0x2a0>)
    e01c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e020:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e022:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e024:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e028:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e02a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e02e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e032:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e036:	ldrh.w	r0, [r4, #392]	; 0x188
    e03a:	uxth	r0, r0
    e03c:	orr.w	r0, r0, #3840	; 0xf00
    e040:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e044:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e048:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e04c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e050:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e054:	ldrh.w	r0, [r3, #392]	; 0x188
    e058:	uxth	r0, r0
    e05a:	orr.w	r0, r0, #240	; 0xf0
    e05e:	strh.w	r0, [r3, #392]	; 0x188
    e062:	add.w	r0, r1, r1, lsl #1
    e066:	ldr	r3, [pc, #464]	; (e238 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    e068:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e06a:	movs	r5, #0
    e06c:	lsls	r0, r0, #5
    e06e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e070:	cmp	r1, #4
    e072:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e074:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e076:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e07a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e07c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e07e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e080:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e082:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    e084:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e086:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e088:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e08a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e08c:	bne.n	e062 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e08e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e092:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e096:	ldr	r3, [pc, #420]	; (e23c <pwm_init+0x2a4>)
    e098:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e09c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e09e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e0a0:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e0a4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e0a6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e0aa:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e0ae:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e0b2:	ldrh.w	r0, [r4, #392]	; 0x188
    e0b6:	uxth	r0, r0
    e0b8:	orr.w	r0, r0, #3840	; 0xf00
    e0bc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e0c0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e0c4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e0c8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e0cc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e0d0:	ldrh.w	r0, [r3, #392]	; 0x188
    e0d4:	uxth	r0, r0
    e0d6:	orr.w	r0, r0, #240	; 0xf0
    e0da:	strh.w	r0, [r3, #392]	; 0x188
    e0de:	add.w	r0, r1, r1, lsl #1
    e0e2:	ldr	r3, [pc, #344]	; (e23c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    e0e4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e0e6:	movs	r5, #0
    e0e8:	lsls	r0, r0, #5
    e0ea:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e0ec:	cmp	r1, #4
    e0ee:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e0f0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e0f2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e0f6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e0f8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e0fa:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e0fc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e0fe:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    e100:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e102:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e104:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e106:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e108:	bne.n	e0de <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e10a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e10e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e112:	ldr	r3, [pc, #300]	; (e240 <pwm_init+0x2a8>)
    e114:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e118:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e11a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e11c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e120:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e122:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e126:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e12a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e12e:	ldrh.w	r0, [r4, #392]	; 0x188
    e132:	uxth	r0, r0
    e134:	orr.w	r0, r0, #3840	; 0xf00
    e138:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e13c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e140:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e144:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e148:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e14c:	ldrh.w	r0, [r3, #392]	; 0x188
    e150:	uxth	r0, r0
    e152:	orr.w	r0, r0, #240	; 0xf0
    e156:	strh.w	r0, [r3, #392]	; 0x188
    e15a:	add.w	r0, r1, r1, lsl #1
    e15e:	ldr	r3, [pc, #224]	; (e240 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    e160:	adds	r1, #1
    e162:	lsls	r0, r0, #5
    e164:	mov	r4, r3
    e166:	cmp	r1, #4
    e168:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e16a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e16c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e170:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e172:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e174:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e176:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e178:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    e17a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e17c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e17e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e180:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e182:	bne.n	e15a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e184:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e188:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e18a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e18c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e190:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e192:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e196:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e198:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e19c:	orrs	r3, r7
    e19e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e1a2:	ldrh.w	r3, [r4, #392]	; 0x188
    e1a6:	uxth	r3, r3
    e1a8:	orr.w	r3, r3, #3840	; 0xf00
    e1ac:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1b0:	lsls	r0, r2, #5
    e1b2:	ldr	r3, [pc, #144]	; (e244 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1b4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e1b6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1b8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e1ba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e1bc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1be:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1c0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1c2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e1c6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e1c8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1ca:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1cc:	bne.n	e1b0 <pwm_init+0x218>
    e1ce:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1d0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1d2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1d6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1da:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1dc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1e0:	lsls	r0, r2, #5
    e1e2:	ldr	r3, [pc, #100]	; (e248 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1e4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e1e6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1e8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e1ea:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e1ec:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1ee:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1f0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1f2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e1f4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e1f6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1f8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1fa:	bne.n	e1e0 <pwm_init+0x248>
    e1fc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1fe:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e200:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e204:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e208:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e20a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e20e:	lsls	r0, r2, #5
    e210:	ldr	r3, [pc, #56]	; (e24c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e212:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e214:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e216:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e218:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e21a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e21c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e21e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e220:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e222:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e224:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e226:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e228:	bne.n	e20e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    e22a:	pop	{r4, r5, r6, r7, pc}
    e22c:	.word	0x400fc000
    e230:	.word	0x403dc000
    e234:	.word	0xfc030000
    e238:	.word	0x403e0000
    e23c:	.word	0x403e4000
    e240:	.word	0x403e8000
    e244:	.word	0x401dc000
    e248:	.word	0x401e0000
    e24c:	.word	0x401e4000

0000e250 <sqrt>:
    e250:	push	{lr}
    e252:	vpush	{d8}
    e256:	vmov.f64	d8, d0
    e25a:	sub	sp, #44	; 0x2c
    e25c:	bl	e2f8 <__ieee754_sqrt>
    e260:	ldr	r3, [pc, #140]	; (e2f0 <sqrt+0xa0>)
    e262:	ldrsb.w	r3, [r3]
    e266:	adds	r2, r3, #1
    e268:	beq.n	e282 <sqrt+0x32>
    e26a:	vcmp.f64	d8, d8
    e26e:	vmrs	APSR_nzcv, fpscr
    e272:	bvs.n	e282 <sqrt+0x32>
    e274:	vldr	d7, [pc, #112]	; e2e8 <sqrt+0x98>
    e278:	vcmpe.f64	d8, d7
    e27c:	vmrs	APSR_nzcv, fpscr
    e280:	bmi.n	e28c <sqrt+0x3c>
    e282:	add	sp, #44	; 0x2c
    e284:	vpop	{d8}
    e288:	ldr.w	pc, [sp], #4
    e28c:	movs	r2, #1
    e28e:	ldr	r1, [pc, #100]	; (e2f4 <sqrt+0xa4>)
    e290:	str	r2, [sp, #0]
    e292:	movs	r2, #0
    e294:	vstr	d8, [sp, #16]
    e298:	vstr	d8, [sp, #8]
    e29c:	str	r1, [sp, #4]
    e29e:	str	r2, [sp, #32]
    e2a0:	cbz	r3, e2c8 <sqrt+0x78>
    e2a2:	vdiv.f64	d6, d7, d7
    e2a6:	cmp	r3, #2
    e2a8:	vstr	d6, [sp, #24]
    e2ac:	bne.n	e2cc <sqrt+0x7c>
    e2ae:	bl	e508 <__errno>
    e2b2:	movs	r3, #33	; 0x21
    e2b4:	str	r3, [r0, #0]
    e2b6:	ldr	r3, [sp, #32]
    e2b8:	cbnz	r3, e2d8 <sqrt+0x88>
    e2ba:	vldr	d0, [sp, #24]
    e2be:	add	sp, #44	; 0x2c
    e2c0:	vpop	{d8}
    e2c4:	ldr.w	pc, [sp], #4
    e2c8:	vstr	d7, [sp, #24]
    e2cc:	mov	r0, sp
    e2ce:	bl	e47c <matherr>
    e2d2:	cmp	r0, #0
    e2d4:	bne.n	e2b6 <sqrt+0x66>
    e2d6:	b.n	e2ae <sqrt+0x5e>
    e2d8:	bl	e508 <__errno>
    e2dc:	ldr	r3, [sp, #32]
    e2de:	str	r3, [r0, #0]
    e2e0:	b.n	e2ba <sqrt+0x6a>
    e2e2:	nop
    e2e4:	nop.w
	...
    e2f0:	.word	0x20000f20
    e2f4:	.word	0x20000958

0000e2f8 <__ieee754_sqrt>:
    e2f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2fc:	sub	sp, #8
    e2fe:	vstr	d0, [sp]
    e302:	ldr	r1, [pc, #372]	; (e478 <__ieee754_sqrt+0x180>)
    e304:	ldr	r3, [sp, #4]
    e306:	ldr	r0, [sp, #0]
    e308:	mov	r4, r1
    e30a:	ands	r1, r3
    e30c:	cmp	r1, r4
    e30e:	beq.w	e442 <__ieee754_sqrt+0x14a>
    e312:	cmp	r3, #0
    e314:	mov	r2, r0
    e316:	ble.n	e408 <__ieee754_sqrt+0x110>
    e318:	asrs	r7, r3, #20
    e31a:	beq.w	e422 <__ieee754_sqrt+0x12a>
    e31e:	subw	r7, r7, #1023	; 0x3ff
    e322:	ubfx	r3, r3, #0, #20
    e326:	lsls	r1, r7, #31
    e328:	orr.w	r3, r3, #1048576	; 0x100000
    e32c:	bmi.n	e3fe <__ieee754_sqrt+0x106>
    e32e:	add.w	r1, r3, r2, lsr #31
    e332:	movs	r6, #0
    e334:	add	r3, r1
    e336:	asrs	r7, r7, #1
    e338:	lsls	r2, r2, #1
    e33a:	mov	lr, r6
    e33c:	movs	r0, #22
    e33e:	mov.w	r1, #2097152	; 0x200000
    e342:	add.w	r4, lr, r1
    e346:	cmp	r4, r3
    e348:	mov.w	r5, r2, lsr #31
    e34c:	mov.w	r2, r2, lsl #1
    e350:	bgt.n	e35a <__ieee754_sqrt+0x62>
    e352:	subs	r3, r3, r4
    e354:	add.w	lr, r4, r1
    e358:	add	r6, r1
    e35a:	subs	r0, #1
    e35c:	add.w	r3, r5, r3, lsl #1
    e360:	mov.w	r1, r1, lsr #1
    e364:	bne.n	e342 <__ieee754_sqrt+0x4a>
    e366:	mov	ip, r0
    e368:	movs	r4, #32
    e36a:	mov.w	r1, #2147483648	; 0x80000000
    e36e:	b.n	e384 <__ieee754_sqrt+0x8c>
    e370:	beq.n	e3b4 <__ieee754_sqrt+0xbc>
    e372:	add.w	r5, r3, r2, lsr #31
    e376:	subs	r4, #1
    e378:	mov.w	r1, r1, lsr #1
    e37c:	add	r3, r5
    e37e:	mov.w	r2, r2, lsl #1
    e382:	beq.n	e3c6 <__ieee754_sqrt+0xce>
    e384:	cmp	lr, r3
    e386:	add.w	r5, r1, ip
    e38a:	bge.n	e370 <__ieee754_sqrt+0x78>
    e38c:	cmp	r5, #0
    e38e:	add.w	ip, r5, r1
    e392:	blt.n	e3a8 <__ieee754_sqrt+0xb0>
    e394:	mov	r8, lr
    e396:	cmp	r5, r2
    e398:	rsb	r3, lr, r3
    e39c:	bls.n	e3a0 <__ieee754_sqrt+0xa8>
    e39e:	subs	r3, #1
    e3a0:	subs	r2, r2, r5
    e3a2:	add	r0, r1
    e3a4:	mov	lr, r8
    e3a6:	b.n	e372 <__ieee754_sqrt+0x7a>
    e3a8:	cmp.w	ip, #0
    e3ac:	blt.n	e394 <__ieee754_sqrt+0x9c>
    e3ae:	add.w	r8, lr, #1
    e3b2:	b.n	e396 <__ieee754_sqrt+0x9e>
    e3b4:	cmp	r5, r2
    e3b6:	bhi.n	e3ee <__ieee754_sqrt+0xf6>
    e3b8:	cmp	r5, #0
    e3ba:	add.w	ip, r5, r1
    e3be:	blt.n	e452 <__ieee754_sqrt+0x15a>
    e3c0:	mov	r8, r3
    e3c2:	movs	r3, #0
    e3c4:	b.n	e3a0 <__ieee754_sqrt+0xa8>
    e3c6:	orrs	r3, r2
    e3c8:	bne.n	e3f2 <__ieee754_sqrt+0xfa>
    e3ca:	lsrs	r0, r0, #1
    e3cc:	asrs	r1, r6, #1
    e3ce:	lsls	r3, r6, #31
    e3d0:	add.w	r1, r1, #1069547520	; 0x3fc00000
    e3d4:	add.w	r1, r1, #2097152	; 0x200000
    e3d8:	it	mi
    e3da:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    e3de:	add.w	r3, r1, r7, lsl #20
    e3e2:	mov	r2, r0
    e3e4:	vmov	d0, r2, r3
    e3e8:	add	sp, #8
    e3ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3ee:	mov	r3, lr
    e3f0:	b.n	e372 <__ieee754_sqrt+0x7a>
    e3f2:	adds	r2, r0, #1
    e3f4:	beq.n	e45a <__ieee754_sqrt+0x162>
    e3f6:	and.w	r3, r0, #1
    e3fa:	add	r0, r3
    e3fc:	b.n	e3ca <__ieee754_sqrt+0xd2>
    e3fe:	lsls	r3, r3, #1
    e400:	add.w	r3, r3, r2, lsr #31
    e404:	lsls	r2, r2, #1
    e406:	b.n	e32e <__ieee754_sqrt+0x36>
    e408:	bic.w	r1, r3, #2147483648	; 0x80000000
    e40c:	orrs	r1, r0
    e40e:	beq.n	e44c <__ieee754_sqrt+0x154>
    e410:	cbnz	r3, e46a <__ieee754_sqrt+0x172>
    e412:	mov	r7, r3
    e414:	lsrs	r3, r2, #11
    e416:	subs	r7, #21
    e418:	lsls	r2, r2, #21
    e41a:	cmp	r3, #0
    e41c:	beq.n	e414 <__ieee754_sqrt+0x11c>
    e41e:	lsls	r5, r3, #11
    e420:	bmi.n	e460 <__ieee754_sqrt+0x168>
    e422:	movs	r1, #0
    e424:	b.n	e428 <__ieee754_sqrt+0x130>
    e426:	mov	r1, r0
    e428:	lsls	r3, r3, #1
    e42a:	lsls	r4, r3, #11
    e42c:	add.w	r0, r1, #1
    e430:	bpl.n	e426 <__ieee754_sqrt+0x12e>
    e432:	rsb	r4, r0, #32
    e436:	lsr.w	r4, r2, r4
    e43a:	orrs	r3, r4
    e43c:	subs	r7, r7, r1
    e43e:	lsls	r2, r0
    e440:	b.n	e31e <__ieee754_sqrt+0x26>
    e442:	vfma.f64	d0, d0, d0
    e446:	add	sp, #8
    e448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e44c:	vldr	d0, [sp]
    e450:	b.n	e3e8 <__ieee754_sqrt+0xf0>
    e452:	cmp.w	ip, #0
    e456:	bge.n	e3ae <__ieee754_sqrt+0xb6>
    e458:	b.n	e3c0 <__ieee754_sqrt+0xc8>
    e45a:	adds	r6, #1
    e45c:	mov	r0, r4
    e45e:	b.n	e3cc <__ieee754_sqrt+0xd4>
    e460:	movs	r4, #32
    e462:	mov.w	r1, #4294967295
    e466:	movs	r0, #0
    e468:	b.n	e436 <__ieee754_sqrt+0x13e>
    e46a:	vldr	d7, [sp]
    e46e:	vsub.f64	d7, d7, d7
    e472:	vdiv.f64	d0, d7, d7
    e476:	b.n	e3e8 <__ieee754_sqrt+0xf0>
    e478:	.word	0x7ff00000

0000e47c <matherr>:
    e47c:	movs	r0, #0
    e47e:	bx	lr

0000e480 <__aeabi_atexit>:
    e480:	mov	r3, r1
    e482:	mov	r1, r0
    e484:	mov	r0, r3
    e486:	b.w	e4fc <__cxa_atexit>
    e48a:	nop

0000e48c <calloc>:
    e48c:	ldr	r3, [pc, #8]	; (e498 <calloc+0xc>)
    e48e:	mov	r2, r1
    e490:	mov	r1, r0
    e492:	ldr	r0, [r3, #0]
    e494:	b.w	e49c <_calloc_r>
    e498:	.word	0x20001350

0000e49c <_calloc_r>:
    e49c:	push	{r4, lr}
    e49e:	mul.w	r1, r2, r1
    e4a2:	bl	e584 <_malloc_r>
    e4a6:	mov	r4, r0
    e4a8:	cbz	r0, e4e2 <_calloc_r+0x46>
    e4aa:	ldr.w	r2, [r0, #-4]
    e4ae:	bic.w	r2, r2, #3
    e4b2:	subs	r2, #4
    e4b4:	cmp	r2, #36	; 0x24
    e4b6:	bhi.n	e4ea <_calloc_r+0x4e>
    e4b8:	cmp	r2, #19
    e4ba:	bls.n	e4e6 <_calloc_r+0x4a>
    e4bc:	movs	r3, #0
    e4be:	cmp	r2, #27
    e4c0:	str	r3, [r0, #0]
    e4c2:	str	r3, [r0, #4]
    e4c4:	bls.n	e4f4 <_calloc_r+0x58>
    e4c6:	cmp	r2, #36	; 0x24
    e4c8:	str	r3, [r0, #8]
    e4ca:	str	r3, [r0, #12]
    e4cc:	iteee	ne
    e4ce:	addne.w	r2, r0, #16
    e4d2:	streq	r3, [r0, #16]
    e4d4:	streq	r3, [r0, #20]
    e4d6:	addeq.w	r2, r0, #24
    e4da:	movs	r3, #0
    e4dc:	str	r3, [r2, #0]
    e4de:	str	r3, [r2, #4]
    e4e0:	str	r3, [r2, #8]
    e4e2:	mov	r0, r4
    e4e4:	pop	{r4, pc}
    e4e6:	mov	r2, r0
    e4e8:	b.n	e4da <_calloc_r+0x3e>
    e4ea:	movs	r1, #0
    e4ec:	bl	ebbc <memset>
    e4f0:	mov	r0, r4
    e4f2:	pop	{r4, pc}
    e4f4:	add.w	r2, r0, #8
    e4f8:	b.n	e4da <_calloc_r+0x3e>
    e4fa:	nop

0000e4fc <__cxa_atexit>:
    e4fc:	mov	r3, r2
    e4fe:	mov	r2, r1
    e500:	mov	r1, r0
    e502:	movs	r0, #2
    e504:	b.w	f584 <__register_exitproc>

0000e508 <__errno>:
    e508:	ldr	r3, [pc, #4]	; (e510 <__errno+0x8>)
    e50a:	ldr	r0, [r3, #0]
    e50c:	bx	lr
    e50e:	nop
    e510:	.word	0x20001350

0000e514 <__libc_init_array>:
    e514:	push	{r4, r5, r6, lr}
    e516:	ldr	r6, [pc, #60]	; (e554 <__libc_init_array+0x40>)
    e518:	ldr	r5, [pc, #60]	; (e558 <__libc_init_array+0x44>)
    e51a:	subs	r6, r6, r5
    e51c:	asrs	r6, r6, #2
    e51e:	it	ne
    e520:	movne	r4, #0
    e522:	beq.n	e530 <__libc_init_array+0x1c>
    e524:	adds	r4, #1
    e526:	ldr.w	r3, [r5], #4
    e52a:	blx	r3
    e52c:	cmp	r6, r4
    e52e:	bne.n	e524 <__libc_init_array+0x10>
    e530:	ldr	r6, [pc, #40]	; (e55c <__libc_init_array+0x48>)
    e532:	ldr	r5, [pc, #44]	; (e560 <__libc_init_array+0x4c>)
    e534:	subs	r6, r6, r5
    e536:	bl	f898 <___init_veneer>
    e53a:	asrs	r6, r6, #2
    e53c:	it	ne
    e53e:	movne	r4, #0
    e540:	beq.n	e550 <__libc_init_array+0x3c>
    e542:	adds	r4, #1
    e544:	ldr.w	r3, [r5], #4
    e548:	blx	r3
    e54a:	cmp	r6, r4
    e54c:	bne.n	e542 <__libc_init_array+0x2e>
    e54e:	pop	{r4, r5, r6, pc}
    e550:	pop	{r4, r5, r6, pc}
    e552:	nop
    e554:	.word	0x60001600
    e558:	.word	0x60001600
    e55c:	.word	0x6000160c
    e560:	.word	0x60001600

0000e564 <malloc>:
    e564:	ldr	r3, [pc, #8]	; (e570 <malloc+0xc>)
    e566:	mov	r1, r0
    e568:	ldr	r0, [r3, #0]
    e56a:	b.w	e584 <_malloc_r>
    e56e:	nop
    e570:	.word	0x20001350

0000e574 <free>:
    e574:	ldr	r3, [pc, #8]	; (e580 <free+0xc>)
    e576:	mov	r1, r0
    e578:	ldr	r0, [r3, #0]
    e57a:	b.w	f6c4 <_free_r>
    e57e:	nop
    e580:	.word	0x20001350

0000e584 <_malloc_r>:
    e584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e588:	add.w	r5, r1, #11
    e58c:	cmp	r5, #22
    e58e:	sub	sp, #12
    e590:	mov	r6, r0
    e592:	bls.w	e6d4 <_malloc_r+0x150>
    e596:	bics.w	r5, r5, #7
    e59a:	bmi.w	e71c <_malloc_r+0x198>
    e59e:	cmp	r1, r5
    e5a0:	bhi.w	e71c <_malloc_r+0x198>
    e5a4:	bl	ec58 <__malloc_lock>
    e5a8:	cmp.w	r5, #504	; 0x1f8
    e5ac:	bcc.w	eae8 <_malloc_r+0x564>
    e5b0:	lsrs	r3, r5, #9
    e5b2:	beq.w	e72a <_malloc_r+0x1a6>
    e5b6:	cmp	r3, #4
    e5b8:	bhi.w	e8c2 <_malloc_r+0x33e>
    e5bc:	lsrs	r0, r5, #6
    e5be:	add.w	lr, r0, #57	; 0x39
    e5c2:	mov.w	r3, lr, lsl #1
    e5c6:	adds	r0, #56	; 0x38
    e5c8:	ldr	r7, [pc, #784]	; (e8dc <_malloc_r+0x358>)
    e5ca:	add.w	r3, r7, r3, lsl #2
    e5ce:	sub.w	r1, r3, #8
    e5d2:	ldr	r4, [r3, #4]
    e5d4:	cmp	r1, r4
    e5d6:	bne.n	e5e8 <_malloc_r+0x64>
    e5d8:	b.n	e734 <_malloc_r+0x1b0>
    e5da:	cmp	r2, #0
    e5dc:	bge.w	e738 <_malloc_r+0x1b4>
    e5e0:	ldr	r4, [r4, #12]
    e5e2:	cmp	r1, r4
    e5e4:	beq.w	e734 <_malloc_r+0x1b0>
    e5e8:	ldr	r3, [r4, #4]
    e5ea:	bic.w	r3, r3, #3
    e5ee:	subs	r2, r3, r5
    e5f0:	cmp	r2, #15
    e5f2:	ble.n	e5da <_malloc_r+0x56>
    e5f4:	ldr	r1, [pc, #740]	; (e8dc <_malloc_r+0x358>)
    e5f6:	ldr	r4, [r7, #16]
    e5f8:	add.w	lr, r1, #8
    e5fc:	cmp	r4, lr
    e5fe:	beq.w	e968 <_malloc_r+0x3e4>
    e602:	ldr	r3, [r4, #4]
    e604:	bic.w	r3, r3, #3
    e608:	subs	r2, r3, r5
    e60a:	cmp	r2, #15
    e60c:	bgt.w	e942 <_malloc_r+0x3be>
    e610:	cmp	r2, #0
    e612:	str.w	lr, [r1, #20]
    e616:	str.w	lr, [r1, #16]
    e61a:	bge.w	e75a <_malloc_r+0x1d6>
    e61e:	cmp.w	r3, #512	; 0x200
    e622:	bcs.w	e8f4 <_malloc_r+0x370>
    e626:	lsrs	r3, r3, #3
    e628:	add.w	ip, r3, #1
    e62c:	movs	r2, #1
    e62e:	asrs	r3, r3, #2
    e630:	lsl.w	r3, r2, r3
    e634:	ldr	r2, [r1, #4]
    e636:	ldr.w	r8, [r1, ip, lsl #3]
    e63a:	str.w	r8, [r4, #8]
    e63e:	add.w	r9, r1, ip, lsl #3
    e642:	orrs	r2, r3
    e644:	sub.w	r3, r9, #8
    e648:	str	r3, [r4, #12]
    e64a:	str	r2, [r1, #4]
    e64c:	str.w	r4, [r1, ip, lsl #3]
    e650:	str.w	r4, [r8, #12]
    e654:	asrs	r3, r0, #2
    e656:	movs	r4, #1
    e658:	lsls	r4, r3
    e65a:	cmp	r4, r2
    e65c:	bhi.w	e774 <_malloc_r+0x1f0>
    e660:	tst	r4, r2
    e662:	bne.n	e672 <_malloc_r+0xee>
    e664:	bic.w	r0, r0, #3
    e668:	lsls	r4, r4, #1
    e66a:	tst	r4, r2
    e66c:	add.w	r0, r0, #4
    e670:	beq.n	e668 <_malloc_r+0xe4>
    e672:	add.w	r9, r7, r0, lsl #3
    e676:	mov	ip, r9
    e678:	mov	r8, r0
    e67a:	ldr.w	r1, [ip, #12]
    e67e:	cmp	ip, r1
    e680:	bne.n	e692 <_malloc_r+0x10e>
    e682:	b.n	e96c <_malloc_r+0x3e8>
    e684:	cmp	r2, #0
    e686:	bge.w	e98c <_malloc_r+0x408>
    e68a:	ldr	r1, [r1, #12]
    e68c:	cmp	ip, r1
    e68e:	beq.w	e96c <_malloc_r+0x3e8>
    e692:	ldr	r3, [r1, #4]
    e694:	bic.w	r3, r3, #3
    e698:	subs	r2, r3, r5
    e69a:	cmp	r2, #15
    e69c:	ble.n	e684 <_malloc_r+0x100>
    e69e:	mov	r4, r1
    e6a0:	ldr.w	ip, [r1, #12]
    e6a4:	ldr.w	r8, [r4, #8]!
    e6a8:	adds	r3, r1, r5
    e6aa:	orr.w	r5, r5, #1
    e6ae:	str	r5, [r1, #4]
    e6b0:	orr.w	r1, r2, #1
    e6b4:	str.w	ip, [r8, #12]
    e6b8:	mov	r0, r6
    e6ba:	str.w	r8, [ip, #8]
    e6be:	str	r3, [r7, #20]
    e6c0:	str	r3, [r7, #16]
    e6c2:	str.w	lr, [r3, #12]
    e6c6:	str.w	lr, [r3, #8]
    e6ca:	str	r1, [r3, #4]
    e6cc:	str	r2, [r3, r2]
    e6ce:	bl	ec5c <__malloc_unlock>
    e6d2:	b.n	e714 <_malloc_r+0x190>
    e6d4:	cmp	r1, #16
    e6d6:	bhi.n	e71c <_malloc_r+0x198>
    e6d8:	bl	ec58 <__malloc_lock>
    e6dc:	movs	r5, #16
    e6de:	movs	r3, #6
    e6e0:	movs	r0, #2
    e6e2:	ldr	r7, [pc, #504]	; (e8dc <_malloc_r+0x358>)
    e6e4:	add.w	r3, r7, r3, lsl #2
    e6e8:	sub.w	r2, r3, #8
    e6ec:	ldr	r4, [r3, #4]
    e6ee:	cmp	r4, r2
    e6f0:	beq.w	e97e <_malloc_r+0x3fa>
    e6f4:	ldr	r3, [r4, #4]
    e6f6:	ldr	r1, [r4, #12]
    e6f8:	ldr	r5, [r4, #8]
    e6fa:	bic.w	r3, r3, #3
    e6fe:	add	r3, r4
    e700:	mov	r0, r6
    e702:	ldr	r2, [r3, #4]
    e704:	str	r1, [r5, #12]
    e706:	orr.w	r2, r2, #1
    e70a:	str	r5, [r1, #8]
    e70c:	str	r2, [r3, #4]
    e70e:	bl	ec5c <__malloc_unlock>
    e712:	adds	r4, #8
    e714:	mov	r0, r4
    e716:	add	sp, #12
    e718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e71c:	movs	r4, #0
    e71e:	movs	r3, #12
    e720:	mov	r0, r4
    e722:	str	r3, [r6, #0]
    e724:	add	sp, #12
    e726:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e72a:	movs	r3, #128	; 0x80
    e72c:	mov.w	lr, #64	; 0x40
    e730:	movs	r0, #63	; 0x3f
    e732:	b.n	e5c8 <_malloc_r+0x44>
    e734:	mov	r0, lr
    e736:	b.n	e5f4 <_malloc_r+0x70>
    e738:	add	r3, r4
    e73a:	ldr	r1, [r4, #12]
    e73c:	ldr	r2, [r3, #4]
    e73e:	ldr	r5, [r4, #8]
    e740:	orr.w	r2, r2, #1
    e744:	str	r1, [r5, #12]
    e746:	mov	r0, r6
    e748:	str	r5, [r1, #8]
    e74a:	str	r2, [r3, #4]
    e74c:	bl	ec5c <__malloc_unlock>
    e750:	adds	r4, #8
    e752:	mov	r0, r4
    e754:	add	sp, #12
    e756:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e75a:	add	r3, r4
    e75c:	mov	r0, r6
    e75e:	ldr	r2, [r3, #4]
    e760:	orr.w	r2, r2, #1
    e764:	str	r2, [r3, #4]
    e766:	bl	ec5c <__malloc_unlock>
    e76a:	adds	r4, #8
    e76c:	mov	r0, r4
    e76e:	add	sp, #12
    e770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e774:	ldr	r4, [r7, #8]
    e776:	ldr	r3, [r4, #4]
    e778:	bic.w	r8, r3, #3
    e77c:	cmp	r8, r5
    e77e:	bcc.n	e78a <_malloc_r+0x206>
    e780:	rsb	r3, r5, r8
    e784:	cmp	r3, #15
    e786:	bgt.w	e8a2 <_malloc_r+0x31e>
    e78a:	ldr	r3, [pc, #340]	; (e8e0 <_malloc_r+0x35c>)
    e78c:	ldr.w	r9, [pc, #352]	; e8f0 <_malloc_r+0x36c>
    e790:	ldr	r2, [r3, #0]
    e792:	ldr.w	r3, [r9]
    e796:	adds	r3, #1
    e798:	add	r2, r5
    e79a:	add.w	sl, r4, r8
    e79e:	beq.w	ea62 <_malloc_r+0x4de>
    e7a2:	add.w	r2, r2, #4096	; 0x1000
    e7a6:	adds	r2, #15
    e7a8:	bic.w	r2, r2, #4080	; 0xff0
    e7ac:	bic.w	r2, r2, #15
    e7b0:	mov	r1, r2
    e7b2:	mov	r0, r6
    e7b4:	str	r2, [sp, #4]
    e7b6:	bl	f050 <_sbrk_r>
    e7ba:	cmp.w	r0, #4294967295
    e7be:	mov	fp, r0
    e7c0:	ldr	r2, [sp, #4]
    e7c2:	beq.w	ea76 <_malloc_r+0x4f2>
    e7c6:	cmp	sl, r0
    e7c8:	bhi.w	e9c4 <_malloc_r+0x440>
    e7cc:	ldr	r3, [pc, #276]	; (e8e4 <_malloc_r+0x360>)
    e7ce:	ldr	r1, [r3, #0]
    e7d0:	cmp	sl, fp
    e7d2:	add	r1, r2
    e7d4:	str	r1, [r3, #0]
    e7d6:	beq.w	ea80 <_malloc_r+0x4fc>
    e7da:	ldr.w	r0, [r9]
    e7de:	ldr.w	lr, [pc, #272]	; e8f0 <_malloc_r+0x36c>
    e7e2:	adds	r0, #1
    e7e4:	ittet	ne
    e7e6:	rsbne	sl, sl, fp
    e7ea:	addne	r1, sl
    e7ec:	streq.w	fp, [lr]
    e7f0:	strne	r1, [r3, #0]
    e7f2:	ands.w	r1, fp, #7
    e7f6:	beq.w	ea28 <_malloc_r+0x4a4>
    e7fa:	rsb	r0, r1, #8
    e7fe:	rsb	r1, r1, #4096	; 0x1000
    e802:	add	fp, r0
    e804:	adds	r1, #8
    e806:	add	r2, fp
    e808:	ubfx	r2, r2, #0, #12
    e80c:	rsb	r9, r2, r1
    e810:	mov	r1, r9
    e812:	mov	r0, r6
    e814:	str	r3, [sp, #4]
    e816:	bl	f050 <_sbrk_r>
    e81a:	adds	r3, r0, #1
    e81c:	ldr	r3, [sp, #4]
    e81e:	beq.w	eaa0 <_malloc_r+0x51c>
    e822:	rsb	r2, fp, r0
    e826:	add	r2, r9
    e828:	orr.w	r2, r2, #1
    e82c:	ldr	r1, [r3, #0]
    e82e:	str.w	fp, [r7, #8]
    e832:	add	r1, r9
    e834:	cmp	r4, r7
    e836:	str.w	r2, [fp, #4]
    e83a:	str	r1, [r3, #0]
    e83c:	ldr.w	r9, [pc, #164]	; e8e4 <_malloc_r+0x360>
    e840:	beq.n	e870 <_malloc_r+0x2ec>
    e842:	cmp.w	r8, #15
    e846:	bls.w	ea44 <_malloc_r+0x4c0>
    e84a:	ldr	r2, [r4, #4]
    e84c:	sub.w	r3, r8, #12
    e850:	bic.w	r3, r3, #7
    e854:	adds	r0, r4, r3
    e856:	and.w	r2, r2, #1
    e85a:	mov.w	lr, #5
    e85e:	orrs	r2, r3
    e860:	cmp	r3, #15
    e862:	str	r2, [r4, #4]
    e864:	str.w	lr, [r0, #4]
    e868:	str.w	lr, [r0, #8]
    e86c:	bhi.w	eaa8 <_malloc_r+0x524>
    e870:	ldr	r3, [pc, #116]	; (e8e8 <_malloc_r+0x364>)
    e872:	ldr	r4, [r7, #8]
    e874:	ldr	r2, [r3, #0]
    e876:	cmp	r1, r2
    e878:	it	hi
    e87a:	strhi	r1, [r3, #0]
    e87c:	ldr	r3, [pc, #108]	; (e8ec <_malloc_r+0x368>)
    e87e:	ldr	r2, [r3, #0]
    e880:	cmp	r1, r2
    e882:	ldr	r2, [r4, #4]
    e884:	it	hi
    e886:	strhi	r1, [r3, #0]
    e888:	bic.w	r2, r2, #3
    e88c:	cmp	r5, r2
    e88e:	sub.w	r3, r2, r5
    e892:	bhi.n	e898 <_malloc_r+0x314>
    e894:	cmp	r3, #15
    e896:	bgt.n	e8a2 <_malloc_r+0x31e>
    e898:	mov	r0, r6
    e89a:	bl	ec5c <__malloc_unlock>
    e89e:	movs	r4, #0
    e8a0:	b.n	e714 <_malloc_r+0x190>
    e8a2:	adds	r2, r4, r5
    e8a4:	orr.w	r3, r3, #1
    e8a8:	orr.w	r5, r5, #1
    e8ac:	str	r5, [r4, #4]
    e8ae:	mov	r0, r6
    e8b0:	str	r2, [r7, #8]
    e8b2:	str	r3, [r2, #4]
    e8b4:	bl	ec5c <__malloc_unlock>
    e8b8:	adds	r4, #8
    e8ba:	mov	r0, r4
    e8bc:	add	sp, #12
    e8be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8c2:	cmp	r3, #20
    e8c4:	bls.n	e9aa <_malloc_r+0x426>
    e8c6:	cmp	r3, #84	; 0x54
    e8c8:	bhi.w	ea14 <_malloc_r+0x490>
    e8cc:	lsrs	r0, r5, #12
    e8ce:	add.w	lr, r0, #111	; 0x6f
    e8d2:	mov.w	r3, lr, lsl #1
    e8d6:	adds	r0, #110	; 0x6e
    e8d8:	b.n	e5c8 <_malloc_r+0x44>
    e8da:	nop
    e8dc:	.word	0x20001354
    e8e0:	.word	0x2000e7f8
    e8e4:	.word	0x2000e7fc
    e8e8:	.word	0x2000e7f4
    e8ec:	.word	0x2000e7f0
    e8f0:	.word	0x20001760
    e8f4:	lsrs	r2, r3, #9
    e8f6:	cmp	r2, #4
    e8f8:	bls.n	e9b8 <_malloc_r+0x434>
    e8fa:	cmp	r2, #20
    e8fc:	bhi.w	ea66 <_malloc_r+0x4e2>
    e900:	add.w	r1, r2, #92	; 0x5c
    e904:	lsls	r1, r1, #1
    e906:	adds	r2, #91	; 0x5b
    e908:	add.w	ip, r7, r1, lsl #2
    e90c:	ldr.w	r1, [r7, r1, lsl #2]
    e910:	ldr.w	r8, [pc, #476]	; eaf0 <_malloc_r+0x56c>
    e914:	sub.w	ip, ip, #8
    e918:	cmp	ip, r1
    e91a:	beq.w	ea2e <_malloc_r+0x4aa>
    e91e:	ldr	r2, [r1, #4]
    e920:	bic.w	r2, r2, #3
    e924:	cmp	r3, r2
    e926:	bcs.n	e92e <_malloc_r+0x3aa>
    e928:	ldr	r1, [r1, #8]
    e92a:	cmp	ip, r1
    e92c:	bne.n	e91e <_malloc_r+0x39a>
    e92e:	ldr.w	ip, [r1, #12]
    e932:	ldr	r2, [r7, #4]
    e934:	str.w	ip, [r4, #12]
    e938:	str	r1, [r4, #8]
    e93a:	str.w	r4, [ip, #8]
    e93e:	str	r4, [r1, #12]
    e940:	b.n	e654 <_malloc_r+0xd0>
    e942:	adds	r3, r4, r5
    e944:	orr.w	r7, r2, #1
    e948:	orr.w	r5, r5, #1
    e94c:	str	r5, [r4, #4]
    e94e:	mov	r0, r6
    e950:	str	r3, [r1, #20]
    e952:	str	r3, [r1, #16]
    e954:	str.w	lr, [r3, #12]
    e958:	str.w	lr, [r3, #8]
    e95c:	str	r7, [r3, #4]
    e95e:	str	r2, [r3, r2]
    e960:	adds	r4, #8
    e962:	bl	ec5c <__malloc_unlock>
    e966:	b.n	e714 <_malloc_r+0x190>
    e968:	ldr	r2, [r1, #4]
    e96a:	b.n	e654 <_malloc_r+0xd0>
    e96c:	add.w	r8, r8, #1
    e970:	tst.w	r8, #3
    e974:	add.w	ip, ip, #8
    e978:	bne.w	e67a <_malloc_r+0xf6>
    e97c:	b.n	e9e0 <_malloc_r+0x45c>
    e97e:	ldr	r4, [r3, #12]
    e980:	cmp	r3, r4
    e982:	it	eq
    e984:	addeq	r0, #2
    e986:	beq.w	e5f4 <_malloc_r+0x70>
    e98a:	b.n	e6f4 <_malloc_r+0x170>
    e98c:	add	r3, r1
    e98e:	mov	r4, r1
    e990:	ldr	r2, [r3, #4]
    e992:	ldr	r1, [r1, #12]
    e994:	ldr.w	r5, [r4, #8]!
    e998:	orr.w	r2, r2, #1
    e99c:	str	r2, [r3, #4]
    e99e:	mov	r0, r6
    e9a0:	str	r1, [r5, #12]
    e9a2:	str	r5, [r1, #8]
    e9a4:	bl	ec5c <__malloc_unlock>
    e9a8:	b.n	e714 <_malloc_r+0x190>
    e9aa:	add.w	lr, r3, #92	; 0x5c
    e9ae:	add.w	r0, r3, #91	; 0x5b
    e9b2:	mov.w	r3, lr, lsl #1
    e9b6:	b.n	e5c8 <_malloc_r+0x44>
    e9b8:	lsrs	r2, r3, #6
    e9ba:	add.w	r1, r2, #57	; 0x39
    e9be:	lsls	r1, r1, #1
    e9c0:	adds	r2, #56	; 0x38
    e9c2:	b.n	e908 <_malloc_r+0x384>
    e9c4:	cmp	r4, r7
    e9c6:	ldr	r3, [pc, #296]	; (eaf0 <_malloc_r+0x56c>)
    e9c8:	beq.w	e7cc <_malloc_r+0x248>
    e9cc:	ldr	r4, [r3, #8]
    e9ce:	ldr	r2, [r4, #4]
    e9d0:	bic.w	r2, r2, #3
    e9d4:	b.n	e88c <_malloc_r+0x308>
    e9d6:	ldr.w	r3, [r9], #-8
    e9da:	cmp	r9, r3
    e9dc:	bne.w	eae4 <_malloc_r+0x560>
    e9e0:	tst.w	r0, #3
    e9e4:	add.w	r0, r0, #4294967295
    e9e8:	bne.n	e9d6 <_malloc_r+0x452>
    e9ea:	ldr	r3, [r7, #4]
    e9ec:	bic.w	r3, r3, r4
    e9f0:	str	r3, [r7, #4]
    e9f2:	lsls	r4, r4, #1
    e9f4:	cmp	r4, r3
    e9f6:	bhi.w	e774 <_malloc_r+0x1f0>
    e9fa:	cmp	r4, #0
    e9fc:	beq.w	e774 <_malloc_r+0x1f0>
    ea00:	tst	r4, r3
    ea02:	mov	r0, r8
    ea04:	bne.w	e672 <_malloc_r+0xee>
    ea08:	lsls	r4, r4, #1
    ea0a:	tst	r4, r3
    ea0c:	add.w	r0, r0, #4
    ea10:	beq.n	ea08 <_malloc_r+0x484>
    ea12:	b.n	e672 <_malloc_r+0xee>
    ea14:	cmp.w	r3, #340	; 0x154
    ea18:	bhi.n	ea4c <_malloc_r+0x4c8>
    ea1a:	lsrs	r0, r5, #15
    ea1c:	add.w	lr, r0, #120	; 0x78
    ea20:	mov.w	r3, lr, lsl #1
    ea24:	adds	r0, #119	; 0x77
    ea26:	b.n	e5c8 <_malloc_r+0x44>
    ea28:	mov.w	r1, #4096	; 0x1000
    ea2c:	b.n	e806 <_malloc_r+0x282>
    ea2e:	movs	r1, #1
    ea30:	ldr.w	r3, [r8, #4]
    ea34:	asrs	r2, r2, #2
    ea36:	lsl.w	r2, r1, r2
    ea3a:	orrs	r2, r3
    ea3c:	str.w	r2, [r8, #4]
    ea40:	mov	r1, ip
    ea42:	b.n	e934 <_malloc_r+0x3b0>
    ea44:	movs	r3, #1
    ea46:	str.w	r3, [fp, #4]
    ea4a:	b.n	e898 <_malloc_r+0x314>
    ea4c:	movw	r2, #1364	; 0x554
    ea50:	cmp	r3, r2
    ea52:	bhi.n	ea96 <_malloc_r+0x512>
    ea54:	lsrs	r0, r5, #18
    ea56:	add.w	lr, r0, #125	; 0x7d
    ea5a:	mov.w	r3, lr, lsl #1
    ea5e:	adds	r0, #124	; 0x7c
    ea60:	b.n	e5c8 <_malloc_r+0x44>
    ea62:	adds	r2, #16
    ea64:	b.n	e7b0 <_malloc_r+0x22c>
    ea66:	cmp	r2, #84	; 0x54
    ea68:	bhi.n	eab8 <_malloc_r+0x534>
    ea6a:	lsrs	r2, r3, #12
    ea6c:	add.w	r1, r2, #111	; 0x6f
    ea70:	lsls	r1, r1, #1
    ea72:	adds	r2, #110	; 0x6e
    ea74:	b.n	e908 <_malloc_r+0x384>
    ea76:	ldr	r4, [r7, #8]
    ea78:	ldr	r2, [r4, #4]
    ea7a:	bic.w	r2, r2, #3
    ea7e:	b.n	e88c <_malloc_r+0x308>
    ea80:	ubfx	r0, sl, #0, #12
    ea84:	cmp	r0, #0
    ea86:	bne.w	e7da <_malloc_r+0x256>
    ea8a:	add	r2, r8
    ea8c:	ldr	r3, [r7, #8]
    ea8e:	orr.w	r2, r2, #1
    ea92:	str	r2, [r3, #4]
    ea94:	b.n	e870 <_malloc_r+0x2ec>
    ea96:	movs	r3, #254	; 0xfe
    ea98:	mov.w	lr, #127	; 0x7f
    ea9c:	movs	r0, #126	; 0x7e
    ea9e:	b.n	e5c8 <_malloc_r+0x44>
    eaa0:	movs	r2, #1
    eaa2:	mov.w	r9, #0
    eaa6:	b.n	e82c <_malloc_r+0x2a8>
    eaa8:	add.w	r1, r4, #8
    eaac:	mov	r0, r6
    eaae:	bl	f6c4 <_free_r>
    eab2:	ldr.w	r1, [r9]
    eab6:	b.n	e870 <_malloc_r+0x2ec>
    eab8:	cmp.w	r2, #340	; 0x154
    eabc:	bhi.n	eaca <_malloc_r+0x546>
    eabe:	lsrs	r2, r3, #15
    eac0:	add.w	r1, r2, #120	; 0x78
    eac4:	lsls	r1, r1, #1
    eac6:	adds	r2, #119	; 0x77
    eac8:	b.n	e908 <_malloc_r+0x384>
    eaca:	movw	r1, #1364	; 0x554
    eace:	cmp	r2, r1
    ead0:	bhi.n	eade <_malloc_r+0x55a>
    ead2:	lsrs	r2, r3, #18
    ead4:	add.w	r1, r2, #125	; 0x7d
    ead8:	lsls	r1, r1, #1
    eada:	adds	r2, #124	; 0x7c
    eadc:	b.n	e908 <_malloc_r+0x384>
    eade:	movs	r1, #254	; 0xfe
    eae0:	movs	r2, #126	; 0x7e
    eae2:	b.n	e908 <_malloc_r+0x384>
    eae4:	ldr	r3, [r7, #4]
    eae6:	b.n	e9f2 <_malloc_r+0x46e>
    eae8:	lsrs	r0, r5, #3
    eaea:	adds	r3, r0, #1
    eaec:	lsls	r3, r3, #1
    eaee:	b.n	e6e2 <_malloc_r+0x15e>
    eaf0:	.word	0x20001354

0000eaf4 <memmove>:
    eaf4:	cmp	r0, r1
    eaf6:	push	{r4, r5, r6, r7, lr}
    eaf8:	bls.n	eb16 <memmove+0x22>
    eafa:	adds	r3, r1, r2
    eafc:	cmp	r0, r3
    eafe:	bcs.n	eb16 <memmove+0x22>
    eb00:	adds	r1, r0, r2
    eb02:	cmp	r2, #0
    eb04:	beq.n	ebaa <memmove+0xb6>
    eb06:	subs	r2, r3, r2
    eb08:	ldrb.w	r4, [r3, #-1]!
    eb0c:	strb.w	r4, [r1, #-1]!
    eb10:	cmp	r3, r2
    eb12:	bne.n	eb08 <memmove+0x14>
    eb14:	pop	{r4, r5, r6, r7, pc}
    eb16:	cmp	r2, #15
    eb18:	bls.n	ebac <memmove+0xb8>
    eb1a:	orr.w	r3, r1, r0
    eb1e:	lsls	r3, r3, #30
    eb20:	bne.n	ebb0 <memmove+0xbc>
    eb22:	add.w	r4, r0, #16
    eb26:	add.w	r3, r1, #16
    eb2a:	mov	r5, r2
    eb2c:	ldr.w	r6, [r3, #-16]
    eb30:	str.w	r6, [r4, #-16]
    eb34:	ldr.w	r6, [r3, #-12]
    eb38:	str.w	r6, [r4, #-12]
    eb3c:	ldr.w	r6, [r3, #-8]
    eb40:	str.w	r6, [r4, #-8]
    eb44:	subs	r5, #16
    eb46:	ldr.w	r6, [r3, #-4]
    eb4a:	str.w	r6, [r4, #-4]
    eb4e:	cmp	r5, #15
    eb50:	add.w	r3, r3, #16
    eb54:	add.w	r4, r4, #16
    eb58:	bhi.n	eb2c <memmove+0x38>
    eb5a:	sub.w	r3, r2, #16
    eb5e:	bic.w	r3, r3, #15
    eb62:	and.w	lr, r2, #15
    eb66:	adds	r3, #16
    eb68:	cmp.w	lr, #3
    eb6c:	add	r1, r3
    eb6e:	add	r3, r0
    eb70:	bls.n	ebb6 <memmove+0xc2>
    eb72:	subs	r6, r3, #4
    eb74:	mov	r5, r1
    eb76:	mov	r4, lr
    eb78:	subs	r4, #4
    eb7a:	ldr.w	r7, [r5], #4
    eb7e:	str.w	r7, [r6, #4]!
    eb82:	cmp	r4, #3
    eb84:	bhi.n	eb78 <memmove+0x84>
    eb86:	sub.w	r4, lr, #4
    eb8a:	bic.w	r4, r4, #3
    eb8e:	adds	r4, #4
    eb90:	add	r3, r4
    eb92:	add	r1, r4
    eb94:	and.w	r2, r2, #3
    eb98:	cbz	r2, ebb4 <memmove+0xc0>
    eb9a:	subs	r3, #1
    eb9c:	add	r2, r1
    eb9e:	ldrb.w	r4, [r1], #1
    eba2:	strb.w	r4, [r3, #1]!
    eba6:	cmp	r2, r1
    eba8:	bne.n	eb9e <memmove+0xaa>
    ebaa:	pop	{r4, r5, r6, r7, pc}
    ebac:	mov	r3, r0
    ebae:	b.n	eb98 <memmove+0xa4>
    ebb0:	mov	r3, r0
    ebb2:	b.n	eb9a <memmove+0xa6>
    ebb4:	pop	{r4, r5, r6, r7, pc}
    ebb6:	mov	r2, lr
    ebb8:	b.n	eb98 <memmove+0xa4>
    ebba:	nop

0000ebbc <memset>:
    ebbc:	push	{r4, r5, r6}
    ebbe:	lsls	r4, r0, #30
    ebc0:	beq.n	ec50 <memset+0x94>
    ebc2:	subs	r4, r2, #1
    ebc4:	cmp	r2, #0
    ebc6:	beq.n	ec4c <memset+0x90>
    ebc8:	uxtb	r5, r1
    ebca:	mov	r3, r0
    ebcc:	b.n	ebd4 <memset+0x18>
    ebce:	subs	r2, r4, #1
    ebd0:	cbz	r4, ec4c <memset+0x90>
    ebd2:	mov	r4, r2
    ebd4:	strb.w	r5, [r3], #1
    ebd8:	lsls	r2, r3, #30
    ebda:	bne.n	ebce <memset+0x12>
    ebdc:	cmp	r4, #3
    ebde:	bls.n	ec3e <memset+0x82>
    ebe0:	uxtb	r5, r1
    ebe2:	orr.w	r5, r5, r5, lsl #8
    ebe6:	cmp	r4, #15
    ebe8:	orr.w	r5, r5, r5, lsl #16
    ebec:	bls.n	ec22 <memset+0x66>
    ebee:	add.w	r2, r3, #16
    ebf2:	mov	r6, r4
    ebf4:	subs	r6, #16
    ebf6:	cmp	r6, #15
    ebf8:	str.w	r5, [r2, #-16]
    ebfc:	str.w	r5, [r2, #-12]
    ec00:	str.w	r5, [r2, #-8]
    ec04:	str.w	r5, [r2, #-4]
    ec08:	add.w	r2, r2, #16
    ec0c:	bhi.n	ebf4 <memset+0x38>
    ec0e:	sub.w	r2, r4, #16
    ec12:	bic.w	r2, r2, #15
    ec16:	and.w	r4, r4, #15
    ec1a:	adds	r2, #16
    ec1c:	cmp	r4, #3
    ec1e:	add	r3, r2
    ec20:	bls.n	ec3e <memset+0x82>
    ec22:	mov	r6, r3
    ec24:	mov	r2, r4
    ec26:	subs	r2, #4
    ec28:	cmp	r2, #3
    ec2a:	str.w	r5, [r6], #4
    ec2e:	bhi.n	ec26 <memset+0x6a>
    ec30:	subs	r2, r4, #4
    ec32:	bic.w	r2, r2, #3
    ec36:	adds	r2, #4
    ec38:	add	r3, r2
    ec3a:	and.w	r4, r4, #3
    ec3e:	cbz	r4, ec4c <memset+0x90>
    ec40:	uxtb	r1, r1
    ec42:	add	r4, r3
    ec44:	strb.w	r1, [r3], #1
    ec48:	cmp	r3, r4
    ec4a:	bne.n	ec44 <memset+0x88>
    ec4c:	pop	{r4, r5, r6}
    ec4e:	bx	lr
    ec50:	mov	r4, r2
    ec52:	mov	r3, r0
    ec54:	b.n	ebdc <memset+0x20>
    ec56:	nop

0000ec58 <__malloc_lock>:
    ec58:	bx	lr
    ec5a:	nop

0000ec5c <__malloc_unlock>:
    ec5c:	bx	lr
    ec5e:	nop

0000ec60 <realloc>:
    ec60:	ldr	r3, [pc, #8]	; (ec6c <realloc+0xc>)
    ec62:	mov	r2, r1
    ec64:	mov	r1, r0
    ec66:	ldr	r0, [r3, #0]
    ec68:	b.w	ec70 <_realloc_r>
    ec6c:	.word	0x20001350

0000ec70 <_realloc_r>:
    ec70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec74:	mov	r7, r2
    ec76:	sub	sp, #12
    ec78:	cmp	r1, #0
    ec7a:	beq.w	ee00 <_realloc_r+0x190>
    ec7e:	mov	r6, r1
    ec80:	mov	r9, r0
    ec82:	add.w	r5, r7, #11
    ec86:	bl	ec58 <__malloc_lock>
    ec8a:	ldr.w	lr, [r6, #-4]
    ec8e:	cmp	r5, #22
    ec90:	bic.w	r4, lr, #3
    ec94:	sub.w	r8, r6, #8
    ec98:	bhi.n	ed1c <_realloc_r+0xac>
    ec9a:	movs	r2, #16
    ec9c:	mov	r5, r2
    ec9e:	cmp	r7, r5
    eca0:	bhi.n	ed26 <_realloc_r+0xb6>
    eca2:	cmp	r4, r2
    eca4:	bge.n	ed92 <_realloc_r+0x122>
    eca6:	ldr	r3, [pc, #804]	; (efcc <_realloc_r+0x35c>)
    eca8:	ldr	r1, [r3, #8]
    ecaa:	add.w	r0, r8, r4
    ecae:	cmp	r0, r1
    ecb0:	ldr	r1, [r0, #4]
    ecb2:	beq.w	ee68 <_realloc_r+0x1f8>
    ecb6:	bic.w	r3, r1, #1
    ecba:	add	r3, r0
    ecbc:	ldr	r3, [r3, #4]
    ecbe:	lsls	r3, r3, #31
    ecc0:	bpl.n	edbe <_realloc_r+0x14e>
    ecc2:	tst.w	lr, #1
    ecc6:	beq.n	ed34 <_realloc_r+0xc4>
    ecc8:	mov	r1, r7
    ecca:	mov	r0, r9
    eccc:	bl	e584 <_malloc_r>
    ecd0:	mov	r7, r0
    ecd2:	cbz	r0, ed0e <_realloc_r+0x9e>
    ecd4:	ldr.w	r3, [r6, #-4]
    ecd8:	bic.w	r3, r3, #1
    ecdc:	add	r3, r8
    ecde:	sub.w	r2, r0, #8
    ece2:	cmp	r2, r3
    ece4:	beq.w	ef70 <_realloc_r+0x300>
    ece8:	subs	r2, r4, #4
    ecea:	cmp	r2, #36	; 0x24
    ecec:	bhi.w	ef52 <_realloc_r+0x2e2>
    ecf0:	cmp	r2, #19
    ecf2:	bhi.w	eefe <_realloc_r+0x28e>
    ecf6:	mov	r3, r0
    ecf8:	mov	r2, r6
    ecfa:	ldr	r1, [r2, #0]
    ecfc:	str	r1, [r3, #0]
    ecfe:	ldr	r1, [r2, #4]
    ed00:	str	r1, [r3, #4]
    ed02:	ldr	r2, [r2, #8]
    ed04:	str	r2, [r3, #8]
    ed06:	mov	r1, r6
    ed08:	mov	r0, r9
    ed0a:	bl	f6c4 <_free_r>
    ed0e:	mov	r0, r9
    ed10:	bl	ec5c <__malloc_unlock>
    ed14:	mov	r0, r7
    ed16:	add	sp, #12
    ed18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed1c:	bic.w	r5, r5, #7
    ed20:	cmp	r5, #0
    ed22:	mov	r2, r5
    ed24:	bge.n	ec9e <_realloc_r+0x2e>
    ed26:	movs	r3, #12
    ed28:	movs	r0, #0
    ed2a:	str.w	r3, [r9]
    ed2e:	add	sp, #12
    ed30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed34:	ldr.w	r3, [r6, #-8]
    ed38:	rsb	sl, r3, r8
    ed3c:	ldr.w	r3, [sl, #4]
    ed40:	bic.w	ip, r3, #3
    ed44:	add.w	r3, r4, ip
    ed48:	cmp	r3, r2
    ed4a:	blt.n	ecc8 <_realloc_r+0x58>
    ed4c:	mov	r7, sl
    ed4e:	ldr.w	r1, [sl, #12]
    ed52:	ldr.w	r0, [r7, #8]!
    ed56:	subs	r2, r4, #4
    ed58:	cmp	r2, #36	; 0x24
    ed5a:	str	r1, [r0, #12]
    ed5c:	str	r0, [r1, #8]
    ed5e:	bhi.w	ef90 <_realloc_r+0x320>
    ed62:	cmp	r2, #19
    ed64:	bls.w	ef8c <_realloc_r+0x31c>
    ed68:	ldr	r1, [r6, #0]
    ed6a:	str.w	r1, [sl, #8]
    ed6e:	ldr	r1, [r6, #4]
    ed70:	str.w	r1, [sl, #12]
    ed74:	cmp	r2, #27
    ed76:	bhi.w	efd0 <_realloc_r+0x360>
    ed7a:	adds	r6, #8
    ed7c:	add.w	r2, sl, #16
    ed80:	ldr	r1, [r6, #0]
    ed82:	str	r1, [r2, #0]
    ed84:	ldr	r1, [r6, #4]
    ed86:	str	r1, [r2, #4]
    ed88:	ldr	r1, [r6, #8]
    ed8a:	str	r1, [r2, #8]
    ed8c:	mov	r6, r7
    ed8e:	mov	r4, r3
    ed90:	mov	r8, sl
    ed92:	subs	r3, r4, r5
    ed94:	cmp	r3, #15
    ed96:	bhi.n	edd4 <_realloc_r+0x164>
    ed98:	ldr.w	r3, [r8, #4]
    ed9c:	and.w	r3, r3, #1
    eda0:	orrs	r3, r4
    eda2:	add	r4, r8
    eda4:	str.w	r3, [r8, #4]
    eda8:	ldr	r3, [r4, #4]
    edaa:	orr.w	r3, r3, #1
    edae:	str	r3, [r4, #4]
    edb0:	mov	r0, r9
    edb2:	bl	ec5c <__malloc_unlock>
    edb6:	mov	r0, r6
    edb8:	add	sp, #12
    edba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edbe:	bic.w	r1, r1, #3
    edc2:	add	r1, r4
    edc4:	cmp	r1, r2
    edc6:	blt.n	ee0c <_realloc_r+0x19c>
    edc8:	ldr	r3, [r0, #12]
    edca:	ldr	r2, [r0, #8]
    edcc:	mov	r4, r1
    edce:	str	r3, [r2, #12]
    edd0:	str	r2, [r3, #8]
    edd2:	b.n	ed92 <_realloc_r+0x122>
    edd4:	ldr.w	r2, [r8, #4]
    edd8:	add.w	r1, r8, r5
    eddc:	and.w	r2, r2, #1
    ede0:	orrs	r5, r2
    ede2:	orr.w	r2, r3, #1
    ede6:	add	r3, r1
    ede8:	str.w	r5, [r8, #4]
    edec:	str	r2, [r1, #4]
    edee:	ldr	r2, [r3, #4]
    edf0:	orr.w	r2, r2, #1
    edf4:	adds	r1, #8
    edf6:	str	r2, [r3, #4]
    edf8:	mov	r0, r9
    edfa:	bl	f6c4 <_free_r>
    edfe:	b.n	edb0 <_realloc_r+0x140>
    ee00:	mov	r1, r2
    ee02:	add	sp, #12
    ee04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee08:	b.w	e584 <_malloc_r>
    ee0c:	tst.w	lr, #1
    ee10:	bne.w	ecc8 <_realloc_r+0x58>
    ee14:	ldr.w	r3, [r6, #-8]
    ee18:	rsb	sl, r3, r8
    ee1c:	ldr.w	r3, [sl, #4]
    ee20:	bic.w	ip, r3, #3
    ee24:	add.w	lr, r1, ip
    ee28:	cmp	lr, r2
    ee2a:	blt.n	ed44 <_realloc_r+0xd4>
    ee2c:	ldr	r3, [r0, #12]
    ee2e:	ldr	r2, [r0, #8]
    ee30:	mov	r7, sl
    ee32:	str	r3, [r2, #12]
    ee34:	str	r2, [r3, #8]
    ee36:	ldr.w	r1, [r7, #8]!
    ee3a:	ldr.w	r3, [sl, #12]
    ee3e:	str	r3, [r1, #12]
    ee40:	subs	r2, r4, #4
    ee42:	cmp	r2, #36	; 0x24
    ee44:	str	r1, [r3, #8]
    ee46:	bhi.w	ef7c <_realloc_r+0x30c>
    ee4a:	cmp	r2, #19
    ee4c:	bls.n	ef14 <_realloc_r+0x2a4>
    ee4e:	ldr	r3, [r6, #0]
    ee50:	str.w	r3, [sl, #8]
    ee54:	ldr	r3, [r6, #4]
    ee56:	str.w	r3, [sl, #12]
    ee5a:	cmp	r2, #27
    ee5c:	bhi.w	efa0 <_realloc_r+0x330>
    ee60:	adds	r6, #8
    ee62:	add.w	r3, sl, #16
    ee66:	b.n	ef16 <_realloc_r+0x2a6>
    ee68:	bic.w	fp, r1, #3
    ee6c:	add	fp, r4
    ee6e:	add.w	r0, r5, #16
    ee72:	cmp	fp, r0
    ee74:	bge.n	ef2a <_realloc_r+0x2ba>
    ee76:	tst.w	lr, #1
    ee7a:	bne.w	ecc8 <_realloc_r+0x58>
    ee7e:	ldr.w	r1, [r6, #-8]
    ee82:	rsb	sl, r1, r8
    ee86:	ldr.w	r1, [sl, #4]
    ee8a:	bic.w	ip, r1, #3
    ee8e:	add	fp, ip
    ee90:	cmp	r0, fp
    ee92:	bgt.w	ed44 <_realloc_r+0xd4>
    ee96:	mov	r7, sl
    ee98:	ldr.w	r1, [sl, #12]
    ee9c:	ldr.w	r0, [r7, #8]!
    eea0:	subs	r2, r4, #4
    eea2:	cmp	r2, #36	; 0x24
    eea4:	str	r1, [r0, #12]
    eea6:	str	r0, [r1, #8]
    eea8:	bhi.w	f014 <_realloc_r+0x3a4>
    eeac:	cmp	r2, #19
    eeae:	bls.w	effc <_realloc_r+0x38c>
    eeb2:	ldr	r1, [r6, #0]
    eeb4:	str.w	r1, [sl, #8]
    eeb8:	ldr	r1, [r6, #4]
    eeba:	str.w	r1, [sl, #12]
    eebe:	cmp	r2, #27
    eec0:	bhi.w	f022 <_realloc_r+0x3b2>
    eec4:	adds	r6, #8
    eec6:	add.w	r2, sl, #16
    eeca:	ldr	r1, [r6, #0]
    eecc:	str	r1, [r2, #0]
    eece:	ldr	r1, [r6, #4]
    eed0:	str	r1, [r2, #4]
    eed2:	ldr	r1, [r6, #8]
    eed4:	str	r1, [r2, #8]
    eed6:	add.w	r1, sl, r5
    eeda:	rsb	r2, r5, fp
    eede:	orr.w	r2, r2, #1
    eee2:	str	r1, [r3, #8]
    eee4:	str	r2, [r1, #4]
    eee6:	ldr.w	r3, [sl, #4]
    eeea:	and.w	r3, r3, #1
    eeee:	orrs	r5, r3
    eef0:	mov	r0, r9
    eef2:	str.w	r5, [sl, #4]
    eef6:	bl	ec5c <__malloc_unlock>
    eefa:	mov	r0, r7
    eefc:	b.n	edb8 <_realloc_r+0x148>
    eefe:	ldr	r3, [r6, #0]
    ef00:	str	r3, [r0, #0]
    ef02:	ldr	r3, [r6, #4]
    ef04:	str	r3, [r0, #4]
    ef06:	cmp	r2, #27
    ef08:	bhi.n	ef5a <_realloc_r+0x2ea>
    ef0a:	add.w	r3, r0, #8
    ef0e:	add.w	r2, r6, #8
    ef12:	b.n	ecfa <_realloc_r+0x8a>
    ef14:	mov	r3, r7
    ef16:	ldr	r2, [r6, #0]
    ef18:	str	r2, [r3, #0]
    ef1a:	ldr	r2, [r6, #4]
    ef1c:	str	r2, [r3, #4]
    ef1e:	ldr	r2, [r6, #8]
    ef20:	str	r2, [r3, #8]
    ef22:	mov	r6, r7
    ef24:	mov	r4, lr
    ef26:	mov	r8, sl
    ef28:	b.n	ed92 <_realloc_r+0x122>
    ef2a:	add.w	r1, r8, r5
    ef2e:	rsb	fp, r5, fp
    ef32:	orr.w	r2, fp, #1
    ef36:	str	r1, [r3, #8]
    ef38:	str	r2, [r1, #4]
    ef3a:	ldr.w	r3, [r6, #-4]
    ef3e:	and.w	r3, r3, #1
    ef42:	orrs	r5, r3
    ef44:	mov	r0, r9
    ef46:	str.w	r5, [r6, #-4]
    ef4a:	bl	ec5c <__malloc_unlock>
    ef4e:	mov	r0, r6
    ef50:	b.n	edb8 <_realloc_r+0x148>
    ef52:	mov	r1, r6
    ef54:	bl	eaf4 <memmove>
    ef58:	b.n	ed06 <_realloc_r+0x96>
    ef5a:	ldr	r3, [r6, #8]
    ef5c:	str	r3, [r0, #8]
    ef5e:	ldr	r3, [r6, #12]
    ef60:	str	r3, [r0, #12]
    ef62:	cmp	r2, #36	; 0x24
    ef64:	beq.n	efb8 <_realloc_r+0x348>
    ef66:	add.w	r3, r0, #16
    ef6a:	add.w	r2, r6, #16
    ef6e:	b.n	ecfa <_realloc_r+0x8a>
    ef70:	ldr.w	r3, [r0, #-4]
    ef74:	bic.w	r3, r3, #3
    ef78:	add	r4, r3
    ef7a:	b.n	ed92 <_realloc_r+0x122>
    ef7c:	mov	r1, r6
    ef7e:	mov	r0, r7
    ef80:	mov	r4, lr
    ef82:	mov	r8, sl
    ef84:	bl	eaf4 <memmove>
    ef88:	mov	r6, r7
    ef8a:	b.n	ed92 <_realloc_r+0x122>
    ef8c:	mov	r2, r7
    ef8e:	b.n	ed80 <_realloc_r+0x110>
    ef90:	mov	r1, r6
    ef92:	mov	r0, r7
    ef94:	mov	r4, r3
    ef96:	mov	r8, sl
    ef98:	bl	eaf4 <memmove>
    ef9c:	mov	r6, r7
    ef9e:	b.n	ed92 <_realloc_r+0x122>
    efa0:	ldr	r3, [r6, #8]
    efa2:	str.w	r3, [sl, #16]
    efa6:	ldr	r3, [r6, #12]
    efa8:	str.w	r3, [sl, #20]
    efac:	cmp	r2, #36	; 0x24
    efae:	beq.n	efe8 <_realloc_r+0x378>
    efb0:	adds	r6, #16
    efb2:	add.w	r3, sl, #24
    efb6:	b.n	ef16 <_realloc_r+0x2a6>
    efb8:	ldr	r3, [r6, #16]
    efba:	str	r3, [r0, #16]
    efbc:	ldr	r3, [r6, #20]
    efbe:	str	r3, [r0, #20]
    efc0:	add.w	r2, r6, #24
    efc4:	add.w	r3, r0, #24
    efc8:	b.n	ecfa <_realloc_r+0x8a>
    efca:	nop
    efcc:	.word	0x20001354
    efd0:	ldr	r1, [r6, #8]
    efd2:	str.w	r1, [sl, #16]
    efd6:	ldr	r1, [r6, #12]
    efd8:	str.w	r1, [sl, #20]
    efdc:	cmp	r2, #36	; 0x24
    efde:	beq.n	f000 <_realloc_r+0x390>
    efe0:	adds	r6, #16
    efe2:	add.w	r2, sl, #24
    efe6:	b.n	ed80 <_realloc_r+0x110>
    efe8:	ldr	r3, [r6, #16]
    efea:	str.w	r3, [sl, #24]
    efee:	ldr	r3, [r6, #20]
    eff0:	str.w	r3, [sl, #28]
    eff4:	adds	r6, #24
    eff6:	add.w	r3, sl, #32
    effa:	b.n	ef16 <_realloc_r+0x2a6>
    effc:	mov	r2, r7
    effe:	b.n	eeca <_realloc_r+0x25a>
    f000:	ldr	r2, [r6, #16]
    f002:	str.w	r2, [sl, #24]
    f006:	ldr	r2, [r6, #20]
    f008:	str.w	r2, [sl, #28]
    f00c:	adds	r6, #24
    f00e:	add.w	r2, sl, #32
    f012:	b.n	ed80 <_realloc_r+0x110>
    f014:	mov	r1, r6
    f016:	mov	r0, r7
    f018:	str	r3, [sp, #4]
    f01a:	bl	eaf4 <memmove>
    f01e:	ldr	r3, [sp, #4]
    f020:	b.n	eed6 <_realloc_r+0x266>
    f022:	ldr	r1, [r6, #8]
    f024:	str.w	r1, [sl, #16]
    f028:	ldr	r1, [r6, #12]
    f02a:	str.w	r1, [sl, #20]
    f02e:	cmp	r2, #36	; 0x24
    f030:	beq.n	f03a <_realloc_r+0x3ca>
    f032:	adds	r6, #16
    f034:	add.w	r2, sl, #24
    f038:	b.n	eeca <_realloc_r+0x25a>
    f03a:	ldr	r2, [r6, #16]
    f03c:	str.w	r2, [sl, #24]
    f040:	ldr	r2, [r6, #20]
    f042:	str.w	r2, [sl, #28]
    f046:	adds	r6, #24
    f048:	add.w	r2, sl, #32
    f04c:	b.n	eeca <_realloc_r+0x25a>
    f04e:	nop

0000f050 <_sbrk_r>:
    f050:	push	{r3, r4, r5, lr}
    f052:	ldr	r4, [pc, #28]	; (f070 <_sbrk_r+0x20>)
    f054:	movs	r3, #0
    f056:	mov	r5, r0
    f058:	mov	r0, r1
    f05a:	str	r3, [r4, #0]
    f05c:	bl	df18 <_sbrk>
    f060:	adds	r3, r0, #1
    f062:	beq.n	f066 <_sbrk_r+0x16>
    f064:	pop	{r3, r4, r5, pc}
    f066:	ldr	r3, [r4, #0]
    f068:	cmp	r3, #0
    f06a:	beq.n	f064 <_sbrk_r+0x14>
    f06c:	str	r3, [r5, #0]
    f06e:	pop	{r3, r4, r5, pc}
    f070:	.word	0x200106c0
	...
    f080:	sub.w	r0, r2, r3
    f084:	bx	lr
    f086:	nop

0000f088 <strcmp>:
    f088:	ldrb	r2, [r0, #0]
    f08a:	ldrb	r3, [r1, #0]
    f08c:	cmp	r2, #1
    f08e:	it	cs
    f090:	cmpcs	r2, r3
    f092:	bne.n	f080 <_sbrk_r+0x30>
    f094:	strd	r4, r5, [sp, #-16]!
    f098:	orr.w	r4, r0, r1
    f09c:	strd	r6, r7, [sp, #8]
    f0a0:	mvn.w	ip, #0
    f0a4:	mov.w	r2, r4, lsl #29
    f0a8:	cbz	r2, f0f0 <strcmp+0x68>
    f0aa:	eor.w	r4, r0, r1
    f0ae:	tst.w	r4, #7
    f0b2:	bne.n	f18a <strcmp+0x102>
    f0b4:	and.w	r4, r0, #7
    f0b8:	bic.w	r0, r0, #7
    f0bc:	and.w	r5, r4, #3
    f0c0:	bic.w	r1, r1, #7
    f0c4:	mov.w	r5, r5, lsl #3
    f0c8:	ldrd	r2, r3, [r0], #16
    f0cc:	tst.w	r4, #4
    f0d0:	ldrd	r6, r7, [r1], #16
    f0d4:	lsl.w	r4, ip, r5
    f0d8:	orn	r2, r2, r4
    f0dc:	orn	r6, r6, r4
    f0e0:	beq.n	f0f8 <strcmp+0x70>
    f0e2:	orn	r3, r3, r4
    f0e6:	mov	r2, ip
    f0e8:	orn	r7, r7, r4
    f0ec:	mov	r6, ip
    f0ee:	b.n	f0f8 <strcmp+0x70>
    f0f0:	ldrd	r2, r3, [r0], #16
    f0f4:	ldrd	r6, r7, [r1], #16
    f0f8:	uadd8	r5, r2, ip
    f0fc:	eor.w	r4, r2, r6
    f100:	sel	r4, r4, ip
    f104:	cbnz	r4, f162 <strcmp+0xda>
    f106:	uadd8	r5, r3, ip
    f10a:	eor.w	r5, r3, r7
    f10e:	sel	r5, r5, ip
    f112:	cbnz	r5, f13a <strcmp+0xb2>
    f114:	ldrd	r2, r3, [r0, #-8]
    f118:	ldrd	r6, r7, [r1, #-8]
    f11c:	uadd8	r5, r2, ip
    f120:	eor.w	r4, r2, r6
    f124:	sel	r4, r4, ip
    f128:	uadd8	r5, r3, ip
    f12c:	eor.w	r5, r3, r7
    f130:	sel	r5, r5, ip
    f134:	orrs	r5, r4
    f136:	beq.n	f0f0 <strcmp+0x68>
    f138:	cbnz	r4, f162 <strcmp+0xda>
    f13a:	rev	r5, r5
    f13c:	clz	r4, r5
    f140:	bic.w	r4, r4, #7
    f144:	lsr.w	r1, r7, r4
    f148:	ldrd	r6, r7, [sp, #8]
    f14c:	lsr.w	r3, r3, r4
    f150:	and.w	r0, r3, #255	; 0xff
    f154:	and.w	r1, r1, #255	; 0xff
    f158:	ldrd	r4, r5, [sp], #16
    f15c:	sub.w	r0, r0, r1
    f160:	bx	lr
    f162:	rev	r4, r4
    f164:	clz	r4, r4
    f168:	bic.w	r4, r4, #7
    f16c:	lsr.w	r1, r6, r4
    f170:	ldrd	r6, r7, [sp, #8]
    f174:	lsr.w	r2, r2, r4
    f178:	and.w	r0, r2, #255	; 0xff
    f17c:	and.w	r1, r1, #255	; 0xff
    f180:	ldrd	r4, r5, [sp], #16
    f184:	sub.w	r0, r0, r1
    f188:	bx	lr
    f18a:	tst.w	r4, #3
    f18e:	bne.n	f20a <strcmp+0x182>
    f190:	ands.w	r4, r0, #3
    f194:	bne.n	f1e8 <strcmp+0x160>
    f196:	ldr.w	r2, [r0], #8
    f19a:	ldr.w	r3, [r1], #8
    f19e:	uadd8	r5, r2, ip
    f1a2:	eor.w	r5, r2, r3
    f1a6:	sel	r5, r5, ip
    f1aa:	cbnz	r5, f1c4 <strcmp+0x13c>
    f1ac:	ldr.w	r2, [r0, #-4]
    f1b0:	ldr.w	r3, [r1, #-4]
    f1b4:	uadd8	r5, r2, ip
    f1b8:	eor.w	r5, r2, r3
    f1bc:	sel	r5, r5, ip
    f1c0:	cmp	r5, #0
    f1c2:	beq.n	f196 <strcmp+0x10e>
    f1c4:	rev	r5, r5
    f1c6:	clz	r4, r5
    f1ca:	bic.w	r4, r4, #7
    f1ce:	lsr.w	r1, r3, r4
    f1d2:	lsr.w	r2, r2, r4
    f1d6:	and.w	r0, r2, #255	; 0xff
    f1da:	and.w	r1, r1, #255	; 0xff
    f1de:	ldrd	r4, r5, [sp], #16
    f1e2:	sub.w	r0, r0, r1
    f1e6:	bx	lr
    f1e8:	mov.w	r4, r4, lsl #3
    f1ec:	bic.w	r0, r0, #3
    f1f0:	ldr.w	r2, [r0], #8
    f1f4:	bic.w	r1, r1, #3
    f1f8:	ldr.w	r3, [r1], #8
    f1fc:	lsl.w	r4, ip, r4
    f200:	orn	r2, r2, r4
    f204:	orn	r3, r3, r4
    f208:	b.n	f19e <strcmp+0x116>
    f20a:	ands.w	r4, r0, #3
    f20e:	beq.n	f246 <strcmp+0x1be>
    f210:	sub.w	r1, r1, r4
    f214:	bic.w	r0, r0, #3
    f218:	lsls	r4, r4, #31
    f21a:	ldr.w	r2, [r0], #4
    f21e:	beq.n	f22e <strcmp+0x1a6>
    f220:	bcs.n	f242 <strcmp+0x1ba>
    f222:	ldrb	r3, [r1, #2]
    f224:	uxtb.w	r4, r2, ror #16
    f228:	subs	r4, r4, r3
    f22a:	bne.n	f23a <strcmp+0x1b2>
    f22c:	cbz	r3, f23a <strcmp+0x1b2>
    f22e:	ldrb	r3, [r1, #3]
    f230:	uxtb.w	r4, r2, ror #24
    f234:	subs	r4, r4, r3
    f236:	bne.n	f23a <strcmp+0x1b2>
    f238:	cbnz	r3, f242 <strcmp+0x1ba>
    f23a:	mov	r0, r4
    f23c:	ldr.w	r4, [sp], #16
    f240:	bx	lr
    f242:	add.w	r1, r1, #4
    f246:	ldr.w	r2, [r0], #4
    f24a:	lsls	r4, r1, #31
    f24c:	bic.w	r1, r1, #3
    f250:	ldr.w	r3, [r1], #4
    f254:	bhi.n	f2e8 <strcmp+0x260>
    f256:	bcs.n	f2a2 <strcmp+0x21a>
    f258:	bic.w	r4, r2, #4278190080	; 0xff000000
    f25c:	uadd8	r5, r2, ip
    f260:	eors.w	r5, r4, r3, lsr #8
    f264:	sel	r5, r5, ip
    f268:	bne.n	f280 <strcmp+0x1f8>
    f26a:	cbnz	r5, f286 <strcmp+0x1fe>
    f26c:	ldr.w	r3, [r1], #4
    f270:	eor.w	r4, r4, r2
    f274:	cmp.w	r4, r3, lsl #24
    f278:	bne.n	f298 <strcmp+0x210>
    f27a:	ldr.w	r2, [r0], #4
    f27e:	b.n	f258 <strcmp+0x1d0>
    f280:	mov.w	r3, r3, lsr #8
    f284:	b.n	f332 <strcmp+0x2aa>
    f286:	bics.w	r5, r5, #4278190080	; 0xff000000
    f28a:	bne.n	f328 <strcmp+0x2a0>
    f28c:	ldrb	r0, [r1, #0]
    f28e:	ldrd	r4, r5, [sp], #16
    f292:	rsb	r0, r0, #0
    f296:	bx	lr
    f298:	mov.w	r2, r2, lsr #24
    f29c:	and.w	r3, r3, #255	; 0xff
    f2a0:	b.n	f332 <strcmp+0x2aa>
    f2a2:	and.w	r4, r2, ip, lsr #16
    f2a6:	uadd8	r5, r2, ip
    f2aa:	eors.w	r5, r4, r3, lsr #16
    f2ae:	sel	r5, r5, ip
    f2b2:	bne.n	f2ca <strcmp+0x242>
    f2b4:	cbnz	r5, f2d0 <strcmp+0x248>
    f2b6:	ldr.w	r3, [r1], #4
    f2ba:	eor.w	r4, r4, r2
    f2be:	cmp.w	r4, r3, lsl #16
    f2c2:	bne.n	f2de <strcmp+0x256>
    f2c4:	ldr.w	r2, [r0], #4
    f2c8:	b.n	f2a2 <strcmp+0x21a>
    f2ca:	mov.w	r3, r3, lsr #16
    f2ce:	b.n	f332 <strcmp+0x2aa>
    f2d0:	ands.w	r5, r5, ip, lsr #16
    f2d4:	bne.n	f328 <strcmp+0x2a0>
    f2d6:	ldrh	r3, [r1, #0]
    f2d8:	mov.w	r2, r2, lsr #16
    f2dc:	b.n	f332 <strcmp+0x2aa>
    f2de:	mov.w	r2, r2, lsr #16
    f2e2:	and.w	r3, r3, ip, lsr #16
    f2e6:	b.n	f332 <strcmp+0x2aa>
    f2e8:	and.w	r4, r2, #255	; 0xff
    f2ec:	uadd8	r5, r2, ip
    f2f0:	eors.w	r5, r4, r3, lsr #24
    f2f4:	sel	r5, r5, ip
    f2f8:	bne.n	f310 <strcmp+0x288>
    f2fa:	cbnz	r5, f316 <strcmp+0x28e>
    f2fc:	ldr.w	r3, [r1], #4
    f300:	eor.w	r4, r4, r2
    f304:	cmp.w	r4, r3, lsl #8
    f308:	bne.n	f31e <strcmp+0x296>
    f30a:	ldr.w	r2, [r0], #4
    f30e:	b.n	f2e8 <strcmp+0x260>
    f310:	mov.w	r3, r3, lsr #24
    f314:	b.n	f332 <strcmp+0x2aa>
    f316:	tst.w	r5, #255	; 0xff
    f31a:	bne.n	f328 <strcmp+0x2a0>
    f31c:	ldr	r3, [r1, #0]
    f31e:	mov.w	r2, r2, lsr #8
    f322:	bic.w	r3, r3, #4278190080	; 0xff000000
    f326:	b.n	f332 <strcmp+0x2aa>
    f328:	mov.w	r0, #0
    f32c:	ldrd	r4, r5, [sp], #16
    f330:	bx	lr
    f332:	rev	r2, r2
    f334:	rev	r3, r3
    f336:	uadd8	r4, r2, ip
    f33a:	eor.w	r4, r2, r3
    f33e:	sel	r5, r4, ip
    f342:	clz	r4, r5
    f346:	lsl.w	r2, r2, r4
    f34a:	lsl.w	r3, r3, r4
    f34e:	mov.w	r0, r2, lsr #24
    f352:	ldrd	r4, r5, [sp], #16
    f356:	sub.w	r0, r0, r3, lsr #24
    f35a:	bx	lr

0000f35c <strcpy>:
    f35c:	eor.w	r2, r0, r1
    f360:	mov	ip, r0
    f362:	tst.w	r2, #3
    f366:	bne.n	f408 <strcpy+0xac>
    f368:	tst.w	r1, #3
    f36c:	bne.n	f3d4 <strcpy+0x78>
    f36e:	str.w	r4, [sp, #-4]!
    f372:	tst.w	r1, #4
    f376:	ldr.w	r3, [r1], #4
    f37a:	beq.n	f394 <strcpy+0x38>
    f37c:	sub.w	r2, r3, #16843009	; 0x1010101
    f380:	bics	r2, r3
    f382:	tst.w	r2, #2155905152	; 0x80808080
    f386:	itt	eq
    f388:	streq.w	r3, [ip], #4
    f38c:	ldreq.w	r3, [r1], #4
    f390:	bne.n	f3c0 <strcpy+0x64>
    f392:	nop
    f394:	ldr.w	r4, [r1], #4
    f398:	sub.w	r2, r3, #16843009	; 0x1010101
    f39c:	bics	r2, r3
    f39e:	tst.w	r2, #2155905152	; 0x80808080
    f3a2:	sub.w	r2, r4, #16843009	; 0x1010101
    f3a6:	bne.n	f3c0 <strcpy+0x64>
    f3a8:	str.w	r3, [ip], #4
    f3ac:	bics	r2, r4
    f3ae:	tst.w	r2, #2155905152	; 0x80808080
    f3b2:	itt	eq
    f3b4:	ldreq.w	r3, [r1], #4
    f3b8:	streq.w	r4, [ip], #4
    f3bc:	beq.n	f394 <strcpy+0x38>
    f3be:	mov	r3, r4
    f3c0:	strb.w	r3, [ip], #1
    f3c4:	tst.w	r3, #255	; 0xff
    f3c8:	mov.w	r3, r3, ror #8
    f3cc:	bne.n	f3c0 <strcpy+0x64>
    f3ce:	ldr.w	r4, [sp], #4
    f3d2:	bx	lr
    f3d4:	tst.w	r1, #1
    f3d8:	beq.n	f3e8 <strcpy+0x8c>
    f3da:	ldrb.w	r2, [r1], #1
    f3de:	strb.w	r2, [ip], #1
    f3e2:	cmp	r2, #0
    f3e4:	it	eq
    f3e6:	bxeq	lr
    f3e8:	tst.w	r1, #2
    f3ec:	beq.n	f36e <strcpy+0x12>
    f3ee:	ldrh.w	r2, [r1], #2
    f3f2:	tst.w	r2, #255	; 0xff
    f3f6:	itet	ne
    f3f8:	strhne.w	r2, [ip], #2
    f3fc:	strbeq.w	r2, [ip]
    f400:	tstne.w	r2, #65280	; 0xff00
    f404:	bne.n	f36e <strcpy+0x12>
    f406:	bx	lr
    f408:	ldrb.w	r2, [r1], #1
    f40c:	strb.w	r2, [ip], #1
    f410:	cmp	r2, #0
    f412:	bne.n	f408 <strcpy+0xac>
    f414:	bx	lr
    f416:	nop
	...

0000f440 <strlen>:
    f440:	pld	[r0]
    f444:	strd	r4, r5, [sp, #-8]!
    f448:	bic.w	r1, r0, #7
    f44c:	mvn.w	ip, #0
    f450:	ands.w	r4, r0, #7
    f454:	pld	[r1, #32]
    f458:	bne.w	f4ee <strlen+0xae>
    f45c:	mov.w	r4, #0
    f460:	mvn.w	r0, #7
    f464:	ldrd	r2, r3, [r1]
    f468:	pld	[r1, #64]	; 0x40
    f46c:	add.w	r0, r0, #8
    f470:	uadd8	r2, r2, ip
    f474:	sel	r2, r4, ip
    f478:	uadd8	r3, r3, ip
    f47c:	sel	r3, r2, ip
    f480:	cbnz	r3, f4d6 <strlen+0x96>
    f482:	ldrd	r2, r3, [r1, #8]
    f486:	uadd8	r2, r2, ip
    f48a:	add.w	r0, r0, #8
    f48e:	sel	r2, r4, ip
    f492:	uadd8	r3, r3, ip
    f496:	sel	r3, r2, ip
    f49a:	cbnz	r3, f4d6 <strlen+0x96>
    f49c:	ldrd	r2, r3, [r1, #16]
    f4a0:	uadd8	r2, r2, ip
    f4a4:	add.w	r0, r0, #8
    f4a8:	sel	r2, r4, ip
    f4ac:	uadd8	r3, r3, ip
    f4b0:	sel	r3, r2, ip
    f4b4:	cbnz	r3, f4d6 <strlen+0x96>
    f4b6:	ldrd	r2, r3, [r1, #24]
    f4ba:	add.w	r1, r1, #32
    f4be:	uadd8	r2, r2, ip
    f4c2:	add.w	r0, r0, #8
    f4c6:	sel	r2, r4, ip
    f4ca:	uadd8	r3, r3, ip
    f4ce:	sel	r3, r2, ip
    f4d2:	cmp	r3, #0
    f4d4:	beq.n	f464 <strlen+0x24>
    f4d6:	cmp	r2, #0
    f4d8:	itt	eq
    f4da:	addeq	r0, #4
    f4dc:	moveq	r2, r3
    f4de:	rev	r2, r2
    f4e0:	clz	r2, r2
    f4e4:	ldrd	r4, r5, [sp], #8
    f4e8:	add.w	r0, r0, r2, lsr #3
    f4ec:	bx	lr
    f4ee:	ldrd	r2, r3, [r1]
    f4f2:	and.w	r5, r4, #3
    f4f6:	rsb	r0, r4, #0
    f4fa:	mov.w	r5, r5, lsl #3
    f4fe:	tst.w	r4, #4
    f502:	pld	[r1, #64]	; 0x40
    f506:	lsl.w	r5, ip, r5
    f50a:	orn	r2, r2, r5
    f50e:	itt	ne
    f510:	ornne	r3, r3, r5
    f514:	movne	r2, ip
    f516:	mov.w	r4, #0
    f51a:	b.n	f470 <strlen+0x30>

0000f51c <strncpy>:
    f51c:	orr.w	r3, r0, r1
    f520:	lsls	r3, r3, #30
    f522:	push	{r4, r5, r6}
    f524:	bne.n	f57e <strncpy+0x62>
    f526:	cmp	r2, #3
    f528:	bls.n	f57e <strncpy+0x62>
    f52a:	mov	r4, r1
    f52c:	mov	r3, r0
    f52e:	mov	r1, r4
    f530:	ldr.w	r6, [r4], #4
    f534:	sub.w	r5, r6, #16843009	; 0x1010101
    f538:	bic.w	r5, r5, r6
    f53c:	tst.w	r5, #2155905152	; 0x80808080
    f540:	bne.n	f550 <strncpy+0x34>
    f542:	subs	r2, #4
    f544:	cmp	r2, #3
    f546:	str.w	r6, [r3], #4
    f54a:	mov	r1, r4
    f54c:	bhi.n	f52e <strncpy+0x12>
    f54e:	cbz	r2, f57a <strncpy+0x5e>
    f550:	ldrb	r4, [r1, #0]
    f552:	strb	r4, [r3, #0]
    f554:	subs	r2, #1
    f556:	adds	r3, #1
    f558:	adds	r1, #1
    f55a:	cbz	r4, f56c <strncpy+0x50>
    f55c:	cbz	r2, f57a <strncpy+0x5e>
    f55e:	ldrb.w	r4, [r1], #1
    f562:	strb.w	r4, [r3], #1
    f566:	subs	r2, #1
    f568:	cmp	r4, #0
    f56a:	bne.n	f55c <strncpy+0x40>
    f56c:	cbz	r2, f57a <strncpy+0x5e>
    f56e:	add	r2, r3
    f570:	movs	r1, #0
    f572:	strb.w	r1, [r3], #1
    f576:	cmp	r2, r3
    f578:	bne.n	f572 <strncpy+0x56>
    f57a:	pop	{r4, r5, r6}
    f57c:	bx	lr
    f57e:	mov	r3, r0
    f580:	b.n	f54e <strncpy+0x32>
    f582:	nop

0000f584 <__register_exitproc>:
    f584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f588:	ldr	r4, [pc, #148]	; (f620 <__register_exitproc+0x9c>)
    f58a:	ldr	r5, [r4, #0]
    f58c:	ldr.w	r4, [r5, #328]	; 0x148
    f590:	mov	r6, r0
    f592:	mov	r8, r1
    f594:	mov	sl, r2
    f596:	mov	r9, r3
    f598:	cbz	r4, f60c <__register_exitproc+0x88>
    f59a:	ldr	r0, [r4, #4]
    f59c:	cmp	r0, #31
    f59e:	bgt.n	f5d0 <__register_exitproc+0x4c>
    f5a0:	adds	r3, r0, #1
    f5a2:	cbz	r6, f5c2 <__register_exitproc+0x3e>
    f5a4:	add.w	r5, r4, r0, lsl #2
    f5a8:	movs	r2, #1
    f5aa:	str.w	sl, [r5, #136]	; 0x88
    f5ae:	ldr.w	r1, [r4, #392]	; 0x188
    f5b2:	lsls	r2, r0
    f5b4:	orrs	r1, r2
    f5b6:	cmp	r6, #2
    f5b8:	str.w	r1, [r4, #392]	; 0x188
    f5bc:	str.w	r9, [r5, #264]	; 0x108
    f5c0:	beq.n	f600 <__register_exitproc+0x7c>
    f5c2:	adds	r0, #2
    f5c4:	str	r3, [r4, #4]
    f5c6:	str.w	r8, [r4, r0, lsl #2]
    f5ca:	movs	r0, #0
    f5cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5d0:	ldr	r3, [pc, #80]	; (f624 <__register_exitproc+0xa0>)
    f5d2:	cbz	r3, f616 <__register_exitproc+0x92>
    f5d4:	mov.w	r0, #400	; 0x190
    f5d8:	bl	e564 <malloc>
    f5dc:	mov	r4, r0
    f5de:	cbz	r0, f616 <__register_exitproc+0x92>
    f5e0:	ldr.w	r3, [r5, #328]	; 0x148
    f5e4:	movs	r7, #0
    f5e6:	stmia.w	r0, {r3, r7}
    f5ea:	str.w	r4, [r5, #328]	; 0x148
    f5ee:	mov	r0, r7
    f5f0:	movs	r3, #1
    f5f2:	str.w	r7, [r4, #392]	; 0x188
    f5f6:	str.w	r7, [r4, #396]	; 0x18c
    f5fa:	cmp	r6, #0
    f5fc:	beq.n	f5c2 <__register_exitproc+0x3e>
    f5fe:	b.n	f5a4 <__register_exitproc+0x20>
    f600:	ldr.w	r1, [r4, #396]	; 0x18c
    f604:	orrs	r2, r1
    f606:	str.w	r2, [r4, #396]	; 0x18c
    f60a:	b.n	f5c2 <__register_exitproc+0x3e>
    f60c:	add.w	r4, r5, #332	; 0x14c
    f610:	str.w	r4, [r5, #328]	; 0x148
    f614:	b.n	f59a <__register_exitproc+0x16>
    f616:	mov.w	r0, #4294967295
    f61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f61e:	nop
    f620:	.word	0x20000960
    f624:	.word	0x0000e565

0000f628 <_malloc_trim_r>:
    f628:	push	{r3, r4, r5, r6, r7, lr}
    f62a:	ldr	r7, [pc, #140]	; (f6b8 <_malloc_trim_r+0x90>)
    f62c:	mov	r4, r1
    f62e:	mov	r6, r0
    f630:	bl	ec58 <__malloc_lock>
    f634:	ldr	r3, [r7, #8]
    f636:	ldr	r5, [r3, #4]
    f638:	bic.w	r5, r5, #3
    f63c:	subs	r1, r5, r4
    f63e:	addw	r1, r1, #4079	; 0xfef
    f642:	bic.w	r1, r1, #4080	; 0xff0
    f646:	bic.w	r1, r1, #15
    f64a:	sub.w	r4, r1, #4096	; 0x1000
    f64e:	cmp.w	r4, #4096	; 0x1000
    f652:	blt.n	f664 <_malloc_trim_r+0x3c>
    f654:	movs	r1, #0
    f656:	mov	r0, r6
    f658:	bl	f050 <_sbrk_r>
    f65c:	ldr	r3, [r7, #8]
    f65e:	add	r3, r5
    f660:	cmp	r0, r3
    f662:	beq.n	f66e <_malloc_trim_r+0x46>
    f664:	mov	r0, r6
    f666:	bl	ec5c <__malloc_unlock>
    f66a:	movs	r0, #0
    f66c:	pop	{r3, r4, r5, r6, r7, pc}
    f66e:	negs	r1, r4
    f670:	mov	r0, r6
    f672:	bl	f050 <_sbrk_r>
    f676:	adds	r0, #1
    f678:	beq.n	f696 <_malloc_trim_r+0x6e>
    f67a:	ldr	r3, [pc, #64]	; (f6bc <_malloc_trim_r+0x94>)
    f67c:	ldr	r2, [r7, #8]
    f67e:	ldr	r1, [r3, #0]
    f680:	subs	r5, r5, r4
    f682:	orr.w	r5, r5, #1
    f686:	mov	r0, r6
    f688:	subs	r1, r1, r4
    f68a:	str	r5, [r2, #4]
    f68c:	str	r1, [r3, #0]
    f68e:	bl	ec5c <__malloc_unlock>
    f692:	movs	r0, #1
    f694:	pop	{r3, r4, r5, r6, r7, pc}
    f696:	movs	r1, #0
    f698:	mov	r0, r6
    f69a:	bl	f050 <_sbrk_r>
    f69e:	ldr	r2, [r7, #8]
    f6a0:	subs	r3, r0, r2
    f6a2:	cmp	r3, #15
    f6a4:	ble.n	f664 <_malloc_trim_r+0x3c>
    f6a6:	ldr	r4, [pc, #24]	; (f6c0 <_malloc_trim_r+0x98>)
    f6a8:	ldr	r1, [pc, #16]	; (f6bc <_malloc_trim_r+0x94>)
    f6aa:	ldr	r4, [r4, #0]
    f6ac:	orr.w	r3, r3, #1
    f6b0:	subs	r0, r0, r4
    f6b2:	str	r3, [r2, #4]
    f6b4:	str	r0, [r1, #0]
    f6b6:	b.n	f664 <_malloc_trim_r+0x3c>
    f6b8:	.word	0x20001354
    f6bc:	.word	0x2000e7fc
    f6c0:	.word	0x20001760

0000f6c4 <_free_r>:
    f6c4:	cmp	r1, #0
    f6c6:	beq.n	f754 <_free_r+0x90>
    f6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6cc:	mov	r5, r1
    f6ce:	mov	r8, r0
    f6d0:	bl	ec58 <__malloc_lock>
    f6d4:	ldr.w	r7, [r5, #-4]
    f6d8:	ldr	r1, [pc, #424]	; (f884 <_free_r+0x1c0>)
    f6da:	bic.w	r3, r7, #1
    f6de:	sub.w	r4, r5, #8
    f6e2:	adds	r2, r4, r3
    f6e4:	ldr	r6, [r1, #8]
    f6e6:	ldr	r0, [r2, #4]
    f6e8:	cmp	r2, r6
    f6ea:	bic.w	r0, r0, #3
    f6ee:	beq.n	f7b6 <_free_r+0xf2>
    f6f0:	lsls	r6, r7, #31
    f6f2:	str	r0, [r2, #4]
    f6f4:	bmi.n	f70e <_free_r+0x4a>
    f6f6:	ldr.w	r7, [r5, #-8]
    f6fa:	subs	r4, r4, r7
    f6fc:	add.w	lr, r1, #8
    f700:	ldr	r5, [r4, #8]
    f702:	cmp	r5, lr
    f704:	add	r3, r7
    f706:	beq.n	f7e8 <_free_r+0x124>
    f708:	ldr	r7, [r4, #12]
    f70a:	str	r7, [r5, #12]
    f70c:	str	r5, [r7, #8]
    f70e:	adds	r5, r2, r0
    f710:	ldr	r5, [r5, #4]
    f712:	lsls	r5, r5, #31
    f714:	bpl.n	f79c <_free_r+0xd8>
    f716:	orr.w	r2, r3, #1
    f71a:	str	r2, [r4, #4]
    f71c:	str	r3, [r4, r3]
    f71e:	cmp.w	r3, #512	; 0x200
    f722:	bcs.n	f756 <_free_r+0x92>
    f724:	lsrs	r3, r3, #3
    f726:	adds	r2, r3, #1
    f728:	ldr	r5, [r1, #4]
    f72a:	ldr.w	r7, [r1, r2, lsl #3]
    f72e:	str	r7, [r4, #8]
    f730:	movs	r0, #1
    f732:	asrs	r3, r3, #2
    f734:	lsl.w	r3, r0, r3
    f738:	add.w	r0, r1, r2, lsl #3
    f73c:	orrs	r5, r3
    f73e:	subs	r0, #8
    f740:	str	r0, [r4, #12]
    f742:	str	r5, [r1, #4]
    f744:	str.w	r4, [r1, r2, lsl #3]
    f748:	str	r4, [r7, #12]
    f74a:	mov	r0, r8
    f74c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f750:	b.w	ec5c <__malloc_unlock>
    f754:	bx	lr
    f756:	lsrs	r2, r3, #9
    f758:	cmp	r2, #4
    f75a:	bhi.n	f804 <_free_r+0x140>
    f75c:	lsrs	r2, r3, #6
    f75e:	add.w	r7, r2, #57	; 0x39
    f762:	lsls	r7, r7, #1
    f764:	add.w	r5, r2, #56	; 0x38
    f768:	add.w	r0, r1, r7, lsl #2
    f76c:	ldr.w	r2, [r1, r7, lsl #2]
    f770:	ldr	r1, [pc, #272]	; (f884 <_free_r+0x1c0>)
    f772:	subs	r0, #8
    f774:	cmp	r0, r2
    f776:	beq.n	f814 <_free_r+0x150>
    f778:	ldr	r1, [r2, #4]
    f77a:	bic.w	r1, r1, #3
    f77e:	cmp	r3, r1
    f780:	bcs.n	f788 <_free_r+0xc4>
    f782:	ldr	r2, [r2, #8]
    f784:	cmp	r0, r2
    f786:	bne.n	f778 <_free_r+0xb4>
    f788:	ldr	r0, [r2, #12]
    f78a:	str	r0, [r4, #12]
    f78c:	str	r2, [r4, #8]
    f78e:	str	r4, [r0, #8]
    f790:	str	r4, [r2, #12]
    f792:	mov	r0, r8
    f794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f798:	b.w	ec5c <__malloc_unlock>
    f79c:	ldr	r5, [r2, #8]
    f79e:	ldr	r7, [pc, #232]	; (f888 <_free_r+0x1c4>)
    f7a0:	cmp	r5, r7
    f7a2:	add	r3, r0
    f7a4:	beq.n	f826 <_free_r+0x162>
    f7a6:	ldr	r0, [r2, #12]
    f7a8:	str	r0, [r5, #12]
    f7aa:	orr.w	r2, r3, #1
    f7ae:	str	r5, [r0, #8]
    f7b0:	str	r2, [r4, #4]
    f7b2:	str	r3, [r4, r3]
    f7b4:	b.n	f71e <_free_r+0x5a>
    f7b6:	lsls	r7, r7, #31
    f7b8:	add	r3, r0
    f7ba:	bmi.n	f7cc <_free_r+0x108>
    f7bc:	ldr.w	r2, [r5, #-8]
    f7c0:	subs	r4, r4, r2
    f7c2:	add	r3, r2
    f7c4:	ldr	r0, [r4, #8]
    f7c6:	ldr	r2, [r4, #12]
    f7c8:	str	r2, [r0, #12]
    f7ca:	str	r0, [r2, #8]
    f7cc:	ldr	r2, [pc, #188]	; (f88c <_free_r+0x1c8>)
    f7ce:	ldr	r2, [r2, #0]
    f7d0:	orr.w	r0, r3, #1
    f7d4:	cmp	r3, r2
    f7d6:	str	r0, [r4, #4]
    f7d8:	str	r4, [r1, #8]
    f7da:	bcc.n	f74a <_free_r+0x86>
    f7dc:	ldr	r3, [pc, #176]	; (f890 <_free_r+0x1cc>)
    f7de:	mov	r0, r8
    f7e0:	ldr	r1, [r3, #0]
    f7e2:	bl	f628 <_malloc_trim_r>
    f7e6:	b.n	f74a <_free_r+0x86>
    f7e8:	adds	r1, r2, r0
    f7ea:	ldr	r1, [r1, #4]
    f7ec:	lsls	r1, r1, #31
    f7ee:	bmi.n	f87a <_free_r+0x1b6>
    f7f0:	ldr	r1, [r2, #8]
    f7f2:	ldr	r2, [r2, #12]
    f7f4:	str	r2, [r1, #12]
    f7f6:	add	r3, r0
    f7f8:	orr.w	r0, r3, #1
    f7fc:	str	r1, [r2, #8]
    f7fe:	str	r0, [r4, #4]
    f800:	str	r3, [r4, r3]
    f802:	b.n	f74a <_free_r+0x86>
    f804:	cmp	r2, #20
    f806:	bhi.n	f838 <_free_r+0x174>
    f808:	add.w	r7, r2, #92	; 0x5c
    f80c:	lsls	r7, r7, #1
    f80e:	add.w	r5, r2, #91	; 0x5b
    f812:	b.n	f768 <_free_r+0xa4>
    f814:	asrs	r2, r5, #2
    f816:	ldr	r3, [r1, #4]
    f818:	movs	r5, #1
    f81a:	lsl.w	r2, r5, r2
    f81e:	orrs	r3, r2
    f820:	str	r3, [r1, #4]
    f822:	mov	r2, r0
    f824:	b.n	f78a <_free_r+0xc6>
    f826:	orr.w	r2, r3, #1
    f82a:	str	r4, [r1, #20]
    f82c:	str	r4, [r1, #16]
    f82e:	str	r5, [r4, #12]
    f830:	str	r5, [r4, #8]
    f832:	str	r2, [r4, #4]
    f834:	str	r3, [r4, r3]
    f836:	b.n	f74a <_free_r+0x86>
    f838:	cmp	r2, #84	; 0x54
    f83a:	bhi.n	f84a <_free_r+0x186>
    f83c:	lsrs	r2, r3, #12
    f83e:	add.w	r7, r2, #111	; 0x6f
    f842:	lsls	r7, r7, #1
    f844:	add.w	r5, r2, #110	; 0x6e
    f848:	b.n	f768 <_free_r+0xa4>
    f84a:	cmp.w	r2, #340	; 0x154
    f84e:	bhi.n	f85e <_free_r+0x19a>
    f850:	lsrs	r2, r3, #15
    f852:	add.w	r7, r2, #120	; 0x78
    f856:	lsls	r7, r7, #1
    f858:	add.w	r5, r2, #119	; 0x77
    f85c:	b.n	f768 <_free_r+0xa4>
    f85e:	movw	r0, #1364	; 0x554
    f862:	cmp	r2, r0
    f864:	bhi.n	f874 <_free_r+0x1b0>
    f866:	lsrs	r2, r3, #18
    f868:	add.w	r7, r2, #125	; 0x7d
    f86c:	lsls	r7, r7, #1
    f86e:	add.w	r5, r2, #124	; 0x7c
    f872:	b.n	f768 <_free_r+0xa4>
    f874:	movs	r7, #254	; 0xfe
    f876:	movs	r5, #126	; 0x7e
    f878:	b.n	f768 <_free_r+0xa4>
    f87a:	orr.w	r2, r3, #1
    f87e:	str	r2, [r4, #4]
    f880:	str	r3, [r4, r3]
    f882:	b.n	f74a <_free_r+0x86>
    f884:	.word	0x20001354
    f888:	.word	0x2000135c
    f88c:	.word	0x2000175c
    f890:	.word	0x2000e7f8
    f894:	.word	0x00000000

0000f898 <___init_veneer>:
    f898:	ldr.w	pc, [pc]	; f89c <___init_veneer+0x4>
    f89c:	.word	0x600015a9

Disassembly of section .fini:

0000f8a0 <_fini>:
    f8a0:	push	{r3, r4, r5, r6, r7, lr}
    f8a2:	nop
