
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000b6b0 l    d  .fini	00000000 .fini
0000b6b4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
200015a0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000a858 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
000096ac l     F .text.itcm	0000005c schedule_transfer
00009708 l     F .text.itcm	00000030 run_callbacks
00009738 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.0
000097dc l     F .text.itcm	000005b8 isr
200158a8 l     O .bss	00000004 endpointN_notify_mask
200158b0 l     O .bss	00000004 endpoint0_notify_mask
200158b4 l     O .bss	00000001 usb_reboot_timer
200158b8 l     O .bss	00000008 endpoint0_setupdata
200158c0 l     O .bss	00000008 reply_buffer
200158c8 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
200158dc l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20015900 l     O .bss	00000004 s_hotTemp
20015904 l     O .bss	00000004 s_hot_ROOM
20015908 l     O .bss	00000004 s_roomC_hotC
2001590c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200015a0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200015a4 l       .bss	00000000 object.8610
60001648 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000007c l     F .text.itcm	00000164 getRGB(int, int, int, int*, int*, int*)
000017a8 l     F .text.itcm	00007440 _GLOBAL__sub_I_nextTime1
2000074c l     O .data	000002a4 background_B
200009f0 l     O .data	000002a4 background_A
20000000 l     O .data	00000400 dim_curve
20006a68 l     O .bss	000007ec mask_A
20007254 l     O .bss	000007ec mask_B
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
00008fa4 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00008fb0 l     F .text.itcm	00000028 rx_event
00008fd8 l     F .text.itcm	00000070 usb_serial_flush_callback
00009048 l     F .text.itcm	0000015c usb_serial_write.part.1
20014f50 l     O .bss	00000700 txbuffer
20015650 l     O .bss	00000001 tx_noautoflush
20015651 l     O .bss	00000001 tx_head
20015654 l     O .bss	000000c0 rx_buffer
20015714 l     O .bss	00000006 rx_index
2001571c l     O .bss	00000006 rx_count
20015740 l     O .bss	00000060 rx_transfer
200157a0 l     O .bss	00000002 tx_available
200157c0 l     O .bss	000000e0 tx_transfer
200158a0 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000a074 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000c9c l     O .data	0000000a qualifier_descriptor
20000cc0 l     O .data	00000043 config_descriptor
20000d04 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
200158dd l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000a21c l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
200158e0 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000d60 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015f0 l     F .text.progmem	00000008 __delay_veneer
600015f8 l     F .text.progmem	00000008 __memset_veneer
60001600 l     F .text.progmem	00000008 __loop_veneer
60001608 l     F .text.progmem	00000008 __yield_veneer
60001610 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001618 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001620 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001628 l     F .text.progmem	00000008 __setup_veneer
60001630 l     F .text.progmem	00000008 __pwm_init_veneer
60001638 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001640 l     F .text.progmem	00000008 __set_arm_clock_veneer
0000b6a0 l     F .text.itcm	00000008 ___init_veneer
000092cc g     F .text.itcm	00000014 usb_serial_available
0000a864 g     F .text.itcm	00000002 startup_default_late_hook
0000a17c  w    F .text.itcm	000000a0 yield
200158ac g     O .bss	00000004 usb_timer1_callback
20000ca8 g     O .data	00000018 usb_string_manufacturer_name_default
20015910 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000a4e4 g     F .text.itcm	00000020 Print::println()
00000730 g     F .text.itcm	00000188 init_B()
00008f4c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000b368 g     F .text.itcm	00000002 __malloc_unlock
6000138c g     F .text.progmem	00000058 analog_init
000005a8 g     F .text.itcm	00000188 init_A()
20000c98 g     O .data	00000004 F_CPU_ACTUAL
0000ac2c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000a3f8 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
200158f8 g     O .bss	00000001 EventResponder::runningFromYield
20014e8c g     O .bss	000000c4 Alarm
0000acdc g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
200158e4 g     O .bss	00000004 EventResponder::firstInterrupt
00009edc g     F .text.itcm	00000028 usb_transfer_status
20000d4a g     O .data	00000001 usb_enable_serial_event_processing
0000a4c8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000420 g     O .data	00000280 digital_pin_to_info_PGM
200176c0 g     O .bss	00000004 errno
0000b6b0 g       .text.itcm	00000000 _etext
00008efc g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
200015a0 g       .bss	00000000 _sbss
00008c08 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001660 g       *ABS*	00000000 _stextload
000008dc g     F .text.itcm	00000ecc loop
2000e480 g     O .bss	00001540 sat_automaton_B
00009d94 g     F .text.itcm	00000064 usb_config_rx
0000a390 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00008cb4 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
200158e8 g     O .bss	00000004 EventResponder::lastInterrupt
0000a714 g     F .text.itcm	00000134 memcpy
200158d8 g     O .bss	00000004 systick_millis_count
200158d0 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000ca8  w    O .data	00000018 usb_string_manufacturer_name
0000ad38 g     F .text.itcm	00000010 malloc
0000a32c  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
600012a0 g     F .text.progmem	000000ec usb_init
20015938 g     O .bss	00000004 __malloc_top_pad
20017280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000748 g     O .data	00000000 .hidden __dso_handle
00008c2c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000b36c g     F .text.itcm	00000024 _sbrk_r
0000a860 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	0000026c ResetHandler
0000925c g     F .text.itcm	0000004c usb_serial_getchar
20015964 g     O .bss	00000008 usb_cdc_line_coding
0000a098 g     F .text.itcm	0000000a digitalWrite
200158f0 g     O .bss	00000004 EventResponder::lastYield
20015934 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a0a4 g     F .text.itcm	00000080 pinMode
0000a5a0 g     F .text.itcm	00000174 Print::printFloat(double, unsigned char)
20280000 g       .bss	00000000 _heap_end
200158f4 g     O .bss	00000004 EventResponder::firstYield
20000744 g     O .data	00000004 _global_impure_ptr
0000ace8 g     F .text.itcm	00000050 __libc_init_array
0000a868  w    F .text.itcm	0000008c HardFault_HandlerC
0000a4b0  w    F .text.itcm	00000004 usb_serial_class::clear()
0000a8f4 g     F .text.itcm	00000030 _sbrk
6000cd1c g       *ABS*	00000000 _sdataload
200158fc g     O .bss	00000004 MillisTimer::listWaiting
20000d5c g     O .data	00000004 __brkval
200158a1 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015e0 g     F .text.progmem	00000000 _init
000091a4 g     F .text.itcm	00000002 usb_serial_reset
20017700 g       .bss	00000000 _ebss
0000ac60 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000ba00 g     O .bss	00001540 bg_automaton_A
00008c64 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
20016000 g     O .bss	00000020 endpoint0_transfer_data
0000a974 g     F .text.itcm	000002b8 pwm_init
60001484 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00000000  w      *UND*	00000000 __deregister_frame_info
20016020 g     O .bss	00000020 endpoint0_transfer_ack
2001596c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009e90 g     F .text.itcm	00000028 usb_transmit
0000a490 g     F .text.itcm	00000020 systick_isr
20012ec8 g     O .bss	00001fb0 next_colors_B
20000d4c g     O .data	00000010 Serial
2001592c g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
0000a4d0  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000a860  w    F .text.itcm	00000002 startup_early_hook
000092a8 g     F .text.itcm	00000024 usb_serial_peekchar
00009418 g     F .text.itcm	00000294 set_arm_clock
200158d4 g     O .bss	00000004 systick_cycle_count
20000d34 g     O .data	00000016 usb_string_serial_number_default
0000b4d0 g     F .text.itcm	000001d0 _free_r
200015c0 g     O .bss	00000004 nextTime2
0000a4c0  w    F .text.itcm	00000004 usb_serial_class::flush()
20001598 g     O .data	00000004 __malloc_sbrk_base
0000a4b8  w    F .text.itcm	00000004 usb_serial_class::read()
00009e60 g     F .text.itcm	0000002e usb_prepare_transfer
0000a848 g     F .text.itcm	00000018 unused_interrupt_vector
00000318 g     F .text.itcm	00000138 gen_color_matrix_B()
600014e8 g     F .text.progmem	000000f8 tempmon_init
200158a4 g     O .bss	00000004 usb_timer0_callback
0000a4d8  w    F .text.itcm	0000000c serialEvent()
0000b390 g     F .text.itcm	000000a4 __register_exitproc
00008f4c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
000092e0 g     F .text.itcm	0000003c usb_serial_flush_input
0000931c g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2001593c g     O .bss	00000028 __malloc_current_mallinfo
2000a4c0 g     O .bss	00001540 grow_automaton_A
0000acd0 g     F .text.itcm	0000000c __cxa_atexit
20007a40 g     O .bss	00001540 sat_automaton_A
0000a2a4 g     F .text.itcm	00000008 random(unsigned long)
2000070c  w    O .data	00000028 vtable for usb_serial_class
200158ec g     O .bss	00000004 MillisTimer::listActive
000001e0 g     F .text.itcm	00000138 gen_color_matrix_A()
2000118c g     O .data	00000408 __malloc_av_
00000450 g     F .text.itcm	00000158 interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)
000093ac g     F .text.itcm	0000006c usb_serial_flush_output
0000b364 g     F .text.itcm	00000002 __malloc_lock
20017400 g     O .bss	000002c0 _VectorsRam
0000ac70 g     F .text.itcm	0000005e _calloc_r
0000b2c8 g     F .text.itcm	0000009a memset
20015930 g     O .bss	00000004 __malloc_max_total_mem
0000a124 g     F .text.itcm	00000058 usb_init_serialnumber
60001654 g       .text.progmem	00000000 __init_array_end
0000ad58 g     F .text.itcm	00000570 _malloc_r
0000a2ac g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00009fc4 g     F .text.itcm	00000054 micros
0000b434 g     F .text.itcm	0000009c _malloc_trim_r
2000f9d8 g     O .bss	00001540 fg_automaton_A
20000d30 g     O .data	00000004 string0
00009348 g     F .text.itcm	00000018 usb_serial_write
0000a864  w    F .text.itcm	00000002 startup_late_hook
0000a4bc  w    F .text.itcm	00000004 usb_serial_class::available()
20017000 g     O .bss	00000280 endpoint_queue_head
20000d18  w    O .data	00000016 usb_string_product_name
00009f04 g     F .text.itcm	000000c0 delay
0000b6b0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
0000a584 g     F .text.itcm	00000016 Print::print(long)
2000cf40 g     O .bss	00001540 bg_automaton_B
20003574 g     O .bss	00001fb0 prev_colors_B
20001188 g     O .data	00000004 _impure_ptr
60001648 g       .text.progmem	00000000 __preinit_array_end
00008e94 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000a298 g     F .text.itcm	0000000c randomSeed(unsigned long)
000008b8 g     F .text.itcm	00000024 setup
200006a0 g     O .data	0000006c usb_descriptor_list
20014e78 g     O .bss	00000014 screen_B
20008f80 g     O .bss	00001540 grow_automaton_B
200015c4 g     O .bss	00001fb0 prev_colors_A
20070000 g       .bss	00000000 _estack
20010f18 g     O .bss	00001fb0 next_colors_A
00009360 g     F .text.itcm	0000004c usb_serial_write_buffer_free
2000f9c0 g     O .bss	00000014 screen_A
20005528 g     O .bss	00001540 fg_automaton_B
000091a8 g     F .text.itcm	000000b4 usb_serial_configure
200015a0 g       .data	00000000 _edata
00008ed0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000a4c4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000a924 g     F .text.itcm	0000004e ultoa
0000a348 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001594 g     O .data	00000004 __malloc_trim_threshold
0000a4b4  w    F .text.itcm	00000004 usb_serial_class::peek()
60001648 g       .text.progmem	00000000 __init_array_start
0000a018 g     F .text.itcm	0000005c analogRead
20000c94 g     O .data	00000004 F_BUS_ACTUAL
20000404 g     O .data	0000001c pin_to_channel
00008ed0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000d18 g     O .data	00000016 usb_string_product_name_default
600013e4 g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001648 g       .text.progmem	00000000 __preinit_array_start
00009eb8 g     F .text.itcm	00000024 usb_receive
00008be8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00008be8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000e2b0 g       *ABS*	00000000 _flashimagelen
0000ac54 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
200015bc g     O .bss	00000004 nextTime1
0000a38c g     F .text.itcm	00000004 pendablesrvreq_isr
0000a504 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00009df8 g     F .text.itcm	00000068 usb_config_tx
0000ad48 g     F .text.itcm	00000010 free
20000d34  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104a:	ldr	r1, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #464]	; (60001224 <ResetHandler+0x1f0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001072:	ldr	r1, [pc, #440]	; (6000122c <ResetHandler+0x1f8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109a:	ldr	r3, [pc, #412]	; (60001238 <ResetHandler+0x204>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #384]	; (6000123c <ResetHandler+0x208>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #384]	; (60001240 <ResetHandler+0x20c>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #380]	; (60001244 <ResetHandler+0x210>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #372]	; (60001248 <ResetHandler+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #372]	; (6000124c <ResetHandler+0x218>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #364]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #424]	; 60001294 <ResetHandler+0x260>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #420]	; 60001298 <ResetHandler+0x264>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #420]	; 6000129c <ResetHandler+0x268>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #276]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	600013e4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #292]	; (6000125c <ResetHandler+0x228>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #296]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #284]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #284]	; (6000126c <ResetHandler+0x238>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #288]	; (60001270 <ResetHandler+0x23c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #276]	; (6000127c <ResetHandler+0x248>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	60001484 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #260]	; (60001280 <ResetHandler+0x24c>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001640 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #236]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x258>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #188]	; (60001288 <ResetHandler+0x254>)
600011cc:	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x25c>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	60001610 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600012a0 <usb_init>
	analog_init();
600011e4:	bl	6000138c <analog_init>
	pwm_init();
600011e8:	bl	60001630 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	600014e8 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001638 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001618 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
60001200:	bl	60001628 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
60001204:	bl	60001600 <__loop_veneer>
		yield();
60001208:	bl	60001608 <__yield_veneer>
6000120c:	b.n	60001204 <ResetHandler+0x1d0>
6000120e:	nop
60001210:	.word	0x400ac000
60001214:	.word	0xaaaaaaaf
60001218:	.word	0x20070000
6000121c:	.word	0x00000000
60001220:	.word	0x60001660
60001224:	.word	0x0000b6b0
60001228:	.word	0x20000000
6000122c:	.word	0x6000cd1c
60001230:	.word	0x200015a0
60001234:	.word	0x200015a0
60001238:	.word	0x20017700
6000123c:	.word	0xe000ed88
60001240:	.word	0x200173fc
60001244:	.word	0x0000a849
60001248:	.word	0xe000e400
6000124c:	.word	0xe000e4a0
60001250:	.word	0x400d8000
60001254:	.word	0x400fc000
60001258:	.word	0xe000ed08
6000125c:	.word	0xe000e014
60001260:	.word	0xe000e018
60001264:	.word	0x0000a38d
60001268:	.word	0xe000edfc
6000126c:	.word	0x20200000
60001270:	.word	0x0000a491
60001274:	.word	0xe0001000
60001278:	.word	0xe0001004
6000127c:	.word	0x200158d4
60001280:	.word	0x23c34600
60001284:	.word	0x40084000
60001288:	.word	0x400d4000
6000128c:	.word	0x56c00000
60001290:	.word	0x200158d8
60001294:	.word	0x20017400
60001298:	.word	0x2018101b
6000129c:	.word	0x13110d0c

600012a0 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a0:	ldr	r3, [pc, #192]	; (60001364 <usb_init+0xc4>)
600012a2:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
600012a6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012ac:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012b0:	bl	60001620 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b4:	ldr	r1, [pc, #176]	; (60001368 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b6:	ldr	r0, [pc, #180]	; (6000136c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012bc:	ldr	r4, [pc, #176]	; (60001370 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012be:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c2:	ldr	r3, [pc, #176]	; (60001374 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012cc:	ldr	r2, [r4, #0]
600012ce:	ands	r3, r2
600012d0:	cbnz	r3, 600012da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012d2:	ldr.w	r3, [r0, #424]	; 0x1a8
600012d6:	lsls	r2, r3, #30
600012d8:	beq.n	60001310 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012da:	ldr	r3, [pc, #144]	; (6000136c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012dc:	mov.w	r1, #2147483648	; 0x80000000
600012e0:	ldr	r2, [pc, #140]	; (60001370 <usb_init+0xd0>)
600012e2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012e4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e6:	ldr.w	r1, [r3, #320]	; 0x140
600012ea:	orr.w	r1, r1, #2
600012ee:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012f2:	ldr.w	r3, [r2, #320]	; 0x140
600012f6:	lsls	r3, r3, #30
600012f8:	bmi.n	600012f2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012fa:	mov.w	r0, #131072	; 0x20000
600012fe:	ldr	r1, [pc, #120]	; (60001378 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001300:	ldr	r3, [pc, #108]	; (60001370 <usb_init+0xd0>)
60001302:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001306:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001308:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000130a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000130c:	bl	600015f0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001310:	ldr	r5, [pc, #104]	; (6000137c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001312:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001314:	ldr	r3, [pc, #88]	; (60001370 <usb_init+0xd0>)
60001316:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000131a:	ldr	r4, [pc, #80]	; (6000136c <usb_init+0xcc>)
6000131c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001320:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001322:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001324:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001326:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000132a:	mov.w	r2, #640	; 0x280
6000132e:	bl	600015f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001332:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001336:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000133a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000133e:	ldr	r2, [pc, #64]	; (60001380 <usb_init+0xe0>)
60001340:	ldr	r1, [pc, #64]	; (60001384 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001342:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001344:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001346:	str.w	r5, [r4, #344]	; 0x158
6000134a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000134e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001352:	ldr	r2, [pc, #52]	; (60001388 <usb_init+0xe8>)
60001354:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001358:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000135a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000135c:	str.w	r3, [r4, #320]	; 0x140
60001360:	pop	{r4, r5, r6, pc}
60001362:	nop
60001364:	.word	0x400d8000
60001368:	.word	0x400fc000
6000136c:	.word	0x402e0000
60001370:	.word	0x400d9000
60001374:	.word	0x001e1c00
60001378:	.word	0xe000e28c
6000137c:	.word	0x20017000
60001380:	.word	0x20017400
60001384:	.word	0x000097dd
60001388:	.word	0xe000e10c

6000138c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000138c:	ldr	r3, [pc, #68]	; (600013d4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000138e:	ldr	r1, [pc, #72]	; (600013d8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001390:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001392:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001394:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001398:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000139a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000139c:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600013a0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600013a2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600013a4:	orr.w	r0, r0, #768	; 0x300
600013a8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600013aa:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600013ac:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600013ae:	ldr	r3, [r2, #72]	; 0x48
600013b0:	lsls	r3, r3, #24
600013b2:	bmi.n	600013ae <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600013b4:	ldr	r3, [pc, #36]	; (600013dc <analog_init+0x50>)
600013b6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600013ba:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600013bc:	ldr	r2, [pc, #24]	; (600013d8 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600013be:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600013c0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600013c2:	ldr	r3, [r2, #72]	; 0x48
600013c4:	ands.w	r3, r3, #128	; 0x80
600013c8:	bne.n	600013c2 <analog_init+0x36>
	calibrating = 0;
600013ca:	ldr	r2, [pc, #20]	; (600013e0 <analog_init+0x54>)
600013cc:	strb	r3, [r2, #0]
}
600013ce:	pop	{r4, r5}
600013d0:	bx	lr
600013d2:	nop
600013d4:	.word	0x400fc000
600013d8:	.word	0x400c4000
600013dc:	.word	0x400c8000
600013e0:	.word	0x200158dc

600013e4 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013e4:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013e6:	ldr	r2, [pc, #100]	; (6000144c <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013e8:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ea:	ldr	r3, [pc, #100]	; (60001450 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ec:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013f0:	ldr	r0, [pc, #96]	; (60001454 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013f2:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013f4:	ldr	r6, [pc, #96]	; (60001458 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013f6:	ldr	r5, [pc, #100]	; (6000145c <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013f8:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013fa:	ldr	r7, [pc, #100]	; (60001460 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013fc:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001400:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001402:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001404:	ldr	r6, [pc, #92]	; (60001464 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001406:	ldr	r5, [pc, #96]	; (60001468 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001408:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000140a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000140c:	ldr	r7, [pc, #92]	; (6000146c <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000140e:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001410:	ldr	r6, [pc, #92]	; (60001470 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001412:	ldr	r5, [pc, #96]	; (60001474 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001414:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001416:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001418:	ldr	r7, [pc, #92]	; (60001478 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000141a:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000141c:	ldr	r6, [pc, #92]	; (6000147c <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000141e:	ldr	r5, [pc, #96]	; (60001480 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001420:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001422:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001424:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001426:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001428:	dsb	sy
	asm("isb");
6000142c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001430:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
60001434:	dsb	sy
	asm("isb");
60001438:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000143c:	ldr.w	r3, [r2, #-136]
60001440:	orr.w	r3, r3, #196608	; 0x30000
60001444:	str.w	r3, [r2, #-136]
60001448:	pop	{r4, r5, r6, r7, pc}
6000144a:	nop
6000144c:	.word	0xe000ed9c
60001450:	.word	0xe000eda0
60001454:	.word	0xe000ed94
60001458:	.word	0x03080025
6000145c:	.word	0x00200011
60001460:	.word	0x07020021
60001464:	.word	0x20000012
60001468:	.word	0x13080025
6000146c:	.word	0x20200013
60001470:	.word	0x130b0027
60001474:	.word	0x40000014
60001478:	.word	0x13100033
6000147c:	.word	0x60000015
60001480:	.word	0x070b002f

60001484 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
60001484:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001486:	ldr	r2, [pc, #92]	; (600014e4 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001488:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000148a:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148e:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001492:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001496:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000149a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000149e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014a0:	tst.w	r3, #2
600014a4:	beq.n	600014b4 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600014a6:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600014a8:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600014aa:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014ac:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014ae:	tst.w	r3, #2
600014b2:	bne.n	600014a6 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600014b4:	tst.w	r3, #8192	; 0x2000
600014b8:	bne.n	600014be <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600014ba:	str	r5, [r2, #20]
			continue;
600014bc:	b.n	6000149e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600014be:	tst.w	r3, #4096	; 0x1000
600014c2:	bne.n	600014c8 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600014c4:	str	r6, [r2, #20]
			continue;
600014c6:	b.n	6000149e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600014c8:	cmp	r3, #0
600014ca:	bge.n	6000149e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600014cc:	tst.w	r3, #65536	; 0x10000
600014d0:	beq.n	600014d6 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600014d2:	str	r1, [r2, #24]
			continue;
600014d4:	b.n	6000149e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600014d6:	lsls	r3, r3, #25
600014d8:	bmi.n	600014de <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014da:	str	r7, [r2, #20]
			continue;
600014dc:	b.n	6000149e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014de:	pop	{r4, r5, r6, r7}
600014e0:	bx	lr
600014e2:	nop
600014e4:	.word	0x400d8000

600014e8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e8:	ldr	r2, [pc, #216]	; (600015c4 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014ea:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014ec:	ldr	r1, [pc, #216]	; (600015c8 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014ee:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f2:	ldr	r3, [r2, #0]
600014f4:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014f8:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014fa:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fc:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001500:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001504:	ldr.w	lr, [pc, #212]	; 600015dc <tempmon_init+0xf4>
60001508:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000150a:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150e:	ldr	r7, [pc, #188]	; (600015cc <tempmon_init+0xe4>)
60001510:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001514:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001518:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000151c:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001520:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001528:	vmov	s15, r0
6000152c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001532:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001536:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153e:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001548:	ldr	r5, [pc, #132]	; (600015d0 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000154a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001550:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001558:	ldr	r6, [pc, #120]	; (600015d4 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	ldr	r1, [pc, #120]	; (600015d8 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001560:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001562:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001564:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001568:	vmov	s15, r3
6000156c:	vcvt.f32.u32	s15, s15
60001570:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001574:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001578:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001580:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001584:	vmov	r3, s11
60001588:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000158c:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001590:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001594:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001596:	and.w	r1, r1, r0, lsl #16
6000159a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000159e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a2:	orrs	r3, r1
600015a4:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a8:	vmov	r3, s15
600015ac:	ldr.w	r1, [r2, #272]	; 0x110
600015b0:	ubfx	r3, r3, #0, #12
600015b4:	orrs	r3, r1
600015b6:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015ba:	ldr	r3, [r2, #0]
600015bc:	orr.w	r3, r3, #2
600015c0:	str	r3, [r2, #0]
600015c2:	pop	{r4, r5, r6, r7, pc}
600015c4:	.word	0x400d8180
600015c8:	.word	0x401f4400
600015cc:	.word	0x20015908
600015d0:	.word	0x20015904
600015d4:	.word	0x2001590c
600015d8:	.word	0x0fff0000
600015dc:	.word	0x20015900

600015e0 <_init>:
600015e0:	push	{r3, r4, r5, r6, r7, lr}
600015e2:	nop
600015e4:	pop	{r3, r4, r5, r6, r7}
600015e6:	pop	{r3}
600015e8:	mov	lr, r3
600015ea:	bx	lr
600015ec:			; <UNDEFINED> instruction: 0xffffffff

600015f0 <__delay_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__delay_veneer+0x4>
600015f4:	.word	0x00009f05

600015f8 <__memset_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__memset_veneer+0x4>
600015fc:	.word	0x0000b2c9

60001600 <__loop_veneer>:
60001600:	ldr.w	pc, [pc]	; 60001604 <__loop_veneer+0x4>
60001604:	.word	0x000008dd

60001608 <__yield_veneer>:
60001608:	ldr.w	pc, [pc]	; 6000160c <__yield_veneer+0x4>
6000160c:	.word	0x0000a17d

60001610 <__startup_early_hook_veneer>:
60001610:	ldr.w	pc, [pc]	; 60001614 <__startup_early_hook_veneer+0x4>
60001614:	.word	0x0000a861

60001618 <____libc_init_array_veneer>:
60001618:	ldr.w	pc, [pc]	; 6000161c <____libc_init_array_veneer+0x4>
6000161c:	.word	0x0000ace9

60001620 <__usb_init_serialnumber_veneer>:
60001620:	ldr.w	pc, [pc]	; 60001624 <__usb_init_serialnumber_veneer+0x4>
60001624:	.word	0x0000a125

60001628 <__setup_veneer>:
60001628:	ldr.w	pc, [pc]	; 6000162c <__setup_veneer+0x4>
6000162c:	.word	0x000008b9

60001630 <__pwm_init_veneer>:
60001630:	ldr.w	pc, [pc]	; 60001634 <__pwm_init_veneer+0x4>
60001634:	.word	0x0000a975

60001638 <__startup_late_hook_veneer>:
60001638:	ldr.w	pc, [pc]	; 6000163c <__startup_late_hook_veneer+0x4>
6000163c:	.word	0x0000a865

60001640 <__set_arm_clock_veneer>:
60001640:	ldr.w	pc, [pc]	; 60001644 <__set_arm_clock_veneer+0x4>
60001644:	.word	0x00009419

60001648 <__init_array_start>:
60001648:	.word	0x00000045
6000164c:	.word	0x000017a9
60001650:	.word	0x00008fa5

60001654 <__init_array_end>:
60001654:	.word	0xffffffff
60001658:	.word	0xffffffff
6000165c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r4, #22
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:			; <UNDEFINED> instruction: 0xb6b4
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	while (1) {
		volatile uint32_t n;
		GPIO2_DR_SET = (1<<3); //digitalWrite(13, HIGH);
		for (n=0; n < 2000000/6; n++) ;
		GPIO2_DR_CLEAR = (1<<3); //digitalWrite(13, LOW);
		for (n=0; n < 1500000/6; n++) ;
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r4, #22
      6e:	movs	r0, #0
      70:	.word	0x0000b6b4
      74:	asrs	r0, r4, #22
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <getRGB(int, int, int, int*, int*, int*)>:
      7c:	push	{r4, r5, r6, r7, lr}
      7e:	rsb	r1, r1, #255	; 0xff
      82:	ldr	r5, [pc, #340]	; (1d8 <getRGB(int, int, int, int*, int*, int*)+0x15c>)
      84:	ldr.w	r4, [r5, r1, lsl #2]
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	.word	0xd02f2cff
      8c:	ldr	r1, [pc, #332]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
  
  if(num >= 4){
      8e:	asrs	r6, r0, #31
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	ldr.w	r5, [r5, r2, lsl #2]
      94:	.word	0x2100fb81
      98:	mul.w	r2, r4, r5
            current_sat = interpolate_function(next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
            current_bri = interpolate_function(next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));

            prev_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
            prev_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_sat;
            prev_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_bri;  
      9c:	.word	0x12124401
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function(next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function(next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
            current_bri = interpolate_function(next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));

            prev_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
      a0:	rsb	r1, r6, r1, asr #5
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
      a4:	cmp	r1, #5
      a6:	bhi.w	1d0 <getRGB(int, int, int, int*, int*, int*)+0x154>
            current_hue = interpolate_function(next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function(next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
            current_bri = interpolate_function(next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], prev_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));

            prev_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
            prev_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_sat;
      aa:	tbb	[pc, r1]
            // Serial.print(" ");
            // Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            // Serial.print(" ");
            // Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
      ae:	cmp	r6, #32
      b0:	str	r1, [r1, #36]	; 0x24
      b2:	lsls	r3, r7, #13
      b4:	ldr	r7, [pc, #292]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
      b6:	subs	r4, r5, r2
      b8:	.word	0xfb874629
      bc:	b.n	fffffac0 <_flexram_bank_config+0x55555011>
      be:	.short	0x4405
      c0:	rsb	r6, r6, r5, asr #5
            screen_A.setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
      c4:	.word	0x1606ebc6
      c8:	sub.w	r0, r0, r6, lsl #2
      cc:	rsb	r0, r0, #60	; 0x3c
      d0:	.word	0xf000fb04
      d4:	smull	r4, r7, r7, r0
      d8:	asrs	r5, r0, #31
      da:	.short	0x4438
void interpolate_colors_A(){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
      dc:	rsb	r0, r5, r0, asr #5
      e0:	adds	r5, r2, r0
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
            screen_A.setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
        }
    }
  screen_A.show();
      e2:	.short	0x6019
      e4:	ldr	r3, [sp, #20]
      e6:	.short	0x601a


void interpolate_colors_A(){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
      e8:	ldr	r3, [sp, #24]
      ea:	.short	0x601d
      ec:	pop	{r4, r5, r6, r7, pc}
      ee:	.short	0x1aac
  screen_A.show();
  }
  // matrix_copy(prev_hue_A, next_hue_A);
  // matrix_copy(prev_sat_A, next_sat_A);
  // matrix_copy(prev_bri_A, next_bri_A);
}
      f0:	ldr	r6, [pc, #232]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
      f2:	.short	0x4629
      f4:	mov	r5, r2
      f6:	mul.w	r0, r0, r4
      fa:	.short	0xfb86
      fc:	mov	r0, r0
      fe:	.short	0x17c4
     100:	add	r0, r6
     102:	.short	0xebc4
     104:	asrs	r0, r4, #1
     106:	.short	0x4402
     108:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
     10a:	.short	0x4f34
     10c:	rsb	lr, r2, r5
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     110:	.word	0x4100fb87
        colors[1] = val;
        colors[2] = base;
    break;
     114:	mov	r4, r2
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
     116:	.short	0x4401
     118:	rsb	r6, r6, r1, asr #5
     11c:	rsb	r6, r6, r6, lsl #4
     120:	.word	0x0086eba0
     124:	rsb	r0, r0, #60	; 0x3c
     128:	.word	0xf000fb0e
     12c:	smull	r1, r7, r7, r0
     130:	.word	0x443817c1
     134:	rsb	r0, r1, r0, asr #5
     138:	.word	0x462a1811
        colors[1] = val;
        colors[2] = base;
     13c:	mov	r5, r4
    break;
     13e:	.short	0xe7d0
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     140:	ldr	r7, [pc, #152]	; (1dc <getRGB(int, int, int, int*, int*, int*)+0x160>)
     142:	rsb	lr, r2, r5
     146:	.short	0xfb87
     148:	asrs	r0, r0, #16
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
     14a:	.short	0x4611
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
     14c:	add	r4, r0
     14e:	.short	0xebc6
     150:	asrs	r4, r4, #25
     152:	.short	0xebc6
     154:	asrs	r6, r0, #24
     156:	.short	0xeba0
     158:	lsls	r6, r0, #2
     15a:	.short	0xfb00
     15c:	bl	e86e <_flashimagelen+0x5be>
     160:	.word	0x17c44700
     164:	add	r0, r7
     166:	.short	0xebc4
     168:	asrs	r0, r4, #1
     16a:	.short	0x4410
        colors[1] = val;
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
     16c:	mov	r2, r5
        colors[2] = (((val-base)*(hue%60))/60)+base;
     16e:	.short	0x4605
    break;
     170:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     172:	.short	0x4f1a
     174:	rsb	lr, r2, r5
     178:	smull	r1, r4, r7, r0
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
     17c:	.word	0x44044611
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
     180:	rsb	r6, r6, r4, asr #5
     184:	.word	0x1606ebc6
     188:	sub.w	r0, r0, r6, lsl #2
     18c:	.word	0x003cf1c0
     190:	mul.w	r0, lr, r0
     194:	.word	0x4700fb87
     198:	asrs	r4, r0, #31
     19a:	add	r0, r7
     19c:	rsb	r0, r4, r0, asr #5
     1a0:	add	r2, r0
        colors[2] = val;
    break;
     1a2:	b.n	e2 <getRGB(int, int, int, int*, int*, int*)+0x66>
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
     1a4:	.word	0x1aa94f0d
     1a8:	smull	lr, r4, r7, r0
     1ac:	add	r4, r0
     1ae:	rsb	r6, r6, r4, asr #5
     1b2:	rsb	r6, r6, r6, lsl #4
     1b6:	sub.w	r6, r0, r6, lsl #2
     1ba:	.short	0x4608
     1bc:	mul.w	r0, r6, r0
     1c0:	.word	0x1700fb87
     1c4:	asrs	r1, r0, #31
     1c6:	.short	0x4438
     1c8:	rsb	r0, r1, r0, asr #5
     1cc:	.word	0xe7881811
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
     1d0:	movs	r5, #0
     1d2:	.short	0x462a
     1d4:	mov	r1, r5
     1d6:	.short	0xe784
     1d8:	movs	r0, r0
     1da:	.short	0x2000
     1dc:	ldrh	r1, [r1, #4]
     1de:	.short	0x8888

000001e0 <gen_color_matrix_A()>:
Automaton bg_automaton_B = Automaton(9, 1, 4, 0, 0, 1, true, mask_B, background_B);
Automaton fg_automaton_B = Automaton(7, 3, 2, 0, 0, 4, false, mask_B, background_B);
Automaton grow_automaton_B = Automaton(3, 1, 1, 0, 5, 50, false, mask_B, background_B);
Automaton sat_automaton_B = Automaton(2, 1, 1, 0, 1, 10, false, mask_B, background_A);

void gen_color_matrix_A(){
     1e0:	ldr	r2, [pc, #276]	; (2f8 <gen_color_matrix_A()+0x118>)
     1e2:	movw	r3, #5436	; 0x153c
     1e6:	.short	0x2000
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     1e8:	movs	r1, #26
     1ea:	.short	0x7a52
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     1ec:	ldr.w	ip, [pc, #288]	; 310 <gen_color_matrix_A()+0x130>
Automaton bg_automaton_B = Automaton(9, 1, 4, 0, 0, 1, true, mask_B, background_B);
Automaton fg_automaton_B = Automaton(7, 3, 2, 0, 0, 4, false, mask_B, background_B);
Automaton grow_automaton_B = Automaton(3, 1, 1, 0, 5, 50, false, mask_B, background_B);
Automaton sat_automaton_B = Automaton(2, 1, 1, 0, 1, 10, false, mask_B, background_A);

void gen_color_matrix_A(){
     1f0:	.word	0x4ff0e92d
     1f4:	sub	sp, #12
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     1f6:	.short	0xf44f
     1f8:	ldrb	r4, [r6, #2]
     1fa:	.short	0xf8df
     1fc:	b.n	430 <gen_color_matrix_B()+0x118>
     1fe:	str	r2, [sp, #4]
     200:	ldr	r2, [pc, #244]	; (2f8 <gen_color_matrix_A()+0x118>)
     202:	ldr	r3, [r2, r3]
     204:	str	r3, [sp, #0]
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     206:	ldr	r3, [pc, #244]	; (2fc <gen_color_matrix_A()+0x11c>)
     208:	smull	r3, r2, r3, r0
     20c:	asrs	r3, r0, #31
     20e:	asrs	r2, r2, #3
     210:	subs	r5, r2, r3
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     212:	ldr	r2, [sp, #4]
     214:	mov	r3, r5
     216:	mls	r5, r1, r5, r0
     21a:	cmp	r2, #0
     21c:	beq.n	2e2 <gen_color_matrix_A()+0x102>
      return _background[x][y];
     21e:	ldr	r2, [sp, #0]
     220:	mla	r2, r1, r5, r2
     224:	ldrb	r2, [r2, r3]
     226:	cmp	r2, #0
     228:	beq.n	2d8 <gen_color_matrix_A()+0xf8>
            hue = fg_automaton_A.colorMap(fg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     22a:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     22e:	ldr	r4, [pc, #200]	; (2f8 <gen_color_matrix_A()+0x118>)
     230:	adds	r2, #6
     232:	ldr.w	r4, [r4, r2, lsl #2]
     236:	ldr	r2, [pc, #200]	; (300 <gen_color_matrix_A()+0x120>)
     238:	smull	r6, r7, r4, r2
     23c:	asrs	r2, r4, #31
     23e:	adds	r6, r4, r7
     240:	rsb	r2, r2, r6, asr #8
          } else {
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     244:	ldr	r6, [pc, #188]	; (304 <gen_color_matrix_A()+0x124>)
     246:	mls	r2, r8, r2, r4
     24a:	mla	r4, r1, r5, r3
     24e:	adds	r4, #6
     250:	ldr.w	r4, [r6, r4, lsl #2]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     254:	add.w	r9, r4, r4, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     258:	adds	r4, #150	; 0x96
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     25a:	mov.w	r9, r9, lsl #1
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     25e:	smull	sl, fp, r4, ip
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     262:	smull	r6, r7, r9, ip
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     266:	add.w	sl, r4, fp
     26a:	asrs	r6, r4, #31
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     26c:	add.w	fp, r9, r7
     270:	mov.w	r7, r9, asr #31
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     274:	rsb	r6, r6, sl, asr #7
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     278:	rsb	r7, r7, fp, asr #7
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     27c:	rsb	r6, r6, r6, lsl #8
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     280:	rsb	r7, r7, r7, lsl #8
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     284:	subs	r6, r4, r6
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     286:	rsb	r7, r7, r9
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     28a:	cmp	r6, #99	; 0x63
     28c:	ble.n	2f0 <gen_color_matrix_A()+0x110>
     28e:	vmov	s15, r6
     292:	vcvt.f32.s32	s15, s15
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
         
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     296:	mla	r3, r1, r5, r3
     29a:	vmov	s13, r2
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     29e:	vmov	s14, r7
Automaton sat_automaton_B = Automaton(2, 1, 1, 0, 1, 10, false, mask_B, background_A);

void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     2a2:	adds	r0, #1
          }
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
         
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     2a4:	add.w	r4, r3, #676	; 0x2a4
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     2a8:	add.w	r2, r3, #1352	; 0x548
     2ac:	vcvt.f32.s32	s14, s14
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
         
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     2b0:	add.w	r3, lr, r3, lsl #2
     2b4:	vcvt.f32.s32	s13, s13
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     2b8:	add.w	r4, lr, r4, lsl #2
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     2bc:	add.w	r2, lr, r2, lsl #2
Automaton sat_automaton_B = Automaton(2, 1, 1, 0, 1, 10, false, mask_B, background_A);

void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     2c0:	cmp.w	r0, #676	; 0x2a4
          }
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
         
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     2c4:	vstr	s15, [r4]
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_A.brightnessMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_A.saturationMap(grow_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
         
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     2c8:	vstr	s13, [r3]
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     2cc:	vstr	s14, [r2]
Automaton sat_automaton_B = Automaton(2, 1, 1, 0, 1, 10, false, mask_B, background_A);

void gen_color_matrix_A(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     2d0:	bne.n	206 <gen_color_matrix_A()+0x26>
          next_colors_A.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_A.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
        }
     }
}
     2d2:	add	sp, #12
     2d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
          if (fg_automaton_A.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
            hue = fg_automaton_A.colorMap(fg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          } else {
            hue = bg_automaton_A.colorMap(bg_automaton_A.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     2d8:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     2dc:	ldr	r4, [pc, #40]	; (308 <gen_color_matrix_A()+0x128>)
     2de:	adds	r2, #6
     2e0:	b.n	232 <gen_color_matrix_A()+0x52>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     2e2:	ldr	r2, [sp, #0]
     2e4:	mla	r2, r1, r5, r2
     2e8:	ldrb	r2, [r2, r3]
     2ea:	eor.w	r2, r2, #1
     2ee:	b.n	226 <gen_color_matrix_A()+0x46>
     2f0:	vldr	s15, [pc, #24]	; 30c <gen_color_matrix_A()+0x12c>
     2f4:	b.n	296 <gen_color_matrix_A()+0xb6>
     2f6:	nop
     2f8:	.word	0x2000f9d8
     2fc:	.word	0x4ec4ec4f
     300:	.word	0xb60b60b7
     304:	.word	0x2000a4c0
     308:	.word	0x2000ba00
     30c:	.word	0x42c80000
     310:	.word	0x80808081
     314:	.word	0x20010f18

00000318 <gen_color_matrix_B()>:
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
        }
     }
}

void gen_color_matrix_B(){
     318:	ldr	r2, [pc, #276]	; (430 <gen_color_matrix_B()+0x118>)
     31a:	movw	r3, #5436	; 0x153c
     31e:	movs	r0, #0
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     320:	movs	r1, #26
     322:	ldrb	r2, [r2, #9]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     324:	ldr.w	ip, [pc, #288]	; 448 <gen_color_matrix_B()+0x130>
          next_colors_A.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
        }
     }
}

void gen_color_matrix_B(){
     328:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     32c:	sub	sp, #12
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     32e:	mov.w	r8, #360	; 0x168
     332:	ldr.w	lr, [pc, #280]	; 44c <gen_color_matrix_B()+0x134>
     336:	str	r2, [sp, #4]
     338:	ldr	r2, [pc, #244]	; (430 <gen_color_matrix_B()+0x118>)
     33a:	ldr	r3, [r2, r3]
     33c:	str	r3, [sp, #0]
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
     33e:	ldr	r3, [pc, #244]	; (434 <gen_color_matrix_B()+0x11c>)
     340:	smull	r3, r2, r3, r0
     344:	asrs	r3, r0, #31
     346:	asrs	r2, r2, #3
     348:	subs	r5, r2, r3
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     34a:	ldr	r2, [sp, #4]
     34c:	mov	r3, r5
     34e:	mls	r5, r1, r5, r0
     352:	cmp	r2, #0
     354:	beq.n	41a <gen_color_matrix_B()+0x102>
      return _background[x][y];
     356:	ldr	r2, [sp, #0]
     358:	mla	r2, r1, r5, r2
     35c:	ldrb	r2, [r2, r3]
     35e:	cmp	r2, #0
     360:	beq.n	410 <gen_color_matrix_B()+0xf8>
            hue = fg_automaton_B.colorMap(fg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     362:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     366:	ldr	r4, [pc, #200]	; (430 <gen_color_matrix_B()+0x118>)
     368:	adds	r2, #6
     36a:	ldr.w	r4, [r4, r2, lsl #2]
     36e:	ldr	r2, [pc, #200]	; (438 <gen_color_matrix_B()+0x120>)
     370:	smull	r6, r7, r4, r2
     374:	asrs	r2, r4, #31
     376:	adds	r6, r4, r7
     378:	rsb	r2, r2, r6, asr #8
          } else {
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     37c:	ldr	r6, [pc, #188]	; (43c <gen_color_matrix_B()+0x124>)
     37e:	mls	r2, r8, r2, r4
     382:	mla	r4, r1, r5, r3
     386:	adds	r4, #6
     388:	ldr.w	r4, [r6, r4, lsl #2]
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     38c:	add.w	r9, r4, r4, lsl #2
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     390:	adds	r4, #150	; 0x96
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     392:	mov.w	r9, r9, lsl #1
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     396:	smull	sl, fp, r4, ip
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     39a:	smull	r6, r7, r9, ip
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     39e:	add.w	sl, r4, fp
     3a2:	asrs	r6, r4, #31
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     3a4:	add.w	fp, r9, r7
     3a8:	mov.w	r7, r9, asr #31
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     3ac:	rsb	r6, r6, sl, asr #7
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     3b0:	rsb	r7, r7, fp, asr #7
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     3b4:	rsb	r6, r6, r6, lsl #8
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     3b8:	rsb	r7, r7, r7, lsl #8
  }

  static int saturationMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
     3bc:	subs	r6, r4, r6
  }

  static int brightnessMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value * 10) % 255;
     3be:	rsb	r7, r7, r9
     3c2:	cmp	r6, #99	; 0x63
     3c4:	ble.n	428 <gen_color_matrix_B()+0x110>
     3c6:	vmov	s15, r6
     3ca:	vcvt.f32.s32	s15, s15
          sat = sat_automaton_B.saturationMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
        
          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     3ce:	mla	r3, r1, r5, r3
     3d2:	vmov	s13, r2
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     3d6:	vmov	s14, r7
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     3da:	adds	r0, #1
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_B.saturationMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
        
          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     3dc:	add.w	r4, r3, #676	; 0x2a4
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     3e0:	add.w	r2, r3, #1352	; 0x548
     3e4:	vcvt.f32.s32	s14, s14
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_B.saturationMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
        
          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     3e8:	add.w	r3, lr, r3, lsl #2
     3ec:	vcvt.f32.s32	s13, s13
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     3f0:	add.w	r4, lr, r4, lsl #2
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     3f4:	add.w	r2, lr, r2, lsl #2
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     3f8:	cmp.w	r0, #676	; 0x2a4
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_B.saturationMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
        
          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
     3fc:	vstr	s15, [r4]
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          }
          bri = grow_automaton_B.brightnessMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          sat = sat_automaton_B.saturationMap(grow_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
        
          next_colors_B.hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = hue;
     400:	vstr	s13, [r3]
          next_colors_B.sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = sat;
          next_colors_B.bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = bri;
     404:	vstr	s14, [r2]
}

void gen_color_matrix_B(){
  int hue = 0, sat = 0, bri = 0;
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
     408:	bne.n	33e <gen_color_matrix_B()+0x26>
          // Serial.print(g);
          // Serial.print(" ");
          // Serial.println(b);
        }
     }
}
     40a:	add	sp, #12
     40c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for(int i = 0; i < NUM_STRIPS; i++) {
        for(int j = 0; j < NUM_LEDS_SCREEN; j++) {     
          if (fg_automaton_B.can_color(j%SIZE_SCREEN, int(j/SIZE_SCREEN))){
            hue = fg_automaton_B.colorMap(fg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
          } else {
            hue = bg_automaton_B.colorMap(bg_automaton_B.cells[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
     410:	mla	r2, r1, r5, r3
  }

  static int colorMap(int value){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (value) % 360;
     414:	ldr	r4, [pc, #40]	; (440 <gen_color_matrix_B()+0x128>)
     416:	adds	r2, #6
     418:	b.n	36a <gen_color_matrix_B()+0x52>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
     41a:	ldr	r2, [sp, #0]
     41c:	mla	r2, r1, r5, r2
     420:	ldrb	r2, [r2, r3]
     422:	eor.w	r2, r2, #1
     426:	b.n	35e <gen_color_matrix_B()+0x46>
     428:	vldr	s15, [pc, #24]	; 444 <gen_color_matrix_B()+0x12c>
     42c:	b.n	3ce <gen_color_matrix_B()+0xb6>
     42e:	nop
     430:	.word	0x20005528
     434:	.word	0x4ec4ec4f
     438:	.word	0xb60b60b7
     43c:	.word	0x20008f80
     440:	.word	0x2000cf40
     444:	.word	0x42c80000
     448:	.word	0x80808081
     44c:	.word	0x20012ec8

00000450 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>:
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     454:	vpush	{d8-d9}
     458:	sub	sp, #36	; 0x24
  int r = 0, g = 0, b = 0;
     45a:	movs	r3, #0
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     45c:	mov	r7, r2
     45e:	mov	fp, r0
  int r = 0, g = 0, b = 0;
     460:	movs	r2, #25
float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
     462:	mov	sl, r1
     464:	add.w	r9, sp, #28
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     468:	vldr	s19, [pc, #300]	; 598 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x148>
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     46c:	ldr.w	r8, [pc, #308]	; 5a4 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x154>
  return (big_val - small_val) * (1/step) + small_val;
}


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
     470:	str	r2, [sp, #12]
     472:	str	r3, [sp, #20]
     474:	str	r3, [sp, #24]
     476:	str	r3, [sp, #28]
     478:	movs	r5, #0
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     47a:	smull	r3, r0, r8, r5
     47e:	asrs	r6, r5, #31
     480:	movs	r4, #26
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     482:	mov	r1, r5
     484:	asrs	r2, r0, #3
     486:	ldr	r0, [pc, #276]	; (59c <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x14c>)
     488:	subs	r3, r2, r6
     48a:	mov	r2, r3
     48c:	mls	r3, r4, r3, r5
     490:	mla	r4, r4, r3, r2
     494:	lsls	r4, r4, #2
     496:	add.w	r6, sl, r4
     49a:	add	r4, fp
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
     49c:	add.w	r2, r6, #2704	; 0xa90
     4a0:	add.w	ip, r4, #2704	; 0xa90
            current_bri = interpolate_function((*next).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     4a4:	add.w	r3, r6, #5408	; 0x1520
     4a8:	add.w	lr, r4, #5408	; 0x1520
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
     4ac:	vldr	s17, [r2]
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     4b0:	vldr	s13, [ip]
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
            current_bri = interpolate_function((*next).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     4b4:	vldr	s18, [r3]
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     4b8:	vldr	s15, [lr]
     4bc:	vsub.f32	s13, s13, s17
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
     4c0:	vldr	s16, [r6]
     }
}


float interpolate_function(float big_val, float small_val, float step){
  return (big_val - small_val) * (1/step) + small_val;
     4c4:	vldr	s14, [r4]
     4c8:	vsub.f32	s15, s15, s18
     4cc:	vfma.f32	s17, s13, s19
     4d0:	vsub.f32	s14, s14, s16
     4d4:	vfma.f32	s18, s15, s19
     4d8:	vfma.f32	s16, s14, s19
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
            current_hue = interpolate_function((*next).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));
            current_sat = interpolate_function((*next).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE)); 
            current_bri = interpolate_function((*next).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)], (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)],float(STEP_SIZE));

            (*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_hue;
     4dc:	vstr	s16, [r6]
            (*prev).sat[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_sat;
     4e0:	vstr	s17, [r2]
            (*prev).bri[j%SIZE_SCREEN][int(j/SIZE_SCREEN)] = current_bri;  
     4e4:	vstr	s18, [r3]
     4e8:	bl	a584 <Print::print(long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4ec:	movs	r1, #1
     4ee:	ldr	r0, [pc, #176]	; (5a0 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x150>)
     4f0:	bl	9348 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     4f4:	vldr	s0, [r4]
     4f8:	movs	r1, #2
     4fa:	ldr	r0, [pc, #160]	; (59c <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x14c>)
     4fc:	vcvt.f64.f32	d0, s0
     500:	bl	a5a0 <Print::printFloat(double, unsigned char)>
     504:	movs	r1, #1
     506:	ldr	r0, [pc, #152]	; (5a0 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x150>)
     508:	bl	9348 <usb_serial_write>
     50c:	vldr	s0, [r6]
     510:	movs	r1, #2
     512:	ldr	r0, [pc, #136]	; (59c <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x14c>)
     514:	vcvt.f64.f32	d0, s0
     518:	bl	a5a0 <Print::printFloat(double, unsigned char)>
     51c:	movs	r1, #1
     51e:	ldr	r0, [pc, #128]	; (5a0 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x150>)
     520:	bl	9348 <usb_serial_write>
     524:	vcvt.f64.f32	d0, s16
     528:	movs	r1, #2
     52a:	ldr	r0, [pc, #112]	; (59c <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x14c>)
     52c:	bl	a5a0 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     530:	ldr	r0, [pc, #104]	; (59c <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x14c>)
     532:	bl	a4e4 <Print::println()>
            Serial.print(" ");
            Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            Serial.print(" ");
            Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
     536:	vcvt.s32.f32	s15, s18
     53a:	add	r3, sp, #24
     53c:	str.w	r9, [sp, #4]
     540:	vmov	r2, s15
     544:	vcvt.s32.f32	s15, s17
     548:	str	r3, [sp, #0]
     54a:	add	r3, sp, #20
     54c:	vmov	r1, s15
     550:	vcvt.s32.f32	s15, s16
     554:	vmov	r0, s15
     558:	bl	7c <getRGB(int, int, int, int*, int*, int*)>
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
     55c:	ldrb.w	r0, [sp, #28]
     560:	uxth	r1, r5
void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     562:	adds	r5, #1
            Serial.print((*prev).hue[j%SIZE_SCREEN][int(j/SIZE_SCREEN)]);
            Serial.print(" ");
            Serial.println(current_hue);
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
     564:	str	r0, [sp, #0]
     566:	mov	r0, r7
     568:	ldrb.w	r3, [sp, #24]
     56c:	ldrb.w	r2, [sp, #20]
     570:	bl	8efc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
    for(int i = 0; i < NUM_STRIPS; i++) {
          for(int j = 0; j < NUM_LEDS_SCREEN; j++) { 
     574:	cmp.w	r5, #676	; 0x2a4
     578:	bne.w	47a <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x2a>
            
            getRGB(current_hue, current_sat, current_bri, &r, &g, &b);
            (*screen).setPixelColor((i*NUM_LEDS_SCREEN) + j, r, g, b);
        }
    }
  (*screen).show();
     57c:	mov	r0, r7
     57e:	bl	8cb4 <Adafruit_NeoPixel::show()>


void interpolate_colors(nextCol * next, prevCol * prev, Adafruit_NeoPixel * screen){
  int r = 0, g = 0, b = 0;
  float current_hue, current_sat, current_bri;
  for (int step = 0; step < STEP_SIZE; step++){
     582:	ldr	r3, [sp, #12]
     584:	subs	r3, #1
     586:	str	r3, [sp, #12]
     588:	bne.w	478 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)+0x28>
  (*screen).show();
  }
  // matrix_copy(prev_hue_A, next_hue_A);
  // matrix_copy(prev_sat_A, next_sat_A);
  // matrix_copy(prev_bri_A, next_bri_A);
}
     58c:	add	sp, #36	; 0x24
     58e:	vpop	{d8-d9}
     592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     596:	nop
     598:	.word	0x3d23d70a
     59c:	.word	0x20000d4c
     5a0:	.word	0x20000400
     5a4:	.word	0x4ec4ec4f

000005a8 <init_A()>:
  // matrix_copy(prev_hue_A, next_hue_A);
  // matrix_copy(prev_sat_A, next_sat_A);
  // matrix_copy(prev_bri_A, next_bri_A);
}

void init_A(){
     5a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5ac:	ldr	r3, [pc, #356]	; (714 <init_A()+0x16c>)
     5ae:	sub	sp, #12
  screen_A.begin();
     5b0:	ldr	r0, [pc, #356]	; (718 <init_A()+0x170>)
     5b2:	mov.w	sl, #0
     5b6:	str	r3, [sp, #4]
     5b8:	sub.w	r9, r3, #24
     5bc:	ldr.w	fp, [pc, #352]	; 720 <init_A()+0x178>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     5c0:	add.w	r7, r3, #5408	; 0x1520
     5c4:	bl	8c08 <Adafruit_NeoPixel::begin()>
     5c8:	add.w	r6, sl, sl, lsl #1
     5cc:	ldr	r5, [sp, #4]
     5ce:	movs	r4, #0
     5d0:	ldr.w	r3, [fp]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     5d4:	ldrb.w	r2, [r9, #9]
      return _background[x][y];
     5d8:	add	r3, r4
     5da:	ldrb.w	r3, [r3, sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     5de:	cbnz	r2, 5e4 <init_A()+0x3c>
      return _background[x][y];
    } else {
      return !_background[x][y];
     5e0:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     5e4:	cmp	r3, #0
     5e6:	bne.n	6e8 <init_A()+0x140>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     5e8:	adds	r4, #1
     5ea:	adds	r5, #4
     5ec:	cmp	r4, #26
     5ee:	bne.n	5d0 <init_A()+0x28>
     5f0:	ldr	r3, [sp, #4]
     5f2:	add.w	sl, sl, #26
     5f6:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     5f8:	cmp.w	sl, #676	; 0x2a4
     5fc:	str	r3, [sp, #4]
     5fe:	bne.n	5c8 <init_A()+0x20>
     600:	ldr	r3, [pc, #280]	; (71c <init_A()+0x174>)
     602:	mov.w	r9, #0
     606:	ldr.w	sl, [pc, #284]	; 724 <init_A()+0x17c>
     60a:	sub.w	r6, r3, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     60e:	add.w	fp, r3, #5408	; 0x1520
     612:	str	r3, [sp, #4]
     614:	add.w	r7, r9, r9, lsl #1
     618:	ldr	r5, [sp, #4]
     61a:	movs	r4, #0
     61c:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     620:	ldrb	r2, [r6, #9]
      return _background[x][y];
     622:	add	r3, r4
     624:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     628:	cbnz	r2, 62e <init_A()+0x86>
      return _background[x][y];
    } else {
      return !_background[x][y];
     62a:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     62e:	cmp	r3, #0
     630:	bne.n	6c0 <init_A()+0x118>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     632:	adds	r4, #1
     634:	adds	r5, #4
     636:	cmp	r4, #26
     638:	bne.n	61c <init_A()+0x74>
     63a:	ldr	r3, [sp, #4]
     63c:	add.w	r9, r9, #26
     640:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     642:	cmp.w	r9, #676	; 0x2a4
     646:	str	r3, [sp, #4]
     648:	bne.n	614 <init_A()+0x6c>
     64a:	ldr.w	r8, [pc, #220]	; 728 <init_A()+0x180>
     64e:	ldrb.w	r2, [r8, #7]
     652:	addw	r6, r8, #1100	; 0x44c
     656:	addw	r7, r8, #1724	; 0x6bc
     65a:	add.w	r5, r6, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     65e:	mov	r4, r6

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     660:	ldrb.w	r0, [r8, #8]
     664:	subs	r0, r0, r2
     666:	adds	r0, #2
     668:	bl	a2a4 <random(unsigned long)>
     66c:	ldrb.w	r2, [r8, #7]
     670:	subs	r3, r2, #1
     672:	add	r0, r3
     674:	str.w	r0, [r4, #4]!
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
     678:	cmp	r5, r4
     67a:	bne.n	660 <init_A()+0xb8>
     67c:	adds	r6, #104	; 0x68
    }
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
     67e:	cmp	r7, r6
     680:	bne.n	65a <init_A()+0xb2>
     682:	ldr.w	r8, [pc, #168]	; 72c <init_A()+0x184>
     686:	ldrb.w	r2, [r8, #7]
     68a:	addw	r6, r8, #1100	; 0x44c
     68e:	addw	r7, r8, #1724	; 0x6bc
     692:	add.w	r5, r6, #24
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     696:	mov	r4, r6

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     698:	ldrb.w	r0, [r8, #8]
     69c:	subs	r0, r0, r2
     69e:	adds	r0, #2
     6a0:	bl	a2a4 <random(unsigned long)>
     6a4:	ldrb.w	r2, [r8, #7]
     6a8:	subs	r3, r2, #1
     6aa:	add	r0, r3
     6ac:	str.w	r0, [r4, #4]!
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
     6b0:	cmp	r5, r4
     6b2:	bne.n	698 <init_A()+0xf0>
     6b4:	adds	r6, #104	; 0x68
    }
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
     6b6:	cmp	r7, r6
     6b8:	bne.n	692 <init_A()+0xea>
  fg_automaton_A.init();
  bg_automaton_A.init();
  grow_automaton_A.init_growth();
  sat_automaton_A.init_growth();
}
     6ba:	add	sp, #12
     6bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6c0:	ldrb	r1, [r6, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6c2:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6c6:	ldrb	r0, [r6, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6c8:	ldr.w	r2, [fp]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6cc:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6ce:	add	r2, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6d0:	adds	r0, #2
     6d2:	ldrb.w	r8, [r2, r3]
     6d6:	bl	a2a4 <random(unsigned long)>
     6da:	ldrb	r2, [r6, #7]
     6dc:	rsb	r3, r2, r8
     6e0:	adds	r3, #1
     6e2:	subs	r0, r3, r0
     6e4:	str	r0, [r5, #0]
     6e6:	b.n	632 <init_A()+0x8a>
     6e8:	ldrb.w	r1, [r9, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6ec:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6f0:	ldrb.w	r0, [r9, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6f4:	ldr	r2, [r7, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6f6:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     6f8:	add	r2, r6
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     6fa:	adds	r0, #2
     6fc:	ldrb.w	r8, [r2, r3]
     700:	bl	a2a4 <random(unsigned long)>
     704:	ldrb.w	r2, [r9, #7]
     708:	rsb	r3, r2, r8
     70c:	adds	r3, #1
     70e:	subs	r0, r3, r0
     710:	str	r0, [r5, #0]
     712:	b.n	5e8 <init_A()+0x40>
     714:	.word	0x2000f9f0
     718:	.word	0x2000f9c0
     71c:	.word	0x2000ba18
     720:	.word	0x20010f14
     724:	.word	0x2000cf3c
     728:	.word	0x2000a4c0
     72c:	.word	0x20007a40

00000730 <init_B()>:

void init_B(){
     730:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     734:	ldr	r3, [pc, #356]	; (89c <init_B()+0x16c>)
     736:	sub	sp, #12
  screen_B.begin();
     738:	ldr	r0, [pc, #356]	; (8a0 <init_B()+0x170>)
     73a:	mov.w	sl, #0
     73e:	str	r3, [sp, #4]
     740:	sub.w	r9, r3, #24
     744:	ldr.w	fp, [pc, #352]	; 8a8 <init_B()+0x178>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     748:	add.w	r7, r3, #5408	; 0x1520
     74c:	bl	8c08 <Adafruit_NeoPixel::begin()>
     750:	add.w	r6, sl, sl, lsl #1
     754:	ldr	r5, [sp, #4]
     756:	movs	r4, #0
     758:	ldr.w	r3, [fp]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     75c:	ldrb.w	r2, [r9, #9]
      return _background[x][y];
     760:	add	r3, r4
     762:	ldrb.w	r3, [r3, sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     766:	cbnz	r2, 76c <init_B()+0x3c>
      return _background[x][y];
    } else {
      return !_background[x][y];
     768:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     76c:	cmp	r3, #0
     76e:	bne.n	870 <init_B()+0x140>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     770:	adds	r4, #1
     772:	adds	r5, #4
     774:	cmp	r4, #26
     776:	bne.n	758 <init_B()+0x28>
     778:	ldr	r3, [sp, #4]
     77a:	add.w	sl, sl, #26
     77e:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     780:	cmp.w	sl, #676	; 0x2a4
     784:	str	r3, [sp, #4]
     786:	bne.n	750 <init_B()+0x20>
     788:	ldr	r3, [pc, #280]	; (8a4 <init_B()+0x174>)
     78a:	mov.w	r9, #0
     78e:	ldr.w	sl, [pc, #284]	; 8ac <init_B()+0x17c>
     792:	sub.w	r6, r3, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     796:	add.w	fp, r3, #5408	; 0x1520
     79a:	str	r3, [sp, #4]
     79c:	add.w	r7, r9, r9, lsl #1
     7a0:	ldr	r5, [sp, #4]
     7a2:	movs	r4, #0
     7a4:	ldr.w	r3, [sl]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     7a8:	ldrb	r2, [r6, #9]
      return _background[x][y];
     7aa:	add	r3, r4
     7ac:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     7b0:	cbnz	r2, 7b6 <init_B()+0x86>
      return _background[x][y];
    } else {
      return !_background[x][y];
     7b2:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
     7b6:	cmp	r3, #0
     7b8:	bne.n	848 <init_B()+0x118>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     7ba:	adds	r4, #1
     7bc:	adds	r5, #4
     7be:	cmp	r4, #26
     7c0:	bne.n	7a4 <init_B()+0x74>
     7c2:	ldr	r3, [sp, #4]
     7c4:	add.w	r9, r9, #26
     7c8:	adds	r3, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
     7ca:	cmp.w	r9, #676	; 0x2a4
     7ce:	str	r3, [sp, #4]
     7d0:	bne.n	79c <init_B()+0x6c>
     7d2:	ldr.w	r8, [pc, #220]	; 8b0 <init_B()+0x180>
     7d6:	ldrb.w	r2, [r8, #7]
     7da:	addw	r6, r8, #1100	; 0x44c
     7de:	addw	r7, r8, #1724	; 0x6bc
     7e2:	add.w	r5, r6, #24
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     7e6:	mov	r4, r6

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     7e8:	ldrb.w	r0, [r8, #8]
     7ec:	subs	r0, r0, r2
     7ee:	adds	r0, #2
     7f0:	bl	a2a4 <random(unsigned long)>
     7f4:	ldrb.w	r2, [r8, #7]
     7f8:	subs	r3, r2, #1
     7fa:	add	r0, r3
     7fc:	str.w	r0, [r4, #4]!
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
     800:	cmp	r5, r4
     802:	bne.n	7e8 <init_B()+0xb8>
     804:	adds	r6, #104	; 0x68
    }
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
     806:	cmp	r7, r6
     808:	bne.n	7e2 <init_B()+0xb2>
     80a:	ldr.w	r8, [pc, #168]	; 8b4 <init_B()+0x184>
     80e:	ldrb.w	r2, [r8, #7]
     812:	addw	r6, r8, #1100	; 0x44c
     816:	addw	r7, r8, #1724	; 0x6bc
     81a:	add.w	r5, r6, #24
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     81e:	mov	r4, r6

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     820:	ldrb.w	r0, [r8, #8]
     824:	subs	r0, r0, r2
     826:	adds	r0, #2
     828:	bl	a2a4 <random(unsigned long)>
     82c:	ldrb.w	r2, [r8, #7]
     830:	subs	r3, r2, #1
     832:	add	r0, r3
     834:	str.w	r0, [r4, #4]!
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
        for (int y = cy - 3 ; y < cy + 3; y++){
     838:	cmp	r5, r4
     83a:	bne.n	820 <init_B()+0xf0>
     83c:	adds	r6, #104	; 0x68
    }
  }

  void init_growth() {
    int cx = 13, cy = 13;
    for (int x = cx - 3; x < cx + 3; x++){
     83e:	cmp	r7, r6
     840:	bne.n	81a <init_B()+0xea>
  fg_automaton_B.init();
  bg_automaton_B.init();
  grow_automaton_B.init_growth();
  sat_automaton_B.init_growth();
}
     842:	add	sp, #12
     844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     848:	ldrb	r1, [r6, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     84a:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     84e:	ldrb	r0, [r6, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     850:	ldr.w	r2, [fp]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     854:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     856:	add	r2, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     858:	adds	r0, #2
     85a:	ldrb.w	r8, [r2, r3]
     85e:	bl	a2a4 <random(unsigned long)>
     862:	ldrb	r2, [r6, #7]
     864:	rsb	r3, r2, r8
     868:	adds	r3, #1
     86a:	subs	r0, r3, r0
     86c:	str	r0, [r5, #0]
     86e:	b.n	7ba <init_B()+0x8a>
     870:	ldrb.w	r1, [r9, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     874:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     878:	ldrb.w	r0, [r9, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     87c:	ldr	r2, [r7, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     87e:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
     880:	add	r2, r6
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
     882:	adds	r0, #2
     884:	ldrb.w	r8, [r2, r3]
     888:	bl	a2a4 <random(unsigned long)>
     88c:	ldrb.w	r2, [r9, #7]
     890:	rsb	r3, r2, r8
     894:	adds	r3, #1
     896:	subs	r0, r3, r0
     898:	str	r0, [r5, #0]
     89a:	b.n	770 <init_B()+0x40>
     89c:	.word	0x20005540
     8a0:	.word	0x20014e78
     8a4:	.word	0x2000cf58
     8a8:	.word	0x20006a64
     8ac:	.word	0x2000e47c
     8b0:	.word	0x20008f80
     8b4:	.word	0x2000e480

000008b8 <setup>:


void setup() {
     8b8:	push	{r3, lr}
  Serial.begin(250000); //to be removed later
  randomSeed(analogRead(0));
     8ba:	movs	r0, #0
     8bc:	bl	a018 <analogRead>
     8c0:	bl	a298 <randomSeed(unsigned long)>
  init_A();
     8c4:	bl	5a8 <init_A()>
  delay(100);
     8c8:	movs	r0, #100	; 0x64
     8ca:	bl	9f04 <delay>
  init_B();
     8ce:	bl	730 <init_B()>
  delay(100);
     8d2:	movs	r0, #100	; 0x64
}
     8d4:	ldmia.w	sp!, {r3, lr}
  Serial.begin(250000); //to be removed later
  randomSeed(analogRead(0));
  init_A();
  delay(100);
  init_B();
  delay(100);
     8d8:	b.w	9f04 <delay>

000008dc <loop>:
     8dc:	ldr	r3, [pc, #684]	; (b8c <loop+0x2b0>)
}

void loop() {
  if (millis() >= nextTime1){
     8de:	ldr	r2, [pc, #688]	; (b90 <loop+0x2b4>)
     8e0:	ldr	r3, [r3, #0]
     8e2:	ldr	r2, [r2, #0]
     8e4:	cmp	r2, r3
  delay(100);
  init_B();
  delay(100);
}

void loop() {
     8e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8ea:	sub	sp, #84	; 0x54
  if (millis() >= nextTime1){
     8ec:	bls.n	916 <loop+0x3a>
     8ee:	ldr	r3, [pc, #668]	; (b8c <loop+0x2b0>)
     8f0:	ldr	r2, [r3, #0]
      bg_automaton_B.init();
    }
    nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
  } 
  
  if (millis() >= nextTime2){
     8f2:	ldr	r3, [pc, #672]	; (b94 <loop+0x2b8>)
     8f4:	ldr	r3, [r3, #0]
     8f6:	cmp	r2, r3
     8f8:	bcs.w	1286 <loop+0x9aa>
    grow_automaton_A.iterate_growth();
    grow_automaton_B.iterate_growth();
    nextTime2 = millis() + (1000/FRAMERATE_GROW);  
  }

  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
     8fc:	ldr	r2, [pc, #664]	; (b98 <loop+0x2bc>)
     8fe:	ldr	r1, [pc, #668]	; (b9c <loop+0x2c0>)
     900:	ldr	r0, [pc, #668]	; (ba0 <loop+0x2c4>)
     902:	bl	450 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
     906:	ldr	r2, [pc, #668]	; (ba4 <loop+0x2c8>)
     908:	ldr	r1, [pc, #668]	; (ba8 <loop+0x2cc>)
     90a:	ldr	r0, [pc, #672]	; (bac <loop+0x2d0>)
  //interpolate_colors_A();
}
     90c:	add	sp, #84	; 0x54
     90e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    grow_automaton_B.iterate_growth();
    nextTime2 = millis() + (1000/FRAMERATE_GROW);  
  }

  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
     912:	b.w	450 <interpolate_colors(ColorMatrix*, ColorMatrix*, Adafruit_NeoPixel*)>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     916:	add.w	r8, sp, #48	; 0x30
     91a:	movs	r2, #32
     91c:	movs	r1, #0
     91e:	mov.w	r9, #26
     922:	mov	r0, r8
     924:	ldr.w	fp, [pc, #660]	; bbc <loop+0x2e0>
     928:	bl	b2c8 <memset>
     92c:	ldr	r2, [pc, #640]	; (bb0 <loop+0x2d4>)
     92e:	movw	r3, #5436	; 0x153c
     932:	ldrb	r2, [r2, #9]
     934:	str	r2, [sp, #20]
     936:	ldr	r2, [pc, #632]	; (bb0 <loop+0x2d4>)
     938:	add.w	r2, r2, #2832	; 0xb10
     93c:	str	r2, [sp, #16]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     93e:	sub.w	r2, r2, #2832	; 0xb10
     942:	ldr	r2, [r2, #0]
     944:	str	r2, [sp, #24]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     946:	movs	r2, #2
     948:	str	r2, [sp, #8]
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     94a:	ldr	r2, [pc, #612]	; (bb0 <loop+0x2d4>)
     94c:	ldrb	r2, [r2, #5]
     94e:	str	r2, [sp, #40]	; 0x28
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     950:	ldr	r2, [pc, #604]	; (bb0 <loop+0x2d4>)
     952:	ldrb	r2, [r2, #4]
     954:	str	r2, [sp, #36]	; 0x24
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     956:	ldr	r2, [pc, #600]	; (bb0 <loop+0x2d4>)
     958:	ldrb	r2, [r2, #6]
     95a:	str	r2, [sp, #28]
     95c:	ldr	r2, [pc, #592]	; (bb0 <loop+0x2d4>)
     95e:	ldr	r3, [r2, r3]
     960:	str	r3, [sp, #32]
     962:	ldr	r2, [sp, #16]
     964:	movs	r7, #2
     966:	subw	r3, r2, #2808	; 0xaf8
     96a:	sub.w	ip, r2, #104	; 0x68
     96e:	str	r3, [sp, #0]
     970:	ldr	r3, [sp, #32]
     972:	mov	sl, r3
     974:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     976:	ldr	r3, [sp, #20]
     978:	cmp	r3, #0
     97a:	beq.w	126e <loop+0x992>
      return _background[x][y];
     97e:	ldrb.w	r3, [sl]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     982:	cmp	r3, #0
     984:	beq.n	a44 <loop+0x168>
     986:	ldr	r3, [sp, #8]
     988:	mov	lr, r8
     98a:	subs	r6, r3, #3
     98c:	subs	r3, r7, #3
     98e:	str	r3, [sp, #12]
     990:	smull	r3, r2, fp, r6
     994:	asrs	r3, r6, #31
     996:	ldr	r0, [sp, #12]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     998:	mov	r5, lr
     99a:	rsb	r3, r3, r2, asr #3
     99e:	mls	r3, r9, r3, r6
     9a2:	adds	r3, #26
     9a4:	smull	r2, r1, fp, r3
     9a8:	asrs	r2, r3, #31
     9aa:	rsb	r2, r2, r1, asr #3
     9ae:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     9b2:	mul.w	r4, r9, r2
     9b6:	smull	r3, r1, fp, r0
     9ba:	asrs	r3, r0, #31
     9bc:	rsb	r3, r3, r1, asr #3
     9c0:	mls	r3, r9, r3, r0
     9c4:	adds	r0, #1
     9c6:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     9ca:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     9cc:	smull	r2, r3, fp, r1
     9d0:	mov.w	r2, r1, asr #31
     9d4:	rsb	r3, r2, r3, asr #3
     9d8:	ldr	r2, [pc, #468]	; (bb0 <loop+0x2d4>)
     9da:	mls	r3, r9, r3, r1
     9de:	add	r3, r4
     9e0:	add.w	r3, r3, #6
     9e4:	ldr.w	r3, [r2, r3, lsl #2]
     9e8:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     9ec:	bne.n	9b6 <loop+0xda>
     9ee:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     9f0:	ldr	r3, [sp, #8]
     9f2:	add.w	lr, lr, #12
     9f6:	cmp	r3, r6
     9f8:	bne.n	990 <loop+0xb4>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     9fa:	ldr	r3, [sp, #0]
     9fc:	movs	r1, #1
     9fe:	ldr	r5, [r3, #0]
     a00:	ldr	r3, [sp, #24]
     a02:	adds	r4, r3, r5
     a04:	movs	r0, #0
     a06:	mov	r3, r0
     a08:	b.n	a10 <loop+0x134>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a0a:	adds	r3, #1
     a0c:	cmp	r3, #8
     a0e:	beq.n	a24 <loop+0x148>
          if ((i >> j) % 2 == 1){
     a10:	asr.w	r2, r1, r3
     a14:	lsls	r6, r2, #31
     a16:	bpl.n	a0a <loop+0x12e>
            sum += neighbours[j];
     a18:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a1c:	adds	r3, #1
     a1e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     a20:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     a22:	bne.n	a10 <loop+0x134>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     a24:	cmp	r4, r0
     a26:	beq.w	127a <loop+0x99e>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     a2a:	adds	r1, #1
     a2c:	cmp.w	r1, #256	; 0x100
     a30:	bne.n	a04 <loop+0x128>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     a32:	ldr	r3, [sp, #40]	; 0x28
     a34:	subs	r5, r5, r3
     a36:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
     a3a:	ldr	r2, [sp, #28]
     a3c:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
     a3e:	it	gt
     a40:	strgt.w	r2, [ip]
     a44:	ldr	r3, [sp, #0]
     a46:	add.w	ip, ip, #4
     a4a:	adds	r7, #1
     a4c:	add.w	sl, sl, #1
     a50:	adds	r3, #4
     a52:	str	r3, [sp, #0]
     a54:	ldr	r3, [sp, #4]
     a56:	adds	r3, #1
     a58:	str	r3, [sp, #4]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     a5a:	ldr	r3, [sp, #16]
     a5c:	cmp	r3, ip
     a5e:	bne.n	976 <loop+0x9a>
     a60:	ldr	r2, [sp, #16]
     a62:	ldr	r3, [sp, #8]
     a64:	adds	r2, #104	; 0x68
     a66:	adds	r3, #1
     a68:	str	r2, [sp, #16]
     a6a:	ldr	r2, [sp, #32]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     a6c:	cmp	r3, #28
     a6e:	str	r3, [sp, #8]
     a70:	add.w	r2, r2, #26
     a74:	str	r2, [sp, #32]
     a76:	bne.w	962 <loop+0x86>
     a7a:	ldr	r0, [pc, #312]	; (bb4 <loop+0x2d8>)
     a7c:	add.w	r5, r0, #2704	; 0xa90
     a80:	sub.w	r3, r0, #2704	; 0xa90
     a84:	subw	r4, r0, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     a88:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     a8a:	ldr.w	r1, [r2, #4]!
     a8e:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     a92:	cmp	r4, r3
     a94:	bne.n	a8a <loop+0x1ae>
     a96:	adds	r0, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     a98:	cmp	r0, r5
     a9a:	bne.n	a80 <loop+0x1a4>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     a9c:	movs	r2, #32
     a9e:	movs	r1, #0
     aa0:	mov	r0, r8
     aa2:	mov.w	r9, #26
     aa6:	bl	b2c8 <memset>
     aaa:	ldr	r2, [pc, #268]	; (bb8 <loop+0x2dc>)
     aac:	movw	r3, #5436	; 0x153c
     ab0:	ldr.w	fp, [pc, #264]	; bbc <loop+0x2e0>
     ab4:	ldrb	r2, [r2, #9]
     ab6:	str	r2, [sp, #20]
     ab8:	ldr	r2, [pc, #252]	; (bb8 <loop+0x2dc>)
     aba:	add.w	r2, r2, #2832	; 0xb10
     abe:	str	r2, [sp, #16]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     ac0:	sub.w	r2, r2, #2832	; 0xb10
     ac4:	ldr	r2, [r2, #0]
     ac6:	str	r2, [sp, #24]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     ac8:	movs	r2, #2
     aca:	str	r2, [sp, #8]
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     acc:	ldr	r2, [pc, #232]	; (bb8 <loop+0x2dc>)
     ace:	ldrb	r2, [r2, #5]
     ad0:	str	r2, [sp, #40]	; 0x28
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     ad2:	ldr	r2, [pc, #228]	; (bb8 <loop+0x2dc>)
     ad4:	ldrb	r2, [r2, #4]
     ad6:	str	r2, [sp, #36]	; 0x24
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     ad8:	ldr	r2, [pc, #220]	; (bb8 <loop+0x2dc>)
     ada:	ldrb	r2, [r2, #6]
     adc:	str	r2, [sp, #28]
     ade:	ldr	r2, [pc, #216]	; (bb8 <loop+0x2dc>)
     ae0:	ldr	r3, [r2, r3]
     ae2:	str	r3, [sp, #32]
     ae4:	ldr	r2, [sp, #16]
     ae6:	movs	r7, #2
     ae8:	subw	r3, r2, #2808	; 0xaf8
     aec:	sub.w	ip, r2, #104	; 0x68
     af0:	str	r3, [sp, #0]
     af2:	ldr	r3, [sp, #32]
     af4:	mov	sl, r3
     af6:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     af8:	ldr	r3, [sp, #20]
     afa:	cmp	r3, #0
     afc:	beq.w	153c <loop+0xc60>
      return _background[x][y];
     b00:	ldrb.w	r3, [sl]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     b04:	cmp	r3, #0
     b06:	beq.n	bfa <loop+0x31e>
     b08:	ldr	r3, [sp, #8]
     b0a:	mov	lr, r8
     b0c:	subs	r6, r3, #3
     b0e:	subs	r3, r7, #3
     b10:	str	r3, [sp, #12]
     b12:	smull	r3, r2, fp, r6
     b16:	asrs	r3, r6, #31
     b18:	ldr	r0, [sp, #12]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     b1a:	mov	r5, lr
     b1c:	rsb	r3, r3, r2, asr #3
     b20:	mls	r3, r9, r3, r6
     b24:	adds	r3, #26
     b26:	smull	r2, r1, fp, r3
     b2a:	asrs	r2, r3, #31
     b2c:	rsb	r2, r2, r1, asr #3
     b30:	mls	r2, r9, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     b34:	mul.w	r4, r9, r2
     b38:	smull	r3, r1, fp, r0
     b3c:	asrs	r3, r0, #31
     b3e:	rsb	r3, r3, r1, asr #3
     b42:	mls	r3, r9, r3, r0
     b46:	adds	r0, #1
     b48:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     b4c:	cmp	r0, r7
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     b4e:	smull	r2, r3, fp, r1
     b52:	mov.w	r2, r1, asr #31
     b56:	rsb	r3, r2, r3, asr #3
     b5a:	ldr	r2, [pc, #92]	; (bb8 <loop+0x2dc>)
     b5c:	mls	r3, r9, r3, r1
     b60:	add	r3, r4
     b62:	add.w	r3, r3, #6
     b66:	ldr.w	r3, [r2, r3, lsl #2]
     b6a:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     b6e:	bne.n	b38 <loop+0x25c>
     b70:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     b72:	ldr	r3, [sp, #8]
     b74:	add.w	lr, lr, #12
     b78:	cmp	r3, r6
     b7a:	bne.n	b12 <loop+0x236>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     b7c:	ldr	r3, [sp, #0]
     b7e:	movs	r1, #1
     b80:	ldr	r5, [r3, #0]
     b82:	ldr	r3, [sp, #24]
     b84:	adds	r4, r3, r5
     b86:	movs	r0, #0
     b88:	mov	r3, r0
     b8a:	b.n	bc6 <loop+0x2ea>
     b8c:	.word	0x200158d8
     b90:	.word	0x200015bc
     b94:	.word	0x200015c0
     b98:	.word	0x2000f9c0
     b9c:	.word	0x200015c4
     ba0:	.word	0x20010f18
     ba4:	.word	0x20014e78
     ba8:	.word	0x20003574
     bac:	.word	0x20012ec8
     bb0:	.word	0x2000f9d8
     bb4:	.word	0x2001047c
     bb8:	.word	0x2000ba00
     bbc:	.word	0x4ec4ec4f

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     bc0:	adds	r3, #1
     bc2:	cmp	r3, #8
     bc4:	beq.n	bda <loop+0x2fe>
          if ((i >> j) % 2 == 1){
     bc6:	asr.w	r2, r1, r3
     bca:	lsls	r2, r2, #31
     bcc:	bpl.n	bc0 <loop+0x2e4>
            sum += neighbours[j];
     bce:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     bd2:	adds	r3, #1
     bd4:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     bd6:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     bd8:	bne.n	bc6 <loop+0x2ea>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     bda:	cmp	r4, r0
     bdc:	beq.w	1548 <loop+0xc6c>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     be0:	adds	r1, #1
     be2:	cmp.w	r1, #256	; 0x100
     be6:	bne.n	b86 <loop+0x2aa>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     be8:	ldr	r3, [sp, #40]	; 0x28
     bea:	subs	r5, r5, r3
     bec:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
     bf0:	ldr	r2, [sp, #28]
     bf2:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
     bf4:	it	gt
     bf6:	strgt.w	r2, [ip]
     bfa:	ldr	r3, [sp, #0]
     bfc:	add.w	ip, ip, #4
     c00:	adds	r7, #1
     c02:	add.w	sl, sl, #1
     c06:	adds	r3, #4
     c08:	str	r3, [sp, #0]
     c0a:	ldr	r3, [sp, #4]
     c0c:	adds	r3, #1
     c0e:	str	r3, [sp, #4]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     c10:	ldr	r3, [sp, #16]
     c12:	cmp	r3, ip
     c14:	bne.w	af8 <loop+0x21c>
     c18:	ldr	r2, [sp, #16]
     c1a:	ldr	r3, [sp, #8]
     c1c:	adds	r2, #104	; 0x68
     c1e:	adds	r3, #1
     c20:	str	r2, [sp, #16]
     c22:	ldr	r2, [sp, #32]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     c24:	cmp	r3, #28
     c26:	str	r3, [sp, #8]
     c28:	add.w	r2, r2, #26
     c2c:	str	r2, [sp, #32]
     c2e:	bne.w	ae4 <loop+0x208>
     c32:	ldr	r0, [pc, #604]	; (e90 <loop+0x5b4>)
     c34:	add.w	r5, r0, #2704	; 0xa90
     c38:	sub.w	r3, r0, #2704	; 0xa90
     c3c:	subw	r4, r0, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     c40:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     c42:	ldr.w	r1, [r2, #4]!
     c46:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     c4a:	cmp	r3, r4
     c4c:	bne.n	c42 <loop+0x366>
     c4e:	adds	r0, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     c50:	cmp	r0, r5
     c52:	bne.n	c38 <loop+0x35c>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     c54:	movs	r2, #32
     c56:	movs	r1, #0
     c58:	mov	r0, r8
     c5a:	ldr.w	sl, [pc, #572]	; e98 <loop+0x5bc>
     c5e:	bl	b2c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     c62:	movs	r3, #2
     c64:	ldr.w	r9, [pc, #564]	; e9c <loop+0x5c0>
     c68:	mov.w	fp, #26
     c6c:	str	r3, [sp, #4]
     c6e:	ldr.w	r3, [sl]
     c72:	str	r3, [sp, #16]
     c74:	addw	r3, sl, #2728	; 0xaa8
     c78:	str	r3, [sp, #32]
     c7a:	ldrb.w	r3, [sl, #6]
     c7e:	str	r3, [sp, #12]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     c80:	ldrb.w	r3, [sl, #5]
     c84:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     c86:	ldrb.w	r3, [sl, #4]
     c8a:	str	r3, [sp, #24]
     c8c:	ldr	r2, [sp, #32]
     c8e:	mov.w	ip, #4294967295
     c92:	subw	r3, r2, #2708	; 0xa94
     c96:	str	r2, [sp, #0]
     c98:	str	r3, [sp, #8]
     c9a:	ldr	r3, [sp, #4]
     c9c:	subs	r3, #3
     c9e:	str	r3, [sp, #20]
     ca0:	ldr	r6, [sp, #20]
     ca2:	mov	lr, r8
     ca4:	add.w	r7, ip, #3
     ca8:	smull	r3, r2, r9, r6
     cac:	asrs	r3, r6, #31
     cae:	mov	r5, lr
     cb0:	mov	r0, ip
     cb2:	rsb	r3, r3, r2, asr #3
     cb6:	mls	r3, fp, r3, r6
     cba:	adds	r3, #26
     cbc:	smull	r2, r4, r9, r3
     cc0:	asrs	r2, r3, #31
     cc2:	rsb	r4, r2, r4, asr #3
     cc6:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     cca:	mul.w	r4, fp, r4
     cce:	smull	r3, r1, r9, r0
     cd2:	asrs	r3, r0, #31
     cd4:	rsb	r3, r3, r1, asr #3
     cd8:	mls	r3, fp, r3, r0
     cdc:	adds	r0, #1
     cde:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     ce2:	cmp	r0, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     ce4:	smull	r2, r3, r9, r1
     ce8:	mov.w	r2, r1, asr #31
     cec:	rsb	r3, r2, r3, asr #3
     cf0:	mls	r3, fp, r3, r1
     cf4:	add	r3, r4
     cf6:	add.w	r3, r3, #6
     cfa:	ldr.w	r3, [sl, r3, lsl #2]
     cfe:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
     d02:	bne.n	cce <loop+0x3f2>
     d04:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
     d06:	ldr	r3, [sp, #4]
     d08:	add.w	lr, lr, #12
     d0c:	cmp	r3, r6
     d0e:	bne.n	ca8 <loop+0x3cc>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     d10:	ldr	r3, [sp, #8]
     d12:	movs	r2, #1
     d14:	ldr.w	r5, [r3, #4]!
     d18:	str	r3, [sp, #8]
     d1a:	ldr	r3, [sp, #16]
     d1c:	adds	r4, r5, r3
     d1e:	movs	r0, #0
     d20:	mov	r3, r0
     d22:	b.n	d2a <loop+0x44e>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     d24:	adds	r3, #1
     d26:	cmp	r3, #8
     d28:	beq.n	d3e <loop+0x462>
          if ((i >> j) % 2 == 1){
     d2a:	asr.w	r1, r2, r3
     d2e:	lsls	r6, r1, #31
     d30:	bpl.n	d24 <loop+0x448>
            sum += neighbours[j];
     d32:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     d36:	adds	r3, #1
     d38:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     d3a:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     d3c:	bne.n	d2a <loop+0x44e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     d3e:	cmp	r4, r0
     d40:	beq.w	1584 <loop+0xca8>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     d44:	adds	r2, #1
     d46:	cmp.w	r2, #256	; 0x100
     d4a:	bne.n	d1e <loop+0x442>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     d4c:	ldr	r3, [sp, #28]
     d4e:	subs	r5, r5, r3
     d50:	ldr	r3, [sp, #0]
     d52:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
     d54:	ldr	r2, [sp, #12]
     d56:	cmp	r2, r5
     d58:	ble.n	d60 <loop+0x484>
            nextCells[x][y] = _floorInit;
     d5a:	ldr	r3, [sp, #0]
     d5c:	mov	r1, r3
     d5e:	str	r2, [r1, #0]
     d60:	ldr	r3, [sp, #0]
     d62:	add.w	ip, ip, #1
     d66:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d68:	cmp.w	ip, #25
     d6c:	str	r3, [sp, #0]
     d6e:	bne.n	ca0 <loop+0x3c4>
     d70:	ldr	r3, [sp, #4]
     d72:	ldr	r2, [sp, #32]
     d74:	adds	r3, #1
     d76:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     d78:	cmp	r3, #28
     d7a:	str	r3, [sp, #4]
     d7c:	str	r2, [sp, #32]
     d7e:	bne.n	c8c <loop+0x3b0>
     d80:	ldr	r0, [pc, #272]	; (e94 <loop+0x5b8>)
     d82:	add.w	r5, r0, #2704	; 0xa90
     d86:	sub.w	r3, r0, #2704	; 0xa90
     d8a:	subw	r4, r0, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     d8e:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     d90:	ldr.w	r1, [r2, #4]!
     d94:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     d98:	cmp	r4, r3
     d9a:	bne.n	d90 <loop+0x4b4>
     d9c:	adds	r0, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     d9e:	cmp	r0, r5
     da0:	bne.n	d86 <loop+0x4aa>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     da2:	movs	r2, #32
     da4:	movs	r1, #0
     da6:	mov	r0, r8
     da8:	ldr.w	r9, [pc, #244]	; ea0 <loop+0x5c4>
     dac:	bl	b2c8 <memset>
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     db0:	movs	r2, #2
     db2:	movw	r3, #5436	; 0x153c
     db6:	mov.w	sl, #26
     dba:	str	r2, [sp, #12]
     dbc:	ldrb.w	r2, [r9, #9]
     dc0:	ldr.w	r3, [r9, r3]
     dc4:	str	r2, [sp, #24]
     dc6:	add.w	r2, r9, #2832	; 0xb10
     dca:	ldr.w	fp, [pc, #208]	; e9c <loop+0x5c0>
     dce:	str	r2, [sp, #20]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     dd0:	ldr.w	r2, [r9]
     dd4:	str	r3, [sp, #36]	; 0x24
     dd6:	str	r2, [sp, #28]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     dd8:	ldrb.w	r2, [r9, #5]
     ddc:	str	r2, [sp, #44]	; 0x2c
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     dde:	ldrb.w	r2, [r9, #4]
     de2:	str	r2, [sp, #40]	; 0x28
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     de4:	ldrb.w	r2, [r9, #6]
     de8:	str	r2, [sp, #32]
     dea:	ldr	r2, [sp, #20]
     dec:	movs	r7, #2
     dee:	subw	r3, r2, #2808	; 0xaf8
     df2:	sub.w	ip, r2, #104	; 0x68
     df6:	str	r3, [sp, #4]
     df8:	ldr	r3, [sp, #36]	; 0x24
     dfa:	str	r3, [sp, #8]
     dfc:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     dfe:	ldr	r3, [sp, #24]
     e00:	cmp	r3, #0
     e02:	beq.w	1590 <loop+0xcb4>
      return _background[x][y];
     e06:	ldr	r3, [sp, #0]
     e08:	ldrb	r3, [r3, #0]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     e0a:	cmp	r3, #0
     e0c:	beq.n	ede <loop+0x602>
     e0e:	ldr	r3, [sp, #12]
     e10:	mov	lr, r8
     e12:	subs	r6, r3, #3
     e14:	subs	r3, r7, #3
     e16:	str	r3, [sp, #16]
     e18:	smull	r3, r2, fp, r6
     e1c:	asrs	r3, r6, #31
     e1e:	ldr	r0, [sp, #16]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     e20:	mov	r5, lr
     e22:	rsb	r3, r3, r2, asr #3
     e26:	mls	r3, sl, r3, r6
     e2a:	adds	r3, #26
     e2c:	smull	r2, r1, fp, r3
     e30:	asrs	r2, r3, #31
     e32:	rsb	r2, r2, r1, asr #3
     e36:	mls	r2, sl, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     e3a:	mul.w	r4, sl, r2
     e3e:	smull	r3, r1, fp, r0
     e42:	asrs	r3, r0, #31
     e44:	rsb	r3, r3, r1, asr #3
     e48:	mls	r3, sl, r3, r0
     e4c:	adds	r0, #1
     e4e:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     e52:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     e54:	smull	r2, r3, fp, r1
     e58:	mov.w	r2, r1, asr #31
     e5c:	rsb	r3, r2, r3, asr #3
     e60:	mls	r3, sl, r3, r1
     e64:	add	r3, r4
     e66:	add.w	r3, r3, #6
     e6a:	ldr.w	r3, [r9, r3, lsl #2]
     e6e:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     e72:	bne.n	e3e <loop+0x562>
     e74:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
     e76:	ldr	r3, [sp, #12]
     e78:	add.w	lr, lr, #12
     e7c:	cmp	r3, r6
     e7e:	bne.n	e18 <loop+0x53c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     e80:	ldr	r3, [sp, #4]
     e82:	movs	r2, #1
     e84:	ldr	r5, [r3, #0]
     e86:	ldr	r3, [sp, #28]
     e88:	adds	r4, r3, r5
     e8a:	movs	r0, #0
     e8c:	mov	r3, r0
     e8e:	b.n	eaa <loop+0x5ce>
     e90:	.word	0x2000c4a4
     e94:	.word	0x200084e4
     e98:	.word	0x20007a40
     e9c:	.word	0x4ec4ec4f
     ea0:	.word	0x20005528

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     ea4:	adds	r3, #1
     ea6:	cmp	r3, #8
     ea8:	beq.n	ebe <loop+0x5e2>
          if ((i >> j) % 2 == 1){
     eaa:	asr.w	r1, r2, r3
     eae:	lsls	r1, r1, #31
     eb0:	bpl.n	ea4 <loop+0x5c8>
            sum += neighbours[j];
     eb2:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     eb6:	adds	r3, #1
     eb8:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
     eba:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
     ebc:	bne.n	eaa <loop+0x5ce>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
     ebe:	cmp	r4, r0
     ec0:	beq.w	159a <loop+0xcbe>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
     ec4:	adds	r2, #1
     ec6:	cmp.w	r2, #256	; 0x100
     eca:	bne.n	e8a <loop+0x5ae>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     ecc:	ldr	r3, [sp, #44]	; 0x2c
     ece:	subs	r5, r5, r3
     ed0:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
     ed4:	ldr	r2, [sp, #32]
     ed6:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
     ed8:	it	gt
     eda:	strgt.w	r2, [ip]
     ede:	ldr	r3, [sp, #4]
     ee0:	add.w	ip, ip, #4
     ee4:	adds	r7, #1
     ee6:	adds	r3, #4
     ee8:	str	r3, [sp, #4]
     eea:	ldr	r3, [sp, #0]
     eec:	adds	r3, #1
     eee:	str	r3, [sp, #0]
     ef0:	ldr	r3, [sp, #8]
     ef2:	adds	r3, #1
     ef4:	str	r3, [sp, #8]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     ef6:	ldr	r3, [sp, #20]
     ef8:	cmp	r3, ip
     efa:	bne.n	dfe <loop+0x522>
     efc:	ldr	r2, [sp, #20]
     efe:	ldr	r3, [sp, #12]
     f00:	adds	r2, #104	; 0x68
     f02:	adds	r3, #1
     f04:	str	r2, [sp, #20]
     f06:	ldr	r2, [sp, #36]	; 0x24
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
     f08:	cmp	r3, #28
     f0a:	str	r3, [sp, #12]
     f0c:	add.w	r2, r2, #26
     f10:	str	r2, [sp, #36]	; 0x24
     f12:	bne.w	dea <loop+0x50e>
     f16:	ldr	r0, [pc, #772]	; (121c <loop+0x940>)
     f18:	add.w	r5, r0, #2704	; 0xa90
     f1c:	sub.w	r3, r0, #2704	; 0xa90
     f20:	subw	r4, r0, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     f24:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
     f26:	ldr.w	r1, [r2, #4]!
     f2a:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
     f2e:	cmp	r3, r4
     f30:	bne.n	f26 <loop+0x64a>
     f32:	adds	r0, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
     f34:	cmp	r0, r5
     f36:	bne.n	f1c <loop+0x640>
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     f38:	movs	r2, #32
     f3a:	movs	r1, #0
     f3c:	mov	r0, r8
     f3e:	mov.w	fp, #26
     f42:	bl	b2c8 <memset>
     f46:	ldr	r2, [pc, #728]	; (1220 <loop+0x944>)
     f48:	movw	r3, #5436	; 0x153c
     f4c:	ldr.w	sl, [pc, #736]	; 1230 <loop+0x954>
     f50:	ldrb	r2, [r2, #9]
     f52:	str	r2, [sp, #20]
     f54:	ldr	r2, [pc, #712]	; (1220 <loop+0x944>)
     f56:	add.w	r2, r2, #2832	; 0xb10
     f5a:	str	r2, [sp, #16]
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
     f5c:	sub.w	r2, r2, #2832	; 0xb10
     f60:	ldr	r2, [r2, #0]
     f62:	str	r2, [sp, #24]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     f64:	movs	r2, #2
     f66:	str	r2, [sp, #8]
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
     f68:	ldr	r2, [pc, #692]	; (1220 <loop+0x944>)
     f6a:	ldrb	r2, [r2, #5]
     f6c:	str	r2, [sp, #40]	; 0x28
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
     f6e:	ldr	r2, [pc, #688]	; (1220 <loop+0x944>)
     f70:	ldrb	r2, [r2, #4]
     f72:	str	r2, [sp, #36]	; 0x24
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     f74:	ldr	r2, [pc, #680]	; (1220 <loop+0x944>)
     f76:	ldrb	r2, [r2, #6]
     f78:	str	r2, [sp, #28]
     f7a:	ldr	r2, [pc, #676]	; (1220 <loop+0x944>)
     f7c:	ldr	r3, [r2, r3]
     f7e:	str	r3, [sp, #32]
     f80:	ldr	r2, [sp, #16]
     f82:	movs	r7, #2
     f84:	subw	r3, r2, #2808	; 0xaf8
     f88:	sub.w	ip, r2, #104	; 0x68
     f8c:	str	r3, [sp, #0]
     f8e:	ldr	r3, [sp, #32]
     f90:	mov	r9, r3
     f92:	str	r3, [sp, #4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     f94:	ldr	r3, [sp, #20]
     f96:	cmp	r3, #0
     f98:	beq.w	15a4 <loop+0xcc8>
      return _background[x][y];
     f9c:	ldrb.w	r3, [r9]
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     fa0:	cmp	r3, #0
     fa2:	beq.n	1062 <loop+0x786>
     fa4:	ldr	r3, [sp, #8]
     fa6:	mov	lr, r8
     fa8:	subs	r6, r3, #3
     faa:	subs	r3, r7, #3
     fac:	str	r3, [sp, #12]
     fae:	smull	r3, r2, sl, r6
     fb2:	asrs	r3, r6, #31
     fb4:	ldr	r0, [sp, #12]
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
          }
          if (nextCells[x][y] < _floorInit){
     fb6:	mov	r5, lr
     fb8:	rsb	r3, r3, r2, asr #3
     fbc:	mls	r3, fp, r3, r6
     fc0:	adds	r3, #26
     fc2:	smull	r2, r1, sl, r3
     fc6:	asrs	r2, r3, #31
     fc8:	rsb	r2, r2, r1, asr #3
     fcc:	mls	r2, fp, r2, r3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     fd0:	mul.w	r4, fp, r2
     fd4:	smull	r3, r1, sl, r0
     fd8:	asrs	r3, r0, #31
     fda:	rsb	r3, r3, r1, asr #3
     fde:	mls	r3, fp, r3, r0
     fe2:	adds	r0, #1
     fe4:	add.w	r1, r3, #26
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     fe8:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     fea:	smull	r2, r3, sl, r1
     fee:	mov.w	r2, r1, asr #31
     ff2:	rsb	r3, r2, r3, asr #3
     ff6:	ldr	r2, [pc, #552]	; (1220 <loop+0x944>)
     ff8:	mls	r3, fp, r3, r1
     ffc:	add	r3, r4
     ffe:	add.w	r3, r3, #6
    1002:	ldr.w	r3, [r2, r3, lsl #2]
    1006:	str.w	r3, [r5], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    100a:	bne.n	fd4 <loop+0x6f8>
    100c:	adds	r6, #1
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    100e:	ldr	r3, [sp, #8]
    1010:	add.w	lr, lr, #12
    1014:	cmp	r3, r6
    1016:	bne.n	fae <loop+0x6d2>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1018:	ldr	r3, [sp, #0]
    101a:	movs	r1, #1
    101c:	ldr	r5, [r3, #0]
    101e:	ldr	r3, [sp, #24]
    1020:	adds	r4, r3, r5
    1022:	movs	r0, #0
    1024:	mov	r3, r0
    1026:	b.n	102e <loop+0x752>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1028:	adds	r3, #1
    102a:	cmp	r3, #8
    102c:	beq.n	1042 <loop+0x766>
          if ((i >> j) % 2 == 1){
    102e:	asr.w	r2, r1, r3
    1032:	lsls	r2, r2, #31
    1034:	bpl.n	1028 <loop+0x74c>
            sum += neighbours[j];
    1036:	ldr.w	r2, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    103a:	adds	r3, #1
    103c:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    103e:	add	r0, r2

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1040:	bne.n	102e <loop+0x752>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1042:	cmp	r4, r0
    1044:	beq.w	15ae <loop+0xcd2>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1048:	adds	r1, #1
    104a:	cmp.w	r1, #256	; 0x100
    104e:	bne.n	1022 <loop+0x746>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1050:	ldr	r3, [sp, #40]	; 0x28
    1052:	subs	r5, r5, r3
    1054:	str.w	r5, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1058:	ldr	r2, [sp, #28]
    105a:	cmp	r2, r5
            nextCells[x][y] = _floorInit;
    105c:	it	gt
    105e:	strgt.w	r2, [ip]
    1062:	ldr	r3, [sp, #0]
    1064:	add.w	ip, ip, #4
    1068:	adds	r7, #1
    106a:	add.w	r9, r9, #1
    106e:	adds	r3, #4
    1070:	str	r3, [sp, #0]
    1072:	ldr	r3, [sp, #4]
    1074:	adds	r3, #1
    1076:	str	r3, [sp, #4]
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1078:	ldr	r3, [sp, #16]
    107a:	cmp	ip, r3
    107c:	bne.n	f94 <loop+0x6b8>
    107e:	ldr	r3, [sp, #8]
    1080:	add.w	r2, ip, #104	; 0x68
    1084:	adds	r3, #1
    1086:	str	r2, [sp, #16]
    1088:	ldr	r2, [sp, #32]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    108a:	cmp	r3, #28
    108c:	str	r3, [sp, #8]
    108e:	add.w	r2, r2, #26
    1092:	str	r2, [sp, #32]
    1094:	bne.w	f80 <loop+0x6a4>
    1098:	ldr	r0, [pc, #392]	; (1224 <loop+0x948>)
    109a:	add.w	r5, r0, #2704	; 0xa90
    109e:	sub.w	r3, r0, #2704	; 0xa90
    10a2:	subw	r4, r0, #2600	; 0xa28
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    10a6:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    10a8:	ldr.w	r1, [r2, #4]!
    10ac:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    10b0:	cmp	r3, r4
    10b2:	bne.n	10a8 <loop+0x7cc>
    10b4:	adds	r0, #104	; 0x68
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    10b6:	cmp	r0, r5
    10b8:	bne.n	109e <loop+0x7c2>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    10ba:	movs	r2, #32
    10bc:	movs	r1, #0
    10be:	mov	r0, r8
    10c0:	ldr.w	r9, [pc, #368]	; 1234 <loop+0x958>
    10c4:	bl	b2c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    10c8:	movs	r3, #2
    10ca:	ldr.w	sl, [pc, #356]	; 1230 <loop+0x954>
    10ce:	mov.w	fp, #26
    10d2:	str	r3, [sp, #4]
    10d4:	ldr.w	r3, [r9]
    10d8:	str	r3, [sp, #12]
    10da:	addw	r3, r9, #2728	; 0xaa8
    10de:	str	r3, [sp, #32]
    10e0:	ldrb.w	r3, [r9, #6]
    10e4:	str	r3, [sp, #16]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    10e6:	ldrb.w	r3, [r9, #5]
    10ea:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    10ec:	ldrb.w	r3, [r9, #4]
    10f0:	str	r3, [sp, #24]
    10f2:	ldr	r2, [sp, #32]
    10f4:	mov.w	ip, #4294967295
    10f8:	subw	r3, r2, #2708	; 0xa94
    10fc:	str	r2, [sp, #0]
    10fe:	str	r3, [sp, #8]
    1100:	ldr	r3, [sp, #4]
    1102:	subs	r3, #3
    1104:	str	r3, [sp, #20]
    1106:	ldr	r6, [sp, #20]
    1108:	mov	lr, r8
    110a:	add.w	r7, ip, #3
    110e:	smull	r3, r2, sl, r6
    1112:	asrs	r3, r6, #31
    1114:	mov	r5, lr
    1116:	mov	r0, ip
    1118:	rsb	r3, r3, r2, asr #3
    111c:	mls	r3, fp, r3, r6
    1120:	adds	r3, #26
    1122:	smull	r2, r4, sl, r3
    1126:	asrs	r2, r3, #31
    1128:	rsb	r4, r2, r4, asr #3
    112c:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1130:	mul.w	r4, fp, r4
    1134:	smull	r3, r1, sl, r0
    1138:	asrs	r3, r0, #31
    113a:	rsb	r3, r3, r1, asr #3
    113e:	mls	r3, fp, r3, r0
    1142:	adds	r0, #1
    1144:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1148:	cmp	r0, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    114a:	smull	r2, r3, sl, r1
    114e:	mov.w	r2, r1, asr #31
    1152:	rsb	r3, r2, r3, asr #3
    1156:	mls	r3, fp, r3, r1
    115a:	add	r3, r4
    115c:	add.w	r3, r3, #6
    1160:	ldr.w	r3, [r9, r3, lsl #2]
    1164:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1168:	bne.n	1134 <loop+0x858>
    116a:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    116c:	ldr	r3, [sp, #4]
    116e:	add.w	lr, lr, #12
    1172:	cmp	r3, r6
    1174:	bne.n	110e <loop+0x832>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1176:	ldr	r3, [sp, #8]
    1178:	movs	r2, #1
    117a:	ldr.w	r5, [r3, #4]!
    117e:	str	r3, [sp, #8]
    1180:	ldr	r3, [sp, #12]
    1182:	adds	r4, r5, r3
    1184:	movs	r0, #0
    1186:	mov	r3, r0
    1188:	b.n	1190 <loop+0x8b4>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    118a:	adds	r3, #1
    118c:	cmp	r3, #8
    118e:	beq.n	11a4 <loop+0x8c8>
          if ((i >> j) % 2 == 1){
    1190:	asr.w	r1, r2, r3
    1194:	lsls	r7, r1, #31
    1196:	bpl.n	118a <loop+0x8ae>
            sum += neighbours[j];
    1198:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    119c:	adds	r3, #1
    119e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    11a0:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11a2:	bne.n	1190 <loop+0x8b4>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    11a4:	cmp	r4, r0
    11a6:	beq.w	15b8 <loop+0xcdc>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    11aa:	adds	r2, #1
    11ac:	cmp.w	r2, #256	; 0x100
    11b0:	bne.n	1184 <loop+0x8a8>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    11b2:	ldr	r3, [sp, #28]
    11b4:	subs	r5, r5, r3
    11b6:	ldr	r3, [sp, #0]
    11b8:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    11ba:	ldr	r2, [sp, #16]
    11bc:	cmp	r5, r2
    11be:	bge.n	11c6 <loop+0x8ea>
            nextCells[x][y] = _floorInit;
    11c0:	ldr	r3, [sp, #0]
    11c2:	mov	r1, r3
    11c4:	str	r2, [r1, #0]
    11c6:	ldr	r3, [sp, #0]
    11c8:	add.w	ip, ip, #1
    11cc:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    11ce:	cmp.w	ip, #25
    11d2:	str	r3, [sp, #0]
    11d4:	bne.n	1106 <loop+0x82a>
    11d6:	ldr	r3, [sp, #4]
    11d8:	ldr	r2, [sp, #32]
    11da:	adds	r3, #1
    11dc:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    11de:	cmp	r3, #28
    11e0:	str	r3, [sp, #4]
    11e2:	str	r2, [sp, #32]
    11e4:	bne.n	10f2 <loop+0x816>
    11e6:	ldr	r0, [pc, #64]	; (1228 <loop+0x94c>)
    11e8:	add.w	r5, r0, #2704	; 0xa90
    11ec:	sub.w	r3, r0, #2704	; 0xa90
    11f0:	subw	r4, r0, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    11f4:	mov	r2, r0
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    11f6:	ldr.w	r1, [r2, #4]!
    11fa:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    11fe:	cmp	r4, r3
    1200:	bne.n	11f6 <loop+0x91a>
    1202:	adds	r0, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1204:	cmp	r5, r0
    1206:	bne.n	11ec <loop+0x910>
    bg_automaton_A.iterate();
    sat_automaton_A.iterate_growth();
    fg_automaton_B.iterate();
    bg_automaton_B.iterate();
    sat_automaton_B.iterate_growth();
    gen_color_matrix_A();
    1208:	bl	1e0 <gen_color_matrix_A()>
    gen_color_matrix_B();
    120c:	bl	318 <gen_color_matrix_B()>
    1210:	ldr	r3, [pc, #24]	; (122c <loop+0x950>)
    1212:	add.w	r1, r3, #2704	; 0xa90
    1216:	sub.w	r2, r3, #104	; 0x68
    121a:	b.n	123e <loop+0x962>
    121c:	.word	0x20005fcc
    1220:	.word	0x2000cf40
    1224:	.word	0x2000d9e4
    1228:	.word	0x2000ef24
    122c:	.word	0x2000fa54
    1230:	.word	0x4ec4ec4f
    1234:	.word	0x2000e480
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
    1238:	cmp	r3, r2
    123a:	beq.w	15c2 <loop+0xce6>
        if (cells[x][y] != 0) {
    123e:	ldr.w	r4, [r2, #4]!
    1242:	cmp	r4, #0
    1244:	beq.n	1238 <loop+0x95c>
    1246:	ldr	r3, [pc, #792]	; (1560 <loop+0xc84>)
    1248:	add.w	r1, r3, #2704	; 0xa90
    124c:	sub.w	r2, r3, #104	; 0x68
    1250:	b.n	1258 <loop+0x97c>
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
      for (int y = 0; y < SIZE_SCREEN; y++) {
    1252:	cmp	r3, r2
    1254:	beq.w	164c <loop+0xd70>
        if (cells[x][y] != 0) {
    1258:	ldr.w	r4, [r2, #4]!
    125c:	cmp	r4, #0
    125e:	beq.n	1252 <loop+0x976>
    1260:	ldr	r3, [pc, #768]	; (1564 <loop+0xc88>)
    }
    if(bg_automaton_A.allZero()){
      bg_automaton_A.init();
      bg_automaton_B.init();
    }
    nextTime1 = millis() + (1000/FRAMERATE_VARIANCE);
    1262:	ldr	r2, [pc, #772]	; (1568 <loop+0xc8c>)
    1264:	ldr	r3, [r3, #0]
    1266:	adds	r3, #50	; 0x32
    1268:	str	r3, [r2, #0]
    126a:	b.w	8ee <loop+0x12>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    126e:	ldr	r3, [sp, #4]
    1270:	ldrb	r3, [r3, #0]
    1272:	eor.w	r3, r3, #1
    1276:	b.w	982 <loop+0xa6>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    127a:	ldr	r3, [sp, #36]	; 0x24
    127c:	add	r5, r3
    127e:	str.w	r5, [ip]
    1282:	b.w	a3a <loop+0x15e>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1286:	add.w	r8, sp, #48	; 0x30
    128a:	movs	r2, #32
    128c:	movs	r1, #0
    128e:	ldr.w	sl, [pc, #744]	; 1578 <loop+0xc9c>
    1292:	mov	r0, r8
    1294:	ldr.w	r9, [pc, #740]	; 157c <loop+0xca0>
    1298:	bl	b2c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    129c:	movs	r3, #2
    129e:	mov.w	fp, #26
    12a2:	str	r3, [sp, #4]
    12a4:	ldr.w	r3, [sl]
    12a8:	str	r3, [sp, #12]
    12aa:	addw	r3, sl, #2728	; 0xaa8
    12ae:	str	r3, [sp, #32]
    12b0:	ldrb.w	r3, [sl, #6]
    12b4:	str	r3, [sp, #16]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    12b6:	ldrb.w	r3, [sl, #5]
    12ba:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    12bc:	ldrb.w	r3, [sl, #4]
    12c0:	str	r3, [sp, #24]
    12c2:	ldr	r2, [sp, #32]
    12c4:	mov.w	ip, #4294967295
    12c8:	subw	r3, r2, #2708	; 0xa94
    12cc:	str	r2, [sp, #0]
    12ce:	str	r3, [sp, #8]
    12d0:	ldr	r3, [sp, #4]
    12d2:	subs	r3, #3
    12d4:	str	r3, [sp, #20]
    12d6:	ldr	r6, [sp, #20]
    12d8:	mov	lr, r8
    12da:	add.w	r7, ip, #3
    12de:	smull	r3, r2, r9, r6
    12e2:	asrs	r3, r6, #31
    12e4:	mov	r5, lr
    12e6:	mov	r0, ip
    12e8:	rsb	r3, r3, r2, asr #3
    12ec:	mls	r3, fp, r3, r6
    12f0:	adds	r3, #26
    12f2:	smull	r2, r4, r9, r3
    12f6:	asrs	r2, r3, #31
    12f8:	rsb	r4, r2, r4, asr #3
    12fc:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1300:	mul.w	r4, fp, r4
    1304:	smull	r3, r1, r9, r0
    1308:	asrs	r3, r0, #31
    130a:	rsb	r3, r3, r1, asr #3
    130e:	mls	r3, fp, r3, r0
    1312:	adds	r0, #1
    1314:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1318:	cmp	r7, r0
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    131a:	smull	r2, r3, r9, r1
    131e:	mov.w	r2, r1, asr #31
    1322:	rsb	r3, r2, r3, asr #3
    1326:	mls	r3, fp, r3, r1
    132a:	add	r3, r4
    132c:	add.w	r3, r3, #6
    1330:	ldr.w	r3, [sl, r3, lsl #2]
    1334:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1338:	bne.n	1304 <loop+0xa28>
    133a:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    133c:	ldr	r3, [sp, #4]
    133e:	add.w	lr, lr, #12
    1342:	cmp	r3, r6
    1344:	bne.n	12de <loop+0xa02>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1346:	ldr	r3, [sp, #8]
    1348:	movs	r2, #1
    134a:	ldr.w	r5, [r3, #4]!
    134e:	str	r3, [sp, #8]
    1350:	ldr	r3, [sp, #12]
    1352:	adds	r4, r5, r3
    1354:	movs	r0, #0
    1356:	mov	r3, r0
    1358:	b.n	1360 <loop+0xa84>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    135a:	adds	r3, #1
    135c:	cmp	r3, #8
    135e:	beq.n	1374 <loop+0xa98>
          if ((i >> j) % 2 == 1){
    1360:	asr.w	r1, r2, r3
    1364:	lsls	r6, r1, #31
    1366:	bpl.n	135a <loop+0xa7e>
            sum += neighbours[j];
    1368:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    136c:	adds	r3, #1
    136e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1370:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1372:	bne.n	1360 <loop+0xa84>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1374:	cmp	r4, r0
    1376:	beq.w	1532 <loop+0xc56>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    137a:	adds	r2, #1
    137c:	cmp.w	r2, #256	; 0x100
    1380:	bne.n	1354 <loop+0xa78>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1382:	ldr	r3, [sp, #28]
    1384:	subs	r5, r5, r3
    1386:	ldr	r3, [sp, #0]
    1388:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    138a:	ldr	r2, [sp, #16]
    138c:	cmp	r2, r5
    138e:	ble.n	1396 <loop+0xaba>
            nextCells[x][y] = _floorInit;
    1390:	ldr	r3, [sp, #0]
    1392:	mov	r1, r3
    1394:	str	r2, [r1, #0]
    1396:	ldr	r3, [sp, #0]
    1398:	add.w	ip, ip, #1
    139c:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    139e:	cmp.w	ip, #25
    13a2:	str	r3, [sp, #0]
    13a4:	bne.n	12d6 <loop+0x9fa>
    13a6:	ldr	r3, [sp, #4]
    13a8:	ldr	r2, [sp, #32]
    13aa:	adds	r3, #1
    13ac:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    13ae:	cmp	r3, #28
    13b0:	str	r3, [sp, #4]
    13b2:	str	r2, [sp, #32]
    13b4:	bne.n	12c2 <loop+0x9e6>
    13b6:	ldr	r4, [pc, #436]	; (156c <loop+0xc90>)
    13b8:	add.w	r5, r4, #2704	; 0xa90
    13bc:	sub.w	r3, r4, #2704	; 0xa90
    13c0:	subw	r0, r4, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    13c4:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    13c6:	ldr.w	r1, [r2, #4]!
    13ca:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    13ce:	cmp	r0, r3
    13d0:	bne.n	13c6 <loop+0xaea>
    13d2:	adds	r4, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    13d4:	cmp	r5, r4
    13d6:	bne.n	13bc <loop+0xae0>
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    13d8:	movs	r2, #32
    13da:	movs	r1, #0
    13dc:	mov	r0, r8
    13de:	ldr.w	sl, [pc, #416]	; 1580 <loop+0xca4>
    13e2:	bl	b2c8 <memset>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    13e6:	movs	r3, #2
    13e8:	ldr.w	r9, [pc, #400]	; 157c <loop+0xca0>
    13ec:	mov.w	fp, #26
    13f0:	str	r3, [sp, #4]
    13f2:	ldr.w	r3, [sl]
    13f6:	str	r3, [sp, #16]
    13f8:	addw	r3, sl, #2728	; 0xaa8
    13fc:	str	r3, [sp, #32]
    13fe:	ldrb.w	r3, [sl, #6]
    1402:	str	r3, [sp, #12]
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1404:	ldrb.w	r3, [sl, #5]
    1408:	str	r3, [sp, #28]
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    140a:	ldrb.w	r3, [sl, #4]
    140e:	str	r3, [sp, #24]
    1410:	ldr	r2, [sp, #32]
    1412:	mov.w	ip, #4294967295
    1416:	subw	r3, r2, #2708	; 0xa94
    141a:	str	r2, [sp, #0]
    141c:	str	r3, [sp, #8]
    141e:	ldr	r3, [sp, #4]
    1420:	subs	r3, #3
    1422:	str	r3, [sp, #20]
    1424:	ldr	r6, [sp, #20]
    1426:	mov	lr, r8
    1428:	add.w	r7, ip, #3
    142c:	smull	r3, r2, r9, r6
    1430:	asrs	r3, r6, #31
    1432:	mov	r5, lr
    1434:	mov	r0, ip
    1436:	rsb	r3, r3, r2, asr #3
    143a:	mls	r3, fp, r3, r6
    143e:	adds	r3, #26
    1440:	smull	r2, r4, r9, r3
    1444:	asrs	r2, r3, #31
    1446:	rsb	r4, r2, r4, asr #3
    144a:	mls	r4, fp, r4, r3
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    144e:	mul.w	r4, fp, r4
    1452:	smull	r3, r1, r9, r0
    1456:	asrs	r3, r0, #31
    1458:	rsb	r3, r3, r1, asr #3
    145c:	mls	r3, fp, r3, r0
    1460:	adds	r0, #1
    1462:	add.w	r1, r3, #26
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1466:	cmp	r7, r0
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1468:	smull	r2, r3, r9, r1
    146c:	mov.w	r2, r1, asr #31
    1470:	rsb	r3, r2, r3, asr #3
    1474:	mls	r3, fp, r3, r1
    1478:	add	r3, r4
    147a:	add.w	r3, r3, #6
    147e:	ldr.w	r3, [sl, r3, lsl #2]
    1482:	str.w	r3, [r5], #4
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1486:	bne.n	1452 <loop+0xb76>
    1488:	adds	r6, #1
    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    148a:	ldr	r3, [sp, #4]
    148c:	add.w	lr, lr, #12
    1490:	cmp	r3, r6
    1492:	bne.n	142c <loop+0xb50>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1494:	ldr	r3, [sp, #8]
    1496:	movs	r2, #1
    1498:	ldr.w	r5, [r3, #4]!
    149c:	str	r3, [sp, #8]
    149e:	ldr	r3, [sp, #16]
    14a0:	adds	r4, r5, r3
    14a2:	movs	r0, #0
    14a4:	mov	r3, r0
    14a6:	b.n	14ae <loop+0xbd2>

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    14a8:	adds	r3, #1
    14aa:	cmp	r3, #8
    14ac:	beq.n	14c2 <loop+0xbe6>
          if ((i >> j) % 2 == 1){
    14ae:	asr.w	r1, r2, r3
    14b2:	lsls	r1, r1, #31
    14b4:	bpl.n	14a8 <loop+0xbcc>
            sum += neighbours[j];
    14b6:	ldr.w	r1, [r8, r3, lsl #2]

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    14ba:	adds	r3, #1
    14bc:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    14be:	add	r0, r1

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    14c0:	bne.n	14ae <loop+0xbd2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    14c2:	cmp	r4, r0
    14c4:	beq.n	1554 <loop+0xc78>
      }
      }

    int getSums(int neighbours[], int neighboursLength, int target){
      int canSum = 0;
      for (int i = 1; i < pow(2, neighboursLength); i++){
    14c6:	adds	r2, #1
    14c8:	cmp.w	r2, #256	; 0x100
    14cc:	bne.n	14a2 <loop+0xbc6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    14ce:	ldr	r3, [sp, #28]
    14d0:	subs	r5, r5, r3
    14d2:	ldr	r3, [sp, #0]
    14d4:	str	r5, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    14d6:	ldr	r2, [sp, #12]
    14d8:	cmp	r5, r2
    14da:	bge.n	14e2 <loop+0xc06>
            nextCells[x][y] = _floorInit;
    14dc:	ldr	r3, [sp, #0]
    14de:	mov	r1, r3
    14e0:	str	r2, [r1, #0]
    14e2:	ldr	r3, [sp, #0]
    14e4:	add.w	ip, ip, #1
    14e8:	adds	r3, #4
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    14ea:	cmp.w	ip, #25
    14ee:	str	r3, [sp, #0]
    14f0:	bne.n	1424 <loop+0xb48>
    14f2:	ldr	r3, [sp, #4]
    14f4:	ldr	r2, [sp, #32]
    14f6:	adds	r3, #1
    14f8:	adds	r2, #104	; 0x68
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    14fa:	cmp	r3, #28
    14fc:	str	r3, [sp, #4]
    14fe:	str	r2, [sp, #32]
    1500:	bne.n	1410 <loop+0xb34>
    1502:	ldr	r4, [pc, #108]	; (1570 <loop+0xc94>)
    1504:	add.w	r5, r4, #2704	; 0xa90
    1508:	sub.w	r3, r4, #2704	; 0xa90
    150c:	subw	r0, r4, #2600	; 0xa28
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1510:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    1512:	ldr.w	r1, [r2, #4]!
    1516:	str.w	r1, [r3, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    151a:	cmp	r0, r3
    151c:	bne.n	1512 <loop+0xc36>
    151e:	adds	r4, #104	; 0x68
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1520:	cmp	r5, r4
    1522:	bne.n	1508 <loop+0xc2c>
    1524:	ldr	r3, [pc, #60]	; (1564 <loop+0xc88>)
  } 
  
  if (millis() >= nextTime2){
    grow_automaton_A.iterate_growth();
    grow_automaton_B.iterate_growth();
    nextTime2 = millis() + (1000/FRAMERATE_GROW);  
    1526:	ldr	r2, [pc, #76]	; (1574 <loop+0xc98>)
    1528:	ldr	r3, [r3, #0]
    152a:	adds	r3, #100	; 0x64
    152c:	str	r3, [r2, #0]
    152e:	b.w	8fc <loop+0x20>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1532:	ldr	r3, [sp, #24]
    1534:	add	r5, r3
    1536:	ldr	r3, [sp, #0]
    1538:	str	r5, [r3, #0]
    153a:	b.n	138a <loop+0xaae>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    153c:	ldr	r3, [sp, #4]
    153e:	ldrb	r3, [r3, #0]
    1540:	eor.w	r3, r3, #1
    1544:	b.w	b04 <loop+0x228>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1548:	ldr	r3, [sp, #36]	; 0x24
    154a:	add	r5, r3
    154c:	str.w	r5, [ip]
    1550:	b.w	bf0 <loop+0x314>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1554:	ldr	r3, [sp, #24]
    1556:	add	r5, r3
    1558:	ldr	r3, [sp, #0]
    155a:	str	r5, [r3, #0]
    155c:	b.n	14d6 <loop+0xbfa>
    155e:	nop
    1560:	.word	0x2000ba7c
    1564:	.word	0x200158d8
    1568:	.word	0x200015bc
    156c:	.word	0x2000af64
    1570:	.word	0x20009a24
    1574:	.word	0x200015c0
    1578:	.word	0x2000a4c0
    157c:	.word	0x4ec4ec4f
    1580:	.word	0x20008f80
    1584:	ldr	r3, [sp, #24]
    1586:	add	r5, r3
    1588:	ldr	r3, [sp, #0]
    158a:	str	r5, [r3, #0]
    158c:	b.w	d54 <loop+0x478>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    1590:	ldr	r3, [sp, #8]
    1592:	ldrb	r3, [r3, #0]
    1594:	eor.w	r3, r3, #1
    1598:	b.n	e0a <loop+0x52e>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    159a:	ldr	r3, [sp, #40]	; 0x28
    159c:	add	r5, r3
    159e:	str.w	r5, [ip]
    15a2:	b.n	ed4 <loop+0x5f8>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    15a4:	ldr	r3, [sp, #4]
    15a6:	ldrb	r3, [r3, #0]
    15a8:	eor.w	r3, r3, #1
    15ac:	b.n	fa0 <loop+0x6c4>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    15ae:	ldr	r3, [sp, #36]	; 0x24
    15b0:	add	r5, r3
    15b2:	str.w	r5, [ip]
    15b6:	b.n	1058 <loop+0x77c>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    15b8:	ldr	r3, [sp, #24]
    15ba:	add	r5, r3
    15bc:	ldr	r3, [sp, #0]
    15be:	str	r5, [r3, #0]
    15c0:	b.n	11ba <loop+0x8de>
    15c2:	adds	r3, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    15c4:	cmp	r1, r3
    15c6:	bne.w	1216 <loop+0x93a>
    15ca:	ldr	r7, [pc, #440]	; (1784 <loop+0xea8>)
    15cc:	ldr.w	sl, [pc, #460]	; 179c <loop+0xec0>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    15d0:	add.w	r9, r7, #5408	; 0x1520
    15d4:	add.w	fp, r4, r4, lsl #1
    15d8:	mov	r8, r7
    15da:	movs	r6, #0
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    15dc:	ldr	r3, [pc, #424]	; (1788 <loop+0xeac>)
    15de:	ldrb	r2, [r3, #9]
    15e0:	ldr.w	r3, [sl]
      return _background[x][y];
    15e4:	add	r3, r6
    15e6:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    15e8:	cbnz	r2, 15ee <loop+0xd12>
      return _background[x][y];
    } else {
      return !_background[x][y];
    15ea:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    15ee:	cmp	r3, #0
    15f0:	bne.n	16d6 <loop+0xdfa>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    15f2:	adds	r6, #1
    15f4:	add.w	r8, r8, #4
    15f8:	cmp	r6, #26
    15fa:	bne.n	15dc <loop+0xd00>
    15fc:	adds	r4, #26
    15fe:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1600:	cmp.w	r4, #676	; 0x2a4
    1604:	bne.n	15d4 <loop+0xcf8>
    1606:	ldr	r7, [pc, #388]	; (178c <loop+0xeb0>)
    1608:	movs	r5, #0
    160a:	ldr.w	r8, [pc, #404]	; 17a0 <loop+0xec4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    160e:	add.w	r4, r7, #5408	; 0x1520
    1612:	add.w	fp, r5, r5, lsl #1
    1616:	mov	sl, r7
    1618:	mov.w	r9, #0
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    161c:	ldr	r3, [pc, #368]	; (1790 <loop+0xeb4>)
    161e:	ldrb	r2, [r3, #9]
    1620:	ldr.w	r3, [r8]
      return _background[x][y];
    1624:	add	r3, r9
    1626:	ldrb	r3, [r3, r5]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1628:	cbnz	r2, 162e <loop+0xd52>
      return _background[x][y];
    } else {
      return !_background[x][y];
    162a:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    162e:	cmp	r3, #0
    1630:	bne.n	172c <loop+0xe50>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1632:	add.w	r9, r9, #1
    1636:	add.w	sl, sl, #4
    163a:	cmp.w	r9, #26
    163e:	bne.n	161c <loop+0xd40>
    1640:	adds	r5, #26
    1642:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1644:	cmp.w	r5, #676	; 0x2a4
    1648:	bne.n	1612 <loop+0xd36>
    164a:	b.n	1246 <loop+0x96a>
    164c:	adds	r3, #104	; 0x68
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((value + 150) % 255, 100);
  }
  boolean allZero() {
    for (int x = 0; x < SIZE_SCREEN; x++) {
    164e:	cmp	r1, r3
    1650:	bne.w	124c <loop+0x970>
    1654:	ldr	r7, [pc, #308]	; (178c <loop+0xeb0>)
    1656:	ldr.w	r8, [pc, #328]	; 17a0 <loop+0xec4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    165a:	add.w	r5, r7, #5408	; 0x1520
    165e:	add.w	fp, r4, r4, lsl #1
    1662:	mov	sl, r7
    1664:	mov.w	r9, #0
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1668:	ldr	r3, [pc, #292]	; (1790 <loop+0xeb4>)
    166a:	ldrb	r2, [r3, #9]
    166c:	ldr.w	r3, [r8]
      return _background[x][y];
    1670:	add	r3, r9
    1672:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1674:	cbnz	r2, 167a <loop+0xd9e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    1676:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    167a:	cmp	r3, #0
    167c:	bne.n	1702 <loop+0xe26>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    167e:	add.w	r9, r9, #1
    1682:	add.w	sl, sl, #4
    1686:	cmp.w	r9, #26
    168a:	bne.n	1668 <loop+0xd8c>
    168c:	adds	r4, #26
    168e:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    1690:	cmp.w	r4, #676	; 0x2a4
    1694:	bne.n	165e <loop+0xd82>
    1696:	ldr	r7, [pc, #252]	; (1794 <loop+0xeb8>)
    1698:	movs	r5, #0
    169a:	ldr.w	sl, [pc, #264]	; 17a4 <loop+0xec8>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    169e:	add.w	r9, r7, #5408	; 0x1520
    16a2:	add.w	fp, r5, r5, lsl #1
    16a6:	mov	r8, r7
    16a8:	movs	r4, #0
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    16aa:	ldr	r3, [pc, #236]	; (1798 <loop+0xebc>)
    16ac:	ldrb	r2, [r3, #9]
    16ae:	ldr.w	r3, [sl]
      return _background[x][y];
    16b2:	add	r3, r5
    16b4:	ldrb	r3, [r3, r4]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    16b6:	cbnz	r2, 16bc <loop+0xde0>
      return _background[x][y];
    } else {
      return !_background[x][y];
    16b8:	eor.w	r3, r3, #1

    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    16bc:	cmp	r3, #0
    16be:	bne.n	1756 <loop+0xe7a>


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    16c0:	adds	r4, #1
    16c2:	add.w	r8, r8, #4
    16c6:	cmp	r4, #26
    16c8:	bne.n	16aa <loop+0xdce>
    16ca:	adds	r5, #26
    16cc:	adds	r7, #104	; 0x68
    }


    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    16ce:	cmp.w	r5, #676	; 0x2a4
    16d2:	bne.n	16a2 <loop+0xdc6>
    16d4:	b.n	1260 <loop+0x984>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16d6:	ldr	r3, [pc, #176]	; (1788 <loop+0xeac>)
    16d8:	ldr	r2, [pc, #172]	; (1788 <loop+0xeac>)
    16da:	ldrb	r1, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    16dc:	add.w	r3, r6, r6, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16e0:	ldrb	r0, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    16e2:	ldr.w	r2, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16e6:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    16e8:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16ea:	adds	r0, #2
    16ec:	ldrb	r5, [r2, r3]
    16ee:	bl	a2a4 <random(unsigned long)>
    16f2:	ldr	r3, [pc, #148]	; (1788 <loop+0xeac>)
    16f4:	ldrb	r3, [r3, #7]
    16f6:	subs	r3, r5, r3
    16f8:	adds	r3, #1
    16fa:	subs	r0, r3, r0
    16fc:	str.w	r0, [r8]
    1700:	b.n	15f2 <loop+0xd16>
    1702:	ldr	r3, [pc, #140]	; (1790 <loop+0xeb4>)
    1704:	ldr	r2, [pc, #136]	; (1790 <loop+0xeb4>)
    1706:	ldrb	r1, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1708:	add.w	r3, r9, r9, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    170c:	ldrb	r0, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    170e:	ldr	r2, [r5, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1710:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1712:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1714:	adds	r0, #2
    1716:	ldrb	r6, [r2, r3]
    1718:	bl	a2a4 <random(unsigned long)>
    171c:	ldr	r3, [pc, #112]	; (1790 <loop+0xeb4>)
    171e:	ldrb	r3, [r3, #7]
    1720:	subs	r3, r6, r3
    1722:	adds	r3, #1
    1724:	subs	r0, r3, r0
    1726:	str.w	r0, [sl]
    172a:	b.n	167e <loop+0xda2>
    172c:	ldr	r3, [pc, #96]	; (1790 <loop+0xeb4>)
    172e:	ldr	r2, [pc, #96]	; (1790 <loop+0xeb4>)
    1730:	ldrb	r1, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1732:	add.w	r3, r9, r9, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1736:	ldrb	r0, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1738:	ldr	r2, [r4, #0]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    173a:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    173c:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    173e:	adds	r0, #2
    1740:	ldrb	r6, [r2, r3]
    1742:	bl	a2a4 <random(unsigned long)>
    1746:	ldr	r3, [pc, #72]	; (1790 <loop+0xeb4>)
    1748:	ldrb	r3, [r3, #7]
    174a:	subs	r3, r6, r3
    174c:	adds	r3, #1
    174e:	subs	r0, r3, r0
    1750:	str.w	r0, [sl]
    1754:	b.n	1632 <loop+0xd56>
    1756:	ldr	r3, [pc, #64]	; (1798 <loop+0xebc>)
    1758:	ldr	r2, [pc, #60]	; (1798 <loop+0xebc>)
    175a:	ldrb	r1, [r3, #8]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    175c:	add.w	r3, r4, r4, lsl #1
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1760:	ldrb	r0, [r2, #7]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1762:	ldr.w	r2, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1766:	subs	r0, r1, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1768:	add	r2, fp
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    176a:	adds	r0, #2
    176c:	ldrb	r6, [r2, r3]
    176e:	bl	a2a4 <random(unsigned long)>
    1772:	ldr	r3, [pc, #36]	; (1798 <loop+0xebc>)
    1774:	ldrb	r3, [r3, #7]
    1776:	subs	r3, r6, r3
    1778:	adds	r3, #1
    177a:	subs	r0, r3, r0
    177c:	str.w	r0, [r8]
    1780:	b.n	16c0 <loop+0xde4>
    1782:	nop
    1784:	.word	0x2000f9f0
    1788:	.word	0x2000f9d8
    178c:	.word	0x2000ba18
    1790:	.word	0x2000ba00
    1794:	.word	0x2000cf58
    1798:	.word	0x2000cf40
    179c:	.word	0x20010f14
    17a0:	.word	0x2000cf3c
    17a4:	.word	0x2000e47c

000017a8 <_GLOBAL__sub_I_nextTime1>:
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17a8:	ldr	r3, [pc, #1008]	; (1b9c <_GLOBAL__sub_I_nextTime1+0x3f4>)
      _s = s;
      _b = b;
    17aa:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17ae:	movs	r0, #0
      _s = s;
      _b = b;
    17b0:	mov.w	ip, #207	; 0xcf
    17b4:	mov	r2, r3
  }

  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
  //interpolate_colors_A();
}
    17b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17ba:	strb	r1, [r3, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17bc:	mov.w	r1, #106	; 0x6a
      _s = s;
    17c0:	movs	r4, #2
      _b = b;
    17c2:	mov.w	fp, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17c6:	strb	r1, [r3, #3]
      _s = s;
    17c8:	mov.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17cc:	strb	r1, [r3, #18]
      _s = s;
      _b = b;
    17ce:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17d2:	mov.w	lr, #109	; 0x6d
    17d6:	strb	r0, [r3, #0]
      _s = s;
      _b = b;
    17d8:	strb	r1, [r3, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17da:	mov.w	r1, #85	; 0x55
    17de:	strb.w	lr, [r3, #21]
    17e2:	mov.w	sl, #131	; 0x83
    17e6:	strb	r1, [r3, #6]
      _s = s;
    17e8:	mov.w	r1, #5
    17ec:	strb	r0, [r3, #1]
    17ee:	movs	r7, #63	; 0x3f
    17f0:	strb	r1, [r3, #7]
      _b = b;
    17f2:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    17f6:	strb	r0, [r3, #9]
      _s = s;
    17f8:	movs	r6, #244	; 0xf4
      _b = b;
    17fa:	strb	r1, [r3, #8]
    17fc:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1800:	strb	r0, [r3, #10]
    1802:	movs	r5, #8
      _b = b;
    1804:	strb	r1, [r3, #14]
    1806:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    180a:	strb	r0, [r3, #12]
      _s = s;
      _b = b;
    180c:	mov.w	r9, #198	; 0xc6
    1810:	strb	r1, [r3, #17]
    1812:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1816:	strb	r0, [r3, #13]
    1818:	mov.w	lr, #14
      _b = b;
    181c:	strb	r1, [r3, #20]
    181e:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1822:	strb	r0, [r3, #15]
    1824:	sub	sp, #60	; 0x3c
      _s = s;
      _b = b;
    1826:	strb	r1, [r3, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1828:	mov.w	r1, #114	; 0x72
      _s = s;
    182c:	strb	r0, [r3, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    182e:	strb	r1, [r3, #24]
      _s = s;
    1830:	mov.w	r1, #20
    1834:	strb	r4, [r3, #4]
    1836:	strb	r1, [r3, #25]
      _b = b;
    1838:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    183c:	strb	r4, [r3, #19]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    183e:	movs	r4, #46	; 0x2e
      _s = s;
      _b = b;
    1840:	strb	r1, [r3, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1842:	mov.w	r1, #115	; 0x73
      _s = s;
      _b = b;
    1846:	strb.w	fp, [r3, #11]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    184a:	strb	r1, [r3, #27]
      _s = s;
    184c:	mov.w	r1, #26
    1850:	strb.w	r8, [r3, #22]
    1854:	strb	r1, [r3, #28]
      _b = b;
    1856:	mvn.w	r1, #119	; 0x77
    185a:	strb	r1, [r3, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    185c:	mvn.w	r1, #116	; 0x74
    1860:	strb	r1, [r3, #30]
      _s = s;
    1862:	mov.w	r1, #48	; 0x30
    1866:	strb	r1, [r3, #31]
      _b = b;
    1868:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    186c:	strb.w	r0, [r3, #57]	; 0x39
      _s = s;
      _b = b;
    1870:	strb.w	r1, [r3, #32]
    1874:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1878:	strb.w	r0, [r3, #58]	; 0x3a
      _b = b;
    187c:	strb.w	r1, [r3, #50]	; 0x32
    1880:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1884:	strb.w	r0, [r3, #60]	; 0x3c
      _s = s;
      _b = b;
    1888:	strb.w	r1, [r3, #53]	; 0x35
    188c:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1890:	strb.w	r0, [r3, #61]	; 0x3d
      _b = b;
    1894:	strb.w	r1, [r3, #59]	; 0x3b
    1898:	mov.w	r1, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    189c:	strb.w	r0, [r3, #63]	; 0x3f
      _s = s;
      _b = b;
    18a0:	strb.w	r1, [r3, #38]	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18a4:	mvn.w	r1, #117	; 0x75
      _s = s;
    18a8:	strb.w	r0, [r3, #64]	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18ac:	strb.w	r1, [r3, #33]	; 0x21
    18b0:	strb.w	r1, [r3, #54]	; 0x36
      _s = s;
    18b4:	mvn.w	r1, #70	; 0x46
    18b8:	strb.w	r7, [r3, #40]	; 0x28
      _b = b;
    18bc:	movs	r7, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    18be:	strb.w	r1, [r3, #34]	; 0x22
      _b = b;
    18c2:	mov.w	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    18c6:	strb.w	r6, [r3, #46]	; 0x2e
      _b = b;
    18ca:	movs	r6, #167	; 0xa7
    18cc:	strb.w	r1, [r3, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18d0:	mvn.w	r1, #121	; 0x79
      _s = s;
    18d4:	strb.w	r5, [r3, #55]	; 0x37
      _b = b;
    18d8:	movs	r5, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18da:	strb.w	r1, [r3, #36]	; 0x24
      _s = s;
    18de:	mvn.w	r1, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18e2:	strb.w	sl, [r3, #42]	; 0x2a
      _s = s;
    18e6:	strb.w	r1, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    18ea:	mvn.w	r1, #125	; 0x7d
    18ee:	strb.w	r1, [r3, #39]	; 0x27
    18f2:	strb.w	r1, [r3, #45]	; 0x2d
    18f6:	strb.w	r1, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    18fa:	mvn.w	r1, #122	; 0x7a
    18fe:	strb.w	r1, [r3, #41]	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1902:	mvn.w	r1, #83	; 0x53
    1906:	strb.w	r1, [r3, #43]	; 0x2b
      _b = b;
    190a:	mvn.w	r1, #45	; 0x2d
    190e:	strb.w	r1, [r3, #44]	; 0x2c
    1912:	mvn.w	r1, #33	; 0x21
    1916:	strb.w	r1, [r3, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    191a:	mvn.w	r1, #96	; 0x60
    191e:	strb.w	r1, [r3, #49]	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1922:	mvn.w	r1, #120	; 0x78
    1926:	strb.w	r1, [r3, #51]	; 0x33
      _s = s;
    192a:	mov.w	r1, #51	; 0x33
    192e:	strb.w	r1, [r3, #52]	; 0x34
      _b = b;
    1932:	mvn.w	r1, #9
    1936:	strb.w	r1, [r3, #56]	; 0x38
    193a:	mvn.w	r1, #3
    193e:	strb.w	r1, [r3, #62]	; 0x3e
    1942:	strb.w	r1, [r3, #65]	; 0x41
    1946:	strb.w	r1, [r3, #68]	; 0x44
    194a:	strb.w	r1, [r3, #71]	; 0x47
    194e:	strb.w	r1, [r3, #74]	; 0x4a
    1952:	strb.w	r1, [r3, #77]	; 0x4d
    1956:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    195a:	strb.w	r0, [r3, #66]	; 0x42
      _s = s;
      _b = b;
    195e:	strb.w	r1, [r3, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1962:	mov.w	r1, #5
    1966:	strb.w	r0, [r3, #67]	; 0x43
    196a:	strb.w	r1, [r3, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    196e:	mvn.w	r1, #116	; 0x74
    1972:	strb.w	r0, [r3, #69]	; 0x45
    1976:	strb.w	r1, [r3, #84]	; 0x54
      _s = s;
    197a:	mov.w	r1, #11
    197e:	strb.w	r0, [r3, #70]	; 0x46
    1982:	strb.w	r1, [r3, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1986:	mov.w	r1, #95	; 0x5f
    198a:	strb.w	r0, [r3, #72]	; 0x48
    198e:	strb.w	r1, [r3, #81]	; 0x51
      _s = s;
    1992:	mvn.w	r1, #118	; 0x76
    1996:	strb.w	r0, [r3, #73]	; 0x49
    199a:	strb.w	r1, [r3, #85]	; 0x55
      _b = b;
    199e:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19a2:	strb.w	r0, [r3, #75]	; 0x4b
      _s = s;
      _b = b;
    19a6:	strb.w	r1, [r3, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19aa:	mov.w	r1, #94	; 0x5e
      _s = s;
    19ae:	strb.w	r0, [r3, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19b2:	strb.w	r1, [r3, #87]	; 0x57
    19b6:	mov.w	r1, #96	; 0x60
    19ba:	strb.w	r0, [r3, #78]	; 0x4e
    19be:	strb.w	r1, [r3, #90]	; 0x5a
      _s = s;
      _b = b;
    19c2:	mvn.w	r1, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19c6:	strb.w	r0, [r3, #79]	; 0x4f
      _b = b;
    19ca:	strb.w	r1, [r3, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19ce:	mov.w	r1, #37	; 0x25
      _b = b;
    19d2:	strb.w	r9, [r3, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    19d6:	mov.w	r9, #3
    19da:	strb.w	r1, [r3, #94]	; 0x5e
      _b = b;
    19de:	mvn.w	r1, #99	; 0x63
    19e2:	strb.w	ip, [r3, #89]	; 0x59
    19e6:	mov.w	ip, #103	; 0x67
    19ea:	strb.w	r1, [r3, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19ee:	mov.w	r1, #60	; 0x3c
      _s = s;
    19f2:	strb.w	lr, [r3, #91]	; 0x5b
      _b = b;
    19f6:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    19fa:	strb.w	r1, [r3, #96]	; 0x60
      _s = s;
    19fe:	mov.w	r1, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a02:	strb.w	r4, [r3, #93]	; 0x5d
      _s = s;
      _b = b;
    1a06:	movs	r4, #253	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a08:	strb.w	r1, [r3, #97]	; 0x61
      _b = b;
    1a0c:	mov.w	r1, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a10:	strb.w	sl, [r3, #120]	; 0x78
      _s = s;
      _b = b;
    1a14:	strb.w	r1, [r3, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a18:	mvn.w	r1, #39	; 0x27
    1a1c:	strb.w	fp, [r3, #124]	; 0x7c
    1a20:	mov.w	fp, #44	; 0x2c
    1a24:	strb.w	r1, [r3, #103]	; 0x67
      _b = b;
    1a28:	mov.w	r1, #106	; 0x6a
    1a2c:	strb.w	r7, [r3, #110]	; 0x6e
    1a30:	movs	r7, #59	; 0x3b
    1a32:	strb.w	r1, [r3, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a36:	mov.w	r1, #95	; 0x5f
      _b = b;
    1a3a:	strb.w	r6, [r3, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1a3e:	movs	r6, #1
    1a40:	strb.w	r1, [r3, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a44:	mvn.w	r1, #116	; 0x74
      _s = s;
      _b = b;
    1a48:	strb.w	r5, [r3, #116]	; 0x74
    1a4c:	movs	r5, #214	; 0xd6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a4e:	strb.w	r1, [r3, #108]	; 0x6c
    1a52:	mvn.w	r1, #121	; 0x79
    1a56:	strb.w	r1, [r3, #111]	; 0x6f
      _s = s;
    1a5a:	mvn.w	r1, #3
    1a5e:	strb.w	r1, [r3, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a62:	mvn.w	r1, #122	; 0x7a
    1a66:	strb.w	r1, [r3, #117]	; 0x75
      _s = s;
    1a6a:	mov.w	r1, #106	; 0x6a
    1a6e:	strb.w	r1, [r3, #118]	; 0x76
      _b = b;
    1a72:	mvn.w	r1, #34	; 0x22
    1a76:	strb.w	r1, [r3, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1a7a:	mvn.w	r1, #125	; 0x7d
    1a7e:	strb.w	r1, [r3, #123]	; 0x7b
    1a82:	strb.w	r1, [r3, #126]	; 0x7e
    1a86:	strb.w	r1, [r3, #129]	; 0x81
    1a8a:	mov.w	r1, #105	; 0x69
    1a8e:	strb.w	r1, [r3, #99]	; 0x63
      _s = s;
    1a92:	mvn.w	r1, #69	; 0x45
    1a96:	strb.w	r1, [r3, #100]	; 0x64
      _b = b;
    1a9a:	mov.w	r1, #101	; 0x65
    1a9e:	strb.w	r1, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1aa2:	mov.w	r1, #118	; 0x76
    1aa6:	strb.w	r1, [r3, #102]	; 0x66
    1aaa:	mvn.w	r1, #43	; 0x2b
    1aae:	strb.w	r1, [r3, #105]	; 0x69
      _s = s;
      _b = b;
    1ab2:	mov.w	r1, #32
    1ab6:	strb.w	r1, [r3, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1aba:	mvn.w	r1, #104	; 0x68
    1abe:	strb.w	r1, [r3, #109]	; 0x6d
    1ac2:	mvn.w	r1, #5
    1ac6:	strb.w	r1, [r3, #112]	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1aca:	mvn.w	r1, #123	; 0x7b
    1ace:	strb.w	r1, [r3, #114]	; 0x72
      _s = s;
      _b = b;
    1ad2:	mvn.w	r1, #80	; 0x50
    1ad6:	strb.w	r1, [r3, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ada:	mvn.w	r1, #111	; 0x6f
    1ade:	strb.w	r1, [r3, #121]	; 0x79
      _b = b;
    1ae2:	mvn.w	r1, #29
    1ae6:	strb.w	r1, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1aea:	mvn.w	r1, #37	; 0x25
    1aee:	strb.w	r1, [r3, #127]	; 0x7f
      _b = b;
    1af2:	mvn.w	r1, #30
    1af6:	strb.w	r1, [r3, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1afa:	mvn.w	r1, #59	; 0x3b
    1afe:	strb.w	r1, [r3, #130]	; 0x82
      _b = b;
    1b02:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b06:	strb.w	sl, [r3, #132]	; 0x84
      _s = s;
      _b = b;
    1b0a:	strb.w	r1, [r3, #131]	; 0x83
    1b0e:	strb.w	r1, [r3, #137]	; 0x89
    1b12:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b16:	strb.w	r0, [r3, #138]	; 0x8a
      _s = s;
      _b = b;
    1b1a:	strb.w	r1, [r3, #140]	; 0x8c
    1b1e:	strb.w	r1, [r3, #143]	; 0x8f
    1b22:	strb.w	r1, [r3, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b26:	mov.w	r1, #113	; 0x71
      _s = s;
    1b2a:	strb.w	r0, [r3, #139]	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b2e:	strb.w	r1, [r3, #156]	; 0x9c
      _s = s;
      _b = b;
    1b32:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b36:	strb.w	r0, [r3, #141]	; 0x8d
      _s = s;
      _b = b;
    1b3a:	strb.w	r1, [r3, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b3e:	mov.w	r1, #51	; 0x33
      _s = s;
    1b42:	strb.w	r0, [r3, #142]	; 0x8e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b46:	strb.w	r1, [r3, #159]	; 0x9f
    1b4a:	mov.w	r1, #121	; 0x79
    1b4e:	strb.w	r0, [r3, #144]	; 0x90
    1b52:	strb.w	r1, [r3, #162]	; 0xa2
      _s = s;
    1b56:	mov.w	r1, #60	; 0x3c
    1b5a:	strb.w	r0, [r3, #145]	; 0x91
    1b5e:	strb.w	r1, [r3, #163]	; 0xa3
    1b62:	mov.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b66:	strb.w	r0, [r3, #147]	; 0x93
      _s = s;
    1b6a:	strb.w	r1, [r3, #136]	; 0x88
    1b6e:	mov.w	r1, #87	; 0x57
    1b72:	strb.w	r0, [r3, #148]	; 0x94
    1b76:	strb.w	r1, [r3, #133]	; 0x85
      _b = b;
    1b7a:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b7e:	strb.w	r0, [r3, #150]	; 0x96
      _s = s;
      _b = b;
    1b82:	strb.w	r1, [r3, #134]	; 0x86
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b86:	mvn.w	r1, #107	; 0x6b
      _s = s;
    1b8a:	strb.w	r0, [r3, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b8e:	strb.w	r1, [r3, #135]	; 0x87
      _s = s;
      _b = b;
    1b92:	mov.w	r1, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1b96:	strb.w	r0, [r3, #153]	; 0x99
    1b9a:	b.n	1ba0 <_GLOBAL__sub_I_nextTime1+0x3f8>
    1b9c:	.word	0x20006a68
      _s = s;
    1ba0:	strb.w	r0, [r3, #154]	; 0x9a
    1ba4:	strb.w	r8, [r3, #160]	; 0xa0
    1ba8:	mov.w	r8, #90	; 0x5a
    1bac:	strb.w	r9, [r3, #157]	; 0x9d
      _b = b;
    1bb0:	mov.w	r9, #240	; 0xf0
    1bb4:	strb.w	r4, [r3, #146]	; 0x92
    1bb8:	strb.w	r4, [r3, #149]	; 0x95
    1bbc:	strb.w	r4, [r3, #152]	; 0x98
    1bc0:	strb.w	lr, [r3, #161]	; 0xa1
    1bc4:	strb.w	r1, [r3, #164]	; 0xa4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bc8:	mov.w	r1, #32
      _s = s;
      _b = b;
    1bcc:	strb.w	r7, [r3, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bd0:	strb.w	r1, [r3, #165]	; 0xa5
      _s = s;
      _b = b;
    1bd4:	mov.w	r1, #123	; 0x7b
    1bd8:	strb.w	r7, [r3, #194]	; 0xc2
    1bdc:	strb.w	r1, [r3, #173]	; 0xad
    1be0:	mov.w	r1, #85	; 0x55
    1be4:	strb.w	r1, [r3, #176]	; 0xb0
    1be8:	mvn.w	r1, #118	; 0x76
    1bec:	strb.w	r1, [r3, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1bf0:	mov.w	r1, #121	; 0x79
    1bf4:	strb.w	r1, [r3, #180]	; 0xb4
    1bf8:	mvn.w	r1, #39	; 0x27
    1bfc:	strb.w	r1, [r3, #183]	; 0xb7
      _s = s;
    1c00:	mvn.w	r1, #104	; 0x68
    1c04:	strb.w	r1, [r3, #187]	; 0xbb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c08:	mvn.w	r1, #118	; 0x76
    1c0c:	strb.w	r1, [r3, #189]	; 0xbd
      _s = s;
    1c10:	mvn.w	r1, #32
    1c14:	strb.w	r1, [r3, #190]	; 0xbe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c18:	mvn.w	r1, #119	; 0x77
    1c1c:	strb.w	r1, [r3, #192]	; 0xc0
    1c20:	mvn.w	r1, #123	; 0x7b
    1c24:	strb.w	r1, [r3, #195]	; 0xc3
      _s = s;
    1c28:	mvn.w	r1, #117	; 0x75
    1c2c:	strb.w	r1, [r3, #196]	; 0xc4
      _b = b;
    1c30:	mov.w	r1, #30
    1c34:	strb.w	r1, [r3, #185]	; 0xb9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c38:	mvn.w	r1, #82	; 0x52
    1c3c:	strb.w	r1, [r3, #166]	; 0xa6
      _b = b;
    1c40:	mvn.w	r1, #105	; 0x69
    1c44:	strb.w	r1, [r3, #167]	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c48:	mov.w	r1, #54	; 0x36
    1c4c:	strb.w	r1, [r3, #168]	; 0xa8
      _s = s;
    1c50:	mov.w	r1, #97	; 0x61
    1c54:	strb.w	r1, [r3, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c58:	strb.w	r1, [r3, #177]	; 0xb1
      _s = s;
      _b = b;
    1c5c:	mov.w	r1, #120	; 0x78
    1c60:	strb.w	r1, [r3, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c64:	mov.w	r1, #25
    1c68:	strb.w	r1, [r3, #171]	; 0xab
      _s = s;
    1c6c:	mvn.w	r1, #67	; 0x43
    1c70:	strb.w	r1, [r3, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1c74:	mov.w	r1, #28
    1c78:	strb.w	r1, [r3, #174]	; 0xae
      _s = s;
    1c7c:	mvn.w	r1, #93	; 0x5d
    1c80:	strb.w	r1, [r3, #175]	; 0xaf
    1c84:	strb.w	r1, [r3, #181]	; 0xb5
    1c88:	mvn.w	r1, #81	; 0x51
    1c8c:	strb.w	r1, [r3, #178]	; 0xb2
      _b = b;
    1c90:	mvn.w	r1, #101	; 0x65
    1c94:	strb.w	r1, [r3, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1c98:	mov.w	r1, #93	; 0x5d
    1c9c:	strb.w	r1, [r3, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ca0:	mvn.w	r1, #112	; 0x70
    1ca4:	strb.w	r1, [r3, #186]	; 0xba
      _s = s;
      _b = b;
    1ca8:	mov.w	r1, #57	; 0x39
    1cac:	strb.w	r1, [r3, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cb0:	mvn.w	r1, #22
    1cb4:	strb.w	r1, [r3, #193]	; 0xc1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cb8:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    1cbc:	strb.w	ip, [r3, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cc0:	mov.w	ip, #31
    1cc4:	strb.w	r1, [r3, #198]	; 0xc6
      _s = s;
    1cc8:	mov.w	r1, #57	; 0x39
      _b = b;
    1ccc:	strb.w	lr, [r3, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1cd0:	strb.w	r1, [r3, #199]	; 0xc7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cd4:	mvn.w	r1, #125	; 0x7d
    1cd8:	strb.w	r0, [r3, #222]	; 0xde
    1cdc:	strb.w	r1, [r3, #201]	; 0xc9
      _s = s;
      _b = b;
    1ce0:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ce4:	strb.w	r0, [r3, #223]	; 0xdf
      _b = b;
    1ce8:	strb.w	r1, [r3, #203]	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cec:	mvn.w	r1, #125	; 0x7d
      _s = s;
      _b = b;
    1cf0:	strb.w	r4, [r3, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1cf4:	strb.w	r1, [r3, #204]	; 0xcc
    1cf8:	mvn.w	r1, #122	; 0x7a
    1cfc:	strb.w	r0, [r3, #225]	; 0xe1
    1d00:	strb.w	r1, [r3, #207]	; 0xcf
    1d04:	mvn.w	r1, #112	; 0x70
      _s = s;
    1d08:	strb.w	r0, [r3, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d0c:	strb.w	r1, [r3, #210]	; 0xd2
    1d10:	mvn.w	r1, #96	; 0x60
      _s = s;
      _b = b;
    1d14:	strb.w	r4, [r3, #227]	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d18:	strb.w	r1, [r3, #213]	; 0xd5
    1d1c:	mvn.w	r1, #105	; 0x69
    1d20:	strb.w	r0, [r3, #228]	; 0xe4
    1d24:	strb.w	r1, [r3, #216]	; 0xd8
      _s = s;
    1d28:	mov.w	r1, #26
    1d2c:	strb.w	r0, [r3, #229]	; 0xe5
    1d30:	strb.w	r1, [r3, #217]	; 0xd9
      _b = b;
    1d34:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d38:	strb.w	fp, [r3, #211]	; 0xd3
      _b = b;
    1d3c:	mov.w	fp, #170	; 0xaa
    1d40:	strb.w	r1, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d44:	mvn.w	r1, #65	; 0x41
      _b = b;
    1d48:	strb.w	r5, [r3, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d4c:	movs	r5, #193	; 0xc1
    1d4e:	strb.w	r1, [r3, #202]	; 0xca
    1d52:	mvn.w	r1, #51	; 0x33
    1d56:	strb.w	r6, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d5a:	movs	r6, #22
      _s = s;
    1d5c:	strb.w	r1, [r3, #205]	; 0xcd
      _b = b;
    1d60:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d64:	strb.w	r8, [r3, #208]	; 0xd0
      _b = b;
    1d68:	strb.w	r1, [r3, #206]	; 0xce
    1d6c:	mvn.w	r1, #21
    1d70:	strb.w	r1, [r3, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1d74:	mov.w	r1, #35	; 0x23
    1d78:	strb.w	r1, [r3, #214]	; 0xd6
      _b = b;
    1d7c:	mvn.w	r1, #74	; 0x4a
    1d80:	strb.w	r1, [r3, #215]	; 0xd7
    1d84:	mvn.w	r1, #66	; 0x42
    1d88:	strb.w	r1, [r3, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d8c:	mov.w	r1, #127	; 0x7f
    1d90:	strb.w	r1, [r3, #219]	; 0xdb
      _s = s;
      _b = b;
    1d94:	mvn.w	r1, #3
    1d98:	strb.w	r4, [r3, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1d9c:	movs	r4, #55	; 0x37
      _s = s;
      _b = b;
    1d9e:	strb.w	r1, [r3, #233]	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1da2:	mov.w	r1, #106	; 0x6a
      _s = s;
      _b = b;
    1da6:	strb.w	lr, [r3, #242]	; 0xf2
    1daa:	mov.w	lr, #169	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dae:	strb.w	r1, [r3, #234]	; 0xea
      _s = s;
      _b = b;
    1db2:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1db6:	strb.w	r0, [r3, #231]	; 0xe7
      _s = s;
      _b = b;
    1dba:	strb.w	r1, [r3, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dbe:	mvn.w	r1, #82	; 0x52
    1dc2:	strb.w	r0, [r3, #232]	; 0xe8
    1dc6:	strb.w	r1, [r3, #241]	; 0xf1
      _b = b;
    1dca:	mvn.w	r1, #67	; 0x43
    1dce:	strb.w	r9, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dd2:	mov.w	r9, #17
      _b = b;
    1dd6:	strb.w	r1, [r3, #248]	; 0xf8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dda:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1dde:	strb.w	ip, [r3, #240]	; 0xf0
      _s = s;
    1de2:	strb.w	r1, [r3, #250]	; 0xfa
      _b = b;
    1de6:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1dea:	strb.w	r5, [r3, #247]	; 0xf7
      _b = b;
    1dee:	strb.w	r1, [r3, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1df2:	mov.w	r1, #77	; 0x4d
    1df6:	strb.w	r6, [r3, #249]	; 0xf9
    1dfa:	strb.w	r1, [r3, #255]	; 0xff
      _s = s;
    1dfe:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e02:	strb.w	r4, [r3, #252]	; 0xfc
      _s = s;
    1e06:	strb.w	r1, [r3, #259]	; 0x103
      _b = b;
    1e0a:	mvn.w	r1, #74	; 0x4a
    1e0e:	strb.w	fp, [r3, #254]	; 0xfe
    1e12:	strb.w	r1, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e16:	mvn.w	r1, #43	; 0x2b
      _s = s;
    1e1a:	strb.w	fp, [r3, #256]	; 0x100
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e1e:	mov.w	fp, #149	; 0x95
    1e22:	strb.w	r1, [r3, #261]	; 0x105
      _s = s;
    1e26:	mov.w	r1, #87	; 0x57
      _b = b;
    1e2a:	strb.w	lr, [r3, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e2e:	strb.w	r1, [r3, #262]	; 0x106
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e32:	mov.w	r1, #33	; 0x21
    1e36:	strb.w	r1, [r3, #243]	; 0xf3
      _s = s;
    1e3a:	mov.w	r1, #66	; 0x42
    1e3e:	strb.w	r1, [r3, #235]	; 0xeb
      _b = b;
    1e42:	mvn.w	r1, #110	; 0x6e
    1e46:	strb.w	r1, [r3, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e4a:	mov.w	r1, #102	; 0x66
    1e4e:	strb.w	r1, [r3, #237]	; 0xed
      _s = s;
    1e52:	mov.w	r1, #72	; 0x48
    1e56:	strb.w	r1, [r3, #238]	; 0xee
    1e5a:	mvn.w	r1, #113	; 0x71
    1e5e:	strb.w	r1, [r3, #244]	; 0xf4
    1e62:	strb.w	r1, [r3, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e66:	mov.w	r1, #29
    1e6a:	strb.w	r1, [r3, #246]	; 0xf6
    1e6e:	mov.w	r1, #112	; 0x70
    1e72:	strb.w	r1, [r3, #258]	; 0x102
      _s = s;
      _b = b;
    1e76:	mov.w	r1, #32
    1e7a:	strb.w	r8, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1e7e:	mov.w	r8, #69	; 0x45
      _b = b;
    1e82:	strb.w	r1, [r3, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e86:	mvn.w	r1, #125	; 0x7d
      _s = s;
    1e8a:	strb.w	r4, [r3, #283]	; 0x11b
    1e8e:	movs	r4, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1e90:	strb.w	r1, [r3, #264]	; 0x108
    1e94:	mvn.w	r1, #117	; 0x75
      _s = s;
    1e98:	strb.w	r9, [r3, #286]	; 0x11e
      _b = b;
    1e9c:	mov.w	r9, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ea0:	strb.w	r1, [r3, #267]	; 0x10b
    1ea4:	mvn.w	r1, #120	; 0x78
    1ea8:	strb.w	fp, [r3, #294]	; 0x126
    1eac:	mov.w	fp, #146	; 0x92
    1eb0:	strb.w	r1, [r3, #270]	; 0x10e
    1eb4:	mvn.w	r1, #118	; 0x76
      _s = s;
      _b = b;
    1eb8:	strb.w	r5, [r3, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ebc:	strb.w	r1, [r3, #273]	; 0x111
      _s = s;
    1ec0:	mvn.w	r1, #30
    1ec4:	strb.w	r4, [r3, #271]	; 0x10f
    1ec8:	strb.w	r1, [r3, #274]	; 0x112
      _b = b;
    1ecc:	mov.w	r1, #51	; 0x33
    1ed0:	strb.w	r4, [r3, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1ed4:	movs	r4, #215	; 0xd7
      _b = b;
    1ed6:	strb.w	r1, [r3, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1eda:	mvn.w	r1, #123	; 0x7b
      _s = s;
    1ede:	strb.w	r8, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ee2:	strb.w	r1, [r3, #276]	; 0x114
    1ee6:	mvn.w	r1, #122	; 0x7a
      _s = s;
    1eea:	strb.w	r8, [r3, #289]	; 0x121
      _b = b;
    1eee:	mov.w	r8, #209	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ef2:	strb.w	r1, [r3, #279]	; 0x117
      _s = s;
    1ef6:	mov.w	r1, #48	; 0x30
      _b = b;
    1efa:	strb.w	r9, [r3, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1efe:	strb.w	r1, [r3, #280]	; 0x118
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f02:	mvn.w	r1, #119	; 0x77
    1f06:	strb.w	fp, [r3, #288]	; 0x120
    1f0a:	strb.w	r1, [r3, #282]	; 0x11a
    1f0e:	mvn.w	r1, #120	; 0x78
    1f12:	strb.w	fp, [r3, #291]	; 0x123
    1f16:	strb.w	r1, [r3, #285]	; 0x11d
      _s = s;
    1f1a:	mov.w	r1, #72	; 0x48
    1f1e:	strb.w	r1, [r3, #292]	; 0x124
      _b = b;
    1f22:	mvn.w	r1, #52	; 0x34
    1f26:	strb.w	r1, [r3, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f2a:	mov.w	r1, #35	; 0x23
    1f2e:	strb.w	r1, [r3, #295]	; 0x127
      _b = b;
    1f32:	mov.w	r1, #71	; 0x47
    1f36:	strb.w	r1, [r3, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f3a:	mov.w	r1, #34	; 0x22
    1f3e:	strb.w	r1, [r3, #265]	; 0x109
      _b = b;
    1f42:	mov.w	r1, #110	; 0x6e
    1f46:	strb.w	r1, [r3, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f4a:	mvn.w	r1, #108	; 0x6c
    1f4e:	strb.w	r1, [r3, #268]	; 0x10c
      _b = b;
    1f52:	mov.w	r1, #99	; 0x63
    1f56:	strb.w	r1, [r3, #278]	; 0x116
    1f5a:	mvn.w	r1, #54	; 0x36
    1f5e:	strb.w	r1, [r3, #290]	; 0x122
    1f62:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f66:	strb.w	r7, [r3, #301]	; 0x12d
      _b = b;
    1f6a:	strb.w	r1, [r3, #299]	; 0x12b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f6e:	mov.w	r1, #66	; 0x42
    1f72:	strb.w	r7, [r3, #316]	; 0x13c
      _b = b;
    1f76:	movs	r7, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f78:	strb.w	r1, [r3, #298]	; 0x12a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f7c:	mvn.w	r1, #123	; 0x7b
    1f80:	strb.w	ip, [r3, #321]	; 0x141
      _s = s;
    1f84:	mov.w	ip, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f88:	strb.w	r1, [r3, #300]	; 0x12c
      _s = s;
      _b = b;
    1f8c:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1f90:	strb.w	r4, [r3, #319]	; 0x13f
      _b = b;
    1f94:	movs	r4, #183	; 0xb7
    1f96:	strb.w	r1, [r3, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1f9a:	mvn.w	r1, #111	; 0x6f
      _s = s;
      _b = b;
    1f9e:	strb.w	r8, [r3, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fa2:	strb.w	r1, [r3, #303]	; 0x12f
      _s = s;
    1fa6:	mov.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1faa:	strb.w	sl, [r3, #297]	; 0x129
      _s = s;
    1fae:	strb.w	r1, [r3, #304]	; 0x130
      _b = b;
    1fb2:	mvn.w	r1, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fb6:	strb.w	r0, [r3, #306]	; 0x132
      _s = s;
      _b = b;
    1fba:	strb.w	r1, [r3, #305]	; 0x131
    1fbe:	mvn.w	r1, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    1fc2:	strb.w	r0, [r3, #307]	; 0x133
      _b = b;
    1fc6:	strb.w	r1, [r3, #308]	; 0x134
    1fca:	strb.w	r1, [r3, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fce:	mvn.w	r1, #32
    1fd2:	strb.w	r0, [r3, #309]	; 0x135
    1fd6:	strb.w	r1, [r3, #312]	; 0x138
    1fda:	mov.w	r1, #77	; 0x4d
      _s = s;
    1fde:	strb.w	r0, [r3, #310]	; 0x136
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1fe2:	strb.w	r1, [r3, #315]	; 0x13b
    1fe6:	mov.w	r1, #34	; 0x22
      _s = s;
    1fea:	strb.w	ip, [r3, #313]	; 0x139
    1fee:	mov.w	ip, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ff2:	strb.w	r1, [r3, #318]	; 0x13e
      _s = s;
      _b = b;
    1ff6:	mvn.w	r1, #22
    1ffa:	strb.w	r7, [r3, #314]	; 0x13a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    1ffe:	movs	r7, #88	; 0x58
      _s = s;
      _b = b;
    2000:	strb.w	r1, [r3, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2004:	mvn.w	r1, #112	; 0x70
    2008:	strb.w	r1, [r3, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    200c:	mov.w	r1, #28
    2010:	strb.w	r1, [r3, #324]	; 0x144
      _s = s;
    2014:	mvn.w	r1, #59	; 0x3b
    2018:	strb.w	r1, [r3, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    201c:	mov.w	r1, #20
    2020:	strb.w	r1, [r3, #327]	; 0x147
      _s = s;
    2024:	mvn.w	r1, #120	; 0x78
    2028:	strb.w	r1, [r3, #328]	; 0x148
      _b = b;
    202c:	mvn.w	r1, #49	; 0x31
    2030:	strb.w	r1, [r3, #317]	; 0x13d
    2034:	mvn.w	r1, #31
    2038:	strb.w	r1, [r3, #323]	; 0x143
    203c:	mvn.w	r1, #54	; 0x36
    2040:	strb.w	r4, [r3, #326]	; 0x146
    2044:	strb.w	r1, [r3, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2048:	mov.w	r1, #29
      _s = s;
      _b = b;
    204c:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2050:	strb.w	r1, [r3, #330]	; 0x14a
      _s = s;
    2054:	mvn.w	r1, #96	; 0x60
      _b = b;
    2058:	strb.w	lr, [r3, #356]	; 0x164
    205c:	mov.w	lr, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2060:	strb.w	r1, [r3, #331]	; 0x14b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2064:	mov.w	r1, #112	; 0x70
      _s = s;
    2068:	strb.w	r5, [r3, #361]	; 0x169
    206c:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    206e:	strb.w	r1, [r3, #336]	; 0x150
      _s = s;
    2072:	mov.w	r1, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2076:	strb.w	r7, [r3, #333]	; 0x14d
      _s = s;
    207a:	movs	r7, #61	; 0x3d
    207c:	strb.w	r1, [r3, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2080:	mov.w	r1, #123	; 0x7b
      _s = s;
    2084:	strb.w	r6, [r3, #340]	; 0x154
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2088:	strb.w	r1, [r3, #339]	; 0x153
      _s = s;
      _b = b;
    208c:	mvn.w	r1, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2090:	strb.w	r6, [r3, #343]	; 0x157
      _b = b;
    2094:	strb.w	r1, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2098:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    209c:	strb.w	lr, [r3, #344]	; 0x158
    20a0:	mov.w	lr, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20a4:	strb.w	r1, [r3, #342]	; 0x156
    20a8:	mvn.w	r1, #125	; 0x7d
      _s = s;
    20ac:	strb.w	r5, [r3, #358]	; 0x166
      _b = b;
    20b0:	movs	r5, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20b2:	strb.w	r1, [r3, #345]	; 0x159
    20b6:	mvn.w	r1, #123	; 0x7b
      _s = s;
    20ba:	strb.w	r7, [r3, #334]	; 0x14e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20be:	strb.w	r1, [r3, #348]	; 0x15c
      _s = s;
    20c2:	mvn.w	r1, #4
    20c6:	strb.w	r7, [r3, #346]	; 0x15a
    20ca:	movs	r7, #76	; 0x4c
    20cc:	strb.w	r1, [r3, #349]	; 0x15d
      _b = b;
    20d0:	mvn.w	r1, #112	; 0x70
    20d4:	strb.w	r1, [r3, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    20d8:	mov.w	r1, #115	; 0x73
    20dc:	strb.w	r1, [r3, #352]	; 0x160
      _b = b;
    20e0:	mvn.w	r1, #102	; 0x66
    20e4:	strb.w	r1, [r3, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20e8:	mov.w	r1, #127	; 0x7f
    20ec:	strb.w	r1, [r3, #354]	; 0x162
      _s = s;
    20f0:	mov.w	r1, #57	; 0x39
    20f4:	strb.w	r1, [r3, #355]	; 0x163
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    20f8:	mvn.w	r1, #123	; 0x7b
    20fc:	strb.w	r1, [r3, #357]	; 0x165
      _s = s;
      _b = b;
    2100:	mvn.w	r1, #118	; 0x76
    2104:	strb.w	r1, [r3, #359]	; 0x167
    2108:	mvn.w	r1, #61	; 0x3d
    210c:	strb.w	r1, [r3, #335]	; 0x14f
    2110:	mvn.w	r1, #78	; 0x4e
    2114:	strb.w	r1, [r3, #338]	; 0x152
    2118:	mvn.w	r1, #73	; 0x49
    211c:	strb.w	r1, [r3, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2120:	mov.w	r1, #125	; 0x7d
    2124:	strb.w	r1, [r3, #351]	; 0x15f
    2128:	mvn.w	r1, #114	; 0x72
    212c:	strb.w	r1, [r3, #360]	; 0x168
      _s = s;
      _b = b;
    2130:	mov.w	r1, #121	; 0x79
    2134:	strb.w	r4, [r3, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2138:	movs	r4, #92	; 0x5c
      _b = b;
    213a:	strb.w	r1, [r3, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    213e:	mov.w	r1, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2142:	strb.w	r0, [r3, #387]	; 0x183
      _s = s;
    2146:	strb.w	r1, [r3, #367]	; 0x16f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    214a:	mvn.w	r1, #112	; 0x70
      _s = s;
    214e:	strb.w	r0, [r3, #388]	; 0x184
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2152:	movs	r0, #155	; 0x9b
    2154:	strb.w	r1, [r3, #363]	; 0x16b
      _s = s;
    2158:	mov.w	r1, #115	; 0x73
      _b = b;
    215c:	strb.w	lr, [r3, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2160:	mov.w	lr, #192	; 0xc0
    2164:	strb.w	r1, [r3, #364]	; 0x16c
      _b = b;
    2168:	mvn.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    216c:	strb.w	r7, [r3, #391]	; 0x187
      _b = b;
    2170:	movs	r7, #243	; 0xf3
    2172:	strb.w	r1, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2176:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    217a:	strb.w	r5, [r3, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    217e:	movs	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2180:	strb.w	r1, [r3, #366]	; 0x16e
      _s = s;
      _b = b;
    2184:	mvn.w	r1, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2188:	strb.w	sl, [r3, #378]	; 0x17a
      _s = s;
      _b = b;
    218c:	strb.w	r1, [r3, #371]	; 0x173
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2190:	mvn.w	r1, #122	; 0x7a
      _s = s;
    2194:	strb.w	ip, [r3, #373]	; 0x175
      _b = b;
    2198:	mov.w	ip, #184	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    219c:	strb.w	r1, [r3, #372]	; 0x174
    21a0:	mvn.w	r1, #123	; 0x7b
      _s = s;
    21a4:	strb.w	r4, [r3, #394]	; 0x18a
      _b = b;
    21a8:	movs	r4, #160	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21aa:	strb.w	r1, [r3, #375]	; 0x177
      _s = s;
    21ae:	mov.w	r1, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21b2:	strb.w	r0, [r3, #369]	; 0x171
      _s = s;
    21b6:	strb.w	r1, [r3, #376]	; 0x178
    21ba:	mvn.w	r1, #79	; 0x4f
      _b = b;
    21be:	strb.w	r7, [r3, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21c2:	strb.w	r1, [r3, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21c6:	mvn.w	r1, #122	; 0x7a
      _s = s;
    21ca:	strb.w	lr, [r3, #382]	; 0x17e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21ce:	strb.w	r1, [r3, #381]	; 0x17d
    21d2:	strb.w	r1, [r3, #384]	; 0x180
      _s = s;
      _b = b;
    21d6:	mvn.w	r1, #43	; 0x2b
    21da:	strb.w	lr, [r3, #383]	; 0x17f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    21de:	mov.w	lr, #178	; 0xb2
      _b = b;
    21e2:	strb.w	r1, [r3, #386]	; 0x182
    21e6:	mvn.w	r1, #5
    21ea:	strb.w	r1, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    21ee:	mvn.w	r1, #37	; 0x25
    21f2:	strb.w	r1, [r3, #390]	; 0x186
    21f6:	mov.w	r1, #101	; 0x65
    21fa:	strb.w	r1, [r3, #393]	; 0x189
      _s = s;
    21fe:	mov.w	r1, #45	; 0x2d
    2202:	strb.w	r1, [r3, #370]	; 0x172
      _b = b;
    2206:	mvn.w	r1, #23
    220a:	strb.w	r1, [r3, #380]	; 0x17c
    220e:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2212:	strb.w	r5, [r3, #385]	; 0x181
      _b = b;
    2216:	strb.w	r1, [r3, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    221a:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    221e:	strb.w	r6, [r3, #399]	; 0x18f
    2222:	movs	r6, #21
      _s = s;
    2224:	strb.w	r1, [r3, #400]	; 0x190
      _b = b;
    2228:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    222c:	strb.w	r7, [r3, #403]	; 0x193
      _b = b;
    2230:	movs	r7, #70	; 0x46
    2232:	strb.w	r1, [r3, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2236:	mvn.w	r1, #4
      _b = b;
    223a:	strb.w	r8, [r3, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    223e:	mov.w	r8, #40	; 0x28
      _s = s;
    2242:	strb.w	r1, [r3, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2246:	mov.w	r1, #54	; 0x36
      _s = s;
      _b = b;
    224a:	strb.w	r0, [r3, #425]	; 0x1a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    224e:	movs	r0, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2250:	strb.w	r1, [r3, #408]	; 0x198
      _s = s;
      _b = b;
    2254:	mvn.w	r1, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2258:	strb.w	r6, [r3, #402]	; 0x192
      _s = s;
    225c:	movs	r6, #166	; 0xa6
      _b = b;
    225e:	strb.w	r1, [r3, #410]	; 0x19a
    2262:	mov.w	r1, #127	; 0x7f
    2266:	strb.w	r4, [r3, #395]	; 0x18b
    226a:	strb.w	r1, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    226e:	mov.w	r1, #95	; 0x5f
    2272:	strb.w	r5, [r3, #405]	; 0x195
    2276:	strb.w	r1, [r3, #414]	; 0x19e
      _s = s;
    227a:	mov.w	r1, #87	; 0x57
      _b = b;
    227e:	strb.w	fp, [r3, #422]	; 0x1a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2282:	strb.w	r1, [r3, #415]	; 0x19f
      _b = b;
    2286:	mov.w	r1, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    228a:	strb.w	r8, [r3, #396]	; 0x18c
    228e:	mvn.w	r8, #125	; 0x7d
      _s = s;
      _b = b;
    2292:	strb.w	r1, [r3, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2296:	mov.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    229a:	strb.w	ip, [r3, #404]	; 0x194
    229e:	mov.w	ip, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22a2:	strb.w	r1, [r3, #417]	; 0x1a1
      _s = s;
    22a6:	mov.w	r1, #105	; 0x69
    22aa:	strb.w	lr, [r3, #412]	; 0x19c
      _b = b;
    22ae:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22b2:	strb.w	r1, [r3, #418]	; 0x1a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22b6:	mov.w	r1, #127	; 0x7f
      _s = s;
      _b = b;
    22ba:	strb.w	r7, [r3, #419]	; 0x1a3
    22be:	movs	r7, #229	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22c0:	strb.w	r1, [r3, #420]	; 0x1a4
    22c4:	mvn.w	r1, #123	; 0x7b
      _s = s;
    22c8:	strb.w	r0, [r3, #421]	; 0x1a5
    22cc:	movs	r0, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ce:	strb.w	r1, [r3, #423]	; 0x1a7
      _s = s;
    22d2:	mvn.w	r1, #83	; 0x53
    22d6:	strb.w	r6, [r3, #397]	; 0x18d
    22da:	strb.w	r1, [r3, #424]	; 0x1a8
    22de:	mov.w	r1, #72	; 0x48
    22e2:	strb.w	r6, [r3, #409]	; 0x199
      _b = b;
    22e6:	movs	r6, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    22e8:	strb.w	r1, [r3, #427]	; 0x1ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    22ec:	mov.w	r1, #111	; 0x6f
    22f0:	strb.w	r1, [r3, #411]	; 0x19b
    22f4:	mov.w	r1, #126	; 0x7e
    22f8:	strb.w	r1, [r3, #426]	; 0x1aa
      _s = s;
      _b = b;
    22fc:	mvn.w	r1, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2300:	strb.w	r8, [r3, #453]	; 0x1c5
      _s = s;
    2304:	mvn.w	r8, #78	; 0x4e
      _b = b;
    2308:	strb.w	r1, [r3, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    230c:	mvn.w	r1, #123	; 0x7b
      _s = s;
    2310:	strb.w	r8, [r3, #454]	; 0x1c6
      _b = b;
    2314:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2318:	strb.w	r1, [r3, #429]	; 0x1ad
      _s = s;
    231c:	mov.w	r1, #57	; 0x39
      _b = b;
    2320:	strb.w	r8, [r3, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2324:	mov.w	r8, #138	; 0x8a
      _s = s;
    2328:	strb.w	r1, [r3, #430]	; 0x1ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    232c:	mvn.w	r1, #116	; 0x74
    2330:	str.w	r8, [sp, #8]
      _s = s;
    2334:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2338:	strb.w	r1, [r3, #432]	; 0x1b0
      _s = s;
    233c:	mov.w	r1, #99	; 0x63
    2340:	strb.w	r8, [r3, #457]	; 0x1c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2344:	mvn.w	r8, #123	; 0x7b
      _s = s;
    2348:	strb.w	r1, [r3, #433]	; 0x1b1
      _b = b;
    234c:	mvn.w	r1, #28
    2350:	strb.w	lr, [r3, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2354:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    2358:	strb.w	r1, [r3, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    235c:	mvn.w	r1, #117	; 0x75
    2360:	strb.w	r8, [r3, #459]	; 0x1cb
      _s = s;
    2364:	mvn.w	r8, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2368:	strb.w	r1, [r3, #435]	; 0x1b3
      _s = s;
    236c:	mov.w	r1, #95	; 0x5f
      _b = b;
    2370:	strb.w	r9, [r3, #431]	; 0x1af
    2374:	mov.w	r9, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2378:	strb.w	r1, [r3, #436]	; 0x1b4
      _b = b;
    237c:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2380:	strb.w	sl, [r3, #450]	; 0x1c2
      _s = s;
      _b = b;
    2384:	strb.w	r1, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2388:	mvn.w	r1, #122	; 0x7a
    238c:	str.w	lr, [sp, #4]
      _s = s;
      _b = b;
    2390:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2394:	strb.w	r1, [r3, #438]	; 0x1b6
      _s = s;
    2398:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    239c:	strb.w	sl, [r3, #456]	; 0x1c8
      _s = s;
    23a0:	strb.w	r1, [r3, #439]	; 0x1b7
      _b = b;
    23a4:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    23a8:	strb.w	r8, [r3, #460]	; 0x1cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23ac:	mvn.w	r8, #116	; 0x74
      _s = s;
      _b = b;
    23b0:	strb.w	r1, [r3, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23b4:	mvn.w	r1, #116	; 0x74
    23b8:	strb.w	r1, [r3, #441]	; 0x1b9
      _s = s;
    23bc:	mov.w	r1, #98	; 0x62
    23c0:	strb.w	r1, [r3, #442]	; 0x1ba
      _b = b;
    23c4:	mvn.w	r1, #69	; 0x45
    23c8:	strb.w	r1, [r3, #443]	; 0x1bb
    23cc:	mov.w	r1, #114	; 0x72
    23d0:	strb.w	r1, [r3, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23d4:	mvn.w	r1, #108	; 0x6c
    23d8:	strb.w	r1, [r3, #447]	; 0x1bf
      _s = s;
    23dc:	mov.w	r1, #34	; 0x22
    23e0:	strb.w	r1, [r3, #448]	; 0x1c0
    23e4:	mov.w	r1, #73	; 0x49
    23e8:	strb.w	r1, [r3, #451]	; 0x1c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23ec:	movs	r1, #137	; 0x89
    23ee:	str	r1, [sp, #0]
      _s = s;
    23f0:	mvn.w	r1, #110	; 0x6e
      _b = b;
    23f4:	strb.w	r7, [r3, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    23f8:	mvn.w	r7, #115	; 0x73
    23fc:	strb.w	r4, [r3, #468]	; 0x1d4
      _s = s;
      _b = b;
    2400:	mvn.w	r4, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2404:	strb.w	r8, [r3, #465]	; 0x1d1
      _s = s;
    2408:	mov.w	r8, #29
      _b = b;
    240c:	strb.w	r4, [r3, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2410:	mov.w	r4, #106	; 0x6a
      _s = s;
    2414:	strb.w	r8, [r3, #466]	; 0x1d2
    2418:	mov.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    241c:	strb.w	r4, [r3, #477]	; 0x1dd
      _s = s;
    2420:	mov.w	r4, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2424:	strb.w	r7, [r3, #444]	; 0x1bc
      _s = s;
    2428:	strb.w	r4, [r3, #478]	; 0x1de
      _b = b;
    242c:	mvn.w	r4, #30
    2430:	strb.w	r7, [r3, #449]	; 0x1c1
    2434:	mvn.w	r7, #55	; 0x37
    2438:	strb.w	r4, [r3, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    243c:	mvn.w	r4, #102	; 0x66
    2440:	strb.w	r8, [r3, #469]	; 0x1d5
    2444:	mov.w	r8, #123	; 0x7b
    2448:	strb.w	r4, [r3, #481]	; 0x1e1
      _b = b;
    244c:	mvn.w	r4, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2450:	strb.w	r0, [r3, #445]	; 0x1bd
      _b = b;
    2454:	strb.w	r4, [r3, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2458:	movs	r4, #97	; 0x61
      _b = b;
    245a:	strb.w	r7, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    245e:	mvn.w	r7, #122	; 0x7a
    2462:	strb.w	r0, [r3, #471]	; 0x1d7
      _s = s;
    2466:	strb.w	r8, [r3, #472]	; 0x1d8
      _b = b;
    246a:	mvn.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    246e:	str	r4, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2470:	mov.w	r4, #112	; 0x70
    2474:	strb.w	r0, [r3, #486]	; 0x1e6
      _s = s;
    2478:	mvn.w	r0, #34	; 0x22
    247c:	strb.w	r1, [r3, #490]	; 0x1ea
      _b = b;
    2480:	mov.w	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2484:	strb.w	r7, [r3, #462]	; 0x1ce
      _s = s;
      _b = b;
    2488:	mvn.w	r7, #74	; 0x4a
    248c:	strb.w	r8, [r3, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2490:	mov.w	r8, #114	; 0x72
    2494:	strb.w	r4, [r3, #483]	; 0x1e3
      _s = s;
    2498:	mov.w	r4, #118	; 0x76
    249c:	strb.w	r0, [r3, #487]	; 0x1e7
      _b = b;
    24a0:	mov.w	r0, #120	; 0x78
    24a4:	strb.w	r1, [r3, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24a8:	mov.w	r1, #105	; 0x69
      _s = s;
      _b = b;
    24ac:	strb.w	r7, [r3, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24b0:	mov.w	r7, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24b4:	strb.w	r8, [r3, #474]	; 0x1da
      _s = s;
    24b8:	mov.w	r8, #96	; 0x60
    24bc:	strb.w	r4, [r3, #484]	; 0x1e4
      _b = b;
    24c0:	movs	r4, #232	; 0xe8
    24c2:	strb.w	r0, [r3, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24c6:	mov.w	r0, #98	; 0x62
    24ca:	strb.w	r1, [r3, #492]	; 0x1ec
      _s = s;
      _b = b;
    24ce:	movs	r1, #177	; 0xb1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24d0:	strb.w	r8, [r3, #475]	; 0x1db
    24d4:	mov.w	r8, #252	; 0xfc
      _b = b;
    24d8:	str	r4, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24da:	movs	r4, #142	; 0x8e
    24dc:	strb.w	r0, [r3, #489]	; 0x1e9
    24e0:	movs	r0, #140	; 0x8c
      _s = s;
      _b = b;
    24e2:	str	r1, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    24e4:	mvn.w	r1, #103	; 0x67
    24e8:	strb.w	r7, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24ec:	mvn.w	r7, #52	; 0x34
      _s = s;
    24f0:	strb.w	r1, [r3, #463]	; 0x1cf
      _b = b;
    24f4:	mvn.w	r1, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    24f8:	strb.w	r7, [r3, #495]	; 0x1ef
      _s = s;
    24fc:	mov.w	r7, #95	; 0x5f
      _b = b;
    2500:	strb.w	r1, [r3, #467]	; 0x1d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2504:	mov.w	r1, #38	; 0x26
      _s = s;
    2508:	strb.w	r7, [r3, #496]	; 0x1f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    250c:	mov.w	r7, #121	; 0x79
      _s = s;
      _b = b;
    2510:	strb.w	r9, [r3, #470]	; 0x1d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2514:	mov.w	r9, #132	; 0x84
    2518:	strb.w	r7, [r3, #498]	; 0x1f2
      _s = s;
    251c:	mvn.w	r7, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2520:	strb.w	r1, [r3, #480]	; 0x1e0
      _s = s;
      _b = b;
    2524:	movs	r1, #130	; 0x82
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2526:	strb.w	r7, [r3, #499]	; 0x1f3
      _b = b;
    252a:	mov.w	r7, #106	; 0x6a
    252e:	strb.w	r6, [r3, #485]	; 0x1e5
    2532:	strb.w	r7, [r3, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2536:	mvn.w	r7, #73	; 0x49
      _b = b;
    253a:	strb.w	ip, [r3, #494]	; 0x1ee
    253e:	mov.w	ip, #220	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2542:	strb.w	r7, [r3, #502]	; 0x1f6
      _b = b;
    2546:	mvn.w	r7, #80	; 0x50
    254a:	strb.w	r5, [r3, #497]	; 0x1f1
    254e:	strb.w	r7, [r3, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2552:	ldrb.w	r7, [sp]
    2556:	strb.w	sl, [r3, #501]	; 0x1f5
    255a:	strb.w	r7, [r3, #504]	; 0x1f8
      _s = s;
    255e:	mvn.w	r7, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2562:	strb.w	r4, [r3, #507]	; 0x1fb
      _s = s;
    2566:	strb.w	r7, [r3, #505]	; 0x1f9
      _b = b;
    256a:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    256e:	strb.w	fp, [r3, #510]	; 0x1fe
      _s = s;
      _b = b;
    2572:	strb.w	r7, [r3, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2576:	mvn.w	r7, #45	; 0x2d
    257a:	strb.w	r7, [r3, #508]	; 0x1fc
      _b = b;
    257e:	strb.w	r7, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2582:	mvn.w	r7, #110	; 0x6e
    2586:	strb.w	r7, [r3, #511]	; 0x1ff
      _b = b;
    258a:	mvn.w	r7, #37	; 0x25
    258e:	strb.w	r7, [r3, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2592:	ldrb.w	r7, [sp, #4]
    2596:	strb.w	r7, [r3, #513]	; 0x201
      _s = s;
    259a:	mvn.w	r7, #112	; 0x70
    259e:	strb.w	r7, [r3, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25a2:	mvn.w	r7, #111	; 0x6f
    25a6:	strb.w	r7, [r3, #516]	; 0x204
      _s = s;
    25aa:	mvn.w	r7, #81	; 0x51
    25ae:	strb.w	r7, [r3, #517]	; 0x205
      _b = b;
    25b2:	mvn.w	r7, #31
    25b6:	strb.w	r7, [r3, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25ba:	mvn.w	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25be:	strb.w	fp, [r3, #519]	; 0x207
      _s = s;
      _b = b;
    25c2:	mvn.w	fp, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25c6:	strb.w	r7, [r3, #520]	; 0x208
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25ca:	ldrb.w	r7, [sp, #8]
      _s = s;
      _b = b;
    25ce:	strb.w	fp, [r3, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25d2:	mov.w	fp, #127	; 0x7f
    25d6:	strb.w	r7, [r3, #522]	; 0x20a
      _s = s;
      _b = b;
    25da:	mvn.w	r7, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    25de:	strb.w	fp, [r3, #549]	; 0x225
      _s = s;
      _b = b;
    25e2:	mvn.w	fp, #67	; 0x43
    25e6:	strb.w	r7, [r3, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25ea:	mov.w	r7, #37	; 0x25
      _b = b;
    25ee:	strb.w	fp, [r3, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    25f2:	mvn.w	fp, #34	; 0x22
    25f6:	strb.w	r7, [r3, #526]	; 0x20e
    25fa:	mov.w	r7, #79	; 0x4f
      _b = b;
    25fe:	strb.w	lr, [r3, #515]	; 0x203
    2602:	mov.w	lr, #230	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2606:	strb.w	r7, [r3, #523]	; 0x20b
      _b = b;
    260a:	mvn.w	r7, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    260e:	strb.w	sl, [r3, #540]	; 0x21c
      _s = s;
      _b = b;
    2612:	strb.w	r7, [r3, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2616:	mov.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    261a:	strb.w	r1, [r3, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    261e:	strb.w	r7, [r3, #525]	; 0x20d
      _s = s;
      _b = b;
    2622:	mvn.w	r7, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2626:	strb.w	r1, [r3, #546]	; 0x222
      _s = s;
      _b = b;
    262a:	strb.w	r7, [r3, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    262e:	mov.w	r7, #113	; 0x71
      _s = s;
    2632:	strb.w	sl, [r3, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2636:	strb.w	r7, [r3, #528]	; 0x210
      _s = s;
      _b = b;
    263a:	mvn.w	r7, #43	; 0x2b
    263e:	strb.w	r7, [r3, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2642:	mov.w	r7, #121	; 0x79
    2646:	strb.w	r7, [r3, #531]	; 0x213
      _s = s;
    264a:	mov.w	r7, #126	; 0x7e
    264e:	strb.w	r7, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2652:	strb.w	r7, [r3, #534]	; 0x216
      _s = s;
    2656:	mvn.w	r7, #58	; 0x3a
    265a:	strb.w	r7, [r3, #535]	; 0x217
      _b = b;
    265e:	mvn.w	r7, #65	; 0x41
    2662:	strb.w	r7, [r3, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2666:	mov.w	r7, #127	; 0x7f
    266a:	strb.w	r7, [r3, #537]	; 0x219
      _s = s;
    266e:	mvn.w	r7, #107	; 0x6b
    2672:	strb.w	r7, [r3, #538]	; 0x21a
      _b = b;
    2676:	ldrb.w	r7, [sp, #12]
    267a:	strb.w	r7, [r3, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    267e:	mov.w	r7, #125	; 0x7d
    2682:	strb.w	r7, [r3, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2686:	mvn.w	r7, #120	; 0x78
    268a:	strb.w	r7, [r3, #543]	; 0x21f
      _s = s;
    268e:	ldrb.w	r7, [sp, #20]
    2692:	strb.w	r7, [r3, #547]	; 0x223
      _b = b;
    2696:	movs	r7, #161	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2698:	strb.w	sl, [r3, #552]	; 0x228
      _s = s;
    269c:	strb.w	fp, [r3, #553]	; 0x229
      _b = b;
    26a0:	mvn.w	fp, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26a4:	strb.w	r8, [r3, #559]	; 0x22f
      _b = b;
    26a8:	strb.w	fp, [r3, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26ac:	mvn.w	fp, #120	; 0x78
    26b0:	strb.w	r6, [r3, #570]	; 0x23a
    26b4:	strb.w	fp, [r3, #555]	; 0x22b
      _s = s;
    26b8:	mvn.w	fp, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26bc:	strb.w	r6, [r3, #573]	; 0x23d
    26c0:	movs	r6, #133	; 0x85
      _s = s;
    26c2:	strb.w	fp, [r3, #556]	; 0x22c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26c6:	mvn.w	fp, #120	; 0x78
      _s = s;
      _b = b;
    26ca:	strb.w	r5, [r3, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26ce:	movs	r5, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26d0:	strb.w	fp, [r3, #558]	; 0x22e
      _s = s;
    26d4:	mov	fp, r8
    26d6:	mov.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    26da:	strb.w	r6, [r3, #579]	; 0x243
      _s = s;
    26de:	strb.w	r8, [r3, #529]	; 0x211
      _b = b;
    26e2:	mvn.w	r8, #42	; 0x2a
    26e6:	strb.w	r8, [r3, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    26ea:	mov.w	r8, #82	; 0x52
    26ee:	strb.w	r8, [r3, #544]	; 0x220
      _b = b;
    26f2:	mvn.w	r8, #53	; 0x35
    26f6:	strb.w	r8, [r3, #557]	; 0x22d
    26fa:	mvn.w	r8, #47	; 0x2f
    26fe:	strb.w	r8, [r3, #533]	; 0x215
    2702:	mvn.w	r8, #52	; 0x34
    2706:	strb.w	r8, [r3, #560]	; 0x230
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    270a:	mvn.w	r8, #119	; 0x77
    270e:	strb.w	r8, [r3, #561]	; 0x231
      _s = s;
    2712:	mvn.w	r8, #5
    2716:	strb.w	r8, [r3, #562]	; 0x232
      _b = b;
    271a:	ldrb.w	r8, [sp, #12]
    271e:	strb.w	r8, [r3, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2722:	mov.w	r8, #111	; 0x6f
    2726:	strb.w	r8, [r3, #564]	; 0x234
      _s = s;
    272a:	mvn.w	r8, #104	; 0x68
    272e:	strb.w	r8, [r3, #565]	; 0x235
      _b = b;
    2732:	mvn.w	r8, #119	; 0x77
    2736:	strb.w	r8, [r3, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    273a:	mov.w	r8, #99	; 0x63
    273e:	strb.w	r8, [r3, #567]	; 0x237
      _s = s;
    2742:	mov.w	r8, #114	; 0x72
    2746:	strb.w	r8, [r3, #568]	; 0x238
      _b = b;
    274a:	mov.w	r8, #60	; 0x3c
    274e:	strb.w	r8, [r3, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2752:	mov.w	r8, #106	; 0x6a
    2756:	strb.w	r8, [r3, #571]	; 0x23b
    275a:	mov.w	r8, #102	; 0x66
    275e:	strb.w	r8, [r3, #574]	; 0x23e
      _b = b;
    2762:	mov.w	r8, #25
    2766:	strb.w	r8, [r3, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    276a:	mov.w	r8, #127	; 0x7f
    276e:	strb.w	r8, [r3, #576]	; 0x240
      _s = s;
    2772:	mov.w	r8, #115	; 0x73
    2776:	strb.w	r8, [r3, #577]	; 0x241
      _b = b;
    277a:	mov.w	r8, #121	; 0x79
    277e:	strb.w	r8, [r3, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2782:	mvn.w	r8, #61	; 0x3d
    2786:	strb.w	r8, [r3, #580]	; 0x244
      _b = b;
    278a:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    278e:	str.w	fp, [sp, #24]
      _b = b;
    2792:	strb.w	r8, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2796:	mvn.w	r8, #111	; 0x6f
      _s = s;
    279a:	strb.w	fp, [r3, #583]	; 0x247
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    279e:	mov.w	fp, #134	; 0x86
    27a2:	strb.w	r8, [r3, #582]	; 0x246
      _s = s;
      _b = b;
    27a6:	mvn.w	r8, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27aa:	strb.w	r4, [r3, #585]	; 0x249
      _s = s;
      _b = b;
    27ae:	strb.w	r8, [r3, #584]	; 0x248
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27b2:	mov.w	r8, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27b6:	strb.w	r0, [r3, #588]	; 0x24c
      _s = s;
    27ba:	strb.w	r8, [r3, #586]	; 0x24a
    27be:	mov.w	r8, #114	; 0x72
      _b = b;
    27c2:	strb.w	ip, [r3, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27c6:	strb.w	r8, [r3, #589]	; 0x24d
      _b = b;
    27ca:	ldrb.w	r8, [sp, #28]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27ce:	strb.w	r0, [r3, #594]	; 0x252
      _s = s;
      _b = b;
    27d2:	strb.w	r8, [r3, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27d6:	mvn.w	r8, #116	; 0x74
    27da:	strb.w	r0, [r3, #597]	; 0x255
    27de:	strb.w	r8, [r3, #591]	; 0x24f
      _s = s;
    27e2:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27e6:	strb.w	r4, [r3, #600]	; 0x258
      _s = s;
    27ea:	strb.w	r8, [r3, #592]	; 0x250
      _b = b;
    27ee:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27f2:	strb.w	r1, [r3, #601]	; 0x259
      _b = b;
    27f6:	strb.w	r8, [r3, #593]	; 0x251
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    27fa:	mov.w	r8, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    27fe:	strb.w	r6, [r3, #603]	; 0x25b
      _s = s;
    2802:	movs	r6, #215	; 0xd7
    2804:	strb.w	r8, [r3, #595]	; 0x253
    2808:	mov.w	r8, #110	; 0x6e
      _b = b;
    280c:	strb.w	r0, [r3, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2810:	strb.w	r8, [r3, #598]	; 0x256
      _b = b;
    2814:	mvn.w	r8, #58	; 0x3a
    2818:	strb.w	r8, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    281c:	mov.w	r8, #110	; 0x6e
    2820:	strb.w	r8, [r3, #606]	; 0x25e
      _s = s;
    2824:	mov.w	r8, #93	; 0x5d
    2828:	strb.w	r8, [r3, #607]	; 0x25f
      _b = b;
    282c:	mvn.w	r8, #116	; 0x74
    2830:	strb.w	r8, [r3, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2834:	mov.w	r8, #120	; 0x78
    2838:	strb.w	r8, [r3, #609]	; 0x261
    283c:	strb.w	r8, [r3, #612]	; 0x264
      _s = s;
    2840:	mov.w	r8, #124	; 0x7c
    2844:	strb.w	r8, [r3, #613]	; 0x265
      _b = b;
    2848:	mvn.w	r8, #93	; 0x5d
    284c:	strb.w	r8, [r3, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2850:	mov.w	r8, #126	; 0x7e
    2854:	strb.w	r8, [r3, #615]	; 0x267
      _s = s;
    2858:	mov.w	r8, #115	; 0x73
    285c:	strb.w	r8, [r3, #616]	; 0x268
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2860:	mov.w	r8, #123	; 0x7b
      _s = s;
      _b = b;
    2864:	strb.w	r7, [r3, #617]	; 0x269
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2868:	strb.w	r8, [r3, #618]	; 0x26a
      _s = s;
      _b = b;
    286c:	mvn.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2870:	strb.w	r7, [r3, #642]	; 0x282
      _s = s;
      _b = b;
    2874:	mvn.w	r7, #120	; 0x78
    2878:	strb.w	r8, [r3, #620]	; 0x26c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    287c:	mov.w	r8, #20
      _b = b;
    2880:	strb.w	r7, [r3, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2884:	mov.w	r7, #119	; 0x77
    2888:	strb.w	r8, [r3, #622]	; 0x26e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    288c:	mov.w	r8, #120	; 0x78
      _s = s;
    2890:	strb.w	r7, [r3, #646]	; 0x286
    2894:	mov.w	r7, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2898:	strb.w	r8, [r3, #624]	; 0x270
      _s = s;
    289c:	mov.w	r8, #45	; 0x2d
      _b = b;
    28a0:	strb.w	lr, [r3, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28a4:	strb.w	r8, [r3, #625]	; 0x271
      _b = b;
    28a8:	mvn.w	r8, #19
    28ac:	strb.w	lr, [r3, #602]	; 0x25a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28b0:	mov.w	lr, #141	; 0x8d
      _s = s;
      _b = b;
    28b4:	strb.w	r8, [r3, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28b8:	mov.w	r8, #78	; 0x4e
    28bc:	strb.w	r7, [r3, #649]	; 0x289
      _b = b;
    28c0:	mov.w	r7, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28c4:	strb.w	r8, [r3, #604]	; 0x25c
    28c8:	mov.w	r8, #122	; 0x7a
      _b = b;
    28cc:	strb.w	ip, [r3, #623]	; 0x26f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28d0:	strb.w	r8, [r3, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28d4:	mvn.w	r8, #126	; 0x7e
    28d8:	strb.w	lr, [r3, #651]	; 0x28b
    28dc:	strb.w	r8, [r3, #621]	; 0x26d
      _s = s;
    28e0:	mov.w	r8, #42	; 0x2a
      _b = b;
    28e4:	strb.w	r7, [r3, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28e8:	movs	r7, #183	; 0xb7
      _s = s;
    28ea:	strb.w	r8, [r3, #619]	; 0x26b
      _b = b;
    28ee:	mvn.w	r8, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    28f2:	strb.w	lr, [r3, #654]	; 0x28e
      _s = s;
      _b = b;
    28f6:	strb.w	r8, [r3, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    28fa:	mvn.w	r8, #45	; 0x2d
    28fe:	strb.w	ip, [r3, #655]	; 0x28f
    2902:	strb.w	r8, [r3, #658]	; 0x292
      _b = b;
    2906:	mvn.w	r8, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    290a:	strb.w	lr, [r3, #657]	; 0x291
    290e:	mvn.w	lr, #120	; 0x78
      _s = s;
      _b = b;
    2912:	strb.w	r8, [r3, #638]	; 0x27e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2916:	ldrb.w	r8, [sp, #8]
    291a:	strb.w	r1, [r3, #627]	; 0x273
    291e:	strb.w	r8, [r3, #639]	; 0x27f
      _s = s;
      _b = b;
    2922:	mvn.w	r8, #111	; 0x6f
    2926:	strb.w	r8, [r3, #641]	; 0x281
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    292a:	mov.w	r8, #1
    292e:	strb.w	r8, [r3, #648]	; 0x288
      _s = s;
      _b = b;
    2932:	mov.w	r8, #112	; 0x70
    2936:	strb.w	r8, [r3, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    293a:	mvn.w	r8, #55	; 0x37
    293e:	strb.w	r8, [r3, #628]	; 0x274
      _b = b;
    2942:	mvn.w	r8, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2946:	strb.w	r5, [r3, #643]	; 0x283
      _b = b;
    294a:	strb.w	r8, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    294e:	mvn.w	r8, #8
      _b = b;
    2952:	strb.w	r5, [r3, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2956:	movs	r5, #137	; 0x89
      _s = s;
    2958:	strb.w	r8, [r3, #631]	; 0x277
      _b = b;
    295c:	mvn.w	r8, #119	; 0x77
    2960:	strb.w	ip, [r3, #662]	; 0x296
    2964:	mov.w	ip, #232	; 0xe8
    2968:	strb.w	r8, [r3, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    296c:	mvn.w	r8, #5
    2970:	strb.w	r4, [r3, #661]	; 0x295
    2974:	strb.w	r8, [r3, #634]	; 0x27a
      _b = b;
    2978:	mvn.w	r8, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    297c:	strb.w	r4, [r3, #672]	; 0x2a0
    2980:	movs	r4, #138	; 0x8a
      _s = s;
      _b = b;
    2982:	strb.w	r8, [r3, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2986:	mvn.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    298a:	strb.w	r9, [r3, #630]	; 0x276
      _s = s;
    298e:	strb.w	r8, [r3, #637]	; 0x27d
    2992:	mvn.w	r8, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2996:	strb.w	sl, [r3, #633]	; 0x279
      _s = s;
    299a:	strb.w	r8, [r3, #640]	; 0x280
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    299e:	mvn.w	r8, #15
    29a2:	strb.w	sl, [r3, #636]	; 0x27c
    29a6:	strb.w	r8, [r3, #645]	; 0x285
      _s = s;
      _b = b;
    29aa:	mvn.w	r8, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29ae:	strb.w	r9, [r3, #652]	; 0x28c
      _b = b;
    29b2:	strb.w	r8, [r3, #656]	; 0x290
    29b6:	mvn.w	r8, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29ba:	strb.w	r5, [r3, #660]	; 0x294
      _s = s;
      _b = b;
    29be:	strb.w	r8, [r3, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29c2:	mvn.w	r8, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29c6:	strb.w	lr, [r3, #663]	; 0x297
      _s = s;
      _b = b;
    29ca:	mov.w	lr, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29ce:	strb.w	r8, [r3, #667]	; 0x29b
    29d2:	mvn.w	r8, #81	; 0x51
      _b = b;
    29d6:	strb.w	ip, [r3, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29da:	strb.w	r8, [r3, #670]	; 0x29e
      _b = b;
    29de:	mvn.w	r8, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29e2:	strb.w	r5, [r3, #669]	; 0x29d
    29e6:	movs	r5, #150	; 0x96
      _s = s;
      _b = b;
    29e8:	strb.w	r8, [r3, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    29ec:	mvn.w	r8, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29f0:	strb.w	r0, [r3, #675]	; 0x2a3
      _s = s;
    29f4:	strb.w	r8, [r3, #673]	; 0x2a1
      _b = b;
    29f8:	mvn.w	r8, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    29fc:	strb.w	r4, [r3, #678]	; 0x2a6
      _s = s;
      _b = b;
    2a00:	strb.w	r8, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a04:	mov.w	r8, #114	; 0x72
      _b = b;
    2a08:	strb.w	ip, [r3, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a0c:	mov.w	ip, #133	; 0x85
    2a10:	strb.w	r4, [r3, #681]	; 0x2a9
      _s = s;
    2a14:	mvn.w	r4, #92	; 0x5c
    2a18:	strb.w	r8, [r3, #682]	; 0x2aa
      _b = b;
    2a1c:	mvn.w	r8, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a20:	strb.w	r6, [r3, #685]	; 0x2ad
    2a24:	movs	r6, #177	; 0xb1
      _b = b;
    2a26:	strb.w	r8, [r3, #668]	; 0x29c
    2a2a:	mvn.w	r8, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a2e:	strb.w	ip, [r3, #705]	; 0x2c1
      _s = s;
      _b = b;
    2a32:	strb.w	r8, [r3, #674]	; 0x2a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a36:	strb.w	r8, [r3, #687]	; 0x2af
    2a3a:	strb.w	r8, [r3, #690]	; 0x2b2
      _s = s;
    2a3e:	mvn.w	r8, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a42:	strb.w	ip, [r3, #708]	; 0x2c4
      _s = s;
      _b = b;
    2a46:	mvn.w	ip, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a4a:	strb.w	r8, [r3, #676]	; 0x2a4
    2a4e:	mov.w	r8, #86	; 0x56
      _b = b;
    2a52:	strb.w	ip, [r3, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a56:	mvn.w	ip, #116	; 0x74
      _s = s;
    2a5a:	strb.w	r8, [r3, #679]	; 0x2a7
      _b = b;
    2a5e:	mvn.w	r8, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a62:	strb.w	r6, [r3, #715]	; 0x2cb
      _b = b;
    2a66:	strb.w	r8, [r3, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a6a:	mov.w	r8, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a6e:	strb.w	r6, [r3, #720]	; 0x2d0
      _s = s;
    2a72:	mvn.w	r6, #66	; 0x42
    2a76:	strb.w	r8, [r3, #688]	; 0x2b0
      _b = b;
    2a7a:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a7e:	strb.w	r1, [r3, #684]	; 0x2ac
      _s = s;
      _b = b;
    2a82:	strb.w	r8, [r3, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a86:	mov.w	r8, #90	; 0x5a
      _b = b;
    2a8a:	strb.w	lr, [r3, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2a8e:	strb.w	r8, [r3, #691]	; 0x2b3
      _b = b;
    2a92:	mov.w	r8, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2a96:	strb.w	fp, [r3, #666]	; 0x29a
    2a9a:	mov.w	fp, #143	; 0x8f
      _s = s;
      _b = b;
    2a9e:	strb.w	r8, [r3, #692]	; 0x2b4
    2aa2:	mov.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2aa6:	strb.w	r4, [r3, #664]	; 0x298
    2aaa:	movs	r4, #246	; 0xf6
      _b = b;
    2aac:	strb.w	r8, [r3, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ab0:	mov.w	r8, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ab4:	strb.w	lr, [r3, #696]	; 0x2b8
      _s = s;
    2ab8:	mov.w	lr, #71	; 0x47
    2abc:	strb.w	r8, [r3, #697]	; 0x2b9
      _b = b;
    2ac0:	mov.w	r8, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ac4:	strb.w	r9, [r3, #711]	; 0x2c7
      _s = s;
      _b = b;
    2ac8:	mov.w	r9, #20
    2acc:	strb.w	r8, [r3, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ad0:	mov.w	r8, #120	; 0x78
    2ad4:	strb.w	ip, [r3, #714]	; 0x2ca
    2ad8:	mov.w	ip, #120	; 0x78
    2adc:	strb.w	r8, [r3, #699]	; 0x2bb
      _s = s;
      _b = b;
    2ae0:	mvn.w	r8, #38	; 0x26
    2ae4:	strb.w	r8, [r3, #701]	; 0x2bd
    2ae8:	mvn.w	r8, #29
    2aec:	strb.w	r8, [r3, #704]	; 0x2c0
    2af0:	ldrb.w	r8, [sp, #24]
    2af4:	strb.w	r8, [r3, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2af8:	mov.w	r8, #115	; 0x73
    2afc:	strb.w	r6, [r3, #721]	; 0x2d1
    2b00:	movs	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b02:	strb.w	r7, [r3, #723]	; 0x2d3
    2b06:	mvn.w	r7, #51	; 0x33
      _s = s;
    2b0a:	strb.w	r8, [r3, #724]	; 0x2d4
    2b0e:	mov.w	r8, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b12:	strb.w	r7, [r3, #693]	; 0x2b5
    2b16:	mov.w	r7, #95	; 0x5f
      _s = s;
    2b1a:	strb.w	r1, [r3, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b1e:	mvn.w	r1, #120	; 0x78
    2b22:	strb.w	r7, [r3, #702]	; 0x2be
      _s = s;
    2b26:	mov.w	r7, #87	; 0x57
    2b2a:	strb.w	r8, [r3, #694]	; 0x2b6
    2b2e:	mov.w	r8, #34	; 0x22
    2b32:	strb.w	r7, [r3, #706]	; 0x2c2
      _b = b;
    2b36:	mvn.w	r7, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b3a:	strb.w	r1, [r3, #741]	; 0x2e5
    2b3e:	movs	r1, #137	; 0x89
      _s = s;
      _b = b;
    2b40:	strb.w	r7, [r3, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b44:	mvn.w	r7, #7
    2b48:	strb.w	r8, [r3, #700]	; 0x2bc
    2b4c:	mov.w	r8, #13
    2b50:	strb.w	r7, [r3, #709]	; 0x2c5
      _b = b;
    2b54:	mvn.w	r7, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b58:	strb.w	r1, [r3, #744]	; 0x2e8
      _s = s;
      _b = b;
    2b5c:	strb.w	r7, [r3, #710]	; 0x2c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b60:	mvn.w	r7, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b64:	strb.w	r1, [r3, #747]	; 0x2eb
      _s = s;
      _b = b;
    2b68:	mvn.w	r1, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b6c:	strb.w	r7, [r3, #712]	; 0x2c8
      _b = b;
    2b70:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2b74:	strb.w	r8, [r3, #703]	; 0x2bf
      _b = b;
    2b78:	mvn.w	r8, #49	; 0x31
    2b7c:	strb.w	r7, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2b80:	mvn.w	r7, #99	; 0x63
    2b84:	strb.w	sl, [r3, #738]	; 0x2e2
    2b88:	mvn.w	sl, #111	; 0x6f
    2b8c:	strb.w	r7, [r3, #717]	; 0x2cd
      _s = s;
    2b90:	mov.w	r7, #91	; 0x5b
    2b94:	strb.w	r7, [r3, #718]	; 0x2ce
      _b = b;
    2b98:	mvn.w	r7, #6
    2b9c:	strb.w	r7, [r3, #722]	; 0x2d2
    2ba0:	mvn.w	r7, #5
    2ba4:	strb.w	r7, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ba8:	mvn.w	r7, #56	; 0x38
    2bac:	strb.w	r7, [r3, #730]	; 0x2da
      _b = b;
    2bb0:	mvn.w	r7, #20
    2bb4:	strb.w	r7, [r3, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bb8:	mvn.w	r7, #93	; 0x5d
    2bbc:	strb.w	r7, [r3, #732]	; 0x2dc
      _s = s;
    2bc0:	ldrb.w	r7, [sp, #24]
    2bc4:	strb.w	r7, [r3, #733]	; 0x2dd
      _b = b;
    2bc8:	mvn.w	r7, #31
    2bcc:	strb.w	r7, [r3, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bd0:	ldrb.w	r7, [sp, #4]
    2bd4:	strb.w	r7, [r3, #735]	; 0x2df
      _s = s;
      _b = b;
    2bd8:	mvn.w	r7, #54	; 0x36
    2bdc:	strb.w	r7, [r3, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2be0:	mvn.w	r7, #6
    2be4:	strb.w	r7, [r3, #742]	; 0x2e6
    2be8:	movs	r7, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2bea:	strb.w	r0, [r3, #750]	; 0x2ee
    2bee:	movs	r0, #168	; 0xa8
      _s = s;
      _b = b;
    2bf0:	strb.w	r1, [r3, #728]	; 0x2d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bf4:	mov.w	r1, #85	; 0x55
      _b = b;
    2bf8:	strb.w	r8, [r3, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2bfc:	mvn.w	r8, #62	; 0x3e
    2c00:	strb.w	r1, [r3, #757]	; 0x2f5
    2c04:	mov.w	r1, #123	; 0x7b
    2c08:	strb.w	r8, [r3, #748]	; 0x2ec
      _b = b;
    2c0c:	mvn.w	r8, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c10:	strb.w	r1, [r3, #754]	; 0x2f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c14:	mvn.w	r1, #71	; 0x47
      _s = s;
      _b = b;
    2c18:	strb.w	r8, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2c1c:	mvn.w	r8, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c20:	strb.w	r1, [r3, #726]	; 0x2d6
    2c24:	mvn.w	r1, #103	; 0x67
      _s = s;
    2c28:	strb.w	r4, [r3, #745]	; 0x2e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c2c:	strb.w	r1, [r3, #729]	; 0x2d9
      _s = s;
    2c30:	mvn.w	r1, #84	; 0x54
    2c34:	strb.w	r8, [r3, #751]	; 0x2ef
    2c38:	mov.w	r8, #151	; 0x97
    2c3c:	strb.w	r1, [r3, #736]	; 0x2e0
    2c40:	mvn.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c44:	strb.w	fp, [r2, #753]	; 0x2f1
      _s = s;
    2c48:	strb.w	r1, [r3, #739]	; 0x2e3
      _b = b;
    2c4c:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c50:	strb.w	r5, [r2, #756]	; 0x2f4
      _s = s;
      _b = b;
    2c54:	strb.w	r1, [r3, #740]	; 0x2e4
    2c58:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c5c:	strb.w	fp, [r2, #759]	; 0x2f7
      _s = s;
      _b = b;
    2c60:	strb.w	r1, [r3, #743]	; 0x2e7
    2c64:	mvn.w	r3, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c68:	strb.w	r5, [r2, #762]	; 0x2fa
      _s = s;
    2c6c:	movs	r1, #121	; 0x79
      _b = b;
    2c6e:	strb.w	r3, [r2, #752]	; 0x2f0
    2c72:	mvn.w	r3, #28
    2c76:	strb.w	fp, [r2, #782]	; 0x30e
    2c7a:	strb.w	r3, [r2, #755]	; 0x2f3
    2c7e:	mvn.w	r3, #17
    2c82:	strb.w	r9, [r2, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c86:	mov.w	r9, #142	; 0x8e
      _s = s;
      _b = b;
    2c8a:	strb.w	r3, [r2, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2c8e:	mvn.w	r3, #43	; 0x2b
    2c92:	strb.w	ip, [r2, #774]	; 0x306
    2c96:	mov.w	ip, #158	; 0x9e
    2c9a:	strb.w	r3, [r2, #768]	; 0x300
      _s = s;
    2c9e:	mov.w	r3, #90	; 0x5a
    2ca2:	strb.w	lr, [r2, #775]	; 0x307
      _b = b;
    2ca6:	mov.w	lr, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2caa:	strb.w	r3, [r2, #769]	; 0x301
      _b = b;
    2cae:	mov.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cb2:	strb.w	r6, [r2, #790]	; 0x316
    2cb6:	movs	r6, #252	; 0xfc
      _b = b;
    2cb8:	strb.w	r3, [r2, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cbc:	mvn.w	r3, #50	; 0x32
    2cc0:	strb.w	r3, [r2, #771]	; 0x303
      _s = s;
    2cc4:	mov.w	r3, #90	; 0x5a
    2cc8:	strb.w	r3, [r2, #787]	; 0x313
      _b = b;
    2ccc:	mov.w	r3, #21
    2cd0:	strb.w	r3, [r2, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cd4:	mvn.w	r3, #126	; 0x7e
    2cd8:	strb.w	r3, [r2, #760]	; 0x2f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cdc:	strb.w	r3, [r2, #783]	; 0x30f
      _s = s;
      _b = b;
    2ce0:	mvn.w	r3, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ce4:	strb.w	sl, [r2, #789]	; 0x315
      _s = s;
      _b = b;
    2ce8:	mvn.w	sl, #5
    2cec:	strb.w	r3, [r2, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2cf0:	mvn.w	r3, #41	; 0x29
      _b = b;
    2cf4:	strb.w	sl, [r2, #791]	; 0x317
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2cf8:	mvn.w	sl, #91	; 0x5b
      _s = s;
    2cfc:	strb.w	r3, [r2, #763]	; 0x2fb
      _b = b;
    2d00:	mvn.w	r3, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d04:	strb.w	sl, [r2, #795]	; 0x31b
      _s = s;
    2d08:	mov.w	sl, #85	; 0x55
      _b = b;
    2d0c:	strb.w	r3, [r2, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d10:	mvn.w	r3, #64	; 0x40
      _s = s;
    2d14:	strb.w	sl, [r2, #796]	; 0x31c
      _b = b;
    2d18:	mvn.w	sl, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d1c:	strb.w	r3, [r2, #765]	; 0x2fd
      _s = s;
    2d20:	mov.w	r3, #97	; 0x61
      _b = b;
    2d24:	strb.w	sl, [r2, #800]	; 0x320
    2d28:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d2c:	strb.w	r3, [r2, #766]	; 0x2fe
    2d30:	strb.w	r3, [r2, #784]	; 0x310
    2d34:	mov.w	r3, #76	; 0x4c
      _b = b;
    2d38:	strb.w	sl, [r2, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d3c:	mvn.w	sl, #71	; 0x47
      _s = s;
    2d40:	strb.w	r3, [r2, #772]	; 0x304
      _b = b;
    2d44:	mvn.w	r3, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d48:	strb.w	r5, [r2, #811]	; 0x32b
      _b = b;
    2d4c:	mvn.w	r5, #17
    2d50:	strb.w	r3, [r2, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d54:	mvn.w	r3, #125	; 0x7d
    2d58:	strb.w	sl, [r2, #804]	; 0x324
      _s = s;
    2d5c:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d60:	strb.w	r3, [r2, #777]	; 0x309
      _s = s;
    2d64:	mvn.w	r3, #118	; 0x76
      _b = b;
    2d68:	strb.w	r5, [r2, #812]	; 0x32c
    2d6c:	mvn.w	r5, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d70:	strb.w	r3, [r2, #778]	; 0x30a
      _b = b;
    2d74:	mvn.w	r3, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d78:	strb.w	sl, [r2, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d7c:	mvn.w	sl, #68	; 0x44
      _s = s;
      _b = b;
    2d80:	strb.w	r3, [r2, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d84:	mov.w	r3, #113	; 0x71
      _s = s;
      _b = b;
    2d88:	strb.w	r5, [r2, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2d8c:	mvn.w	r5, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d90:	strb.w	r3, [r2, #780]	; 0x30c
      _s = s;
    2d94:	mov.w	r3, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2d98:	strb.w	sl, [r2, #807]	; 0x327
      _s = s;
      _b = b;
    2d9c:	mvn.w	sl, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2da0:	strb.w	r3, [r2, #781]	; 0x30d
      _b = b;
    2da4:	mvn.w	r3, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2da8:	strb.w	r5, [r2, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dac:	mvn.w	r5, #79	; 0x4f
      _s = s;
      _b = b;
    2db0:	strb.w	r3, [r2, #785]	; 0x311
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2db4:	mvn.w	r3, #122	; 0x7a
      _s = s;
      _b = b;
    2db8:	strb.w	r4, [r2, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dbc:	strb.w	r3, [r2, #786]	; 0x312
      _s = s;
      _b = b;
    2dc0:	mvn.w	r3, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dc4:	strb.w	r5, [r2, #798]	; 0x31e
      _s = s;
    2dc8:	movs	r5, #88	; 0x58
      _b = b;
    2dca:	strb.w	r3, [r2, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dce:	movs	r3, #128	; 0x80
      _s = s;
    2dd0:	strb.w	r7, [r2, #808]	; 0x328
    2dd4:	movs	r7, #68	; 0x44
      _b = b;
    2dd6:	strb.w	sl, [r2, #809]	; 0x329
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dda:	mvn.w	sl, #109	; 0x6d
    2dde:	strb.w	r0, [r2, #810]	; 0x32a
    2de2:	mvn.w	r0, #107	; 0x6b
    2de6:	strb.w	sl, [r2, #813]	; 0x32d
      _s = s;
    2dea:	mvn.w	sl, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2dee:	strb.w	r0, [r2, #792]	; 0x318
      _s = s;
    2df2:	mov.w	r0, #104	; 0x68
    2df6:	strb.w	sl, [r2, #814]	; 0x32e
      _b = b;
    2dfa:	mvn.w	sl, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2dfe:	strb.w	r0, [r2, #793]	; 0x319
      _b = b;
    2e02:	mvn.w	r0, #4
    2e06:	strb.w	sl, [r2, #815]	; 0x32f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e0a:	mvn.w	sl, #123	; 0x7b
      _s = s;
      _b = b;
    2e0e:	strb.w	r0, [r2, #794]	; 0x31a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e12:	strb.w	sl, [r2, #816]	; 0x330
      _s = s;
    2e16:	mvn.w	sl, #114	; 0x72
      _b = b;
    2e1a:	strb.w	r0, [r2, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e1e:	mvn.w	r0, #69	; 0x45
      _s = s;
    2e22:	strb.w	sl, [r2, #817]	; 0x331
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e26:	mvn.w	sl, #120	; 0x78
    2e2a:	strb.w	r0, [r2, #801]	; 0x321
      _s = s;
    2e2e:	mov.w	r0, #103	; 0x67
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e32:	strb.w	sl, [r2, #819]	; 0x333
      _s = s;
      _b = b;
    2e36:	mvn.w	sl, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e3a:	strb.w	r1, [r2, #799]	; 0x31f
      _b = b;
    2e3e:	strb.w	sl, [r2, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e42:	mvn.w	sl, #116	; 0x74
      _s = s;
    2e46:	strb.w	r0, [r2, #802]	; 0x322
    2e4a:	movs	r0, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e4c:	strb.w	sl, [r2, #822]	; 0x336
      _s = s;
      _b = b;
    2e50:	mvn.w	sl, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2e54:	strb.w	r8, [r2, #820]	; 0x334
      _b = b;
    2e58:	strb.w	sl, [r2, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e5c:	mvn.w	sl, #117	; 0x75
    2e60:	strb.w	fp, [r2, #831]	; 0x33f
    2e64:	strb.w	sl, [r2, #828]	; 0x33c
      _s = s;
    2e68:	mov.w	sl, #91	; 0x5b
    2e6c:	strb.w	sl, [r2, #832]	; 0x340
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e70:	mvn.w	sl, #116	; 0x74
    2e74:	strb.w	sl, [r2, #837]	; 0x345
      _s = s;
      _b = b;
    2e78:	mvn.w	sl, #17
    2e7c:	strb.w	sl, [r2, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e80:	mvn.w	sl, #103	; 0x67
    2e84:	strb.w	sl, [r2, #840]	; 0x348
    2e88:	mvn.w	sl, #107	; 0x6b
    2e8c:	strb.w	sl, [r2, #843]	; 0x34b
      _s = s;
    2e90:	mvn.w	sl, #15
    2e94:	strb.w	sl, [r2, #844]	; 0x34c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2e98:	mvn.w	sl, #107	; 0x6b
    2e9c:	strb.w	sl, [r2, #846]	; 0x34e
      _s = s;
    2ea0:	strb.w	sl, [r2, #847]	; 0x34f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ea4:	mvn.w	sl, #122	; 0x7a
    2ea8:	strb.w	sl, [r2, #849]	; 0x351
      _s = s;
    2eac:	mvn.w	sl, #107	; 0x6b
    2eb0:	strb.w	sl, [r2, #850]	; 0x352
      _b = b;
    2eb4:	mov.w	sl, #103	; 0x67
    2eb8:	strb.w	sl, [r2, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ebc:	mvn.w	sl, #125	; 0x7d
    2ec0:	strb.w	sl, [r2, #852]	; 0x354
      _s = s;
      _b = b;
    2ec4:	mvn.w	sl, #28
    2ec8:	strb.w	lr, [r2, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ecc:	mvn.w	lr, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ed0:	strb.w	r1, [r2, #858]	; 0x35a
      _s = s;
      _b = b;
    2ed4:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ed8:	strb.w	lr, [r2, #826]	; 0x33a
      _b = b;
    2edc:	mvn.w	lr, #75	; 0x4b
    2ee0:	strb.w	r1, [r2, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ee4:	mvn.w	r1, #50	; 0x32
      _b = b;
    2ee8:	strb.w	lr, [r2, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2eec:	mvn.w	lr, #80	; 0x50
    2ef0:	strb.w	r1, [r2, #862]	; 0x35e
      _b = b;
    2ef4:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2ef8:	strb.w	lr, [r2, #829]	; 0x33d
      _b = b;
    2efc:	mvn.w	lr, #35	; 0x23
    2f00:	strb.w	r1, [r2, #863]	; 0x35f
    2f04:	mvn.w	r1, #5
    2f08:	strb.w	lr, [r2, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f0c:	mov.w	lr, #99	; 0x63
      _b = b;
    2f10:	strb.w	r1, [r2, #866]	; 0x362
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f14:	mvn.w	r1, #95	; 0x5f
      _s = s;
    2f18:	strb.w	lr, [r2, #835]	; 0x343
    2f1c:	strb.w	lr, [r2, #853]	; 0x355
      _b = b;
    2f20:	mvn.w	lr, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f24:	strb.w	r1, [r2, #867]	; 0x363
    2f28:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    2f2c:	strb.w	lr, [r2, #836]	; 0x344
    2f30:	mvn.w	lr, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f34:	strb.w	r1, [r2, #870]	; 0x366
      _s = s;
      _b = b;
    2f38:	mvn.w	r1, #7
    2f3c:	strb.w	lr, [r2, #842]	; 0x34a
    2f40:	mvn.w	lr, #93	; 0x5d
    2f44:	strb.w	r1, [r2, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f48:	mvn.w	r1, #62	; 0x3e
      _s = s;
      _b = b;
    2f4c:	strb.w	lr, [r2, #845]	; 0x34d
    2f50:	mov.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f54:	strb.w	r1, [r2, #879]	; 0x36f
      _s = s;
      _b = b;
    2f58:	mvn.w	r1, #5
    2f5c:	strb.w	lr, [r2, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2f60:	mvn.w	lr, #55	; 0x37
      _b = b;
    2f64:	strb.w	r1, [r2, #881]	; 0x371
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f68:	mvn.w	r1, #59	; 0x3b
      _s = s;
    2f6c:	strb.w	lr, [r2, #856]	; 0x358
      _b = b;
    2f70:	mvn.w	lr, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f74:	strb.w	r1, [r2, #882]	; 0x372
      _s = s;
      _b = b;
    2f78:	mvn.w	r1, #6
    2f7c:	strb.w	sl, [r2, #854]	; 0x356
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f80:	strb.w	r9, [r2, #825]	; 0x339
      _s = s;
    2f84:	strb.w	r9, [r2, #838]	; 0x346
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f88:	strb.w	ip, [r2, #834]	; 0x342
      _s = s;
    2f8c:	strb.w	r6, [r2, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f90:	strb.w	r3, [r2, #855]	; 0x357
      _s = s;
      _b = b;
    2f94:	strb.w	lr, [r2, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2f98:	mvn.w	lr, #74	; 0x4a
      _s = s;
      _b = b;
    2f9c:	strb.w	r6, [r2, #872]	; 0x368
    2fa0:	strb.w	r6, [r2, #878]	; 0x36e
    2fa4:	strb.w	r1, [r2, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fa8:	mvn.w	r1, #57	; 0x39
      _s = s;
    2fac:	strb.w	r5, [r2, #880]	; 0x370
    2fb0:	mov.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fb4:	strb.w	r1, [r2, #885]	; 0x375
    2fb8:	mvn.w	r1, #73	; 0x49
      _s = s;
    2fbc:	strb.w	r5, [r2, #859]	; 0x35b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fc0:	mvn.w	r5, #119	; 0x77
    2fc4:	strb.w	r1, [r2, #888]	; 0x378
    2fc8:	mvn.w	r1, #100	; 0x64
    2fcc:	strb.w	r5, [r2, #861]	; 0x35d
      _s = s;
    2fd0:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2fd4:	strb.w	r1, [r2, #864]	; 0x360
      _s = s;
    2fd8:	mov.w	r1, #45	; 0x2d
    2fdc:	strb.w	r5, [r2, #868]	; 0x364
    2fe0:	mov.w	r5, #124	; 0x7c
    2fe4:	strb.w	r1, [r2, #865]	; 0x361
      _b = b;
    2fe8:	mvn.w	r1, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    2fec:	strb.w	r5, [r2, #871]	; 0x367
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ff0:	mvn.w	r5, #90	; 0x5a
      _s = s;
      _b = b;
    2ff4:	strb.w	r4, [r2, #887]	; 0x377
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    2ff8:	strb.w	r5, [r2, #873]	; 0x369
      _s = s;
    2ffc:	mvn.w	r5, #115	; 0x73
      _b = b;
    3000:	strb.w	r1, [r2, #869]	; 0x365
    3004:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3006:	strb.w	r5, [r2, #874]	; 0x36a
    300a:	mov.w	r5, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    300e:	strb.w	lr, [r2, #876]	; 0x36c
      _s = s;
    3012:	mov.w	lr, #126	; 0x7e
    3016:	strb.w	r5, [r2, #886]	; 0x376
    301a:	mov.w	r5, #74	; 0x4a
    301e:	strb.w	r7, [r2, #877]	; 0x36d
    3022:	movs	r7, #98	; 0x62
    3024:	strb.w	r5, [r2, #889]	; 0x379
      _b = b;
    3028:	mvn.w	r5, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    302c:	strb.w	r0, [r2, #883]	; 0x373
    3030:	movs	r0, #115	; 0x73
      _b = b;
    3032:	strb.w	r5, [r2, #890]	; 0x37a
    3036:	mvn.w	r5, #48	; 0x30
    303a:	strb.w	r5, [r2, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    303e:	mvn.w	r5, #95	; 0x5f
    3042:	strb.w	r5, [r2, #891]	; 0x37b
      _s = s;
    3046:	mvn.w	r5, #10
    304a:	strb.w	r5, [r2, #892]	; 0x37c
      _b = b;
    304e:	mvn.w	r5, #42	; 0x2a
    3052:	strb.w	r5, [r2, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3056:	mvn.w	r5, #102	; 0x66
    305a:	strb.w	r5, [r2, #894]	; 0x37e
      _s = s;
    305e:	mvn.w	r5, #6
    3062:	strb.w	r5, [r2, #895]	; 0x37f
      _b = b;
    3066:	mvn.w	r5, #58	; 0x3a
    306a:	strb.w	r5, [r2, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    306e:	mvn.w	r5, #115	; 0x73
    3072:	strb.w	r5, [r2, #897]	; 0x381
      _s = s;
    3076:	mvn.w	r5, #26
    307a:	strb.w	r5, [r2, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    307e:	mvn.w	r5, #118	; 0x76
    3082:	strb.w	r5, [r2, #900]	; 0x384
      _s = s;
    3086:	mvn.w	r5, #51	; 0x33
    308a:	strb.w	r5, [r2, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    308e:	mvn.w	r5, #114	; 0x72
    3092:	strb.w	r5, [r2, #903]	; 0x387
      _s = s;
    3096:	mvn.w	r5, #68	; 0x44
    309a:	strb.w	r5, [r2, #904]	; 0x388
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    309e:	mvn.w	r5, #116	; 0x74
    30a2:	strb.w	r5, [r2, #906]	; 0x38a
      _s = s;
      _b = b;
    30a6:	mvn.w	r5, #36	; 0x24
    30aa:	strb.w	r1, [r2, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30ae:	movs	r1, #195	; 0xc3
      _b = b;
    30b0:	strb.w	r5, [r2, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30b4:	mvn.w	r5, #115	; 0x73
    30b8:	strb.w	fp, [r2, #921]	; 0x399
    30bc:	strb.w	r5, [r2, #909]	; 0x38d
      _s = s;
      _b = b;
    30c0:	mvn.w	r5, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    30c4:	strb.w	lr, [r2, #913]	; 0x391
    30c8:	mov.w	lr, #105	; 0x69
      _b = b;
    30cc:	strb.w	r5, [r2, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d0:	mvn.w	r5, #103	; 0x67
      _s = s;
    30d4:	strb.w	r0, [r2, #910]	; 0x38e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30d8:	strb.w	r5, [r2, #912]	; 0x390
      _s = s;
      _b = b;
    30dc:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30e0:	strb.w	fp, [r2, #924]	; 0x39c
      _s = s;
      _b = b;
    30e4:	strb.w	r5, [r2, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    30e8:	mvn.w	r5, #107	; 0x6b
    30ec:	strb.w	r9, [r2, #927]	; 0x39f
    30f0:	strb.w	r5, [r2, #918]	; 0x396
      _s = s;
    30f4:	mvn.w	r5, #20
    30f8:	strb.w	r6, [r2, #928]	; 0x3a0
    30fc:	movs	r6, #43	; 0x2b
    30fe:	strb.w	r5, [r2, #919]	; 0x397
      _b = b;
    3102:	mvn.w	r5, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3106:	strb.w	r3, [r2, #933]	; 0x3a5
      _s = s;
      _b = b;
    310a:	strb.w	r5, [r2, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    310e:	mvn.w	r5, #124	; 0x7c
    3112:	strb.w	r3, [r2, #937]	; 0x3a9
    3116:	strb.w	r5, [r2, #907]	; 0x38b
      _b = b;
    311a:	mvn.w	r5, #22
    311e:	strb.w	r4, [r2, #938]	; 0x3aa
    3122:	strb.w	r5, [r2, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3126:	mvn.w	r5, #110	; 0x6e
      _s = s;
      _b = b;
    312a:	strb.w	r4, [r2, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    312e:	strb.w	r5, [r2, #915]	; 0x393
      _s = s;
    3132:	mvn.w	r5, #37	; 0x25
    3136:	strb.w	r5, [r2, #916]	; 0x394
      _b = b;
    313a:	mvn.w	r5, #16
    313e:	strb.w	r5, [r2, #920]	; 0x398
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3142:	mov.w	r5, #100	; 0x64
    3146:	strb.w	r5, [r2, #922]	; 0x39a
      _b = b;
    314a:	mvn.w	r5, #32
    314e:	strb.w	r5, [r2, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3152:	mvn.w	r5, #98	; 0x62
    3156:	strb.w	r5, [r2, #939]	; 0x3ab
      _s = s;
    315a:	mvn.w	r5, #66	; 0x42
    315e:	strb.w	r5, [r2, #925]	; 0x39d
      _b = b;
    3162:	mvn.w	r5, #57	; 0x39
    3166:	strb.w	r5, [r2, #929]	; 0x3a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    316a:	mvn.w	r5, #125	; 0x7d
    316e:	strb.w	r5, [r2, #930]	; 0x3a2
      _s = s;
      _b = b;
    3172:	mvn.w	r5, #29
    3176:	strb.w	r5, [r2, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    317a:	mvn.w	r5, #123	; 0x7b
    317e:	strb.w	r5, [r2, #936]	; 0x3a8
      _s = s;
      _b = b;
    3182:	mvn.w	r5, #6
    3186:	strb.w	r5, [r2, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    318a:	mvn.w	r5, #91	; 0x5b
      _s = s;
    318e:	strb.w	r1, [r2, #934]	; 0x3a6
    3192:	movs	r1, #116	; 0x74
    3194:	strb.w	r0, [r2, #946]	; 0x3b2
      _b = b;
    3198:	mvn.w	r0, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    319c:	strb.w	r1, [r2, #931]	; 0x3a3
    31a0:	strb.w	r1, [r2, #949]	; 0x3b5
      _b = b;
    31a4:	mvn.w	r1, #21
    31a8:	strb.w	r0, [r2, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31ac:	mvn.w	r0, #90	; 0x5a
      _s = s;
      _b = b;
    31b0:	strb.w	r1, [r2, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31b4:	mvn.w	r1, #82	; 0x52
      _s = s;
      _b = b;
    31b8:	strb.w	r4, [r2, #962]	; 0x3c2
    31bc:	mvn.w	r4, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31c0:	strb.w	r1, [r2, #942]	; 0x3ae
      _s = s;
      _b = b;
    31c4:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31c8:	strb.w	r0, [r2, #948]	; 0x3b4
      _s = s;
    31cc:	mvn.w	r0, #106	; 0x6a
      _b = b;
    31d0:	strb.w	r1, [r2, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31d4:	mvn.w	r1, #68	; 0x44
      _s = s;
      _b = b;
    31d8:	strb.w	r4, [r2, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31dc:	mvn.w	r4, #99	; 0x63
    31e0:	strb.w	r1, [r2, #957]	; 0x3bd
      _s = s;
    31e4:	mov.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    31e8:	strb.w	r5, [r2, #945]	; 0x3b1
    31ec:	movs	r5, #177	; 0xb1
      _s = s;
    31ee:	strb.w	r1, [r2, #958]	; 0x3be
      _b = b;
    31f2:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    31f6:	strb.w	r0, [r2, #952]	; 0x3b8
    31fa:	mov.w	r0, #113	; 0x71
      _b = b;
    31fe:	strb.w	r1, [r2, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3202:	mov.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3206:	strb.w	r4, [r2, #972]	; 0x3cc
      _s = s;
    320a:	mvn.w	r4, #6
    320e:	strb.w	r1, [r2, #961]	; 0x3c1
    3212:	strb.w	r1, [r2, #964]	; 0x3c4
    3216:	mvn.w	r1, #122	; 0x7a
    321a:	strb.w	r0, [r2, #955]	; 0x3bb
      _b = b;
    321e:	movs	r0, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3220:	strb.w	r1, [r2, #967]	; 0x3c7
      _b = b;
    3224:	mvn.w	r1, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3228:	strb.w	r6, [r2, #943]	; 0x3af
      _b = b;
    322c:	mov.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3230:	strb.w	r5, [r2, #954]	; 0x3ba
    3234:	movs	r5, #166	; 0xa6
      _s = s;
      _b = b;
    3236:	strb.w	r1, [r2, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    323a:	mvn.w	r1, #38	; 0x26
    323e:	strb.w	r4, [r2, #973]	; 0x3cd
      _b = b;
    3242:	mvn.w	r4, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3246:	strb.w	r7, [r2, #940]	; 0x3ac
    324a:	movs	r7, #93	; 0x5d
      _b = b;
    324c:	strb.w	r6, [r2, #926]	; 0x39e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3250:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    3252:	strb.w	r0, [r2, #950]	; 0x3b6
    3256:	strb.w	r0, [r2, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    325a:	strb.w	r5, [r2, #951]	; 0x3b7
    325e:	strb.w	ip, [r2, #969]	; 0x3c9
      _s = s;
    3262:	strb.w	r1, [r2, #970]	; 0x3ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3266:	movs	r1, #194	; 0xc2
      _s = s;
      _b = b;
    3268:	strb.w	r4, [r2, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    326c:	mvn.w	r4, #111	; 0x6f
    3270:	strb.w	r1, [r2, #960]	; 0x3c0
    3274:	strb.w	r4, [r2, #975]	; 0x3cf
      _s = s;
    3278:	mvn.w	r4, #6
    327c:	strb.w	r1, [r2, #991]	; 0x3df
      _b = b;
    3280:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3284:	strb.w	r4, [r2, #976]	; 0x3d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3288:	mvn.w	r4, #118	; 0x76
      _s = s;
      _b = b;
    328c:	strb.w	r1, [r2, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3290:	mvn.w	r1, #102	; 0x66
    3294:	strb.w	r4, [r2, #978]	; 0x3d2
      _s = s;
    3298:	mvn.w	r4, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    329c:	strb.w	r1, [r2, #993]	; 0x3e1
      _s = s;
      _b = b;
    32a0:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32a4:	strb.w	r4, [r2, #979]	; 0x3d3
      _b = b;
    32a8:	mvn.w	r4, #75	; 0x4b
    32ac:	strb.w	r1, [r2, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32b0:	mov.w	r1, #124	; 0x7c
      _b = b;
    32b4:	strb.w	r4, [r2, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32b8:	mvn.w	r4, #124	; 0x7c
      _s = s;
    32bc:	strb.w	r1, [r2, #997]	; 0x3e5
    32c0:	mov.w	r1, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32c4:	strb.w	r4, [r2, #981]	; 0x3d5
      _s = s;
      _b = b;
    32c8:	mvn.w	r4, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32cc:	strb.w	r1, [r2, #1000]	; 0x3e8
      _b = b;
    32d0:	mvn.w	r1, #19
    32d4:	strb.w	r4, [r2, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32d8:	mvn.w	r4, #117	; 0x75
      _s = s;
      _b = b;
    32dc:	strb.w	r1, [r2, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32e0:	mvn.w	r1, #115	; 0x73
    32e4:	strb.w	r4, [r2, #984]	; 0x3d8
      _s = s;
      _b = b;
    32e8:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    32ec:	strb.w	r7, [r2, #988]	; 0x3dc
      _b = b;
    32f0:	mvn.w	r7, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    32f4:	strb.w	r1, [r2, #1002]	; 0x3ea
      _s = s;
    32f8:	mov.w	r1, #58	; 0x3a
      _b = b;
    32fc:	strb.w	r4, [r2, #986]	; 0x3da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3300:	movs	r4, #178	; 0xb2
      _s = s;
      _b = b;
    3302:	strb.w	r7, [r2, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3306:	mov.w	r7, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    330a:	strb.w	r6, [r2, #963]	; 0x3c3
      _s = s;
      _b = b;
    330e:	strb.w	r6, [r2, #977]	; 0x3d1
    3312:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3314:	strb.w	r1, [r2, #1003]	; 0x3eb
      _b = b;
    3318:	mvn.w	r1, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    331c:	strb.w	r8, [r2, #987]	; 0x3db
      _s = s;
    3320:	strb.w	lr, [r2, #985]	; 0x3d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3324:	mov.w	lr, #190	; 0xbe
    3328:	strb.w	r4, [r2, #966]	; 0x3c6
      _s = s;
    332c:	strb.w	r7, [r2, #982]	; 0x3d6
      _b = b;
    3330:	strb.w	r6, [r2, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3334:	mvn.w	r6, #122	; 0x7a
    3338:	strb.w	r8, [r2, #990]	; 0x3de
    333c:	strb.w	r8, [r2, #996]	; 0x3e4
    3340:	strb.w	r9, [r2, #999]	; 0x3e7
      _s = s;
      _b = b;
    3344:	strb.w	r1, [r2, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3348:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    334c:	strb.w	fp, [r2, #1005]	; 0x3ed
      _s = s;
    3350:	strb.w	r4, [r2, #1024]	; 0x400
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3354:	mvn.w	r4, #116	; 0x74
      _s = s;
    3358:	strb.w	r1, [r2, #1006]	; 0x3ee
      _b = b;
    335c:	mvn.w	r1, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3360:	strb.w	r4, [r2, #1023]	; 0x3ff
      _s = s;
      _b = b;
    3364:	mvn.w	r4, #7
    3368:	strb.w	r1, [r2, #1007]	; 0x3ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    336c:	mvn.w	r1, #120	; 0x78
      _s = s;
      _b = b;
    3370:	strb.w	r4, [r2, #1025]	; 0x401
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3374:	mvn.w	r4, #110	; 0x6e
    3378:	strb.w	r6, [r2, #1014]	; 0x3f6
      _s = s;
      _b = b;
    337c:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3380:	strb.w	r4, [r2, #1026]	; 0x402
      _s = s;
    3384:	mvn.w	r4, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3388:	strb.w	r1, [r2, #1008]	; 0x3f0
      _s = s;
      _b = b;
    338c:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3390:	strb.w	r4, [r2, #1027]	; 0x403
      _b = b;
    3394:	mvn.w	r4, #20
    3398:	strb.w	r6, [r2, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    339c:	mov.w	r6, #99	; 0x63
      _b = b;
    33a0:	strb.w	r4, [r2, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33a4:	mvn.w	r4, #106	; 0x6a
      _s = s;
      _b = b;
    33a8:	strb.w	r1, [r2, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33ac:	mvn.w	r1, #125	; 0x7d
    33b0:	strb.w	r4, [r2, #1029]	; 0x405
      _s = s;
    33b4:	mvn.w	r4, #109	; 0x6d
    33b8:	strb.w	r6, [r2, #1018]	; 0x3fa
      _b = b;
    33bc:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33c0:	strb.w	r4, [r2, #1030]	; 0x406
      _b = b;
    33c4:	mvn.w	r4, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33c8:	strb.w	r1, [r2, #1011]	; 0x3f3
      _s = s;
    33cc:	mvn.w	r1, #93	; 0x5d
      _b = b;
    33d0:	strb.w	r4, [r2, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    33d4:	mvn.w	r4, #92	; 0x5c
      _b = b;
    33d8:	strb.w	r6, [r2, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33dc:	mvn.w	r6, #114	; 0x72
      _s = s;
    33e0:	strb.w	r4, [r2, #1033]	; 0x409
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33e4:	mvn.w	r4, #73	; 0x49
      _s = s;
    33e8:	strb.w	r1, [r2, #1012]	; 0x3f4
      _b = b;
    33ec:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33f0:	strb.w	r6, [r2, #1020]	; 0x3fc
      _s = s;
      _b = b;
    33f4:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    33f8:	strb.w	r4, [r2, #1035]	; 0x40b
      _s = s;
    33fc:	mvn.w	r4, #57	; 0x39
      _b = b;
    3400:	strb.w	r1, [r2, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3404:	movs	r1, #52	; 0x34
      _b = b;
    3406:	strb.w	r6, [r2, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    340a:	mvn.w	r6, #39	; 0x27
    340e:	strb.w	r4, [r2, #1036]	; 0x40c
      _b = b;
    3412:	mvn.w	r4, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3416:	strb.w	r1, [r2, #1015]	; 0x3f7
    341a:	movs	r1, #174	; 0xae
    341c:	strb.w	r6, [r2, #994]	; 0x3e2
      _b = b;
    3420:	mvn.w	r6, #17
    3424:	strb.w	r4, [r2, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3428:	mvn.w	r4, #55	; 0x37
      _s = s;
    342c:	strb.w	r3, [r2, #1009]	; 0x3f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3430:	strb.w	ip, [r2, #1017]	; 0x3f9
      _s = s;
    3434:	strb.w	r1, [r2, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3438:	mov	r1, r2
      _s = s;
      _b = b;
    343a:	strb.w	r6, [r2, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    343e:	strb.w	r4, [r2, #1038]	; 0x40e
      _s = s;
      _b = b;
    3442:	mvn.w	r4, #10
    3446:	strb.w	r5, [r2, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    344a:	movs	r5, #114	; 0x72
      _b = b;
    344c:	strb.w	r4, [r2, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3450:	mvn.w	r4, #54	; 0x36
      _s = s;
    3454:	strb.w	r5, [r2, #1039]	; 0x40f
      _b = b;
    3458:	mvn.w	r5, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    345c:	strb.w	r4, [r2, #1041]	; 0x411
      _s = s;
    3460:	mov.w	r4, #104	; 0x68
      _b = b;
    3464:	strb.w	r5, [r2, #1043]	; 0x413
    3468:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    346c:	strb.w	r4, [r2, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3470:	mvn.w	r4, #75	; 0x4b
      _s = s;
      _b = b;
    3474:	strb.w	r5, [r2, #1055]	; 0x41f
    3478:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    347c:	strb.w	r4, [r2, #1044]	; 0x414
      _s = s;
    3480:	mvn.w	r4, #95	; 0x5f
      _b = b;
    3484:	strb.w	r5, [r2, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3488:	mvn.w	r5, #90	; 0x5a
    348c:	strb.w	r4, [r2, #1045]	; 0x415
      _b = b;
    3490:	mvn.w	r4, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3494:	strb.w	r5, [r2, #1057]	; 0x421
      _b = b;
    3498:	mvn.w	r5, #62	; 0x3e
    349c:	strb.w	r4, [r2, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34a0:	mvn.w	r4, #125	; 0x7d
      _s = s;
      _b = b;
    34a4:	strb.w	r5, [r2, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34a8:	mvn.w	r5, #103	; 0x67
    34ac:	strb.w	r4, [r2, #1047]	; 0x417
      _s = s;
    34b0:	mov.w	r4, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34b4:	strb.w	r5, [r2, #1059]	; 0x423
      _s = s;
      _b = b;
    34b8:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34bc:	strb.w	r4, [r2, #1048]	; 0x418
      _b = b;
    34c0:	mvn.w	r4, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34c4:	strb.w	r3, [r2, #1060]	; 0x424
      _b = b;
    34c8:	strb.w	r4, [r2, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34cc:	mvn.w	r4, #70	; 0x46
    34d0:	strb.w	r3, [r2, #1063]	; 0x427
    34d4:	mvn.w	r3, #4
    34d8:	strb.w	r4, [r2, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34dc:	strb.w	r4, [r2, #1053]	; 0x41d
      _s = s;
    34e0:	mvn.w	r4, #111	; 0x6f
      _b = b;
    34e4:	strb.w	r5, [r2, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34e8:	mvn.w	r5, #109	; 0x6d
      _s = s;
    34ec:	strb.w	r4, [r2, #1054]	; 0x41e
      _b = b;
    34f0:	mvn.w	r4, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    34f4:	strb.w	r3, [r2, #1066]	; 0x42a
      _b = b;
    34f8:	strb.w	r4, [r2, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    34fc:	movs	r4, #170	; 0xaa
      _s = s;
    34fe:	strb.w	r3, [r2, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3502:	mvn.w	r3, #92	; 0x5c
    3506:	strb.w	ip, [r2, #1050]	; 0x41a
    350a:	strb.w	r4, [r2, #1032]	; 0x408
    350e:	strb.w	r5, [r2, #1062]	; 0x426
      _s = s;
    3512:	movs	r5, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3514:	strb.w	ip, [r2, #1065]	; 0x429
    3518:	strb.w	ip, [r2, #1068]	; 0x42c
      _s = s;
      _b = b;
    351c:	strb.w	sl, [r2, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3520:	strb.w	r3, [r2, #1071]	; 0x42f
      _s = s;
    3524:	mvn.w	r3, #115	; 0x73
      _b = b;
    3528:	strb.w	r6, [r2, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    352c:	mvn.w	r6, #91	; 0x5b
      _s = s;
    3530:	strb.w	r3, [r2, #1072]	; 0x430
      _b = b;
    3534:	mvn.w	r3, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3538:	strb.w	r6, [r2, #1077]	; 0x435
      _s = s;
    353c:	mov.w	r6, #74	; 0x4a
      _b = b;
    3540:	strb.w	r3, [r2, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3544:	mvn.w	r3, #75	; 0x4b
      _s = s;
    3548:	strb.w	r6, [r2, #1081]	; 0x439
      _b = b;
    354c:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3550:	strb.w	r3, [r2, #1074]	; 0x432
      _s = s;
    3554:	mov.w	r3, #69	; 0x45
      _b = b;
    3558:	strb.w	r6, [r2, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    355c:	mvn.w	r6, #117	; 0x75
      _s = s;
    3560:	strb.w	r3, [r2, #1075]	; 0x433
    3564:	movs	r3, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3566:	strb.w	r6, [r2, #1083]	; 0x43b
      _s = s;
      _b = b;
    356a:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    356e:	strb.w	r3, [r2, #1084]	; 0x43c
      _b = b;
    3572:	mvn.w	r3, #46	; 0x2e
    3576:	strb.w	r6, [r2, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    357a:	mvn.w	r6, #55	; 0x37
      _b = b;
    357e:	strb.w	r3, [r2, #1064]	; 0x428
    3582:	mvn.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3586:	strb.w	r6, [r2, #1087]	; 0x43f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    358a:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    358c:	strb.w	r3, [r2, #1088]	; 0x440
    3590:	mvn.w	r3, #58	; 0x3a
    3594:	strb.w	r0, [r2, #1079]	; 0x437
    3598:	strb.w	r3, [r2, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    359c:	mvn.w	r3, #124	; 0x7c
    35a0:	strb.w	r9, [r2, #1080]	; 0x438
    35a4:	strb.w	r3, [r2, #1089]	; 0x441
      _s = s;
      _b = b;
    35a8:	mvn.w	r3, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35ac:	strb.w	fp, [r2, #1086]	; 0x43e
      _s = s;
      _b = b;
    35b0:	strb.w	r3, [r2, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35b4:	mvn.w	r3, #120	; 0x78
      _s = s;
    35b8:	strb.w	r5, [r2, #1078]	; 0x436
    35bc:	movs	r5, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35be:	strb.w	r3, [r2, #1092]	; 0x444
      _s = s;
    35c2:	mov.w	r3, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35c6:	strb.w	r6, [r2, #1056]	; 0x420
      _s = s;
    35ca:	strb.w	r3, [r2, #1093]	; 0x445
      _b = b;
    35ce:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    35d2:	strb.w	r7, [r2, #1090]	; 0x442
    35d6:	mvn.w	r7, #125	; 0x7d
      _b = b;
    35da:	strb.w	r3, [r2, #1094]	; 0x446
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35de:	mvn.w	r3, #111	; 0x6f
    35e2:	strb.w	r3, [r2, #1095]	; 0x447
      _s = s;
    35e6:	mvn.w	r3, #37	; 0x25
    35ea:	strb.w	r3, [r2, #1096]	; 0x448
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35ee:	mvn.w	r3, #117	; 0x75
    35f2:	strb.w	r3, [r2, #1098]	; 0x44a
      _s = s;
    35f6:	mvn.w	r3, #84	; 0x54
    35fa:	strb.w	r3, [r2, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    35fe:	mvn.w	r3, #117	; 0x75
    3602:	strb.w	r3, [r2, #1101]	; 0x44d
      _s = s;
    3606:	mvn.w	r3, #25
    360a:	strb.w	r3, [r2, #1102]	; 0x44e
      _b = b;
    360e:	mvn.w	r3, #43	; 0x2b
    3612:	strb.w	r3, [r2, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3616:	mvn.w	r3, #116	; 0x74
    361a:	strb.w	r4, [r2, #1113]	; 0x459
      _s = s;
    361e:	mov.w	r4, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3622:	strb.w	r3, [r2, #1104]	; 0x450
      _s = s;
    3626:	mvn.w	r3, #84	; 0x54
    362a:	strb.w	r4, [r2, #1123]	; 0x463
      _b = b;
    362e:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3632:	strb.w	r3, [r2, #1105]	; 0x451
      _b = b;
    3636:	mvn.w	r3, #17
    363a:	strb.w	r4, [r2, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    363e:	mov.w	r4, #95	; 0x5f
      _b = b;
    3642:	strb.w	r3, [r2, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3646:	mvn.w	r3, #84	; 0x54
    364a:	strb.w	r4, [r2, #1129]	; 0x469
      _b = b;
    364e:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3652:	strb.w	r3, [r2, #1108]	; 0x454
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3656:	mvn.w	r3, #106	; 0x6a
      _s = s;
      _b = b;
    365a:	strb.w	r4, [r2, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    365e:	mov.w	r4, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3662:	strb.w	r3, [r2, #1110]	; 0x456
      _s = s;
    3666:	mvn.w	r3, #99	; 0x63
    366a:	strb.w	r4, [r2, #1132]	; 0x46c
      _b = b;
    366e:	mvn.w	r4, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3672:	strb.w	r3, [r2, #1111]	; 0x457
      _b = b;
    3676:	mvn.w	r3, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    367a:	strb.w	r6, [r2, #1138]	; 0x472
      _b = b;
    367e:	mvn.w	r6, #35	; 0x23
    3682:	strb.w	r3, [r2, #1112]	; 0x458
    3686:	mvn.w	r3, #21
    368a:	strb.w	r4, [r2, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    368e:	mvn.w	r4, #56	; 0x38
      _s = s;
      _b = b;
    3692:	strb.w	r3, [r2, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3696:	mvn.w	r3, #82	; 0x52
      _s = s;
    369a:	strb.w	r7, [r2, #1135]	; 0x46f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    369e:	mvn.w	r7, #73	; 0x49
    36a2:	strb.w	r3, [r2, #1116]	; 0x45c
      _s = s;
    36a6:	mov.w	r3, #103	; 0x67
      _b = b;
    36aa:	strb.w	r6, [r2, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ae:	mvn.w	r6, #92	; 0x5c
      _s = s;
    36b2:	strb.w	r3, [r2, #1117]	; 0x45d
      _b = b;
    36b6:	mvn.w	r3, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ba:	strb.w	r9, [r2, #1107]	; 0x453
      _s = s;
      _b = b;
    36be:	strb.w	r3, [r2, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36c2:	mvn.w	r3, #70	; 0x46
      _s = s;
      _b = b;
    36c6:	strb.w	r0, [r2, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ca:	strb.w	r3, [r2, #1119]	; 0x45f
      _s = s;
    36ce:	mov.w	r3, #76	; 0x4c
    36d2:	strb.w	r5, [r2, #1114]	; 0x45a
    36d6:	strb.w	r3, [r2, #1120]	; 0x460
      _b = b;
    36da:	movs	r3, #221	; 0xdd
    36dc:	strb.w	r5, [r2, #1121]	; 0x461
    36e0:	strb.w	r3, [r2, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36e4:	strb.w	r8, [r2, #1125]	; 0x465
      _s = s;
      _b = b;
    36e8:	mov.w	r8, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36ec:	strb.w	r4, [r2, #1134]	; 0x46e
    36f0:	movs	r4, #202	; 0xca
      _s = s;
      _b = b;
    36f2:	strb.w	sl, [r2, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    36f6:	mvn.w	sl, #118	; 0x76
    36fa:	strb.w	r7, [r2, #1137]	; 0x471
    36fe:	movs	r7, #117	; 0x75
    3700:	strb.w	r6, [r2, #1140]	; 0x474
      _s = s;
    3704:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3708:	strb.w	r4, [r2, #1131]	; 0x46b
    370c:	mvn.w	r4, #96	; 0x60
      _s = s;
    3710:	strb.w	r6, [r2, #1141]	; 0x475
      _b = b;
    3714:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3718:	strb.w	r4, [r2, #1128]	; 0x468
      _s = s;
      _b = b;
    371c:	mvn.w	r4, #21
    3720:	strb.w	r6, [r2, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3724:	mvn.w	r6, #90	; 0x5a
      _s = s;
      _b = b;
    3728:	strb.w	r4, [r2, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    372c:	mvn.w	r4, #71	; 0x47
    3730:	strb.w	r6, [r2, #1143]	; 0x477
      _s = s;
    3734:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3738:	strb.w	r4, [r2, #1155]	; 0x483
      _s = s;
    373c:	mvn.w	r4, #80	; 0x50
    3740:	strb.w	r6, [r2, #1144]	; 0x478
      _b = b;
    3744:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3748:	strb.w	r4, [r2, #1156]	; 0x484
      _b = b;
    374c:	mvn.w	r4, #10
    3750:	strb.w	r6, [r2, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3754:	mvn.w	r6, #70	; 0x46
      _b = b;
    3758:	strb.w	r4, [r2, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    375c:	mvn.w	r4, #114	; 0x72
      _s = s;
    3760:	strb.w	r6, [r2, #1147]	; 0x47b
      _b = b;
    3764:	mvn.w	r6, #19
    3768:	strb.w	r0, [r2, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    376c:	mvn.w	r0, #119	; 0x77
      _s = s;
      _b = b;
    3770:	strb.w	r6, [r2, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3774:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3778:	strb.w	r0, [r2, #1161]	; 0x489
      _s = s;
    377c:	movs	r0, #145	; 0x91
    377e:	strb.w	r6, [r2, #1150]	; 0x47e
      _b = b;
    3782:	mvn.w	r6, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3786:	strb.w	r4, [r2, #1164]	; 0x48c
      _s = s;
    378a:	mov.w	r4, #90	; 0x5a
      _b = b;
    378e:	strb.w	r6, [r2, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3792:	mvn.w	r6, #66	; 0x42
      _s = s;
    3796:	str	r0, [sp, #0]
      _b = b;
    3798:	mvn.w	r0, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    379c:	strb.w	r6, [r2, #1152]	; 0x480
      _s = s;
    37a0:	mvn.w	r6, #92	; 0x5c
    37a4:	strb.w	r4, [r2, #1165]	; 0x48d
      _b = b;
    37a8:	mvn.w	r4, #68	; 0x44
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37ac:	strb.w	r6, [r2, #1153]	; 0x481
    37b0:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37b4:	strb.w	ip, [r2, #1146]	; 0x47a
      _s = s;
    37b8:	strb.w	r6, [r2, #1126]	; 0x466
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37bc:	mvn.w	r6, #116	; 0x74
    37c0:	strb.w	r7, [r2, #1122]	; 0x462
    37c4:	strb.w	r6, [r2, #1167]	; 0x48f
      _s = s;
    37c8:	mvn.w	r6, #5
      _b = b;
    37cc:	strb.w	r8, [r2, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37d0:	strb.w	r6, [r2, #1168]	; 0x490
      _b = b;
    37d4:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37d8:	strb.w	lr, [r2, #1149]	; 0x47d
      _s = s;
      _b = b;
    37dc:	strb.w	r6, [r2, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37e0:	mvn.w	r6, #125	; 0x7d
      _s = s;
      _b = b;
    37e4:	strb.w	r0, [r2, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37e8:	movs	r0, #152	; 0x98
      _s = s;
      _b = b;
    37ea:	strb.w	r4, [r2, #1166]	; 0x48e
    37ee:	movs	r4, #235	; 0xeb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37f0:	strb.w	r6, [r2, #1170]	; 0x492
      _s = s;
      _b = b;
    37f4:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    37f8:	strb.w	lr, [r2, #1186]	; 0x4a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    37fc:	mvn.w	lr, #88	; 0x58
      _s = s;
      _b = b;
    3800:	strb.w	r6, [r2, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3804:	mvn.w	r6, #123	; 0x7b
    3808:	strb.w	lr, [r2, #1158]	; 0x486
      _s = s;
    380c:	mov.w	lr, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3810:	strb.w	r6, [r2, #1173]	; 0x495
      _s = s;
    3814:	movs	r6, #160	; 0xa0
    3816:	strb.w	lr, [r2, #1159]	; 0x487
    381a:	mov.w	lr, #42	; 0x2a
    381e:	str	r6, [sp, #12]
    3820:	mvn.w	r6, #109	; 0x6d
    3824:	strb.w	lr, [r2, #1162]	; 0x48a
    3828:	mov.w	lr, #89	; 0x59
    382c:	strb.w	r6, [r2, #1174]	; 0x496
      _b = b;
    3830:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3834:	strb.w	lr, [r2, #1171]	; 0x493
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3838:	mvn.w	lr, #109	; 0x6d
      _s = s;
      _b = b;
    383c:	strb.w	r6, [r2, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3840:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3844:	str	r0, [sp, #4]
      _s = s;
      _b = b;
    3846:	movs	r0, #237	; 0xed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3848:	strb.w	r6, [r2, #1177]	; 0x499
      _b = b;
    384c:	movs	r6, #239	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    384e:	strb.w	lr, [r2, #1188]	; 0x4a4
      _s = s;
      _b = b;
    3852:	mov	ip, r4
    3854:	str	r6, [sp, #16]
    3856:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    385a:	ldrb.w	lr, [sp, #4]
      _b = b;
    385e:	strb.w	r6, [r2, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3862:	mvn.w	r6, #107	; 0x6b
      _s = s;
    3866:	strb.w	lr, [r2, #1189]	; 0x4a5
      _b = b;
    386a:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    386e:	strb.w	r6, [r2, #1179]	; 0x49b
      _s = s;
    3872:	movs	r6, #180	; 0xb4
      _b = b;
    3874:	strb.w	lr, [r2, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3878:	mvn.w	lr, #93	; 0x5d
      _s = s;
    387c:	str	r6, [sp, #20]
    387e:	mvn.w	r6, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3882:	strb.w	lr, [r2, #1191]	; 0x4a7
      _s = s;
    3886:	mvn.w	lr, #51	; 0x33
    388a:	strb.w	r6, [r2, #1180]	; 0x49c
    388e:	mvn.w	r6, #59	; 0x3b
    3892:	strb.w	lr, [r2, #1192]	; 0x4a8
      _b = b;
    3896:	mvn.w	lr, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    389a:	strb.w	r6, [r2, #1183]	; 0x49f
      _b = b;
    389e:	mvn.w	r6, #42	; 0x2a
    38a2:	strb.w	lr, [r2, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38a6:	mov.w	lr, #102	; 0x66
      _s = s;
      _b = b;
    38aa:	strb.w	r6, [r2, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38ae:	movs	r6, #173	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38b0:	strb.w	r9, [r2, #1176]	; 0x498
      _s = s;
    38b4:	str	r6, [sp, #24]
      _b = b;
    38b6:	mvn.w	r6, #19
    38ba:	strb.w	r4, [r2, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38be:	movs	r4, #129	; 0x81
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38c0:	strb.w	r9, [r2, #1182]	; 0x49e
    38c4:	strb.w	sl, [r2, #1185]	; 0x4a1
    38c8:	mvn.w	sl, #62	; 0x3e
      _s = s;
      _b = b;
    38cc:	strb.w	r6, [r2, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38d0:	mvn.w	r6, #96	; 0x60
    38d4:	strb.w	r5, [r2, #1194]	; 0x4aa
      _s = s;
    38d8:	mov.w	r5, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38dc:	strb.w	lr, [r2, #1197]	; 0x4ad
    38e0:	mov.w	lr, #80	; 0x50
      _s = s;
    38e4:	strb.w	r5, [r2, #1195]	; 0x4ab
      _b = b;
    38e8:	mvn.w	r5, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    38ec:	strb.w	lr, [r2, #1200]	; 0x4b0
      _s = s;
      _b = b;
    38f0:	mvn.w	lr, #76	; 0x4c
    38f4:	strb.w	r5, [r2, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    38f8:	mov.w	r5, #103	; 0x67
      _b = b;
    38fc:	strb.w	lr, [r2, #1208]	; 0x4b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3900:	mov.w	lr, #32
    3904:	strb.w	r5, [r2, #1198]	; 0x4ae
      _b = b;
    3908:	mov.w	r5, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    390c:	strb.w	lr, [r2, #1216]	; 0x4c0
    3910:	mov.w	lr, #67	; 0x43
      _b = b;
    3914:	strb.w	r5, [r2, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3918:	mov.w	r5, #58	; 0x3a
    391c:	strb.w	lr, [r2, #1219]	; 0x4c3
    3920:	mov.w	lr, #94	; 0x5e
    3924:	strb.w	r5, [r2, #1204]	; 0x4b4
      _b = b;
    3928:	mov.w	r5, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    392c:	strb.w	lr, [r2, #1210]	; 0x4ba
      _b = b;
    3930:	mvn.w	lr, #33	; 0x21
    3934:	strb.w	r7, [r2, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3938:	mov.w	r7, #99	; 0x63
      _b = b;
    393c:	strb.w	r5, [r2, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3940:	mov.w	r5, #18
      _s = s;
      _b = b;
    3944:	strb.w	lr, [r2, #1220]	; 0x4c4
    3948:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    394c:	strb.w	r5, [r2, #1206]	; 0x4b6
      _s = s;
    3950:	mov.w	r5, #74	; 0x4a
    3954:	strb.w	r7, [r2, #1213]	; 0x4bd
      _b = b;
    3958:	mvn.w	r7, #37	; 0x25
    395c:	strb.w	lr, [r2, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3960:	mov.w	lr, #99	; 0x63
    3964:	strb.w	r5, [r2, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3968:	mov.w	r5, #17
      _s = s;
      _b = b;
    396c:	strb.w	r7, [r2, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3970:	mvn.w	r7, #43	; 0x2b
      _s = s;
    3974:	strb.w	lr, [r2, #1225]	; 0x4c9
      _b = b;
    3978:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    397c:	strb.w	r5, [r2, #1209]	; 0x4b9
      _s = s;
      _b = b;
    3980:	mvn.w	r5, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3984:	strb.w	r7, [r2, #1215]	; 0x4bf
      _s = s;
      _b = b;
    3988:	mvn.w	r7, #25
    398c:	strb.w	lr, [r2, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3990:	mvn.w	lr, #55	; 0x37
      _s = s;
      _b = b;
    3994:	strb.w	r5, [r2, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3998:	mvn.w	r5, #51	; 0x33
      _s = s;
      _b = b;
    399c:	strb.w	r7, [r2, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39a0:	mvn.w	r7, #70	; 0x46
    39a4:	strb.w	lr, [r2, #1227]	; 0x4cb
      _s = s;
      _b = b;
    39a8:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    39ac:	strb.w	r8, [r2, #1201]	; 0x4b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39b0:	strb.w	r9, [r2, #1203]	; 0x4b3
      _s = s;
      _b = b;
    39b4:	mov.w	r9, #226	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39b8:	strb.w	r5, [r2, #1212]	; 0x4bc
    39bc:	movs	r5, #55	; 0x37
    39be:	strb.w	r7, [r2, #1218]	; 0x4c2
      _s = s;
      _b = b;
    39c2:	movs	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39c4:	strb.w	r6, [r2, #1221]	; 0x4c5
      _s = s;
    39c8:	movs	r6, #39	; 0x27
    39ca:	strb.w	r0, [r2, #1222]	; 0x4c6
      _b = b;
    39ce:	strb.w	lr, [r2, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39d2:	mvn.w	lr, #49	; 0x31
    39d6:	strb.w	sl, [r2, #1233]	; 0x4d1
      _s = s;
      _b = b;
    39da:	mvn.w	sl, #11
    39de:	str.w	ip, [sp, #8]
    39e2:	strb.w	sl, [r2, #1238]	; 0x4d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39e6:	mvn.w	sl, #120	; 0x78
    39ea:	strb.w	lr, [r2, #1230]	; 0x4ce
      _s = s;
    39ee:	mov.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39f2:	strb.w	sl, [r2, #1242]	; 0x4da
    39f6:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    39fa:	strb.w	ip, [r2, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    39fe:	mov.w	ip, #180	; 0xb4
    3a02:	strb.w	sl, [r2, #1245]	; 0x4dd
      _s = s;
    3a06:	mvn.w	sl, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a0a:	strb.w	fp, [r2, #1239]	; 0x4d7
      _s = s;
      _b = b;
    3a0e:	mov.w	fp, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a12:	strb.w	sl, [r2, #1246]	; 0x4de
    3a16:	mvn.w	sl, #84	; 0x54
    3a1a:	strb.w	lr, [r2, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a1e:	mov.w	lr, #177	; 0xb1
      _s = s;
    3a22:	strb.w	sl, [r2, #1249]	; 0x4e1
      _b = b;
    3a26:	mvn.w	sl, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a2a:	strb.w	r0, [r2, #1234]	; 0x4d2
      _b = b;
    3a2e:	strb.w	sl, [r2, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a32:	mvn.w	sl, #122	; 0x7a
    3a36:	strb.w	ip, [r2, #1236]	; 0x4d4
    3a3a:	strb.w	sl, [r2, #1251]	; 0x4e3
      _s = s;
    3a3e:	mov.w	sl, #100	; 0x64
      _b = b;
    3a42:	strb.w	r0, [r2, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a46:	strb.w	sl, [r2, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a4a:	mvn.w	sl, #83	; 0x53
      _s = s;
      _b = b;
    3a4e:	strb.w	fp, [r2, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a52:	strb.w	sl, [r2, #1224]	; 0x4c8
      _s = s;
    3a56:	mov.w	sl, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a5a:	strb.w	r4, [r2, #1248]	; 0x4e0
      _s = s;
    3a5e:	strb.w	sl, [r2, #1228]	; 0x4cc
      _b = b;
    3a62:	mvn.w	sl, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a66:	strb.w	fp, [r2, #1258]	; 0x4ea
    3a6a:	mov.w	fp, #160	; 0xa0
      _b = b;
    3a6e:	strb.w	sl, [r2, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3a72:	mov.w	sl, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a76:	ldr	r3, [pc, #1016]	; (3e70 <_GLOBAL__sub_I_nextTime1+0x26c8>)
      _s = s;
    3a78:	strb.w	sl, [r2, #1237]	; 0x4d5
    3a7c:	mov.w	sl, #72	; 0x48
    3a80:	strb.w	sl, [r2, #1240]	; 0x4d8
    3a84:	mov.w	sl, #40	; 0x28
    3a88:	strb.w	sl, [r2, #1243]	; 0x4db
      _b = b;
    3a8c:	mvn.w	sl, #31
    3a90:	strb.w	sl, [r2, #1244]	; 0x4dc
    3a94:	mvn.w	sl, #22
    3a98:	strb.w	sl, [r2, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3a9c:	mvn.w	sl, #111	; 0x6f
    3aa0:	strb.w	sl, [r2, #1254]	; 0x4e6
      _s = s;
      _b = b;
    3aa4:	mvn.w	sl, #28
    3aa8:	strb.w	sl, [r2, #1256]	; 0x4e8
    3aac:	ldrb.w	sl, [sp, #8]
    3ab0:	strb.w	sl, [r2, #1259]	; 0x4eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ab4:	ldrb.w	sl, [sp, #4]
      _s = s;
    3ab8:	strb.w	ip, [r2, #1267]	; 0x4f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3abc:	strb.w	sl, [r2, #1260]	; 0x4ec
      _s = s;
    3ac0:	mvn.w	sl, #115	; 0x73
    3ac4:	strb.w	fp, [r2, #1264]	; 0x4f0
    3ac8:	strb.w	sl, [r2, #1261]	; 0x4ed
      _b = b;
    3acc:	mvn.w	sl, #31
    3ad0:	strb.w	r0, [r2, #1268]	; 0x4f4
    3ad4:	strb.w	sl, [r2, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ad8:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    3adc:	strb.w	r8, [r2, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ae0:	strb.w	sl, [r2, #1263]	; 0x4ef
      _s = s;
      _b = b;
    3ae4:	ldrb.w	sl, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ae8:	strb.w	r4, [r2, #1279]	; 0x4ff
      _b = b;
    3aec:	strb.w	sl, [r2, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3af0:	mvn.w	sl, #109	; 0x6d
    3af4:	strb.w	r5, [r2, #1272]	; 0x4f8
    3af8:	strb.w	sl, [r2, #1266]	; 0x4f2
      _s = s;
    3afc:	mov	sl, ip
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3afe:	mvn.w	ip, #111	; 0x6f
      _s = s;
      _b = b;
    3b02:	strb.w	r7, [r2, #1286]	; 0x506
    3b06:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b0a:	strb.w	ip, [r2, #1269]	; 0x4f5
      _s = s;
    3b0e:	mov.w	ip, #97	; 0x61
    3b12:	strb.w	ip, [r2, #1270]	; 0x4f6
      _b = b;
    3b16:	mvn.w	ip, #64	; 0x40
    3b1a:	strb.w	ip, [r2, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b1e:	mov.w	ip, #94	; 0x5e
    3b22:	strb.w	ip, [r2, #1273]	; 0x4f9
      _b = b;
    3b26:	mvn.w	ip, #99	; 0x63
    3b2a:	strb.w	ip, [r2, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b2e:	mvn.w	ip, #33	; 0x21
    3b32:	strb.w	ip, [r2, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b36:	mov.w	ip, #108	; 0x6c
    3b3a:	strb.w	ip, [r2, #1281]	; 0x501
      _s = s;
    3b3e:	ldrb.w	ip, [sp, #24]
    3b42:	strb.w	ip, [r2, #1282]	; 0x502
      _b = b;
    3b46:	mov.w	ip, #47	; 0x2f
    3b4a:	strb.w	ip, [r2, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b4e:	mov.w	ip, #18
    3b52:	strb.w	ip, [r2, #1284]	; 0x504
    3b56:	mov.w	ip, #85	; 0x55
    3b5a:	strb.w	ip, [r2, #1278]	; 0x4fe
      _s = s;
    3b5e:	mov.w	ip, #125	; 0x7d
    3b62:	strb.w	ip, [r2, #1255]	; 0x4e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b66:	mov.w	ip, #44	; 0x2c
    3b6a:	strb.w	ip, [r2, #1275]	; 0x4fb
    3b6e:	mvn.w	ip, #108	; 0x6c
    3b72:	strb.w	ip, [r2, #1257]	; 0x4e9
      _s = s;
      _b = b;
    3b76:	mov.w	ip, #53	; 0x35
    3b7a:	strb.w	ip, [r2, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3b7e:	mvn.w	ip, #94	; 0x5e
    3b82:	strb.w	ip, [r2, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b86:	mvn.w	ip, #30
    3b8a:	strb.w	ip, [r2, #1287]	; 0x507
    3b8e:	mvn.w	ip, #109	; 0x6d
      _s = s;
    3b92:	strb.w	r5, [r2, #1318]	; 0x526
    3b96:	mov.w	r5, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3b9a:	strb.w	ip, [r2, #1317]	; 0x525
      _s = s;
    3b9e:	mov.w	ip, #41	; 0x29
    3ba2:	strb.w	r5, [r2, #1288]	; 0x508
      _b = b;
    3ba6:	mvn.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3baa:	strb.w	ip, [r2, #1297]	; 0x511
      _b = b;
    3bae:	mvn.w	ip, #26
    3bb2:	strb.w	r5, [r2, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bb6:	mvn.w	r5, #42	; 0x2a
      _s = s;
      _b = b;
    3bba:	strb.w	ip, [r2, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bbe:	mvn.w	ip, #59	; 0x3b
    3bc2:	strb.w	r5, [r2, #1290]	; 0x50a
    3bc6:	mvn.w	r5, #52	; 0x34
    3bca:	strb.w	ip, [r2, #1302]	; 0x516
    3bce:	strb.w	ip, [r2, #1311]	; 0x51f
    3bd2:	mvn.w	ip, #65	; 0x41
    3bd6:	strb.w	r5, [r2, #1296]	; 0x510
    3bda:	mvn.w	r5, #39	; 0x27
    3bde:	strb.w	ip, [r2, #1305]	; 0x519
      _s = s;
    3be2:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3be6:	strb.w	r5, [r2, #1293]	; 0x50d
      _s = s;
    3bea:	mov.w	r5, #33	; 0x21
    3bee:	strb.w	ip, [r2, #1306]	; 0x51a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bf2:	mvn.w	ip, #41	; 0x29
      _s = s;
    3bf6:	strb.w	r5, [r2, #1294]	; 0x50e
      _b = b;
    3bfa:	mvn.w	r5, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3bfe:	strb.w	ip, [r2, #1308]	; 0x51c
      _s = s;
    3c02:	strb.w	ip, [r2, #1312]	; 0x520
      _b = b;
    3c06:	mvn.w	ip, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c0a:	strb.w	r8, [r2, #1303]	; 0x517
      _b = b;
    3c0e:	mov.w	r8, #70	; 0x46
    3c12:	strb.w	ip, [r2, #1310]	; 0x51e
    3c16:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c1a:	strb.w	fp, [r2, #1299]	; 0x513
      _s = s;
      _b = b;
    3c1e:	mov.w	fp, #98	; 0x62
    3c22:	strb.w	ip, [r2, #1313]	; 0x521
    3c26:	strb.w	ip, [r2, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c2a:	mov.w	ip, #122	; 0x7a
    3c2e:	strb.w	sl, [r2, #1300]	; 0x514
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c32:	mov.w	sl, #12
      _s = s;
    3c36:	strb.w	ip, [r2, #1315]	; 0x523
      _b = b;
    3c3a:	mvn.w	ip, #17
    3c3e:	strb.w	r7, [r2, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c42:	movs	r7, #206	; 0xce
      _b = b;
    3c44:	strb.w	ip, [r2, #1319]	; 0x527
    3c48:	mvn.w	ip, #94	; 0x5e
    3c4c:	strb.w	r0, [r2, #1304]	; 0x518
    3c50:	strb.w	r0, [r2, #1307]	; 0x51b
    3c54:	strb.w	r9, [r2, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c58:	mov.w	r9, #207	; 0xcf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c5c:	strb.w	lr, [r2, #1314]	; 0x522
      _s = s;
    3c60:	mov.w	lr, #80	; 0x50
    3c64:	strb.w	r6, [r2, #1291]	; 0x50b
    3c68:	strb.w	r6, [r2, #1309]	; 0x51d
      _b = b;
    3c6c:	strb.w	r5, [r2, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c70:	movs	r5, #36	; 0x24
      _b = b;
    3c72:	strb.w	ip, [r2, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c76:	ldrb.w	ip, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c7a:	strb.w	r4, [r2, #1320]	; 0x528
      _s = s;
    3c7e:	strb.w	ip, [r2, #1327]	; 0x52f
      _b = b;
    3c82:	mvn.w	ip, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c86:	strb.w	r4, [r2, #1326]	; 0x52e
      _s = s;
      _b = b;
    3c8a:	mvn.w	r4, #22
    3c8e:	strb.w	ip, [r2, #1331]	; 0x533
    3c92:	strb.w	ip, [r2, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3c96:	mvn.w	ip, #108	; 0x6c
      _s = s;
      _b = b;
    3c9a:	strb.w	r4, [r2, #1337]	; 0x539
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3c9e:	movs	r4, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ca0:	strb.w	ip, [r2, #1335]	; 0x537
    3ca4:	ldrb.w	ip, [sp]
      _s = s;
      _b = b;
    3ca8:	strb.w	r0, [r2, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cac:	strb.w	ip, [r2, #1341]	; 0x53d
      _s = s;
      _b = b;
    3cb0:	mvn.w	ip, #11
    3cb4:	strb.w	r0, [r2, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cb8:	mvn.w	r0, #22
      _s = s;
      _b = b;
    3cbc:	strb.w	ip, [r2, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3cc0:	ldrb.w	ip, [sp, #4]
    3cc4:	strb.w	ip, [r2, #1345]	; 0x541
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3cc8:	mov.w	ip, #47	; 0x2f
    3ccc:	strb.w	ip, [r2, #1350]	; 0x546
      _s = s;
    3cd0:	mov.w	ip, #119	; 0x77
    3cd4:	strb.w	ip, [r2, #1342]	; 0x53e
    3cd8:	mov.w	ip, #24
    3cdc:	strb.w	ip, [r2, #1321]	; 0x529
      _b = b;
    3ce0:	mvn.w	ip, #27
    3ce4:	strb.w	ip, [r2, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ce8:	mvn.w	ip, #121	; 0x79
    3cec:	strb.w	ip, [r2, #1323]	; 0x52b
      _s = s;
    3cf0:	mvn.w	ip, #5
    3cf4:	strb.w	ip, [r2, #1324]	; 0x52c
      _b = b;
    3cf8:	mvn.w	ip, #24
    3cfc:	strb.w	ip, [r2, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d00:	mvn.w	ip, #124	; 0x7c
    3d04:	strb.w	ip, [r2, #1329]	; 0x531
      _s = s;
    3d08:	mov.w	ip, #105	; 0x69
    3d0c:	strb.w	ip, [r2, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d10:	mvn.w	ip, #119	; 0x77
    3d14:	strb.w	ip, [r2, #1332]	; 0x534
      _s = s;
    3d18:	mov.w	ip, #99	; 0x63
    3d1c:	strb.w	ip, [r2, #1333]	; 0x535
    3d20:	mov.w	ip, #103	; 0x67
    3d24:	strb.w	ip, [r2, #1336]	; 0x538
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d28:	mvn.w	ip, #104	; 0x68
    3d2c:	strb.w	ip, [r2, #1338]	; 0x53a
      _s = s;
    3d30:	mov.w	ip, #79	; 0x4f
    3d34:	strb.w	ip, [r2, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d38:	mvn.w	ip, #100	; 0x64
    3d3c:	strb.w	ip, [r2, #1344]	; 0x540
    3d40:	mvn.w	ip, #113	; 0x71
    3d44:	strb.w	ip, [r2, #1347]	; 0x543
      _s = s;
    3d48:	mov.w	ip, #88	; 0x58
    3d4c:	strb.w	ip, [r2, #1348]	; 0x544
      _b = b;
    3d50:	mvn.w	ip, #80	; 0x50
    3d54:	strb.w	ip, [r2, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3d58:	mov.w	ip, #124	; 0x7c
    3d5c:	strb.w	lr, [r2, #1384]	; 0x568
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d60:	mov.w	lr, #18
      _s = s;
    3d64:	strb.w	ip, [r2, #1351]	; 0x547
      _b = b;
    3d68:	mov.w	ip, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d6c:	strb.w	lr, [r2, #1362]	; 0x552
    3d70:	mov.w	lr, #52	; 0x34
      _s = s;
      _b = b;
    3d74:	strb.w	ip, [r2, #1352]	; 0x548
    3d78:	mvn.w	ip, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d7c:	strb.w	lr, [r2, #1353]	; 0x549
      _s = s;
    3d80:	mvn.w	lr, #84	; 0x54
      _b = b;
    3d84:	strb.w	ip, [r2, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d88:	mvn.w	ip, #39	; 0x27
      _s = s;
    3d8c:	strb.w	lr, [r2, #1354]	; 0x54a
      _b = b;
    3d90:	mov.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3d94:	strb.w	ip, [r2, #1371]	; 0x55b
      _s = s;
    3d98:	mov.w	ip, #33	; 0x21
      _b = b;
    3d9c:	strb.w	lr, [r2, #1361]	; 0x551
    3da0:	mov.w	lr, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3da4:	strb.w	ip, [r2, #1372]	; 0x55c
      _b = b;
    3da8:	mvn.w	ip, #24
    3dac:	strb.w	lr, [r2, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3db0:	mvn.w	lr, #34	; 0x22
      _s = s;
      _b = b;
    3db4:	strb.w	ip, [r2, #1379]	; 0x563
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3db8:	mov.w	ip, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dbc:	strb.w	lr, [r2, #1365]	; 0x555
      _s = s;
    3dc0:	mov.w	lr, #40	; 0x28
    3dc4:	strb.w	ip, [r2, #1381]	; 0x565
    3dc8:	strb.w	lr, [r2, #1366]	; 0x556
      _b = b;
    3dcc:	mvn.w	lr, #43	; 0x2b
    3dd0:	ldrb.w	ip, [sp, #8]
    3dd4:	strb.w	lr, [r2, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3dd8:	strb.w	lr, [r2, #1368]	; 0x558
    3ddc:	mvn.w	lr, #60	; 0x3c
      _s = s;
    3de0:	strb.w	r6, [r2, #1369]	; 0x559
      _b = b;
    3de4:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3de8:	strb.w	lr, [r2, #1374]	; 0x55e
      _s = s;
    3dec:	mov.w	lr, #59	; 0x3b
      _b = b;
    3df0:	strb.w	ip, [r2, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3df4:	mvn.w	ip, #72	; 0x48
      _s = s;
    3df8:	strb.w	lr, [r2, #1375]	; 0x55f
      _b = b;
    3dfc:	mvn.w	lr, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e00:	strb.w	r0, [r2, #1359]	; 0x54f
    3e04:	movs	r0, #159	; 0x9f
      _s = s;
      _b = b;
    3e06:	strb.w	lr, [r2, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e0a:	mvn.w	lr, #105	; 0x69
      _s = s;
      _b = b;
    3e0e:	strb.w	r6, [r2, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e12:	movs	r6, #173	; 0xad
      _s = s;
      _b = b;
    3e14:	strb.w	fp, [r2, #1355]	; 0x54b
    3e18:	mov.w	fp, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e1c:	strb.w	sl, [r2, #1356]	; 0x54c
      _s = s;
    3e20:	mov.w	sl, #193	; 0xc1
    3e24:	strb.w	r9, [r2, #1357]	; 0x54d
    3e28:	mov.w	r9, #121	; 0x79
      _b = b;
    3e2c:	strb.w	r8, [r2, #1358]	; 0x54e
    3e30:	mov.w	r8, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e34:	strb.w	ip, [r2, #1380]	; 0x564
    3e38:	mvn.w	ip, #57	; 0x39
      _s = s;
    3e3c:	strb.w	r5, [r2, #1360]	; 0x550
    3e40:	strb.w	r7, [r2, #1363]	; 0x553
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e44:	strb.w	lr, [r2, #1377]	; 0x561
      _s = s;
    3e48:	mvn.w	lr, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e4c:	strb.w	ip, [r2, #1389]	; 0x56d
      _s = s;
    3e50:	mvn.w	ip, #55	; 0x37
    3e54:	strb.w	lr, [r2, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e58:	mvn.w	lr, #54	; 0x36
      _s = s;
    3e5c:	strb.w	ip, [r2, #1390]	; 0x56e
      _b = b;
    3e60:	mvn.w	ip, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e64:	strb.w	lr, [r2, #1383]	; 0x567
      _s = s;
      _b = b;
    3e68:	mvn.w	lr, #21
    3e6c:	b.n	3e74 <_GLOBAL__sub_I_nextTime1+0x26cc>
    3e6e:	nop
    3e70:	.word	0x20007254
    3e74:	strb.w	ip, [r2, #1391]	; 0x56f
    3e78:	strb.w	lr, [r2, #1385]	; 0x569
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e7c:	mvn.w	lr, #108	; 0x6c
      _s = s;
      _b = b;
    3e80:	strb.w	ip, [r2, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3e84:	mov.w	ip, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e88:	strb.w	lr, [r2, #1395]	; 0x573
      _s = s;
    3e8c:	mov.w	lr, #124	; 0x7c
    3e90:	strb.w	ip, [r2, #1396]	; 0x574
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3e94:	mvn.w	ip, #125	; 0x7d
      _s = s;
    3e98:	strb.w	lr, [r2, #1393]	; 0x571
      _b = b;
    3e9c:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ea0:	strb.w	ip, [r2, #1398]	; 0x576
      _s = s;
      _b = b;
    3ea4:	mvn.w	ip, #44	; 0x2c
    3ea8:	strb.w	lr, [r2, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3eac:	mov.w	lr, #105	; 0x69
      _b = b;
    3eb0:	strb.w	ip, [r2, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eb4:	mvn.w	ip, #120	; 0x78
      _s = s;
    3eb8:	strb.w	lr, [r2, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ebc:	mvn.w	lr, #124	; 0x7c
    3ec0:	strb.w	ip, [r2, #1401]	; 0x579
      _s = s;
    3ec4:	mvn.w	ip, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ec8:	strb.w	lr, [r2, #1407]	; 0x57f
      _s = s;
    3ecc:	mvn.w	lr, #100	; 0x64
    3ed0:	strb.w	ip, [r2, #1402]	; 0x57a
      _b = b;
    3ed4:	mvn.w	ip, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ed8:	strb.w	lr, [r2, #1408]	; 0x580
      _b = b;
    3edc:	mvn.w	lr, #21
    3ee0:	strb.w	ip, [r2, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ee4:	mvn.w	ip, #127	; 0x7f
      _s = s;
      _b = b;
    3ee8:	strb.w	lr, [r2, #1409]	; 0x581
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3eec:	mvn.w	lr, #99	; 0x63
    3ef0:	strb.w	ip, [r2, #1404]	; 0x57c
      _s = s;
      _b = b;
    3ef4:	mvn.w	ip, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ef8:	strb.w	lr, [r2, #1410]	; 0x582
      _s = s;
      _b = b;
    3efc:	mvn.w	lr, #26
    3f00:	strb.w	ip, [r2, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f04:	mvn.w	ip, #61	; 0x3d
      _b = b;
    3f08:	strb.w	lr, [r2, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f0c:	mov.w	lr, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f10:	strb.w	r6, [r2, #1392]	; 0x570
      _s = s;
    3f14:	strb.w	lr, [r2, #1414]	; 0x586
      _b = b;
    3f18:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f1c:	strb.w	r4, [r2, #1399]	; 0x577
    3f20:	movs	r4, #174	; 0xae
      _b = b;
    3f22:	strb.w	lr, [r2, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f26:	mov.w	lr, #96	; 0x60
    3f2a:	strb.w	lr, [r2, #1417]	; 0x589
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f2e:	mvn.w	lr, #51	; 0x33
    3f32:	strb.w	lr, [r2, #1386]	; 0x56a
      _s = s;
    3f36:	mov.w	lr, #75	; 0x4b
    3f3a:	strb.w	lr, [r2, #1387]	; 0x56b
      _b = b;
    3f3e:	mvn.w	lr, #19
    3f42:	strb.w	lr, [r2, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f46:	mov.w	lr, #78	; 0x4e
    3f4a:	strb.w	ip, [r2, #1411]	; 0x583
      _b = b;
    3f4e:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f52:	strb.w	r5, [r2, #1431]	; 0x597
    3f56:	mov.w	r5, #105	; 0x69
      _s = s;
      _b = b;
    3f5a:	strb.w	ip, [r2, #1418]	; 0x58a
    3f5e:	mvn.w	ip, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f62:	strb.w	r5, [r2, #1434]	; 0x59a
      _s = s;
      _b = b;
    3f66:	mov.w	r5, #88	; 0x58
    3f6a:	strb.w	ip, [r2, #1421]	; 0x58d
    3f6e:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3f72:	strb.w	r7, [r2, #1432]	; 0x598
      _b = b;
    3f76:	strb.w	ip, [r2, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f7a:	mvn.w	ip, #111	; 0x6f
      _s = s;
      _b = b;
    3f7e:	strb.w	r5, [r2, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f82:	mov.w	r5, #108	; 0x6c
    3f86:	strb.w	ip, [r2, #1425]	; 0x591
      _s = s;
    3f8a:	mov.w	ip, #116	; 0x74
      _b = b;
    3f8e:	strb.w	r7, [r2, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3f92:	mvn.w	r7, #90	; 0x5a
      _s = s;
    3f96:	strb.w	ip, [r2, #1441]	; 0x5a1
    3f9a:	mov.w	ip, #53	; 0x35
      _b = b;
    3f9e:	strb.w	r8, [r2, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fa2:	mvn.w	r8, #54	; 0x36
      _s = s;
    3fa6:	strb.w	ip, [r2, #1444]	; 0x5a4
      _b = b;
    3faa:	mvn.w	ip, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fae:	strb.w	r0, [r2, #1413]	; 0x585
      _s = s;
      _b = b;
    3fb2:	strb.w	ip, [r2, #1448]	; 0x5a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3fb6:	mov.w	ip, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fba:	strb.w	r0, [r2, #1416]	; 0x588
      _s = s;
    3fbe:	strb.w	ip, [r2, #1450]	; 0x5aa
    3fc2:	mvn.w	ip, #67	; 0x43
    3fc6:	strb.w	r0, [r2, #1426]	; 0x592
    3fca:	strb.w	ip, [r2, #1438]	; 0x59e
    3fce:	mvn.w	ip, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fd2:	strb.w	r5, [r2, #1437]	; 0x59d
    3fd6:	movs	r5, #132	; 0x84
      _s = s;
    3fd8:	strb.w	ip, [r2, #1420]	; 0x58c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fdc:	mvn.w	ip, #98	; 0x62
      _s = s;
    3fe0:	strb.w	sl, [r2, #1423]	; 0x58f
    3fe4:	mvn.w	sl, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3fe8:	strb.w	ip, [r2, #1422]	; 0x58e
      _s = s;
      _b = b;
    3fec:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    3ff0:	strb.w	r9, [r2, #1429]	; 0x595
      _b = b;
    3ff4:	mov.w	r9, #82	; 0x52
    3ff8:	strb.w	ip, [r2, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    3ffc:	mov.w	ip, #114	; 0x72
    4000:	strb.w	r7, [r2, #1419]	; 0x58b
      _s = s;
      _b = b;
    4004:	mvn.w	r7, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4008:	strb.w	ip, [r2, #1428]	; 0x594
      _s = s;
    400c:	mvn.w	ip, #85	; 0x55
      _b = b;
    4010:	strb.w	fp, [r2, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4014:	strb.w	ip, [r2, #1435]	; 0x59b
      _b = b;
    4018:	mov.w	ip, #46	; 0x2e
    401c:	strb.w	ip, [r2, #1439]	; 0x59f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4020:	mov.w	ip, #26
    4024:	strb.w	ip, [r2, #1440]	; 0x5a0
      _s = s;
      _b = b;
    4028:	mov.w	ip, #92	; 0x5c
    402c:	strb.w	ip, [r2, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4030:	mvn.w	ip, #6
    4034:	strb.w	ip, [r2, #1443]	; 0x5a3
    4038:	mvn.w	ip, #38	; 0x26
    403c:	strb.w	ip, [r2, #1446]	; 0x5a6
      _s = s;
    4040:	mov.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4044:	strb.w	r8, [r2, #1464]	; 0x5b8
      _s = s;
    4048:	mov.w	r8, #117	; 0x75
    404c:	strb.w	ip, [r2, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4050:	mvn.w	ip, #45	; 0x2d
      _s = s;
    4054:	strb.w	r8, [r2, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4058:	mvn.w	r8, #59	; 0x3b
    405c:	strb.w	ip, [r2, #1449]	; 0x5a9
      _s = s;
      _b = b;
    4060:	mvn.w	ip, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4064:	strb.w	r8, [r2, #1467]	; 0x5bb
      _s = s;
    4068:	mvn.w	r8, #64	; 0x40
    406c:	strb.w	lr, [r2, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4070:	mvn.w	lr, #69	; 0x45
      _s = s;
    4074:	strb.w	r8, [r2, #1468]	; 0x5bc
      _b = b;
    4078:	mvn.w	r8, #11
    407c:	strb.w	ip, [r2, #1451]	; 0x5ab
    4080:	strb.w	r8, [r2, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4084:	mvn.w	r8, #121	; 0x79
      _b = b;
    4088:	strb.w	ip, [r2, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    408c:	strb.w	r8, [r2, #1471]	; 0x5bf
      _b = b;
    4090:	mvn.w	r8, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4094:	ldrb.w	ip, [sp, #4]
      _s = s;
      _b = b;
    4098:	strb.w	r8, [r2, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    409c:	mov.w	r8, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40a0:	strb.w	lr, [r2, #1452]	; 0x5ac
      _s = s;
    40a4:	mvn.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40a8:	strb.w	ip, [r2, #1455]	; 0x5af
    40ac:	mvn.w	ip, #65	; 0x41
      _s = s;
    40b0:	strb.w	r8, [r2, #1474]	; 0x5c2
      _b = b;
    40b4:	mvn.w	r8, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40b8:	strb.w	lr, [r2, #1456]	; 0x5b0
      _b = b;
    40bc:	mvn.w	lr, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40c0:	strb.w	ip, [r2, #1458]	; 0x5b2
      _s = s;
      _b = b;
    40c4:	strb.w	r8, [r2, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40c8:	mvn.w	r8, #113	; 0x71
      _s = s;
      _b = b;
    40cc:	ldrb.w	ip, [sp, #16]
    40d0:	strb.w	lr, [r2, #1463]	; 0x5b7
    40d4:	mvn.w	lr, #14
    40d8:	strb.w	r7, [r2, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40dc:	movs	r7, #145	; 0x91
      _s = s;
      _b = b;
    40de:	strb.w	ip, [r2, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40e2:	mvn.w	ip, #57	; 0x39
      _s = s;
    40e6:	strb.w	r6, [r2, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40ea:	mvn.w	r6, #100	; 0x64
    40ee:	strb.w	r8, [r2, #1476]	; 0x5c4
      _s = s;
      _b = b;
    40f2:	mvn.w	r8, #80	; 0x50
    40f6:	strb.w	lr, [r2, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    40fa:	mov.w	lr, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    40fe:	strb.w	ip, [r2, #1461]	; 0x5b5
      _s = s;
      _b = b;
    4102:	mov.w	ip, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4106:	strb.w	r7, [r2, #1473]	; 0x5c1
      _s = s;
      _b = b;
    410a:	strb.w	r8, [r2, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    410e:	mov.w	r8, #129	; 0x81
    4112:	strb.w	sl, [r2, #1483]	; 0x5cb
    4116:	mov.w	sl, #64	; 0x40
    411a:	strb.w	r4, [r2, #1459]	; 0x5b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    411e:	strb.w	r4, [r2, #1470]	; 0x5be
      _s = s;
    4122:	strb.w	lr, [r2, #1477]	; 0x5c5
      _b = b;
    4126:	mvn.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    412a:	strb.w	r6, [r2, #1503]	; 0x5df
      _s = s;
      _b = b;
    412e:	mvn.w	r6, #39	; 0x27
    4132:	strb.w	lr, [r2, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4136:	mvn.w	lr, #114	; 0x72
      _s = s;
      _b = b;
    413a:	strb.w	r6, [r2, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    413e:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4142:	strb.w	lr, [r2, #1479]	; 0x5c7
      _s = s;
    4146:	mvn.w	lr, #3
    414a:	strb.w	r6, [r2, #1510]	; 0x5e6
      _b = b;
    414e:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4152:	strb.w	lr, [r2, #1480]	; 0x5c8
      _b = b;
    4156:	mvn.w	lr, #12
    415a:	strb.w	r6, [r2, #1511]	; 0x5e7
    415e:	mvn.w	r6, #127	; 0x7f
    4162:	strb.w	lr, [r2, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4166:	mov.w	lr, #103	; 0x67
      _s = s;
      _b = b;
    416a:	strb.w	r6, [r2, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    416e:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4172:	strb.w	r5, [r2, #1482]	; 0x5ca
      _s = s;
    4176:	strb.w	r6, [r2, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    417a:	mvn.w	r6, #125	; 0x7d
    417e:	strb.w	lr, [r2, #1506]	; 0x5e2
      _s = s;
    4182:	mov.w	lr, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4186:	strb.w	r6, [r2, #1485]	; 0x5cd
    418a:	mvn.w	r6, #101	; 0x65
    418e:	strb.w	fp, [r2, #1512]	; 0x5e8
      _s = s;
    4192:	mov.w	fp, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4196:	strb.w	r6, [r2, #1488]	; 0x5d0
      _s = s;
    419a:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    419e:	strb.w	r0, [r2, #1491]	; 0x5d3
      _s = s;
    41a2:	strb.w	r6, [r2, #1489]	; 0x5d1
      _b = b;
    41a6:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41aa:	strb.w	r7, [r2, #1492]	; 0x5d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41ae:	movs	r7, #192	; 0xc0
      _s = s;
      _b = b;
    41b0:	strb.w	r6, [r2, #1490]	; 0x5d2
    41b4:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41b8:	strb.w	r4, [r2, #1500]	; 0x5dc
      _s = s;
      _b = b;
    41bc:	strb.w	r6, [r2, #1496]	; 0x5d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41c0:	ldrb.w	r6, [sp, #20]
    41c4:	strb.w	r6, [r2, #1497]	; 0x5d9
      _s = s;
      _b = b;
    41c8:	ldrb.w	r6, [sp, #16]
    41cc:	strb.w	r6, [r2, #1499]	; 0x5db
    41d0:	ldrb.w	r6, [sp, #8]
    41d4:	strb.w	r6, [r2, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    41d8:	mvn.w	r6, #102	; 0x66
    41dc:	strb.w	r6, [r2, #1486]	; 0x5ce
      _b = b;
    41e0:	mvn.w	r6, #8
    41e4:	strb.w	r6, [r2, #1487]	; 0x5cf
    41e8:	mvn.w	r6, #13
    41ec:	strb.w	r6, [r2, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    41f0:	mvn.w	r6, #77	; 0x4d
    41f4:	strb.w	r6, [r2, #1494]	; 0x5d6
      _s = s;
    41f8:	mvn.w	r6, #66	; 0x42
    41fc:	strb.w	r6, [r2, #1495]	; 0x5d7
    4200:	mvn.w	r6, #106	; 0x6a
    4204:	strb.w	r6, [r2, #1498]	; 0x5da
    4208:	mov.w	r6, #113	; 0x71
    420c:	strb.w	r4, [r1, #1546]	; 0x60a
      _b = b;
    4210:	mvn.w	r4, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4214:	strb.w	r6, [r2, #1501]	; 0x5dd
    4218:	mvn.w	r6, #94	; 0x5e
      _b = b;
    421c:	strb.w	r4, [r1, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4220:	mvn.w	r4, #119	; 0x77
      _s = s;
    4224:	strb.w	r6, [r1, #1504]	; 0x5e0
    4228:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    422c:	strb.w	r4, [r1, #1533]	; 0x5fd
    4230:	movs	r2, #187	; 0xbb
      _s = s;
    4232:	strb.w	r6, [r1, #1507]	; 0x5e3
      _b = b;
    4236:	mvn.w	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    423a:	strb.w	r6, [r1, #1509]	; 0x5e5
    423e:	strb.w	r6, [r1, #1515]	; 0x5eb
      _s = s;
    4242:	mvn.w	r6, #58	; 0x3a
      _b = b;
    4246:	strb.w	ip, [r1, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    424a:	strb.w	r6, [r1, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    424e:	mov.w	r6, #113	; 0x71
      _s = s;
      _b = b;
    4252:	strb.w	r9, [r1, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4256:	mov.w	r9, #110	; 0x6e
    425a:	strb.w	r6, [r1, #1518]	; 0x5ee
      _s = s;
      _b = b;
    425e:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4262:	strb.w	r0, [r1, #1530]	; 0x5fa
      _s = s;
      _b = b;
    4266:	strb.w	r6, [r1, #1520]	; 0x5f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    426a:	mvn.w	r6, #34	; 0x22
    426e:	strb.w	r0, [r1, #1548]	; 0x60c
    4272:	strb.w	r6, [r1, #1521]	; 0x5f1
      _s = s;
      _b = b;
    4276:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    427a:	strb.w	r8, [r1, #1519]	; 0x5ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    427e:	mov.w	r8, #145	; 0x91
      _s = s;
      _b = b;
    4282:	strb.w	r6, [r1, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4286:	mvn.w	r6, #58	; 0x3a
      _s = s;
    428a:	strb.w	sl, [r1, #1522]	; 0x5f2
    428e:	mvn.w	sl, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4292:	strb.w	r6, [r1, #1524]	; 0x5f4
      _s = s;
      _b = b;
    4296:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    429a:	strb.w	lr, [r1, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    429e:	mov.w	lr, #158	; 0x9e
      _s = s;
      _b = b;
    42a2:	strb.w	r6, [r1, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42a6:	mvn.w	r6, #65	; 0x41
      _s = s;
    42aa:	strb.w	fp, [r1, #1537]	; 0x601
    42ae:	mov.w	fp, #139	; 0x8b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42b2:	strb.w	r6, [r1, #1527]	; 0x5f7
      _s = s;
      _b = b;
    42b6:	mvn.w	r6, #21
    42ba:	strb.w	r6, [r1, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42be:	mvn.w	r6, #102	; 0x66
    42c2:	strb.w	r6, [r1, #1531]	; 0x5fb
      _b = b;
    42c6:	mvn.w	r6, #24
    42ca:	strb.w	r6, [r1, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42ce:	mvn.w	r6, #85	; 0x55
    42d2:	strb.w	r6, [r1, #1534]	; 0x5fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42d6:	mvn.w	r6, #56	; 0x38
    42da:	strb.w	r6, [r1, #1539]	; 0x603
      _s = s;
    42de:	mvn.w	r6, #66	; 0x42
    42e2:	strb.w	r6, [r1, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    42e6:	mvn.w	r6, #55	; 0x37
    42ea:	strb.w	r6, [r1, #1542]	; 0x606
      _s = s;
      _b = b;
    42ee:	mvn.w	r6, #14
    42f2:	strb.w	r6, [r1, #1544]	; 0x608
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42f6:	mvn.w	r6, #3
      _b = b;
    42fa:	strb.w	r4, [r1, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    42fe:	mvn.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4302:	strb.w	r2, [r1, #1572]	; 0x624
      _s = s;
      _b = b;
    4306:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    430a:	strb.w	r6, [r1, #1558]	; 0x616
      _b = b;
    430e:	mvn.w	r6, #85	; 0x55
    4312:	strb.w	r2, [r1, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4316:	mvn.w	r2, #113	; 0x71
      _s = s;
    431a:	strb.w	r4, [r1, #1543]	; 0x607
    431e:	mov.w	r4, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4322:	strb.w	r2, [r1, #1557]	; 0x615
    4326:	mvn.w	r2, #121	; 0x79
      _s = s;
      _b = b;
    432a:	strb.w	r6, [r1, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    432e:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4332:	strb.w	r2, [r1, #1560]	; 0x618
      _s = s;
    4336:	mvn.w	r2, #124	; 0x7c
    433a:	strb.w	r4, [r1, #1549]	; 0x60d
    433e:	mov.w	r4, #108	; 0x6c
    4342:	strb.w	r6, [r1, #1564]	; 0x61c
      _b = b;
    4346:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    434a:	strb.w	r2, [r1, #1570]	; 0x622
      _b = b;
    434e:	mvn.w	r2, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4352:	strb.w	r4, [r1, #1528]	; 0x5f8
      _b = b;
    4356:	mvn.w	r4, #22
    435a:	strb.w	r6, [r1, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    435e:	mvn.w	r6, #58	; 0x3a
      _b = b;
    4362:	strb.w	r2, [r1, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4366:	mov.w	r2, #52	; 0x34
      _b = b;
    436a:	strb.w	r4, [r1, #1535]	; 0x5ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    436e:	mvn.w	r4, #73	; 0x49
      _s = s;
    4372:	strb.w	r6, [r1, #1567]	; 0x61f
      _b = b;
    4376:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    437a:	strb.w	r2, [r1, #1576]	; 0x628
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    437e:	mvn.w	r2, #118	; 0x76
    4382:	strb.w	r4, [r1, #1536]	; 0x600
      _s = s;
      _b = b;
    4386:	mvn.w	r4, #16
    438a:	strb.w	r6, [r1, #1571]	; 0x623
    438e:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4392:	strb.w	r2, [r1, #1551]	; 0x60f
      _s = s;
      _b = b;
    4396:	mvn.w	r2, #20
    439a:	strb.w	r4, [r1, #1541]	; 0x605
    439e:	mvn.w	r4, #15
    43a2:	strb.w	r6, [r1, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43a6:	mvn.w	r6, #50	; 0x32
      _s = s;
      _b = b;
    43aa:	strb.w	r2, [r1, #1553]	; 0x611
    43ae:	strb.w	r2, [r1, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43b2:	mvn.w	r2, #108	; 0x6c
      _s = s;
      _b = b;
    43b6:	strb.w	r4, [r1, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43ba:	mov.w	r4, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43be:	strb.w	r6, [r1, #1578]	; 0x62a
    43c2:	mvn.w	r6, #77	; 0x4d
    43c6:	strb.w	r2, [r1, #1554]	; 0x612
      _s = s;
    43ca:	mov.w	r2, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43ce:	strb.w	r7, [r1, #1545]	; 0x609
      _s = s;
    43d2:	strb.w	r4, [r1, #1552]	; 0x610
      _b = b;
    43d6:	movs	r4, #246	; 0xf6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43d8:	strb.w	r5, [r1, #1563]	; 0x61b
      _s = s;
    43dc:	strb.w	ip, [r1, #1573]	; 0x625
      _b = b;
    43e0:	mov.w	ip, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43e4:	strb.w	r6, [r1, #1581]	; 0x62d
      _s = s;
      _b = b;
    43e8:	movs	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43ea:	strb.w	r5, [r1, #1582]	; 0x62e
      _b = b;
    43ee:	movs	r5, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    43f0:	strb.w	r2, [r1, #1555]	; 0x613
    43f4:	strb.w	r2, [r1, #1579]	; 0x62b
    43f8:	mvn.w	r2, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    43fc:	strb.w	lr, [r1, #1599]	; 0x63f
    4400:	mvn.w	lr, #113	; 0x71
      _s = s;
    4404:	strb.w	r2, [r1, #1561]	; 0x619
      _b = b;
    4408:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    440c:	strb.w	lr, [r1, #1584]	; 0x630
    4410:	mvn.w	lr, #124	; 0x7c
      _s = s;
      _b = b;
    4414:	strb.w	r2, [r1, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4418:	mvn.w	r2, #109	; 0x6d
    441c:	strb.w	lr, [r1, #1590]	; 0x636
    4420:	strb.w	r2, [r1, #1569]	; 0x621
    4424:	mvn.w	r2, #53	; 0x35
    4428:	strb.w	lr, [r1, #1593]	; 0x639
      _s = s;
    442c:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4430:	strb.w	r2, [r1, #1575]	; 0x627
      _s = s;
      _b = b;
    4434:	mvn.w	r2, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4438:	strb.w	lr, [r1, #1597]	; 0x63d
      _b = b;
    443c:	mvn.w	lr, #24
    4440:	strb.w	r2, [r1, #1583]	; 0x62f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4444:	mvn.w	r2, #20
      _b = b;
    4448:	strb.w	lr, [r1, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    444c:	mvn.w	lr, #5
    4450:	strb.w	r2, [r1, #1591]	; 0x637
      _b = b;
    4454:	mvn.w	r2, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4458:	strb.w	sl, [r1, #1609]	; 0x649
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    445c:	mvn.w	sl, #108	; 0x6c
      _s = s;
      _b = b;
    4460:	strb.w	r2, [r1, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4464:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4468:	strb.w	r9, [r1, #1587]	; 0x633
      _s = s;
      _b = b;
    446c:	mvn.w	r9, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4470:	strb.w	r2, [r1, #1594]	; 0x63a
      _b = b;
    4474:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4478:	strb.w	lr, [r1, #1606]	; 0x646
    447c:	mvn.w	lr, #60	; 0x3c
      _b = b;
    4480:	strb.w	r2, [r1, #1601]	; 0x641
    4484:	mvn.w	r2, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4488:	strb.w	r8, [r1, #1566]	; 0x61e
      _s = s;
      _b = b;
    448c:	strb.w	r2, [r1, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4490:	mvn.w	r2, #98	; 0x62
      _s = s;
      _b = b;
    4494:	strb.w	r4, [r1, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4498:	strb.w	r2, [r1, #1608]	; 0x648
    449c:	movs	r2, #160	; 0xa0
      _s = s;
    449e:	strb.w	r7, [r1, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44a2:	strb.w	r8, [r1, #1596]	; 0x63c
    44a6:	strb.w	r0, [r1, #1605]	; 0x645
    44aa:	strb.w	sl, [r1, #1611]	; 0x64b
      _s = s;
    44ae:	mov.w	sl, #209	; 0xd1
      _b = b;
    44b2:	strb.w	r5, [r1, #1589]	; 0x635
    44b6:	movs	r5, #118	; 0x76
    44b8:	strb.w	ip, [r1, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44bc:	mov.w	ip, #176	; 0xb0
      _b = b;
    44c0:	strb.w	r6, [r1, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44c4:	movs	r6, #227	; 0xe3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44c6:	strb.w	r2, [r1, #1602]	; 0x642
      _s = s;
    44ca:	movs	r2, #115	; 0x73
    44cc:	strb.w	lr, [r1, #1612]	; 0x64c
    44d0:	mov.w	lr, #162	; 0xa2
      _b = b;
    44d4:	strb.w	r9, [r1, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44d8:	mvn.w	r9, #101	; 0x65
      _s = s;
    44dc:	strb.w	lr, [r1, #1648]	; 0x670
    44e0:	mvn.w	lr, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44e4:	strb.w	r9, [r1, #1614]	; 0x64e
      _s = s;
      _b = b;
    44e8:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    44ec:	strb.w	lr, [r1, #1618]	; 0x652
    44f0:	mvn.w	lr, #124	; 0x7c
      _b = b;
    44f4:	strb.w	r9, [r1, #1616]	; 0x650
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    44f8:	mvn.w	r9, #66	; 0x42
      _s = s;
    44fc:	strb.w	ip, [r1, #1600]	; 0x640
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4500:	strb.w	r9, [r1, #1617]	; 0x651
      _s = s;
      _b = b;
    4504:	mvn.w	r9, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4508:	strb.w	ip, [r1, #1633]	; 0x661
      _b = b;
    450c:	mvn.w	ip, #20
    4510:	strb.w	r9, [r1, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4514:	mvn.w	r9, #61	; 0x3d
      _s = s;
    4518:	strb.w	lr, [r1, #1624]	; 0x658
      _b = b;
    451c:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4520:	strb.w	r9, [r1, #1620]	; 0x654
      _s = s;
      _b = b;
    4524:	mvn.w	r9, #16
    4528:	strb.w	ip, [r1, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    452c:	mvn.w	ip, #114	; 0x72
      _s = s;
      _b = b;
    4530:	strb.w	lr, [r1, #1628]	; 0x65c
    4534:	mvn.w	lr, #21
    4538:	strb.w	r9, [r1, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    453c:	mvn.w	r9, #88	; 0x58
    4540:	strb.w	ip, [r1, #1635]	; 0x663
      _s = s;
    4544:	mvn.w	ip, #88	; 0x58
      _b = b;
    4548:	strb.w	lr, [r1, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    454c:	mvn.w	lr, #113	; 0x71
    4550:	strb.w	r9, [r1, #1623]	; 0x657
      _s = s;
      _b = b;
    4554:	mvn.w	r9, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4558:	strb.w	ip, [r1, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    455c:	mvn.w	ip, #118	; 0x76
    4560:	strb.w	lr, [r1, #1632]	; 0x660
      _s = s;
    4564:	mov.w	lr, #40	; 0x28
      _b = b;
    4568:	strb.w	r9, [r1, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    456c:	mov.w	r9, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4570:	strb.w	ip, [r1, #1644]	; 0x66c
      _s = s;
    4574:	mvn.w	ip, #50	; 0x32
    4578:	strb.w	lr, [r1, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    457c:	mov.w	lr, #122	; 0x7a
      _s = s;
    4580:	strb.w	r9, [r1, #1627]	; 0x65b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4584:	mvn.w	r9, #120	; 0x78
      _s = s;
    4588:	strb.w	ip, [r1, #1645]	; 0x66d
      _b = b;
    458c:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4590:	strb.w	lr, [r1, #1641]	; 0x669
      _s = s;
    4594:	mov.w	lr, #116	; 0x74
    4598:	strb.w	sl, [r1, #1585]	; 0x631
      _b = b;
    459c:	strb.w	r5, [r1, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45a0:	strb.w	r6, [r1, #1603]	; 0x643
      _b = b;
    45a4:	strb.w	r6, [r1, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45a8:	strb.w	fp, [r1, #1615]	; 0x64f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ac:	strb.w	r9, [r1, #1629]	; 0x65d
      _s = s;
    45b0:	mov.w	r9, #57	; 0x39
      _b = b;
    45b4:	strb.w	ip, [r1, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45b8:	strb.w	r2, [r1, #1621]	; 0x655
      _b = b;
    45bc:	movs	r2, #148	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45be:	strb.w	lr, [r1, #1642]	; 0x66a
      _b = b;
    45c2:	mvn.w	lr, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45c6:	strb.w	r7, [r1, #1669]	; 0x685
      _b = b;
    45ca:	mvn.w	r7, #112	; 0x70
    45ce:	strb.w	lr, [r1, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45d2:	mvn.w	lr, #111	; 0x6f
      _s = s;
      _b = b;
    45d6:	strb.w	r7, [r1, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45da:	mvn.w	r7, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45de:	strb.w	lr, [r1, #1626]	; 0x65a
    45e2:	mov.w	lr, #94	; 0x5e
      _s = s;
    45e6:	strb.w	r7, [r1, #1675]	; 0x68b
    45ea:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45ee:	strb.w	lr, [r1, #1638]	; 0x666
      _s = s;
      _b = b;
    45f2:	mvn.w	lr, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    45f6:	strb.w	r7, [r1, #1678]	; 0x68e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    45fa:	mvn.w	r7, #51	; 0x33
      _s = s;
      _b = b;
    45fe:	strb.w	lr, [r1, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4602:	mvn.w	lr, #103	; 0x67
    4606:	strb.w	r5, [r1, #1668]	; 0x684
    460a:	movs	r5, #84	; 0x54
    460c:	strb.w	lr, [r1, #1647]	; 0x66f
      _s = s;
    4610:	mov.w	lr, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4614:	strb.w	r7, [r1, #1653]	; 0x675
      _s = s;
      _b = b;
    4618:	mvn.w	r7, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    461c:	strb.w	lr, [r1, #1651]	; 0x673
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4620:	mvn.w	lr, #71	; 0x47
    4624:	strb.w	r5, [r1, #1665]	; 0x681
    4628:	movs	r5, #100	; 0x64
    462a:	strb.w	lr, [r1, #1650]	; 0x672
      _s = s;
      _b = b;
    462e:	mvn.w	lr, #6
    4632:	strb.w	r7, [r1, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4636:	mvn.w	r7, #65	; 0x41
      _b = b;
    463a:	strb.w	lr, [r1, #1652]	; 0x674
    463e:	strb.w	lr, [r1, #1655]	; 0x677
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4642:	mvn.w	lr, #38	; 0x26
    4646:	strb.w	r5, [r1, #1671]	; 0x687
      _s = s;
    464a:	mov.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    464e:	strb.w	lr, [r1, #1659]	; 0x67b
      _s = s;
    4652:	mov.w	lr, #37	; 0x25
    4656:	strb.w	r7, [r1, #1672]	; 0x688
      _b = b;
    465a:	mvn.w	r7, #113	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    465e:	strb.w	lr, [r1, #1660]	; 0x67c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4662:	mvn.w	lr, #94	; 0x5e
      _s = s;
    4666:	strb.w	r5, [r1, #1654]	; 0x676
      _b = b;
    466a:	mvn.w	r5, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    466e:	strb.w	lr, [r1, #1662]	; 0x67e
      _s = s;
      _b = b;
    4672:	mvn.w	lr, #77	; 0x4d
    4676:	strb.w	r7, [r1, #1676]	; 0x68c
    467a:	mvn.w	r7, #65	; 0x41
    467e:	strb.w	lr, [r1, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4682:	mov.w	lr, #81	; 0x51
    4686:	strb.w	r9, [r1, #1630]	; 0x65e
      _b = b;
    468a:	strb.w	r2, [r1, #1637]	; 0x665
    468e:	strb.w	r4, [r1, #1649]	; 0x671
    4692:	strb.w	r4, [r1, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4696:	strb.w	r8, [r1, #1674]	; 0x68a
    469a:	strb.w	r2, [r1, #1677]	; 0x68d
      _s = s;
      _b = b;
    469e:	strb.w	r5, [r1, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a2:	movs	r5, #208	; 0xd0
      _s = s;
      _b = b;
    46a4:	strb.w	r7, [r1, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46a8:	mvn.w	r7, #101	; 0x65
      _s = s;
    46ac:	strb.w	lr, [r1, #1657]	; 0x679
    46b0:	strb.w	lr, [r1, #1663]	; 0x67f
    46b4:	mov.w	lr, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46b8:	strb.w	r0, [r1, #1689]	; 0x699
      _s = s;
      _b = b;
    46bc:	movs	r0, #223	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46be:	strb.w	lr, [r1, #1666]	; 0x682
      _b = b;
    46c2:	mvn.w	lr, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46c6:	strb.w	r7, [r1, #1680]	; 0x690
      _s = s;
    46ca:	mvn.w	r7, #105	; 0x69
      _b = b;
    46ce:	strb.w	lr, [r1, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46d2:	mov.w	lr, #75	; 0x4b
      _b = b;
    46d6:	strb.w	r0, [r1, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46da:	movs	r0, #86	; 0x56
    46dc:	strb.w	lr, [r1, #1684]	; 0x694
    46e0:	mvn.w	lr, #3
    46e4:	strb.w	r7, [r1, #1681]	; 0x691
      _b = b;
    46e8:	movs	r7, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    46ea:	strb.w	lr, [r1, #1690]	; 0x69a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46ee:	mvn.w	lr, #106	; 0x6a
      _s = s;
    46f2:	strb.w	r0, [r1, #1714]	; 0x6b2
      _b = b;
    46f6:	mvn.w	r0, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    46fa:	strb.w	lr, [r1, #1698]	; 0x6a2
      _s = s;
      _b = b;
    46fe:	mvn.w	lr, #20
    4702:	strb.w	r7, [r1, #1673]	; 0x689
    4706:	strb.w	lr, [r1, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    470a:	mvn.w	lr, #87	; 0x57
    470e:	strb.w	r7, [r1, #1708]	; 0x6ac
    4712:	movs	r7, #61	; 0x3d
    4714:	strb.w	lr, [r1, #1702]	; 0x6a6
      _b = b;
    4718:	mvn.w	lr, #20
    471c:	strb.w	r0, [r1, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4720:	mvn.w	r0, #121	; 0x79
      _b = b;
    4724:	strb.w	lr, [r1, #1703]	; 0x6a7
    4728:	mvn.w	lr, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    472c:	strb.w	r5, [r1, #1656]	; 0x678
      _s = s;
      _b = b;
    4730:	strb.w	lr, [r1, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4734:	mvn.w	lr, #103	; 0x67
    4738:	strb.w	r2, [r1, #1686]	; 0x696
    473c:	strb.w	lr, [r1, #1710]	; 0x6ae
    4740:	mvn.w	lr, #22
    4744:	strb.w	r8, [r1, #1692]	; 0x69c
    4748:	strb.w	lr, [r1, #1713]	; 0x6b1
      _s = s;
    474c:	mov.w	lr, #58	; 0x3a
    4750:	strb.w	r5, [r1, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4754:	strb.w	r8, [r1, #1695]	; 0x69f
      _s = s;
      _b = b;
    4758:	strb.w	ip, [r1, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    475c:	strb.w	r2, [r1, #1701]	; 0x6a5
      _s = s;
      _b = b;
    4760:	strb.w	ip, [r1, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4764:	mov.w	ip, #138	; 0x8a
      _s = s;
      _b = b;
    4768:	strb.w	r6, [r1, #1712]	; 0x6b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    476c:	strb.w	r7, [r1, #1705]	; 0x6a9
    4770:	mvn.w	r7, #19
    4774:	strb.w	lr, [r1, #1711]	; 0x6af
      _b = b;
    4778:	mov.w	lr, #219	; 0xdb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    477c:	strb.w	r0, [r1, #1687]	; 0x697
      _b = b;
    4780:	mvn.w	r0, #39	; 0x27
    4784:	strb.w	r4, [r1, #1727]	; 0x6bf
    4788:	strb.w	r0, [r1, #1691]	; 0x69b
    478c:	mvn.w	r0, #24
    4790:	strb.w	r4, [r1, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4794:	movs	r4, #44	; 0x2c
      _b = b;
    4796:	strb.w	r0, [r1, #1694]	; 0x69e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    479a:	mvn.w	r0, #59	; 0x3b
    479e:	strb.w	r4, [r1, #1720]	; 0x6b8
    47a2:	movs	r4, #50	; 0x32
    47a4:	strb.w	r0, [r1, #1699]	; 0x6a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47a8:	mvn.w	r0, #115	; 0x73
      _s = s;
    47ac:	strb.w	r4, [r1, #1732]	; 0x6c4
    47b0:	mov.w	r4, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47b4:	strb.w	r0, [r1, #1683]	; 0x693
    47b8:	strb.w	r0, [r1, #1707]	; 0x6ab
      _s = s;
    47bc:	mvn.w	r0, #40	; 0x28
    47c0:	strb.w	r4, [r1, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47c4:	mov.w	r4, #59	; 0x3b
      _s = s;
    47c8:	strb.w	r0, [r1, #1696]	; 0x6a0
      _b = b;
    47cc:	mvn.w	r0, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47d0:	strb.w	r4, [r1, #1719]	; 0x6b7
      _s = s;
    47d4:	mov.w	r4, #79	; 0x4f
      _b = b;
    47d8:	strb.w	r0, [r1, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47dc:	mvn.w	r0, #12
      _s = s;
      _b = b;
    47e0:	strb.w	r6, [r1, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47e4:	movs	r6, #125	; 0x7d
    47e6:	strb.w	r0, [r1, #1716]	; 0x6b4
      _s = s;
    47ea:	mov.w	r0, #95	; 0x5f
    47ee:	strb.w	r4, [r1, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47f2:	mvn.w	r4, #121	; 0x79
      _s = s;
    47f6:	strb.w	r0, [r1, #1726]	; 0x6be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    47fa:	mvn.w	r0, #66	; 0x42
    47fe:	strb.w	ip, [r1, #1704]	; 0x6a8
    4802:	strb.w	r0, [r1, #1728]	; 0x6c0
      _s = s;
      _b = b;
    4806:	mvn.w	r0, #6
    480a:	strb.w	r9, [r1, #1721]	; 0x6b9
    480e:	strb.w	r0, [r1, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4812:	mvn.w	r0, #45	; 0x2d
      _s = s;
      _b = b;
    4816:	strb.w	r5, [r1, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    481a:	strb.w	r0, [r1, #1734]	; 0x6c6
    481e:	mvn.w	r0, #50	; 0x32
      _s = s;
    4822:	strb.w	r9, [r1, #1735]	; 0x6c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4826:	strb.w	r0, [r1, #1737]	; 0x6c9
      _s = s;
      _b = b;
    482a:	mvn.w	r0, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    482e:	strb.w	r7, [r1, #1747]	; 0x6d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4832:	movs	r7, #133	; 0x85
      _s = s;
      _b = b;
    4834:	strb.w	r0, [r1, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4838:	mvn.w	r0, #94	; 0x5e
    483c:	strb.w	r6, [r1, #1722]	; 0x6ba
    4840:	movs	r6, #42	; 0x2a
    4842:	strb.w	r0, [r1, #1740]	; 0x6cc
      _s = s;
    4846:	mvn.w	r0, #12
    484a:	strb.w	r0, [r1, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    484e:	mvn.w	r0, #118	; 0x76
    4852:	strb.w	r0, [r1, #1746]	; 0x6d2
    4856:	movs	r0, #191	; 0xbf
    4858:	strb.w	r0, [r1, #1731]	; 0x6c3
      _s = s;
      _b = b;
    485c:	mov	r0, r1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    485e:	strb.w	r4, [r1, #1725]	; 0x6bd
      _s = s;
    4862:	mov.w	r4, #116	; 0x74
      _b = b;
    4866:	strb.w	r5, [r1, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    486a:	mvn.w	r5, #84	; 0x54
    486e:	strb.w	r4, [r1, #1729]	; 0x6c1
      _b = b;
    4872:	mvn.w	r4, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4876:	strb.w	r5, [r1, #1762]	; 0x6e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    487a:	mvn.w	r5, #101	; 0x65
      _s = s;
      _b = b;
    487e:	strb.w	r4, [r1, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4882:	mov.w	r4, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4886:	strb.w	r5, [r1, #1770]	; 0x6ea
    488a:	mvn.w	r5, #113	; 0x71
      _s = s;
    488e:	strb.w	r4, [r1, #1738]	; 0x6ca
    4892:	mov.w	r4, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4896:	strb.w	r5, [r1, #1773]	; 0x6ed
      _s = s;
      _b = b;
    489a:	mvn.w	r5, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    489e:	strb.w	r4, [r1, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48a2:	mvn.w	r4, #121	; 0x79
      _s = s;
      _b = b;
    48a6:	strb.w	r5, [r1, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48aa:	mvn.w	r5, #124	; 0x7c
    48ae:	strb.w	r4, [r1, #1743]	; 0x6cf
      _s = s;
      _b = b;
    48b2:	mov.w	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48b6:	strb.w	r5, [r1, #1779]	; 0x6f3
      _s = s;
    48ba:	mov.w	r5, #24
      _b = b;
    48be:	strb.w	r4, [r1, #1718]	; 0x6b6
    48c2:	mvn.w	r4, #35	; 0x23
    48c6:	strb.w	sl, [r1, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48ca:	mov.w	sl, #1
      _s = s;
      _b = b;
    48ce:	strb.w	r4, [r1, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48d2:	mvn.w	r4, #108	; 0x6c
    48d6:	strb.w	r9, [r1, #1755]	; 0x6db
    48da:	strb.w	r4, [r1, #1749]	; 0x6d5
      _s = s;
    48de:	mov.w	r4, #91	; 0x5b
    48e2:	strb.w	ip, [r1, #1759]	; 0x6df
    48e6:	strb.w	r4, [r1, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48ea:	mvn.w	r4, #102	; 0x66
    48ee:	strb.w	fp, [r1, #1776]	; 0x6f0
      _s = s;
    48f2:	mov.w	fp, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    48f6:	strb.w	r4, [r1, #1767]	; 0x6e7
      _s = s;
    48fa:	mvn.w	r4, #85	; 0x55
    48fe:	strb.w	r9, [r1, #1777]	; 0x6f1
    4902:	mov.w	r9, #90	; 0x5a
    4906:	strb.w	r4, [r1, #1768]	; 0x6e8
    490a:	mvn.w	r4, #57	; 0x39
    490e:	strb.w	r4, [r1, #1774]	; 0x6ee
      _b = b;
    4912:	mvn.w	r4, #23
    4916:	strb.w	r4, [r1, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    491a:	mvn.w	r4, #43	; 0x2b
    491e:	strb.w	r4, [r1, #1750]	; 0x6d6
    4922:	mvn.w	r4, #25
    4926:	strb.w	r4, [r1, #1753]	; 0x6d9
      _b = b;
    492a:	mvn.w	r4, #100	; 0x64
    492e:	strb.w	r4, [r1, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4932:	mov.w	r4, #99	; 0x63
    4936:	strb.w	r4, [r1, #1756]	; 0x6dc
      _b = b;
    493a:	mvn.w	r4, #43	; 0x2b
    493e:	strb.w	r4, [r1, #1757]	; 0x6dd
    4942:	mvn.w	r4, #39	; 0x27
    4946:	strb.w	r4, [r1, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    494a:	mov.w	r4, #33	; 0x21
    494e:	strb.w	r4, [r1, #1761]	; 0x6e1
    4952:	movs	r4, #33	; 0x21
    4954:	str	r4, [sp, #24]
    4956:	mov.w	r4, #34	; 0x22
      _s = s;
    495a:	strb.w	r5, [r1, #1780]	; 0x6f4
      _b = b;
    495e:	mov.w	r5, #89	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4962:	strb.w	r7, [r1, #1752]	; 0x6d8
    4966:	mvn.w	r7, #119	; 0x77
      _s = s;
      _b = b;
    496a:	strb.w	r5, [r1, #1751]	; 0x6d7
    496e:	mvn.w	r5, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4972:	strb.w	r7, [r1, #1803]	; 0x70b
      _s = s;
    4976:	mvn.w	r7, #69	; 0x45
      _b = b;
    497a:	strb.w	r5, [r1, #1763]	; 0x6e3
    497e:	mvn.w	r5, #27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4982:	strb.w	r2, [r1, #1800]	; 0x708
      _s = s;
    4986:	mov.w	r2, #95	; 0x5f
      _b = b;
    498a:	strb.w	r5, [r1, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    498e:	mvn.w	r5, #114	; 0x72
      _s = s;
    4992:	strb.w	r7, [r1, #1804]	; 0x70c
      _b = b;
    4996:	mvn.w	r7, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    499a:	strb.w	r5, [r1, #1782]	; 0x6f6
      _s = s;
      _b = b;
    499e:	mvn.w	r5, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    49a2:	strb.w	r2, [r1, #1801]	; 0x709
      _b = b;
    49a6:	mov.w	r2, #88	; 0x58
    49aa:	strb.w	r5, [r1, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49ae:	mvn.w	r5, #43	; 0x2b
      _s = s;
      _b = b;
    49b2:	strb.w	r7, [r1, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49b6:	mvn.w	r7, #111	; 0x6f
    49ba:	strb.w	r5, [r1, #1785]	; 0x6f9
      _s = s;
    49be:	mov.w	r5, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49c2:	strb.w	r6, [r1, #1758]	; 0x6de
      _s = s;
    49c6:	movs	r6, #43	; 0x2b
    49c8:	strb.w	r5, [r1, #1786]	; 0x6fa
      _b = b;
    49cc:	mvn.w	r5, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49d0:	strb.w	r4, [r1, #1764]	; 0x6e4
      _s = s;
    49d4:	mvn.w	r4, #2
      _b = b;
    49d8:	strb.w	r5, [r1, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49dc:	mvn.w	r5, #21
      _s = s;
      _b = b;
    49e0:	strb.w	r2, [r1, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49e4:	movs	r2, #37	; 0x25
    49e6:	strb.w	r5, [r1, #1788]	; 0x6fc
      _s = s;
    49ea:	mvn.w	r5, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    49ee:	strb.w	r7, [r1, #1806]	; 0x70e
      _s = s;
    49f2:	movs	r7, #230	; 0xe6
    49f4:	strb.w	r5, [r1, #1789]	; 0x6fd
      _b = b;
    49f8:	mvn.w	r5, #38	; 0x26
    49fc:	strb.w	lr, [r1, #1769]	; 0x6e9
    4a00:	strb.w	r5, [r1, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a04:	mvn.w	r5, #56	; 0x38
      _b = b;
    4a08:	strb.w	lr, [r1, #1772]	; 0x6ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a0c:	strb.w	r5, [r1, #1792]	; 0x700
      _b = b;
    4a10:	mvn.w	r5, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a14:	strb.w	r4, [r1, #1771]	; 0x6eb
    4a18:	movs	r4, #252	; 0xfc
      _b = b;
    4a1a:	strb.w	r5, [r1, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a1e:	mvn.w	r5, #8
      _s = s;
    4a22:	str	r6, [sp, #16]
      _b = b;
    4a24:	movs	r6, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a26:	strb.w	r5, [r1, #1794]	; 0x702
      _s = s;
    4a2a:	mov.w	r5, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a2e:	str	r2, [sp, #28]
    4a30:	movs	r2, #200	; 0xc8
      _s = s;
    4a32:	strb.w	r5, [r1, #1795]	; 0x703
      _b = b;
    4a36:	mov.w	r5, #46	; 0x2e
    4a3a:	strb.w	r5, [r1, #1796]	; 0x704
    4a3e:	mov.w	r5, #62	; 0x3e
    4a42:	strb.w	r5, [r1, #1799]	; 0x707
    4a46:	mvn.w	r5, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a4a:	str	r7, [sp, #0]
    4a4c:	mov.w	r7, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a50:	strb.w	sl, [r1, #1797]	; 0x705
      _s = s;
      _b = b;
    4a54:	mov.w	sl, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a58:	strb.w	ip, [r1, #1821]	; 0x71d
      _s = s;
    4a5c:	mvn.w	ip, #7
      _b = b;
    4a60:	str.w	sl, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a64:	mov.w	sl, #137	; 0x89
      _s = s;
    4a68:	strb.w	ip, [r1, #1822]	; 0x71e
      _b = b;
    4a6c:	mvn.w	ip, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a70:	str.w	sl, [sp, #4]
    4a74:	mvn.w	sl, #10
      _s = s;
      _b = b;
    4a78:	strb.w	ip, [r1, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a7c:	mvn.w	ip, #109	; 0x6d
    4a80:	strb.w	sl, [r1, #1791]	; 0x6ff
      _s = s;
    4a84:	mov.w	sl, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a88:	strb.w	ip, [r1, #1824]	; 0x720
      _s = s;
      _b = b;
    4a8c:	mvn.w	ip, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4a90:	strb.w	sl, [r1, #1810]	; 0x712
      _b = b;
    4a94:	mvn.w	sl, #7
    4a98:	strb.w	ip, [r1, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4a9c:	mvn.w	ip, #121	; 0x79
      _s = s;
      _b = b;
    4aa0:	strb.w	sl, [r1, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4aa4:	mov.w	sl, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4aa8:	strb.w	ip, [r1, #1827]	; 0x723
      _s = s;
    4aac:	mvn.w	ip, #6
    4ab0:	strb.w	r7, [r1, #1807]	; 0x70f
      _b = b;
    4ab4:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ab8:	strb.w	sl, [r1, #1816]	; 0x718
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4abc:	mvn.w	sl, #58	; 0x3a
      _s = s;
    4ac0:	strb.w	ip, [r1, #1828]	; 0x724
      _b = b;
    4ac4:	mvn.w	ip, #120	; 0x78
    4ac8:	strb.w	r5, [r1, #1808]	; 0x710
    4acc:	movs	r5, #229	; 0xe5
    4ace:	strb.w	r7, [r1, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ad2:	strb.w	sl, [r1, #1815]	; 0x717
      _s = s;
      _b = b;
    4ad6:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ada:	ldrb.w	r7, [sp, #16]
      _b = b;
    4ade:	strb.w	ip, [r1, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ae2:	mov.w	ip, #124	; 0x7c
      _b = b;
    4ae6:	str	r5, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ae8:	mvn.w	r5, #103	; 0x67
      _s = s;
    4aec:	strb.w	r7, [r1, #1813]	; 0x715
    4af0:	mvn.w	r7, #71	; 0x47
    4af4:	strb.w	fp, [r1, #1783]	; 0x6f7
      _b = b;
    4af8:	mov.w	fp, #120	; 0x78
    4afc:	strb.w	sl, [r1, #1817]	; 0x719
    4b00:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b04:	strb.w	ip, [r1, #1831]	; 0x727
      _b = b;
    4b08:	mvn.w	ip, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b0c:	strb.w	r5, [r1, #1809]	; 0x711
    4b10:	movs	r5, #234	; 0xea
    4b12:	strb.w	r2, [r1, #1812]	; 0x714
      _s = s;
      _b = b;
    4b16:	str.w	fp, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b1a:	mov.w	fp, #77	; 0x4d
    4b1e:	strb.w	r9, [r1, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b22:	mov.w	r9, #67	; 0x43
    4b26:	strb.w	r8, [r1, #1818]	; 0x71a
      _s = s;
      _b = b;
    4b2a:	strb.w	sl, [r1, #1820]	; 0x71c
    4b2e:	mov.w	sl, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b32:	strb.w	r4, [r1, #1825]	; 0x721
      _b = b;
    4b36:	strb.w	ip, [r1, #1832]	; 0x728
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b3a:	strb.w	r7, [r1, #1843]	; 0x733
      _b = b;
    4b3e:	mvn.w	r7, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b42:	strb.w	lr, [r1, #1848]	; 0x738
      _s = s;
    4b46:	mov.w	lr, #62	; 0x3e
      _b = b;
    4b4a:	strb.w	r7, [r1, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b4e:	mov.w	r7, #107	; 0x6b
    4b52:	strb.w	lr, [r1, #1849]	; 0x739
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b56:	mvn.w	lr, #16
      _s = s;
    4b5a:	strb.w	r7, [r1, #1819]	; 0x71b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b5e:	mov.w	r7, #60	; 0x3c
    4b62:	strb.w	lr, [r1, #1851]	; 0x73b
      _s = s;
    4b66:	mov.w	lr, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b6a:	strb.w	r7, [r1, #1830]	; 0x726
      _s = s;
      _b = b;
    4b6e:	mvn.w	r7, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4b72:	strb.w	lr, [r1, #1852]	; 0x73c
      _b = b;
    4b76:	mvn.w	lr, #43	; 0x2b
    4b7a:	strb.w	r7, [r1, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b7e:	mov.w	r7, #31
      _s = s;
      _b = b;
    4b82:	strb.w	lr, [r1, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b86:	mvn.w	lr, #13
    4b8a:	ldrb.w	ip, [sp, #28]
    4b8e:	strb.w	r7, [r1, #1836]	; 0x72c
    4b92:	mov.w	r7, #13
    4b96:	strb.w	lr, [r1, #1854]	; 0x73e
      _s = s;
    4b9a:	mov.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4b9e:	strb.w	ip, [r1, #1833]	; 0x729
    4ba2:	strb.w	r7, [r1, #1845]	; 0x735
      _s = s;
    4ba6:	mov.w	r7, #76	; 0x4c
    4baa:	ldrb.w	ip, [sp]
    4bae:	strb.w	lr, [r1, #1855]	; 0x73f
      _b = b;
    4bb2:	mvn.w	lr, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bb6:	strb.w	ip, [r1, #1837]	; 0x72d
      _b = b;
    4bba:	mvn.w	ip, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bbe:	strb.w	r7, [r1, #1846]	; 0x736
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bc2:	mov.w	r7, #22
      _s = s;
      _b = b;
    4bc6:	strb.w	lr, [r1, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bca:	mvn.w	lr, #18
      _s = s;
      _b = b;
    4bce:	strb.w	ip, [r1, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bd2:	mov.w	ip, #26
    4bd6:	strb.w	r7, [r1, #1842]	; 0x732
      _s = s;
      _b = b;
    4bda:	mvn.w	r7, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bde:	strb.w	lr, [r1, #1857]	; 0x741
      _s = s;
    4be2:	mvn.w	lr, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4be6:	strb.w	ip, [r1, #1839]	; 0x72f
      _s = s;
    4bea:	mvn.w	ip, #51	; 0x33
      _b = b;
    4bee:	strb.w	r7, [r1, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4bf2:	mvn.w	r7, #15
      _s = s;
    4bf6:	strb.w	lr, [r1, #1858]	; 0x742
      _b = b;
    4bfa:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4bfe:	strb.w	ip, [r1, #1840]	; 0x730
      _b = b;
    4c02:	mvn.w	ip, #40	; 0x28
    4c06:	strb.w	lr, [r1, #1859]	; 0x743
    4c0a:	mvn.w	lr, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c0e:	strb.w	r7, [r1, #1860]	; 0x744
      _s = s;
    4c12:	mov.w	r7, #114	; 0x72
    4c16:	strb.w	r4, [r1, #1834]	; 0x72a
      _b = b;
    4c1a:	strb.w	ip, [r1, #1841]	; 0x731
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c1e:	mov.w	ip, #66	; 0x42
      _b = b;
    4c22:	strb.w	r6, [r1, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c26:	strb.w	r7, [r1, #1861]	; 0x745
      _b = b;
    4c2a:	mvn.w	r7, #35	; 0x23
    4c2e:	strb.w	lr, [r1, #1865]	; 0x749
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c32:	mvn.w	lr, #31
      _s = s;
      _b = b;
    4c36:	strb.w	r7, [r1, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c3a:	movs	r7, #229	; 0xe5
    4c3c:	strb.w	lr, [r1, #1866]	; 0x74a
      _s = s;
    4c40:	mvn.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c44:	strb.w	r7, [r0, #1863]	; 0x747
      _s = s;
    4c48:	strb.w	lr, [r1, #1867]	; 0x74b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c4c:	mvn.w	lr, #24
      _s = s;
    4c50:	strb.w	r4, [r1, #1864]	; 0x748
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c54:	strb.w	lr, [r1, #1869]	; 0x74d
      _s = s;
    4c58:	mvn.w	lr, #2
      _b = b;
    4c5c:	strb.w	r6, [r1, #1868]	; 0x74c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c60:	strb.w	lr, [r1, #1870]	; 0x74e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c64:	mov.w	lr, #22
      _s = s;
      _b = b;
    4c68:	strb.w	r5, [r0, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c6c:	strb.w	lr, [r1, #1872]	; 0x750
      _s = s;
    4c70:	ldrb.w	lr, [sp, #16]
      _b = b;
    4c74:	strb.w	r7, [r0, #1883]	; 0x75b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4c78:	strb.w	lr, [r1, #1873]	; 0x751
      _b = b;
    4c7c:	mvn.w	lr, #66	; 0x42
    4c80:	strb.w	r2, [r1, #1886]	; 0x75e
    4c84:	strb.w	lr, [r1, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c88:	mov.w	lr, #40	; 0x28
      _s = s;
    4c8c:	strb.w	r8, [r1, #1888]	; 0x760
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4c90:	mov.w	r8, #53	; 0x35
    4c94:	strb.w	lr, [r1, #1878]	; 0x756
      _s = s;
    4c98:	mov.w	lr, #41	; 0x29
      _b = b;
    4c9c:	strb.w	r2, [r1, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4ca0:	strb.w	lr, [r1, #1879]	; 0x757
      _b = b;
    4ca4:	mov.w	lr, #112	; 0x70
    4ca8:	strb.w	lr, [r1, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4cac:	mov.w	lr, #51	; 0x33
    4cb0:	strb.w	lr, [r1, #1876]	; 0x754
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cb4:	mov.w	lr, #32
    4cb8:	strb.w	lr, [r1, #1875]	; 0x753
      _s = s;
      _b = b;
    4cbc:	mvn.w	lr, #44	; 0x2c
    4cc0:	strb.w	lr, [r1, #1880]	; 0x758
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cc4:	mov.w	lr, #113	; 0x71
    4cc8:	strb.w	lr, [r1, #1881]	; 0x759
      _s = s;
    4ccc:	mov.w	lr, #105	; 0x69
    4cd0:	strb.w	lr, [r1, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cd4:	strb.w	lr, [r1, #1890]	; 0x762
      _s = s;
      _b = b;
    4cd8:	mvn.w	lr, #31
    4cdc:	strb.w	lr, [r1, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ce0:	mvn.w	lr, #106	; 0x6a
    4ce4:	strb.w	lr, [r1, #1893]	; 0x765
      _s = s;
    4ce8:	mov.w	lr, #124	; 0x7c
    4cec:	strb.w	lr, [r1, #1894]	; 0x766
      _b = b;
    4cf0:	mvn.w	lr, #23
    4cf4:	strb.w	lr, [r1, #1895]	; 0x767
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4cf8:	mvn.w	lr, #115	; 0x73
    4cfc:	strb.w	lr, [r1, #1896]	; 0x768
      _s = s;
    4d00:	mvn.w	lr, #4
    4d04:	strb.w	lr, [r1, #1897]	; 0x769
      _b = b;
    4d08:	mvn.w	lr, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d0c:	strb.w	r9, [r1, #1905]	; 0x771
      _s = s;
      _b = b;
    4d10:	mov.w	r9, #196	; 0xc4
    4d14:	strb.w	lr, [r1, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d18:	mvn.w	lr, #108	; 0x6c
      _s = s;
    4d1c:	strb.w	r4, [r1, #1912]	; 0x778
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d20:	strb.w	lr, [r1, #1899]	; 0x76b
      _s = s;
    4d24:	mvn.w	lr, #5
    4d28:	strb.w	fp, [r1, #1891]	; 0x763
    4d2c:	mov.w	fp, #238	; 0xee
    4d30:	strb.w	lr, [r1, #1900]	; 0x76c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d34:	mvn.w	lr, #112	; 0x70
      _s = s;
      _b = b;
    4d38:	strb.w	sl, [r1, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d3c:	mov.w	sl, #12
    4d40:	strb.w	lr, [r1, #1902]	; 0x76e
      _s = s;
    4d44:	mvn.w	lr, #73	; 0x49
    4d48:	strb.w	ip, [r1, #1906]	; 0x772
      _b = b;
    4d4c:	mov.w	ip, #247	; 0xf7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d50:	strb.w	lr, [r1, #1903]	; 0x76f
      _b = b;
    4d54:	mvn.w	lr, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d58:	strb.w	r2, [r1, #1921]	; 0x781
      _b = b;
    4d5c:	strb.w	lr, [r1, #1904]	; 0x770
    4d60:	mvn.w	lr, #57	; 0x39
    4d64:	strb.w	r6, [r1, #1922]	; 0x782
    4d68:	strb.w	lr, [r1, #1907]	; 0x773
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d6c:	mvn.w	lr, #19
      _b = b;
    4d70:	strb.w	r6, [r1, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d74:	strb.w	lr, [r1, #1909]	; 0x775
      _b = b;
    4d78:	mvn.w	lr, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d7c:	strb.w	r4, [r1, #1933]	; 0x78d
      _b = b;
    4d80:	strb.w	lr, [r1, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d84:	mov.w	lr, #26
      _s = s;
    4d88:	strb.w	r5, [r0, #1936]	; 0x790
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d8c:	strb.w	lr, [r1, #1911]	; 0x777
      _s = s;
    4d90:	mov.w	lr, #106	; 0x6a
      _b = b;
    4d94:	strb.w	r9, [r0, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4d98:	strb.w	lr, [r1, #1882]	; 0x75a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4d9c:	mov.w	lr, #65	; 0x41
    4da0:	strb.w	lr, [r1, #1884]	; 0x75c
    4da4:	mov.w	lr, #101	; 0x65
    4da8:	strb.w	lr, [r1, #1887]	; 0x75f
    4dac:	mov.w	lr, #35	; 0x23
    4db0:	strb.w	lr, [r1, #1908]	; 0x774
      _s = s;
      _b = b;
    4db4:	mvn.w	lr, #45	; 0x2d
    4db8:	strb.w	lr, [r1, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dbc:	mov.w	lr, #26
    4dc0:	strb.w	lr, [r1, #1923]	; 0x783
      _s = s;
      _b = b;
    4dc4:	mvn.w	lr, #19
    4dc8:	strb.w	lr, [r1, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4dcc:	mvn.w	lr, #20
    4dd0:	strb.w	lr, [r1, #1929]	; 0x789
      _s = s;
    4dd4:	mvn.w	lr, #16
    4dd8:	strb.w	lr, [r1, #1930]	; 0x78a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ddc:	mvn.w	lr, #20
    4de0:	strb.w	lr, [r1, #1935]	; 0x78f
    4de4:	mvn.w	lr, #24
    4de8:	strb.w	lr, [r1, #1938]	; 0x792
      _s = s;
    4dec:	mvn.w	lr, #20
    4df0:	strb.w	lr, [r1, #1939]	; 0x793
    4df4:	mvn.w	lr, #2
      _b = b;
    4df8:	str	r5, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4dfa:	strb.w	lr, [r1, #1942]	; 0x796
      _b = b;
    4dfe:	mvn.w	lr, #66	; 0x42
    4e02:	strb.w	r5, [r0, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e06:	movs	r5, #37	; 0x25
      _s = s;
      _b = b;
    4e08:	strb.w	lr, [r1, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e0c:	mvn.w	lr, #2
      _b = b;
    4e10:	strb.w	r9, [r0, #1940]	; 0x794
    4e14:	mov.w	r9, #199	; 0xc7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e18:	strb.w	lr, [r1, #1945]	; 0x799
    4e1c:	mvn.w	lr, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e20:	strb.w	r7, [r0, #1941]	; 0x795
      _s = s;
    4e24:	movs	r7, #4
    4e26:	strb.w	lr, [r1, #1915]	; 0x77b
      _b = b;
    4e2a:	mvn.w	lr, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e2e:	strb.w	r5, [r0, #1956]	; 0x7a4
      _s = s;
      _b = b;
    4e32:	strb.w	lr, [r1, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e36:	mov.w	lr, #26
      _s = s;
      _b = b;
    4e3a:	strb.w	r4, [r0, #1958]	; 0x7a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e3e:	strb.w	lr, [r1, #1917]	; 0x77d
      _s = s;
    4e42:	mvn.w	lr, #83	; 0x53
    4e46:	strb.w	r4, [r0, #1966]	; 0x7ae
    4e4a:	strb.w	lr, [r1, #1918]	; 0x77e
      _b = b;
    4e4e:	mvn.w	lr, #24
    4e52:	strb.w	lr, [r1, #1919]	; 0x77f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e56:	mov.w	lr, #26
    4e5a:	strb.w	lr, [r1, #1920]	; 0x780
    4e5e:	mov.w	lr, #30
    4e62:	strb.w	lr, [r1, #1914]	; 0x77a
      _s = s;
    4e66:	mvn.w	r1, #122	; 0x7a
      _b = b;
    4e6a:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4e6e:	strb.w	r1, [r0, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e72:	mov.w	r1, #10
      _s = s;
      _b = b;
    4e76:	strb.w	lr, [r0, #1964]	; 0x7ac
    4e7a:	mvn.w	lr, #14
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e7e:	strb.w	r1, [r0, #1926]	; 0x786
      _s = s;
    4e82:	mov.w	r1, #98	; 0x62
    4e86:	strb.w	r1, [r0, #1927]	; 0x787
      _b = b;
    4e8a:	mvn.w	r1, #46	; 0x2e
    4e8e:	strb.w	r1, [r0, #1931]	; 0x78b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4e92:	mvn.w	r1, #14
    4e96:	strb.w	r1, [r0, #1932]	; 0x78c
      _s = s;
      _b = b;
    4e9a:	mvn.w	r1, #82	; 0x52
    4e9e:	strb.w	r1, [r0, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ea2:	mvn.w	r1, #28
    4ea6:	strb.w	r1, [r0, #1944]	; 0x798
      _s = s;
      _b = b;
    4eaa:	mvn.w	r1, #61	; 0x3d
    4eae:	strb.w	r1, [r0, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4eb2:	mov.w	r1, #91	; 0x5b
    4eb6:	strb.w	r1, [r0, #1960]	; 0x7a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eba:	mvn.w	r1, #30
    4ebe:	strb.w	r1, [r0, #1947]	; 0x79b
      _s = s;
    4ec2:	mvn.w	r1, #2
    4ec6:	strb.w	r1, [r0, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4eca:	ldrb.w	r1, [sp, #24]
    4ece:	strb.w	r1, [r0, #1950]	; 0x79e
    4ed2:	movs	r1, #43	; 0x2b
    4ed4:	strb.w	r1, [r0, #1962]	; 0x7aa
      _s = s;
      _b = b;
    4ed8:	strb.w	lr, [r0, #1967]	; 0x7af
    4edc:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ee0:	strb.w	r8, [r0, #1965]	; 0x7ad
      _s = s;
      _b = b;
    4ee4:	mvn.w	r8, #9
    4ee8:	strb.w	lr, [r0, #1970]	; 0x7b2
    4eec:	mvn.w	lr, #18
    4ef0:	strb.w	r8, [r0, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ef4:	mov.w	r8, #48	; 0x30
      _s = s;
      _b = b;
    4ef8:	strb.w	lr, [r0, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4efc:	mvn.w	lr, #102	; 0x66
    4f00:	strb.w	r8, [r0, #1968]	; 0x7b0
    4f04:	mov.w	r8, #52	; 0x34
    4f08:	strb.w	lr, [r0, #1977]	; 0x7b9
      _s = s;
      _b = b;
    4f0c:	mvn.w	lr, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f10:	strb.w	r8, [r0, #1971]	; 0x7b3
    4f14:	mvn.w	r8, #104	; 0x68
      _s = s;
      _b = b;
    4f18:	strb.w	lr, [r0, #1955]	; 0x7a3
    4f1c:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f20:	strb.w	r8, [r0, #1974]	; 0x7b6
      _s = s;
    4f24:	mvn.w	r8, #105	; 0x69
      _b = b;
    4f28:	strb.w	lr, [r0, #1952]	; 0x7a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f2c:	mov.w	lr, #105	; 0x69
    4f30:	strb.w	r8, [r0, #1975]	; 0x7b7
      _b = b;
    4f34:	mvn.w	r8, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f38:	strb.w	lr, [r0, #1972]	; 0x7b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f3c:	mov.w	lr, #49	; 0x31
      _s = s;
    4f40:	strb.w	r1, [r0, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f44:	strb.w	lr, [r0, #1959]	; 0x7a7
      _s = s;
    4f48:	mvn.w	lr, #60	; 0x3c
      _b = b;
    4f4c:	ldrb.w	r1, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f50:	strb.w	lr, [r0, #1963]	; 0x7ab
    4f54:	mov.w	lr, #59	; 0x3b
      _b = b;
    4f58:	strb.w	r8, [r0, #1976]	; 0x7b8
    4f5c:	mvn.w	r8, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4f60:	strb.w	lr, [r0, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f64:	mov.w	lr, #38	; 0x26
      _s = s;
      _b = b;
    4f68:	strb.w	r1, [r0, #1985]	; 0x7c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f6c:	mov.w	r1, #32
    4f70:	strb.w	lr, [r0, #1953]	; 0x7a1
      _s = s;
    4f74:	mov.w	lr, #63	; 0x3f
      _b = b;
    4f78:	strb.w	r8, [r0, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f7c:	mov.w	r8, #69	; 0x45
    4f80:	strb.w	r1, [r0, #1986]	; 0x7c2
      _s = s;
    4f84:	ldrb.w	r1, [sp, #12]
    4f88:	strb.w	lr, [r0, #1954]	; 0x7a2
    4f8c:	mov.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4f90:	strb.w	r8, [r0, #1980]	; 0x7bc
    4f94:	mov.w	r8, #33	; 0x21
      _s = s;
    4f98:	strb.w	r1, [r0, #1987]	; 0x7c3
    4f9c:	mvn.w	r1, #2
    4fa0:	strb.w	r2, [r0, #1969]	; 0x7b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fa4:	movs	r2, #0
      _s = s;
    4fa6:	strb.w	r4, [r0, #1978]	; 0x7ba
    4faa:	strb.w	lr, [r0, #1957]	; 0x7a5
    4fae:	mov.w	lr, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fb2:	strb.w	r8, [r0, #1983]	; 0x7bf
      _s = s;
      _b = b;
    4fb6:	strb.w	r6, [r0, #1988]	; 0x7c4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fba:	strb.w	r8, [r0, #1989]	; 0x7c5
    4fbe:	mov.w	r8, #109	; 0x6d
      _s = s;
    4fc2:	strb.w	r4, [r0, #1990]	; 0x7c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fc6:	mov	r4, r5
      _s = s;
    4fc8:	strb.w	r1, [r0, #1993]	; 0x7c9
      _b = b;
    4fcc:	ldrb.w	r1, [sp]
    4fd0:	strb.w	r6, [r0, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    4fd4:	movs	r6, #185	; 0xb9
      _b = b;
    4fd6:	strb.w	r1, [r0, #1994]	; 0x7ca
    4fda:	ldrb.w	r1, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fde:	strb.w	r5, [r0, #1992]	; 0x7c8
      _s = s;
      _b = b;
    4fe2:	movs	r5, #100	; 0x64
    4fe4:	strb.w	r1, [r0, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4fe8:	mov.w	r1, #35	; 0x23
    4fec:	strb.w	r4, [r0, #1995]	; 0x7cb
      _s = s;
    4ff0:	movs	r4, #244	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    4ff2:	strb.w	r1, [r0, #1998]	; 0x7ce
    4ff6:	mov.w	r1, #32
    4ffa:	strb.w	sl, [r0, #2004]	; 0x7d4
    4ffe:	mov.w	sl, #130	; 0x82
    5002:	strb.w	r1, [r0, #2001]	; 0x7d1
      _s = s;
    5006:	mvn.w	r1, #37	; 0x25
    500a:	strb.w	fp, [r0, #2014]	; 0x7de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    500e:	mov.w	fp, #132	; 0x84
      _s = s;
    5012:	strb.w	r1, [r0, #2002]	; 0x7d2
    5016:	mvn.w	r1, #6
      _b = b;
    501a:	strb.w	r9, [r0, #2015]	; 0x7df
    501e:	mov.w	r9, #207	; 0xcf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5022:	strb.w	r1, [r0, #1996]	; 0x7cc
    5026:	mvn.w	r1, #68	; 0x44
    502a:	strb.w	r1, [r0, #1984]	; 0x7c0
      _b = b;
    502e:	mvn.w	r1, #52	; 0x34
    5032:	strb.w	r1, [r0, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5036:	mvn.w	r1, #29
    503a:	strb.w	r1, [r0, #1999]	; 0x7cf
      _b = b;
    503e:	strb.w	r1, [r0, #2003]	; 0x7d3
    5042:	mvn.w	r1, #22
    5046:	strb.w	r1, [r0, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    504a:	mov.w	r1, #116	; 0x74
    504e:	strb.w	r1, [r0, #2005]	; 0x7d5
      _b = b;
    5052:	mvn.w	r1, #21
    5056:	strb.w	r1, [r0, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    505a:	mvn.w	r1, #12
    505e:	strb.w	r1, [r0, #2007]	; 0x7d7
      _s = s;
      _b = b;
    5062:	strb.w	r1, [r0, #2009]	; 0x7d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5066:	mov.w	r1, #57	; 0x39
    506a:	strb.w	r1, [r0, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    506e:	mvn.w	r1, #15
    5072:	strb.w	r1, [r0, #2010]	; 0x7da
      _s = s;
    5076:	mvn.w	r1, #74	; 0x4a
    507a:	strb.w	r1, [r0, #2011]	; 0x7db
      _b = b;
    507e:	mvn.w	r1, #29
    5082:	strb.w	r1, [r0, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5086:	mvn.w	r1, #14
    508a:	strb.w	r1, [r0, #2013]	; 0x7dd
    508e:	mvn.w	r1, #25
    5092:	strb.w	r1, [r0, #2022]	; 0x7e6
    5096:	mvn.w	r1, #20
    509a:	strb.w	r1, [r0, #2016]	; 0x7e0
      _s = s;
    509e:	mvn.w	r1, #4
    50a2:	strb.w	r1, [r0, #2017]	; 0x7e1
      _b = b;
    50a6:	mvn.w	r1, #57	; 0x39
    50aa:	strb.w	r1, [r0, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ae:	mvn.w	r1, #24
      _s = s;
      _b = b;
    50b2:	strb.w	ip, [r3, #14]
    50b6:	mov.w	ip, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ba:	strb.w	r1, [r0, #2019]	; 0x7e3
      _s = s;
    50be:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50c2:	strb	r2, [r3, #0]
      _s = s;
    50c4:	strb.w	r1, [r0, #2020]	; 0x7e4
    50c8:	strb.w	r1, [r0, #2023]	; 0x7e7
      _b = b;
    50cc:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50d0:	strb	r2, [r3, #1]
      _b = b;
    50d2:	strb.w	r1, [r0, #2021]	; 0x7e5
    50d6:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50da:	strb	r2, [r3, #9]
      _s = s;
      _b = b;
    50dc:	strb.w	r1, [r0, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50e0:	mvn.w	r1, #26
      _s = s;
    50e4:	strb	r2, [r3, #10]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50e6:	strb.w	r1, [r0, #2025]	; 0x7e9
      _s = s;
    50ea:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    50ee:	strb	r2, [r3, #12]
      _s = s;
    50f0:	strb.w	r1, [r0, #2026]	; 0x7ea
      _b = b;
    50f4:	mvn.w	r1, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    50f8:	strb	r2, [r3, #13]
      _b = b;
    50fa:	strb.w	r1, [r0, #2027]	; 0x7eb
    50fe:	mvn.w	r1, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5102:	strb	r2, [r3, #15]
      _s = s;
    5104:	movs	r0, #8
      _b = b;
    5106:	strb	r1, [r3, #2]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5108:	mov.w	r1, #106	; 0x6a
      _s = s;
    510c:	strb	r2, [r3, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    510e:	strb	r1, [r3, #3]
      _s = s;
      _b = b;
    5110:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5114:	strb.w	lr, [r3, #4]
      _b = b;
    5118:	strb	r1, [r3, #5]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    511a:	mov.w	r1, #85	; 0x55
      _s = s;
    511e:	strb.w	lr, [r3, #19]
      _b = b;
    5122:	mov.w	lr, #179	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5126:	strb	r1, [r3, #6]
      _s = s;
    5128:	mov.w	r1, #5
    512c:	strb	r1, [r3, #7]
      _b = b;
    512e:	mvn.w	r1, #102	; 0x66
    5132:	strb	r1, [r3, #8]
    5134:	mvn.w	r1, #16
    5138:	strb	r1, [r3, #11]
    513a:	mvn.w	r1, #10
    513e:	strb	r1, [r3, #17]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5140:	mov.w	r1, #63	; 0x3f
    5144:	strb.w	r1, [r3, #40]	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5148:	mov.w	r1, #106	; 0x6a
    514c:	strb	r1, [r3, #18]
      _s = s;
    514e:	mov.w	r1, #10
    5152:	strb	r1, [r3, #22]
    5154:	mov.w	r1, #48	; 0x30
    5158:	strb	r1, [r3, #31]
      _b = b;
    515a:	mvn.w	r1, #122	; 0x7a
    515e:	strb.w	r1, [r3, #41]	; 0x29
    5162:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5166:	strb.w	r8, [r3, #21]
      _s = s;
    516a:	mov.w	r8, #14
      _b = b;
    516e:	strb	r1, [r3, #20]
    5170:	mvn.w	r1, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5174:	strb.w	r6, [r3, #34]	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5178:	movs	r6, #60	; 0x3c
      _s = s;
      _b = b;
    517a:	strb	r1, [r3, #23]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    517c:	mov.w	r1, #114	; 0x72
      _s = s;
      _b = b;
    5180:	strb.w	r5, [r3, #38]	; 0x26
    5184:	movs	r5, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5186:	strb	r1, [r3, #24]
      _s = s;
    5188:	mov.w	r1, #20
    518c:	strb.w	r4, [r3, #46]	; 0x2e
      _b = b;
    5190:	movs	r4, #167	; 0xa7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5192:	strb	r1, [r3, #25]
      _b = b;
    5194:	mvn.w	r1, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5198:	strb.w	sl, [r3, #39]	; 0x27
      _s = s;
      _b = b;
    519c:	strb	r1, [r3, #26]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    519e:	mov.w	r1, #115	; 0x73
    51a2:	strb.w	sl, [r3, #45]	; 0x2d
    51a6:	strb	r1, [r3, #27]
      _s = s;
    51a8:	mov.w	r1, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ac:	strb.w	sl, [r3, #48]	; 0x30
      _s = s;
    51b0:	strb	r1, [r3, #28]
      _b = b;
    51b2:	mvn.w	r1, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51b6:	strb.w	r2, [r3, #57]	; 0x39
      _s = s;
      _b = b;
    51ba:	strb	r1, [r3, #29]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51bc:	mvn.w	r1, #116	; 0x74
      _s = s;
    51c0:	strb.w	r2, [r3, #58]	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51c4:	strb	r1, [r3, #30]
      _s = s;
      _b = b;
    51c6:	mov.w	r1, #73	; 0x49
    51ca:	strb.w	r1, [r3, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ce:	mvn.w	r1, #117	; 0x75
    51d2:	strb.w	r1, [r3, #33]	; 0x21
      _s = s;
      _b = b;
    51d6:	mov.w	r1, #77	; 0x4d
    51da:	strb.w	r1, [r3, #35]	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51de:	mvn.w	r1, #121	; 0x79
    51e2:	strb.w	r1, [r3, #36]	; 0x24
      _s = s;
    51e6:	mvn.w	r1, #34	; 0x22
    51ea:	strb.w	r1, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    51ee:	mvn.w	r1, #124	; 0x7c
    51f2:	strb.w	r1, [r3, #42]	; 0x2a
      _s = s;
    51f6:	mvn.w	r1, #83	; 0x53
    51fa:	strb.w	r1, [r3, #43]	; 0x2b
      _b = b;
    51fe:	mvn.w	r1, #45	; 0x2d
    5202:	strb.w	r1, [r3, #44]	; 0x2c
    5206:	mvn.w	r1, #33	; 0x21
    520a:	strb.w	r1, [r3, #47]	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    520e:	mvn.w	r1, #96	; 0x60
    5212:	strb.w	r1, [r3, #49]	; 0x31
      _b = b;
    5216:	mvn.w	r1, #39	; 0x27
    521a:	strb.w	r1, [r3, #50]	; 0x32
    521e:	mvn.w	r1, #32
    5222:	strb.w	r1, [r3, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5226:	mvn.w	r1, #117	; 0x75
    522a:	strb.w	r1, [r3, #54]	; 0x36
      _s = s;
      _b = b;
    522e:	mvn.w	r1, #9
    5232:	strb.w	r1, [r3, #56]	; 0x38
    5236:	mvn.w	r1, #4
    523a:	strb.w	r1, [r3, #59]	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    523e:	strb.w	r2, [r3, #60]	; 0x3c
      _s = s;
      _b = b;
    5242:	strb.w	r1, [r3, #80]	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5246:	mov.w	r1, #5
    524a:	strb.w	r2, [r3, #61]	; 0x3d
    524e:	strb.w	r1, [r3, #82]	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5252:	mvn.w	r1, #120	; 0x78
    5256:	strb.w	r2, [r3, #63]	; 0x3f
    525a:	strb.w	r1, [r3, #51]	; 0x33
      _s = s;
    525e:	mov.w	r1, #51	; 0x33
    5262:	strb.w	r2, [r3, #64]	; 0x40
    5266:	strb.w	r1, [r3, #52]	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    526a:	mov.w	r1, #95	; 0x5f
    526e:	strb.w	r2, [r3, #66]	; 0x42
    5272:	strb.w	r1, [r3, #81]	; 0x51
      _s = s;
      _b = b;
    5276:	mvn.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    527a:	strb.w	r2, [r3, #67]	; 0x43
      _b = b;
    527e:	strb.w	r1, [r3, #83]	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5282:	mvn.w	r1, #116	; 0x74
    5286:	strb.w	r2, [r3, #69]	; 0x45
    528a:	strb.w	r1, [r3, #84]	; 0x54
      _s = s;
      _b = b;
    528e:	mov.w	r1, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5292:	strb.w	r2, [r3, #70]	; 0x46
      _b = b;
    5296:	strb.w	r1, [r3, #86]	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    529a:	mvn.w	r1, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    529e:	strb.w	r2, [r3, #72]	; 0x48
      _s = s;
    52a2:	strb.w	r1, [r3, #103]	; 0x67
      _b = b;
    52a6:	mov.w	r1, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52aa:	strb.w	r2, [r3, #73]	; 0x49
      _b = b;
    52ae:	strb.w	r1, [r3, #104]	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52b2:	mov.w	r1, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52b6:	strb.w	r2, [r3, #75]	; 0x4b
      _s = s;
    52ba:	strb.w	r1, [r3, #106]	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52be:	mvn.w	r1, #116	; 0x74
      _s = s;
    52c2:	strb.w	r2, [r3, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52c6:	strb.w	r1, [r3, #108]	; 0x6c
      _s = s;
    52ca:	mvn.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52ce:	strb.w	r2, [r3, #78]	; 0x4e
      _s = s;
    52d2:	strb.w	r2, [r3, #79]	; 0x4f
    52d6:	strb.w	r0, [r3, #55]	; 0x37
      _b = b;
    52da:	movs	r0, #219	; 0xdb
    52dc:	strb.w	ip, [r3, #62]	; 0x3e
    52e0:	strb.w	ip, [r3, #65]	; 0x41
    52e4:	strb.w	ip, [r3, #68]	; 0x44
    52e8:	strb.w	ip, [r3, #71]	; 0x47
    52ec:	strb.w	ip, [r3, #74]	; 0x4a
    52f0:	strb.w	ip, [r3, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    52f4:	strb.w	r1, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    52f8:	mvn.w	r1, #121	; 0x79
      _s = s;
    52fc:	strb.w	ip, [r3, #115]	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5300:	strb.w	r1, [r3, #111]	; 0x6f
      _s = s;
    5304:	mvn.w	r1, #5
      _b = b;
    5308:	strb.w	r9, [r3, #89]	; 0x59
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    530c:	mov.w	r9, #25
      _s = s;
    5310:	strb.w	r1, [r3, #112]	; 0x70
    5314:	mov.w	r1, #11
    5318:	strb.w	r8, [r3, #91]	; 0x5b
      _b = b;
    531c:	mov.w	r8, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5320:	strb.w	r1, [r3, #88]	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5324:	mov.w	r1, #46	; 0x2e
      _s = s;
      _b = b;
    5328:	strb.w	r5, [r3, #110]	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    532c:	movs	r5, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    532e:	strb.w	r1, [r3, #93]	; 0x5d
      _s = s;
    5332:	ldrb.w	r1, [sp, #4]
      _b = b;
    5336:	strb.w	r4, [r3, #113]	; 0x71
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    533a:	movs	r4, #162	; 0xa2
    533c:	strb.w	r1, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5340:	mov.w	r1, #94	; 0x5e
    5344:	strb.w	r6, [r3, #96]	; 0x60
    5348:	strb.w	r1, [r3, #87]	; 0x57
    534c:	mov.w	r1, #96	; 0x60
    5350:	strb.w	fp, [r3, #114]	; 0x72
    5354:	strb.w	r1, [r3, #90]	; 0x5a
      _s = s;
      _b = b;
    5358:	mvn.w	r1, #58	; 0x3a
    535c:	strb.w	lr, [r3, #116]	; 0x74
    5360:	mov.w	lr, #103	; 0x67
    5364:	strb.w	r1, [r3, #92]	; 0x5c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5368:	mov.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    536c:	strb.w	sl, [r3, #123]	; 0x7b
      _s = s;
    5370:	strb.w	r1, [r3, #94]	; 0x5e
      _b = b;
    5374:	mvn.w	r1, #99	; 0x63
    5378:	strb.w	r1, [r3, #95]	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    537c:	mov.w	r1, #121	; 0x79
    5380:	strb.w	r1, [r3, #97]	; 0x61
      _b = b;
    5384:	mov.w	r1, #113	; 0x71
    5388:	strb.w	r1, [r3, #98]	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    538c:	mov.w	r1, #105	; 0x69
    5390:	strb.w	r1, [r3, #99]	; 0x63
      _s = s;
    5394:	mvn.w	r1, #69	; 0x45
    5398:	strb.w	r1, [r3, #100]	; 0x64
      _b = b;
    539c:	mov.w	r1, #101	; 0x65
    53a0:	strb.w	r1, [r3, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53a4:	mov.w	r1, #118	; 0x76
    53a8:	strb.w	r1, [r3, #102]	; 0x66
    53ac:	mvn.w	r1, #43	; 0x2b
    53b0:	strb.w	r1, [r3, #105]	; 0x69
      _s = s;
      _b = b;
    53b4:	mov.w	r1, #32
    53b8:	strb.w	r1, [r3, #107]	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53bc:	mvn.w	r1, #122	; 0x7a
    53c0:	strb.w	r1, [r3, #117]	; 0x75
      _s = s;
    53c4:	mov.w	r1, #106	; 0x6a
    53c8:	strb.w	r1, [r3, #118]	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53cc:	mvn.w	r1, #124	; 0x7c
    53d0:	strb.w	r1, [r3, #120]	; 0x78
      _s = s;
      _b = b;
    53d4:	mvn.w	r1, #34	; 0x22
    53d8:	strb.w	r1, [r3, #122]	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53dc:	mvn.w	r1, #16
    53e0:	strb.w	r1, [r3, #124]	; 0x7c
      _b = b;
    53e4:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53e8:	strb.w	sl, [r3, #126]	; 0x7e
      _s = s;
      _b = b;
    53ec:	strb.w	r1, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    53f0:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    53f4:	strb.w	sl, [r3, #129]	; 0x81
      _s = s;
    53f8:	strb.w	r1, [r3, #127]	; 0x7f
      _b = b;
    53fc:	strb.w	r1, [r3, #131]	; 0x83
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5400:	mvn.w	r1, #124	; 0x7c
    5404:	strb.w	r2, [r3, #138]	; 0x8a
    5408:	strb.w	r1, [r3, #132]	; 0x84
      _s = s;
      _b = b;
    540c:	mvn.w	r1, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5410:	strb.w	r2, [r3, #139]	; 0x8b
      _b = b;
    5414:	strb.w	r1, [r3, #134]	; 0x86
    5418:	mvn.w	r1, #37	; 0x25
    541c:	strb.w	ip, [r3, #140]	; 0x8c
    5420:	strb.w	r1, [r3, #137]	; 0x89
    5424:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5428:	strb.w	r2, [r3, #141]	; 0x8d
      _s = s;
      _b = b;
    542c:	strb.w	r1, [r3, #146]	; 0x92
    5430:	mvn.w	r1, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5434:	strb.w	r2, [r3, #142]	; 0x8e
      _b = b;
    5438:	strb.w	r1, [r3, #119]	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    543c:	mvn.w	r1, #111	; 0x6f
      _b = b;
    5440:	strb.w	ip, [r3, #143]	; 0x8f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5444:	strb.w	r1, [r3, #121]	; 0x79
      _b = b;
    5448:	mvn.w	r1, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    544c:	strb.w	r2, [r3, #144]	; 0x90
      _s = s;
      _b = b;
    5450:	strb.w	r1, [r3, #128]	; 0x80
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5454:	mvn.w	r1, #59	; 0x3b
    5458:	strb.w	r2, [r3, #145]	; 0x91
    545c:	strb.w	r1, [r3, #130]	; 0x82
    5460:	mov.w	r1, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5464:	strb.w	r2, [r3, #147]	; 0x93
      _s = s;
    5468:	strb.w	r1, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    546c:	mvn.w	r1, #107	; 0x6b
      _s = s;
    5470:	strb.w	r2, [r3, #148]	; 0x94
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5474:	strb.w	r1, [r3, #135]	; 0x87
      _s = s;
      _b = b;
    5478:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    547c:	strb.w	r7, [r3, #136]	; 0x88
    5480:	movs	r7, #44	; 0x2c
      _b = b;
    5482:	strb.w	r1, [r3, #149]	; 0x95
    5486:	strb.w	r1, [r3, #152]	; 0x98
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    548a:	mov.w	r1, #113	; 0x71
    548e:	strb.w	r2, [r3, #150]	; 0x96
      _s = s;
    5492:	strb.w	r2, [r3, #151]	; 0x97
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5496:	strb.w	r2, [r3, #153]	; 0x99
      _s = s;
    549a:	strb.w	r2, [r3, #154]	; 0x9a
      _b = b;
    549e:	strb.w	ip, [r3, #155]	; 0x9b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54a2:	strb.w	r1, [r3, #156]	; 0x9c
      _s = s;
      _b = b;
    54a6:	mvn.w	r1, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54aa:	strb.w	r6, [r3, #163]	; 0xa3
      _b = b;
    54ae:	movs	r6, #214	; 0xd6
    54b0:	strb.w	r1, [r3, #158]	; 0x9e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54b4:	mov.w	r1, #51	; 0x33
    54b8:	strb.w	r9, [r3, #171]	; 0xab
      _s = s;
      _b = b;
    54bc:	mov.w	r9, #189	; 0xbd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54c0:	strb.w	r1, [r3, #159]	; 0x9f
      _s = s;
    54c4:	mov.w	r1, #10
      _b = b;
    54c8:	strb.w	r0, [r3, #161]	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54cc:	strb.w	r1, [r3, #160]	; 0xa0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54d0:	mov.w	r1, #121	; 0x79
      _s = s;
    54d4:	strb.w	r5, [r3, #169]	; 0xa9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54d8:	strb.w	r1, [r3, #162]	; 0xa2
    54dc:	mov.w	r1, #32
    54e0:	strb.w	r5, [r3, #177]	; 0xb1
      _s = s;
    54e4:	movs	r5, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    54e6:	strb.w	r1, [r3, #165]	; 0xa5
      _s = s;
    54ea:	mvn.w	r1, #82	; 0x52
    54ee:	strb.w	r4, [r3, #175]	; 0xaf
    54f2:	strb.w	r1, [r3, #166]	; 0xa6
      _b = b;
    54f6:	mvn.w	r1, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    54fa:	strb.w	r4, [r3, #181]	; 0xb5
    54fe:	movs	r4, #90	; 0x5a
      _b = b;
    5500:	strb.w	r1, [r3, #167]	; 0xa7
    5504:	mov.w	r1, #85	; 0x55
    5508:	strb.w	r1, [r3, #176]	; 0xb0
    550c:	ldrb.w	r1, [sp, #4]
    5510:	strb.w	r1, [r3, #179]	; 0xb3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5514:	mov.w	r1, #121	; 0x79
    5518:	strb.w	r1, [r3, #180]	; 0xb4
      _s = s;
    551c:	mov.w	r1, #3
    5520:	strb.w	r1, [r3, #157]	; 0x9d
      _b = b;
    5524:	mov.w	r1, #123	; 0x7b
    5528:	strb.w	r1, [r3, #164]	; 0xa4
    552c:	strb.w	r1, [r3, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5530:	mov.w	r1, #54	; 0x36
    5534:	strb.w	r1, [r3, #168]	; 0xa8
      _s = s;
      _b = b;
    5538:	ldrb.w	r1, [sp, #8]
    553c:	strb.w	r1, [r3, #170]	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5540:	mvn.w	r1, #67	; 0x43
    5544:	strb.w	r1, [r3, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5548:	mov.w	r1, #28
    554c:	strb.w	r1, [r3, #174]	; 0xae
      _s = s;
    5550:	mvn.w	r1, #81	; 0x51
    5554:	strb.w	r1, [r3, #178]	; 0xb2
      _b = b;
    5558:	mvn.w	r1, #101	; 0x65
    555c:	strb.w	r1, [r3, #182]	; 0xb6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5560:	mvn.w	r1, #39	; 0x27
    5564:	strb.w	r1, [r3, #183]	; 0xb7
      _s = s;
    5568:	mvn.w	r1, #104	; 0x68
    556c:	strb.w	r1, [r3, #187]	; 0xbb
      _b = b;
    5570:	mov.w	r1, #59	; 0x3b
    5574:	strb.w	r1, [r3, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5578:	ldrb.w	r1, [sp, #4]
      _s = s;
      _b = b;
    557c:	strb.w	lr, [r3, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5580:	mov.w	lr, #1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5584:	strb.w	r1, [r3, #189]	; 0xbd
      _s = s;
    5588:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    558c:	strb.w	fp, [r3, #195]	; 0xc3
      _s = s;
    5590:	strb.w	r1, [r3, #190]	; 0xbe
      _b = b;
    5594:	mov.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5598:	strb.w	sl, [r3, #198]	; 0xc6
      _s = s;
      _b = b;
    559c:	strb.w	r1, [r3, #191]	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55a0:	mvn.w	r1, #119	; 0x77
      _s = s;
      _b = b;
    55a4:	strb.w	r0, [r3, #200]	; 0xc8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55a8:	strb.w	r1, [r3, #192]	; 0xc0
      _s = s;
    55ac:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55b0:	strb.w	sl, [r3, #201]	; 0xc9
      _s = s;
    55b4:	strb.w	r1, [r3, #193]	; 0xc1
      _b = b;
    55b8:	mov.w	r1, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55bc:	strb.w	sl, [r3, #204]	; 0xcc
      _s = s;
      _b = b;
    55c0:	strb.w	r1, [r3, #194]	; 0xc2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55c4:	mvn.w	r1, #117	; 0x75
      _b = b;
    55c8:	strb.w	r8, [r3, #185]	; 0xb9
    55cc:	mov.w	r8, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55d0:	strb.w	r1, [r3, #196]	; 0xc4
    55d4:	mov.w	r1, #57	; 0x39
    55d8:	strb.w	r7, [r3, #211]	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55dc:	movs	r7, #33	; 0x21
      _s = s;
    55de:	strb.w	r1, [r3, #199]	; 0xc7
    55e2:	mvn.w	r1, #65	; 0x41
      _b = b;
    55e6:	strb.w	r6, [r3, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    55ea:	movs	r6, #31
      _s = s;
    55ec:	strb.w	r1, [r3, #202]	; 0xca
      _b = b;
    55f0:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    55f4:	strb.w	r4, [r3, #208]	; 0xd0
      _b = b;
    55f8:	strb.w	r1, [r3, #203]	; 0xcb
    55fc:	mvn.w	r1, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5600:	strb.w	r5, [r3, #214]	; 0xd6
      _b = b;
    5604:	strb.w	r1, [r3, #206]	; 0xce
    5608:	mvn.w	r1, #21
    560c:	strb.w	r1, [r3, #209]	; 0xd1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5610:	mvn.w	r1, #96	; 0x60
    5614:	strb.w	r1, [r3, #213]	; 0xd5
    5618:	mvn.w	r1, #122	; 0x7a
    561c:	strb.w	r1, [r3, #207]	; 0xcf
      _s = s;
    5620:	mov.w	r1, #93	; 0x5d
    5624:	strb.w	r1, [r3, #184]	; 0xb8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5628:	mvn.w	r1, #112	; 0x70
    562c:	strb.w	r1, [r3, #186]	; 0xba
    5630:	strb.w	r1, [r3, #210]	; 0xd2
      _s = s;
    5634:	mvn.w	r1, #51	; 0x33
    5638:	strb.w	r1, [r3, #205]	; 0xcd
      _b = b;
    563c:	mvn.w	r1, #74	; 0x4a
    5640:	strb.w	r1, [r3, #215]	; 0xd7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5644:	mov.w	r1, #26
    5648:	strb.w	r1, [r3, #217]	; 0xd9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    564c:	mvn.w	r1, #105	; 0x69
    5650:	strb.w	r1, [r3, #216]	; 0xd8
      _s = s;
      _b = b;
    5654:	mvn.w	r1, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5658:	strb.w	lr, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    565c:	mov.w	lr, #127	; 0x7f
      _s = s;
      _b = b;
    5660:	strb.w	r1, [r3, #221]	; 0xdd
    5664:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5668:	strb.w	lr, [r3, #219]	; 0xdb
      _s = s;
    566c:	mov.w	lr, #66	; 0x42
      _b = b;
    5670:	strb.w	r1, [r3, #224]	; 0xe0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5674:	strb.w	lr, [r3, #235]	; 0xeb
      _b = b;
    5678:	mvn.w	lr, #110	; 0x6e
    567c:	strb.w	r1, [r3, #227]	; 0xe3
    5680:	strb.w	r1, [r3, #230]	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5684:	mov.w	r1, #106	; 0x6a
      _s = s;
      _b = b;
    5688:	strb.w	lr, [r3, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    568c:	ldrb.w	lr, [sp, #20]
    5690:	strb.w	r1, [r3, #234]	; 0xea
      _s = s;
      _b = b;
    5694:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5698:	strb.w	lr, [r3, #237]	; 0xed
      _s = s;
    569c:	mov.w	lr, #72	; 0x48
      _b = b;
    56a0:	strb.w	r1, [r3, #239]	; 0xef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56a4:	mvn.w	r1, #82	; 0x52
    56a8:	strb.w	lr, [r3, #238]	; 0xee
    56ac:	mvn.w	lr, #113	; 0x71
    56b0:	strb.w	r1, [r3, #241]	; 0xf1
      _b = b;
    56b4:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56b8:	strb.w	lr, [r3, #244]	; 0xf4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56bc:	mov.w	lr, #29
      _s = s;
      _b = b;
    56c0:	strb.w	r1, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56c4:	mvn.w	r1, #62	; 0x3e
      _b = b;
    56c8:	strb.w	r9, [r3, #218]	; 0xda
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    56cc:	mvn.w	r9, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56d0:	strb.w	lr, [r3, #246]	; 0xf6
      _s = s;
      _b = b;
    56d4:	mvn.w	lr, #67	; 0x43
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56d8:	strb.w	r2, [r3, #222]	; 0xde
      _s = s;
    56dc:	strb.w	r2, [r3, #223]	; 0xdf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56e0:	strb.w	r2, [r3, #225]	; 0xe1
      _s = s;
    56e4:	strb.w	r2, [r3, #226]	; 0xe2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56e8:	strb.w	r2, [r3, #228]	; 0xe4
      _s = s;
    56ec:	strb.w	r2, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    56f0:	strb.w	r2, [r3, #231]	; 0xe7
      _s = s;
    56f4:	strb.w	r2, [r3, #232]	; 0xe8
      _b = b;
    56f8:	strb.w	ip, [r3, #233]	; 0xe9
    56fc:	strb.w	r0, [r3, #242]	; 0xf2
    5700:	movs	r0, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5702:	strb.w	r1, [r3, #247]	; 0xf7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5706:	movs	r1, #22
    5708:	strb.w	r7, [r3, #243]	; 0xf3
    570c:	movs	r7, #55	; 0x37
    570e:	strb.w	r6, [r3, #240]	; 0xf0
      _s = s;
      _b = b;
    5712:	strb.w	lr, [r3, #248]	; 0xf8
    5716:	mov.w	lr, #170	; 0xaa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    571a:	strb.w	r9, [r3, #250]	; 0xfa
      _b = b;
    571e:	mvn.w	r9, #92	; 0x5c
    5722:	strb.w	r4, [r3, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5726:	mvn.w	r4, #120	; 0x78
      _s = s;
      _b = b;
    572a:	strb.w	r9, [r3, #251]	; 0xfb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    572e:	mvn.w	r9, #113	; 0x71
      _b = b;
    5732:	strb.w	r8, [r3, #266]	; 0x10a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5736:	mvn.w	r8, #122	; 0x7a
      _s = s;
    573a:	strb.w	r9, [r3, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    573e:	mov.w	r9, #77	; 0x4d
    5742:	strb.w	r4, [r3, #270]	; 0x10e
    5746:	strb.w	r9, [r3, #255]	; 0xff
      _s = s;
    574a:	mov.w	r9, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    574e:	ldrb.w	r4, [sp, #4]
      _s = s;
    5752:	strb.w	r9, [r3, #259]	; 0x103
      _b = b;
    5756:	mvn.w	r9, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    575a:	strb.w	r8, [r3, #279]	; 0x117
    575e:	mov.w	r8, #112	; 0x70
      _s = s;
      _b = b;
    5762:	strb.w	r9, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5766:	mvn.w	r9, #43	; 0x2b
    576a:	strb.w	r4, [r3, #273]	; 0x111
      _s = s;
    576e:	mvn.w	r4, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5772:	strb.w	r8, [r3, #258]	; 0x102
      _s = s;
    5776:	mov.w	r8, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    577a:	strb.w	r9, [r3, #261]	; 0x105
      _s = s;
    577e:	mov.w	r9, #87	; 0x57
    5782:	strb.w	r4, [r3, #274]	; 0x112
      _b = b;
    5786:	mov.w	r4, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    578a:	strb.w	r8, [r3, #265]	; 0x109
    578e:	mvn.w	r8, #108	; 0x6c
    5792:	strb.w	r9, [r3, #262]	; 0x106
      _b = b;
    5796:	mov.w	r9, #32
    579a:	strb.w	r4, [r3, #275]	; 0x113
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    579e:	mov.w	r4, #48	; 0x30
    57a2:	strb.w	r8, [r3, #268]	; 0x10c
      _b = b;
    57a6:	mov.w	r8, #99	; 0x63
    57aa:	strb.w	r9, [r3, #263]	; 0x107
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57ae:	mvn.w	r9, #117	; 0x75
      _s = s;
    57b2:	strb.w	r4, [r3, #280]	; 0x118
    57b6:	movs	r4, #237	; 0xed
      _b = b;
    57b8:	strb.w	r0, [r3, #272]	; 0x110
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57bc:	movs	r0, #69	; 0x45
      _b = b;
    57be:	strb.w	lr, [r3, #254]	; 0xfe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57c2:	strb.w	lr, [r3, #256]	; 0x100
      _b = b;
    57c6:	mvn.w	lr, #86	; 0x56
    57ca:	strb.w	r8, [r3, #278]	; 0x116
    57ce:	mvn.w	r8, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57d2:	strb.w	sl, [r3, #264]	; 0x108
    57d6:	strb.w	r9, [r3, #267]	; 0x10b
    57da:	mov.w	r9, #123	; 0x7b
    57de:	strb.w	fp, [r3, #276]	; 0x114
    57e2:	strb.w	r1, [r3, #249]	; 0xf9
    57e6:	strb.w	r7, [r3, #252]	; 0xfc
      _s = s;
      _b = b;
    57ea:	strb.w	lr, [r3, #257]	; 0x101
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    57ee:	mov.w	lr, #17
    57f2:	strb.w	r4, [r3, #271]	; 0x10f
    57f6:	strb.w	r0, [r3, #277]	; 0x115
      _b = b;
    57fa:	strb.w	r8, [r3, #281]	; 0x119
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    57fe:	mvn.w	r8, #119	; 0x77
      _s = s;
    5802:	strb.w	r5, [r3, #295]	; 0x127
      _b = b;
    5806:	mvn.w	r5, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    580a:	strb.w	r8, [r3, #282]	; 0x11a
      _s = s;
      _b = b;
    580e:	mvn.w	r8, #24
    5812:	strb.w	r5, [r3, #296]	; 0x128
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5816:	mvn.w	r5, #124	; 0x7c
      _s = s;
      _b = b;
    581a:	strb.w	r8, [r3, #284]	; 0x11c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    581e:	mvn.w	r8, #120	; 0x78
    5822:	strb.w	r5, [r3, #297]	; 0x129
      _s = s;
    5826:	mov.w	r5, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    582a:	strb.w	r8, [r3, #285]	; 0x11d
      _s = s;
    582e:	mov.w	r8, #72	; 0x48
      _b = b;
    5832:	strb.w	r4, [r3, #287]	; 0x11f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5836:	movs	r4, #65	; 0x41
    5838:	strb.w	r8, [r3, #292]	; 0x124
      _b = b;
    583c:	mvn.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5840:	strb.w	r5, [r3, #298]	; 0x12a
      _b = b;
    5844:	mvn.w	r5, #33	; 0x21
    5848:	strb.w	r8, [r3, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    584c:	mov.w	r8, #59	; 0x3b
    5850:	strb.w	r7, [r3, #283]	; 0x11b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5854:	movs	r7, #149	; 0x95
      _s = s;
    5856:	strb.w	r8, [r3, #301]	; 0x12d
      _b = b;
    585a:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    585e:	strb.w	r0, [r3, #289]	; 0x121
      _b = b;
    5862:	movs	r0, #58	; 0x3a
    5864:	strb.w	r8, [r3, #302]	; 0x12e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5868:	mvn.w	r8, #111	; 0x6f
      _s = s;
      _b = b;
    586c:	strb.w	r5, [r3, #299]	; 0x12b
    5870:	movs	r5, #201	; 0xc9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5872:	strb.w	r8, [r3, #303]	; 0x12f
      _s = s;
    5876:	mov.w	r8, #5
      _b = b;
    587a:	strb.w	ip, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    587e:	strb.w	r8, [r3, #304]	; 0x130
      _b = b;
    5882:	mvn.w	r8, #9
    5886:	strb.w	ip, [r3, #311]	; 0x137
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    588a:	mvn.w	ip, #32
      _s = s;
    588e:	strb.w	r4, [r3, #313]	; 0x139
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5892:	mvn.w	r4, #109	; 0x6d
    5896:	strb.w	fp, [r3, #300]	; 0x12c
      _s = s;
      _b = b;
    589a:	strb.w	r8, [r3, #305]	; 0x131
    589e:	mov.w	r8, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58a2:	strb.w	r2, [r3, #306]	; 0x132
      _s = s;
    58a6:	strb.w	r2, [r3, #307]	; 0x133
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58aa:	strb.w	r2, [r3, #309]	; 0x135
      _s = s;
    58ae:	strb.w	r2, [r3, #310]	; 0x136
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58b2:	strb.w	ip, [r3, #312]	; 0x138
    58b6:	mov.w	ip, #34	; 0x22
      _s = s;
    58ba:	strb.w	lr, [r3, #286]	; 0x11e
    58be:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58c2:	strb.w	r7, [r3, #294]	; 0x126
      _s = s;
    58c6:	movs	r7, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58c8:	strb.w	r4, [r3, #288]	; 0x120
    58cc:	strb.w	r4, [r3, #291]	; 0x123
    58d0:	mov.w	r4, #77	; 0x4d
      _s = s;
      _b = b;
    58d4:	strb.w	r5, [r3, #290]	; 0x122
    58d8:	strb.w	r0, [r3, #314]	; 0x13a
    58dc:	movs	r0, #183	; 0xb7
    58de:	strb.w	r5, [r3, #329]	; 0x149
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58e2:	mov.w	r5, #29
    58e6:	strb.w	r6, [r3, #321]	; 0x141
      _s = s;
    58ea:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58ee:	strb.w	r5, [r3, #330]	; 0x14a
      _s = s;
    58f2:	mvn.w	r5, #96	; 0x60
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    58f6:	strb.w	r4, [r3, #315]	; 0x13b
      _s = s;
    58fa:	mov.w	r4, #59	; 0x3b
    58fe:	strb.w	r5, [r3, #331]	; 0x14b
      _b = b;
    5902:	mvn.w	r5, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5906:	strb.w	r6, [r3, #322]	; 0x142
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    590a:	mov.w	r6, #28
      _s = s;
      _b = b;
    590e:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5912:	mov.w	r5, #112	; 0x70
      _s = s;
    5916:	strb.w	r4, [r3, #316]	; 0x13c
    591a:	movs	r4, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    591c:	strb.w	r6, [r3, #324]	; 0x144
      _s = s;
    5920:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5924:	strb.w	r5, [r3, #336]	; 0x150
      _s = s;
    5928:	mov.w	r5, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    592c:	strb.w	r9, [r3, #342]	; 0x156
      _s = s;
    5930:	mvn.w	r9, #40	; 0x28
    5934:	strb.w	r6, [r3, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5938:	mov.w	r6, #20
      _s = s;
    593c:	strb.w	r5, [r3, #337]	; 0x151
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5940:	mov.w	r5, #123	; 0x7b
      _s = s;
    5944:	strb.w	r9, [r3, #319]	; 0x13f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5948:	mov.w	r9, #88	; 0x58
      _s = s;
      _b = b;
    594c:	strb.w	r8, [r3, #344]	; 0x158
    5950:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5954:	strb.w	r4, [r3, #334]	; 0x14e
    5958:	strb.w	r4, [r3, #346]	; 0x15a
      _b = b;
    595c:	mvn.w	r4, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5960:	strb.w	ip, [r3, #318]	; 0x13e
      _s = s;
      _b = b;
    5964:	mvn.w	ip, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5968:	strb.w	r6, [r3, #327]	; 0x147
      _s = s;
    596c:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5970:	strb.w	r5, [r3, #339]	; 0x153
      _s = s;
      _b = b;
    5974:	mvn.w	r5, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5978:	strb.w	r9, [r3, #333]	; 0x14d
      _s = s;
      _b = b;
    597c:	mvn.w	r9, #61	; 0x3d
    5980:	strb.w	r8, [r3, #317]	; 0x13d
    5984:	mvn.w	r8, #31
    5988:	strb.w	r4, [r3, #338]	; 0x152
    598c:	mvn.w	r4, #73	; 0x49
    5990:	strb.w	ip, [r3, #320]	; 0x140
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5994:	mov.w	ip, #125	; 0x7d
      _s = s;
    5998:	strb.w	r6, [r3, #328]	; 0x148
    599c:	movs	r6, #41	; 0x29
    599e:	strb.w	r1, [r3, #340]	; 0x154
      _b = b;
    59a2:	strb.w	r5, [r3, #341]	; 0x155
    59a6:	movs	r5, #232	; 0xe8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59a8:	strb.w	r1, [r3, #343]	; 0x157
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    59ac:	strb.w	sl, [r3, #345]	; 0x159
      _s = s;
      _b = b;
    59b0:	strb.w	r9, [r3, #335]	; 0x14f
    59b4:	mvn.w	r9, #74	; 0x4a
    59b8:	strb.w	r8, [r3, #323]	; 0x143
    59bc:	mvn.w	r8, #102	; 0x66
    59c0:	strb.w	r0, [r3, #326]	; 0x146
    59c4:	strb.w	r4, [r3, #347]	; 0x15b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59c8:	mvn.w	r4, #4
      _b = b;
    59cc:	strb.w	r9, [r3, #371]	; 0x173
    59d0:	mvn.w	r9, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59d4:	strb.w	r4, [r3, #349]	; 0x15d
      _b = b;
    59d8:	mvn.w	r4, #112	; 0x70
    59dc:	strb.w	r9, [r3, #374]	; 0x176
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59e0:	mov.w	r9, #85	; 0x55
      _b = b;
    59e4:	strb.w	r4, [r3, #350]	; 0x15e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59e8:	mov.w	r4, #115	; 0x73
    59ec:	strb.w	r9, [r3, #376]	; 0x178
      _b = b;
    59f0:	mvn.w	r9, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    59f4:	strb.w	r4, [r3, #352]	; 0x160
      _b = b;
    59f8:	mvn.w	r4, #102	; 0x66
    59fc:	strb.w	r8, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a00:	mvn.w	r8, #107	; 0x6b
      _s = s;
      _b = b;
    5a04:	strb.w	r4, [r3, #353]	; 0x161
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a08:	mov.w	r4, #127	; 0x7f
      _s = s;
      _b = b;
    5a0c:	strb.w	r9, [r3, #377]	; 0x179
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a10:	mvn.w	r9, #124	; 0x7c
    5a14:	strb.w	r4, [r3, #354]	; 0x162
      _s = s;
    5a18:	mov.w	r4, #57	; 0x39
    5a1c:	strb.w	r6, [r3, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a20:	mvn.w	r6, #122	; 0x7a
      _s = s;
    5a24:	strb.w	r4, [r3, #355]	; 0x163
      _b = b;
    5a28:	mvn.w	r4, #86	; 0x56
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a2c:	strb.w	r8, [r3, #366]	; 0x16e
      _s = s;
    5a30:	mov.w	r8, #94	; 0x5e
      _b = b;
    5a34:	strb.w	r4, [r3, #356]	; 0x164
    5a38:	ldrb.w	r4, [sp, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a3c:	strb.w	r9, [r3, #378]	; 0x17a
      _s = s;
    5a40:	mvn.w	r9, #79	; 0x4f
      _b = b;
    5a44:	strb.w	r4, [r3, #359]	; 0x167
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a48:	mvn.w	r4, #62	; 0x3e
    5a4c:	strb.w	lr, [r3, #358]	; 0x166
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a50:	mvn.w	lr, #114	; 0x72
      _s = s;
    5a54:	strb.w	r4, [r3, #361]	; 0x169
      _b = b;
    5a58:	mov.w	r4, #121	; 0x79
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a5c:	strb.w	r6, [r3, #372]	; 0x174
    5a60:	movs	r6, #142	; 0x8e
      _s = s;
      _b = b;
    5a62:	strb.w	r4, [r3, #362]	; 0x16a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a66:	mvn.w	r4, #112	; 0x70
    5a6a:	strb.w	fp, [r3, #348]	; 0x15c
    5a6e:	strb.w	r4, [r3, #363]	; 0x16b
      _s = s;
    5a72:	mov.w	r4, #115	; 0x73
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a76:	strb.w	fp, [r3, #357]	; 0x165
      _s = s;
    5a7a:	strb.w	r4, [r3, #364]	; 0x16c
    5a7e:	movs	r4, #192	; 0xc0
    5a80:	strb.w	r8, [r3, #367]	; 0x16f
    5a84:	mov.w	r8, #24
      _b = b;
    5a88:	strb.w	r0, [r3, #368]	; 0x170
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5a8c:	movs	r0, #166	; 0xa6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a8e:	strb.w	fp, [r3, #375]	; 0x177
      _s = s;
    5a92:	strb.w	r9, [r3, #379]	; 0x17b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5a96:	mov.w	r9, #126	; 0x7e
    5a9a:	strb.w	ip, [r3, #351]	; 0x15f
    5a9e:	mov.w	ip, #121	; 0x79
      _s = s;
    5aa2:	strb.w	r7, [r3, #370]	; 0x172
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5aa6:	movs	r7, #140	; 0x8c
    5aa8:	str	r6, [sp, #28]
    5aaa:	movs	r6, #121	; 0x79
    5aac:	strb.w	lr, [r3, #360]	; 0x168
    5ab0:	mvn.w	lr, #100	; 0x64
    5ab4:	strb.w	r2, [r3, #387]	; 0x183
      _s = s;
    5ab8:	strb.w	r2, [r3, #388]	; 0x184
      _b = b;
    5abc:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ac0:	strb.w	lr, [r3, #369]	; 0x171
    5ac4:	mvn.w	lr, #37	; 0x25
      _s = s;
      _b = b;
    5ac8:	strb.w	r2, [r3, #407]	; 0x197
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5acc:	mov.w	r2, #54	; 0x36
    5ad0:	strb.w	lr, [r3, #390]	; 0x186
      _s = s;
      _b = b;
    5ad4:	mov.w	lr, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ad8:	strb.w	r2, [r3, #408]	; 0x198
      _s = s;
      _b = b;
    5adc:	mvn.w	r2, #108	; 0x6c
    5ae0:	strb.w	lr, [r3, #392]	; 0x188
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ae4:	mov.w	lr, #101	; 0x65
      _s = s;
      _b = b;
    5ae8:	strb.w	r2, [r3, #410]	; 0x19a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5aec:	mov.w	r2, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5af0:	strb.w	lr, [r3, #393]	; 0x189
      _s = s;
      _b = b;
    5af4:	mvn.w	lr, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5af8:	strb.w	r2, [r3, #391]	; 0x187
    5afc:	mov.w	r2, #92	; 0x5c
      _b = b;
    5b00:	strb.w	lr, [r3, #398]	; 0x18e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b04:	mvn.w	lr, #32
    5b08:	strb.w	r2, [r3, #394]	; 0x18a
    5b0c:	movs	r2, #99	; 0x63
      _b = b;
    5b0e:	strb.w	r5, [r3, #380]	; 0x17c
    5b12:	mvn.w	r5, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b16:	str	r2, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b18:	mov.w	r2, #40	; 0x28
      _s = s;
    5b1c:	strb.w	lr, [r3, #400]	; 0x190
      _b = b;
    5b20:	mvn.w	lr, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b24:	strb.w	r2, [r3, #396]	; 0x18c
    5b28:	mov.w	r2, #21
      _s = s;
      _b = b;
    5b2c:	strb.w	r5, [r3, #386]	; 0x182
    5b30:	mvn.w	r5, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b34:	strb.w	r2, [r3, #402]	; 0x192
      _s = s;
      _b = b;
    5b38:	movs	r2, #225	; 0xe1
    5b3a:	strb.w	lr, [r3, #401]	; 0x191
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b3e:	mvn.w	lr, #12
      _b = b;
    5b42:	str	r2, [sp, #36]	; 0x24
    5b44:	mvn.w	r2, #71	; 0x47
    5b48:	strb.w	r5, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b4c:	movs	r5, #127	; 0x7f
    5b4e:	strb.w	r1, [r3, #399]	; 0x18f
    5b52:	movs	r1, #144	; 0x90
      _s = s;
    5b54:	strb.w	lr, [r3, #403]	; 0x193
    5b58:	mvn.w	lr, #4
      _b = b;
    5b5c:	strb.w	r2, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b60:	mov.w	r2, #111	; 0x6f
    5b64:	str	r5, [sp, #12]
      _s = s;
      _b = b;
    5b66:	movs	r5, #177	; 0xb1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b68:	str	r1, [sp, #44]	; 0x2c
    5b6a:	movs	r1, #138	; 0x8a
      _s = s;
    5b6c:	strb.w	lr, [r3, #406]	; 0x196
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b70:	mov.w	lr, #141	; 0x8d
    5b74:	strb.w	r2, [r3, #411]	; 0x19b
      _s = s;
      _b = b;
    5b78:	movs	r2, #228	; 0xe4
    5b7a:	str	r5, [sp, #32]
    5b7c:	mov	r5, r3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5b7e:	str	r6, [sp, #40]	; 0x28
    5b80:	mov	r6, r3
    5b82:	str	r1, [sp, #48]	; 0x30
    5b84:	mov	r1, r3
    5b86:	str.w	lr, [sp, #52]	; 0x34
      _s = s;
      _b = b;
    5b8a:	mov.w	lr, #62	; 0x3e
    5b8e:	str	r2, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b90:	mvn.w	r2, #77	; 0x4d
    5b94:	strb.w	r0, [r3, #397]	; 0x18d
    5b98:	strb.w	r2, [r3, #412]	; 0x19c
      _b = b;
    5b9c:	movs	r2, #231	; 0xe7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5b9e:	strb.w	r0, [r3, #409]	; 0x199
    5ba2:	mov.w	r0, #87	; 0x57
      _b = b;
    5ba6:	str	r2, [sp, #0]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ba8:	mvn.w	r2, #122	; 0x7a
      _s = s;
    5bac:	strb.w	r0, [r3, #415]	; 0x19f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bb0:	mov.w	r0, #95	; 0x5f
    5bb4:	strb.w	r2, [r3, #381]	; 0x17d
    5bb8:	strb.w	r2, [r3, #384]	; 0x180
      _s = s;
    5bbc:	mov.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bc0:	strb.w	r0, [r3, #414]	; 0x19e
      _s = s;
      _b = b;
    5bc4:	mov.w	r0, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bc8:	strb.w	r2, [r3, #427]	; 0x1ab
      _b = b;
    5bcc:	mvn.w	r2, #51	; 0x33
    5bd0:	strb.w	r0, [r3, #416]	; 0x1a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bd4:	mov.w	r0, #123	; 0x7b
      _s = s;
      _b = b;
    5bd8:	strb.w	r2, [r3, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5bdc:	mov.w	r2, #57	; 0x39
    5be0:	strb.w	r4, [r3, #382]	; 0x17e
    5be4:	strb.w	r2, [r3, #430]	; 0x1ae
      _b = b;
    5be8:	mvn.w	r2, #24
    5bec:	strb.w	r4, [r3, #383]	; 0x17f
    5bf0:	mvn.w	r4, #95	; 0x5f
    5bf4:	strb.w	r2, [r3, #431]	; 0x1af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5bf8:	mvn.w	r2, #116	; 0x74
    5bfc:	strb.w	r0, [r3, #417]	; 0x1a1
      _s = s;
    5c00:	mov.w	r0, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c04:	strb.w	r2, [r3, #432]	; 0x1b0
      _s = s;
    5c08:	mov.w	r2, #99	; 0x63
      _b = b;
    5c0c:	strb.w	r4, [r3, #395]	; 0x18b
    5c10:	movs	r4, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c12:	strb.w	r2, [r3, #433]	; 0x1b1
      _b = b;
    5c16:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c1a:	strb.w	r0, [r3, #418]	; 0x1a2
    5c1e:	mvn.w	r0, #83	; 0x53
      _b = b;
    5c22:	strb.w	r2, [r3, #434]	; 0x1b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c26:	ldrb.w	r2, [sp, #48]	; 0x30
      _s = s;
      _b = b;
    5c2a:	strb.w	r4, [r1, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c2e:	strb.w	r4, [r3, #420]	; 0x1a4
      _s = s;
      _b = b;
    5c32:	mvn.w	r4, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c36:	strb.w	r0, [r3, #424]	; 0x1a8
      _b = b;
    5c3a:	mvn.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c3e:	strb.w	r2, [r3, #435]	; 0x1b3
      _s = s;
    5c42:	mov.w	r2, #95	; 0x5f
    5c46:	strb.w	r8, [r3, #385]	; 0x181
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c4a:	strb.w	r8, [r3, #405]	; 0x195
      _s = s;
      _b = b;
    5c4e:	strb.w	r4, [r3, #422]	; 0x1a6
    5c52:	movs	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c54:	strb.w	fp, [r3, #423]	; 0x1a7
      _s = s;
      _b = b;
    5c58:	strb.w	r0, [r3, #425]	; 0x1a9
    5c5c:	movs	r0, #191	; 0xbf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c5e:	strb.w	fp, [r3, #429]	; 0x1ad
      _s = s;
    5c62:	strb.w	r2, [r3, #436]	; 0x1b4
      _b = b;
    5c66:	mvn.w	r2, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c6a:	strb.w	sl, [r3, #453]	; 0x1c5
      _s = s;
      _b = b;
    5c6e:	strb.w	r2, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c72:	mov.w	r2, #99	; 0x63
    5c76:	ldrb.w	sl, [sp, #32]
    5c7a:	strb.w	r2, [r3, #439]	; 0x1b7
      _b = b;
    5c7e:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c82:	strb.w	sl, [r3, #454]	; 0x1c6
      _b = b;
    5c86:	mvn.w	sl, #22
    5c8a:	strb.w	r2, [r3, #440]	; 0x1b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c8e:	mvn.w	r2, #116	; 0x74
      _s = s;
      _b = b;
    5c92:	strb.w	sl, [r3, #455]	; 0x1c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5c96:	mvn.w	sl, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5c9a:	strb.w	r2, [r3, #441]	; 0x1b9
      _s = s;
    5c9e:	mov.w	r2, #98	; 0x62
    5ca2:	strb.w	sl, [r3, #457]	; 0x1c9
      _b = b;
    5ca6:	mvn.w	sl, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5caa:	strb.w	r2, [r3, #442]	; 0x1ba
      _b = b;
    5cae:	mvn.w	r2, #69	; 0x45
    5cb2:	strb.w	sl, [r3, #458]	; 0x1ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cb6:	mvn.w	sl, #96	; 0x60
      _b = b;
    5cba:	strb.w	r2, [r3, #443]	; 0x1bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cbe:	mov.w	r2, #116	; 0x74
    5cc2:	strb.w	sl, [r3, #460]	; 0x1cc
      _b = b;
    5cc6:	mvn.w	sl, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cca:	strb.w	r2, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cce:	mvn.w	r2, #122	; 0x7a
      _s = s;
      _b = b;
    5cd2:	strb.w	sl, [r3, #464]	; 0x1d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cd6:	mov.w	sl, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5cda:	strb.w	r2, [r3, #438]	; 0x1b6
      _s = s;
      _b = b;
    5cde:	mov.w	r2, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ce2:	strb.w	r7, [r3, #444]	; 0x1bc
      _s = s;
      _b = b;
    5ce6:	strb.w	r2, [r3, #419]	; 0x1a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cea:	mov.w	r2, #47	; 0x2f
      _b = b;
    5cee:	strb.w	r7, [r3, #449]	; 0x1c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cf2:	mov.w	r7, #73	; 0x49
    5cf6:	strb.w	r2, [r3, #421]	; 0x1a5
      _b = b;
    5cfa:	mov.w	r2, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5cfe:	strb.w	sl, [r3, #466]	; 0x1d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d02:	mvn.w	sl, #95	; 0x5f
      _s = s;
      _b = b;
    5d06:	strb.w	r2, [r3, #446]	; 0x1be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d0a:	mvn.w	r2, #108	; 0x6c
      _s = s;
    5d0e:	strb.w	r7, [r3, #451]	; 0x1c3
      _b = b;
    5d12:	mvn.w	r7, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d16:	strb.w	r2, [r3, #447]	; 0x1bf
      _s = s;
    5d1a:	mov.w	r2, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d1e:	strb.w	sl, [r3, #468]	; 0x1d4
      _s = s;
    5d22:	mov.w	sl, #37	; 0x25
    5d26:	strb.w	r2, [r3, #448]	; 0x1c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d2a:	mvn.w	r2, #124	; 0x7c
    5d2e:	strb.w	r9, [r3, #426]	; 0x1aa
    5d32:	strb.w	r2, [r3, #450]	; 0x1c2
    5d36:	strb.w	r2, [r3, #456]	; 0x1c8
    5d3a:	mvn.w	r2, #116	; 0x74
      _s = s;
      _b = b;
    5d3e:	strb.w	r7, [r3, #452]	; 0x1c4
    5d42:	mvn.w	r7, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d46:	strb.w	fp, [r3, #459]	; 0x1cb
      _s = s;
      _b = b;
    5d4a:	mov.w	fp, #130	; 0x82
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d4e:	strb.w	r2, [r3, #465]	; 0x1d1
    5d52:	mvn.w	r2, #124	; 0x7c
      _s = s;
    5d56:	strb.w	sl, [r3, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d5a:	mov.w	sl, #116	; 0x74
      _s = s;
      _b = b;
    5d5e:	strb.w	lr, [r3, #470]	; 0x1d6
    5d62:	mov.w	lr, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d66:	strb.w	sl, [r3, #471]	; 0x1d7
      _s = s;
    5d6a:	mov.w	sl, #123	; 0x7b
      _b = b;
    5d6e:	strb.w	r8, [r3, #497]	; 0x1f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5d72:	strb.w	sl, [r3, #472]	; 0x1d8
      _b = b;
    5d76:	mvn.w	sl, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d7a:	strb.w	ip, [r1, #498]	; 0x1f2
      _s = s;
      _b = b;
    5d7e:	strb.w	sl, [r3, #473]	; 0x1d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d82:	mov.w	sl, #114	; 0x72
    5d86:	strb.w	sl, [r3, #474]	; 0x1da
      _s = s;
    5d8a:	mov.w	sl, #96	; 0x60
    5d8e:	strb.w	sl, [r3, #475]	; 0x1db
      _b = b;
    5d92:	mvn.w	sl, #39	; 0x27
    5d96:	strb.w	sl, [r3, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5d9a:	mov.w	sl, #106	; 0x6a
    5d9e:	strb.w	sl, [r3, #477]	; 0x1dd
      _s = s;
    5da2:	mov.w	sl, #66	; 0x42
    5da6:	strb.w	sl, [r3, #478]	; 0x1de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5daa:	mvn.w	sl, #122	; 0x7a
    5dae:	strb.w	sl, [r3, #462]	; 0x1ce
      _s = s;
      _b = b;
    5db2:	mvn.w	sl, #55	; 0x37
    5db6:	strb.w	sl, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5dba:	mvn.w	sl, #103	; 0x67
    5dbe:	strb.w	sl, [r3, #463]	; 0x1cf
      _b = b;
    5dc2:	mvn.w	sl, #97	; 0x61
    5dc6:	strb.w	sl, [r3, #467]	; 0x1d3
    5dca:	mvn.w	sl, #30
    5dce:	strb.w	sl, [r3, #479]	; 0x1df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dd2:	mov.w	sl, #38	; 0x26
    5dd6:	strb.w	sl, [r3, #480]	; 0x1e0
      _s = s;
    5dda:	mvn.w	sl, #102	; 0x66
    5dde:	strb.w	sl, [r3, #481]	; 0x1e1
      _b = b;
    5de2:	mvn.w	sl, #79	; 0x4f
    5de6:	strb.w	sl, [r3, #482]	; 0x1e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dea:	mov.w	sl, #112	; 0x70
    5dee:	strb.w	sl, [r3, #483]	; 0x1e3
      _s = s;
    5df2:	mov.w	sl, #118	; 0x76
    5df6:	strb.w	sl, [r3, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5dfa:	mov.w	sl, #116	; 0x74
    5dfe:	strb.w	sl, [r3, #486]	; 0x1e6
      _s = s;
    5e02:	mvn.w	sl, #34	; 0x22
    5e06:	strb.w	sl, [r3, #487]	; 0x1e7
      _b = b;
    5e0a:	ldrb.w	sl, [sp, #8]
    5e0e:	strb.w	sl, [r3, #488]	; 0x1e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e12:	mov.w	sl, #98	; 0x62
    5e16:	strb.w	sl, [r3, #489]	; 0x1e9
      _s = s;
    5e1a:	mvn.w	sl, #110	; 0x6e
    5e1e:	strb.w	sl, [r3, #490]	; 0x1ea
      _b = b;
    5e22:	ldrb.w	sl, [sp, #20]
    5e26:	strb.w	sl, [r3, #491]	; 0x1eb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e2a:	mov.w	sl, #105	; 0x69
    5e2e:	strb.w	sl, [r3, #492]	; 0x1ec
      _s = s;
    5e32:	mov.w	sl, #95	; 0x5f
    5e36:	strb.w	sl, [r3, #496]	; 0x1f0
    5e3a:	mvn.w	sl, #121	; 0x79
    5e3e:	strb.w	sl, [r3, #499]	; 0x1f3
      _b = b;
    5e42:	mov.w	sl, #106	; 0x6a
    5e46:	strb.w	sl, [r3, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e4a:	mvn.w	sl, #73	; 0x49
      _b = b;
    5e4e:	strb.w	r7, [r3, #503]	; 0x1f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5e52:	mvn.w	r7, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e56:	strb.w	r2, [r3, #501]	; 0x1f5
      _s = s;
    5e5a:	strb.w	r7, [r3, #505]	; 0x1f9
      _b = b;
    5e5e:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e62:	ldr	r2, [sp, #4]
      _s = s;
      _b = b;
    5e64:	strb.w	r7, [r3, #506]	; 0x1fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e68:	ldrb.w	r7, [sp, #28]
      _s = s;
    5e6c:	strb.w	sl, [r3, #502]	; 0x1f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e70:	mov.w	sl, #127	; 0x7f
    5e74:	strb.w	r7, [r3, #507]	; 0x1fb
      _s = s;
    5e78:	mvn.w	r7, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e7c:	strb.w	r2, [r1, #504]	; 0x1f8
      _s = s;
    5e80:	strb.w	r7, [r3, #508]	; 0x1fc
      _b = b;
    5e84:	strb.w	r7, [r3, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e88:	mvn.w	r7, #109	; 0x6d
      _s = s;
      _b = b;
    5e8c:	strb.w	r4, [r3, #494]	; 0x1ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5e90:	mov.w	r4, #113	; 0x71
    5e94:	strb.w	r7, [r3, #510]	; 0x1fe
      _s = s;
    5e98:	mvn.w	r7, #110	; 0x6e
      _b = b;
    5e9c:	strb.w	r0, [r3, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ea0:	strb.w	r7, [r3, #511]	; 0x1ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ea4:	mvn.w	r7, #52	; 0x34
    5ea8:	strb.w	r7, [r3, #495]	; 0x1ef
      _s = s;
    5eac:	mov.w	r7, #124	; 0x7c
    5eb0:	strb.w	r7, [r3, #493]	; 0x1ed
      _b = b;
    5eb4:	mvn.w	r7, #37	; 0x25
    5eb8:	strb.w	r7, [r3, #512]	; 0x200
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5ebc:	mvn.w	r7, #112	; 0x70
    5ec0:	strb.w	r7, [r3, #514]	; 0x202
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ec4:	ldrb.w	r7, [sp, #52]	; 0x34
    5ec8:	strb.w	r7, [r3, #513]	; 0x201
    5ecc:	ldrb.w	r7, [sp, #44]	; 0x2c
    5ed0:	strb.w	r7, [r3, #516]	; 0x204
      _s = s;
    5ed4:	mvn.w	r7, #81	; 0x51
    5ed8:	strb.w	r7, [r3, #517]	; 0x205
      _b = b;
    5edc:	mvn.w	r7, #31
    5ee0:	strb.w	r7, [r3, #518]	; 0x206
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ee4:	mvn.w	r7, #109	; 0x6d
    5ee8:	strb.w	r7, [r3, #519]	; 0x207
      _s = s;
    5eec:	mvn.w	r7, #101	; 0x65
    5ef0:	strb.w	r7, [r3, #520]	; 0x208
      _b = b;
    5ef4:	mvn.w	r7, #20
    5ef8:	strb.w	r7, [r3, #521]	; 0x209
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5efc:	ldrb.w	r7, [sp, #48]	; 0x30
    5f00:	strb.w	r7, [r3, #522]	; 0x20a
      _s = s;
      _b = b;
    5f04:	mvn.w	r7, #37	; 0x25
    5f08:	strb.w	r7, [r3, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f0c:	mov.w	r7, #37	; 0x25
    5f10:	strb.w	r7, [r3, #526]	; 0x20e
      _b = b;
    5f14:	mvn.w	r7, #105	; 0x69
    5f18:	strb.w	r7, [r3, #527]	; 0x20f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f1c:	movs	r7, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f1e:	strb.w	ip, [r1, #531]	; 0x213
      _s = s;
    5f22:	mov.w	ip, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f26:	strb.w	r4, [r3, #528]	; 0x210
      _s = s;
    5f2a:	mov.w	r4, #52	; 0x34
    5f2e:	strb.w	ip, [r3, #544]	; 0x220
    5f32:	mov.w	ip, #125	; 0x7d
    5f36:	strb.w	r4, [r3, #529]	; 0x211
      _b = b;
    5f3a:	mvn.w	r4, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f3e:	strb.w	ip, [r3, #541]	; 0x21d
      _b = b;
    5f42:	mvn.w	ip, #42	; 0x2a
    5f46:	strb.w	r4, [r3, #530]	; 0x212
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f4a:	mvn.w	r4, #58	; 0x3a
      _b = b;
    5f4e:	strb.w	ip, [r3, #542]	; 0x21e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f52:	mvn.w	ip, #120	; 0x78
      _s = s;
    5f56:	strb.w	r4, [r3, #535]	; 0x217
      _b = b;
    5f5a:	mvn.w	r4, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f5e:	strb.w	ip, [r3, #543]	; 0x21f
    5f62:	mov.w	ip, #119	; 0x77
      _s = s;
      _b = b;
    5f66:	strb.w	r4, [r3, #536]	; 0x218
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f6a:	mvn.w	r4, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f6e:	strb.w	ip, [r3, #525]	; 0x20d
      _s = s;
      _b = b;
    5f72:	mvn.w	ip, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f76:	strb.w	r4, [r3, #538]	; 0x21a
      _b = b;
    5f7a:	strb.w	ip, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f7e:	mvn.w	ip, #34	; 0x22
      _b = b;
    5f82:	ldrb.w	r4, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5f86:	strb.w	ip, [r3, #553]	; 0x229
      _b = b;
    5f8a:	mvn.w	ip, #110	; 0x6e
    5f8e:	strb.w	r4, [r3, #539]	; 0x21b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f92:	mvn.w	r4, #124	; 0x7c
      _s = s;
      _b = b;
    5f96:	strb.w	ip, [r1, #554]	; 0x22a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5f9a:	mvn.w	ip, #120	; 0x78
    5f9e:	strb.w	r4, [r3, #540]	; 0x21c
      _s = s;
      _b = b;
    5fa2:	mvn.w	r4, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fa6:	strb.w	ip, [r1, #555]	; 0x22b
      _s = s;
      _b = b;
    5faa:	strb.w	r4, [r3, #515]	; 0x203
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fae:	mov.w	r4, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fb2:	strb.w	ip, [r1, #558]	; 0x22e
      _s = s;
      _b = b;
    5fb6:	ldrb.w	ip, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fba:	strb.w	r9, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fbe:	strb.w	r9, [r3, #534]	; 0x216
      _s = s;
    5fc2:	strb.w	r4, [r3, #523]	; 0x20b
    5fc6:	movs	r4, #110	; 0x6e
      _b = b;
    5fc8:	strb.w	fp, [r3, #545]	; 0x221
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fcc:	strb.w	fp, [r3, #546]	; 0x222
      _s = s;
    5fd0:	mvn.w	r3, #124	; 0x7c
      _b = b;
    5fd4:	strb.w	ip, [r1, #563]	; 0x233
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    5fd8:	mov.w	ip, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fdc:	strb.w	sl, [r1, #537]	; 0x219
    5fe0:	strb.w	sl, [r1, #549]	; 0x225
      _s = s;
    5fe4:	strb.w	r3, [r1, #550]	; 0x226
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fe8:	strb.w	r3, [r1, #552]	; 0x228
      _s = s;
      _b = b;
    5fec:	movs	r3, #161	; 0xa1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5fee:	strb.w	r0, [r1, #570]	; 0x23a
      _s = s;
    5ff2:	strb.w	ip, [r1, #571]	; 0x23b
    5ff6:	ldrb.w	ip, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    5ffa:	strb.w	r0, [r1, #573]	; 0x23d
      _s = s;
    5ffe:	mvn.w	r0, #3
    6002:	strb.w	ip, [r1, #574]	; 0x23e
      _b = b;
    6006:	mvn.w	ip, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    600a:	strb.w	sl, [r1, #576]	; 0x240
      _s = s;
      _b = b;
    600e:	mov.w	sl, #121	; 0x79
    6012:	strb.w	ip, [r1, #560]	; 0x230
    6016:	mov.w	ip, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    601a:	strb.w	r0, [r1, #559]	; 0x22f
      _b = b;
    601e:	strb.w	ip, [r1, #575]	; 0x23f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6022:	mov.w	ip, #97	; 0x61
    6026:	strb.w	r0, [r1, #583]	; 0x247
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    602a:	movs	r0, #142	; 0x8e
      _s = s;
    602c:	strb.w	ip, [r1, #547]	; 0x223
      _b = b;
    6030:	mvn.w	ip, #96	; 0x60
    6034:	strb.w	r8, [r1, #572]	; 0x23c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6038:	mov.w	r8, #20
      _b = b;
    603c:	strb.w	ip, [r1, #548]	; 0x224
    6040:	mvn.w	ip, #67	; 0x43
    6044:	strb.w	lr, [r1, #569]	; 0x239
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6048:	mov.w	lr, #83	; 0x53
      _b = b;
    604c:	strb.w	ip, [r1, #551]	; 0x227
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6050:	mvn.w	ip, #28
      _b = b;
    6054:	strb.w	sl, [r1, #578]	; 0x242
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6058:	strb.w	ip, [r1, #556]	; 0x22c
      _b = b;
    605c:	mvn.w	ip, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6060:	strb.w	r0, [r1, #585]	; 0x249
      _s = s;
      _b = b;
    6064:	strb.w	ip, [r1, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6068:	mvn.w	ip, #119	; 0x77
      _s = s;
    606c:	strb.w	sl, [r1, #586]	; 0x24a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6070:	mov.w	sl, #138	; 0x8a
    6074:	strb.w	ip, [r1, #561]	; 0x231
      _s = s;
      _b = b;
    6078:	strb.w	ip, [r1, #566]	; 0x236
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    607c:	mvn.w	ip, #5
    6080:	strb.w	ip, [r1, #562]	; 0x232
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6084:	mov.w	ip, #111	; 0x6f
    6088:	strb.w	ip, [r1, #564]	; 0x234
      _s = s;
    608c:	mvn.w	ip, #104	; 0x68
    6090:	strb.w	ip, [r1, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6094:	ldrb.w	ip, [sp, #24]
    6098:	strb.w	ip, [r1, #567]	; 0x237
      _s = s;
    609c:	mov.w	ip, #114	; 0x72
    60a0:	strb.w	ip, [r1, #568]	; 0x238
    60a4:	mov.w	ip, #115	; 0x73
    60a8:	strb.w	ip, [r1, #577]	; 0x241
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60ac:	ldrb.w	ip, [sp, #44]	; 0x2c
    60b0:	strb.w	ip, [r1, #582]	; 0x246
      _s = s;
    60b4:	mov.w	ip, #114	; 0x72
    60b8:	strb.w	ip, [r1, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60bc:	mvn.w	ip, #116	; 0x74
    60c0:	strb.w	ip, [r1, #591]	; 0x24f
      _s = s;
    60c4:	mov.w	ip, #124	; 0x7c
    60c8:	strb.w	ip, [r1, #595]	; 0x253
      _b = b;
    60cc:	mvn.w	ip, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60d0:	strb.w	r0, [r1, #600]	; 0x258
      _s = s;
      _b = b;
    60d4:	mvn.w	r0, #116	; 0x74
    60d8:	strb.w	ip, [r1, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60dc:	mov.w	ip, #78	; 0x4e
      _b = b;
    60e0:	strb.w	r0, [r1, #608]	; 0x260
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    60e4:	strb.w	ip, [r1, #604]	; 0x25c
      _b = b;
    60e8:	mvn.w	ip, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60ec:	ldr	r0, [sp, #8]
      _s = s;
      _b = b;
    60ee:	strb.w	ip, [r1, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60f2:	mvn.w	ip, #122	; 0x7a
      _s = s;
    60f6:	strb.w	fp, [r1, #601]	; 0x259
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    60fa:	strb.w	ip, [r1, #579]	; 0x243
    60fe:	strb.w	ip, [r1, #603]	; 0x25b
      _s = s;
    6102:	mvn.w	ip, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6106:	strb.w	r0, [r1, #609]	; 0x261
      _s = s;
    610a:	strb.w	ip, [r1, #580]	; 0x244
      _b = b;
    610e:	mvn.w	ip, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6112:	strb.w	r7, [r1, #610]	; 0x262
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6116:	movs	r7, #1
      _s = s;
      _b = b;
    6118:	strb.w	ip, [r1, #584]	; 0x248
    611c:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6120:	strb.w	r4, [r1, #598]	; 0x256
      _b = b;
    6124:	strb.w	ip, [r1, #587]	; 0x24b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6128:	mvn.w	ip, #115	; 0x73
    612c:	strb.w	r4, [r1, #606]	; 0x25e
      _s = s;
      _b = b;
    6130:	movs	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6132:	strb.w	ip, [r1, #588]	; 0x24c
    6136:	strb.w	ip, [r1, #594]	; 0x252
    613a:	strb.w	ip, [r1, #597]	; 0x255
      _s = s;
      _b = b;
    613e:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6142:	strb.w	r0, [r1, #612]	; 0x264
      _s = s;
      _b = b;
    6146:	strb.w	ip, [r1, #590]	; 0x24e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    614a:	mvn.w	ip, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    614e:	strb.w	r9, [r1, #615]	; 0x267
      _s = s;
    6152:	mov.w	r9, #85	; 0x55
    6156:	strb.w	ip, [r1, #592]	; 0x250
      _b = b;
    615a:	mvn.w	ip, #38	; 0x26
    615e:	strb.w	ip, [r1, #593]	; 0x251
    6162:	mvn.w	ip, #25
    6166:	strb.w	ip, [r1, #596]	; 0x254
    616a:	strb.w	ip, [r1, #602]	; 0x25a
    616e:	mvn.w	ip, #19
    6172:	strb.w	ip, [r1, #599]	; 0x257
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6176:	mov.w	ip, #93	; 0x5d
    617a:	strb.w	ip, [r1, #607]	; 0x25f
      _b = b;
    617e:	mvn.w	ip, #115	; 0x73
    6182:	strb.w	ip, [r1, #611]	; 0x263
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6186:	mov.w	ip, #124	; 0x7c
    618a:	strb.w	ip, [r1, #613]	; 0x265
    618e:	mov.w	ip, #115	; 0x73
    6192:	strb.w	ip, [r1, #616]	; 0x268
      _b = b;
    6196:	mvn.w	ip, #70	; 0x46
    619a:	strb.w	ip, [r1, #620]	; 0x26c
    619e:	mvn.w	ip, #35	; 0x23
    61a2:	strb.w	ip, [r1, #623]	; 0x26f
    61a6:	mvn.w	ip, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61aa:	strb.w	r0, [r1, #624]	; 0x270
    61ae:	mvn.w	r0, #124	; 0x7c
      _s = s;
      _b = b;
    61b2:	strb.w	ip, [r1, #629]	; 0x275
    61b6:	mvn.w	ip, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61ba:	strb.w	fp, [r1, #627]	; 0x273
      _s = s;
      _b = b;
    61be:	strb.w	ip, [r1, #632]	; 0x278
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    61c2:	mvn.w	ip, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61c6:	strb.w	r0, [r1, #633]	; 0x279
      _s = s;
    61ca:	strb.w	ip, [r1, #634]	; 0x27a
      _b = b;
    61ce:	mvn.w	ip, #105	; 0x69
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61d2:	strb.w	r0, [r1, #636]	; 0x27c
      _s = s;
      _b = b;
    61d6:	movs	r0, #18
    61d8:	strb.w	ip, [r1, #638]	; 0x27e
    61dc:	ldrb.w	ip, [sp, #44]	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61e0:	strb.w	sl, [r1, #639]	; 0x27f
      _s = s;
      _b = b;
    61e4:	strb.w	ip, [r1, #641]	; 0x281
    61e8:	mvn.w	ip, #93	; 0x5d
    61ec:	strb.w	r3, [r1, #617]	; 0x269
    61f0:	strb.w	ip, [r1, #614]	; 0x266
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61f4:	mov.w	ip, #123	; 0x7b
    61f8:	strb.w	r3, [r1, #642]	; 0x282
      _s = s;
      _b = b;
    61fc:	movs	r3, #249	; 0xf9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    61fe:	strb.w	ip, [r1, #618]	; 0x26a
      _s = s;
    6202:	mov.w	ip, #42	; 0x2a
    6206:	strb.w	r8, [r1, #622]	; 0x26e
    620a:	strb.w	ip, [r1, #619]	; 0x26b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    620e:	mvn.w	ip, #126	; 0x7e
      _s = s;
    6212:	strb.w	lr, [r1, #643]	; 0x283
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6216:	strb.w	ip, [r1, #621]	; 0x26d
      _s = s;
    621a:	mov.w	ip, #45	; 0x2d
      _b = b;
    621e:	strb.w	lr, [r1, #647]	; 0x287
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6222:	mov.w	lr, #141	; 0x8d
      _s = s;
    6226:	strb.w	ip, [r1, #625]	; 0x271
      _b = b;
    622a:	mvn.w	ip, #66	; 0x42
    622e:	strb.w	ip, [r1, #626]	; 0x272
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6232:	mvn.w	ip, #55	; 0x37
    6236:	strb.w	ip, [r1, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    623a:	mvn.w	ip, #123	; 0x7b
    623e:	strb.w	ip, [r1, #630]	; 0x276
      _s = s;
    6242:	mvn.w	ip, #8
    6246:	strb.w	ip, [r1, #631]	; 0x277
      _b = b;
    624a:	mvn.w	ip, #90	; 0x5a
    624e:	strb.w	ip, [r1, #635]	; 0x27b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6252:	mvn.w	ip, #17
    6256:	strb.w	ip, [r1, #637]	; 0x27d
    625a:	mvn.w	ip, #98	; 0x62
    625e:	strb.w	ip, [r1, #640]	; 0x280
      _b = b;
    6262:	mvn.w	ip, #120	; 0x78
    6266:	strb.w	ip, [r1, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    626a:	mov.w	ip, #119	; 0x77
    626e:	strb.w	ip, [r1, #646]	; 0x286
    6272:	ldrb.w	ip, [sp, #20]
    6276:	strb.w	ip, [r1, #649]	; 0x289
      _b = b;
    627a:	mov.w	ip, #112	; 0x70
    627e:	strb.w	ip, [r1, #650]	; 0x28a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6282:	mvn.w	ip, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6286:	strb.w	lr, [r1, #651]	; 0x28b
      _s = s;
    628a:	strb.w	ip, [r1, #652]	; 0x28c
      _b = b;
    628e:	ldrb.w	ip, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6292:	strb.w	lr, [r1, #654]	; 0x28e
      _s = s;
      _b = b;
    6296:	strb.w	ip, [r1, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    629a:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    629e:	strb.w	lr, [r1, #657]	; 0x291
    62a2:	mov	lr, r2
      _s = s;
    62a4:	strb.w	ip, [r1, #655]	; 0x28f
    62a8:	mvn.w	ip, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62ac:	strb.w	r2, [r1, #660]	; 0x294
      _s = s;
    62b0:	movs	r2, #142	; 0x8e
    62b2:	strb.w	ip, [r1, #658]	; 0x292
      _b = b;
    62b6:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62ba:	strb.w	lr, [r1, #669]	; 0x29d
      _s = s;
    62be:	mov.w	lr, #114	; 0x72
      _b = b;
    62c2:	strb.w	ip, [r1, #662]	; 0x296
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62c6:	mvn.w	ip, #120	; 0x78
      _s = s;
    62ca:	strb.w	r2, [r1, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62ce:	strb.w	ip, [r1, #663]	; 0x297
      _s = s;
      _b = b;
    62d2:	mvn.w	ip, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62d6:	strb.w	r2, [r1, #672]	; 0x2a0
      _s = s;
    62da:	movs	r2, #246	; 0xf6
      _b = b;
    62dc:	strb.w	ip, [r1, #665]	; 0x299
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62e0:	mvn.w	ip, #121	; 0x79
    62e4:	strb.w	r7, [r1, #648]	; 0x288
    62e8:	mvn.w	r7, #116	; 0x74
    62ec:	strb.w	ip, [r1, #666]	; 0x29a
      _s = s;
    62f0:	mvn.w	ip, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    62f4:	strb.w	sl, [r1, #678]	; 0x2a6
      _s = s;
    62f8:	strb.w	ip, [r1, #667]	; 0x29b
    62fc:	mvn.w	ip, #81	; 0x51
    6300:	strb.w	ip, [r1, #670]	; 0x29e
      _b = b;
    6304:	mvn.w	ip, #47	; 0x2f
    6308:	strb.w	ip, [r1, #671]	; 0x29f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    630c:	mvn.w	ip, #119	; 0x77
    6310:	strb.w	ip, [r1, #673]	; 0x2a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6314:	mvn.w	ip, #115	; 0x73
    6318:	strb.w	ip, [r1, #675]	; 0x2a3
      _s = s;
    631c:	mvn.w	ip, #102	; 0x66
    6320:	strb.w	ip, [r1, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6324:	mvn.w	ip, #15
    6328:	strb.w	ip, [r1, #645]	; 0x285
      _s = s;
      _b = b;
    632c:	mvn.w	ip, #26
    6330:	strb.w	ip, [r1, #656]	; 0x290
    6334:	mvn.w	ip, #56	; 0x38
    6338:	strb.w	ip, [r1, #659]	; 0x293
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    633c:	mvn.w	ip, #92	; 0x5c
    6340:	strb.w	ip, [r1, #664]	; 0x298
      _b = b;
    6344:	mvn.w	ip, #29
    6348:	strb.w	ip, [r1, #668]	; 0x29c
    634c:	mvn.w	ip, #50	; 0x32
    6350:	strb.w	ip, [r1, #674]	; 0x2a2
    6354:	mvn.w	ip, #20
    6358:	strb.w	ip, [r1, #677]	; 0x2a5
    635c:	mvn.w	ip, #23
    6360:	strb.w	ip, [r1, #680]	; 0x2a8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6364:	mov.w	ip, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6368:	strb.w	sl, [r1, #681]	; 0x2a9
      _s = s;
    636c:	mvn.w	sl, #106	; 0x6a
    6370:	strb.w	lr, [r1, #682]	; 0x2aa
      _b = b;
    6374:	mov.w	lr, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6378:	strb.w	fp, [r1, #684]	; 0x2ac
      _s = s;
      _b = b;
    637c:	strb.w	lr, [r1, #686]	; 0x2ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6380:	mvn.w	lr, #50	; 0x32
      _s = s;
    6384:	strb.w	r9, [r1, #688]	; 0x2b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6388:	strb.w	lr, [r1, #687]	; 0x2af
    638c:	strb.w	lr, [r1, #690]	; 0x2b2
    6390:	mov.w	lr, #97	; 0x61
      _s = s;
      _b = b;
    6394:	strb.w	r0, [r1, #689]	; 0x2b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6398:	strb.w	lr, [r1, #696]	; 0x2b8
      _s = s;
    639c:	mov.w	lr, #42	; 0x2a
      _b = b;
    63a0:	strb.w	r0, [r1, #695]	; 0x2b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63a4:	movs	r0, #150	; 0x96
      _s = s;
    63a6:	strb.w	lr, [r1, #697]	; 0x2b9
      _b = b;
    63aa:	mov.w	lr, #125	; 0x7d
    63ae:	strb.w	r4, [r1, #692]	; 0x2b4
    63b2:	strb.w	lr, [r1, #698]	; 0x2ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63b6:	ldrb.w	lr, [sp, #8]
    63ba:	strb.w	lr, [r1, #699]	; 0x2bb
      _s = s;
      _b = b;
    63be:	mvn.w	lr, #38	; 0x26
    63c2:	strb.w	lr, [r1, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63c6:	mov.w	lr, #95	; 0x5f
    63ca:	strb.w	lr, [r1, #702]	; 0x2be
      _s = s;
      _b = b;
    63ce:	mvn.w	lr, #29
    63d2:	strb.w	lr, [r1, #704]	; 0x2c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    63d6:	mvn.w	lr, #122	; 0x7a
    63da:	strb.w	lr, [r1, #705]	; 0x2c1
    63de:	strb.w	lr, [r1, #708]	; 0x2c4
      _s = s;
    63e2:	mvn.w	lr, #40	; 0x28
    63e6:	strb.w	lr, [r1, #685]	; 0x2ad
    63ea:	mov.w	lr, #70	; 0x46
    63ee:	strb.w	lr, [r1, #694]	; 0x2b6
    63f2:	mov.w	lr, #34	; 0x22
    63f6:	strb.w	lr, [r1, #700]	; 0x2bc
    63fa:	mov.w	lr, #13
    63fe:	strb.w	lr, [r1, #703]	; 0x2bf
    6402:	mov.w	lr, #86	; 0x56
    6406:	strb.w	lr, [r1, #679]	; 0x2a7
      _b = b;
    640a:	mvn.w	lr, #32
    640e:	strb.w	lr, [r1, #683]	; 0x2ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6412:	mov.w	lr, #90	; 0x5a
    6416:	strb.w	lr, [r1, #691]	; 0x2b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    641a:	mvn.w	lr, #51	; 0x33
    641e:	strb.w	lr, [r1, #693]	; 0x2b5
      _s = s;
    6422:	mov.w	lr, #87	; 0x57
    6426:	strb.w	lr, [r1, #706]	; 0x2c2
      _b = b;
    642a:	mvn.w	lr, #68	; 0x44
    642e:	strb.w	lr, [r1, #707]	; 0x2c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6432:	mvn.w	lr, #7
    6436:	strb.w	lr, [r1, #709]	; 0x2c5
      _b = b;
    643a:	mvn.w	lr, #91	; 0x5b
    643e:	strb.w	lr, [r1, #710]	; 0x2c6
    6442:	mvn.w	lr, #67	; 0x43
    6446:	strb.w	lr, [r1, #713]	; 0x2c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    644a:	mvn.w	lr, #123	; 0x7b
    644e:	strb.w	lr, [r1, #711]	; 0x2c7
      _s = s;
      _b = b;
    6452:	mvn.w	lr, #30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6456:	strb.w	r7, [r1, #714]	; 0x2ca
      _s = s;
    645a:	movs	r7, #177	; 0xb1
    645c:	strb.w	sl, [r1, #712]	; 0x2c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6460:	mvn.w	sl, #99	; 0x63
      _s = s;
    6464:	strb.w	r7, [r1, #715]	; 0x2cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6468:	strb.w	r7, [r1, #720]	; 0x2d0
      _s = s;
    646c:	mvn.w	r7, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6470:	strb.w	sl, [r1, #717]	; 0x2cd
      _s = s;
    6474:	mov.w	sl, #91	; 0x5b
    6478:	strb.w	r7, [r1, #721]	; 0x2d1
    647c:	mov.w	r7, #115	; 0x73
      _b = b;
    6480:	strb.w	lr, [r1, #716]	; 0x2cc
    6484:	mvn.w	lr, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6488:	strb.w	r7, [r1, #724]	; 0x2d4
      _b = b;
    648c:	mvn.w	r7, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6490:	strb.w	sl, [r1, #718]	; 0x2ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6494:	mvn.w	sl, #71	; 0x47
      _s = s;
      _b = b;
    6498:	strb.w	r7, [r1, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    649c:	mvn.w	r7, #72	; 0x48
      _s = s;
      _b = b;
    64a0:	strb.w	lr, [r1, #719]	; 0x2cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64a4:	mov.w	lr, #176	; 0xb0
      _s = s;
    64a8:	strb.w	fp, [r1, #727]	; 0x2d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64ac:	strb.w	r7, [r1, #723]	; 0x2d3
      _s = s;
    64b0:	movs	r7, #59	; 0x3b
      _b = b;
    64b2:	strb.w	r3, [r1, #722]	; 0x2d2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64b6:	strb.w	sl, [r1, #726]	; 0x2d6
      _s = s;
    64ba:	mvn.w	r1, #56	; 0x38
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64be:	mvn.w	sl, #114	; 0x72
      _s = s;
    64c2:	strb.w	r3, [r6, #742]	; 0x2e6
    64c6:	strb.w	r1, [r6, #730]	; 0x2da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64ca:	mvn.w	r1, #93	; 0x5d
    64ce:	strb.w	sl, [r6, #735]	; 0x2df
      _s = s;
    64d2:	mvn.w	sl, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64d6:	strb.w	r1, [r6, #732]	; 0x2dc
      _s = s;
    64da:	mvn.w	r1, #3
    64de:	strb.w	sl, [r6, #736]	; 0x2e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64e2:	mvn.w	sl, #124	; 0x7c
      _s = s;
    64e6:	strb.w	r1, [r6, #733]	; 0x2dd
      _b = b;
    64ea:	mvn.w	r1, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64ee:	strb.w	sl, [r6, #738]	; 0x2e2
      _s = s;
    64f2:	mvn.w	sl, #95	; 0x5f
      _b = b;
    64f6:	strb.w	r1, [r6, #737]	; 0x2e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    64fa:	mvn.w	r1, #120	; 0x78
      _s = s;
    64fe:	strb.w	sl, [r6, #739]	; 0x2e3
      _b = b;
    6502:	mvn.w	sl, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6506:	strb.w	r1, [r6, #741]	; 0x2e5
      _s = s;
      _b = b;
    650a:	mvn.w	r1, #14
    650e:	strb.w	sl, [r6, #740]	; 0x2e4
    6512:	mvn.w	sl, #36	; 0x24
    6516:	strb.w	r1, [r6, #728]	; 0x2d8
    651a:	mvn.w	r1, #31
    651e:	strb.w	sl, [r6, #743]	; 0x2e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6522:	mov.w	sl, #123	; 0x7b
      _b = b;
    6526:	strb.w	r1, [r6, #734]	; 0x2de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    652a:	mvn.w	r1, #103	; 0x67
      _s = s;
    652e:	strb.w	sl, [r6, #754]	; 0x2f2
      _b = b;
    6532:	mvn.w	sl, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6536:	strb.w	r1, [r6, #729]	; 0x2d9
      _s = s;
      _b = b;
    653a:	mvn.w	r1, #20
    653e:	strb.w	r1, [r6, #731]	; 0x2db
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6542:	movs	r1, #121	; 0x79
    6544:	strb.w	r9, [r6, #757]	; 0x2f5
      _b = b;
    6548:	strb.w	sl, [r6, #758]	; 0x2f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    654c:	mvn.w	sl, #126	; 0x7e
      _b = b;
    6550:	strb.w	r8, [r6, #773]	; 0x305
    6554:	mvn.w	r8, #49	; 0x31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6558:	strb.w	sl, [r6, #760]	; 0x2f8
      _b = b;
    655c:	mvn.w	sl, #20
    6560:	strb.w	r8, [r6, #746]	; 0x2ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6564:	mvn.w	r8, #64	; 0x40
      _s = s;
      _b = b;
    6568:	strb.w	sl, [r6, #761]	; 0x2f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    656c:	mov.w	sl, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6570:	strb.w	r8, [r6, #765]	; 0x2fd
      _s = s;
      _b = b;
    6574:	mov.w	r8, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6578:	strb.w	sl, [r6, #769]	; 0x301
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    657c:	mvn.w	sl, #118	; 0x76
      _s = s;
      _b = b;
    6580:	strb.w	r8, [r6, #767]	; 0x2ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6584:	mov.w	r8, #120	; 0x78
    6588:	strb.w	sl, [r6, #744]	; 0x2e8
    658c:	strb.w	sl, [r6, #747]	; 0x2eb
      _s = s;
    6590:	mvn.w	sl, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6594:	strb.w	r8, [r6, #774]	; 0x306
      _s = s;
    6598:	mov.w	r8, #71	; 0x47
    659c:	strb.w	sl, [r6, #748]	; 0x2ec
      _b = b;
    65a0:	mvn.w	sl, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65a4:	strb.w	r8, [r6, #775]	; 0x307
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65a8:	mvn.w	r8, #115	; 0x73
      _s = s;
      _b = b;
    65ac:	strb.w	sl, [r6, #749]	; 0x2ed
    65b0:	mvn.w	sl, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65b4:	strb.w	r8, [r6, #750]	; 0x2ee
      _s = s;
    65b8:	mvn.w	r8, #38	; 0x26
      _b = b;
    65bc:	strb.w	sl, [r6, #752]	; 0x2f0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65c0:	strb.w	sl, [r6, #768]	; 0x300
    65c4:	mvn.w	sl, #112	; 0x70
      _s = s;
    65c8:	strb.w	r8, [r6, #751]	; 0x2ef
      _b = b;
    65cc:	mvn.w	r8, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65d0:	strb.w	sl, [r6, #753]	; 0x2f1
    65d4:	strb.w	sl, [r6, #759]	; 0x2f7
      _s = s;
    65d8:	mvn.w	sl, #41	; 0x29
      _b = b;
    65dc:	strb.w	r4, [r6, #770]	; 0x302
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65e0:	mvn.w	r4, #50	; 0x32
      _s = s;
    65e4:	strb.w	sl, [r6, #763]	; 0x2fb
      _b = b;
    65e8:	mvn.w	sl, #59	; 0x3b
    65ec:	strb.w	r8, [r6, #755]	; 0x2f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65f0:	mov.w	r8, #97	; 0x61
      _b = b;
    65f4:	strb.w	sl, [r6, #764]	; 0x2fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    65f8:	mov.w	sl, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    65fc:	strb.w	r4, [r6, #771]	; 0x303
      _s = s;
      _b = b;
    6600:	movs	r4, #203	; 0xcb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6602:	strb.w	sl, [r6, #772]	; 0x304
      _b = b;
    6606:	mvn.w	sl, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    660a:	strb.w	r8, [r6, #766]	; 0x2fe
      _b = b;
    660e:	mov.w	r8, #207	; 0xcf
    6612:	strb.w	sl, [r6, #776]	; 0x308
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6616:	mvn.w	sl, #126	; 0x7e
      _s = s;
    661a:	strb.w	r2, [r6, #745]	; 0x2e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    661e:	strb.w	sl, [r6, #783]	; 0x30f
      _s = s;
    6622:	mvn.w	sl, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6626:	strb.w	r0, [r6, #756]	; 0x2f4
    662a:	strb.w	r0, [r6, #762]	; 0x2fa
      _s = s;
    662e:	strb.w	sl, [r6, #778]	; 0x30a
      _b = b;
    6632:	mvn.w	sl, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6636:	strb.w	lr, [r6, #798]	; 0x31e
    663a:	mov.w	lr, #113	; 0x71
      _s = s;
    663e:	strb.w	r7, [r6, #808]	; 0x328
      _b = b;
    6642:	mvn.w	r7, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6646:	strb.w	lr, [r6, #780]	; 0x30c
      _s = s;
    664a:	mov.w	lr, #69	; 0x45
      _b = b;
    664e:	strb.w	sl, [r6, #782]	; 0x30e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6652:	mov.w	sl, #90	; 0x5a
    6656:	strb.w	lr, [r6, #781]	; 0x30d
    665a:	strb.w	lr, [r6, #805]	; 0x325
      _b = b;
    665e:	mvn.w	lr, #117	; 0x75
    6662:	strb.w	r7, [r6, #779]	; 0x30b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6666:	mov.w	r7, #97	; 0x61
      _b = b;
    666a:	strb.w	lr, [r6, #785]	; 0x311
    666e:	mvn.w	lr, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6672:	strb.w	sl, [r6, #787]	; 0x313
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6676:	mvn.w	sl, #91	; 0x5b
      _s = s;
      _b = b;
    667a:	strb.w	lr, [r6, #788]	; 0x314
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    667e:	mvn.w	lr, #111	; 0x6f
      _s = s;
    6682:	strb.w	r7, [r6, #784]	; 0x310
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6686:	mvn.w	r7, #122	; 0x7a
    668a:	strb.w	lr, [r6, #789]	; 0x315
    668e:	mvn.w	lr, #107	; 0x6b
    6692:	strb.w	sl, [r6, #795]	; 0x31b
    6696:	mvn.w	sl, #68	; 0x44
    669a:	strb.w	lr, [r6, #792]	; 0x318
      _s = s;
    669e:	mov.w	lr, #104	; 0x68
    66a2:	strb.w	r9, [r6, #796]	; 0x31c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66a6:	mvn.w	r9, #71	; 0x47
      _s = s;
    66aa:	strb.w	lr, [r6, #793]	; 0x319
      _b = b;
    66ae:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66b2:	strb.w	ip, [r6, #790]	; 0x316
    66b6:	mvn.w	ip, #42	; 0x2a
      _b = b;
    66ba:	strb.w	lr, [r6, #794]	; 0x31a
    66be:	strb.w	lr, [r6, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66c2:	mvn.w	lr, #69	; 0x45
    66c6:	strb.w	r7, [r6, #786]	; 0x312
      _s = s;
      _b = b;
    66ca:	mvn.w	r7, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66ce:	strb.w	lr, [r6, #801]	; 0x321
      _s = s;
    66d2:	mov.w	lr, #103	; 0x67
      _b = b;
    66d6:	strb.w	r3, [r6, #803]	; 0x323
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    66da:	strb.w	lr, [r6, #802]	; 0x322
      _b = b;
    66de:	mvn.w	lr, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66e2:	strb.w	r9, [r6, #804]	; 0x324
    66e6:	mov.w	r9, #155	; 0x9b
      _s = s;
      _b = b;
    66ea:	strb.w	lr, [r6, #809]	; 0x329
    66ee:	mvn.w	lr, #17
    66f2:	strb.w	r2, [r6, #806]	; 0x326
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    66f6:	strb.w	sl, [r6, #807]	; 0x327
    66fa:	mvn.w	sl, #95	; 0x5f
    66fe:	strb.w	fp, [r6, #777]	; 0x309
      _s = s;
      _b = b;
    6702:	strb.w	r7, [r6, #791]	; 0x317
    6706:	strb.w	r7, [r6, #800]	; 0x320
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    670a:	movs	r7, #128	; 0x80
      _s = s;
    670c:	strb.w	r1, [r6, #799]	; 0x31f
    6710:	strb.w	r0, [r6, #811]	; 0x32b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6714:	movs	r0, #181	; 0xb5
      _s = s;
      _b = b;
    6716:	strb.w	lr, [r6, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    671a:	mvn.w	lr, #123	; 0x7b
      _s = s;
    671e:	strb.w	ip, [r6, #814]	; 0x32e
      _b = b;
    6722:	mvn.w	ip, #54	; 0x36
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6726:	strb.w	lr, [r6, #816]	; 0x330
      _s = s;
    672a:	mvn.w	lr, #114	; 0x72
      _b = b;
    672e:	strb.w	ip, [r6, #815]	; 0x32f
    6732:	mvn.w	ip, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6736:	strb.w	lr, [r6, #817]	; 0x331
    673a:	mvn.w	lr, #51	; 0x33
      _b = b;
    673e:	strb.w	ip, [r6, #818]	; 0x332
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6742:	mvn.w	ip, #120	; 0x78
      _s = s;
    6746:	strb.w	lr, [r6, #823]	; 0x337
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    674a:	mvn.w	lr, #117	; 0x75
    674e:	strb.w	ip, [r6, #819]	; 0x333
      _s = s;
    6752:	mvn.w	ip, #104	; 0x68
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6756:	strb.w	lr, [r6, #828]	; 0x33c
    675a:	mvn.w	lr, #112	; 0x70
      _s = s;
    675e:	strb.w	ip, [r6, #820]	; 0x334
    6762:	mvn.w	ip, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6766:	strb.w	lr, [r6, #831]	; 0x33f
      _s = s;
    676a:	mov.w	lr, #91	; 0x5b
    676e:	strb.w	ip, [r6, #826]	; 0x33a
      _b = b;
    6772:	mvn.w	ip, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6776:	strb.w	lr, [r6, #832]	; 0x340
      _b = b;
    677a:	mvn.w	lr, #17
    677e:	strb.w	ip, [r6, #833]	; 0x341
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6782:	ldrb.w	ip, [sp, #24]
      _b = b;
    6786:	strb.w	lr, [r6, #839]	; 0x347
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    678a:	mvn.w	lr, #103	; 0x67
      _s = s;
    678e:	strb.w	ip, [r6, #835]	; 0x343
      _b = b;
    6792:	mvn.w	ip, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6796:	strb.w	lr, [r6, #840]	; 0x348
    679a:	mvn.w	lr, #87	; 0x57
      _s = s;
      _b = b;
    679e:	strb.w	ip, [r6, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67a2:	mvn.w	ip, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67a6:	strb.w	lr, [r6, #810]	; 0x32a
      _s = s;
    67aa:	mov.w	lr, #68	; 0x44
    67ae:	strb.w	ip, [r6, #841]	; 0x349
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67b2:	mvn.w	ip, #109	; 0x6d
      _s = s;
      _b = b;
    67b6:	strb.w	r4, [r6, #830]	; 0x33e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67ba:	movs	r4, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67bc:	strb.w	ip, [r6, #813]	; 0x32d
    67c0:	mvn.w	ip, #116	; 0x74
      _s = s;
      _b = b;
    67c4:	strb.w	r8, [r6, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67c8:	strb.w	ip, [r6, #822]	; 0x336
    67cc:	strb.w	ip, [r6, #837]	; 0x345
      _s = s;
      _b = b;
    67d0:	mvn.w	ip, #58	; 0x3a
    67d4:	strb.w	ip, [r6, #824]	; 0x338
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67d8:	mvn.w	ip, #113	; 0x71
    67dc:	strb.w	ip, [r6, #825]	; 0x339
      _s = s;
    67e0:	strb.w	ip, [r6, #838]	; 0x346
      _b = b;
    67e4:	mvn.w	ip, #75	; 0x4b
    67e8:	strb.w	ip, [r6, #827]	; 0x33b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    67ec:	mvn.w	ip, #80	; 0x50
    67f0:	strb.w	ip, [r6, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    67f4:	mvn.w	ip, #97	; 0x61
    67f8:	strb.w	ip, [r6, #834]	; 0x342
      _s = s;
      _b = b;
    67fc:	mvn.w	ip, #18
    6800:	strb.w	ip, [r6, #842]	; 0x34a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6804:	mov.w	ip, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6808:	strb.w	r1, [r6, #858]	; 0x35a
    680c:	mvn.w	r1, #107	; 0x6b
    6810:	strb.w	r9, [r6, #864]	; 0x360
    6814:	mvn.w	r9, #122	; 0x7a
    6818:	strb.w	r1, [r6, #843]	; 0x34b
      _s = s;
    681c:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6820:	strb.w	r9, [r6, #849]	; 0x351
      _s = s;
      _b = b;
    6824:	mvn.w	r9, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6828:	strb.w	r1, [r6, #844]	; 0x34c
      _b = b;
    682c:	mvn.w	r1, #93	; 0x5d
    6830:	strb.w	r9, [r6, #854]	; 0x356
    6834:	mvn.w	r9, #23
    6838:	strb.w	r1, [r6, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    683c:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    6840:	strb.w	r9, [r6, #857]	; 0x359
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6844:	mvn.w	r9, #119	; 0x77
    6848:	strb.w	r1, [r6, #846]	; 0x34e
    684c:	strb.w	r9, [r6, #861]	; 0x35d
      _s = s;
      _b = b;
    6850:	mvn.w	r9, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6854:	strb.w	r1, [r6, #847]	; 0x34f
      _b = b;
    6858:	strb.w	r9, [r6, #866]	; 0x362
    685c:	mvn.w	r9, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6860:	strb.w	r1, [r6, #850]	; 0x352
      _b = b;
    6864:	mov.w	r1, #103	; 0x67
    6868:	strb.w	r9, [r6, #872]	; 0x368
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    686c:	mvn.w	r9, #115	; 0x73
      _b = b;
    6870:	strb.w	r1, [r6, #851]	; 0x353
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6874:	mvn.w	r1, #55	; 0x37
    6878:	strb.w	r9, [r6, #874]	; 0x36a
      _b = b;
    687c:	mov.w	r9, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6880:	strb.w	r1, [r6, #856]	; 0x358
      _b = b;
    6884:	mvn.w	r1, #56	; 0x38
    6888:	strb.w	r9, [r6, #848]	; 0x350
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    688c:	mov.w	r9, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6890:	strb.w	sl, [r6, #867]	; 0x363
      _s = s;
      _b = b;
    6894:	mvn.w	sl, #8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6898:	strb.w	r9, [r6, #859]	; 0x35b
    689c:	mov.w	r9, #79	; 0x4f
      _b = b;
    68a0:	strb.w	r1, [r6, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68a4:	mvn.w	r1, #50	; 0x32
      _b = b;
    68a8:	strb.w	sl, [r6, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68ac:	mvn.w	sl, #107	; 0x6b
      _s = s;
    68b0:	strb.w	r9, [r6, #868]	; 0x364
    68b4:	mov.w	r9, #124	; 0x7c
    68b8:	strb.w	r1, [r6, #862]	; 0x35e
      _b = b;
    68bc:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68c0:	strb.w	sl, [r6, #870]	; 0x366
    68c4:	mvn.w	sl, #90	; 0x5a
      _s = s;
    68c8:	strb.w	r9, [r6, #871]	; 0x367
      _b = b;
    68cc:	mvn.w	r9, #7
    68d0:	strb.w	r1, [r6, #863]	; 0x35f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    68d4:	mov.w	r1, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68d8:	strb.w	sl, [r6, #873]	; 0x369
      _s = s;
    68dc:	mov.w	sl, #99	; 0x63
      _b = b;
    68e0:	strb.w	r9, [r6, #875]	; 0x36b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68e4:	mvn.w	r9, #62	; 0x3e
      _s = s;
    68e8:	strb.w	r1, [r6, #865]	; 0x361
      _b = b;
    68ec:	movs	r1, #208	; 0xd0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68ee:	strb.w	fp, [r6, #852]	; 0x354
      _s = s;
    68f2:	strb.w	sl, [r6, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    68f6:	strb.w	r7, [r6, #855]	; 0x357
    68fa:	strb.w	r9, [r6, #879]	; 0x36f
    68fe:	mvn.w	r9, #59	; 0x3b
      _s = s;
      _b = b;
    6902:	strb.w	r1, [r6, #902]	; 0x386
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6906:	mov.w	r1, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    690a:	strb.w	r9, [r6, #882]	; 0x372
    690e:	mvn.w	r9, #57	; 0x39
      _s = s;
    6912:	strb.w	r1, [r6, #886]	; 0x376
    6916:	mov.w	r1, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    691a:	strb.w	r9, [r6, #885]	; 0x375
    691e:	mvn.w	r9, #73	; 0x49
      _s = s;
    6922:	strb.w	r1, [r6, #889]	; 0x379
      _b = b;
    6926:	mvn.w	r1, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    692a:	strb.w	r9, [r6, #888]	; 0x378
      _s = s;
      _b = b;
    692e:	mvn.w	r9, #15
    6932:	strb.w	r8, [r6, #899]	; 0x383
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6936:	mov.w	r8, #153	; 0x99
      _s = s;
      _b = b;
    693a:	strb.w	r9, [r6, #890]	; 0x37a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    693e:	mvn.w	r9, #95	; 0x5f
      _s = s;
      _b = b;
    6942:	strb.w	r1, [r6, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6946:	mvn.w	r1, #115	; 0x73
    694a:	strb.w	r9, [r6, #891]	; 0x37b
      _s = s;
    694e:	mvn.w	r9, #10
      _b = b;
    6952:	strb.w	r3, [r6, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6956:	strb.w	r9, [r6, #892]	; 0x37c
      _b = b;
    695a:	mvn.w	r9, #58	; 0x3a
    695e:	strb.w	r2, [r6, #887]	; 0x377
    6962:	strb.w	r9, [r6, #896]	; 0x380
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6966:	mvn.w	r9, #26
    696a:	strb.w	r3, [r6, #895]	; 0x37f
    696e:	strb.w	r9, [r6, #898]	; 0x382
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6972:	mvn.w	r9, #118	; 0x76
    6976:	strb.w	r0, [r6, #876]	; 0x36c
      _s = s;
    697a:	movs	r0, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    697c:	strb.w	r9, [r6, #900]	; 0x384
      _s = s;
    6980:	mvn.w	r9, #51	; 0x33
    6984:	strb.w	lr, [r6, #877]	; 0x36d
    6988:	mov.w	lr, #100	; 0x64
    698c:	strb.w	r9, [r6, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6990:	mvn.w	r9, #114	; 0x72
      _s = s;
    6994:	strb.w	r4, [r6, #880]	; 0x370
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6998:	movs	r4, #145	; 0x91
    699a:	strb.w	r9, [r6, #903]	; 0x387
      _s = s;
    699e:	mvn.w	r9, #68	; 0x44
    69a2:	strb.w	ip, [r6, #883]	; 0x373
      _b = b;
    69a6:	mov.w	ip, #233	; 0xe9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    69aa:	strb.w	r9, [r6, #904]	; 0x388
      _b = b;
    69ae:	mvn.w	r9, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69b2:	strb.w	r8, [r6, #894]	; 0x37e
      _s = s;
      _b = b;
    69b6:	strb.w	r9, [r6, #905]	; 0x389
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69ba:	mvn.w	r9, #116	; 0x74
    69be:	strb.w	r9, [r6, #906]	; 0x38a
      _s = s;
    69c2:	mvn.w	r9, #124	; 0x7c
    69c6:	strb.w	r9, [r6, #907]	; 0x38b
      _b = b;
    69ca:	mvn.w	r9, #3
    69ce:	strb.w	r9, [r6, #878]	; 0x36e
    69d2:	mvn.w	r9, #5
    69d6:	strb.w	r9, [r6, #881]	; 0x371
    69da:	mvn.w	r9, #42	; 0x2a
    69de:	strb.w	r9, [r6, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69e2:	mvn.w	r9, #115	; 0x73
    69e6:	strb.w	r9, [r6, #897]	; 0x381
      _s = s;
    69ea:	mov.w	r9, #195	; 0xc3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    69ee:	strb.w	r1, [r6, #909]	; 0x38d
      _s = s;
    69f2:	mov.w	r1, #115	; 0x73
    69f6:	strb.w	lr, [r6, #922]	; 0x39a
    69fa:	mov.w	lr, #98	; 0x62
    69fe:	strb.w	r1, [r6, #910]	; 0x38e
      _b = b;
    6a02:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a06:	strb.w	lr, [r6, #940]	; 0x3ac
    6a0a:	mvn.w	lr, #37	; 0x25
      _b = b;
    6a0e:	strb.w	r1, [r6, #911]	; 0x38f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a12:	mvn.w	r1, #103	; 0x67
      _s = s;
    6a16:	strb.w	lr, [r6, #916]	; 0x394
      _b = b;
    6a1a:	mvn.w	lr, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a1e:	strb.w	r1, [r6, #912]	; 0x390
      _s = s;
      _b = b;
    6a22:	mvn.w	r1, #26
    6a26:	strb.w	lr, [r6, #920]	; 0x398
    6a2a:	mov.w	lr, #47	; 0x2f
    6a2e:	strb.w	r1, [r6, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a32:	mvn.w	r1, #107	; 0x6b
      _s = s;
      _b = b;
    6a36:	strb.w	lr, [r6, #926]	; 0x39e
    6a3a:	mvn.w	lr, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a3e:	strb.w	r1, [r6, #918]	; 0x396
      _s = s;
    6a42:	mvn.w	r1, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a46:	strb.w	fp, [r6, #930]	; 0x3a2
      _s = s;
    6a4a:	strb.w	r1, [r6, #919]	; 0x397
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a4e:	mvn.w	r1, #112	; 0x70
    6a52:	strb.w	r7, [r6, #933]	; 0x3a5
    6a56:	strb.w	r1, [r6, #921]	; 0x399
      _s = s;
      _b = b;
    6a5a:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a5e:	strb.w	r7, [r6, #937]	; 0x3a9
      _b = b;
    6a62:	strb.w	r1, [r6, #923]	; 0x39b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a66:	mvn.w	r1, #112	; 0x70
      _s = s;
      _b = b;
    6a6a:	strb.w	r2, [r6, #938]	; 0x3aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a6e:	strb.w	r1, [r6, #924]	; 0x39c
      _s = s;
    6a72:	mvn.w	r1, #66	; 0x42
    6a76:	strb.w	r0, [r6, #913]	; 0x391
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a7a:	movs	r0, #166	; 0xa6
      _s = s;
    6a7c:	strb.w	r1, [r6, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a80:	mvn.w	r1, #113	; 0x71
      _s = s;
    6a84:	strb.w	r9, [r6, #934]	; 0x3a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6a88:	mov.w	r9, #177	; 0xb1
    6a8c:	strb.w	r1, [r6, #927]	; 0x39f
      _s = s;
    6a90:	mvn.w	r1, #3
      _b = b;
    6a94:	strb.w	ip, [r6, #914]	; 0x392
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6a98:	strb.w	r1, [r6, #928]	; 0x3a0
      _b = b;
    6a9c:	mvn.w	r1, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6aa0:	strb.w	r4, [r6, #915]	; 0x393
      _s = s;
      _b = b;
    6aa4:	strb.w	r1, [r6, #929]	; 0x3a1
    6aa8:	mvn.w	r1, #29
    6aac:	strb.w	lr, [r6, #935]	; 0x3a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ab0:	mvn.w	lr, #91	; 0x5b
      _s = s;
      _b = b;
    6ab4:	strb.w	r1, [r6, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ab8:	mvn.w	r1, #123	; 0x7b
      _s = s;
      _b = b;
    6abc:	strb.w	r2, [r6, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ac0:	strb.w	r1, [r6, #936]	; 0x3a8
    6ac4:	mvn.w	r1, #98	; 0x62
    6ac8:	strb.w	r1, [r6, #939]	; 0x3ab
      _s = s;
    6acc:	movs	r1, #116	; 0x74
    6ace:	strb.w	r1, [r6, #931]	; 0x3a3
      _b = b;
    6ad2:	strb.w	r3, [r6, #944]	; 0x3b0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ad6:	strb.w	r1, [r6, #949]	; 0x3b5
    6ada:	mvn.w	r1, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ade:	strb.w	lr, [r6, #945]	; 0x3b1
      _s = s;
    6ae2:	mov.w	lr, #115	; 0x73
    6ae6:	strb.w	r1, [r6, #952]	; 0x3b8
    6aea:	mov.w	r1, #113	; 0x71
    6aee:	strb.w	lr, [r6, #946]	; 0x3b2
      _b = b;
    6af2:	mvn.w	lr, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6af6:	strb.w	r1, [r6, #955]	; 0x3bb
      _b = b;
    6afa:	mvn.w	r1, #10
    6afe:	strb.w	lr, [r6, #947]	; 0x3b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b02:	mvn.w	lr, #90	; 0x5a
      _s = s;
      _b = b;
    6b06:	strb.w	r1, [r6, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b0a:	mvn.w	r1, #68	; 0x44
    6b0e:	strb.w	lr, [r6, #948]	; 0x3b4
      _s = s;
    6b12:	mov.w	lr, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b16:	strb.w	r1, [r6, #957]	; 0x3bd
      _s = s;
      _b = b;
    6b1a:	mvn.w	r1, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b1e:	strb.w	sl, [r6, #958]	; 0x3be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b22:	mov.w	sl, #192	; 0xc0
      _s = s;
      _b = b;
    6b26:	strb.w	r1, [r6, #959]	; 0x3bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b2a:	mvn.w	r1, #61	; 0x3d
      _s = s;
      _b = b;
    6b2e:	strb.w	r2, [r6, #962]	; 0x3c2
    6b32:	movs	r2, #242	; 0xf2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b34:	strb.w	r1, [r6, #960]	; 0x3c0
      _s = s;
    6b38:	mov.w	r1, #79	; 0x4f
    6b3c:	strb.w	lr, [r6, #943]	; 0x3af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b40:	mov.w	lr, #178	; 0xb2
      _s = s;
    6b44:	strb.w	r1, [r6, #961]	; 0x3c1
    6b48:	strb.w	r1, [r6, #964]	; 0x3c4
      _b = b;
    6b4c:	mvn.w	r1, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b50:	strb.w	r3, [r6, #973]	; 0x3cd
      _b = b;
    6b54:	strb.w	r1, [r6, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b58:	mvn.w	r1, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b5c:	strb.w	r9, [r6, #954]	; 0x3ba
      _s = s;
      _b = b;
    6b60:	mov.w	r9, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6b64:	strb.w	r1, [r6, #967]	; 0x3c7
      _b = b;
    6b68:	mvn.w	r1, #16
    6b6c:	strb.w	r2, [r6, #950]	; 0x3b6
    6b70:	strb.w	r1, [r6, #968]	; 0x3c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b74:	mvn.w	r1, #97	; 0x61
      _s = s;
      _b = b;
    6b78:	strb.w	r2, [r6, #953]	; 0x3b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b7c:	strb.w	r1, [r6, #969]	; 0x3c9
      _s = s;
    6b80:	mvn.w	r1, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b84:	strb.w	r0, [r6, #951]	; 0x3b7
      _s = s;
    6b88:	strb.w	r1, [r6, #970]	; 0x3ca
      _b = b;
    6b8c:	mvn.w	r1, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b90:	strb.w	sl, [r6, #963]	; 0x3c3
      _s = s;
      _b = b;
    6b94:	strb.w	r1, [r6, #971]	; 0x3cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6b98:	mvn.w	r1, #99	; 0x63
    6b9c:	strb.w	lr, [r6, #966]	; 0x3c6
    6ba0:	strb.w	r1, [r6, #972]	; 0x3cc
    6ba4:	mvn.w	r1, #82	; 0x52
    6ba8:	strb.w	r1, [r6, #942]	; 0x3ae
      _s = s;
      _b = b;
    6bac:	mvn.w	r1, #71	; 0x47
    6bb0:	strb.w	r1, [r6, #974]	; 0x3ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bb4:	mvn.w	r1, #111	; 0x6f
    6bb8:	strb.w	r1, [r6, #975]	; 0x3cf
    6bbc:	mvn.w	r1, #118	; 0x76
      _s = s;
      _b = b;
    6bc0:	strb.w	r9, [r6, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bc4:	mvn.w	r9, #104	; 0x68
    6bc8:	strb.w	r1, [r6, #978]	; 0x3d2
      _s = s;
      _b = b;
    6bcc:	mvn.w	r1, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bd0:	strb.w	r9, [r6, #996]	; 0x3e4
      _s = s;
      _b = b;
    6bd4:	mvn.w	r9, #19
    6bd8:	strb.w	r1, [r6, #980]	; 0x3d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bdc:	mvn.w	r1, #124	; 0x7c
      _s = s;
      _b = b;
    6be0:	strb.w	r9, [r6, #1001]	; 0x3e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6be4:	mvn.w	r9, #115	; 0x73
    6be8:	strb.w	r1, [r6, #981]	; 0x3d5
      _s = s;
      _b = b;
    6bec:	mvn.w	r1, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bf0:	strb.w	r9, [r6, #1002]	; 0x3ea
      _s = s;
    6bf4:	mvn.w	r9, #5
      _b = b;
    6bf8:	strb.w	r1, [r6, #983]	; 0x3d7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6bfc:	mvn.w	r1, #117	; 0x75
      _s = s;
    6c00:	strb.w	r9, [r6, #1006]	; 0x3ee
    6c04:	mov.w	r9, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c08:	strb.w	r1, [r6, #984]	; 0x3d8
      _s = s;
      _b = b;
    6c0c:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c10:	strb.w	r9, [r6, #982]	; 0x3d6
    6c14:	mvn.w	r9, #39	; 0x27
      _b = b;
    6c18:	strb.w	r1, [r6, #986]	; 0x3da
    6c1c:	mvn.w	r1, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c20:	strb.w	r9, [r6, #994]	; 0x3e2
      _b = b;
    6c24:	mvn.w	r9, #66	; 0x42
    6c28:	strb.w	r1, [r6, #992]	; 0x3e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c2c:	mov.w	r1, #124	; 0x7c
    6c30:	strb.w	r3, [r6, #976]	; 0x3d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c34:	movs	r3, #170	; 0xaa
      _s = s;
    6c36:	strb.w	r1, [r6, #997]	; 0x3e5
      _b = b;
    6c3a:	mvn.w	r1, #15
    6c3e:	strb.w	sl, [r6, #977]	; 0x3d1
    6c42:	mov.w	sl, #235	; 0xeb
    6c46:	strb.w	r1, [r6, #998]	; 0x3e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c4a:	mvn.w	r1, #113	; 0x71
    6c4e:	strb.w	r8, [r6, #993]	; 0x3e1
      _s = s;
    6c52:	mov.w	r8, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c56:	strb.w	r1, [r6, #999]	; 0x3e7
      _s = s;
    6c5a:	mov.w	r1, #91	; 0x5b
      _b = b;
    6c5e:	strb.w	ip, [r6, #995]	; 0x3e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6c62:	mov.w	ip, #174	; 0xae
    6c66:	strb.w	r1, [r6, #1000]	; 0x3e8
    6c6a:	mov.w	r1, #58	; 0x3a
    6c6e:	strb.w	r1, [r6, #1003]	; 0x3eb
      _b = b;
    6c72:	mvn.w	r1, #82	; 0x52
    6c76:	strb.w	r1, [r6, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c7a:	mvn.w	r1, #112	; 0x70
    6c7e:	strb.w	r1, [r6, #1005]	; 0x3ed
      _s = s;
    6c82:	mov.w	r1, #105	; 0x69
    6c86:	strb.w	r1, [r6, #985]	; 0x3d9
    6c8a:	mvn.w	r1, #115	; 0x73
    6c8e:	strb.w	r1, [r6, #979]	; 0x3d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6c92:	mvn.w	r1, #104	; 0x68
    6c96:	strb.w	r1, [r6, #987]	; 0x3db
      _s = s;
    6c9a:	mov.w	r1, #93	; 0x5d
    6c9e:	strb.w	r1, [r6, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ca2:	mvn.w	r1, #104	; 0x68
    6ca6:	strb.w	r1, [r6, #990]	; 0x3de
      _s = s;
    6caa:	mvn.w	r1, #61	; 0x3d
    6cae:	strb.w	r1, [r6, #991]	; 0x3df
    6cb2:	movs	r1, #252	; 0xfc
    6cb4:	str	r1, [sp, #8]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cb6:	movs	r1, #200	; 0xc8
      _s = s;
      _b = b;
    6cb8:	strb.w	r9, [r6, #1007]	; 0x3ef
    6cbc:	mvn.w	r9, #29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cc0:	strb.w	r4, [r6, #1026]	; 0x402
      _s = s;
    6cc4:	mvn.w	r4, #80	; 0x50
      _b = b;
    6cc8:	strb.w	r9, [r6, #1013]	; 0x3f5
    6ccc:	mvn.w	r9, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cd0:	strb.w	r4, [r6, #1027]	; 0x403
      _b = b;
    6cd4:	mvn.w	r4, #20
    6cd8:	strb.w	r9, [r6, #1010]	; 0x3f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6cdc:	mvn.w	r9, #93	; 0x5d
      _b = b;
    6ce0:	strb.w	r4, [r6, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ce4:	mvn.w	r4, #106	; 0x6a
      _s = s;
    6ce8:	strb.w	r9, [r6, #1012]	; 0x3f4
      _b = b;
    6cec:	mvn.w	r9, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cf0:	strb.w	r4, [r6, #1029]	; 0x405
      _s = s;
    6cf4:	mvn.w	r4, #109	; 0x6d
      _b = b;
    6cf8:	strb.w	r9, [r6, #1016]	; 0x3f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6cfc:	mvn.w	r9, #97	; 0x61
      _s = s;
    6d00:	strb.w	r4, [r6, #1030]	; 0x406
      _b = b;
    6d04:	mvn.w	r4, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d08:	strb.w	r9, [r6, #1017]	; 0x3f9
      _s = s;
      _b = b;
    6d0c:	mvn.w	r9, #20
    6d10:	strb.w	r4, [r6, #1031]	; 0x407
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6d14:	mvn.w	r4, #92	; 0x5c
      _b = b;
    6d18:	strb.w	r9, [r6, #1019]	; 0x3fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d1c:	mvn.w	r9, #114	; 0x72
      _s = s;
    6d20:	strb.w	r4, [r6, #1033]	; 0x409
      _b = b;
    6d24:	mvn.w	r4, #26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d28:	strb.w	r9, [r6, #1020]	; 0x3fc
      _s = s;
      _b = b;
    6d2c:	mvn.w	r9, #17
    6d30:	strb.w	r4, [r6, #1034]	; 0x40a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d34:	mvn.w	r4, #73	; 0x49
      _s = s;
      _b = b;
    6d38:	strb.w	r9, [r6, #1022]	; 0x3fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d3c:	mvn.w	r9, #116	; 0x74
      _s = s;
    6d40:	strb.w	lr, [r6, #1024]	; 0x400
      _b = b;
    6d44:	mvn.w	lr, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d48:	strb.w	r9, [r6, #1023]	; 0x3ff
      _s = s;
      _b = b;
    6d4c:	mvn.w	r9, #20
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d50:	strb.w	r4, [r6, #1035]	; 0x40b
      _s = s;
    6d54:	mvn.w	r4, #57	; 0x39
      _b = b;
    6d58:	strb.w	r9, [r6, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d5c:	mvn.w	r9, #55	; 0x37
      _s = s;
    6d60:	strb.w	r7, [r6, #1009]	; 0x3f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d64:	strb.w	r9, [r6, #1038]	; 0x40e
    6d68:	mvn.w	r9, #120	; 0x78
      _s = s;
      _b = b;
    6d6c:	strb.w	lr, [r6, #1025]	; 0x401
    6d70:	mov.w	lr, #221	; 0xdd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d74:	strb.w	r9, [r6, #1008]	; 0x3f0
    6d78:	mvn.w	r9, #122	; 0x7a
      _s = s;
    6d7c:	strb.w	r4, [r6, #1036]	; 0x40c
      _b = b;
    6d80:	movs	r4, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d82:	strb.w	r9, [r6, #1014]	; 0x3f6
      _s = s;
    6d86:	ldrb.w	r9, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d8a:	strb.w	fp, [r6, #1011]	; 0x3f3
      _s = s;
    6d8e:	strb.w	r9, [r6, #1018]	; 0x3fa
      _b = b;
    6d92:	mov.w	r9, #229	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6d96:	str	r1, [sp, #20]
    6d98:	mvn.w	r1, #97	; 0x61
      _s = s;
      _b = b;
    6d9c:	str.w	r9, [sp, #12]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6da0:	mov.w	r9, #114	; 0x72
    6da4:	strb.w	r9, [r6, #1039]	; 0x40f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6da8:	mov.w	r9, #234	; 0xea
    6dac:	str.w	r9, [sp, #4]
      _s = s;
    6db0:	mvn.w	r9, #95	; 0x5f
      _b = b;
    6db4:	strb.w	r0, [r6, #1052]	; 0x41c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6db8:	mvn.w	r0, #111	; 0x6f
    6dbc:	strb.w	r7, [r6, #1060]	; 0x424
    6dc0:	strb.w	r7, [r6, #1063]	; 0x427
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dc4:	mvn.w	r7, #97	; 0x61
      _s = s;
    6dc8:	strb.w	r0, [r6, #1054]	; 0x41e
      _b = b;
    6dcc:	mvn.w	r0, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6dd0:	strb.w	r7, [r6, #1065]	; 0x429
      _s = s;
    6dd4:	mvn.w	r7, #4
    6dd8:	strb.w	r8, [r6, #1015]	; 0x3f7
    6ddc:	mov.w	r8, #236	; 0xec
      _b = b;
    6de0:	strb.w	r0, [r6, #1055]	; 0x41f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6de4:	mvn.w	r0, #90	; 0x5a
    6de8:	strb.w	r7, [r6, #1066]	; 0x42a
      _b = b;
    6dec:	mvn.w	r7, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6df0:	str.w	r8, [sp, #28]
      _b = b;
    6df4:	mvn.w	r8, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6df8:	strb.w	r0, [r6, #1057]	; 0x421
      _b = b;
    6dfc:	mvn.w	r0, #62	; 0x3e
    6e00:	strb.w	r7, [r6, #1067]	; 0x42b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e04:	mvn.w	r7, #97	; 0x61
      _s = s;
      _b = b;
    6e08:	strb.w	r8, [r6, #1040]	; 0x410
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e0c:	mvn.w	r8, #54	; 0x36
      _s = s;
    6e10:	strb.w	r9, [r6, #1045]	; 0x415
      _b = b;
    6e14:	mvn.w	r9, #50	; 0x32
    6e18:	strb.w	r0, [r6, #1058]	; 0x422
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e1c:	mvn.w	r0, #103	; 0x67
    6e20:	strb.w	r7, [r6, #1068]	; 0x42c
      _s = s;
    6e24:	mvn.w	r7, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e28:	strb.w	r8, [r6, #1041]	; 0x411
      _s = s;
    6e2c:	mov.w	r8, #104	; 0x68
      _b = b;
    6e30:	strb.w	r9, [r6, #1046]	; 0x416
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e34:	mov.w	r9, #97	; 0x61
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e38:	strb.w	r1, [r6, #1050]	; 0x41a
      _s = s;
    6e3c:	mvn.w	r1, #70	; 0x46
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e40:	strb.w	r0, [r6, #1059]	; 0x423
      _s = s;
      _b = b;
    6e44:	mvn.w	r0, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e48:	strb.w	r7, [r6, #1069]	; 0x42d
      _b = b;
    6e4c:	mvn.w	r7, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e50:	strb.w	r8, [r6, #1042]	; 0x412
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e54:	mvn.w	r8, #75	; 0x4b
      _s = s;
    6e58:	strb.w	r9, [r6, #1048]	; 0x418
      _b = b;
    6e5c:	mvn.w	r9, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6e60:	strb.w	r1, [r6, #1051]	; 0x41b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e64:	strb.w	r1, [r6, #1053]	; 0x41d
      _s = s;
      _b = b;
    6e68:	mvn.w	r1, #75	; 0x4b
    6e6c:	strb.w	r0, [r6, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e70:	mvn.w	r0, #109	; 0x6d
      _s = s;
      _b = b;
    6e74:	strb.w	r7, [r6, #1070]	; 0x42e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e78:	mvn.w	r7, #92	; 0x5c
      _s = s;
    6e7c:	strb.w	ip, [r6, #1021]	; 0x3fd
    6e80:	mov.w	ip, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e84:	strb.w	r3, [r6, #1032]	; 0x408
    6e88:	strb.w	r8, [r6, #1044]	; 0x414
      _s = s;
    6e8c:	mov.w	r8, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e90:	strb.w	fp, [r6, #1047]	; 0x417
      _s = s;
      _b = b;
    6e94:	strb.w	r9, [r6, #1049]	; 0x419
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6e98:	mov.w	r9, #117	; 0x75
    6e9c:	strb.w	r0, [r6, #1062]	; 0x426
      _s = s;
      _b = b;
    6ea0:	mvn.w	r0, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ea4:	strb.w	r7, [r6, #1071]	; 0x42f
      _s = s;
    6ea8:	mvn.w	r7, #115	; 0x73
      _b = b;
    6eac:	strb.w	r1, [r6, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6eb0:	mvn.w	r1, #112	; 0x70
      _s = s;
    6eb4:	strb.w	r7, [r6, #1072]	; 0x430
      _b = b;
    6eb8:	mvn.w	r7, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ebc:	strb.w	r1, [r6, #1086]	; 0x43e
      _s = s;
    6ec0:	mvn.w	r1, #55	; 0x37
      _b = b;
    6ec4:	strb.w	r7, [r6, #1043]	; 0x413
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ec8:	mvn.w	r7, #86	; 0x56
      _s = s;
    6ecc:	strb.w	r1, [r6, #1087]	; 0x43f
      _b = b;
    6ed0:	mvn.w	r1, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ed4:	strb.w	r7, [r6, #1056]	; 0x420
      _s = s;
      _b = b;
    6ed8:	mvn.w	r7, #46	; 0x2e
    6edc:	strb.w	r1, [r6, #1088]	; 0x440
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ee0:	mvn.w	r1, #124	; 0x7c
      _s = s;
      _b = b;
    6ee4:	strb.w	r7, [r6, #1064]	; 0x428
    6ee8:	mvn.w	r7, #19
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6eec:	strb.w	r1, [r6, #1089]	; 0x441
      _s = s;
    6ef0:	mov.w	r1, #108	; 0x6c
      _b = b;
    6ef4:	strb.w	r7, [r6, #1073]	; 0x431
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6ef8:	mov.w	r7, #69	; 0x45
    6efc:	strb.w	r1, [r6, #1090]	; 0x442
      _b = b;
    6f00:	mvn.w	r1, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6f04:	strb.w	r7, [r6, #1075]	; 0x433
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f08:	mvn.w	r7, #75	; 0x4b
      _s = s;
      _b = b;
    6f0c:	strb.w	r1, [r6, #1091]	; 0x443
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f10:	mvn.w	r1, #120	; 0x78
    6f14:	strb.w	r7, [r6, #1074]	; 0x432
      _s = s;
      _b = b;
    6f18:	mvn.w	r7, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f1c:	strb.w	r1, [r6, #1092]	; 0x444
      _s = s;
    6f20:	mov.w	r1, #90	; 0x5a
      _b = b;
    6f24:	strb.w	r7, [r6, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f28:	mvn.w	r7, #91	; 0x5b
      _s = s;
    6f2c:	strb.w	r1, [r6, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f30:	mvn.w	r1, #111	; 0x6f
    6f34:	strb.w	r7, [r6, #1077]	; 0x435
    6f38:	mvn.w	r7, #113	; 0x71
    6f3c:	strb.w	r1, [r6, #1095]	; 0x447
      _s = s;
    6f40:	mvn.w	r1, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f44:	strb.w	r7, [r6, #1080]	; 0x438
      _s = s;
    6f48:	mov.w	r7, #74	; 0x4a
    6f4c:	strb.w	r1, [r6, #1096]	; 0x448
      _b = b;
    6f50:	mvn.w	r1, #58	; 0x3a
    6f54:	strb.w	r0, [r6, #1082]	; 0x43a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f58:	mvn.w	r0, #117	; 0x75
      _s = s;
      _b = b;
    6f5c:	strb.w	r1, [r6, #1097]	; 0x449
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f60:	mvn.w	r1, #117	; 0x75
      _s = s;
      _b = b;
    6f64:	strb.w	r2, [r6, #1079]	; 0x437
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f68:	strb.w	r1, [r6, #1098]	; 0x44a
      _s = s;
    6f6c:	mvn.w	r1, #84	; 0x54
    6f70:	strb.w	r7, [r6, #1081]	; 0x439
    6f74:	movs	r7, #89	; 0x59
    6f76:	strb.w	r1, [r6, #1099]	; 0x44b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f7a:	mvn.w	r1, #117	; 0x75
    6f7e:	strb.w	r0, [r6, #1083]	; 0x43b
    6f82:	movs	r0, #190	; 0xbe
    6f84:	strb.w	r1, [r6, #1101]	; 0x44d
      _s = s;
    6f88:	mvn.w	r1, #25
    6f8c:	strb.w	r1, [r6, #1102]	; 0x44e
      _b = b;
    6f90:	mvn.w	r1, #43	; 0x2b
    6f94:	strb.w	r1, [r6, #1103]	; 0x44f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6f98:	mvn.w	r1, #116	; 0x74
    6f9c:	strb.w	r1, [r6, #1104]	; 0x450
      _s = s;
    6fa0:	mvn.w	r1, #84	; 0x54
    6fa4:	strb.w	r1, [r6, #1105]	; 0x451
    6fa8:	mov.w	r1, #109	; 0x6d
      _b = b;
    6fac:	strb.w	r4, [r6, #1094]	; 0x446
    6fb0:	strb.w	r4, [r6, #1112]	; 0x458
    6fb4:	mvn.w	r4, #21
    6fb8:	strb.w	lr, [r6, #1100]	; 0x44c
    6fbc:	mvn.w	lr, #17
    6fc0:	strb.w	r4, [r6, #1115]	; 0x45b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    6fc4:	mov.w	r4, #103	; 0x67
      _b = b;
    6fc8:	strb.w	lr, [r6, #1106]	; 0x452
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fcc:	mvn.w	lr, #106	; 0x6a
      _s = s;
    6fd0:	strb.w	r4, [r6, #1117]	; 0x45d
      _b = b;
    6fd4:	mvn.w	r4, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fd8:	strb.w	lr, [r6, #1110]	; 0x456
    6fdc:	mvn.w	lr, #113	; 0x71
      _s = s;
      _b = b;
    6fe0:	strb.w	r4, [r6, #1118]	; 0x45e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6fe4:	mvn.w	r4, #70	; 0x46
      _s = s;
    6fe8:	strb.w	r1, [r6, #1078]	; 0x436
    6fec:	mov.w	r1, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ff0:	strb.w	r4, [r6, #1119]	; 0x45f
      _s = s;
    6ff4:	mov.w	r4, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    6ff8:	strb.w	lr, [r6, #1107]	; 0x453
      _s = s;
    6ffc:	mvn.w	lr, #84	; 0x54
    7000:	strb.w	r4, [r6, #1120]	; 0x460
    7004:	mov.w	r4, #31
    7008:	strb.w	r1, [r6, #1084]	; 0x43c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    700c:	mvn.w	r1, #82	; 0x52
      _s = s;
    7010:	strb.w	r4, [r6, #1123]	; 0x463
      _b = b;
    7014:	mvn.w	r4, #119	; 0x77
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7018:	strb.w	lr, [r6, #1108]	; 0x454
    701c:	mvn.w	lr, #99	; 0x63
      _b = b;
    7020:	strb.w	r4, [r6, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7024:	mvn.w	r4, #104	; 0x68
      _s = s;
      _b = b;
    7028:	strb.w	r2, [r6, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    702c:	strb.w	r4, [r6, #1125]	; 0x465
      _s = s;
      _b = b;
    7030:	mov.w	r4, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7034:	strb.w	lr, [r6, #1111]	; 0x457
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7038:	mov.w	lr, #102	; 0x66
      _s = s;
      _b = b;
    703c:	strb.w	r4, [r6, #1127]	; 0x467
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7040:	mvn.w	r4, #96	; 0x60
    7044:	strb.w	r3, [r6, #1113]	; 0x459
    7048:	movs	r3, #80	; 0x50
    704a:	strb.w	r4, [r6, #1128]	; 0x468
      _s = s;
      _b = b;
    704e:	mvn.w	r4, #55	; 0x37
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7052:	strb.w	r1, [r6, #1116]	; 0x45c
      _s = s;
      _b = b;
    7056:	movs	r1, #179	; 0xb3
    7058:	strb.w	r4, [r6, #1130]	; 0x46a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    705c:	mvn.w	r4, #53	; 0x35
      _s = s;
    7060:	strb.w	fp, [r6, #1135]	; 0x46f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7064:	strb.w	r4, [r6, #1131]	; 0x46b
      _s = s;
    7068:	mov.w	r4, #47	; 0x2f
    706c:	strb.w	r4, [r6, #1132]	; 0x46c
      _b = b;
    7070:	mvn.w	r4, #51	; 0x33
    7074:	strb.w	r4, [r6, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7078:	mvn.w	r4, #56	; 0x38
    707c:	strb.w	r4, [r6, #1134]	; 0x46e
      _s = s;
      _b = b;
    7080:	mvn.w	r4, #28
    7084:	strb.w	r4, [r6, #1136]	; 0x470
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7088:	mvn.w	r4, #73	; 0x49
    708c:	strb.w	r4, [r6, #1137]	; 0x471
      _s = s;
    7090:	mvn.w	r4, #86	; 0x56
    7094:	strb.w	r4, [r6, #1138]	; 0x472
    7098:	mov.w	r4, #107	; 0x6b
    709c:	strb.w	r4, [r6, #1126]	; 0x466
      _b = b;
    70a0:	mvn.w	r4, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70a4:	strb.w	r8, [r6, #1129]	; 0x469
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70a8:	mvn.w	r8, #122	; 0x7a
      _s = s;
      _b = b;
    70ac:	strb.w	r4, [r6, #1139]	; 0x473
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70b0:	mvn.w	r4, #92	; 0x5c
      _s = s;
    70b4:	strb.w	ip, [r6, #1114]	; 0x45a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70b8:	strb.w	r4, [r6, #1140]	; 0x474
      _s = s;
    70bc:	mvn.w	r4, #69	; 0x45
      _b = b;
    70c0:	strb.w	ip, [r6, #1121]	; 0x461
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    70c4:	strb.w	r4, [r6, #1141]	; 0x475
      _b = b;
    70c8:	mvn.w	r4, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70cc:	strb.w	r9, [r6, #1122]	; 0x462
      _s = s;
      _b = b;
    70d0:	strb.w	r4, [r6, #1142]	; 0x476
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70d4:	mvn.w	r4, #90	; 0x5a
      _s = s;
      _b = b;
    70d8:	strb.w	r2, [r6, #1160]	; 0x488
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70dc:	movs	r2, #203	; 0xcb
    70de:	strb.w	r4, [r6, #1143]	; 0x477
      _s = s;
    70e2:	mvn.w	r4, #32
    70e6:	strb.w	r4, [r6, #1144]	; 0x478
      _b = b;
    70ea:	mvn.w	r4, #25
    70ee:	strb.w	r4, [r6, #1145]	; 0x479
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    70f2:	mvn.w	r4, #97	; 0x61
    70f6:	strb.w	r4, [r6, #1146]	; 0x47a
      _s = s;
    70fa:	mvn.w	r4, #70	; 0x46
    70fe:	strb.w	r4, [r6, #1147]	; 0x47b
      _b = b;
    7102:	mvn.w	r4, #19
    7106:	strb.w	r4, [r6, #1148]	; 0x47c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    710a:	mov.w	r4, #119	; 0x77
    710e:	strb.w	r4, [r6, #1150]	; 0x47e
      _b = b;
    7112:	mvn.w	r4, #16
    7116:	strb.w	r4, [r6, #1151]	; 0x47f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    711a:	mvn.w	r4, #66	; 0x42
    711e:	strb.w	r4, [r6, #1152]	; 0x480
      _s = s;
    7122:	mvn.w	r4, #92	; 0x5c
    7126:	strb.w	r4, [r6, #1153]	; 0x481
      _b = b;
    712a:	mvn.w	r4, #21
    712e:	strb.w	r4, [r6, #1154]	; 0x482
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7132:	mvn.w	r4, #71	; 0x47
    7136:	strb.w	r4, [r6, #1155]	; 0x483
      _s = s;
    713a:	mvn.w	r4, #80	; 0x50
    713e:	strb.w	r4, [r6, #1156]	; 0x484
      _b = b;
    7142:	mvn.w	r4, #10
    7146:	strb.w	r4, [r6, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    714a:	mvn.w	r4, #119	; 0x77
    714e:	strb.w	r4, [r6, #1161]	; 0x489
      _s = s;
    7152:	mov.w	r4, #42	; 0x2a
    7156:	strb.w	r4, [r6, #1162]	; 0x48a
      _b = b;
    715a:	mvn.w	r4, #19
    715e:	strb.w	r4, [r6, #1163]	; 0x48b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7162:	mvn.w	r4, #114	; 0x72
    7166:	strb.w	r4, [r6, #1164]	; 0x48c
      _s = s;
    716a:	mov.w	r4, #90	; 0x5a
    716e:	strb.w	r4, [r6, #1165]	; 0x48d
      _b = b;
    7172:	mvn.w	r4, #68	; 0x44
    7176:	strb.w	r4, [r6, #1166]	; 0x48e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    717a:	mvn.w	r4, #116	; 0x74
    717e:	strb.w	r4, [r6, #1167]	; 0x48f
      _s = s;
    7182:	mvn.w	r4, #5
    7186:	strb.w	r4, [r6, #1168]	; 0x490
      _b = b;
    718a:	mvn.w	r4, #91	; 0x5b
    718e:	strb.w	r4, [r6, #1169]	; 0x491
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7192:	mvn.w	r4, #88	; 0x58
    7196:	strb.w	fp, [r6, #1170]	; 0x492
      _s = s;
      _b = b;
    719a:	mov.w	fp, #145	; 0x91
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    719e:	strb.w	r4, [r6, #1158]	; 0x486
      _s = s;
    71a2:	mov.w	r4, #92	; 0x5c
    71a6:	strb.w	r7, [r6, #1171]	; 0x493
      _b = b;
    71aa:	movs	r7, #166	; 0xa6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    71ac:	strb.w	r4, [r6, #1159]	; 0x487
      _b = b;
    71b0:	mvn.w	r4, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71b4:	strb.w	r0, [r6, #1149]	; 0x47d
      _s = s;
      _b = b;
    71b8:	strb.w	r4, [r6, #1172]	; 0x494
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71bc:	mvn.w	r4, #123	; 0x7b
      _s = s;
    71c0:	strb.w	r0, [r6, #1186]	; 0x4a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71c4:	movs	r0, #213	; 0xd5
    71c6:	strb.w	r4, [r6, #1173]	; 0x495
      _s = s;
    71ca:	mvn.w	r4, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71ce:	strb.w	ip, [r6, #1194]	; 0x4aa
      _s = s;
    71d2:	mvn.w	ip, #75	; 0x4b
    71d6:	strb.w	r4, [r6, #1174]	; 0x496
      _b = b;
    71da:	mvn.w	r4, #15
    71de:	strb.w	r4, [r6, #1175]	; 0x497
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71e2:	mvn.w	r4, #113	; 0x71
    71e6:	strb.w	r4, [r6, #1176]	; 0x498
      _s = s;
    71ea:	mvn.w	r4, #116	; 0x74
    71ee:	strb.w	r4, [r6, #1177]	; 0x499
      _b = b;
    71f2:	mvn.w	r4, #15
    71f6:	strb.w	r4, [r6, #1178]	; 0x49a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    71fa:	mvn.w	r4, #107	; 0x6b
    71fe:	strb.w	r4, [r6, #1179]	; 0x49b
      _s = s;
    7202:	mvn.w	r4, #117	; 0x75
    7206:	strb.w	r4, [r6, #1180]	; 0x49c
      _b = b;
    720a:	mvn.w	r4, #20
    720e:	strb.w	r4, [r6, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7212:	mvn.w	r4, #113	; 0x71
    7216:	strb.w	r4, [r6, #1182]	; 0x49e
      _s = s;
    721a:	mvn.w	r4, #59	; 0x3b
    721e:	strb.w	r4, [r6, #1183]	; 0x49f
      _b = b;
    7222:	mvn.w	r4, #42	; 0x2a
    7226:	strb.w	r4, [r6, #1184]	; 0x4a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    722a:	mvn.w	r4, #118	; 0x76
    722e:	strb.w	r4, [r6, #1185]	; 0x4a1
      _s = s;
      _b = b;
    7232:	mvn.w	r4, #19
    7236:	strb.w	r4, [r6, #1187]	; 0x4a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    723a:	mvn.w	r4, #109	; 0x6d
    723e:	strb.w	r4, [r6, #1188]	; 0x4a4
      _s = s;
    7242:	mvn.w	r4, #103	; 0x67
    7246:	strb.w	r4, [r6, #1189]	; 0x4a5
      _b = b;
    724a:	mvn.w	r4, #21
    724e:	strb.w	r4, [r6, #1190]	; 0x4a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7252:	mvn.w	r4, #93	; 0x5d
    7256:	strb.w	r4, [r6, #1191]	; 0x4a7
      _s = s;
    725a:	mvn.w	r4, #51	; 0x33
    725e:	strb.w	r4, [r6, #1192]	; 0x4a8
      _b = b;
    7262:	mvn.w	r4, #46	; 0x2e
    7266:	strb.w	r4, [r6, #1193]	; 0x4a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    726a:	mov.w	r4, #79	; 0x4f
    726e:	strb.w	r4, [r6, #1195]	; 0x4ab
      _b = b;
    7272:	mvn.w	r4, #124	; 0x7c
    7276:	strb.w	r4, [r6, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    727a:	mov.w	r4, #103	; 0x67
    727e:	strb.w	r4, [r6, #1198]	; 0x4ae
      _b = b;
    7282:	mov.w	r4, #86	; 0x56
    7286:	strb.w	r4, [r6, #1199]	; 0x4af
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    728a:	mov.w	r4, #111	; 0x6f
    728e:	strb.w	r4, [r6, #1201]	; 0x4b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7292:	mvn.w	r4, #113	; 0x71
      _s = s;
      _b = b;
    7296:	strb.w	r9, [r6, #1202]	; 0x4b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    729a:	mov.w	r9, #85	; 0x55
    729e:	strb.w	r3, [r6, #1200]	; 0x4b0
      _s = s;
    72a2:	movs	r3, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72a4:	strb.w	r4, [r6, #1203]	; 0x4b3
      _s = s;
    72a8:	mov.w	r4, #58	; 0x3a
    72ac:	strb.w	r3, [r6, #1213]	; 0x4bd
    72b0:	strb.w	r3, [r6, #1225]	; 0x4c9
      _b = b;
    72b4:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72b8:	strb.w	r4, [r6, #1204]	; 0x4b4
      _b = b;
    72bc:	mov.w	r4, #87	; 0x57
    72c0:	strb.w	r3, [r6, #1226]	; 0x4ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72c4:	mvn.w	r3, #55	; 0x37
      _s = s;
      _b = b;
    72c8:	strb.w	r4, [r6, #1205]	; 0x4b5
    72cc:	mvn.w	r4, #33	; 0x21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72d0:	strb.w	r3, [r6, #1227]	; 0x4cb
    72d4:	mov.w	r3, #17
      _s = s;
      _b = b;
    72d8:	strb.w	r4, [r6, #1220]	; 0x4c4
    72dc:	mvn.w	r4, #36	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72e0:	strb.w	r3, [r6, #1209]	; 0x4b9
      _s = s;
    72e4:	mov.w	r3, #32
      _b = b;
    72e8:	strb.w	r4, [r6, #1211]	; 0x4bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    72ec:	mov.w	r4, #74	; 0x4a
    72f0:	strb.w	r3, [r6, #1216]	; 0x4c0
    72f4:	mov.w	r3, #67	; 0x43
    72f8:	strb.w	r4, [r6, #1207]	; 0x4b7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    72fc:	mvn.w	r4, #51	; 0x33
      _s = s;
    7300:	strb.w	r3, [r6, #1219]	; 0x4c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7304:	mov.w	r3, #18
    7308:	strb.w	r4, [r6, #1212]	; 0x4bc
      _s = s;
      _b = b;
    730c:	mvn.w	r4, #37	; 0x25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7310:	strb.w	r3, [r6, #1206]	; 0x4b6
      _s = s;
    7314:	mov.w	r3, #94	; 0x5e
      _b = b;
    7318:	strb.w	r4, [r6, #1214]	; 0x4be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    731c:	mvn.w	r4, #43	; 0x2b
      _s = s;
    7320:	strb.w	r3, [r6, #1210]	; 0x4ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7324:	mvn.w	r3, #83	; 0x53
    7328:	strb.w	r4, [r6, #1215]	; 0x4bf
      _s = s;
      _b = b;
    732c:	mvn.w	r4, #25
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7330:	strb.w	r3, [r6, #1224]	; 0x4c8
      _s = s;
    7334:	mov.w	r3, #60	; 0x3c
      _b = b;
    7338:	strb.w	r4, [r6, #1217]	; 0x4c1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    733c:	mvn.w	r4, #70	; 0x46
      _s = s;
    7340:	strb.w	r3, [r6, #1228]	; 0x4cc
      _b = b;
    7344:	mvn.w	r3, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7348:	strb.w	r4, [r6, #1218]	; 0x4c2
    734c:	mvn.w	r4, #96	; 0x60
      _s = s;
      _b = b;
    7350:	strb.w	r3, [r6, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7354:	mvn.w	r3, #49	; 0x31
    7358:	strb.w	r4, [r6, #1221]	; 0x4c5
      _s = s;
    735c:	mvn.w	r4, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7360:	strb.w	r3, [r6, #1230]	; 0x4ce
      _s = s;
    7364:	mov.w	r3, #58	; 0x3a
    7368:	strb.w	r4, [r6, #1222]	; 0x4c6
      _b = b;
    736c:	mvn.w	r4, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7370:	strb.w	r3, [r6, #1231]	; 0x4cf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7374:	mvn.w	r3, #62	; 0x3e
    7378:	strb.w	lr, [r6, #1197]	; 0x4ad
      _s = s;
      _b = b;
    737c:	mov.w	lr, #111	; 0x6f
    7380:	strb.w	r4, [r6, #1223]	; 0x4c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7384:	movs	r4, #55	; 0x37
      _s = s;
      _b = b;
    7386:	strb.w	r1, [r6, #1208]	; 0x4b8
    738a:	movs	r1, #226	; 0xe2
    738c:	strb.w	sl, [r6, #1232]	; 0x4d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7390:	strb.w	r3, [r6, #1233]	; 0x4d1
      _s = s;
    7394:	mvn.w	r3, #18
    7398:	strb.w	ip, [r5, #1267]	; 0x4f3
      _b = b;
    739c:	mvn.w	ip, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73a0:	strb.w	r8, [r5, #1251]	; 0x4e3
      _s = s;
    73a4:	mov.w	r8, #100	; 0x64
      _b = b;
    73a8:	strb.w	ip, [r5, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73ac:	mov.w	ip, #97	; 0x61
    73b0:	strb.w	r3, [r6, #1234]	; 0x4d2
      _b = b;
    73b4:	mvn.w	r3, #12
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    73b8:	strb.w	ip, [r5, #1270]	; 0x4f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73bc:	mvn.w	ip, #112	; 0x70
      _s = s;
    73c0:	strb.w	r8, [r5, #1252]	; 0x4e4
      _b = b;
    73c4:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73c8:	strb.w	ip, [r5, #1239]	; 0x4d7
      _s = s;
    73cc:	mov.w	ip, #72	; 0x48
      _b = b;
    73d0:	strb.w	r3, [r5, #1235]	; 0x4d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73d4:	mvn.w	r3, #75	; 0x4b
      _s = s;
    73d8:	strb.w	ip, [r5, #1240]	; 0x4d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73dc:	mvn.w	ip, #120	; 0x78
      _s = s;
      _b = b;
    73e0:	strb.w	r8, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73e4:	mvn.w	r8, #111	; 0x6f
    73e8:	strb.w	ip, [r5, #1242]	; 0x4da
      _s = s;
    73ec:	mov.w	ip, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    73f0:	strb.w	r3, [r5, #1236]	; 0x4d4
      _s = s;
    73f4:	mov.w	r3, #78	; 0x4e
    73f8:	strb.w	ip, [r5, #1243]	; 0x4db
      _b = b;
    73fc:	mvn.w	ip, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7400:	strb.w	r8, [r5, #1254]	; 0x4e6
      _s = s;
      _b = b;
    7404:	movs	r6, #47	; 0x2f
    7406:	strb.w	ip, [r5, #1244]	; 0x4dc
    740a:	strb.w	ip, [r5, #1262]	; 0x4ee
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    740e:	mvn.w	ip, #118	; 0x76
    7412:	strb.w	r8, [r5, #1269]	; 0x4f5
      _s = s;
    7416:	mov.w	r8, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    741a:	strb.w	ip, [r5, #1245]	; 0x4dd
    741e:	strb.w	ip, [r5, #1263]	; 0x4ef
      _s = s;
    7422:	mvn.w	ip, #6
    7426:	strb.w	r3, [r5, #1237]	; 0x4d5
      _b = b;
    742a:	mvn.w	r3, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    742e:	strb.w	ip, [r5, #1246]	; 0x4de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7432:	mvn.w	ip, #126	; 0x7e
      _s = s;
    7436:	strb.w	r8, [r5, #1255]	; 0x4e7
      _b = b;
    743a:	mvn.w	r8, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    743e:	strb.w	ip, [r5, #1248]	; 0x4e0
      _s = s;
    7442:	mvn.w	ip, #84	; 0x54
      _b = b;
    7446:	strb.w	r3, [r5, #1238]	; 0x4d6
    744a:	mvn.w	r3, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    744e:	strb.w	ip, [r5, #1249]	; 0x4e1
      _b = b;
    7452:	strb.w	r8, [r5, #1256]	; 0x4e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7456:	mvn.w	r8, #108	; 0x6c
      _s = s;
      _b = b;
    745a:	ldrb.w	ip, [sp, #28]
    745e:	strb.w	r3, [r5, #1241]	; 0x4d9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7462:	movs	r3, #39	; 0x27
      _b = b;
    7464:	strb.w	sl, [r5, #1259]	; 0x4eb
    7468:	strb.w	fp, [r5, #1247]	; 0x4df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    746c:	strb.w	fp, [r5, #1258]	; 0x4ea
      _b = b;
    7470:	strb.w	ip, [r5, #1250]	; 0x4e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7474:	mov.w	ip, #177	; 0xb1
    7478:	strb.w	r8, [r5, #1257]	; 0x4e9
    747c:	mvn.w	r8, #103	; 0x67
      _s = s;
      _b = b;
    7480:	strb.w	lr, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7484:	strb.w	r8, [r5, #1260]	; 0x4ec
      _s = s;
    7488:	mvn.w	r8, #115	; 0x73
    748c:	strb.w	lr, [r5, #1303]	; 0x517
      _b = b;
    7490:	mov.w	lr, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7494:	strb.w	r8, [r5, #1261]	; 0x4ed
    7498:	mvn.w	r8, #95	; 0x5f
      _b = b;
    749c:	strb.w	lr, [r5, #1280]	; 0x500
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74a0:	mov.w	lr, #108	; 0x6c
      _s = s;
    74a4:	strb.w	r8, [r5, #1264]	; 0x4f0
      _b = b;
    74a8:	mvn.w	r8, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74ac:	strb.w	lr, [r5, #1281]	; 0x501
      _s = s;
    74b0:	mvn.w	lr, #82	; 0x52
      _b = b;
    74b4:	strb.w	r8, [r5, #1265]	; 0x4f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74b8:	mvn.w	r8, #109	; 0x6d
      _s = s;
    74bc:	strb.w	lr, [r5, #1282]	; 0x502
    74c0:	mvn.w	lr, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74c4:	strb.w	r8, [r5, #1266]	; 0x4f2
      _s = s;
      _b = b;
    74c8:	mvn.w	r8, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74cc:	strb.w	lr, [r5, #1285]	; 0x505
      _b = b;
    74d0:	strb.w	r8, [r5, #1271]	; 0x4f7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    74d4:	mov.w	r8, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74d8:	ldrb.w	lr, [sp, #36]	; 0x24
      _s = s;
    74dc:	strb.w	r8, [r5, #1273]	; 0x4f9
    74e0:	mvn.w	r8, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74e4:	strb.w	lr, [r5, #1287]	; 0x507
      _s = s;
    74e8:	mov.w	lr, #95	; 0x5f
    74ec:	strb.w	r8, [r5, #1279]	; 0x4ff
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74f0:	mov.w	r8, #18
      _s = s;
    74f4:	strb.w	lr, [r5, #1288]	; 0x508
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    74f8:	mvn.w	lr, #39	; 0x27
    74fc:	strb.w	r8, [r5, #1284]	; 0x504
    7500:	mvn.w	r8, #95	; 0x5f
    7504:	strb.w	r9, [r5, #1278]	; 0x4fe
    7508:	mov.w	r9, #142	; 0x8e
    750c:	strb.w	r8, [r5, #1299]	; 0x513
      _s = s;
    7510:	mvn.w	r8, #75	; 0x4b
      _b = b;
    7514:	strb.w	r7, [r5, #1289]	; 0x509
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7518:	movs	r7, #119	; 0x77
    751a:	strb.w	r8, [r5, #1300]	; 0x514
      _b = b;
    751e:	mvn.w	r8, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7522:	strb.w	r0, [r5, #1290]	; 0x50a
    7526:	movs	r0, #12
      _s = s;
      _b = b;
    7528:	strb.w	r8, [r5, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    752c:	mvn.w	r8, #33	; 0x21
      _b = b;
    7530:	strb.w	r1, [r5, #1292]	; 0x50c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7534:	movs	r1, #207	; 0xcf
    7536:	strb.w	r8, [r5, #1276]	; 0x4fc
      _b = b;
    753a:	mov.w	r8, #101	; 0x65
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    753e:	strb.w	r2, [r5, #1296]	; 0x510
      _s = s;
      _b = b;
    7542:	movs	r2, #70	; 0x46
    7544:	strb.w	r8, [r5, #1286]	; 0x506
    7548:	mvn.w	r8, #99	; 0x63
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    754c:	strb.w	r4, [r5, #1272]	; 0x4f8
      _s = s;
      _b = b;
    7550:	strb.w	r8, [r5, #1274]	; 0x4fa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7554:	mov.w	r8, #44	; 0x2c
      _s = s;
      _b = b;
    7558:	strb.w	r6, [r5, #1283]	; 0x503
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    755c:	strb.w	r8, [r5, #1275]	; 0x4fb
    7560:	mvn.w	r8, #41	; 0x29
      _s = s;
    7564:	strb.w	r3, [r5, #1291]	; 0x50b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7568:	strb.w	lr, [r5, #1293]	; 0x50d
      _s = s;
    756c:	mov.w	lr, #33	; 0x21
    7570:	strb.w	r4, [r5, #1318]	; 0x526
      _b = b;
    7574:	mvn.w	r4, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7578:	strb.w	lr, [r5, #1294]	; 0x50e
      _b = b;
    757c:	ldrb.w	lr, [sp, #4]
    7580:	strb.w	r4, [r5, #1319]	; 0x527
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7584:	mvn.w	r4, #126	; 0x7e
      _s = s;
      _b = b;
    7588:	strb.w	lr, [r5, #1295]	; 0x50f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    758c:	mov.w	lr, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7590:	strb.w	r4, [r5, #1320]	; 0x528
      _s = s;
      _b = b;
    7594:	mvn.w	r4, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7598:	strb.w	lr, [r5, #1297]	; 0x511
      _b = b;
    759c:	ldrb.w	lr, [sp, #12]
    75a0:	strb.w	r4, [r5, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75a4:	mvn.w	r4, #126	; 0x7e
      _s = s;
      _b = b;
    75a8:	strb.w	lr, [r5, #1298]	; 0x512
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75ac:	mvn.w	lr, #59	; 0x3b
    75b0:	strb.w	r4, [r5, #1326]	; 0x52e
      _s = s;
    75b4:	mvn.w	r4, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75b8:	strb.w	lr, [r5, #1302]	; 0x516
      _s = s;
      _b = b;
    75bc:	mvn.w	lr, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    75c0:	strb.w	r4, [r5, #1327]	; 0x52f
      _b = b;
    75c4:	mvn.w	r4, #11
    75c8:	strb.w	lr, [r5, #1304]	; 0x518
    75cc:	strb.w	lr, [r5, #1307]	; 0x51b
    75d0:	mvn.w	lr, #17
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75d4:	strb.w	r8, [r5, #1308]	; 0x51c
      _s = s;
      _b = b;
    75d8:	strb.w	lr, [r5, #1310]	; 0x51e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75dc:	mvn.w	lr, #59	; 0x3b
      _s = s;
    75e0:	strb.w	r8, [r5, #1312]	; 0x520
    75e4:	mov.w	r8, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75e8:	strb.w	lr, [r5, #1311]	; 0x51f
      _s = s;
      _b = b;
    75ec:	mvn.w	lr, #11
    75f0:	strb.w	r4, [r5, #1331]	; 0x533
    75f4:	strb.w	lr, [r5, #1313]	; 0x521
    75f8:	strb.w	lr, [r5, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    75fc:	mvn.w	lr, #109	; 0x6d
      _s = s;
      _b = b;
    7600:	strb.w	r4, [r5, #1334]	; 0x536
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7604:	mvn.w	r4, #108	; 0x6c
    7608:	strb.w	lr, [r5, #1317]	; 0x525
    760c:	mvn.w	lr, #65	; 0x41
      _s = s;
    7610:	strb.w	r8, [r5, #1315]	; 0x523
    7614:	mov.w	r8, #24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7618:	strb.w	lr, [r5, #1305]	; 0x519
      _s = s;
    761c:	mov.w	lr, #48	; 0x30
    7620:	strb.w	r3, [r5, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7624:	strb.w	r4, [r5, #1335]	; 0x537
      _s = s;
    7628:	movs	r4, #80	; 0x50
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    762a:	strb.w	ip, [r5, #1314]	; 0x522
      _s = s;
    762e:	mov.w	ip, #19
    7632:	strb.w	lr, [r5, #1306]	; 0x51a
      _b = b;
    7636:	mov.w	lr, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    763a:	strb.w	r8, [r5, #1321]	; 0x529
      _b = b;
    763e:	ldrb.w	r8, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7642:	strb.w	r6, [r5, #1350]	; 0x546
      _s = s;
    7646:	mvn.w	r6, #84	; 0x54
      _b = b;
    764a:	strb.w	r8, [r5, #1322]	; 0x52a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    764e:	mvn.w	r8, #121	; 0x79
      _s = s;
    7652:	strb.w	r6, [r5, #1354]	; 0x54a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7656:	mvn.w	r6, #22
    765a:	strb.w	r8, [r5, #1323]	; 0x52b
      _s = s;
    765e:	mvn.w	r8, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7662:	strb.w	r6, [r5, #1359]	; 0x54f
    7666:	mov.w	r6, #18
      _s = s;
    766a:	strb.w	r8, [r5, #1324]	; 0x52c
      _b = b;
    766e:	ldrb.w	r8, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7672:	strb.w	r6, [r5, #1362]	; 0x552
      _s = s;
    7676:	mvn.w	r6, #49	; 0x31
      _b = b;
    767a:	strb.w	r8, [r5, #1328]	; 0x530
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    767e:	mvn.w	r8, #124	; 0x7c
      _s = s;
    7682:	strb.w	r6, [r5, #1363]	; 0x553
    7686:	mov.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    768a:	strb.w	r8, [r5, #1329]	; 0x531
      _s = s;
    768e:	mov.w	r8, #105	; 0x69
    7692:	strb.w	r3, [r5, #1369]	; 0x559
      _b = b;
    7696:	mov.w	r3, #98	; 0x62
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    769a:	strb.w	r8, [r5, #1330]	; 0x532
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    769e:	mvn.w	r8, #119	; 0x77
    76a2:	strb.w	fp, [r5, #1341]	; 0x53d
    76a6:	strb.w	r8, [r5, #1332]	; 0x534
      _s = s;
    76aa:	mov.w	r8, #99	; 0x63
    76ae:	strb.w	r6, [r5, #1366]	; 0x556
    76b2:	movs	r6, #121	; 0x79
    76b4:	strb.w	r8, [r5, #1333]	; 0x535
    76b8:	mov.w	r8, #103	; 0x67
    76bc:	strb.w	r7, [r5, #1342]	; 0x53e
    76c0:	movs	r7, #96	; 0x60
    76c2:	strb.w	r8, [r5, #1336]	; 0x538
      _b = b;
    76c6:	mvn.w	r8, #22
    76ca:	strb.w	r3, [r5, #1355]	; 0x54b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ce:	movs	r3, #114	; 0x72
      _s = s;
      _b = b;
    76d0:	strb.w	r8, [r5, #1337]	; 0x539
    76d4:	mvn.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76d8:	strb.w	r0, [r5, #1356]	; 0x54c
      _s = s;
      _b = b;
    76dc:	mvn.w	r0, #22
    76e0:	strb.w	r8, [r5, #1340]	; 0x53c
    76e4:	mvn.w	r8, #11
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76e8:	strb.w	r1, [r5, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    76ec:	movs	r1, #165	; 0xa5
      _s = s;
      _b = b;
    76ee:	strb.w	r8, [r5, #1343]	; 0x53f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76f2:	mvn.w	r8, #103	; 0x67
      _b = b;
    76f6:	strb.w	r2, [r5, #1358]	; 0x54e
    76fa:	movs	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    76fc:	strb.w	r8, [r5, #1345]	; 0x541
      _b = b;
    7700:	mvn.w	r8, #18
    7704:	strb.w	r8, [r5, #1346]	; 0x542
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7708:	mvn.w	r8, #104	; 0x68
    770c:	strb.w	r8, [r5, #1338]	; 0x53a
      _s = s;
    7710:	mov.w	r8, #79	; 0x4f
    7714:	strb.w	r8, [r5, #1339]	; 0x53b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7718:	mvn.w	r8, #100	; 0x64
    771c:	strb.w	r8, [r5, #1344]	; 0x540
      _s = s;
    7720:	mov.w	r8, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7724:	strb.w	r9, [r5, #1347]	; 0x543
      _s = s;
    7728:	strb.w	r8, [r5, #1348]	; 0x544
      _b = b;
    772c:	mvn.w	r8, #80	; 0x50
    7730:	strb.w	r0, [r5, #1373]	; 0x55d
    7734:	strb.w	r8, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7738:	mov.w	r8, #124	; 0x7c
      _b = b;
    773c:	ldr	r0, [sp, #0]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    773e:	strb.w	r8, [r5, #1351]	; 0x547
      _b = b;
    7742:	mov.w	r8, #117	; 0x75
    7746:	strb.w	r0, [r5, #1379]	; 0x563
    774a:	strb.w	r8, [r5, #1352]	; 0x548
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    774e:	mov.w	r8, #52	; 0x34
      _s = s;
      _b = b;
    7752:	strb.w	sl, [r5, #1382]	; 0x566
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7756:	strb.w	r8, [r5, #1353]	; 0x549
      _s = s;
    775a:	mov.w	r8, #36	; 0x24
    775e:	strb.w	r8, [r5, #1360]	; 0x550
      _b = b;
    7762:	mov.w	r8, #14
    7766:	strb.w	r8, [r5, #1361]	; 0x551
    776a:	mov.w	r8, #116	; 0x74
    776e:	strb.w	r8, [r5, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7772:	mvn.w	r8, #34	; 0x22
    7776:	strb.w	r8, [r5, #1365]	; 0x555
      _s = s;
      _b = b;
    777a:	mvn.w	r8, #43	; 0x2b
    777e:	strb.w	r8, [r5, #1367]	; 0x557
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7782:	strb.w	r8, [r5, #1368]	; 0x558
      _s = s;
      _b = b;
    7786:	ldrb.w	r8, [sp, #16]
    778a:	strb.w	r8, [r5, #1370]	; 0x55a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    778e:	mvn.w	r8, #39	; 0x27
    7792:	strb.w	r8, [r5, #1371]	; 0x55b
      _s = s;
    7796:	mov.w	r8, #33	; 0x21
    779a:	strb.w	r8, [r5, #1372]	; 0x55c
    779e:	mov.w	r8, #122	; 0x7a
    77a2:	strb.w	r8, [r5, #1381]	; 0x565
      _b = b;
    77a6:	ldrb.w	r8, [sp, #4]
    77aa:	strb.w	r8, [r5, #1385]	; 0x569
    77ae:	ldrb.w	r8, [sp, #28]
    77b2:	strb.w	r8, [r5, #1388]	; 0x56c
    77b6:	mvn.w	r8, #12
    77ba:	strb.w	r8, [r5, #1391]	; 0x56f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77be:	mvn.w	r8, #82	; 0x52
    77c2:	strb.w	r8, [r5, #1392]	; 0x570
      _s = s;
    77c6:	mov.w	r8, #124	; 0x7c
    77ca:	strb.w	r8, [r5, #1393]	; 0x571
      _b = b;
    77ce:	mvn.w	r8, #12
    77d2:	strb.w	r8, [r5, #1394]	; 0x572
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77d6:	mvn.w	r8, #108	; 0x6c
    77da:	strb.w	r8, [r5, #1395]	; 0x573
      _s = s;
      _b = b;
    77de:	mvn.w	r8, #22
    77e2:	strb.w	r8, [r5, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    77e6:	mvn.w	r8, #120	; 0x78
    77ea:	strb.w	r8, [r5, #1401]	; 0x579
    77ee:	mvn.w	r8, #72	; 0x48
    77f2:	strb.w	r8, [r5, #1380]	; 0x564
      _s = s;
    77f6:	mov.w	r8, #56	; 0x38
    77fa:	strb.w	r4, [r5, #1384]	; 0x568
      _b = b;
    77fe:	movs	r4, #120	; 0x78
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7800:	strb.w	r8, [r5, #1396]	; 0x574
    7804:	mvn.w	r8, #4
    7808:	strb.w	ip, [r5, #1399]	; 0x577
    780c:	mov.w	ip, #188	; 0xbc
    7810:	strb.w	r8, [r5, #1402]	; 0x57a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7814:	mvn.w	r8, #60	; 0x3c
      _s = s;
      _b = b;
    7818:	strb.w	lr, [r5, #1400]	; 0x578
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    781c:	mov.w	lr, #26
    7820:	strb.w	r8, [r5, #1374]	; 0x55e
      _s = s;
    7824:	mov.w	r8, #59	; 0x3b
    7828:	strb.w	r8, [r5, #1375]	; 0x55f
      _b = b;
    782c:	mvn.w	r8, #25
    7830:	strb.w	r8, [r5, #1376]	; 0x560
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7834:	mvn.w	r8, #105	; 0x69
    7838:	strb.w	r8, [r5, #1377]	; 0x561
      _s = s;
    783c:	mvn.w	r8, #101	; 0x65
    7840:	strb.w	r8, [r5, #1378]	; 0x562
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7844:	mvn.w	r8, #54	; 0x36
    7848:	strb.w	r8, [r5, #1383]	; 0x567
    784c:	mvn.w	r8, #51	; 0x33
    7850:	strb.w	r8, [r5, #1386]	; 0x56a
      _s = s;
    7854:	mov.w	r8, #75	; 0x4b
    7858:	strb.w	r8, [r5, #1387]	; 0x56b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    785c:	mvn.w	r8, #57	; 0x39
    7860:	strb.w	r8, [r5, #1389]	; 0x56d
      _s = s;
    7864:	ldrb.w	r8, [sp, #20]
    7868:	strb.w	r8, [r5, #1390]	; 0x56e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    786c:	mvn.w	r8, #125	; 0x7d
    7870:	strb.w	r8, [r5, #1398]	; 0x576
      _s = s;
      _b = b;
    7874:	mvn.w	r8, #88	; 0x58
    7878:	strb.w	r8, [r5, #1403]	; 0x57b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    787c:	mvn.w	r8, #99	; 0x63
    7880:	strb.w	r8, [r5, #1410]	; 0x582
      _s = s;
    7884:	mov.w	r8, #105	; 0x69
    7888:	strb.w	r8, [r5, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    788c:	mvn.w	r8, #124	; 0x7c
    7890:	strb.w	r8, [r5, #1407]	; 0x57f
      _s = s;
    7894:	mvn.w	r8, #100	; 0x64
    7898:	strb.w	r8, [r5, #1408]	; 0x580
      _b = b;
    789c:	ldrb.w	r8, [sp, #4]
    78a0:	strb.w	r8, [r5, #1409]	; 0x581
    78a4:	ldrb.w	r8, [sp, #12]
    78a8:	strb.w	r8, [r5, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78ac:	mov.w	r8, #99	; 0x63
    78b0:	strb.w	r8, [r5, #1414]	; 0x586
      _b = b;
    78b4:	ldrb.w	r8, [sp, #4]
    78b8:	strb.w	r8, [r5, #1415]	; 0x587
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78bc:	mvn.w	r8, #112	; 0x70
    78c0:	strb.w	r8, [r5, #1420]	; 0x58c
      _b = b;
    78c4:	ldrb.w	r8, [sp, #4]
    78c8:	strb.w	r8, [r5, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    78cc:	mvn.w	r8, #62	; 0x3e
    78d0:	strb.w	r8, [r5, #1423]	; 0x58f
      _b = b;
    78d4:	mvn.w	r8, #22
    78d8:	strb.w	r8, [r5, #1424]	; 0x590
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78dc:	mvn.w	r8, #111	; 0x6f
      _s = s;
    78e0:	strb.w	r6, [r5, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78e4:	mvn.w	r6, #127	; 0x7f
    78e8:	strb.w	r8, [r5, #1425]	; 0x591
    78ec:	mov.w	r8, #36	; 0x24
    78f0:	strb.w	r6, [r5, #1404]	; 0x57c
      _s = s;
      _b = b;
    78f4:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    78f8:	strb.w	r8, [r5, #1431]	; 0x597
      _s = s;
    78fc:	mvn.w	r8, #49	; 0x31
      _b = b;
    7900:	strb.w	r6, [r5, #1406]	; 0x57e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7904:	mvn.w	r6, #61	; 0x3d
    7908:	strb.w	r8, [r5, #1432]	; 0x598
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    790c:	mov.w	r8, #105	; 0x69
      _s = s;
    7910:	strb.w	r6, [r5, #1411]	; 0x583
      _b = b;
    7914:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7918:	strb.w	r8, [r5, #1434]	; 0x59a
      _s = s;
      _b = b;
    791c:	mvn.w	r8, #49	; 0x31
    7920:	strb.w	r6, [r5, #1418]	; 0x58a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7924:	mvn.w	r6, #98	; 0x62
      _s = s;
      _b = b;
    7928:	strb.w	r8, [r5, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    792c:	mov.w	r8, #48	; 0x30
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7930:	strb.w	r6, [r5, #1422]	; 0x58e
      _s = s;
      _b = b;
    7934:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7938:	strb.w	r8, [r5, #1450]	; 0x5aa
      _b = b;
    793c:	mvn.w	r8, #25
    7940:	strb.w	r6, [r5, #1427]	; 0x593
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7944:	mvn.w	r6, #85	; 0x55
      _b = b;
    7948:	strb.w	r8, [r5, #1451]	; 0x5ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    794c:	mov.w	r8, #78	; 0x4e
    7950:	strb.w	r6, [r5, #1435]	; 0x59b
      _b = b;
    7954:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7958:	strb.w	r8, [r5, #1453]	; 0x5ad
      _b = b;
    795c:	mvn.w	r8, #25
    7960:	strb.w	r6, [r5, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7964:	mov.w	r6, #108	; 0x6c
      _s = s;
      _b = b;
    7968:	strb.w	r8, [r5, #1454]	; 0x5ae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    796c:	mvn.w	r8, #103	; 0x67
    7970:	strb.w	r6, [r5, #1437]	; 0x59d
      _s = s;
    7974:	mov.w	r6, #116	; 0x74
      _b = b;
    7978:	strb.w	r2, [r5, #1433]	; 0x599
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    797c:	mvn.w	r2, #96	; 0x60
      _s = s;
    7980:	strb.w	r6, [r5, #1441]	; 0x5a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7984:	mvn.w	r6, #6
      _s = s;
      _b = b;
    7988:	strb.w	r0, [r5, #1448]	; 0x5a8
    798c:	mvn.w	r0, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7990:	strb.w	r6, [r5, #1443]	; 0x5a3
      _s = s;
    7994:	mov.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7998:	strb.w	r8, [r5, #1455]	; 0x5af
    799c:	mvn.w	r8, #65	; 0x41
      _s = s;
    79a0:	strb.w	r7, [r5, #1417]	; 0x589
      _b = b;
    79a4:	movs	r7, #241	; 0xf1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79a6:	strb.w	r3, [r5, #1428]	; 0x594
      _s = s;
    79aa:	movs	r3, #174	; 0xae
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79ac:	strb.w	r2, [r5, #1413]	; 0x585
    79b0:	strb.w	r2, [r5, #1416]	; 0x588
      _s = s;
    79b4:	strb.w	r2, [r5, #1426]	; 0x592
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79b8:	movs	r2, #132	; 0x84
    79ba:	strb.w	r1, [r5, #1419]	; 0x58b
      _s = s;
      _b = b;
    79be:	strb.w	r4, [r5, #1430]	; 0x596
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79c2:	strb.w	r6, [r5, #1444]	; 0x5a4
    79c6:	movs	r6, #28
      _b = b;
    79c8:	strb.w	r0, [r5, #1457]	; 0x5b1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79cc:	mvn.w	r0, #96	; 0x60
    79d0:	strb.w	r8, [r5, #1458]	; 0x5b2
      _s = s;
      _b = b;
    79d4:	mvn.w	r8, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    79d8:	strb.w	ip, [r5, #1438]	; 0x59e
      _b = b;
    79dc:	mov.w	ip, #236	; 0xec
    79e0:	strb.w	r8, [r5, #1460]	; 0x5b4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79e4:	mvn.w	r8, #57	; 0x39
    79e8:	strb.w	lr, [r5, #1440]	; 0x5a0
      _s = s;
    79ec:	mov.w	lr, #64	; 0x40
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    79f0:	strb.w	r8, [r5, #1461]	; 0x5b5
      _s = s;
    79f4:	mvn.w	r8, #82	; 0x52
    79f8:	strb.w	r3, [r5, #1459]	; 0x5b3
    79fc:	strb.w	r8, [r5, #1462]	; 0x5b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a00:	mvn.w	r8, #54	; 0x36
      _s = s;
      _b = b;
    7a04:	strb.w	r7, [r5, #1466]	; 0x5ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a08:	strb.w	r8, [r5, #1464]	; 0x5b8
      _s = s;
    7a0c:	mov.w	r8, #117	; 0x75
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a10:	strb.w	r3, [r5, #1470]	; 0x5be
      _s = s;
    7a14:	strb.w	r8, [r5, #1465]	; 0x5b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a18:	mvn.w	r8, #59	; 0x3b
    7a1c:	strb.w	fp, [r5, #1473]	; 0x5c1
    7a20:	strb.w	r8, [r5, #1467]	; 0x5bb
      _s = s;
    7a24:	mvn.w	r8, #64	; 0x40
      _b = b;
    7a28:	strb.w	ip, [r5, #1475]	; 0x5c3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a2c:	strb.w	r8, [r5, #1468]	; 0x5bc
      _b = b;
    7a30:	mov.w	r8, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a34:	strb.w	r9, [r5, #1476]	; 0x5c4
      _s = s;
      _b = b;
    7a38:	strb.w	r8, [r5, #1439]	; 0x59f
    7a3c:	mov.w	r8, #92	; 0x5c
    7a40:	strb.w	r8, [r5, #1442]	; 0x5a2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a44:	mvn.w	r8, #38	; 0x26
    7a48:	strb.w	r8, [r5, #1446]	; 0x5a6
      _s = s;
    7a4c:	mov.w	r8, #37	; 0x25
    7a50:	strb.w	r8, [r5, #1447]	; 0x5a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a54:	mvn.w	r8, #45	; 0x2d
    7a58:	strb.w	r8, [r5, #1449]	; 0x5a9
    7a5c:	mvn.w	r8, #69	; 0x45
    7a60:	strb.w	r8, [r5, #1452]	; 0x5ac
      _s = s;
    7a64:	mvn.w	r8, #56	; 0x38
    7a68:	strb.w	r8, [r5, #1456]	; 0x5b0
      _b = b;
    7a6c:	mvn.w	r8, #15
    7a70:	strb.w	r8, [r5, #1463]	; 0x5b7
    7a74:	mvn.w	r8, #11
    7a78:	strb.w	r8, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7a7c:	mvn.w	r8, #75	; 0x4b
    7a80:	strb.w	r8, [r5, #1497]	; 0x5d9
      _s = s;
    7a84:	mvn.w	r8, #121	; 0x79
    7a88:	strb.w	r8, [r5, #1471]	; 0x5bf
      _b = b;
    7a8c:	mvn.w	r8, #11
    7a90:	strb.w	r8, [r5, #1472]	; 0x5c0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7a94:	mov.w	r8, #46	; 0x2e
    7a98:	strb.w	r8, [r5, #1474]	; 0x5c2
      _b = b;
    7a9c:	mvn.w	r8, #80	; 0x50
    7aa0:	strb.w	r8, [r5, #1481]	; 0x5c9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7aa4:	mvn.w	r8, #59	; 0x3b
    7aa8:	strb.w	r8, [r5, #1483]	; 0x5cb
      _b = b;
    7aac:	mvn.w	r8, #12
    7ab0:	strb.w	r8, [r5, #1484]	; 0x5cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ab4:	mvn.w	r8, #125	; 0x7d
    7ab8:	strb.w	r8, [r5, #1485]	; 0x5cd
    7abc:	mvn.w	r8, #101	; 0x65
    7ac0:	strb.w	r4, [r5, #1512]	; 0x5e8
      _s = s;
      _b = b;
    7ac4:	mvn.w	r4, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ac8:	strb.w	r8, [r5, #1488]	; 0x5d0
      _s = s;
      _b = b;
    7acc:	mvn.w	r8, #16
    7ad0:	strb.w	r4, [r5, #1514]	; 0x5ea
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ad4:	mov.w	r4, #95	; 0x5f
      _s = s;
      _b = b;
    7ad8:	strb.w	r8, [r5, #1499]	; 0x5db
    7adc:	mvn.w	r8, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ae0:	strb.w	r0, [r5, #1491]	; 0x5d3
      _s = s;
    7ae4:	movs	r0, #252	; 0xfc
      _b = b;
    7ae6:	strb.w	r8, [r5, #1478]	; 0x5c6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7aea:	mvn.w	r8, #114	; 0x72
    7aee:	strb.w	r4, [r5, #1515]	; 0x5eb
      _s = s;
    7af2:	mvn.w	r4, #84	; 0x54
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7af6:	strb.w	r8, [r5, #1479]	; 0x5c7
      _s = s;
    7afa:	mvn.w	r8, #102	; 0x66
    7afe:	strb.w	r1, [r5, #1489]	; 0x5d1
    7b02:	strb.w	r8, [r5, #1486]	; 0x5ce
      _b = b;
    7b06:	mvn.w	r8, #8
    7b0a:	strb.w	ip, [r5, #1490]	; 0x5d2
    7b0e:	strb.w	r8, [r5, #1487]	; 0x5cf
    7b12:	mvn.w	r8, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b16:	strb.w	fp, [r5, #1492]	; 0x5d4
      _b = b;
    7b1a:	strb.w	r8, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b1e:	mvn.w	r8, #77	; 0x4d
      _s = s;
      _b = b;
    7b22:	strb.w	ip, [r5, #1496]	; 0x5d8
    7b26:	mov.w	ip, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b2a:	strb.w	r8, [r5, #1494]	; 0x5d6
      _s = s;
    7b2e:	mvn.w	r8, #66	; 0x42
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b32:	strb.w	r3, [r5, #1500]	; 0x5dc
      _s = s;
    7b36:	strb.w	r8, [r5, #1495]	; 0x5d7
    7b3a:	mvn.w	r8, #106	; 0x6a
    7b3e:	strb.w	r6, [r5, #1477]	; 0x5c5
    7b42:	strb.w	r8, [r5, #1498]	; 0x5da
    7b46:	mov.w	r8, #113	; 0x71
    7b4a:	strb.w	r0, [r5, #1480]	; 0x5c8
    7b4e:	strb.w	r8, [r5, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b52:	mvn.w	r8, #100	; 0x64
    7b56:	strb.w	r2, [r5, #1482]	; 0x5ca
    7b5a:	strb.w	r8, [r5, #1503]	; 0x5df
      _s = s;
    7b5e:	mvn.w	r8, #94	; 0x5e
      _b = b;
    7b62:	strb.w	sl, [r5, #1502]	; 0x5de
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7b66:	strb.w	r8, [r5, #1504]	; 0x5e0
      _b = b;
    7b6a:	mvn.w	r8, #39	; 0x27
    7b6e:	strb.w	r8, [r5, #1505]	; 0x5e1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b72:	mov.w	r8, #103	; 0x67
    7b76:	strb.w	r8, [r5, #1506]	; 0x5e2
      _s = s;
    7b7a:	mov.w	r8, #95	; 0x5f
    7b7e:	strb.w	r8, [r5, #1507]	; 0x5e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b82:	strb.w	r8, [r5, #1509]	; 0x5e5
      _s = s;
    7b86:	mov.w	r8, #88	; 0x58
    7b8a:	strb.w	r8, [r5, #1510]	; 0x5e6
      _b = b;
    7b8e:	mvn.w	r8, #114	; 0x72
    7b92:	strb.w	r8, [r5, #1511]	; 0x5e7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b96:	mvn.w	r8, #34	; 0x22
      _s = s;
    7b9a:	strb.w	r4, [r5, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7b9e:	mov.w	r4, #113	; 0x71
    7ba2:	strb.w	r8, [r5, #1521]	; 0x5f1
      _s = s;
    7ba6:	mov.w	r8, #72	; 0x48
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7baa:	strb.w	r4, [r5, #1518]	; 0x5ee
      _s = s;
    7bae:	mvn.w	r4, #126	; 0x7e
    7bb2:	strb.w	r8, [r5, #1525]	; 0x5f5
      _b = b;
    7bb6:	ldrb.w	r8, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bba:	strb.w	r4, [r5, #1519]	; 0x5ef
      _b = b;
    7bbe:	mvn.w	r4, #127	; 0x7f
    7bc2:	strb.w	r8, [r5, #1526]	; 0x5f6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bc6:	mvn.w	r8, #65	; 0x41
      _s = s;
      _b = b;
    7bca:	strb.w	r4, [r5, #1520]	; 0x5f0
    7bce:	movs	r4, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bd0:	strb.w	r8, [r5, #1527]	; 0x5f7
      _s = s;
    7bd4:	mov.w	r8, #108	; 0x6c
      _b = b;
    7bd8:	strb.w	r1, [r5, #1523]	; 0x5f3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bdc:	mvn.w	r1, #96	; 0x60
      _s = s;
    7be0:	strb.w	r8, [r5, #1528]	; 0x5f8
      _b = b;
    7be4:	ldrb.w	r8, [sp, #4]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7be8:	strb.w	lr, [r5, #1522]	; 0x5f2
      _b = b;
    7bec:	mvn.w	lr, #22
    7bf0:	strb.w	r8, [r5, #1529]	; 0x5f9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7bf4:	mvn.w	r8, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7bf8:	strb.w	r1, [r5, #1530]	; 0x5fa
      _s = s;
    7bfc:	movs	r1, #109	; 0x6d
    7bfe:	strb.w	r8, [r5, #1531]	; 0x5fb
      _b = b;
    7c02:	ldrb.w	r8, [sp]
    7c06:	strb.w	ip, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c0a:	mov.w	ip, #187	; 0xbb
      _s = s;
      _b = b;
    7c0e:	strb.w	r8, [r5, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c12:	mvn.w	r8, #119	; 0x77
      _s = s;
      _b = b;
    7c16:	strb.w	r4, [r5, #1508]	; 0x5e4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c1a:	strb.w	r8, [r5, #1533]	; 0x5fd
      _s = s;
    7c1e:	mvn.w	r8, #85	; 0x55
      _b = b;
    7c22:	strb.w	lr, [r5, #1535]	; 0x5ff
    7c26:	mov.w	lr, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c2a:	strb.w	r8, [r5, #1534]	; 0x5fe
    7c2e:	mvn.w	r8, #58	; 0x3a
      _b = b;
    7c32:	strb.w	r7, [r5, #1544]	; 0x608
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c36:	mov.w	r7, #62	; 0x3e
    7c3a:	strb.w	r8, [r5, #1513]	; 0x5e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c3e:	strb.w	r8, [r5, #1524]	; 0x5f4
      _s = s;
      _b = b;
    7c42:	mvn.w	r8, #17
    7c46:	strb.w	r8, [r5, #1538]	; 0x602
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c4a:	mvn.w	r8, #56	; 0x38
    7c4e:	strb.w	r8, [r5, #1539]	; 0x603
      _s = s;
    7c52:	mvn.w	r8, #66	; 0x42
    7c56:	strb.w	r8, [r5, #1540]	; 0x604
      _b = b;
    7c5a:	mvn.w	r8, #16
    7c5e:	strb.w	r8, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c62:	ldrb.w	r8, [sp, #20]
    7c66:	strb.w	r8, [r5, #1542]	; 0x606
      _s = s;
    7c6a:	mvn.w	r8, #124	; 0x7c
    7c6e:	strb.w	r8, [r5, #1543]	; 0x607
    7c72:	strb.w	r3, [r5, #1546]	; 0x60a
      _b = b;
    7c76:	mvn.w	r3, #13
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7c7a:	strb.w	r7, [r5, #1555]	; 0x613
      _b = b;
    7c7e:	mvn.w	r7, #18
    7c82:	strb.w	r3, [r5, #1547]	; 0x60b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c86:	mvn.w	r3, #96	; 0x60
      _s = s;
      _b = b;
    7c8a:	strb.w	r7, [r5, #1568]	; 0x620
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c8e:	mvn.w	r7, #109	; 0x6d
    7c92:	strb.w	r3, [r5, #1548]	; 0x60c
      _s = s;
    7c96:	mov.w	r3, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7c9a:	strb.w	r7, [r5, #1569]	; 0x621
      _s = s;
      _b = b;
    7c9e:	mvn.w	r7, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ca2:	strb.w	r3, [r5, #1549]	; 0x60d
      _b = b;
    7ca6:	mvn.w	r3, #15
    7caa:	strb.w	r7, [r5, #1571]	; 0x623
    7cae:	mvn.w	r7, #5
    7cb2:	strb.w	r3, [r5, #1550]	; 0x60e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cb6:	mvn.w	r3, #118	; 0x76
      _s = s;
      _b = b;
    7cba:	strb.w	r7, [r5, #1574]	; 0x626
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cbe:	mov.w	r7, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cc2:	strb.w	r3, [r5, #1551]	; 0x60f
    7cc6:	mvn.w	r3, #108	; 0x6c
      _s = s;
    7cca:	strb.w	r6, [r5, #1552]	; 0x610
      _b = b;
    7cce:	movs	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cd0:	strb.w	r3, [r5, #1554]	; 0x612
      _s = s;
      _b = b;
    7cd4:	ldrb.w	r3, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7cd8:	strb.w	r7, [r5, #1576]	; 0x628
      _b = b;
    7cdc:	mvn.w	r7, #8
    7ce0:	strb.w	r3, [r5, #1556]	; 0x614
    7ce4:	mvn.w	r3, #85	; 0x55
    7ce8:	strb.w	sl, [r5, #1553]	; 0x611
    7cec:	strb.w	r3, [r5, #1559]	; 0x617
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7cf0:	mvn.w	r3, #121	; 0x79
    7cf4:	strb.w	r9, [r5, #1557]	; 0x615
    7cf8:	strb.w	r3, [r5, #1560]	; 0x618
      _s = s;
    7cfc:	mvn.w	r3, #83	; 0x53
    7d00:	strb.w	r0, [r5, #1558]	; 0x616
    7d04:	strb.w	r3, [r5, #1561]	; 0x619
    7d08:	mvn.w	r3, #38	; 0x26
      _b = b;
    7d0c:	strb.w	sl, [r5, #1562]	; 0x61a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d10:	strb.w	r3, [r5, #1564]	; 0x61c
      _b = b;
    7d14:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d18:	strb.w	r2, [r5, #1563]	; 0x61b
      _s = s;
      _b = b;
    7d1c:	strb.w	r3, [r5, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d20:	mvn.w	r3, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d24:	strb.w	fp, [r5, #1566]	; 0x61e
      _s = s;
    7d28:	strb.w	r3, [r5, #1567]	; 0x61f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d2c:	mvn.w	r3, #73	; 0x49
      _s = s;
    7d30:	strb.w	r1, [r5, #1537]	; 0x601
      _b = b;
    7d34:	movs	r1, #102	; 0x66
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d36:	strb.w	r3, [r5, #1536]	; 0x600
    7d3a:	mvn.w	r3, #63	; 0x3f
      _s = s;
    7d3e:	strb.w	r8, [r5, #1570]	; 0x622
    7d42:	mvn.w	r8, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d46:	strb.w	r3, [r5, #1545]	; 0x609
    7d4a:	movs	r3, #158	; 0x9e
      _s = s;
    7d4c:	strb.w	r4, [r5, #1573]	; 0x625
    7d50:	movs	r4, #115	; 0x73
      _b = b;
    7d52:	strb.w	r7, [r5, #1577]	; 0x629
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d56:	mvn.w	r7, #50	; 0x32
      _s = s;
      _b = b;
    7d5a:	strb.w	r6, [r5, #1595]	; 0x63b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d5e:	mvn.w	r6, #53	; 0x35
    7d62:	strb.w	r8, [r5, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d66:	mvn.w	r8, #124	; 0x7c
      _s = s;
    7d6a:	strb.w	r6, [r5, #1594]	; 0x63a
      _b = b;
    7d6e:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d72:	strb.w	r7, [r5, #1578]	; 0x62a
      _s = s;
    7d76:	mov.w	r7, #62	; 0x3e
      _b = b;
    7d7a:	strb.w	r6, [r5, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d7e:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d82:	strb.w	r8, [r5, #1590]	; 0x636
      _s = s;
      _b = b;
    7d86:	mvn.w	r8, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d8a:	strb.w	r6, [r5, #1585]	; 0x631
      _b = b;
    7d8e:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7d92:	strb.w	r7, [r5, #1579]	; 0x62b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d96:	mvn.w	r7, #77	; 0x4d
      _s = s;
      _b = b;
    7d9a:	strb.w	r6, [r5, #1601]	; 0x641
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7d9e:	mvn.w	r6, #95	; 0x5f
      _s = s;
      _b = b;
    7da2:	strb.w	r8, [r5, #1592]	; 0x638
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7da6:	mvn.w	r8, #124	; 0x7c
    7daa:	strb.w	r6, [r5, #1602]	; 0x642
      _s = s;
    7dae:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7db2:	strb.w	r7, [r5, #1581]	; 0x62d
      _s = s;
      _b = b;
    7db6:	mvn.w	r7, #34	; 0x22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dba:	strb.w	r8, [r5, #1593]	; 0x639
    7dbe:	mov.w	r8, #110	; 0x6e
      _s = s;
      _b = b;
    7dc2:	strb.w	r1, [r5, #1598]	; 0x63e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dc6:	mvn.w	r1, #96	; 0x60
      _s = s;
    7dca:	strb.w	r6, [r5, #1603]	; 0x643
      _b = b;
    7dce:	ldrb.w	r6, [sp]
    7dd2:	strb.w	r7, [r5, #1583]	; 0x62f
    7dd6:	movs	r7, #118	; 0x76
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7dd8:	strb.w	ip, [r5, #1572]	; 0x624
      _s = s;
    7ddc:	mov.w	ip, #176	; 0xb0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7de0:	strb.w	r8, [r5, #1587]	; 0x633
      _s = s;
      _b = b;
    7de4:	mvn.w	r8, #28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7de8:	strb.w	r3, [r5, #1599]	; 0x63f
    7dec:	mvn.w	r3, #53	; 0x35
      _s = s;
      _b = b;
    7df0:	strb.w	r6, [r5, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7df4:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7df8:	strb.w	r1, [r5, #1605]	; 0x645
      _s = s;
      _b = b;
    7dfc:	mvn.w	r1, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e00:	strb.w	r2, [r5, #1582]	; 0x62e
    7e04:	movs	r2, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e06:	strb.w	r9, [r5, #1584]	; 0x630
      _s = s;
    7e0a:	strb.w	sl, [r5, #1591]	; 0x637
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e0e:	strb.w	fp, [r5, #1596]	; 0x63c
      _s = s;
    7e12:	strb.w	r9, [r5, #1597]	; 0x63d
      _b = b;
    7e16:	strb.w	lr, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e1a:	mov.w	lr, #81	; 0x51
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e1e:	strb.w	r3, [r5, #1575]	; 0x627
      _s = s;
      _b = b;
    7e22:	movs	r3, #148	; 0x94
    7e24:	strb.w	r7, [r5, #1586]	; 0x632
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e28:	strb.w	ip, [r5, #1600]	; 0x640
    7e2c:	strb.w	r6, [r5, #1606]	; 0x646
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e30:	mvn.w	r6, #98	; 0x62
      _s = s;
      _b = b;
    7e34:	strb.w	r1, [r5, #1607]	; 0x647
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e38:	movs	r1, #208	; 0xd0
      _s = s;
      _b = b;
    7e3a:	strb.w	r8, [r5, #1610]	; 0x64a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e3e:	mvn.w	r8, #108	; 0x6c
      _s = s;
    7e42:	strb.w	r0, [r5, #1609]	; 0x649
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e46:	strb.w	r8, [r5, #1611]	; 0x64b
      _s = s;
    7e4a:	mvn.w	r8, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e4e:	strb.w	r6, [r5, #1608]	; 0x648
      _s = s;
      _b = b;
    7e52:	movs	r6, #168	; 0xa8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e54:	strb.w	r8, [r5, #1612]	; 0x64c
      _b = b;
    7e58:	ldrb.w	r8, [sp, #12]
    7e5c:	strb.w	sl, [r5, #1616]	; 0x650
    7e60:	strb.w	r8, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e64:	mvn.w	r8, #101	; 0x65
      _s = s;
    7e68:	strb.w	r9, [r5, #1618]	; 0x652
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e6c:	strb.w	r8, [r5, #1614]	; 0x64e
    7e70:	mvn.w	r8, #66	; 0x42
    7e74:	strb.w	r9, [r5, #1632]	; 0x660
    7e78:	strb.w	r8, [r5, #1617]	; 0x651
      _s = s;
      _b = b;
    7e7c:	mvn.w	r8, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e80:	strb.w	ip, [r5, #1633]	; 0x661
    7e84:	mov.w	ip, #215	; 0xd7
      _b = b;
    7e88:	strb.w	r8, [r5, #1619]	; 0x653
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e8c:	mvn.w	r8, #61	; 0x3d
      _s = s;
    7e90:	strb.w	r4, [r5, #1621]	; 0x655
    7e94:	movs	r4, #252	; 0xfc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7e96:	strb.w	r8, [r5, #1620]	; 0x654
      _s = s;
      _b = b;
    7e9a:	mvn.w	r8, #16
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7e9e:	strb.w	r2, [r5, #1630]	; 0x65e
      _b = b;
    7ea2:	strb.w	r8, [r5, #1622]	; 0x656
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ea6:	mvn.w	r8, #88	; 0x58
      _s = s;
      _b = b;
    7eaa:	strb.w	sl, [r5, #1634]	; 0x662
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eae:	strb.w	r8, [r5, #1623]	; 0x657
      _s = s;
    7eb2:	mvn.w	r8, #124	; 0x7c
    7eb6:	strb.w	r8, [r5, #1624]	; 0x658
      _b = b;
    7eba:	mvn.w	r8, #15
    7ebe:	strb.w	r8, [r5, #1625]	; 0x659
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ec2:	mvn.w	r8, #111	; 0x6f
    7ec6:	strb.w	r8, [r5, #1626]	; 0x65a
      _s = s;
    7eca:	mov.w	r8, #113	; 0x71
    7ece:	strb.w	r8, [r5, #1627]	; 0x65b
      _b = b;
    7ed2:	mvn.w	r8, #17
    7ed6:	strb.w	r8, [r5, #1628]	; 0x65c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7eda:	mvn.w	r8, #120	; 0x78
    7ede:	strb.w	r8, [r5, #1629]	; 0x65d
      _s = s;
      _b = b;
    7ee2:	ldrb.w	r8, [sp, #4]
    7ee6:	strb.w	r8, [r5, #1631]	; 0x65f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7eea:	mvn.w	r8, #116	; 0x74
    7eee:	strb.w	r8, [r5, #1615]	; 0x64f
      _b = b;
    7ef2:	mov.w	r8, #196	; 0xc4
    7ef6:	mov	r0, r8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7ef8:	mvn.w	r8, #114	; 0x72
    7efc:	strb.w	r8, [r5, #1635]	; 0x663
      _s = s;
    7f00:	mvn.w	r8, #88	; 0x58
    7f04:	strb.w	r8, [r5, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f08:	mov.w	r8, #94	; 0x5e
    7f0c:	strb.w	r8, [r5, #1638]	; 0x666
      _s = s;
    7f10:	mov.w	r8, #40	; 0x28
    7f14:	strb.w	r8, [r5, #1639]	; 0x667
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f18:	mov.w	r8, #122	; 0x7a
      _s = s;
    7f1c:	strb.w	lr, [r5, #1657]	; 0x679
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f20:	strb.w	r8, [r5, #1641]	; 0x669
      _s = s;
    7f24:	mov.w	r8, #116	; 0x74
    7f28:	strb.w	lr, [r5, #1663]	; 0x67f
    7f2c:	mov.w	lr, #91	; 0x5b
    7f30:	strb.w	r8, [r5, #1642]	; 0x66a
      _b = b;
    7f34:	mvn.w	r8, #65	; 0x41
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7f38:	strb.w	lr, [r5, #1666]	; 0x682
      _b = b;
    7f3c:	mvn.w	lr, #104	; 0x68
    7f40:	strb.w	r8, [r5, #1643]	; 0x66b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f44:	mvn.w	r8, #118	; 0x76
      _s = s;
      _b = b;
    7f48:	strb.w	lr, [r5, #1667]	; 0x683
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f4c:	mov.w	lr, #100	; 0x64
    7f50:	strb.w	r8, [r5, #1644]	; 0x66c
      _s = s;
    7f54:	mvn.w	r8, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f58:	strb.w	r7, [r5, #1668]	; 0x684
      _s = s;
    7f5c:	mvn.w	r7, #63	; 0x3f
    7f60:	strb.w	r8, [r5, #1645]	; 0x66d
      _b = b;
    7f64:	mvn.w	r8, #23
    7f68:	strb.w	r3, [r5, #1637]	; 0x665
    7f6c:	strb.w	r8, [r5, #1646]	; 0x66e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f70:	mvn.w	r8, #103	; 0x67
      _s = s;
      _b = b;
    7f74:	strb.w	r6, [r5, #1640]	; 0x668
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f78:	strb.w	r8, [r5, #1647]	; 0x66f
      _s = s;
      _b = b;
    7f7c:	mvn.w	r8, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f80:	strb.w	r1, [r5, #1656]	; 0x678
      _s = s;
      _b = b;
    7f84:	strb.w	r8, [r5, #1649]	; 0x671
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7f88:	mvn.w	r8, #71	; 0x47
    7f8c:	strb.w	lr, [r5, #1671]	; 0x687
    7f90:	mov.w	lr, #42	; 0x2a
    7f94:	strb.w	r8, [r5, #1650]	; 0x672
      _s = s;
    7f98:	mov.w	r8, #108	; 0x6c
    7f9c:	strb.w	r8, [r5, #1651]	; 0x673
      _b = b;
    7fa0:	mvn.w	r8, #6
    7fa4:	strb.w	r8, [r5, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fa8:	mvn.w	r8, #51	; 0x33
    7fac:	strb.w	r8, [r5, #1653]	; 0x675
      _s = s;
    7fb0:	mov.w	r8, #59	; 0x3b
    7fb4:	strb.w	r8, [r5, #1654]	; 0x676
      _b = b;
    7fb8:	mvn.w	r8, #6
    7fbc:	strb.w	r8, [r5, #1655]	; 0x677
    7fc0:	mvn.w	r8, #9
    7fc4:	strb.w	r8, [r5, #1658]	; 0x67a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fc8:	mvn.w	r8, #38	; 0x26
    7fcc:	strb.w	r8, [r5, #1659]	; 0x67b
      _s = s;
    7fd0:	mov.w	r8, #37	; 0x25
    7fd4:	strb.w	r8, [r5, #1660]	; 0x67c
      _b = b;
    7fd8:	mvn.w	r8, #11
    7fdc:	strb.w	r8, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7fe0:	mov.w	r8, #43	; 0x2b
    7fe4:	str.w	r8, [sp, #24]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    7fe8:	mvn.w	r8, #94	; 0x5e
    7fec:	strb.w	r8, [r5, #1662]	; 0x67e
      _s = s;
      _b = b;
    7ff0:	mvn.w	r8, #77	; 0x4d
    7ff4:	strb.w	r8, [r5, #1664]	; 0x680
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    7ff8:	mvn.w	r8, #93	; 0x5d
    7ffc:	strb.w	r8, [r5, #1648]	; 0x670
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8000:	mov.w	r8, #84	; 0x54
    8004:	strb.w	r8, [r5, #1665]	; 0x681
      _s = s;
    8008:	mvn.w	r8, #13
    800c:	strb.w	r7, [r5, #1669]	; 0x685
      _b = b;
    8010:	mvn.w	r7, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8014:	strb.w	r8, [r5, #1675]	; 0x68b
      _b = b;
    8018:	mvn.w	r8, #65	; 0x41
    801c:	strb.w	r7, [r5, #1670]	; 0x686
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8020:	mvn.w	r7, #65	; 0x41
      _b = b;
    8024:	strb.w	r8, [r5, #1679]	; 0x68f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8028:	mvn.w	r8, #101	; 0x65
      _s = s;
    802c:	str	r0, [sp, #32]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    802e:	strb.w	r8, [r5, #1680]	; 0x690
      _s = s;
    8032:	mvn.w	r8, #105	; 0x69
    8036:	strb.w	r0, [r5, #1699]	; 0x6a3
      _b = b;
    803a:	mov.w	r0, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    803e:	strb.w	r8, [r5, #1681]	; 0x691
      _b = b;
    8042:	mvn.w	r8, #31
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8046:	strb.w	r7, [r5, #1672]	; 0x688
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    804a:	movs	r7, #34	; 0x22
      _s = s;
      _b = b;
    804c:	strb.w	r8, [r5, #1682]	; 0x692
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8050:	mvn.w	r8, #115	; 0x73
    8054:	strb.w	fp, [r5, #1674]	; 0x68a
    8058:	strb.w	r8, [r5, #1683]	; 0x693
      _s = s;
    805c:	mov.w	r8, #75	; 0x4b
      _b = b;
    8060:	strb.w	r9, [r5, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8064:	strb.w	r8, [r5, #1684]	; 0x694
      _b = b;
    8068:	mvn.w	r8, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    806c:	strb.w	r3, [r5, #1677]	; 0x68d
      _s = s;
      _b = b;
    8070:	strb.w	r8, [r5, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8074:	mvn.w	r8, #121	; 0x79
    8078:	strb.w	r4, [r5, #1678]	; 0x68e
    807c:	strb.w	r8, [r5, #1687]	; 0x697
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8080:	mvn.w	r8, #96	; 0x60
    8084:	strb.w	r3, [r5, #1686]	; 0x696
    8088:	strb.w	r8, [r5, #1689]	; 0x699
      _s = s;
      _b = b;
    808c:	mvn.w	r8, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8090:	strb.w	r4, [r5, #1690]	; 0x69a
      _b = b;
    8094:	movs	r4, #219	; 0xdb
    8096:	strb.w	r8, [r5, #1691]	; 0x69b
    809a:	ldrb.w	r8, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    809e:	strb.w	fp, [r5, #1692]	; 0x69c
      _s = s;
      _b = b;
    80a2:	strb.w	r8, [r5, #1694]	; 0x69e
    80a6:	mvn.w	r8, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80aa:	strb.w	r1, [r5, #1693]	; 0x69d
      _b = b;
    80ae:	strb.w	r8, [r5, #1697]	; 0x6a1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80b2:	mvn.w	r8, #106	; 0x6a
    80b6:	strb.w	fp, [r5, #1695]	; 0x69f
    80ba:	strb.w	r8, [r5, #1698]	; 0x6a2
      _s = s;
      _b = b;
    80be:	mvn.w	r8, #32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80c2:	strb.w	ip, [r5, #1696]	; 0x6a0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80c6:	mov.w	ip, #1
      _s = s;
      _b = b;
    80ca:	strb.w	r8, [r5, #1688]	; 0x698
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80ce:	mvn.w	r8, #103	; 0x67
      _s = s;
      _b = b;
    80d2:	strb.w	r0, [r5, #1673]	; 0x689
    80d6:	strb.w	sl, [r5, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80da:	strb.w	r3, [r5, #1701]	; 0x6a5
    80de:	strb.w	r8, [r5, #1710]	; 0x6ae
      _s = s;
    80e2:	mov.w	r8, #58	; 0x3a
    80e6:	strb.w	r6, [r5, #1702]	; 0x6a6
      _b = b;
    80ea:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    80ee:	strb.w	r8, [r5, #1711]	; 0x6af
      _b = b;
    80f2:	mvn.w	r8, #28
    80f6:	strb.w	r6, [r5, #1706]	; 0x6aa
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    80fa:	mvn.w	r6, #115	; 0x73
      _s = s;
      _b = b;
    80fe:	strb.w	r8, [r5, #1712]	; 0x6b0
    8102:	mvn.w	r8, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8106:	strb.w	r6, [r5, #1707]	; 0x6ab
    810a:	mvn.w	r6, #22
      _s = s;
      _b = b;
    810e:	strb.w	r8, [r5, #1715]	; 0x6b3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8112:	mvn.w	r8, #12
    8116:	strb.w	r6, [r5, #1713]	; 0x6b1
      _s = s;
    811a:	mov.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    811e:	strb.w	r8, [r5, #1716]	; 0x6b4
      _s = s;
    8122:	mov.w	r8, #88	; 0x58
    8126:	strb.w	r6, [r5, #1732]	; 0x6c4
      _b = b;
    812a:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    812e:	strb.w	r8, [r5, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8132:	mov.w	r8, #59	; 0x3b
      _s = s;
    8136:	strb.w	r0, [r5, #1708]	; 0x6ac
      _b = b;
    813a:	mvn.w	r0, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    813e:	strb.w	r8, [r5, #1719]	; 0x6b7
      _s = s;
    8142:	mov.w	r8, #44	; 0x2c
      _b = b;
    8146:	strb.w	r6, [r5, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    814a:	mvn.w	r6, #45	; 0x2d
      _s = s;
    814e:	strb.w	r8, [r5, #1720]	; 0x6b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8152:	mov.w	r8, #125	; 0x7d
      _s = s;
      _b = b;
    8156:	strb.w	sl, [r5, #1703]	; 0x6a7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    815a:	strb.w	r8, [r5, #1722]	; 0x6ba
      _s = s;
    815e:	mov.w	r8, #79	; 0x4f
      _b = b;
    8162:	strb.w	r0, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8166:	movs	r0, #253	; 0xfd
    8168:	strb.w	r8, [r5, #1723]	; 0x6bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    816c:	mvn.w	r8, #121	; 0x79
      _s = s;
      _b = b;
    8170:	strb.w	r2, [r5, #1721]	; 0x6b9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8174:	strb.w	r8, [r5, #1725]	; 0x6bd
      _s = s;
    8178:	mov.w	r8, #95	; 0x5f
      _b = b;
    817c:	strb.w	r1, [r5, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8180:	strb.w	r8, [r5, #1726]	; 0x6be
      _b = b;
    8184:	mvn.w	r8, #9
    8188:	strb.w	r8, [r5, #1727]	; 0x6bf
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    818c:	mvn.w	r8, #66	; 0x42
    8190:	strb.w	r8, [r5, #1728]	; 0x6c0
      _s = s;
    8194:	mov.w	r8, #116	; 0x74
    8198:	strb.w	r8, [r5, #1729]	; 0x6c1
      _b = b;
    819c:	mvn.w	r8, #5
    81a0:	strb.w	r8, [r5, #1730]	; 0x6c2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81a4:	mvn.w	r8, #64	; 0x40
    81a8:	strb.w	r8, [r5, #1731]	; 0x6c3
      _s = s;
    81ac:	mov.w	r8, #61	; 0x3d
    81b0:	strb.w	r8, [r5, #1705]	; 0x6a9
    81b4:	mov.w	r8, #86	; 0x56
    81b8:	strb.w	r8, [r5, #1714]	; 0x6b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81bc:	mvn.w	r8, #117	; 0x75
    81c0:	strb.w	r8, [r5, #1704]	; 0x6a8
      _s = s;
      _b = b;
    81c4:	mov.w	r8, #43	; 0x2b
    81c8:	strb.w	r8, [r5, #1718]	; 0x6b6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81cc:	strb.w	r6, [r5, #1734]	; 0x6c6
      _s = s;
      _b = b;
    81d0:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    81d4:	strb.w	r2, [r5, #1735]	; 0x6c7
      _b = b;
    81d8:	strb.w	r6, [r5, #1736]	; 0x6c8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81dc:	mvn.w	r6, #50	; 0x32
    81e0:	strb.w	r2, [r5, #1755]	; 0x6db
    81e4:	strb.w	r6, [r5, #1737]	; 0x6c9
      _s = s;
    81e8:	mov.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81ec:	strb.w	lr, [r5, #1758]	; 0x6de
      _s = s;
    81f0:	mov.w	lr, #69	; 0x45
    81f4:	strb.w	r6, [r5, #1738]	; 0x6ca
      _b = b;
    81f8:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    81fc:	strb.w	r7, [r5, #1764]	; 0x6e4
    8200:	movs	r7, #239	; 0xef
      _s = s;
      _b = b;
    8202:	strb.w	r6, [r5, #1739]	; 0x6cb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8206:	mvn.w	r6, #94	; 0x5e
    820a:	strb.w	r6, [r5, #1740]	; 0x6cc
      _s = s;
    820e:	mov.w	r6, #117	; 0x75
    8212:	strb.w	r6, [r5, #1741]	; 0x6cd
      _b = b;
    8216:	mvn.w	r6, #28
    821a:	strb.w	r6, [r5, #1742]	; 0x6ce
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    821e:	mvn.w	r6, #121	; 0x79
    8222:	strb.w	r6, [r5, #1743]	; 0x6cf
      _s = s;
    8226:	mvn.w	r6, #12
    822a:	strb.w	r6, [r5, #1744]	; 0x6d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    822e:	mvn.w	r6, #118	; 0x76
    8232:	strb.w	r6, [r5, #1746]	; 0x6d2
      _s = s;
    8236:	ldrb.w	r6, [sp, #28]
    823a:	strb.w	r6, [r5, #1747]	; 0x6d3
      _b = b;
    823e:	mvn.w	r6, #46	; 0x2e
    8242:	strb.w	r6, [r5, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8246:	mvn.w	r6, #108	; 0x6c
    824a:	strb.w	r6, [r5, #1749]	; 0x6d5
      _s = s;
    824e:	mvn.w	r6, #43	; 0x2b
    8252:	strb.w	r6, [r5, #1750]	; 0x6d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8256:	mvn.w	r6, #122	; 0x7a
    825a:	strb.w	r6, [r5, #1752]	; 0x6d8
      _s = s;
    825e:	mvn.w	r6, #25
    8262:	strb.w	r6, [r5, #1753]	; 0x6d9
      _b = b;
    8266:	mvn.w	r6, #100	; 0x64
    826a:	strb.w	r6, [r5, #1754]	; 0x6da
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    826e:	mov.w	r6, #99	; 0x63
    8272:	strb.w	r6, [r5, #1756]	; 0x6dc
      _b = b;
    8276:	mvn.w	r6, #43	; 0x2b
    827a:	strb.w	r6, [r5, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    827e:	mvn.w	r6, #117	; 0x75
    8282:	strb.w	r6, [r5, #1759]	; 0x6df
      _b = b;
    8286:	mvn.w	r6, #39	; 0x27
    828a:	strb.w	r6, [r5, #1760]	; 0x6e0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    828e:	mov.w	r6, #33	; 0x21
    8292:	strb.w	r6, [r5, #1761]	; 0x6e1
      _s = s;
    8296:	mvn.w	r6, #84	; 0x54
    829a:	strb.w	r6, [r5, #1762]	; 0x6e2
      _b = b;
    829e:	ldrb.w	r6, [sp, #36]	; 0x24
    82a2:	strb.w	r6, [r5, #1763]	; 0x6e3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    82a6:	mov.w	r6, #91	; 0x5b
    82aa:	strb.w	r6, [r5, #1765]	; 0x6e5
      _b = b;
    82ae:	mov.w	r6, #89	; 0x59
    82b2:	strb.w	r6, [r5, #1751]	; 0x6d7
    82b6:	mvn.w	r6, #35	; 0x23
    82ba:	strb.w	r6, [r5, #1745]	; 0x6d1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82be:	mvn.w	r6, #102	; 0x66
      _s = s;
      _b = b;
    82c2:	strb.w	r1, [r5, #1766]	; 0x6e6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82c6:	movs	r1, #22
    82c8:	strb.w	r6, [r5, #1767]	; 0x6e7
      _s = s;
    82cc:	mvn.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82d0:	strb.w	r9, [r5, #1773]	; 0x6ed
    82d4:	mov.w	r9, #65	; 0x41
      _s = s;
    82d8:	strb.w	r6, [r5, #1768]	; 0x6e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82dc:	mvn.w	r6, #101	; 0x65
      _s = s;
    82e0:	strb.w	r2, [r5, #1777]	; 0x6f1
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82e4:	movs	r2, #26
    82e6:	strb.w	r6, [r5, #1770]	; 0x6ea
      _s = s;
    82ea:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    82ee:	strb.w	ip, [r5, #1797]	; 0x705
    82f2:	mov.w	ip, #101	; 0x65
      _s = s;
    82f6:	strb.w	r6, [r5, #1774]	; 0x6ee
      _b = b;
    82fa:	mvn.w	r6, #23
    82fe:	strb.w	r6, [r5, #1775]	; 0x6ef
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8302:	mvn.w	r6, #116	; 0x74
    8306:	strb.w	r6, [r5, #1776]	; 0x6f0
      _s = s;
      _b = b;
    830a:	ldrb.w	r6, [sp, #12]
    830e:	strb.w	r6, [r5, #1778]	; 0x6f2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8312:	mvn.w	r6, #124	; 0x7c
    8316:	strb.w	r6, [r5, #1779]	; 0x6f3
      _s = s;
    831a:	mov.w	r6, #24
    831e:	strb.w	r6, [r5, #1780]	; 0x6f4
      _b = b;
    8322:	ldrb.w	r6, [sp, #16]
    8326:	strb.w	r6, [r5, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    832a:	mvn.w	r6, #114	; 0x72
    832e:	strb.w	r6, [r5, #1782]	; 0x6f6
      _s = s;
      _b = b;
    8332:	mvn.w	r6, #25
    8336:	strb.w	r6, [r5, #1784]	; 0x6f8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    833a:	mvn.w	r6, #43	; 0x2b
    833e:	strb.w	r6, [r5, #1785]	; 0x6f9
      _s = s;
    8342:	mov.w	r6, #14
    8346:	strb.w	r6, [r5, #1786]	; 0x6fa
      _b = b;
    834a:	mvn.w	r6, #41	; 0x29
    834e:	strb.w	r6, [r5, #1787]	; 0x6fb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8352:	ldrb.w	r6, [sp, #4]
    8356:	strb.w	r6, [r5, #1788]	; 0x6fc
      _s = s;
    835a:	mvn.w	r6, #119	; 0x77
    835e:	strb.w	r6, [r5, #1789]	; 0x6fd
      _b = b;
    8362:	mvn.w	r6, #38	; 0x26
    8366:	strb.w	r6, [r5, #1790]	; 0x6fe
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    836a:	mvn.w	r6, #56	; 0x38
    836e:	strb.w	r6, [r5, #1792]	; 0x700
      _b = b;
    8372:	ldrb.w	r6, [sp, #32]
    8376:	strb.w	r6, [r5, #1793]	; 0x701
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    837a:	mvn.w	r6, #8
    837e:	strb.w	r6, [r5, #1794]	; 0x702
      _s = s;
    8382:	mov.w	r6, #94	; 0x5e
    8386:	strb.w	r6, [r5, #1795]	; 0x703
      _b = b;
    838a:	mov.w	r6, #46	; 0x2e
    838e:	strb.w	r6, [r5, #1796]	; 0x704
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8392:	mov.w	r6, #83	; 0x53
    8396:	strb.w	r6, [r5, #1783]	; 0x6f7
    839a:	mov.w	r6, #90	; 0x5a
    839e:	strb.w	r6, [r5, #1798]	; 0x706
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83a2:	mvn.w	r6, #10
      _s = s;
      _b = b;
    83a6:	strb.w	r4, [r5, #1769]	; 0x6e9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83aa:	strb.w	r6, [r5, #1791]	; 0x6ff
      _s = s;
      _b = b;
    83ae:	mov.w	r6, #62	; 0x3e
    83b2:	strb.w	r4, [r5, #1772]	; 0x6ec
    83b6:	strb.w	r6, [r5, #1799]	; 0x707
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    83ba:	mov.w	r6, #95	; 0x5f
    83be:	strb.w	r0, [r5, #1771]	; 0x6eb
    83c2:	strb.w	r6, [r5, #1801]	; 0x709
      _b = b;
    83c6:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83ca:	strb.w	r3, [r5, #1800]	; 0x708
    83ce:	movs	r3, #224	; 0xe0
      _s = s;
      _b = b;
    83d0:	strb.w	r6, [r5, #1802]	; 0x70a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83d4:	mvn.w	r6, #119	; 0x77
      _s = s;
      _b = b;
    83d8:	strb.w	sl, [r5, #1808]	; 0x710
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83dc:	strb.w	r6, [r5, #1803]	; 0x70b
      _s = s;
    83e0:	mvn.w	r6, #69	; 0x45
    83e4:	strb.w	r8, [r5, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83e8:	mov.w	r8, #60	; 0x3c
      _s = s;
    83ec:	strb.w	r6, [r5, #1804]	; 0x70c
      _b = b;
    83f0:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83f4:	strb.w	fp, [r5, #1818]	; 0x71a
      _s = s;
      _b = b;
    83f8:	strb.w	r6, [r5, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    83fc:	mvn.w	r6, #111	; 0x6f
    8400:	strb.w	r6, [r5, #1806]	; 0x70e
      _s = s;
    8404:	mov.w	r6, #95	; 0x5f
    8408:	strb.w	r6, [r5, #1807]	; 0x70f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    840c:	mvn.w	r6, #103	; 0x67
    8410:	strb.w	r6, [r5, #1809]	; 0x711
      _s = s;
      _b = b;
    8414:	mvn.w	r6, #8
    8418:	strb.w	r6, [r5, #1811]	; 0x713
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    841c:	ldrb.w	r6, [sp, #20]
    8420:	strb.w	r6, [r5, #1812]	; 0x714
      _s = s;
      _b = b;
    8424:	mvn.w	r6, #7
    8428:	strb.w	r6, [r5, #1814]	; 0x716
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    842c:	mvn.w	r6, #58	; 0x3a
    8430:	strb.w	r6, [r5, #1815]	; 0x717
      _s = s;
    8434:	mov.w	r6, #92	; 0x5c
    8438:	strb.w	r6, [r5, #1816]	; 0x718
      _b = b;
    843c:	mvn.w	r6, #8
    8440:	strb.w	r6, [r5, #1817]	; 0x719
    8444:	ldrb.w	r6, [sp]
    8448:	strb.w	r6, [r5, #1820]	; 0x71c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    844c:	mvn.w	r6, #117	; 0x75
    8450:	strb.w	r6, [r5, #1821]	; 0x71d
      _s = s;
    8454:	mvn.w	r6, #7
    8458:	strb.w	r6, [r5, #1822]	; 0x71e
      _b = b;
    845c:	mvn.w	r6, #71	; 0x47
    8460:	strb.w	r6, [r5, #1823]	; 0x71f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8464:	mvn.w	r6, #109	; 0x6d
    8468:	strb.w	r6, [r5, #1824]	; 0x720
      _s = s;
    846c:	ldrb.w	r6, [sp, #8]
    8470:	strb.w	r6, [r5, #1825]	; 0x721
      _b = b;
    8474:	mvn.w	r6, #77	; 0x4d
    8478:	strb.w	r6, [r5, #1826]	; 0x722
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    847c:	mvn.w	r6, #121	; 0x79
      _s = s;
    8480:	strb.w	lr, [r5, #1810]	; 0x712
    8484:	mov.w	lr, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8488:	strb.w	r6, [r5, #1827]	; 0x723
      _s = s;
    848c:	mvn.w	r6, #6
    8490:	strb.w	lr, [r5, #1819]	; 0x71b
      _b = b;
    8494:	mvn.w	lr, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8498:	strb.w	r6, [r5, #1828]	; 0x724
      _b = b;
    849c:	mvn.w	r6, #120	; 0x78
    84a0:	strb.w	lr, [r5, #1832]	; 0x728
    84a4:	ldrb.w	lr, [sp, #36]	; 0x24
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84a8:	strb.w	r8, [r5, #1830]	; 0x726
      _s = s;
    84ac:	mov.w	r8, #124	; 0x7c
      _b = b;
    84b0:	strb.w	lr, [r5, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    84b4:	mov.w	lr, #37	; 0x25
    84b8:	strb.w	r4, [r5, #1848]	; 0x738
    84bc:	strb.w	lr, [r5, #1833]	; 0x729
      _s = s;
    84c0:	ldrb.w	lr, [sp, #8]
      _b = b;
    84c4:	ldr	r4, [sp, #0]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84c6:	strb.w	lr, [r5, #1834]	; 0x72a
    84ca:	mvn.w	lr, #25
      _b = b;
    84ce:	strb.w	r6, [r5, #1829]	; 0x725
    84d2:	movs	r6, #189	; 0xbd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84d4:	strb.w	lr, [r5, #1837]	; 0x72d
      _b = b;
    84d8:	mvn.w	lr, #38	; 0x26
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84dc:	strb.w	r8, [r5, #1831]	; 0x727
    84e0:	mov.w	r8, #105	; 0x69
      _b = b;
    84e4:	strb.w	lr, [r5, #1838]	; 0x72e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84e8:	mvn.w	lr, #71	; 0x47
      _b = b;
    84ec:	strb.w	r4, [r5, #1859]	; 0x743
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84f0:	strb.w	lr, [r5, #1843]	; 0x733
      _b = b;
    84f4:	ldrb.w	lr, [sp, #16]
    84f8:	strb.w	lr, [r5, #1847]	; 0x737
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    84fc:	mov.w	lr, #62	; 0x3e
    8500:	strb.w	lr, [r5, #1849]	; 0x739
      _b = b;
    8504:	mvn.w	lr, #43	; 0x2b
    8508:	strb.w	lr, [r5, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    850c:	mov.w	lr, #24
    8510:	strb.w	lr, [r5, #1855]	; 0x73f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8514:	mvn.w	lr, #15
    8518:	strb.w	lr, [r5, #1860]	; 0x744
      _s = s;
      _b = b;
    851c:	mvn.w	lr, #35	; 0x23
    8520:	strb.w	lr, [r5, #1862]	; 0x746
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8524:	ldrb.w	lr, [sp, #12]
    8528:	strb.w	lr, [r5, #1863]	; 0x747
      _s = s;
    852c:	ldrb.w	lr, [sp, #8]
    8530:	strb.w	lr, [r5, #1864]	; 0x748
      _b = b;
    8534:	mvn.w	lr, #33	; 0x21
    8538:	strb.w	lr, [r5, #1835]	; 0x72b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    853c:	mov.w	lr, #31
    8540:	strb.w	lr, [r5, #1836]	; 0x72c
      _s = s;
    8544:	mvn.w	lr, #51	; 0x33
    8548:	strb.w	lr, [r5, #1840]	; 0x730
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    854c:	mov.w	lr, #13
      _s = s;
    8550:	strb.w	fp, [r5, #1888]	; 0x760
    8554:	mov.w	fp, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8558:	strb.w	lr, [r5, #1845]	; 0x735
      _s = s;
    855c:	mov.w	lr, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8560:	strb.w	r1, [r5, #1842]	; 0x732
      _s = s;
    8564:	strb.w	lr, [r5, #1846]	; 0x736
      _b = b;
    8568:	mvn.w	lr, #87	; 0x57
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    856c:	strb.w	r1, [r5, #1872]	; 0x750
      _s = s;
      _b = b;
    8570:	strb.w	lr, [r5, #1850]	; 0x73a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8574:	mov.w	lr, #56	; 0x38
      _b = b;
    8578:	ldr	r1, [sp, #20]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    857a:	strb.w	lr, [r5, #1852]	; 0x73c
    857e:	mvn.w	lr, #127	; 0x7f
    8582:	strb.w	fp, [r5, #1894]	; 0x766
      _b = b;
    8586:	mvn.w	fp, #23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    858a:	strb.w	lr, [r5, #1858]	; 0x742
    858e:	mov.w	lr, #114	; 0x72
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8592:	strb.w	r2, [r5, #1839]	; 0x72f
      _s = s;
    8596:	strb.w	lr, [r5, #1861]	; 0x745
      _b = b;
    859a:	mvn.w	lr, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    859e:	strb.w	r7, [r5, #1851]	; 0x73b
      _s = s;
      _b = b;
    85a2:	strb.w	lr, [r5, #1841]	; 0x731
    85a6:	strb.w	lr, [r5, #1856]	; 0x740
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85aa:	mvn.w	lr, #13
      _s = s;
    85ae:	strb.w	r0, [r5, #1867]	; 0x74b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85b2:	strb.w	lr, [r5, #1854]	; 0x73e
    85b6:	mvn.w	lr, #18
    85ba:	strb.w	r4, [r5, #1869]	; 0x74d
      _s = s;
    85be:	mov.w	r4, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85c2:	strb.w	lr, [r5, #1857]	; 0x741
      _s = s;
      _b = b;
    85c6:	mvn.w	lr, #35	; 0x23
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    85ca:	strb.w	r0, [r5, #1870]	; 0x74e
      _b = b;
    85ce:	strb.w	lr, [r5, #1865]	; 0x749
    85d2:	ldrb.w	lr, [sp, #16]
    85d6:	strb.w	r1, [r5, #1886]	; 0x75e
    85da:	strb.w	lr, [r5, #1868]	; 0x74c
    85de:	ldrb.w	lr, [sp, #4]
    85e2:	strb.w	r1, [r5, #1889]	; 0x761
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    85e6:	movs	r1, #49	; 0x31
      _s = s;
      _b = b;
    85e8:	strb.w	lr, [r5, #1871]	; 0x74f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    85ec:	ldrb.w	lr, [sp, #24]
    85f0:	strb.w	lr, [r5, #1873]	; 0x751
    85f4:	mov.w	lr, #41	; 0x29
    85f8:	strb.w	lr, [r5, #1879]	; 0x757
      _b = b;
    85fc:	ldrb.w	lr, [sp, #12]
    8600:	strb.w	lr, [r5, #1883]	; 0x75b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8604:	mvn.w	lr, #106	; 0x6a
      _s = s;
      _b = b;
    8608:	strb.w	fp, [r5, #1895]	; 0x767
    860c:	mov.w	fp, #112	; 0x70
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8610:	strb.w	lr, [r5, #1893]	; 0x765
    8614:	mvn.w	lr, #115	; 0x73
      _s = s;
      _b = b;
    8618:	strb.w	fp, [r5, #1874]	; 0x752
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    861c:	mov.w	fp, #51	; 0x33
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8620:	strb.w	lr, [r5, #1896]	; 0x768
    8624:	mov.w	lr, #32
      _s = s;
    8628:	strb.w	fp, [r5, #1876]	; 0x754
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    862c:	mov.w	fp, #40	; 0x28
    8630:	strb.w	lr, [r5, #1875]	; 0x753
      _s = s;
    8634:	mvn.w	lr, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8638:	strb.w	fp, [r5, #1878]	; 0x756
      _s = s;
      _b = b;
    863c:	mvn.w	fp, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8640:	strb.w	lr, [r5, #1897]	; 0x769
      _b = b;
    8644:	mvn.w	lr, #53	; 0x35
    8648:	strb.w	fp, [r5, #1880]	; 0x758
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    864c:	mov.w	fp, #113	; 0x71
      _s = s;
      _b = b;
    8650:	strb.w	lr, [r5, #1898]	; 0x76a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8654:	mvn.w	lr, #5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8658:	strb.w	fp, [r5, #1881]	; 0x759
      _s = s;
    865c:	mov.w	fp, #106	; 0x6a
    8660:	strb.w	lr, [r5, #1900]	; 0x76c
      _b = b;
    8664:	mvn.w	lr, #69	; 0x45
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8668:	strb.w	r9, [r5, #1884]	; 0x75c
      _s = s;
    866c:	mov.w	r9, #236	; 0xec
      _b = b;
    8670:	strb.w	lr, [r5, #1904]	; 0x770
    8674:	mvn.w	lr, #57	; 0x39
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8678:	strb.w	ip, [r5, #1887]	; 0x75f
      _s = s;
      _b = b;
    867c:	strb.w	lr, [r5, #1907]	; 0x773
    8680:	mvn.w	lr, #45	; 0x2d
    8684:	ldr.w	ip, [sp]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8688:	strb.w	r3, [r5, #1866]	; 0x74a
      _s = s;
      _b = b;
    868c:	strb.w	r3, [r5, #1892]	; 0x764
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8690:	movs	r3, #252	; 0xfc
      _b = b;
    8692:	strb.w	lr, [r5, #1913]	; 0x779
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8696:	mvn.w	lr, #58	; 0x3a
    869a:	strb.w	fp, [r5, #1882]	; 0x75a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    869e:	mov.w	fp, #30
      _s = s;
    86a2:	strb.w	r4, [r5, #1891]	; 0x763
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86a6:	mov	r4, r5
      _s = s;
      _b = b;
    86a8:	strb.w	r6, [r5, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    86ac:	strb.w	r8, [r5, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86b0:	strb.w	r8, [r5, #1890]	; 0x762
      _s = s;
    86b4:	strb.w	r9, [r5, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86b8:	strb.w	r2, [r5, #1911]	; 0x777
      _s = s;
    86bc:	strb.w	r3, [r5, #1912]	; 0x778
      _b = b;
    86c0:	strb.w	ip, [r5, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86c4:	strb.w	r2, [r5, #1917]	; 0x77d
      _s = s;
      _b = b;
    86c8:	strb.w	ip, [r5, #1919]	; 0x77f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86cc:	strb.w	r2, [r5, #1920]	; 0x780
      _s = s;
    86d0:	strb.w	lr, [r5, #1915]	; 0x77b
    86d4:	ldrb.w	lr, [sp, #20]
    86d8:	strb.w	r7, [r5, #1930]	; 0x78a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86dc:	mvn.w	r7, #108	; 0x6c
    86e0:	strb.w	fp, [r5, #1914]	; 0x77a
      _s = s;
    86e4:	mvn.w	fp, #83	; 0x53
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    86e8:	strb.w	r7, [r5, #1899]	; 0x76b
      _s = s;
      _b = b;
    86ec:	mvn.w	r7, #39	; 0x27
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    86f0:	strb.w	fp, [r5, #1918]	; 0x77e
    86f4:	mov.w	fp, #98	; 0x62
      _b = b;
    86f8:	strb.w	r7, [r5, #1910]	; 0x776
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    86fc:	mvn.w	r7, #122	; 0x7a
    8700:	strb.w	fp, [r5, #1927]	; 0x787
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8704:	mov.w	fp, #35	; 0x23
      _s = s;
    8708:	strb.w	r7, [r5, #1924]	; 0x784
      _b = b;
    870c:	mvn.w	r7, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8710:	strb.w	fp, [r5, #1908]	; 0x774
    8714:	mov.w	fp, #10
      _s = s;
      _b = b;
    8718:	strb.w	r7, [r5, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    871c:	mvn.w	r7, #112	; 0x70
      _s = s;
    8720:	strb.w	lr, [r5, #1921]	; 0x781
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8724:	strb.w	r7, [r5, #1902]	; 0x76e
      _s = s;
    8728:	mvn.w	r7, #73	; 0x49
      _b = b;
    872c:	ldr.w	lr, [sp, #16]
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8730:	strb.w	fp, [r5, #1926]	; 0x786
      _s = s;
      _b = b;
    8734:	mvn.w	fp, #46	; 0x2e
    8738:	strb.w	lr, [r5, #1922]	; 0x782
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    873c:	strb.w	r2, [r5, #1923]	; 0x783
      _s = s;
      _b = b;
    8740:	strb.w	lr, [r5, #1928]	; 0x788
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8744:	mov.w	lr, #66	; 0x42
    8748:	ldr	r2, [sp, #4]
    874a:	strb.w	r7, [r5, #1903]	; 0x76f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    874e:	mov.w	r7, #67	; 0x43
      _s = s;
      _b = b;
    8752:	strb.w	fp, [r5, #1931]	; 0x78b
    8756:	ldrb.w	fp, [sp, #32]
    875a:	strb.w	r9, [r5, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    875e:	mov.w	r9, #229	; 0xe5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8762:	strb.w	sl, [r5, #1929]	; 0x789
    8766:	strb.w	r7, [r5, #1905]	; 0x771
      _s = s;
    876a:	mov	r7, r0
    876c:	strb.w	lr, [r5, #1906]	; 0x772
      _b = b;
    8770:	mov.w	lr, #230	; 0xe6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8774:	strb.w	r3, [r5, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8778:	strb.w	sl, [r5, #1935]	; 0x78f
      _s = s;
    877c:	strb.w	r2, [r5, #1936]	; 0x790
      _b = b;
    8780:	strb.w	fp, [r5, #1937]	; 0x791
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8784:	strb.w	sl, [r5, #1939]	; 0x793
      _b = b;
    8788:	mvn.w	sl, #10
    878c:	strb.w	fp, [r5, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8790:	mov	fp, r3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8792:	strb.w	ip, [r5, #1938]	; 0x792
    8796:	ldrb.w	ip, [sp, #12]
      _s = s;
      _b = b;
    879a:	strb.w	r2, [r5, #1949]	; 0x79d
    879e:	mvn.w	r2, #4
    87a2:	strb.w	r6, [r5, #1943]	; 0x797
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87a6:	mvn.w	r6, #28
      _s = s;
      _b = b;
    87aa:	strb.w	r2, [r5, #1952]	; 0x7a0
    87ae:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87b2:	strb.w	r6, [r5, #1944]	; 0x798
      _s = s;
      _b = b;
    87b6:	mvn.w	r6, #61	; 0x3d
    87ba:	strb.w	r2, [r5, #1955]	; 0x7a3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87be:	mov.w	r2, #37	; 0x25
      _s = s;
      _b = b;
    87c2:	strb.w	r6, [r5, #1946]	; 0x79a
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87c6:	strb.w	r2, [r5, #1956]	; 0x7a4
      _s = s;
    87ca:	mov.w	r2, #50	; 0x32
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87ce:	ldrb.w	r6, [sp, #36]	; 0x24
      _s = s;
    87d2:	strb.w	r2, [r5, #1957]	; 0x7a5
    87d6:	mov.w	r2, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87da:	strb.w	r1, [r5, #1959]	; 0x7a7
      _s = s;
    87de:	strb.w	r2, [r5, #1960]	; 0x7a8
      _b = b;
    87e2:	mvn.w	r2, #9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    87e6:	ldrb.w	r1, [sp, #20]
      _b = b;
    87ea:	strb.w	r2, [r5, #1961]	; 0x7a9
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    87ee:	ldrb.w	r2, [sp, #24]
    87f2:	strb.w	ip, [r5, #1941]	; 0x795
    87f6:	mov.w	ip, #243	; 0xf3
    87fa:	strb.w	r2, [r5, #1962]	; 0x7aa
    87fe:	mov.w	r2, #33	; 0x21
      _s = s;
    8802:	strb.w	r0, [r5, #1942]	; 0x796
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8806:	strb.w	r2, [r5, #1950]	; 0x79e
      _s = s;
      _b = b;
    880a:	mvn.w	r2, #82	; 0x52
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    880e:	strb.w	r0, [r5, #1945]	; 0x799
      _b = b;
    8812:	strb.w	r2, [r5, #1934]	; 0x78e
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8816:	mov.w	r2, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    881a:	strb.w	r6, [r5, #1947]	; 0x79b
      _s = s;
    881e:	movs	r6, #226	; 0xe2
    8820:	strb.w	r2, [r5, #1951]	; 0x79f
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8824:	mov.w	r2, #38	; 0x26
      _s = s;
    8828:	strb.w	r0, [r5, #1948]	; 0x79c
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    882c:	strb.w	r2, [r5, #1953]	; 0x7a1
      _s = s;
    8830:	mov.w	r2, #63	; 0x3f
      _b = b;
    8834:	strb.w	r3, [r5, #1958]	; 0x7a6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8838:	strb.w	r2, [r5, #1954]	; 0x7a2
    883c:	mvn.w	r2, #60	; 0x3c
    8840:	strb.w	r3, [r5, #1966]	; 0x7ae
// Pin layouts on the teensy 4
//First: 1,0,24,25, 19,18,14,15,17,16,22,23,20,21,26,27
//Second: 10,12,11,13,6,9,32,8,7
//Third: 37, 36, 35, 34, 39, 38, 28, 31, 30

Adafruit_NeoPixel screen_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    8844:	movs	r3, #82	; 0x52
    8846:	strb.w	r2, [r5, #1963]	; 0x7ab
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    884a:	mvn.w	r2, #14
    884e:	ldr	r0, [pc, #860]	; (8bac <_GLOBAL__sub_I_nextTime1+0x7404>)
    8850:	strb.w	r2, [r5, #1932]	; 0x78c
      _s = s;
      _b = b;
    8854:	mvn.w	r2, #10
    8858:	strb.w	r2, [r5, #1964]	; 0x7ac
    885c:	mvn.w	r2, #14
    8860:	strb.w	r2, [r5, #1967]	; 0x7af
    8864:	movs	r2, #3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8866:	strb.w	r1, [r5, #1969]	; 0x7b1
    886a:	mov.w	r1, #676	; 0x2a4
    886e:	strb.w	fp, [r5, #1978]	; 0x7ba
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8872:	mov.w	fp, #48	; 0x30
      _s = s;
    8876:	strb.w	r8, [r5, #1972]	; 0x7b4
      _b = b;
    887a:	mvn.w	r8, #18
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    887e:	strb.w	fp, [r5, #1968]	; 0x7b0
    8882:	mov.w	fp, #52	; 0x34
      _s = s;
      _b = b;
    8886:	strb.w	r8, [r5, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    888a:	mvn.w	r8, #102	; 0x66
    888e:	strb.w	fp, [r5, #1971]	; 0x7b3
    8892:	mvn.w	fp, #104	; 0x68
    8896:	strb.w	r8, [r5, #1977]	; 0x7b9
      _s = s;
      _b = b;
    889a:	mvn.w	r8, #40	; 0x28
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    889e:	strb.w	fp, [r5, #1974]	; 0x7b6
      _s = s;
    88a2:	mvn.w	fp, #105	; 0x69
      _b = b;
    88a6:	strb.w	r8, [r5, #1979]	; 0x7bb
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88aa:	mov.w	r8, #53	; 0x35
      _s = s;
    88ae:	strb.w	fp, [r5, #1975]	; 0x7b7
      _b = b;
    88b2:	mvn.w	fp, #37	; 0x25
    88b6:	strb.w	sl, [r5, #1970]	; 0x7b2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88ba:	strb.w	r8, [r5, #1965]	; 0x7ad
      _s = s;
      _b = b;
    88be:	strb.w	fp, [r5, #1976]	; 0x7b8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88c2:	mov.w	r5, #32
      _s = s;
      _b = b;
    88c6:	strb.w	lr, [r4, #1994]	; 0x7ca
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88ca:	strb.w	r5, [r4, #1986]	; 0x7c2
    88ce:	mov.w	r5, #69	; 0x45
      _s = s;
      _b = b;
    88d2:	strb.w	lr, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    88d6:	strb.w	r5, [r4, #1980]	; 0x7bc
      _s = s;
    88da:	mov.w	r5, #43	; 0x2b
    88de:	strb.w	r9, [r4, #1987]	; 0x7c3
    88e2:	strb.w	r5, [r4, #1981]	; 0x7bd
      _b = b;
    88e6:	mvn.w	r5, #52	; 0x34
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    88ea:	strb.w	r7, [r4, #1993]	; 0x7c9
      _b = b;
    88ee:	strb.w	r5, [r4, #1982]	; 0x7be
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    88f2:	mvn.w	r5, #68	; 0x44
    88f6:	ldr.w	sl, [pc, #732]	; 8bd4 <_GLOBAL__sub_I_nextTime1+0x742c>
    88fa:	strb.w	r5, [r4, #1984]	; 0x7c0
    88fe:	mvn.w	r5, #3
Adafruit_NeoPixel screen_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8902:	ldr.w	r8, [pc, #724]	; 8bd8 <_GLOBAL__sub_I_nextTime1+0x7430>
    8906:	strb.w	r5, [r4, #1990]	; 0x7c6
    890a:	mvn.w	r5, #6
    890e:	strb.w	r5, [r4, #1996]	; 0x7cc
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8912:	mov.w	r5, #33	; 0x21
    8916:	strb.w	r5, [r4, #1983]	; 0x7bf
    891a:	strb.w	r5, [r4, #1989]	; 0x7c5
      _s = s;
      _b = b;
    891e:	mvn.w	r5, #21
    8922:	strb.w	r5, [r4, #1985]	; 0x7c1
    8926:	mvn.w	r5, #27
    892a:	strb.w	r5, [r4, #1988]	; 0x7c4
    892e:	strb.w	r5, [r4, #1991]	; 0x7c7
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8932:	mov.w	r5, #37	; 0x25
    8936:	strb.w	r5, [r4, #1992]	; 0x7c8
    893a:	strb.w	r5, [r4, #1995]	; 0x7cb
    893e:	mov.w	r5, #35	; 0x23
    8942:	strb.w	r5, [r4, #1998]	; 0x7ce
    8946:	mov.w	r5, #32
    894a:	strb.w	r5, [r4, #2001]	; 0x7d1
      _s = s;
      _b = b;
    894e:	mvn.w	r5, #21
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8952:	strb.w	fp, [r4, #2002]	; 0x7d2
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8956:	mov.w	fp, #2
      _b = b;
    895a:	strb.w	r5, [r4, #2006]	; 0x7d6
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    895e:	mvn.w	r5, #14
    8962:	strb.w	lr, [r4, #2022]	; 0x7e6
    8966:	strb.w	r5, [r4, #2013]	; 0x7dd
      _s = s;
    896a:	mvn.w	r5, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    896e:	strb.w	ip, [r4, #2007]	; 0x7d7
      _s = s;
    8972:	strb.w	r5, [r4, #2017]	; 0x7e1
      _b = b;
    8976:	mvn.w	r5, #13
    897a:	strb.w	ip, [r4, #2009]	; 0x7d9
    897e:	strb.w	r5, [r4, #2027]	; 0x7eb
    8982:	mvn.w	r5, #22
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8986:	strb.w	r7, [r4, #2020]	; 0x7e4
      _b = b;
    898a:	strb.w	r5, [r4, #2000]	; 0x7d0
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    898e:	mov.w	r5, #12
      _s = s;
    8992:	strb.w	r7, [r4, #2023]	; 0x7e7
    8996:	movs	r7, #4
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    8998:	strb.w	r5, [r4, #2004]	; 0x7d4
      _s = s;
    899c:	mov.w	r5, #116	; 0x74
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89a0:	strb.w	r9, [r4, #2025]	; 0x7e9
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    89a4:	movw	r9, #5436	; 0x153c
      _s = s;
    89a8:	strb.w	r5, [r4, #2005]	; 0x7d5
    89ac:	mov.w	r5, #57	; 0x39
    89b0:	strb.w	r6, [r4, #1999]	; 0x7cf
    89b4:	strb.w	r5, [r4, #2008]	; 0x7d8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89b8:	mvn.w	r5, #15
      _s = s;
      _b = b;
    89bc:	strb.w	r6, [r4, #2003]	; 0x7d3
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89c0:	strb.w	r5, [r4, #2010]	; 0x7da
      _s = s;
    89c4:	mvn.w	r5, #74	; 0x4a
      _b = b;
    89c8:	strb.w	r6, [r4, #2012]	; 0x7dc
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    89cc:	mov.w	r6, #10
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    89d0:	strb.w	r5, [r4, #2011]	; 0x7db
    89d4:	mvn.w	r5, #17
    89d8:	strb.w	r5, [r4, #2014]	; 0x7de
      _b = b;
    89dc:	mvn.w	r5, #56	; 0x38
    89e0:	strb.w	r5, [r4, #2015]	; 0x7df
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89e4:	mvn.w	r5, #20
    89e8:	strb.w	r5, [r4, #2016]	; 0x7e0
      _s = s;
      _b = b;
    89ec:	mvn.w	r5, #57	; 0x39
    89f0:	strb.w	r5, [r4, #2018]	; 0x7e2
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
    89f4:	mvn.w	r5, #24
    89f8:	strb.w	r5, [r4, #2019]	; 0x7e3
      _s = s;
      _b = b;
    89fc:	mvn.w	r5, #62	; 0x3e
    8a00:	strb.w	r5, [r4, #2021]	; 0x7e5
    8a04:	mvn.w	r5, #65	; 0x41
    8a08:	strb.w	r5, [r4, #2024]	; 0x7e8
class Cellmask {

  public:
    Cellmask(byte h, byte s, byte b){
      _h = h;
      _s = s;
    8a0c:	mvn.w	r5, #5
    8a10:	strb.w	r5, [r4, #2026]	; 0x7ea
// Pin layouts on the teensy 4
//First: 1,0,24,25, 19,18,14,15,17,16,22,23,20,21,26,27
//Second: 10,12,11,13,6,9,32,8,7
//Third: 37, 36, 35, 34, 39, 38, 28, 31, 30

Adafruit_NeoPixel screen_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    8a14:	bl	8ed0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8a18:	mov	r2, sl
    8a1a:	ldr	r1, [pc, #404]	; (8bb0 <_GLOBAL__sub_I_nextTime1+0x7408>)
    8a1c:	ldr	r0, [pc, #396]	; (8bac <_GLOBAL__sub_I_nextTime1+0x7404>)
    8a1e:	bl	ac54 <__aeabi_atexit>
Adafruit_NeoPixel screen_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8a22:	movs	r3, #82	; 0x52
    8a24:	mov	r0, r8
    8a26:	movs	r2, #6
    8a28:	mov.w	r1, #676	; 0x2a4
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8a2c:	ldr	r5, [pc, #388]	; (8bb4 <_GLOBAL__sub_I_nextTime1+0x740c>)
    8a2e:	bl	8ed0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8a32:	mov	r2, sl
    8a34:	ldr	r1, [pc, #376]	; (8bb0 <_GLOBAL__sub_I_nextTime1+0x7408>)
    8a36:	mov	r0, r8
    8a38:	bl	ac54 <__aeabi_atexit>
    8a3c:	ldr.w	ip, [pc, #412]	; 8bdc <_GLOBAL__sub_I_nextTime1+0x7434>
    8a40:	ldr.w	r8, [pc, #412]	; 8be0 <_GLOBAL__sub_I_nextTime1+0x7438>
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8a44:	movw	sl, #5432	; 0x1538
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8a48:	str.w	r7, [ip]
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8a4c:	movs	r3, #0
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8a4e:	ldr	r7, [pc, #360]	; (8bb8 <_GLOBAL__sub_I_nextTime1+0x7410>)
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8a50:	movs	r2, #1
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8a52:	ldr.w	lr, [pc, #400]	; 8be4 <_GLOBAL__sub_I_nextTime1+0x743c>
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8a56:	str.w	r7, [ip, sl]
    8a5a:	str.w	r7, [r8, sl]
      _background = current_bg;
    8a5e:	ldr	r7, [pc, #348]	; (8bbc <_GLOBAL__sub_I_nextTime1+0x7414>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8a60:	strb.w	r6, [r8, #8]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8a64:	mov.w	r6, #4
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8a68:	str.w	r7, [ip, r9]
    8a6c:	str.w	r7, [r8, r9]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8a70:	ldr	r7, [pc, #324]	; (8bb8 <_GLOBAL__sub_I_nextTime1+0x7410>)
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8a72:	strb.w	r6, [ip, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8a76:	mov.w	r6, #10
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8a7a:	str.w	r7, [lr, sl]
      _background = current_bg;
    8a7e:	ldr	r7, [pc, #316]	; (8bbc <_GLOBAL__sub_I_nextTime1+0x7414>)
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8a80:	strb.w	r6, [lr, #7]
      _maxInit = maxInit;
    8a84:	mov.w	r6, #20
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8a88:	str.w	r7, [lr, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8a8c:	movs	r7, #3
    8a8e:	ldr	r1, [pc, #304]	; (8bc0 <_GLOBAL__sub_I_nextTime1+0x7418>)
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8a90:	strb.w	r6, [lr, #8]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8a94:	movs	r6, #0
      _target = target;
    8a96:	str.w	r7, [lr]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8a9a:	movs	r7, #0
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8a9c:	strb.w	r3, [ip, #6]
      _minInit = minInit;
    8aa0:	strb.w	r3, [ip, #7]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8aa4:	strb.w	r3, [r8, #6]
      _minInit = minInit;
    8aa8:	strb.w	r3, [r8, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    8aac:	strb.w	r3, [r8, #9]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8ab0:	strb.w	r3, [lr, #6]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8ab4:	strb.w	r3, [lr, #9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8ab8:	str.w	fp, [r1]
      _penalty = penalty;
      _reward = reward;
    8abc:	strb.w	r2, [ip, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8ac0:	strb.w	r2, [ip, #8]
      _isBg = isBg;
    8ac4:	strb.w	r2, [ip, #9]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8ac8:	strb.w	r2, [r8, #4]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8acc:	str.w	fp, [r8]
      _penalty = penalty;
    8ad0:	strb.w	fp, [r8, #5]
    8ad4:	strb.w	r2, [lr, #5]
      _reward = reward;
    8ad8:	strb.w	r2, [lr, #4]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8adc:	ldr	r0, [pc, #228]	; (8bc4 <_GLOBAL__sub_I_nextTime1+0x741c>)
    8ade:	strd	r6, r7, [r8, #16]
    8ae2:	strd	r6, r7, [ip, #16]
    8ae6:	strd	r6, r7, [lr, #16]
    8aea:	strd	r6, r7, [r1, #16]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8aee:	ldr	r7, [pc, #200]	; (8bb8 <_GLOBAL__sub_I_nextTime1+0x7410>)
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8af0:	mov.w	r6, #10
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8af4:	strb	r2, [r1, #5]
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8af6:	str.w	r7, [r1, sl]
      _background = current_bg;
    8afa:	ldr	r7, [pc, #192]	; (8bbc <_GLOBAL__sub_I_nextTime1+0x7414>)
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8afc:	strb	r2, [r1, #4]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8afe:	str.w	r7, [r1, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8b02:	movs	r7, #9
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8b04:	strb	r3, [r1, #6]
      _minInit = minInit;
    8b06:	strb	r2, [r1, #7]
      _maxInit = maxInit;
    8b08:	strb	r6, [r1, #8]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8b0a:	mov.w	r6, #4
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8b0e:	strb	r3, [r1, #9]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8b10:	ldr	r1, [pc, #180]	; (8bc8 <_GLOBAL__sub_I_nextTime1+0x7420>)
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b12:	strb	r6, [r5, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8b14:	str	r7, [r1, #0]
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8b16:	ldr	r7, [pc, #180]	; (8bcc <_GLOBAL__sub_I_nextTime1+0x7424>)
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8b18:	strb	r6, [r1, #5]
      _reward = reward;
    8b1a:	mov.w	r6, #3
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
      _background = current_bg;
    8b1e:	str.w	r7, [r1, r9]
    8b22:	str.w	r7, [r5, r9]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8b26:	movs	r7, #7
      _penalty = penalty;
      _reward = reward;
    8b28:	strb	r6, [r5, #4]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b2a:	movs	r6, #0
      _target = target;
    8b2c:	str	r7, [r5, #0]
    8b2e:	movs	r7, #3
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
      _cellmask = current_mask;
    8b30:	str.w	r4, [r5, sl]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8b34:	str	r7, [r0, #0]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b36:	movs	r7, #0
      _target = target;
      _penalty = penalty;
    8b38:	strb.w	fp, [r5, #5]
      _reward = reward;
      _floorInit = floorInit;
    8b3c:	strb	r3, [r5, #6]
      _minInit = minInit;
    8b3e:	strb	r3, [r5, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    8b40:	strb	r3, [r5, #9]
      _cellmask = current_mask;
    8b42:	str.w	r4, [r1, sl]
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
    8b46:	strb	r2, [r1, #4]
      _floorInit = floorInit;
    8b48:	strb	r3, [r1, #6]
      _minInit = minInit;
    8b4a:	strb	r3, [r1, #7]
      _maxInit = maxInit;
    8b4c:	strb	r2, [r1, #8]
      _isBg = isBg;
    8b4e:	strb	r2, [r1, #9]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8b50:	strb	r3, [r0, #6]
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
    8b52:	strb	r2, [r0, #5]
      _reward = reward;
    8b54:	strb	r2, [r0, #4]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b56:	strd	r6, r7, [r1, #16]
    8b5a:	strd	r6, r7, [r5, #16]
    8b5e:	mov	r5, r6
    8b60:	mov	r6, r7
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b62:	ldr	r1, [pc, #108]	; (8bd0 <_GLOBAL__sub_I_nextTime1+0x7428>)
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b64:	strd	r5, r6, [r0, #16]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
    8b68:	mov.w	r5, #5
    8b6c:	strb	r5, [r0, #7]
      _maxInit = maxInit;
      _isBg = isBg;
    8b6e:	strb	r3, [r0, #9]
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
    8b70:	strb	r3, [r1, #6]
      _minInit = minInit;
      _maxInit = maxInit;
      _isBg = isBg;
    8b72:	strb	r3, [r1, #9]
      _cellmask = current_mask;
      _background = current_bg;
    8b74:	ldr	r3, [pc, #68]	; (8bbc <_GLOBAL__sub_I_nextTime1+0x7414>)
    8b76:	ldr	r5, [pc, #84]	; (8bcc <_GLOBAL__sub_I_nextTime1+0x7424>)
    8b78:	str.w	r3, [r1, r9]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b7c:	mov.w	r3, #50	; 0x32
      _isBg = isBg;
      _cellmask = current_mask;
    8b80:	str.w	r4, [r0, sl]
      _background = current_bg;
    8b84:	str.w	r5, [r0, r9]
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b88:	mov.w	r5, #10
      _isBg = isBg;
      _cellmask = current_mask;
    8b8c:	str.w	r4, [r1, sl]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b90:	movs	r4, #0
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b92:	strb	r3, [r0, #8]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8b94:	movs	r3, #0
      _target = target;
      _penalty = penalty;
      _reward = reward;
      _floorInit = floorInit;
      _minInit = minInit;
      _maxInit = maxInit;
    8b96:	strb	r5, [r1, #8]
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
      _target = target;
    8b98:	str.w	fp, [r1]
      _penalty = penalty;
    8b9c:	strb	r2, [r1, #5]
      _reward = reward;
    8b9e:	strb	r2, [r1, #4]
      _floorInit = floorInit;
      _minInit = minInit;
    8ba0:	strb	r2, [r1, #7]
  public: 
    int cells[SIZE_SCREEN][SIZE_SCREEN]; 
    int nextCells[SIZE_SCREEN][SIZE_SCREEN];
    Cellmask (*_cellmask)[SIZE_SCREEN];
    const boolean (*_background)[SIZE_SCREEN];
    Automaton(int target, byte reward, byte penalty, byte floorInit, byte minInit, byte maxInit, boolean isBg, Cellmask current_mask[SIZE_SCREEN][SIZE_SCREEN], const boolean current_bg[SIZE_SCREEN][SIZE_SCREEN]) {
    8ba2:	strd	r3, r4, [r1, #16]
  }

  interpolate_colors(& next_colors_A, & prev_colors_A, & screen_A);
  interpolate_colors(& next_colors_B, & prev_colors_B, & screen_B);
  //interpolate_colors_A();
}
    8ba6:	add	sp, #60	; 0x3c
    8ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bac:	.word	0x2000f9c0
    8bb0:	.word	0x00008be9
    8bb4:	.word	0x20005528
    8bb8:	.word	0x20006a68
    8bbc:	.word	0x200009f0
    8bc0:	.word	0x20007a40
    8bc4:	.word	0x20008f80
    8bc8:	.word	0x2000cf40
    8bcc:	.word	0x2000074c
    8bd0:	.word	0x2000e480
    8bd4:	.word	0x20000748
    8bd8:	.word	0x20014e78
    8bdc:	.word	0x2000ba00
    8be0:	.word	0x2000f9d8
    8be4:	.word	0x2000a4c0

00008be8 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    8be8:	push	{r4, lr}
    8bea:	mov	r4, r0
  if(pixels)   free(pixels);
    8bec:	ldr	r0, [r0, #8]
    8bee:	cbz	r0, 8bf4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    8bf0:	bl	ad48 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    8bf4:	ldrsb.w	r0, [r4, #6]
    8bf8:	cmp	r0, #0
    8bfa:	blt.n	8c04 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    8bfc:	uxtb	r0, r0
    8bfe:	movs	r1, #0
    8c00:	bl	a0a4 <pinMode>
}
    8c04:	mov	r0, r4
    8c06:	pop	{r4, pc}

00008c08 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    8c08:	push	{r4, lr}
    8c0a:	mov	r4, r0
  if(pin >= 0) {
    8c0c:	ldrsb.w	r0, [r0, #6]
    8c10:	cmp	r0, #0
    8c12:	blt.n	8c24 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    8c14:	uxtb	r0, r0
    8c16:	movs	r1, #1
    8c18:	bl	a0a4 <pinMode>
    digitalWrite(pin, LOW);
    8c1c:	movs	r1, #0
    8c1e:	ldrb	r0, [r4, #6]
    8c20:	bl	a098 <digitalWrite>
  }
  begun = true;
    8c24:	movs	r3, #1
    8c26:	strb	r3, [r4, #1]
    8c28:	pop	{r4, pc}
    8c2a:	nop

00008c2c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    8c2c:	push	{r3, r4, r5, lr}
    8c2e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    8c30:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    8c32:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    8c34:	cbz	r0, 8c3a <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    8c36:	bl	ad48 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    8c3a:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    8c3c:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    8c3e:	ldrb	r0, [r4, #12]
    8c40:	cmp	r3, r0
    8c42:	ite	eq
    8c44:	moveq	r0, #3
    8c46:	movne	r0, #4
    8c48:	smulbb	r0, r0, r5
    8c4c:	uxth	r0, r0
    8c4e:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    8c50:	bl	ac60 <calloc>
    8c54:	str	r0, [r4, #8]
    8c56:	cbz	r0, 8c5c <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    8c58:	strh	r5, [r4, #2]
    8c5a:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    8c5c:	strh	r0, [r4, #4]
    8c5e:	strh	r0, [r4, #2]
    8c60:	pop	{r3, r4, r5, pc}
    8c62:	nop

00008c64 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    8c64:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8c66:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    8c68:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8c6c:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8c70:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    8c72:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    8c76:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8c7a:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8c7e:	ite	hi
    8c80:	movhi	r6, #0
    8c82:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    8c84:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8c88:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    8c8c:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    8c8e:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    8c90:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    8c92:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    8c94:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    8c96:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    8c98:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    8c9a:	cbz	r5, 8cb2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    8c9c:	subs	r1, r2, r1
    8c9e:	clz	r1, r1
    8ca2:	lsrs	r1, r1, #5
    8ca4:	cmp	r1, r4
    8ca6:	beq.n	8cb2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    8ca8:	ldrh	r1, [r0, #2]
  }
}
    8caa:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    8cae:	b.w	8c2c <Adafruit_NeoPixel::updateLength(unsigned short)>
    8cb2:	pop	{r4, r5, r6, r7, pc}

00008cb4 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    8cb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    8cb8:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    8cba:	sub	sp, #20
    8cbc:	str	r0, [sp, #12]

  if(!pixels) return;
    8cbe:	cmp	r3, #0
    8cc0:	beq.n	8da6 <Adafruit_NeoPixel::show()+0xf2>
    8cc2:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    8cc4:	bl	9fc4 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    8cc8:	ldr	r3, [r4, #16]
    8cca:	subs	r0, r0, r3
    8ccc:	cmp.w	r0, #300	; 0x12c
    8cd0:	bcc.n	8cc4 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    8cd2:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8cd4:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8cd6:	ldr	r0, [pc, #408]	; (8e70 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8cd8:	ldrsb.w	r3, [r6, #6]
    8cdc:	ldr	r4, [pc, #404]	; (8e74 <Adafruit_NeoPixel::show()+0x1c0>)
    8cde:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8ce0:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8ce2:	ldr	r1, [pc, #404]	; (8e78 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    8ce4:	ldr.w	ip, [r4, r3]
    8ce8:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    8cea:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8cec:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    8cf0:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    8cf4:	mov	r5, r6
    8cf6:	mov	r6, r3
    8cf8:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    8cfa:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    8cfc:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    8cfe:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8d00:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    8d02:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    8d04:	ldr	r4, [pc, #372]	; (8e7c <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8d06:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    8d0a:	str	r2, [sp, #8]
    8d0c:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    8d0e:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    8d10:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    8d12:	ldr	r1, [pc, #364]	; (8e80 <Adafruit_NeoPixel::show()+0x1cc>)
    8d14:	ldr	r0, [r4, #0]
    8d16:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    8d18:	cmp	r2, #0
    8d1a:	beq.n	8dac <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    8d1c:	ldr	r5, [pc, #356]	; (8e84 <Adafruit_NeoPixel::show()+0x1d0>)
    8d1e:	lsrs	r3, r3, #8
    while(p < end) {
    8d20:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    8d22:	umull	r2, r3, r5, r3
    8d26:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    8d2a:	bcs.n	8d86 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    8d2c:	ldr	r7, [pc, #344]	; (8e88 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    8d2e:	ldr	r6, [pc, #348]	; (8e8c <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    8d30:	ldr	r3, [sp, #4]
    8d32:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    8d36:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    8d3a:	ldrb.w	sl, [r3], #1
    8d3e:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    8d40:	ldr	r2, [r4, #0]
    8d42:	ldr	r3, [r1, #0]
    8d44:	subs	r2, r2, r0
    8d46:	lsrs	r3, r3, #8
    8d48:	umull	fp, r3, r5, r3
    8d4c:	cmp.w	r2, r3, lsr #4
    8d50:	bcc.n	8d40 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    8d52:	ldr	r3, [pc, #296]	; (8e7c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    8d54:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    8d58:	ldr	r0, [r3, #0]
        *set = msk;
    8d5a:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    8d5e:	beq.n	8e5e <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    8d60:	ldr	r3, [r4, #0]
    8d62:	ldr	r2, [r1, #0]
    8d64:	subs	r3, r3, r0
    8d66:	umull	fp, r2, r7, r2
    8d6a:	cmp.w	r3, r2, lsr #19
    8d6e:	bcc.n	8d60 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8d70:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    8d74:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8d78:	mov.w	lr, lr, lsr #1
    8d7c:	bne.n	8d40 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    8d7e:	ldr	r3, [sp, #8]
    8d80:	ldr	r2, [sp, #4]
    8d82:	cmp	r3, r2
    8d84:	bne.n	8d30 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    8d86:	ldr	r5, [pc, #244]	; (8e7c <Adafruit_NeoPixel::show()+0x1c8>)
    8d88:	ldr	r4, [pc, #248]	; (8e84 <Adafruit_NeoPixel::show()+0x1d0>)
    8d8a:	ldr	r2, [r5, #0]
    8d8c:	ldr	r3, [r1, #0]
    8d8e:	subs	r2, r2, r0
    8d90:	lsrs	r3, r3, #8
    8d92:	umull	r6, r3, r4, r3
    8d96:	cmp.w	r2, r3, lsr #4
    8d9a:	bcc.n	8d8a <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    8d9c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    8d9e:	bl	9fc4 <micros>
    8da2:	ldr	r3, [sp, #12]
    8da4:	str	r0, [r3, #16]
}
    8da6:	add	sp, #20
    8da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    8dac:	ldr	r6, [pc, #212]	; (8e84 <Adafruit_NeoPixel::show()+0x1d0>)
    8dae:	lsrs	r3, r3, #7
    8db0:	umull	r2, r3, r6, r3
    while(p < end) {
    8db4:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    8db6:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    8dba:	ldr	r3, [sp, #4]
    8dbc:	cmp	r3, r2
    8dbe:	bcs.n	8e2a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    8dc0:	ldr.w	lr, [pc, #204]	; 8e90 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    8dc4:	ldr	r7, [pc, #196]	; (8e8c <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    8dc6:	ldr	r3, [sp, #4]
    8dc8:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    8dcc:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    8dd0:	ldrb.w	fp, [r3], #1
    8dd4:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    8dd6:	ldr	r2, [r4, #0]
    8dd8:	ldr	r3, [r1, #0]
    8dda:	subs	r2, r2, r0
    8ddc:	lsrs	r3, r3, #7
    8dde:	umull	r5, r3, r6, r3
    8de2:	cmp.w	r2, r3, lsr #4
    8de6:	bcc.n	8dd6 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    8de8:	ldr	r3, [pc, #144]	; (8e7c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    8dea:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    8dee:	ldr	r0, [r3, #0]
        *set = msk;
    8df0:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    8df4:	beq.n	8e4c <Adafruit_NeoPixel::show()+0x198>
    8df6:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    8dfa:	ldr	r2, [r4, #0]
    8dfc:	ldr	r5, [r1, #0]
    8dfe:	subs	r2, r2, r0
    8e00:	umull	ip, r3, lr, r5
    8e04:	subs	r5, r5, r3
    8e06:	add.w	r3, r3, r5, lsr #1
    8e0a:	cmp.w	r2, r3, lsr #19
    8e0e:	bcc.n	8dfa <Adafruit_NeoPixel::show()+0x146>
    8e10:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8e14:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    8e18:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    8e1c:	mov.w	r9, r9, lsr #1
    8e20:	bne.n	8dd6 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    8e22:	ldr	r3, [sp, #8]
    8e24:	ldr	r2, [sp, #4]
    8e26:	cmp	r3, r2
    8e28:	bne.n	8dc6 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    8e2a:	ldr	r5, [pc, #80]	; (8e7c <Adafruit_NeoPixel::show()+0x1c8>)
    8e2c:	ldr	r4, [pc, #84]	; (8e84 <Adafruit_NeoPixel::show()+0x1d0>)
    8e2e:	ldr	r2, [r5, #0]
    8e30:	ldr	r3, [r1, #0]
    8e32:	subs	r2, r2, r0
    8e34:	lsrs	r3, r3, #7
    8e36:	umull	r6, r3, r4, r3
    8e3a:	cmp.w	r2, r3, lsr #4
    8e3e:	bcc.n	8e2e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    8e40:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    8e42:	bl	9fc4 <micros>
    8e46:	ldr	r3, [sp, #12]
    8e48:	str	r0, [r3, #16]
    8e4a:	b.n	8da6 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    8e4c:	ldr	r3, [r4, #0]
    8e4e:	ldr	r2, [r1, #0]
    8e50:	subs	r3, r3, r0
    8e52:	umull	r5, r2, r7, r2
    8e56:	cmp.w	r3, r2, lsr #19
    8e5a:	bcc.n	8e4c <Adafruit_NeoPixel::show()+0x198>
    8e5c:	b.n	8e14 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    8e5e:	ldr	r3, [r4, #0]
    8e60:	ldr	r2, [r1, #0]
    8e62:	subs	r3, r3, r0
    8e64:	umull	fp, r2, r6, r2
    8e68:	cmp.w	r3, r2, lsr #20
    8e6c:	bcc.n	8e5e <Adafruit_NeoPixel::show()+0x1aa>
    8e6e:	b.n	8d70 <Adafruit_NeoPixel::show()+0xbc>
    8e70:	.word	0xe000edfc
    8e74:	.word	0x20000420
    8e78:	.word	0xe0001000
    8e7c:	.word	0xe0001004
    8e80:	.word	0x20000c98
    8e84:	.word	0x014f8b59
    8e88:	.word	0x6b5fca6b
    8e8c:	.word	0x431bde83
    8e90:	.word	0x421f67b3

00008e94 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    8e94:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    8e96:	ldrb	r3, [r0, #1]
    8e98:	cbz	r3, 8eb6 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    8e9a:	mov	r4, r0
    8e9c:	ldrsb.w	r0, [r0, #6]
    8ea0:	mov	r5, r1
    8ea2:	cmp	r0, #0
    8ea4:	blt.n	8eba <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    8ea6:	uxtb	r0, r0
    8ea8:	movs	r1, #0
    8eaa:	bl	a0a4 <pinMode>
    8eae:	ldrb	r3, [r4, #1]
    pin = p;
    8eb0:	strb	r5, [r4, #6]
    if(begun) {
    8eb2:	cbnz	r3, 8ebc <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    8eb4:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    8eb6:	strb	r1, [r0, #6]
    8eb8:	pop	{r3, r4, r5, pc}
    8eba:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    8ebc:	mov	r0, r5
    8ebe:	movs	r1, #1
    8ec0:	bl	a0a4 <pinMode>
      digitalWrite(p, LOW);
    8ec4:	mov	r0, r5
    8ec6:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    8ec8:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    8ecc:	b.w	a098 <digitalWrite>

00008ed0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    8ed0:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    8ed2:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    8ed4:	mov	r4, r0
    8ed6:	mov	r7, r1
    8ed8:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    8eda:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    8edc:	strb	r5, [r0, #1]
    8ede:	strb	r5, [r0, #7]
    8ee0:	str	r5, [r0, #8]
    8ee2:	str	r5, [r0, #16]
{
  updateType(t);
    8ee4:	bl	8c64 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    8ee8:	mov	r1, r7
    8eea:	mov	r0, r4
    8eec:	bl	8c2c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    8ef0:	mov	r0, r4
    8ef2:	mov	r1, r6
    8ef4:	bl	8e94 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    8ef8:	mov	r0, r4
    8efa:	pop	{r3, r4, r5, r6, r7, pc}

00008efc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    8efc:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    8efe:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    8f00:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    8f04:	cmp	r4, r1
    8f06:	bls.n	8f3c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    8f08:	ldrb	r4, [r0, #7]
    8f0a:	cbz	r4, 8f1e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    8f0c:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    8f10:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    8f14:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    8f18:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    8f1a:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    8f1c:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    8f1e:	ldrb	r5, [r0, #15]
    8f20:	ldrb	r4, [r0, #12]
    8f22:	cmp	r4, r5
    8f24:	beq.n	8f40 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    8f26:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    8f28:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    8f2a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    8f2e:	strb	r7, [r1, r5]
    8f30:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    8f32:	strb	r2, [r1, r5]
    p[gOffset] = g;
    8f34:	ldrb	r2, [r0, #13]
    8f36:	strb	r3, [r1, r2]
    p[bOffset] = b;
    8f38:	ldrb	r3, [r0, #14]
    8f3a:	strb	r6, [r1, r3]
  }
}
    8f3c:	pop	{r4, r5, r6, r7}
    8f3e:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    8f40:	add.w	r1, r1, r1, lsl #1
    8f44:	ldr	r4, [r0, #8]
    8f46:	add	r1, r4
    8f48:	b.n	8f32 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    8f4a:	nop

00008f4c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    8f4c:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    8f4e:	movs	r1, #0
    8f50:	mov	r3, r0
    8f52:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    8f56:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    8f58:	movs	r4, #0
    8f5a:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    8f5c:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    8f60:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    8f62:	bfc	r2, #0, #4
    8f66:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    8f68:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    8f6c:	cmp	r3, r5
    8f6e:	bne.n	8f56 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    8f70:	mov	r2, r4
    8f72:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    8f74:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    8f76:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    8f7a:	add.w	r3, r0, r2, lsl #4
    8f7e:	adds	r3, #8
    8f80:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    8f82:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    8f86:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    8f8a:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    8f8e:	beq.n	8f98 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    8f90:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    8f92:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    8f94:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    8f96:	str	r6, [r1, #8]
    8f98:	adds	r2, #1
    8f9a:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    8f9c:	cmp	r2, #12
    8f9e:	bne.n	8f7a <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    8fa0:	pop	{r4, r5, r6}
    8fa2:	bx	lr

00008fa4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    8fa4:	ldr	r0, [pc, #4]	; (8fac <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    8fa6:	b.w	8f4c <TimeAlarmsClass::TimeAlarmsClass()>
    8faa:	nop
    8fac:	.word	0x20014e8c

00008fb0 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    8fb0:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    8fb2:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8fb4:	ubfx	r3, r3, #16, #15
    8fb8:	ldr	r1, [pc, #20]	; (8fd0 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    8fba:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8fbc:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    8fc0:	ldr	r4, [pc, #16]	; (8fd4 <rx_event+0x24>)
    8fc2:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    8fc4:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    8fc8:	strh.w	r5, [r4, r2, lsl #1]
}
    8fcc:	pop	{r4, r5}
    8fce:	bx	lr
    8fd0:	.word	0x2001571c
    8fd4:	.word	0x20015714

00008fd8 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8fd8:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    8fda:	ldr	r3, [pc, #84]	; (9030 <usb_serial_flush_callback+0x58>)
    8fdc:	ldrb	r3, [r3, #0]
    8fde:	cbnz	r3, 8ff0 <usb_serial_flush_callback+0x18>
    8fe0:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    8fe4:	ldr	r3, [pc, #76]	; (9034 <usb_serial_flush_callback+0x5c>)
    8fe6:	ldrb	r3, [r3, #0]
    8fe8:	cbz	r3, 8ff0 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    8fea:	ldr	r5, [pc, #76]	; (9038 <usb_serial_flush_callback+0x60>)
    8fec:	ldrh	r2, [r5, #0]
    8fee:	cbnz	r2, 8ff2 <usb_serial_flush_callback+0x1a>
    8ff0:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8ff2:	ldr	r7, [pc, #72]	; (903c <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8ff4:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8ff6:	ldr	r6, [pc, #72]	; (9040 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8ff8:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8ffc:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    8ffe:	ldr	r0, [pc, #68]	; (9044 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9000:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9004:	add.w	r1, r0, r1, lsl #8
    9008:	mov	r0, r6
    900a:	bl	9e60 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    900e:	mov	r1, r6
    9010:	movs	r0, #4
    9012:	bl	9e90 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9016:	ldrb	r3, [r7, #0]
    9018:	adds	r3, #1
    901a:	uxtb	r3, r3
    901c:	cmp	r3, #6
    901e:	it	ls
    9020:	strbls	r3, [r7, #0]
	tx_available = 0;
    9022:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    9026:	it	hi
    9028:	strbhi	r4, [r7, #0]
	tx_available = 0;
    902a:	strh	r3, [r5, #0]
    902c:	pop	{r3, r4, r5, r6, r7, pc}
    902e:	nop
    9030:	.word	0x20015650
    9034:	.word	0x200158d0
    9038:	.word	0x200157a0
    903c:	.word	0x20015651
    9040:	.word	0x200157c0
    9044:	.word	0x20014f50

00009048 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9048:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    904c:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    904e:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9050:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9052:	cmp	r1, #0
    9054:	beq.w	9180 <usb_serial_write.part.1+0x138>
    9058:	movs	r3, #0
    905a:	ldr.w	r8, [pc, #320]	; 919c <usb_serial_write.part.1+0x154>
    905e:	ldr.w	r9, [pc, #304]	; 9190 <usb_serial_write.part.1+0x148>
    9062:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9064:	ldr	r6, [pc, #284]	; (9184 <usb_serial_write.part.1+0x13c>)
    9066:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    906a:	ldr.w	sl, [pc, #308]	; 91a0 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    906e:	ldr	r2, [pc, #280]	; (9188 <usb_serial_write.part.1+0x140>)
    9070:	ldrb	r4, [r2, #0]
    9072:	ldr	r2, [pc, #280]	; (918c <usb_serial_write.part.1+0x144>)
    9074:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9078:	cmp	r3, #0
    907a:	bne.n	9138 <usb_serial_write.part.1+0xf0>
    907c:	mov	r5, r3
    907e:	mov	r4, r3
    9080:	b.n	90ac <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9082:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9086:	cbnz	r4, 908a <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    9088:	ldr	r5, [r6, #0]
    908a:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    908c:	cmp	r3, #0
    908e:	bne.n	912c <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9090:	ldr	r3, [r6, #0]
    9092:	subs	r3, r3, r5
    9094:	cmp	r3, #120	; 0x78
    9096:	bhi.n	9174 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9098:	ldrb.w	r3, [sl]
    909c:	cmp	r3, #0
    909e:	beq.n	912c <usb_serial_write.part.1+0xe4>
			yield();
    90a0:	bl	a17c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    90a4:	ldrh.w	r3, [r8]
    90a8:	cmp	r3, #0
    90aa:	bne.n	9134 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    90ac:	mov	r0, r7
    90ae:	bl	9edc <usb_transfer_status>
			if (!(status & 0x80)) {
    90b2:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    90b6:	ldr	r2, [pc, #216]	; (9190 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    90b8:	bne.n	9082 <usb_serial_write.part.1+0x3a>
    90ba:	ldr	r2, [pc, #204]	; (9188 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    90bc:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    90c0:	strb.w	r0, [r9]
    90c4:	ldrb	r4, [r2, #0]
    90c6:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90c8:	ldr	r1, [pc, #200]	; (9194 <usb_serial_write.part.1+0x14c>)
    90ca:	lsls	r4, r4, #8
		if (size >= tx_available) {
    90cc:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    90ce:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    90d2:	add	r0, r4
    90d4:	add	r0, r1
		if (size >= tx_available) {
    90d6:	bcc.n	914a <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    90d8:	ldr	r1, [sp, #8]
    90da:	bl	a714 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    90de:	ldr	r3, [pc, #180]	; (9194 <usb_serial_write.part.1+0x14c>)
    90e0:	mov.w	r2, #256	; 0x100
    90e4:	mov	r0, r7
    90e6:	adds	r1, r3, r4
    90e8:	movs	r3, #0
    90ea:	bl	9e60 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    90ee:	mov	r1, r7
    90f0:	movs	r0, #4
    90f2:	bl	9e90 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    90f6:	ldr	r3, [pc, #144]	; (9188 <usb_serial_write.part.1+0x140>)
    90f8:	ldr	r2, [pc, #140]	; (9188 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    90fa:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    90fc:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    90fe:	ldr	r0, [pc, #152]	; (9198 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9100:	adds	r3, #1
    9102:	uxtb	r3, r3
    9104:	cmp	r3, #6
    9106:	it	hi
    9108:	movhi	r3, #0
    910a:	strb	r3, [r2, #0]
			size -= tx_available;
    910c:	ldrh.w	r2, [r8]
			sent += tx_available;
    9110:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9112:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9116:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    911a:	add	r3, r2
    911c:	str	r3, [sp, #4]
			data += tx_available;
    911e:	ldr	r3, [sp, #8]
    9120:	add	r3, r2
    9122:	str	r3, [sp, #8]
    9124:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9126:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    912a:	bne.n	906e <usb_serial_write.part.1+0x26>
    912c:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    912e:	add	sp, #20
    9130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9134:	ldr	r2, [pc, #80]	; (9188 <usb_serial_write.part.1+0x140>)
    9136:	ldrb	r4, [r2, #0]
    9138:	mov	r2, r3
    913a:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    913e:	lsls	r4, r4, #8
    9140:	ldr	r1, [pc, #80]	; (9194 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    9142:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9144:	add	r0, r4
    9146:	add	r0, r1
		if (size >= tx_available) {
    9148:	bcs.n	90d8 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    914a:	ldr	r1, [sp, #8]
    914c:	mov	r2, fp
    914e:	str	r3, [sp, #12]
    9150:	bl	a714 <memcpy>
			tx_available -= size;
    9154:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9156:	mov.w	r1, #3221225472	; 0xc0000000
    915a:	ldr	r2, [pc, #60]	; (9198 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    915c:	rsb	r3, fp, r3
    9160:	strh.w	r3, [r8]
    9164:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9166:	str.w	r1, [r2, #132]	; 0x84
    916a:	add	r3, fp
    916c:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    916e:	add	sp, #20
    9170:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9174:	movs	r3, #1
				return sent;
    9176:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9178:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    917a:	add	sp, #20
    917c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9180:	mov	r0, r1
    9182:	b.n	912e <usb_serial_write.part.1+0xe6>
    9184:	.word	0x200158d8
    9188:	.word	0x20015651
    918c:	.word	0x200157c0
    9190:	.word	0x200158a0
    9194:	.word	0x20014f50
    9198:	.word	0x402e0000
    919c:	.word	0x200157a0
    91a0:	.word	0x200158d0

000091a4 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    91a4:	bx	lr
    91a6:	nop

000091a8 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    91a8:	movs	r1, #0
    91aa:	movs	r2, #224	; 0xe0
    91ac:	ldr	r0, [pc, #128]	; (9230 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    91ae:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    91b0:	mov	r4, r1
    91b2:	ldr	r6, [pc, #128]	; (9234 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91b4:	ldr	r5, [pc, #128]	; (9238 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    91b6:	bl	b2c8 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    91ba:	ldr	r7, [pc, #128]	; (923c <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91bc:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    91be:	ldr	r3, [pc, #128]	; (9240 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91c0:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    91c2:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91c4:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    91c6:	ldr	r6, [pc, #124]	; (9244 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    91c8:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    91ca:	bl	b2c8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    91ce:	mov	r3, r4
    91d0:	mov	r2, r4
    91d2:	movs	r1, #16
    91d4:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    91d6:	str	r4, [r7, #0]
    91d8:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    91da:	str	r4, [r6, #0]
    91dc:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    91de:	bl	9df8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    91e2:	mov	r2, r4
    91e4:	ldr	r3, [pc, #96]	; (9248 <usb_serial_configure+0xa0>)
    91e6:	movs	r1, #64	; 0x40
    91e8:	movs	r0, #3
    91ea:	bl	9d94 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    91ee:	mov	r3, r4
    91f0:	mov	r2, r4
    91f2:	movs	r1, #64	; 0x40
    91f4:	movs	r0, #4
    91f6:	bl	9df8 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    91fa:	mov	r3, r4
    91fc:	movs	r2, #64	; 0x40
    91fe:	mov	r0, r5
    9200:	ldr	r1, [pc, #72]	; (924c <usb_serial_configure+0xa4>)
    9202:	bl	9e60 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    9206:	mov	r1, r5
    9208:	movs	r0, #3
    920a:	bl	9eb8 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    920e:	ldr	r3, [pc, #64]	; (9250 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    9210:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9212:	ldr	r1, [pc, #64]	; (9254 <usb_serial_configure+0xac>)
    9214:	ldr	r0, [pc, #64]	; (9258 <usb_serial_configure+0xb0>)
    9216:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    9218:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    921c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9220:	ldr.w	r2, [r3, #328]	; 0x148
    9224:	orr.w	r2, r2, #16777216	; 0x1000000
    9228:	str.w	r2, [r3, #328]	; 0x148
    922c:	pop	{r3, r4, r5, r6, r7, pc}
    922e:	nop
    9230:	.word	0x200157c0
    9234:	.word	0x20015651
    9238:	.word	0x20015740
    923c:	.word	0x2001571c
    9240:	.word	0x200157a0
    9244:	.word	0x20015714
    9248:	.word	0x00008fb1
    924c:	.word	0x20015654
    9250:	.word	0x402e0000
    9254:	.word	0x200158a4
    9258:	.word	0x00008fd9

0000925c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    925c:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    925e:	ldr	r5, [pc, #56]	; (9298 <usb_serial_getchar+0x3c>)
    9260:	ldr	r3, [pc, #56]	; (929c <usb_serial_getchar+0x40>)
    9262:	ldrh	r2, [r5, #0]
    9264:	ldrh	r0, [r3, #0]
    9266:	cmp	r2, r0
    9268:	bcs.n	9292 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    926a:	adds	r3, r2, #1
    926c:	ldr	r1, [pc, #48]	; (92a0 <usb_serial_getchar+0x44>)
    926e:	uxth	r3, r3
    9270:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    9272:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    9274:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    9276:	bls.n	927c <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    9278:	mov	r0, r4
	}
	return -1;
}
    927a:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    927c:	movs	r3, #0
    927e:	movs	r2, #64	; 0x40
    9280:	ldr	r0, [pc, #32]	; (92a4 <usb_serial_getchar+0x48>)
    9282:	bl	9e60 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    9286:	ldr	r1, [pc, #28]	; (92a4 <usb_serial_getchar+0x48>)
    9288:	movs	r0, #3
    928a:	bl	9eb8 <usb_receive>
		}
		return c;
    928e:	mov	r0, r4
    9290:	pop	{r3, r4, r5, pc}
	}
	return -1;
    9292:	mov.w	r0, #4294967295
    9296:	pop	{r3, r4, r5, pc}
    9298:	.word	0x20015714
    929c:	.word	0x2001571c
    92a0:	.word	0x20015654
    92a4:	.word	0x20015740

000092a8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    92a8:	ldr	r3, [pc, #20]	; (92c0 <usb_serial_peekchar+0x18>)
    92aa:	ldr	r2, [pc, #24]	; (92c4 <usb_serial_peekchar+0x1c>)
    92ac:	ldrh	r3, [r3, #0]
    92ae:	ldrh	r2, [r2, #0]
    92b0:	cmp	r2, r3
    92b2:	bls.n	92ba <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    92b4:	ldr	r2, [pc, #16]	; (92c8 <usb_serial_peekchar+0x20>)
    92b6:	ldrb	r0, [r2, r3]
    92b8:	bx	lr
	}

	return -1;
    92ba:	mov.w	r0, #4294967295
}
    92be:	bx	lr
    92c0:	.word	0x20015714
    92c4:	.word	0x2001571c
    92c8:	.word	0x20015654

000092cc <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    92cc:	ldr	r2, [pc, #8]	; (92d8 <usb_serial_available+0xc>)
    92ce:	ldr	r3, [pc, #12]	; (92dc <usb_serial_available+0x10>)
    92d0:	ldrh	r0, [r2, #0]
    92d2:	ldrh	r3, [r3, #0]
}
    92d4:	subs	r0, r0, r3
    92d6:	bx	lr
    92d8:	.word	0x2001571c
    92dc:	.word	0x20015714

000092e0 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    92e0:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    92e2:	ldr	r3, [pc, #40]	; (930c <usb_serial_flush_input+0x2c>)
    92e4:	ldr	r4, [pc, #40]	; (9310 <usb_serial_flush_input+0x30>)
    92e6:	ldrh	r5, [r3, #0]
    92e8:	ldrh	r3, [r4, #0]
    92ea:	cmp	r3, r5
    92ec:	bcc.n	92f0 <usb_serial_flush_input+0x10>
    92ee:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    92f0:	movs	r3, #0
    92f2:	ldr	r1, [pc, #32]	; (9314 <usb_serial_flush_input+0x34>)
    92f4:	ldr	r0, [pc, #32]	; (9318 <usb_serial_flush_input+0x38>)
    92f6:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    92f8:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    92fa:	bl	9e60 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    92fe:	ldr	r1, [pc, #24]	; (9318 <usb_serial_flush_input+0x38>)
    9300:	movs	r0, #3
	}
}
    9302:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    9306:	b.w	9eb8 <usb_receive>
    930a:	nop
    930c:	.word	0x2001571c
    9310:	.word	0x20015714
    9314:	.word	0x20015654
    9318:	.word	0x20015740

0000931c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    931c:	ldr	r3, [pc, #36]	; (9344 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    931e:	push	{lr}
    9320:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    9322:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9324:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    9328:	cbnz	r3, 9334 <usb_serial_putchar+0x18>
    932a:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    932e:	add	sp, #12
    9330:	ldr.w	pc, [sp], #4
    9334:	movs	r1, #1
    9336:	add.w	r0, sp, #7
    933a:	bl	9048 <usb_serial_write.part.1>
    933e:	add	sp, #12
    9340:	ldr.w	pc, [sp], #4
    9344:	.word	0x200158d0

00009348 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    9348:	ldr	r3, [pc, #16]	; (935c <usb_serial_write+0x14>)
    934a:	ldrb	r3, [r3, #0]
    934c:	and.w	r2, r3, #255	; 0xff
    9350:	cbz	r3, 9356 <usb_serial_write+0xe>
    9352:	b.w	9048 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9356:	mov	r0, r2
    9358:	bx	lr
    935a:	nop
    935c:	.word	0x200158d0

00009360 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    9360:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    9364:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    9366:	ldr.w	r8, [pc, #64]	; 93a8 <usb_serial_write_buffer_free+0x48>
    936a:	movs	r3, #1
    936c:	ldr	r5, [pc, #48]	; (93a0 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    936e:	mov	r7, r4
    9370:	ldr	r6, [pc, #48]	; (93a4 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    9372:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    9376:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9378:	mov	r0, r5
    937a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    937c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    937e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    9382:	beq.n	9390 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9384:	bl	9edc <usb_transfer_status>
    9388:	lsls	r3, r0, #24
    938a:	it	pl
    938c:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    9390:	cmp	r4, #7
    9392:	bne.n	9376 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    9394:	movs	r3, #0
	return sum;
}
    9396:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    9398:	strb.w	r3, [r8]
	return sum;
}
    939c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93a0:	.word	0x200157c0
    93a4:	.word	0x20015651
    93a8:	.word	0x20015650

000093ac <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    93ac:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    93ae:	ldr	r3, [pc, #80]	; (9400 <usb_serial_flush_output+0x54>)
    93b0:	ldrb	r3, [r3, #0]
    93b2:	cbz	r3, 93ba <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    93b4:	ldr	r4, [pc, #76]	; (9404 <usb_serial_flush_output+0x58>)
    93b6:	ldrh	r2, [r4, #0]
    93b8:	cbnz	r2, 93bc <usb_serial_flush_output+0x10>
    93ba:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    93bc:	ldr	r6, [pc, #72]	; (9408 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    93be:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    93c2:	ldr	r5, [pc, #72]	; (940c <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    93c4:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    93c6:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    93c8:	rsb	r2, r2, #256	; 0x100
    93cc:	ldr	r0, [pc, #64]	; (9410 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    93ce:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    93d2:	ldr	r7, [pc, #64]	; (9414 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    93d4:	add.w	r1, r0, r1, lsl #8
    93d8:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    93da:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    93de:	bl	9e60 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    93e2:	mov	r1, r5
    93e4:	movs	r0, #4
    93e6:	bl	9e90 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    93ea:	ldrb	r3, [r6, #0]
    93ec:	adds	r3, #1
    93ee:	uxtb	r3, r3
    93f0:	cmp	r3, #6
    93f2:	it	hi
    93f4:	movhi	r3, #0
    93f6:	strb	r3, [r6, #0]
	tx_available = 0;
    93f8:	movs	r3, #0
    93fa:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    93fc:	strb	r3, [r7, #0]
    93fe:	pop	{r3, r4, r5, r6, r7, pc}
    9400:	.word	0x200158d0
    9404:	.word	0x200157a0
    9408:	.word	0x20015651
    940c:	.word	0x200157c0
    9410:	.word	0x20014f50
    9414:	.word	0x20015650

00009418 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    9418:	ldr	r2, [pc, #560]	; (964c <set_arm_clock+0x234>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    941a:	ldr	r3, [pc, #564]	; (9650 <set_arm_clock+0x238>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    941c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    941e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    9422:	ldr	r5, [pc, #560]	; (9654 <set_arm_clock+0x23c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9424:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    9426:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    9428:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    942a:	bls.n	9468 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    942c:	ldr	r3, [pc, #552]	; (9658 <set_arm_clock+0x240>)
    942e:	cmp	r0, r3
    9430:	bls.w	9636 <set_arm_clock+0x21e>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    9434:	ldr	r3, [pc, #548]	; (965c <set_arm_clock+0x244>)
    9436:	movw	r6, #1575	; 0x627
    943a:	ldr.w	lr, [pc, #608]	; 969c <set_arm_clock+0x284>
    943e:	add	r3, r0
    9440:	ldr	r5, [pc, #540]	; (9660 <set_arm_clock+0x248>)
    9442:	lsrs	r2, r3, #8
    9444:	umull	r3, r2, lr, r2
    9448:	lsrs	r3, r2, #7
    944a:	add.w	r3, r3, r3, lsl #2
    944e:	add.w	r2, r3, r3, lsl #2
    9452:	addw	r3, r2, #1250	; 0x4e2
    9456:	cmp	r3, r6
    9458:	it	cs
    945a:	movcs	r3, r6
    945c:	sub.w	r3, r3, #800	; 0x320
    9460:	umull	r3, r6, r5, r3
    9464:	lsrs	r6, r6, #3
    9466:	b.n	9472 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    9468:	ldr	r6, [pc, #504]	; (9664 <set_arm_clock+0x24c>)
    946a:	cmp	r0, r6
    946c:	ite	ls
    946e:	movls	r6, #6
    9470:	movhi	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9472:	ldr	r2, [pc, #476]	; (9650 <set_arm_clock+0x238>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9474:	and.w	lr, r7, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9478:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    947c:	cmp	lr, r6
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    947e:	orr.w	r3, r3, #192	; 0xc0
    9482:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9486:	bcs.n	949e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9488:	ldr	r3, [pc, #456]	; (9654 <set_arm_clock+0x23c>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    948a:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    948e:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9490:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    9492:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9494:	ldr	r3, [r2, #0]
    9496:	cmp	r3, #0
    9498:	bge.n	9494 <set_arm_clock+0x7c>
    949a:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    949e:	ands.w	r3, r4, #33554432	; 0x2000000
    94a2:	bne.n	9502 <set_arm_clock+0xea>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    94a4:	ldr	r5, [pc, #448]	; (9668 <set_arm_clock+0x250>)
    94a6:	ldr	r2, [pc, #452]	; (966c <set_arm_clock+0x254>)
    94a8:	ldr.w	ip, [r5, #16]
    94ac:	mov	r5, r2
    94ae:	and.w	r2, ip, r2
    94b2:	cmp	r2, r5
    94b4:	itet	eq
    94b6:	moveq.w	r3, #402653184	; 0x18000000
    94ba:	movne.w	r2, #4096	; 0x1000
    94be:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    94c0:	eor.w	r5, r4, r3
    94c4:	tst.w	r5, #939524096	; 0x38000000
    94c8:	beq.n	94d8 <set_arm_clock+0xc0>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    94ca:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    94ce:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    94d2:	ldr	r5, [pc, #380]	; (9650 <set_arm_clock+0x238>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    94d4:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    94d6:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    94d8:	eor.w	r3, r1, r2
    94dc:	tst.w	r3, #12288	; 0x3000
    94e0:	beq.n	94f4 <set_arm_clock+0xdc>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    94e2:	ldr	r3, [pc, #364]	; (9650 <set_arm_clock+0x238>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    94e4:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    94e8:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    94ea:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    94ec:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    94ee:	ldr	r3, [r2, #72]	; 0x48
    94f0:	lsls	r5, r3, #28
    94f2:	bmi.n	94ee <set_arm_clock+0xd6>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    94f4:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    94f8:	ldr	r2, [pc, #340]	; (9650 <set_arm_clock+0x238>)
    94fa:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    94fc:	ldr	r3, [r2, #72]	; 0x48
    94fe:	lsls	r1, r3, #26
    9500:	bmi.n	94fc <set_arm_clock+0xe4>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    9502:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    9504:	ldr	r5, [pc, #360]	; (9670 <set_arm_clock+0x258>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    9506:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    9508:	mul.w	r3, r1, r2
    950c:	mul.w	r3, r0, r3
    9510:	cmp	r3, r5
    9512:	bhi.n	9528 <set_arm_clock+0x110>
		if (div_arm < 8) {
    9514:	cmp	r2, #7
    9516:	bhi.w	9622 <set_arm_clock+0x20a>
			div_arm = div_arm + 1;
    951a:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    951c:	mul.w	r3, r1, r2
    9520:	mul.w	r3, r0, r3
    9524:	cmp	r3, r5
    9526:	bls.n	9514 <set_arm_clock+0xfc>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9528:	ldr	r0, [pc, #328]	; (9674 <set_arm_clock+0x25c>)
    952a:	ldr	r5, [pc, #332]	; (9678 <set_arm_clock+0x260>)
    952c:	add	r0, r3
    952e:	umull	r3, r0, r5, r0
    9532:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    9534:	cmp	r3, #108	; 0x6c
    9536:	bhi.n	962c <set_arm_clock+0x214>
	if (mult < 54) mult = 54;
    9538:	cmp	r3, #53	; 0x35
    953a:	bhi.n	963a <set_arm_clock+0x222>
    953c:	ldr.w	r8, [pc, #352]	; 96a0 <set_arm_clock+0x288>
    9540:	movs	r3, #54	; 0x36
    9542:	ldr	r0, [pc, #312]	; (967c <set_arm_clock+0x264>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9544:	ldr.w	ip, [pc, #288]	; 9668 <set_arm_clock+0x250>
    9548:	ldr	r5, [pc, #308]	; (9680 <set_arm_clock+0x268>)
    954a:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    954e:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9552:	and.w	r5, r9, r5
    9556:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    9558:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    955c:	beq.n	9576 <set_arm_clock+0x15e>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    955e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9562:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9566:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9568:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    956c:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9570:	ldr	r3, [r5, #0]
    9572:	cmp	r3, #0
    9574:	bge.n	9570 <set_arm_clock+0x158>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    9576:	ldr.w	ip, [pc, #216]	; 9650 <set_arm_clock+0x238>
    957a:	subs	r2, #1
    957c:	ldr.w	r3, [ip, #16]
    9580:	and.w	r3, r3, #7
    9584:	cmp	r3, r2
    9586:	beq.n	9598 <set_arm_clock+0x180>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9588:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    958c:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    958e:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9592:	ldr	r3, [r5, #72]	; 0x48
    9594:	lsls	r3, r3, #15
    9596:	bmi.n	9592 <set_arm_clock+0x17a>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9598:	subs	r1, #1
    959a:	lsls	r1, r1, #10
    959c:	eor.w	r3, r4, r1
    95a0:	tst.w	r3, #7168	; 0x1c00
    95a4:	beq.n	95bc <set_arm_clock+0x1a4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    95a6:	ldr	r3, [pc, #168]	; (9650 <set_arm_clock+0x238>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    95a8:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    95ac:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    95b0:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    95b2:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    95b4:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    95b6:	ldr	r3, [r2, #72]	; 0x48
    95b8:	lsls	r1, r3, #30
    95ba:	bmi.n	95b6 <set_arm_clock+0x19e>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    95bc:	ldr	r3, [pc, #196]	; (9684 <set_arm_clock+0x26c>)
    95be:	ldr	r1, [pc, #200]	; (9688 <set_arm_clock+0x270>)
    95c0:	add	r3, r0
    95c2:	lsrs	r3, r3, #7
    95c4:	umull	r3, r1, r1, r3
    95c8:	lsrs	r1, r1, #12
    95ca:	cmp	r1, #4
    95cc:	it	cs
    95ce:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    95d0:	subs	r3, r1, #1
    95d2:	lsls	r3, r3, #8
    95d4:	eor.w	r2, r4, r3
    95d8:	tst.w	r2, #768	; 0x300
    95dc:	beq.n	95ec <set_arm_clock+0x1d4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    95de:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    95e2:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    95e6:	ldr	r2, [pc, #104]	; (9650 <set_arm_clock+0x238>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    95e8:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    95ea:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    95ec:	ldr	r3, [pc, #96]	; (9650 <set_arm_clock+0x238>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    95ee:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    95f2:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    95f4:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    95f6:	ldr	r3, [r2, #72]	; 0x48
    95f8:	lsls	r3, r3, #26
    95fa:	bmi.n	95f6 <set_arm_clock+0x1de>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    95fc:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    9600:	ldr	r2, [pc, #136]	; (968c <set_arm_clock+0x274>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    9602:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    9604:	ldr	r3, [pc, #136]	; (9690 <set_arm_clock+0x278>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    9606:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    9608:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    960a:	bcs.n	961e <set_arm_clock+0x206>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    960c:	ldr	r3, [pc, #68]	; (9654 <set_arm_clock+0x23c>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    960e:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9612:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9614:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    9616:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9618:	ldr	r3, [r2, #0]
    961a:	cmp	r3, #0
    961c:	bge.n	9618 <set_arm_clock+0x200>
	}

	return frequency;
}
    961e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    9622:	cmp	r1, #4
    9624:	bhi.n	9528 <set_arm_clock+0x110>
				div_ahb = div_ahb + 1;
    9626:	adds	r1, #1
				div_arm = 1;
    9628:	movs	r2, #1
    962a:	b.n	9508 <set_arm_clock+0xf0>
    962c:	ldr.w	r8, [pc, #116]	; 96a4 <set_arm_clock+0x28c>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    9630:	movs	r3, #108	; 0x6c
    9632:	ldr	r0, [pc, #96]	; (9694 <set_arm_clock+0x27c>)
    9634:	b.n	9544 <set_arm_clock+0x12c>
    9636:	movs	r6, #18
    9638:	b.n	9472 <set_arm_clock+0x5a>
    963a:	ldr	r0, [pc, #92]	; (9698 <set_arm_clock+0x280>)
    963c:	ldr.w	r8, [pc, #104]	; 96a8 <set_arm_clock+0x290>
    9640:	mul.w	r0, r0, r3
    9644:	orr.w	r8, r3, r8
    9648:	b.n	9544 <set_arm_clock+0x12c>
    964a:	nop
    964c:	.word	0x1f78a400
    9650:	.word	0x400fc000
    9654:	.word	0x40080000
    9658:	.word	0x23c34600
    965c:	.word	0xdc3cba00
    9660:	.word	0x51eb851f
    9664:	.word	0x016e3600
    9668:	.word	0x400d8000
    966c:	.word	0x80003040
    9670:	.word	0x269fb1ff
    9674:	.word	0x005b8d80
    9678:	.word	0x165e9f81
    967c:	.word	0x269fb200
    9680:	.word	0x8001307f
    9684:	.word	0x08f0d17f
    9688:	.word	0x00e5109f
    968c:	.word	0x20000c98
    9690:	.word	0x20000c94
    9694:	.word	0x4d3f6400
    9698:	.word	0x00b71b00
    969c:	.word	0x004cb223
    96a0:	.word	0x80002036
    96a4:	.word	0x8000206c
    96a8:	.word	0x80002000

000096ac <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    96ac:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    96ae:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    96b0:	cbz	r3, 96ba <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    96b2:	ldr	r3, [r2, #4]
    96b4:	orr.w	r3, r3, #32768	; 0x8000
    96b8:	str	r3, [r2, #4]
	}
	__disable_irq();
    96ba:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    96bc:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    96be:	cbz	r4, 96e8 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    96c0:	ldr	r3, [pc, #64]	; (9704 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    96c2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    96c4:	ldr.w	r4, [r3, #432]	; 0x1b0
    96c8:	tst	r4, r1
    96ca:	bne.n	96fc <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    96cc:	ldr.w	r4, [r3, #320]	; 0x140
    96d0:	orr.w	r4, r4, #16384	; 0x4000
    96d4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    96d8:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    96dc:	ldr.w	r4, [r3, #320]	; 0x140
    96e0:	lsls	r4, r4, #17
    96e2:	bpl.n	96cc <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    96e4:	tst	r1, r5
    96e6:	bne.n	96fc <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    96e8:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    96ea:	ldr	r4, [pc, #24]	; (9704 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    96ec:	str	r2, [r0, #8]
	endpoint->status = 0;
    96ee:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    96f0:	ldr.w	r3, [r4, #432]	; 0x1b0
    96f4:	orrs	r1, r3
    96f6:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    96fa:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    96fc:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    96fe:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9700:	pop	{r4, r5}
    9702:	bx	lr
    9704:	.word	0x402e0000

00009708 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9708:	push	{r3, r4, r5, lr}
    970a:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    970c:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    970e:	b.n	971e <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    9710:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    9712:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    9714:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    9716:	ldr	r2, [r5, #52]	; 0x34
    9718:	mov	r3, r4
    971a:	cmp	r4, r2
    971c:	beq.n	9730 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    971e:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    9720:	cbz	r3, 9730 <run_callbacks+0x28>
    9722:	cmp	r3, #1
    9724:	beq.n	9730 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    9726:	ldr	r2, [r3, #4]
    9728:	lsls	r2, r2, #24
    972a:	bpl.n	9710 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    972c:	str	r3, [r5, #48]	; 0x30
			return;
    972e:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    9730:	movs	r3, #0
    9732:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    9734:	str	r3, [r5, #52]	; 0x34
    9736:	pop	{r3, r4, r5, pc}

00009738 <endpoint0_transmit.constprop.0>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    9738:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    973a:	cbnz	r1, 977a <endpoint0_transmit.constprop.0+0x42>
    973c:	ldr	r4, [pc, #136]	; (97c8 <endpoint0_transmit.constprop.0+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    973e:	ldr	r1, [pc, #140]	; (97cc <endpoint0_transmit.constprop.0+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9740:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9742:	ldr	r3, [pc, #140]	; (97d0 <endpoint0_transmit.constprop.0+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9744:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9746:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    9748:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    974a:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    974c:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    974e:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    9750:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9752:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9756:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9758:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    975c:	ldr	r5, [pc, #116]	; (97d4 <endpoint0_transmit.constprop.0+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    975e:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    9762:	ldr.w	r1, [r3, #432]	; 0x1b0
    9766:	orr.w	r1, r1, #1
    976a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    976e:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    9770:	ldr.w	r3, [r2, #432]	; 0x1b0
    9774:	cmp	r3, #0
    9776:	bne.n	9770 <endpoint0_transmit.constprop.0+0x38>
}
    9778:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    977a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    977c:	ldr	r3, [pc, #88]	; (97d8 <endpoint0_transmit.constprop.0+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    977e:	ldr	r5, [pc, #80]	; (97d0 <endpoint0_transmit.constprop.0+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9780:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9782:	ldr	r4, [pc, #68]	; (97c8 <endpoint0_transmit.constprop.0+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9784:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    9788:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    978a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    978c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    978e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    9792:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9794:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9798:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    979a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    979e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    97a2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    97a6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    97a8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    97aa:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97ae:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    97b2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    97b6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    97b8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    97ba:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    97be:	ldr.w	r3, [r2, #432]	; 0x1b0
    97c2:	cmp	r3, #0
    97c4:	bne.n	97be <endpoint0_transmit.constprop.0+0x86>
    97c6:	b.n	973e <endpoint0_transmit.constprop.0+0x6>
    97c8:	.word	0x20017000
    97cc:	.word	0x20016020
    97d0:	.word	0x402e0000
    97d4:	.word	0x200158b0
    97d8:	.word	0x20016000

000097dc <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    97dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    97e0:	ldr	r4, [pc, #748]	; (9ad0 <isr+0x2f4>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    97e2:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    97e4:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    97e8:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    97ec:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    97f0:	beq.n	98b0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    97f2:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    97f6:	cmp	r3, #0
    97f8:	beq.n	98a6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    97fa:	mov.w	r9, #65537	; 0x10001
    97fe:	ldr.w	fp, [pc, #752]	; 9af0 <isr+0x314>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9802:	mov	r6, r4
    9804:	ldr	r7, [pc, #716]	; (9ad4 <isr+0x2f8>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9806:	mov	sl, r9
    9808:	ldr	r1, [r7, #40]	; 0x28
    980a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    980c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9810:	ldr.w	r3, [r4, #320]	; 0x140
    9814:	orr.w	r3, r3, #8192	; 0x2000
    9818:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    981c:	ldr.w	r3, [r4, #320]	; 0x140
    9820:	lsls	r5, r3, #18
    9822:	bpl.n	9810 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    9824:	ldr.w	r3, [r6, #320]	; 0x140
    9828:	bic.w	r3, r3, #8192	; 0x2000
    982c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9830:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    9834:	ldr.w	r3, [r4, #436]	; 0x1b4
    9838:	ands.w	r3, r3, #65537	; 0x10001
    983c:	bne.n	9834 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    983e:	uxth	r0, r1
    9840:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    9844:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9848:	cmp	r0, r5
    984a:	bhi.w	997a <isr+0x19e>
    984e:	cmp.w	r0, #1664	; 0x680
    9852:	bcs.w	9c06 <isr+0x42a>
    9856:	cmp.w	r0, #258	; 0x102
    985a:	beq.w	9b0c <isr+0x330>
    985e:	bhi.w	9a0c <isr+0x230>
    9862:	cmp	r0, #128	; 0x80
    9864:	beq.w	9ab4 <isr+0x2d8>
    9868:	cmp	r0, #130	; 0x82
    986a:	bne.w	99fc <isr+0x220>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    986e:	uxth	r2, r2
    9870:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9874:	cmp	r1, #7
    9876:	bhi.w	99fc <isr+0x220>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    987a:	lsls	r1, r1, #2
    987c:	ldr	r0, [pc, #600]	; (9ad8 <isr+0x2fc>)
		reply_buffer[0] = 0;
    987e:	ldr	r5, [pc, #604]	; (9adc <isr+0x300>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9880:	add	r0, r1
    9882:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9884:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    9886:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    9888:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    988a:	bpl.w	9c58 <isr+0x47c>
    988e:	lsls	r1, r1, #15
    9890:	bpl.n	9896 <isr+0xba>
			reply_buffer[0] = 1;
    9892:	movs	r3, #1
    9894:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    9896:	movs	r1, #2
    9898:	ldr	r0, [pc, #576]	; (9adc <isr+0x300>)
    989a:	bl	9738 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    989e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    98a2:	cmp	r3, #0
    98a4:	bne.n	9808 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    98a6:	ldr	r2, [pc, #552]	; (9ad0 <isr+0x2f4>)
    98a8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    98ac:	cmp	r3, #0
    98ae:	bne.n	993a <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    98b0:	tst.w	r8, #64	; 0x40
    98b4:	beq.n	98e8 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    98b6:	ldr	r3, [pc, #536]	; (9ad0 <isr+0x2f4>)
    98b8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    98bc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    98be:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    98c2:	ldr.w	r1, [r3, #444]	; 0x1bc
    98c6:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    98ca:	ldr.w	r4, [r2, #432]	; 0x1b0
    98ce:	ldr	r3, [pc, #512]	; (9ad0 <isr+0x2f4>)
    98d0:	cmp	r4, #0
    98d2:	bne.n	98ca <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    98d4:	mov.w	r2, #4294967295
    98d8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    98dc:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    98e0:	bl	91a4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    98e4:	ldr	r3, [pc, #504]	; (9ae0 <isr+0x304>)
    98e6:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    98e8:	tst.w	r8, #16777216	; 0x1000000
    98ec:	beq.n	98f6 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    98ee:	ldr	r3, [pc, #500]	; (9ae4 <isr+0x308>)
    98f0:	ldr	r3, [r3, #0]
    98f2:	cbz	r3, 98f6 <isr+0x11a>
    98f4:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    98f6:	tst.w	r8, #33554432	; 0x2000000
    98fa:	beq.n	9904 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    98fc:	ldr	r3, [pc, #488]	; (9ae8 <isr+0x30c>)
    98fe:	ldr	r3, [r3, #0]
    9900:	cbz	r3, 9904 <isr+0x128>
    9902:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    9904:	tst.w	r8, #4
    9908:	beq.n	9910 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    990a:	ldr	r3, [pc, #452]	; (9ad0 <isr+0x2f4>)
    990c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    9910:	ldr	r3, [pc, #444]	; (9ad0 <isr+0x2f4>)
    9912:	ldr.w	r2, [r3, #328]	; 0x148
    9916:	lsls	r2, r2, #24
    9918:	bpl.n	9934 <isr+0x158>
    991a:	tst.w	r8, #128	; 0x80
    991e:	beq.n	9934 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    9920:	ldr	r1, [pc, #456]	; (9aec <isr+0x310>)
    9922:	ldrb	r2, [r1, #0]
    9924:	cmp	r2, #0
    9926:	beq.w	9c46 <isr+0x46a>
			if (--usb_reboot_timer == 0) {
    992a:	subs	r3, r2, #1
    992c:	uxtb	r3, r3
    992e:	strb	r3, [r1, #0]
    9930:	cbnz	r3, 9934 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    9932:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    9934:	add	sp, #12
    9936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    993a:	ldr	r1, [pc, #436]	; (9af0 <isr+0x314>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    993c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    9940:	ldr	r0, [r1, #0]
    9942:	tst	r3, r0
    9944:	bne.w	9ce0 <isr+0x504>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    9948:	ldr	r2, [pc, #404]	; (9ae0 <isr+0x304>)
    994a:	ldr	r4, [r2, #0]
			if (completestatus) {
    994c:	ands	r4, r3
    994e:	beq.n	98b0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    9950:	lsls	r3, r4, #29
    9952:	bmi.w	9d1a <isr+0x53e>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    9956:	lsls	r7, r4, #13
    9958:	bmi.w	9d3a <isr+0x55e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    995c:	lsls	r6, r4, #28
    995e:	bmi.w	9d32 <isr+0x556>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    9962:	lsls	r5, r4, #12
    9964:	bmi.w	9d2a <isr+0x54e>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    9968:	lsls	r0, r4, #27
    996a:	bmi.w	9d22 <isr+0x546>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    996e:	lsls	r1, r4, #11
    9970:	bpl.n	98b0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9972:	ldr	r0, [pc, #384]	; (9af4 <isr+0x318>)
    9974:	bl	9708 <run_callbacks>
    9978:	b.n	98b0 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    997a:	movw	r5, #8225	; 0x2021
    997e:	cmp	r0, r5
    9980:	beq.n	99f4 <isr+0x218>
    9982:	bhi.n	9a64 <isr+0x288>
    9984:	cmp.w	r0, #2176	; 0x880
    9988:	beq.w	9bea <isr+0x40e>
    998c:	cmp.w	r0, #2304	; 0x900
    9990:	bne.n	99fc <isr+0x220>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    9992:	ubfx	r1, r1, #16, #8
    9996:	ldr	r2, [pc, #352]	; (9af8 <isr+0x31c>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9998:	ldr	r0, [pc, #352]	; (9afc <isr+0x320>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    999a:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    999c:	ldr	r1, [pc, #352]	; (9b00 <isr+0x324>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    999e:	ldr	r2, [pc, #356]	; (9b04 <isr+0x328>)
    99a0:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    99a2:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    99a6:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    99aa:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    99ae:	bl	91a8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    99b2:	ldr	r2, [pc, #340]	; (9b08 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    99b4:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    99b6:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    99b8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    99ba:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    99bc:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    99be:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    99c0:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    99c4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    99c6:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    99ca:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    99cc:	str.w	r1, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    99d0:	ldr.w	r2, [r6, #432]	; 0x1b0
    99d4:	orr.w	r2, r2, #65536	; 0x10000
    99d8:	str.w	r2, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    99dc:	ldr	r2, [pc, #272]	; (9af0 <isr+0x314>)
    99de:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    99e0:	ldr.w	r3, [r4, #432]	; 0x1b0
    99e4:	cmp	r3, #0
    99e6:	bne.n	99e0 <isr+0x204>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    99e8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    99ec:	cmp	r3, #0
    99ee:	bne.w	9808 <isr+0x2c>
    99f2:	b.n	98a6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    99f4:	lsrs	r0, r2, #16
    99f6:	cmp	r0, #7
    99f8:	beq.w	9c60 <isr+0x484>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    99fc:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9a00:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9a04:	cmp	r3, #0
    9a06:	bne.w	9808 <isr+0x2c>
    9a0a:	b.n	98a6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9a0c:	movw	r5, #770	; 0x302
    9a10:	cmp	r0, r5
    9a12:	beq.w	9b84 <isr+0x3a8>
    9a16:	cmp.w	r0, #1280	; 0x500
    9a1a:	bne.n	99fc <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9a1c:	ldr	r2, [pc, #232]	; (9b08 <isr+0x32c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9a1e:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9a20:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9a22:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9a24:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9a26:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a28:	ldr.w	r0, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9a2c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a2e:	orr.w	r3, r0, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9a32:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a34:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9a38:	ldr.w	r3, [r6, #432]	; 0x1b0
    9a3c:	orr.w	r3, r3, #65536	; 0x10000
    9a40:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9a44:	ldr.w	r3, [r4, #432]	; 0x1b0
    9a48:	cmp	r3, #0
    9a4a:	bne.n	9a44 <isr+0x268>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9a4c:	lsrs	r3, r1, #16
    9a4e:	lsls	r3, r3, #25
    9a50:	orr.w	r3, r3, #16777216	; 0x1000000
    9a54:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9a58:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9a5c:	cmp	r3, #0
    9a5e:	bne.w	9808 <isr+0x2c>
    9a62:	b.n	98a6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9a64:	movw	r3, #8737	; 0x2221
    9a68:	cmp	r0, r3
    9a6a:	beq.w	9b72 <isr+0x396>
    9a6e:	movw	r3, #8993	; 0x2321
    9a72:	cmp	r0, r3
    9a74:	bne.n	99fc <isr+0x220>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9a76:	ldr	r3, [pc, #144]	; (9b08 <isr+0x32c>)
    9a78:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9a7a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9a7c:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9a7e:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9a80:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a82:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9a86:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a88:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9a8c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9a8e:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9a90:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9a94:	ldr.w	r3, [r4, #432]	; 0x1b0
    9a98:	orr.w	r3, r3, #65536	; 0x10000
    9a9c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9aa0:	ldr.w	r3, [r4, #432]	; 0x1b0
    9aa4:	cmp	r3, #0
    9aa6:	bne.n	9aa0 <isr+0x2c4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9aa8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9aac:	cmp	r3, #0
    9aae:	bne.w	9808 <isr+0x2c>
    9ab2:	b.n	98a6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9ab4:	ldr	r2, [pc, #36]	; (9adc <isr+0x300>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    9ab6:	movs	r1, #2
    9ab8:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9aba:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    9abc:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    9abe:	bl	9738 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9ac2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9ac6:	cmp	r3, #0
    9ac8:	bne.w	9808 <isr+0x2c>
    9acc:	b.n	98a6 <isr+0xca>
    9ace:	nop
    9ad0:	.word	0x402e0000
    9ad4:	.word	0x20017000
    9ad8:	.word	0x402e01c0
    9adc:	.word	0x200158c0
    9ae0:	.word	0x200158a8
    9ae4:	.word	0x200158a4
    9ae8:	.word	0x200158ac
    9aec:	.word	0x200158b4
    9af0:	.word	0x200158b0
    9af4:	.word	0x20017240
    9af8:	.word	0x200158d0
    9afc:	.word	0x00cc0002
    9b00:	.word	0x000200c8
    9b04:	.word	0x00c80002
    9b08:	.word	0x20016020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9b0c:	uxth	r2, r2
    9b0e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9b12:	cmp	r3, #7
    9b14:	bhi.w	99fc <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9b18:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9b1c:	mov.w	r3, r3, lsl #2
    9b20:	ldr	r2, [pc, #544]	; (9d44 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9b22:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9b26:	add	r2, r3
    9b28:	ldr	r3, [r2, #0]
    9b2a:	ite	ne
    9b2c:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    9b30:	biceq.w	r3, r3, #1
    9b34:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9b36:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9b38:	ldr	r3, [pc, #524]	; (9d48 <isr+0x56c>)
    9b3a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9b3c:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9b3e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9b40:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9b44:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9b46:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9b4a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9b4c:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9b4e:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9b52:	ldr.w	r3, [r4, #432]	; 0x1b0
    9b56:	orr.w	r3, r3, #65536	; 0x10000
    9b5a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9b5e:	ldr.w	r3, [r4, #432]	; 0x1b0
    9b62:	cmp	r3, #0
    9b64:	bne.n	9b5e <isr+0x382>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9b66:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9b6a:	cmp	r3, #0
    9b6c:	bne.w	9808 <isr+0x2c>
    9b70:	b.n	98a6 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b72:	ldr	r3, [pc, #472]	; (9d4c <isr+0x570>)
		usb_cdc_line_rtsdtr = setup.wValue;
    9b74:	ubfx	r1, r1, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b78:	ldr	r2, [pc, #468]	; (9d50 <isr+0x574>)
    9b7a:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9b7c:	ldr	r3, [pc, #468]	; (9d54 <isr+0x578>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b7e:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9b80:	strb	r1, [r3, #0]
    9b82:	b.n	9a76 <isr+0x29a>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9b84:	uxth	r2, r2
    9b86:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9b8a:	cmp	r3, #7
    9b8c:	bhi.w	99fc <isr+0x220>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9b90:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9b94:	mov.w	r3, r3, lsl #2
    9b98:	ldr	r2, [pc, #424]	; (9d44 <isr+0x568>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9b9a:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9b9e:	add	r2, r3
    9ba0:	ldr	r3, [r2, #0]
    9ba2:	ite	ne
    9ba4:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9ba8:	orreq.w	r3, r3, #1
    9bac:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9bae:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9bb0:	ldr	r3, [pc, #404]	; (9d48 <isr+0x56c>)
    9bb2:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9bb4:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9bb6:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9bb8:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9bbc:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9bbe:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9bc2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9bc4:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9bc6:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9bca:	ldr.w	r3, [r4, #432]	; 0x1b0
    9bce:	orr.w	r3, r3, #65536	; 0x10000
    9bd2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9bd6:	ldr.w	r3, [r4, #432]	; 0x1b0
    9bda:	cmp	r3, #0
    9bdc:	bne.n	9bd6 <isr+0x3fa>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9bde:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9be2:	cmp	r3, #0
    9be4:	bne.w	9808 <isr+0x2c>
    9be8:	b.n	98a6 <isr+0xca>
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9bea:	ldr	r2, [pc, #364]	; (9d58 <isr+0x57c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9bec:	movs	r1, #1
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9bee:	ldr	r3, [pc, #364]	; (9d5c <isr+0x580>)
    9bf0:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9bf2:	mov	r0, r3
		usb_rawhid_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9bf4:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9bf6:	bl	9738 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9bfa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9bfe:	cmp	r3, #0
    9c00:	bne.w	9808 <isr+0x2c>
    9c04:	b.n	98a6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9c06:	ldr	r3, [pc, #344]	; (9d60 <isr+0x584>)
    9c08:	ldr	r0, [r3, #4]
    9c0a:	cmp	r0, #0
    9c0c:	beq.w	99fc <isr+0x220>
    9c10:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9c12:	uxth.w	lr, r2
    9c16:	b.n	9c22 <isr+0x446>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9c18:	adds	r3, #12
    9c1a:	ldr	r0, [r3, #4]
    9c1c:	cmp	r0, #0
    9c1e:	beq.w	99fc <isr+0x220>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9c22:	ldrh	r5, [r3, #0]
    9c24:	cmp	r5, r1
    9c26:	bne.n	9c18 <isr+0x43c>
    9c28:	ldrh	r5, [r3, #2]
    9c2a:	cmp	r5, lr
    9c2c:	bne.n	9c18 <isr+0x43c>
				if ((setup.wValue >> 8) == 3) {
    9c2e:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9c30:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    9c32:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9c34:	ite	eq
    9c36:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    9c38:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    9c3a:	cmp	r1, r2
    9c3c:	it	cs
    9c3e:	movcs	r1, r2
    9c40:	bl	9738 <endpoint0_transmit.constprop.0>
    9c44:	b.n	989e <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    9c46:	ldr.w	r2, [r3, #328]	; 0x148
    9c4a:	bic.w	r2, r2, #128	; 0x80
    9c4e:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    9c52:	add	sp, #12
    9c54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9c58:	lsls	r2, r1, #31
    9c5a:	bpl.w	9896 <isr+0xba>
    9c5e:	b.n	9892 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9c60:	ldr	r5, [pc, #256]	; (9d64 <isr+0x588>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9c62:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    9c64:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9c66:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9c68:	ldr	r3, [pc, #252]	; (9d68 <isr+0x58c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9c6a:	ldr	r1, [pc, #256]	; (9d6c <isr+0x590>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9c6c:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9c6e:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9c70:	ldr	r1, [pc, #252]	; (9d70 <isr+0x594>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9c72:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9c76:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9c78:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9c7c:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9c80:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9c84:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9c88:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9c8a:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9c8c:	sub.w	r0, r1, #4096	; 0x1000
    9c90:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9c92:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9c96:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9c98:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9c9a:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    9c9e:	ldr.w	r3, [r4, #432]	; 0x1b0
    9ca2:	cmp	r3, #0
    9ca4:	bne.n	9c9e <isr+0x4c2>
	}
	endpoint0_transfer_ack.next = 1;
    9ca6:	ldr	r2, [pc, #160]	; (9d48 <isr+0x56c>)
    9ca8:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9caa:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9cae:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9cb0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9cb2:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9cb6:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9cb8:	ldr.w	r1, [r6, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9cbc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9cbe:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9cc2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9cc4:	str.w	r3, [r6, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9cc8:	ldr.w	r3, [r6, #432]	; 0x1b0
    9ccc:	orrs	r3, r0
    9cce:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9cd2:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    9cd6:	ldr.w	r3, [r4, #432]	; 0x1b0
    9cda:	cmp	r3, #0
    9cdc:	bne.n	9cd6 <isr+0x4fa>
    9cde:	b.n	989e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9ce0:	ldr	r4, [pc, #128]	; (9d64 <isr+0x588>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9ce2:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    9ce6:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9ce8:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    9cea:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9cec:	cmp	r4, r0
    9cee:	bne.w	9948 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9cf2:	ldr	r1, [pc, #128]	; (9d74 <isr+0x598>)
    9cf4:	ldr	r4, [pc, #128]	; (9d78 <isr+0x59c>)
    9cf6:	ldmia	r1, {r0, r1}
    9cf8:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9cfa:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9cfc:	str	r0, [r4, #0]
    9cfe:	strh	r1, [r4, #4]
    9d00:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9d02:	bne.w	9948 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    9d06:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9d0a:	movs	r4, #80	; 0x50
    9d0c:	ldr	r0, [pc, #108]	; (9d7c <isr+0x5a0>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    9d0e:	orr.w	r1, r1, #128	; 0x80
    9d12:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9d16:	strb	r4, [r0, #0]
    9d18:	b.n	9948 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    9d1a:	ldr	r0, [pc, #100]	; (9d80 <isr+0x5a4>)
    9d1c:	bl	9708 <run_callbacks>
    9d20:	b.n	9956 <isr+0x17a>
    9d22:	ldr	r0, [pc, #96]	; (9d84 <isr+0x5a8>)
    9d24:	bl	9708 <run_callbacks>
    9d28:	b.n	996e <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9d2a:	ldr	r0, [pc, #92]	; (9d88 <isr+0x5ac>)
    9d2c:	bl	9708 <run_callbacks>
    9d30:	b.n	9968 <isr+0x18c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    9d32:	ldr	r0, [pc, #88]	; (9d8c <isr+0x5b0>)
    9d34:	bl	9708 <run_callbacks>
    9d38:	b.n	9962 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9d3a:	ldr	r0, [pc, #84]	; (9d90 <isr+0x5b4>)
    9d3c:	bl	9708 <run_callbacks>
    9d40:	b.n	995c <isr+0x180>
    9d42:	nop
    9d44:	.word	0x402e01c0
    9d48:	.word	0x20016020
    9d4c:	.word	0x200158d8
    9d50:	.word	0x2001596c
    9d54:	.word	0x200158a1
    9d58:	.word	0x200158d0
    9d5c:	.word	0x200158c0
    9d60:	.word	0x200006a0
    9d64:	.word	0x200158b8
    9d68:	.word	0x20016000
    9d6c:	.word	0x00070080
    9d70:	.word	0x200178c8
    9d74:	.word	0x200158c8
    9d78:	.word	0x20015964
    9d7c:	.word	0x200158b4
    9d80:	.word	0x20017100
    9d84:	.word	0x20017200
    9d88:	.word	0x200171c0
    9d8c:	.word	0x20017180
    9d90:	.word	0x20017140

00009d94 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9d94:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9d96:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9d9a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9d9e:	ite	ne
    9da0:	movne	r7, #0
    9da2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9da6:	cmp	r2, #2
    9da8:	bls.n	9dae <usb_config_rx+0x1a>
    9daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9dae:	mov.w	sl, r0, lsl #7
    9db2:	ldr.w	r9, [pc, #64]	; 9df4 <usb_config_rx+0x60>
    9db6:	mov	r5, r1
    9db8:	mov	r4, r0
    9dba:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9dbe:	movs	r1, #0
    9dc0:	movs	r2, #64	; 0x40
    9dc2:	mov	r8, r3
    9dc4:	mov	r0, r6
    9dc6:	bl	b2c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9dca:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9dcc:	orr.w	r1, r7, r5, lsl #16
    9dd0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9dd4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9dd8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    9dda:	cmp.w	r8, #0
    9dde:	beq.n	9daa <usb_config_rx+0x16>
    9de0:	ldr	r3, [pc, #12]	; (9df0 <usb_config_rx+0x5c>)
    9de2:	lsls	r0, r4
    9de4:	ldr	r4, [r3, #0]
    9de6:	orrs	r0, r4
    9de8:	str	r0, [r3, #0]
    9dea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dee:	nop
    9df0:	.word	0x200158a8
    9df4:	.word	0x20017000

00009df8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9df8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9dfa:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9dfe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e02:	ite	ne
    9e04:	movne	r7, #0
    9e06:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9e0a:	cmp	r2, #2
    9e0c:	bls.n	9e12 <usb_config_tx+0x1a>
    9e0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9e12:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9e14:	lsls	r5, r0, #7
    9e16:	ldr.w	r9, [pc, #68]	; 9e5c <usb_config_tx+0x64>
    9e1a:	mov	r8, r1
    9e1c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9e1e:	movs	r1, #0
    9e20:	mov	r4, r0
    9e22:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9e24:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9e28:	mov	r0, sl
    9e2a:	bl	b2c8 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9e2e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9e30:	orr.w	r1, r7, r8, lsl #16
    9e34:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9e38:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9e3c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9e40:	cmp	r6, #0
    9e42:	beq.n	9e0e <usb_config_tx+0x16>
    9e44:	add.w	r0, r4, #16
    9e48:	ldr	r3, [pc, #12]	; (9e58 <usb_config_tx+0x60>)
    9e4a:	lsls	r2, r0
    9e4c:	ldr	r0, [r3, #0]
    9e4e:	orrs	r2, r0
    9e50:	str	r2, [r3, #0]
    9e52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e56:	nop
    9e58:	.word	0x200158a8
    9e5c:	.word	0x20017000

00009e60 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9e60:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9e62:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9e64:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9e66:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    9e6a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9e6c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9e6e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9e70:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9e74:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9e78:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9e7c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9e80:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9e82:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9e84:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    9e86:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9e88:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    9e8a:	pop	{r4, r5, r6, r7}
    9e8c:	bx	lr
    9e8e:	nop

00009e90 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9e90:	subs	r3, r0, #2
    9e92:	cmp	r3, #2
    9e94:	bls.n	9e98 <usb_transmit+0x8>
    9e96:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9e98:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9e9a:	ldr	r3, [pc, #24]	; (9eb4 <usb_transmit+0x24>)
    9e9c:	add.w	r4, r0, #16
    9ea0:	movs	r5, #1
    9ea2:	mov	r2, r1
    9ea4:	add.w	r0, r3, r0, lsl #7
    9ea8:	lsl.w	r1, r5, r4
}
    9eac:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9eae:	b.w	96ac <schedule_transfer>
    9eb2:	nop
    9eb4:	.word	0x20017040

00009eb8 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9eb8:	subs	r3, r0, #2
    9eba:	cmp	r3, #2
    9ebc:	bls.n	9ec0 <usb_receive+0x8>
    9ebe:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    9ec0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9ec2:	ldr	r3, [pc, #20]	; (9ed8 <usb_receive+0x20>)
    9ec4:	movs	r4, #1
    9ec6:	mov	r2, r1
    9ec8:	lsl.w	r1, r4, r0
    9ecc:	add.w	r0, r3, r0, lsl #7
}
    9ed0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9ed4:	b.w	96ac <schedule_transfer>
    9ed8:	.word	0x20017000

00009edc <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    9edc:	ldr	r2, [pc, #32]	; (9f00 <usb_transfer_status+0x24>)
    9ede:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    9ee2:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    9ee4:	orr.w	r3, r3, #16384	; 0x4000
    9ee8:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    9eec:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    9eee:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    9ef2:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    9ef4:	tst.w	r3, #16384	; 0x4000
    9ef8:	beq.n	9ee2 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    9efa:	mov	r0, r1
    9efc:	bx	lr
    9efe:	nop
    9f00:	.word	0x402e0000

00009f04 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9f04:	cmp	r0, #0
    9f06:	beq.n	9fae <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    9f08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f0c:	mov	r9, r0
    9f0e:	sub	sp, #12
    9f10:	ldr	r4, [pc, #156]	; (9fb0 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9f12:	movs	r0, #1
    9f14:	ldr	r5, [pc, #156]	; (9fb4 <delay+0xb0>)
    9f16:	ldr	r6, [pc, #160]	; (9fb8 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9f18:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9f1c:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9f1e:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9f20:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    9f24:	cmp	r3, #0
    9f26:	bne.n	9f18 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9f28:	ldr	r7, [pc, #144]	; (9fbc <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9f2a:	mov.w	lr, #1000	; 0x3e8
    9f2e:	ldr	r0, [pc, #144]	; (9fc0 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    9f30:	ldr.w	ip, [r7]
    9f34:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9f36:	add.w	r7, r7, #1660944384	; 0x63000000
    9f3a:	ldr	r3, [r0, #0]
    9f3c:	rsb	r1, r1, ip
    9f40:	add.w	r7, r7, #1818624	; 0x1bc000
    9f44:	addw	r7, r7, #3711	; 0xe7f
    9f48:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9f4c:	mov	sl, r7
    9f4e:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9f50:	lsrs	r3, r3, #18
    9f52:	udiv	r3, r1, r3
    9f56:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9f5a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9f5e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9f60:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9f62:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    9f66:	cmp	r3, #0
    9f68:	bne.n	9f5a <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9f6a:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9f6e:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9f72:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9f74:	mul.w	r2, lr, r2
    9f78:	rsb	r1, r1, ip
    9f7c:	umull	r3, lr, sl, r3
    9f80:	rsb	r3, r8, r2
    9f84:	mov.w	r2, lr, lsr #18
    9f88:	udiv	r1, r1, r2
    9f8c:	adds	r2, r1, r3
    9f8e:	cmp.w	r2, #1000	; 0x3e8
    9f92:	bcc.n	9fa4 <delay+0xa0>
			if (--msec == 0) return;
    9f94:	subs.w	r9, r9, #1
			start += 1000;
    9f98:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    9f9c:	bne.n	9f5a <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    9f9e:	add	sp, #12
    9fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fa4:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    9fa6:	bl	a17c <yield>
	}
    9faa:	ldr	r0, [sp, #4]
    9fac:	b.n	9f5a <delay+0x56>
    9fae:	bx	lr
    9fb0:	.word	0x20017280
    9fb4:	.word	0x200158d8
    9fb8:	.word	0x200158d4
    9fbc:	.word	0xe0001004
    9fc0:	.word	0x20000c98

00009fc4 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    9fc4:	push	{r4, r5, r6}
    9fc6:	ldr	r3, [pc, #56]	; (a000 <micros+0x3c>)
    9fc8:	movs	r6, #1
    9fca:	ldr	r5, [pc, #56]	; (a004 <micros+0x40>)
    9fcc:	ldr	r0, [pc, #56]	; (a008 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9fce:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9fd2:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    9fd4:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9fd6:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    9fda:	cmp	r2, #0
    9fdc:	bne.n	9fce <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    9fde:	ldr	r3, [pc, #44]	; (a00c <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9fe0:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9fe4:	ldr	r2, [pc, #40]	; (a010 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    9fe6:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    9fe8:	ldr	r5, [pc, #40]	; (a014 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    9fea:	ldr	r2, [r2, #0]
	return usec;
    9fec:	subs	r4, r3, r4
    9fee:	umull	r2, r3, r5, r2
    9ff2:	lsrs	r3, r3, #18
    9ff4:	udiv	r4, r4, r3
}
    9ff8:	mla	r0, r0, r1, r4
    9ffc:	pop	{r4, r5, r6}
    9ffe:	bx	lr
    a000:	.word	0x20017280
    a004:	.word	0x200158d8
    a008:	.word	0x200158d4
    a00c:	.word	0xe0001004
    a010:	.word	0x20000c98
    a014:	.word	0x431bde83

0000a018 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    a018:	cmp	r0, #28
    a01a:	bhi.n	a048 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    a01c:	ldr	r1, [pc, #68]	; (a064 <analogRead+0x4c>)
    a01e:	ldrb	r3, [r1, #0]
    a020:	cbz	r3, a02e <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    a022:	ldr	r2, [pc, #68]	; (a068 <analogRead+0x50>)
    a024:	ldr	r3, [r2, #72]	; 0x48
    a026:	ands.w	r3, r3, #128	; 0x80
    a02a:	bne.n	a024 <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    a02c:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    a02e:	ldr	r3, [pc, #60]	; (a06c <analogRead+0x54>)
    a030:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    a032:	lsls	r2, r3, #24
    a034:	bmi.n	a04c <analogRead+0x34>
		ADC1_HC0 = ch;
    a036:	ldr	r2, [pc, #48]	; (a068 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    a038:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    a03a:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    a03c:	ldr	r3, [r1, #32]
    a03e:	ldr	r2, [pc, #40]	; (a068 <analogRead+0x50>)
    a040:	lsls	r0, r3, #31
    a042:	bpl.n	a03c <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    a044:	ldr	r0, [r2, #36]	; 0x24
    a046:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    a048:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    a04a:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    a04c:	ldr	r2, [pc, #32]	; (a070 <analogRead+0x58>)
    a04e:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    a052:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    a054:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    a056:	ldr	r3, [r1, #32]
    a058:	ldr	r2, [pc, #20]	; (a070 <analogRead+0x58>)
    a05a:	lsls	r3, r3, #31
    a05c:	bpl.n	a056 <analogRead+0x3e>
		return ADC2_R0;
    a05e:	ldr	r0, [r2, #36]	; 0x24
    a060:	bx	lr
    a062:	nop
    a064:	.word	0x200158dc
    a068:	.word	0x400c4000
    a06c:	.word	0x20000404
    a070:	.word	0x400c8000

0000a074 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a074:	lsls	r0, r0, #4
    a076:	ldr	r3, [pc, #28]	; (a094 <digitalWrite.part.0+0x20>)
    a078:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    a07a:	ldr	r3, [r3, r0]
	mask = p->mask;
    a07c:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    a07e:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    a080:	tst	r0, r2
    a082:	beq.n	a08a <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    a084:	cbnz	r1, a08c <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    a086:	str.w	r2, [r3, #136]	; 0x88
    a08a:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    a08c:	str.w	r2, [r3, #132]	; 0x84
    a090:	bx	lr
    a092:	nop
    a094:	.word	0x20000420

0000a098 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    a098:	cmp	r0, #39	; 0x27
    a09a:	bhi.n	a0a0 <digitalWrite+0x8>
    a09c:	b.w	a074 <digitalWrite.part.0>
    a0a0:	bx	lr
    a0a2:	nop

0000a0a4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    a0a4:	cmp	r0, #39	; 0x27
    a0a6:	bhi.n	a0e2 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    a0a8:	lsls	r0, r0, #4
    a0aa:	ldr	r2, [pc, #104]	; (a114 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a0ac:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    a0ae:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a0b2:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    a0b4:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a0b6:	beq.n	a0e4 <pinMode+0x40>
    a0b8:	cmp	r1, #4
    a0ba:	beq.n	a0e4 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a0bc:	ldr	r4, [r3, #12]
    a0be:	ldr	r2, [r0, #4]
    a0c0:	bic.w	r2, r2, r4
    a0c4:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a0c6:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    a0c8:	cbz	r1, a106 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    a0ca:	cmp	r1, #2
    a0cc:	beq.n	a10c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    a0ce:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a0d0:	ldr	r3, [r3, #4]
}
    a0d2:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    a0d6:	ite	eq
    a0d8:	ldreq	r1, [pc, #60]	; (a118 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    a0da:	ldrne	r1, [pc, #64]	; (a11c <pinMode+0x78>)
    a0dc:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    a0de:	movs	r2, #21
    a0e0:	str	r2, [r3, #0]
}
    a0e2:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a0e4:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    a0e6:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a0e8:	ldr	r4, [r0, #4]
    a0ea:	orr.w	r2, r2, r4
    a0ee:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a0f0:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    a0f2:	beq.n	a106 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    a0f4:	movw	r1, #2104	; 0x838
    a0f8:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a0fa:	ldr	r3, [r3, #4]
    a0fc:	movs	r2, #21
}
    a0fe:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    a102:	str	r2, [r3, #0]
}
    a104:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a106:	movs	r1, #56	; 0x38
    a108:	str	r1, [r2, #0]
    a10a:	b.n	a0fa <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    a10c:	ldr	r1, [pc, #16]	; (a120 <pinMode+0x7c>)
    a10e:	str	r1, [r2, #0]
    a110:	b.n	a0fa <pinMode+0x56>
    a112:	nop
    a114:	.word	0x20000420
    a118:	.word	0x00013038
    a11c:	.word	0x00010038
    a120:	.word	0x0001f038

0000a124 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a124:	ldr	r2, [pc, #72]	; (a170 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a126:	ldr	r3, [pc, #76]	; (a174 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a128:	ldr.w	r0, [r2, #544]	; 0x220
    a12c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a130:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a132:	push	{r4, lr}
    a134:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a136:	bhi.n	a13e <usb_init_serialnumber+0x1a>
    a138:	add.w	r0, r0, r0, lsl #2
    a13c:	lsls	r0, r0, #1
    a13e:	ldr	r4, [pc, #56]	; (a178 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    a140:	add	r1, sp, #4
    a142:	movs	r2, #10
    a144:	bl	a924 <ultoa>
    a148:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    a14a:	movs	r3, #0
    a14c:	mov	r0, r4
		char c = buf[i];
    a14e:	ldrb.w	r2, [r1], #1
    a152:	adds	r3, #1
		if (!c) break;
    a154:	cbz	r2, a166 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a156:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a158:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a15c:	bne.n	a14e <usb_init_serialnumber+0x2a>
    a15e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a160:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    a162:	add	sp, #16
    a164:	pop	{r4, pc}
    a166:	lsls	r3, r3, #1
    a168:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a16a:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    a16c:	add	sp, #16
    a16e:	pop	{r4, pc}
    a170:	.word	0x401f4400
    a174:	.word	0x0098967f
    a178:	.word	0x20000d34

0000a17c <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a17c:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a17e:	ldr	r4, [pc, #132]	; (a204 <yield+0x88>)
    a180:	ldrb	r3, [r4, #0]
    a182:	cbnz	r3, a1a6 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    a184:	ldr	r3, [pc, #128]	; (a208 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a186:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    a188:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a18a:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    a18c:	cbnz	r3, a1d6 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    a18e:	ldr	r3, [pc, #124]	; (a20c <yield+0x90>)
    a190:	ldrb	r3, [r3, #0]
    a192:	cmp	r3, #0
    a194:	bne.n	a1ea <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    a196:	ldr	r3, [pc, #120]	; (a210 <yield+0x94>)

	running = 0;
    a198:	movs	r1, #0
    a19a:	ldr	r2, [r3, #0]
    a19c:	strb	r1, [r4, #0]
    a19e:	cbz	r2, a1a6 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a1a0:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a1a4:	cbz	r2, a1a8 <yield+0x2c>
    a1a6:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a1a8:	mrs	r0, PRIMASK
		__disable_irq();
    a1ac:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a1ae:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    a1b0:	cbz	r2, a1f0 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a1b2:	ldr	r4, [pc, #96]	; (a214 <yield+0x98>)
    a1b4:	ldrb	r1, [r4, #0]
    a1b6:	cbnz	r1, a1f0 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a1b8:	movs	r6, #1
		firstYield = first->_next;
    a1ba:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a1bc:	strb	r6, [r4, #0]
		firstYield = first->_next;
    a1be:	str	r5, [r3, #0]
		if (firstYield) {
    a1c0:	cbz	r5, a1f8 <yield+0x7c>
			firstYield->_prev = nullptr;
    a1c2:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a1c4:	cbnz	r0, a1c8 <yield+0x4c>
    a1c6:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a1c8:	movs	r5, #0
		(*(first->_function))(*first);
    a1ca:	ldr	r3, [r2, #8]
    a1cc:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a1ce:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    a1d0:	blx	r3
		runningFromYield = false;
    a1d2:	strb	r5, [r4, #0]
    a1d4:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a1d6:	bl	92cc <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    a1da:	cmp	r0, #0
    a1dc:	beq.n	a18e <yield+0x12>
    a1de:	bl	a4d8 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    a1e2:	ldr	r3, [pc, #40]	; (a20c <yield+0x90>)
    a1e4:	ldrb	r3, [r3, #0]
    a1e6:	cmp	r3, #0
    a1e8:	beq.n	a196 <yield+0x1a>
    a1ea:	bl	ac2c <HardwareSerial::processSerialEvents()>
    a1ee:	b.n	a196 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a1f0:	cmp	r0, #0
    a1f2:	bne.n	a1a6 <yield+0x2a>
    a1f4:	cpsie	i
    a1f6:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a1f8:	ldr	r3, [pc, #28]	; (a218 <yield+0x9c>)
    a1fa:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a1fc:	cmp	r0, #0
    a1fe:	bne.n	a1c8 <yield+0x4c>
    a200:	b.n	a1c6 <yield+0x4a>
    a202:	nop
    a204:	.word	0x200158dd
    a208:	.word	0x20000d4a
    a20c:	.word	0x2001592c
    a210:	.word	0x200158f4
    a214:	.word	0x200158f8
    a218:	.word	0x200158f0

0000a21c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    a21c:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    a21e:	ldr	r4, [pc, #100]	; (a284 <random(unsigned long) [clone .part.0]+0x68>)
    a220:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    a222:	cbz	r3, a268 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    a224:	ldr	r1, [pc, #96]	; (a288 <random(unsigned long) [clone .part.0]+0x6c>)
    a226:	asrs	r5, r3, #31
    a228:	ldr.w	lr, [pc, #104]	; a294 <random(unsigned long) [clone .part.0]+0x78>
    a22c:	smull	r6, r7, r3, r1
    a230:	ldr	r6, [pc, #88]	; (a28c <random(unsigned long) [clone .part.0]+0x70>)
    a232:	smull	r2, r1, r1, r3
    a236:	adds	r2, r3, r7
    a238:	add	r1, r3
    a23a:	rsb	r2, r5, r2, asr #16
    a23e:	rsb	r1, r5, r1, asr #16
    a242:	movw	r5, #16807	; 0x41a7
    a246:	mls	r2, lr, r2, r3
    a24a:	mul.w	r1, r6, r1
    a24e:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    a252:	cmp	r3, #0
    a254:	bge.n	a276 <random(unsigned long) [clone .part.0]+0x5a>
    a256:	mvn.w	r2, #2147483648	; 0x80000000
    a25a:	add	r2, r3
    a25c:	udiv	r3, r2, r0
	seed = x;
    a260:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    a262:	mls	r0, r0, r3, r2
    a266:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    a268:	ldr	r2, [pc, #36]	; (a290 <random(unsigned long) [clone .part.0]+0x74>)
    a26a:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    a26e:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    a270:	mls	r0, r0, r3, r2
    a274:	pop	{r4, r5, r6, r7, pc}
    a276:	mov	r2, r3
    a278:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    a27c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    a27e:	mls	r0, r0, r3, r2
    a282:	pop	{r4, r5, r6, r7, pc}
    a284:	.word	0x200158e0
    a288:	.word	0x834e0b5f
    a28c:	.word	0xfffff4ec
    a290:	.word	0x1f0cce42
    a294:	.word	0x0001f31d

0000a298 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    a298:	cbz	r0, a29e <randomSeed(unsigned long)+0x6>
    a29a:	ldr	r3, [pc, #4]	; (a2a0 <randomSeed(unsigned long)+0x8>)
    a29c:	str	r0, [r3, #0]
    a29e:	bx	lr
    a2a0:	.word	0x200158e0

0000a2a4 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    a2a4:	cbz	r0, a2aa <random(unsigned long)+0x6>
    a2a6:	b.w	a21c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    a2aa:	bx	lr

0000a2ac <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    a2ac:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a2ae:	mrs	r2, PRIMASK
		__disable_irq();
    a2b2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a2b4:	ldrb	r3, [r0, #29]
    a2b6:	cbnz	r3, a2c6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    a2b8:	ldrb	r1, [r0, #28]
    a2ba:	cmp	r1, #1
    a2bc:	beq.n	a2d0 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a2be:	cmp	r1, #3
    a2c0:	beq.n	a2e4 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a2c2:	movs	r3, #1
    a2c4:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a2c6:	cbnz	r2, a2ca <EventResponder::triggerEventNotImmediate()+0x1e>
    a2c8:	cpsie	i
	}
	enableInterrupts(irq);
}
    a2ca:	ldr.w	r4, [sp], #4
    a2ce:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    a2d0:	ldr	r4, [pc, #68]	; (a318 <EventResponder::triggerEventNotImmediate()+0x6c>)
    a2d2:	ldr	r1, [r4, #0]
    a2d4:	cbz	r1, a300 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a2d6:	ldr	r1, [pc, #68]	; (a31c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    a2d8:	str	r3, [r0, #20]
				_prev = lastYield;
    a2da:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    a2dc:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a2de:	str	r3, [r0, #24]
				_prev->_next = this;
    a2e0:	str	r0, [r3, #20]
    a2e2:	b.n	a2c2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    a2e4:	ldr	r4, [pc, #56]	; (a320 <EventResponder::triggerEventNotImmediate()+0x74>)
    a2e6:	ldr	r1, [r4, #0]
    a2e8:	cbz	r1, a30c <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a2ea:	ldr	r1, [pc, #56]	; (a324 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    a2ec:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a2ee:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    a2f0:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a2f2:	str	r3, [r0, #24]
				_prev->_next = this;
    a2f4:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a2f6:	ldr	r3, [pc, #48]	; (a328 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a2f8:	mov.w	r1, #268435456	; 0x10000000
    a2fc:	str	r1, [r3, #0]
    a2fe:	b.n	a2c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    a300:	ldr	r3, [pc, #24]	; (a31c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    a302:	str	r1, [r0, #20]
				_prev = nullptr;
    a304:	str	r1, [r0, #24]
				firstYield = this;
    a306:	str	r0, [r4, #0]
				lastYield = this;
    a308:	str	r0, [r3, #0]
    a30a:	b.n	a2c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    a30c:	ldr	r3, [pc, #20]	; (a324 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    a30e:	str	r1, [r0, #20]
				_prev = nullptr;
    a310:	str	r1, [r0, #24]
				firstInterrupt = this;
    a312:	str	r0, [r4, #0]
				lastInterrupt = this;
    a314:	str	r0, [r3, #0]
    a316:	b.n	a2f6 <EventResponder::triggerEventNotImmediate()+0x4a>
    a318:	.word	0x200158f4
    a31c:	.word	0x200158f0
    a320:	.word	0x200158e4
    a324:	.word	0x200158e8
    a328:	.word	0xe000ed04

0000a32c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    a32c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a32e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a330:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a332:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a334:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    a336:	beq.n	a340 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    a338:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a33c:	b.w	a2ac <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a340:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    a342:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a346:	bx	r3

0000a348 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a348:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a34a:	mrs	r1, PRIMASK
		__disable_irq();
    a34e:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a350:	ldr	r4, [pc, #48]	; (a384 <EventResponder::runFromInterrupt()+0x3c>)
    a352:	ldr	r3, [r4, #0]
		if (first) {
    a354:	cbz	r3, a37a <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a356:	ldr	r6, [pc, #48]	; (a388 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a358:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a35a:	ldr	r2, [r3, #20]
    a35c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    a35e:	cbz	r2, a380 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    a360:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a362:	cbnz	r1, a366 <EventResponder::runFromInterrupt()+0x1e>
    a364:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a366:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    a368:	mov	r0, r3
    a36a:	ldr	r3, [r3, #8]
    a36c:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a36e:	mrs	r1, PRIMASK
		__disable_irq();
    a372:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a374:	ldr	r3, [r4, #0]
		if (first) {
    a376:	cmp	r3, #0
    a378:	bne.n	a35a <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a37a:	cbnz	r1, a37e <EventResponder::runFromInterrupt()+0x36>
    a37c:	cpsie	i
    a37e:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a380:	str	r2, [r6, #0]
    a382:	b.n	a362 <EventResponder::runFromInterrupt()+0x1a>
    a384:	.word	0x200158e4
    a388:	.word	0x200158e8

0000a38c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a38c:	b.w	a348 <EventResponder::runFromInterrupt()>

0000a390 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    a390:	ldr	r2, [pc, #96]	; (a3f4 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    a392:	push	{r4, r5}
	if (listActive == nullptr) {
    a394:	ldr	r4, [r2, #0]
    a396:	cmp	r4, #0
    a398:	beq.n	a3ec <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    a39a:	ldr	r3, [r0, #0]
    a39c:	ldr	r1, [r4, #0]
    a39e:	cmp	r3, r1
    a3a0:	bcs.n	a3c2 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a3a2:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    a3a4:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    a3a6:	str	r4, [r0, #8]
		_prev = nullptr;
    a3a8:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a3aa:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    a3ac:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    a3ae:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    a3b0:	movs	r3, #2
}
    a3b2:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    a3b4:	strb	r3, [r0, #20]
}
    a3b6:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    a3b8:	str	r3, [r0, #0]
    a3ba:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    a3bc:	ldr	r1, [r2, #0]
    a3be:	cmp	r3, r1
    a3c0:	bcc.n	a3d4 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a3c2:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    a3c4:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a3c6:	cmp	r2, #0
    a3c8:	bne.n	a3b8 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    a3ca:	str	r2, [r0, #8]
		_prev = timer;
    a3cc:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    a3ce:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    a3d0:	str	r0, [r4, #8]
    a3d2:	b.n	a3b0 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    a3d4:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    a3d6:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    a3d8:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    a3da:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    a3dc:	str	r5, [r0, #12]
				timer->_prev = this;
    a3de:	str	r0, [r4, #12]
				_prev->_next = this;
    a3e0:	ldr	r1, [r0, #12]
    a3e2:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    a3e4:	str	r3, [r4, #0]
				_state = TimerActive;
    a3e6:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    a3e8:	pop	{r4, r5}
    a3ea:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    a3ec:	str	r4, [r0, #8]
		_prev = nullptr;
    a3ee:	str	r4, [r0, #12]
		listActive = this;
    a3f0:	str	r0, [r2, #0]
    a3f2:	b.n	a3b0 <MillisTimer::addToActiveList()+0x20>
    a3f4:	.word	0x200158ec

0000a3f8 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    a3f8:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    a3fa:	ldr	r6, [pc, #136]	; (a484 <MillisTimer::runFromTimer()+0x8c>)
    a3fc:	ldr	r4, [r6, #0]
	while (timer) {
    a3fe:	cbz	r4, a44c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a400:	ldr	r3, [r4, #0]
    a402:	cmp	r3, #0
    a404:	bne.n	a47c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    a406:	mov	r5, r3
    a408:	ldr	r7, [pc, #124]	; (a488 <MillisTimer::runFromTimer()+0x90>)
    a40a:	b.n	a416 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    a40c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a40e:	cbz	r4, a44c <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a410:	ldr	r3, [r4, #0]
    a412:	cmp	r3, #0
    a414:	bne.n	a47c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    a416:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    a418:	cbz	r3, a41c <MillisTimer::runFromTimer()+0x24>
    a41a:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    a41c:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    a41e:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a420:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    a422:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a424:	ldr	r3, [r3, #0]
    a426:	cmp	r3, r7
    a428:	bne.n	a46e <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a42a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a42c:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a42e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a430:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    a432:	beq.n	a476 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a434:	bl	a2ac <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    a438:	ldr	r3, [r4, #4]
    a43a:	cmp	r3, #0
    a43c:	beq.n	a40c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    a43e:	str	r3, [r4, #0]
				timer->addToActiveList();
    a440:	mov	r0, r4
    a442:	bl	a390 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    a446:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a448:	cmp	r4, #0
    a44a:	bne.n	a410 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a44c:	mrs	r3, PRIMASK
		__disable_irq();
    a450:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a452:	ldr	r2, [pc, #56]	; (a48c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a454:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a456:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a458:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    a45a:	cbnz	r3, a45e <MillisTimer::runFromTimer()+0x66>
    a45c:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    a45e:	cbz	r0, a46c <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    a460:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    a462:	bl	a390 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    a466:	mov	r0, r4
    a468:	cmp	r0, #0
    a46a:	bne.n	a460 <MillisTimer::runFromTimer()+0x68>
    a46c:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a46e:	mov	r2, r4
    a470:	movs	r1, #0
    a472:	blx	r3
    a474:	b.n	a438 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a476:	ldr	r3, [r0, #8]
    a478:	blx	r3
    a47a:	b.n	a438 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    a47c:	subs	r3, #1
    a47e:	str	r3, [r4, #0]
			break;
    a480:	b.n	a44c <MillisTimer::runFromTimer()+0x54>
    a482:	nop
    a484:	.word	0x200158ec
    a488:	.word	0x0000a32d
    a48c:	.word	0x200158fc

0000a490 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a490:	ldr	r2, [pc, #16]	; (a4a4 <systick_isr+0x14>)
    a492:	ldr	r3, [pc, #20]	; (a4a8 <systick_isr+0x18>)
    a494:	ldr	r1, [r2, #0]
	systick_millis_count++;
    a496:	ldr	r2, [pc, #20]	; (a4ac <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a498:	str	r1, [r3, #0]
	systick_millis_count++;
    a49a:	ldr	r3, [r2, #0]
    a49c:	adds	r3, #1
    a49e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    a4a0:	b.w	a3f8 <MillisTimer::runFromTimer()>
    a4a4:	.word	0xe0001004
    a4a8:	.word	0x200158d4
    a4ac:	.word	0x200158d8

0000a4b0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a4b0:	b.w	92e0 <usb_serial_flush_input>

0000a4b4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a4b4:	b.w	92a8 <usb_serial_peekchar>

0000a4b8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a4b8:	b.w	925c <usb_serial_getchar>

0000a4bc <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a4bc:	b.w	92cc <usb_serial_available>

0000a4c0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a4c0:	b.w	93ac <usb_serial_flush_output>

0000a4c4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a4c4:	b.w	9360 <usb_serial_write_buffer_free>

0000a4c8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a4c8:	mov	r0, r1
    a4ca:	mov	r1, r2
    a4cc:	b.w	9348 <usb_serial_write>

0000a4d0 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a4d0:	mov	r0, r1
    a4d2:	b.w	931c <usb_serial_putchar>
    a4d6:	nop

0000a4d8 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    a4d8:	ldr	r3, [pc, #4]	; (a4e0 <serialEvent()+0x8>)
    a4da:	movs	r2, #0
    a4dc:	strb	r2, [r3, #0]
    a4de:	bx	lr
    a4e0:	.word	0x20000d4a

0000a4e4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a4e4:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a4e6:	ldr	r4, [pc, #24]	; (a500 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a4e8:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a4ea:	ldr	r3, [r0, #0]
    a4ec:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a4ee:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a4f0:	add	r1, sp, #4
    a4f2:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a4f4:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a4f8:	blx	r3
}
    a4fa:	add	sp, #8
    a4fc:	pop	{r4, pc}
    a4fe:	nop
    a500:	.word	0x20000734

0000a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a504:	push	{r4, r5, r6, r7, lr}
    a506:	mov	r6, r0
    a508:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a50a:	cmp	r2, #0
    a50c:	beq.n	a576 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a50e:	cmp	r2, #1
    a510:	it	eq
    a512:	moveq	r2, #10
	}


	if (n == 0) {
    a514:	cbz	r1, a56c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a516:	movs	r5, #33	; 0x21
    a518:	b.n	a51c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a51a:	uxtb	r5, r7
    a51c:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a51e:	udiv	r4, r1, r2
    a522:	mls	r1, r2, r4, r1
    a526:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a528:	cmp	r1, #9
    a52a:	add.w	r1, r0, #55	; 0x37
    a52e:	add.w	r0, r0, #48	; 0x30
    a532:	it	hi
    a534:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a536:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a538:	add	r4, sp, #40	; 0x28
    a53a:	it	ls
    a53c:	uxtbls	r0, r0
    a53e:	add	r4, r5
    a540:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a544:	cmp	r1, #0
    a546:	bne.n	a51a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a548:	cbz	r3, a558 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a54a:	subs	r5, #1
		buf[i] = '-';
    a54c:	add	r3, sp, #40	; 0x28
    a54e:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a550:	uxtb	r5, r5
		buf[i] = '-';
    a552:	add	r3, r5
    a554:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a558:	ldr	r3, [r6, #0]
    a55a:	add	r1, sp, #4
    a55c:	rsb	r2, r5, #34	; 0x22
    a560:	mov	r0, r6
    a562:	add	r1, r5
    a564:	ldr	r3, [r3, #4]
    a566:	blx	r3
}
    a568:	add	sp, #44	; 0x2c
    a56a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a56c:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a56e:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a570:	strb.w	r2, [sp, #37]	; 0x25
    a574:	b.n	a548 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a576:	ldr	r3, [r0, #0]
    a578:	uxtb	r1, r1
    a57a:	ldr	r3, [r3, #0]
    a57c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a57e:	add	sp, #44	; 0x2c
    a580:	pop	{r4, r5, r6, r7, pc}
    a582:	nop

0000a584 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a584:	cmp	r1, #0
    a586:	blt.n	a590 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    a588:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a58a:	movs	r2, #10
    a58c:	b.w	a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    a590:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a592:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    a594:	movs	r2, #10
    a596:	b.w	a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a59a:	nop
    a59c:	movs	r0, r0
	...

0000a5a0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a5a0:	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    a5a4:	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a5a6:	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    a5aa:	mov	r5, r0
    a5ac:	vpush	{d8}
    a5b0:	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a5b2:	bvs.w	a6d8 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    a5b6:	vabs.f64	d7, d0
    a5ba:	vldr	d6, [pc, #300]	; a6e8 <Print::printFloat(double, unsigned char)+0x148>
    a5be:	vcmp.f64	d7, d6
    a5c2:	vmrs	APSR_nzcv, fpscr
    a5c6:	ble.n	a5de <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    a5c8:	ldr	r3, [r0, #0]
    a5ca:	movs	r2, #3
    a5cc:	ldr	r1, [pc, #312]	; (a708 <Print::printFloat(double, unsigned char)+0x168>)
    a5ce:	ldr	r3, [r3, #4]
    a5d0:	blx	r3
    a5d2:	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    a5d4:	mov	r0, r6
    a5d6:	add	sp, #24
    a5d8:	vpop	{d8}
    a5dc:	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    a5de:	vldr	d7, [pc, #272]	; a6f0 <Print::printFloat(double, unsigned char)+0x150>
    a5e2:	vcmpe.f64	d0, d7
    a5e6:	vmrs	APSR_nzcv, fpscr
    a5ea:	bgt.n	a69e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    a5ec:	vldr	d7, [pc, #264]	; a6f8 <Print::printFloat(double, unsigned char)+0x158>
    a5f0:	vcmpe.f64	d0, d7
    a5f4:	vmrs	APSR_nzcv, fpscr
    a5f8:	bmi.n	a69e <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    a5fa:	vcmpe.f64	d0, #0.0
    a5fe:	mov	r4, r1
    a600:	vmrs	APSR_nzcv, fpscr
    a604:	bmi.n	a6b4 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    a606:	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    a608:	cmp	r4, #0
    a60a:	beq.n	a6bc <Print::printFloat(double, unsigned char)+0x11c>
    a60c:	vmov.f64	d8, #96	; 0x3f000000  0.5
    a610:	movs	r2, #0
		rounding *= 0.1;
    a612:	vldr	d7, [pc, #236]	; a700 <Print::printFloat(double, unsigned char)+0x160>
    a616:	adds	r2, #1
    a618:	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    a61c:	uxtb	r1, r2
    a61e:	cmp	r4, r1
    a620:	bhi.n	a616 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    a622:	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a626:	movs	r2, #10
    a628:	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    a62a:	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    a62e:	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    a632:	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    a636:	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    a63a:	bl	a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a63e:	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a640:	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    a644:	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a648:	mov.w	r3, #46	; 0x2e
    a64c:	it	cs
    a64e:	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a650:	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a652:	strb.w	r3, [sp, #8]
    a656:	add	r4, r2
    a658:	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    a65a:	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a65e:	adds	r3, r2, #1
    a660:	add	r1, sp, #24
    a662:	add	r1, r2
    a664:	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    a666:	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    a668:	vcvt.u32.f64	s13, d0
    a66c:	vstr	s13, [sp, #4]
    a670:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    a674:	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a678:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    a67c:	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a680:	strb.w	r3, [r1, #-16]
			remainder -= n; 
    a684:	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    a688:	bne.n	a65a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    a68a:	ldr	r3, [r5, #0]
    a68c:	mov	r0, r5
    a68e:	add	r1, sp, #8
    a690:	ldr	r3, [r3, #4]
    a692:	blx	r3
	}
	return count;
}
    a694:	mov	r0, r6
    a696:	add	sp, #24
    a698:	vpop	{d8}
    a69c:	pop	{r4, r5, r6, pc}
    a69e:	ldr	r3, [r5, #0]
    a6a0:	movs	r2, #3
    a6a2:	ldr	r1, [pc, #104]	; (a70c <Print::printFloat(double, unsigned char)+0x16c>)
    a6a4:	ldr	r3, [r3, #4]
    a6a6:	blx	r3
    a6a8:	mov	r6, r0
    a6aa:	mov	r0, r6
    a6ac:	add	sp, #24
    a6ae:	vpop	{d8}
    a6b2:	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    a6b4:	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    a6b8:	movs	r3, #1
    a6ba:	b.n	a608 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a6bc:	vmov.f64	d7, #96	; 0x3f000000  0.5
    a6c0:	mov	r0, r5
    a6c2:	movs	r2, #10
    a6c4:	vadd.f64	d0, d0, d7
    a6c8:	vcvt.u32.f64	s15, d0
    a6cc:	vmov	r1, s15
    a6d0:	bl	a504 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a6d4:	mov	r6, r0
    a6d6:	b.n	a5d4 <Print::printFloat(double, unsigned char)+0x34>
    a6d8:	ldr	r3, [r0, #0]
    a6da:	movs	r2, #3
    a6dc:	ldr	r1, [pc, #48]	; (a710 <Print::printFloat(double, unsigned char)+0x170>)
    a6de:	ldr	r3, [r3, #4]
    a6e0:	blx	r3
    a6e2:	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a6e4:	b.n	a5d4 <Print::printFloat(double, unsigned char)+0x34>
    a6e6:	nop
    a6e8:	.word	0xffffffff
    a6ec:	.word	0x7fefffff
    a6f0:	.word	0xe0000000
    a6f4:	.word	0x41efffff
    a6f8:	.word	0xe0000000
    a6fc:	.word	0xc1efffff
    a700:	.word	0x9999999a
    a704:	.word	0x3fb99999
    a708:	.word	0x20000740
    a70c:	.word	0x2000073c
    a710:	.word	0x20000738

0000a714 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a714:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a716:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a71a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a71e:	bne.n	a7fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a720:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a722:	bcc.n	a7a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a724:	ldr.w	r3, [r1], #4
    a728:	str.w	r3, [r0], #4
    a72c:	ldr.w	r3, [r1], #4
    a730:	str.w	r3, [r0], #4
    a734:	ldr.w	r3, [r1], #4
    a738:	str.w	r3, [r0], #4
    a73c:	ldr.w	r3, [r1], #4
    a740:	str.w	r3, [r0], #4
    a744:	ldr.w	r3, [r1], #4
    a748:	str.w	r3, [r0], #4
    a74c:	ldr.w	r3, [r1], #4
    a750:	str.w	r3, [r0], #4
    a754:	ldr.w	r3, [r1], #4
    a758:	str.w	r3, [r0], #4
    a75c:	ldr.w	r3, [r1], #4
    a760:	str.w	r3, [r0], #4
    a764:	ldr.w	r3, [r1], #4
    a768:	str.w	r3, [r0], #4
    a76c:	ldr.w	r3, [r1], #4
    a770:	str.w	r3, [r0], #4
    a774:	ldr.w	r3, [r1], #4
    a778:	str.w	r3, [r0], #4
    a77c:	ldr.w	r3, [r1], #4
    a780:	str.w	r3, [r0], #4
    a784:	ldr.w	r3, [r1], #4
    a788:	str.w	r3, [r0], #4
    a78c:	ldr.w	r3, [r1], #4
    a790:	str.w	r3, [r0], #4
    a794:	ldr.w	r3, [r1], #4
    a798:	str.w	r3, [r0], #4
    a79c:	ldr.w	r3, [r1], #4
    a7a0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a7a4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a7a6:	bcs.n	a724 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a7a8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a7aa:	bcc.n	a7d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a7ac:	ldr.w	r3, [r1], #4
    a7b0:	str.w	r3, [r0], #4
    a7b4:	ldr.w	r3, [r1], #4
    a7b8:	str.w	r3, [r0], #4
    a7bc:	ldr.w	r3, [r1], #4
    a7c0:	str.w	r3, [r0], #4
    a7c4:	ldr.w	r3, [r1], #4
    a7c8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a7cc:	subs	r2, #16
	bhs	.Lmid_block_loop
    a7ce:	bcs.n	a7ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a7d0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a7d2:	bcc.n	a7e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a7d4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a7d8:	str.w	r3, [r0], #4
	subs	r2, #4
    a7dc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a7de:	bcs.n	a7d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a7e0:	adds	r2, #4
	beq	.Ldone
    a7e2:	beq.n	a7f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    a7e4:	lsls	r2, r2, #31
	itt ne
    a7e6:	itt	ne
	ldrbne  r3, [r1], #1
    a7e8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a7ec:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a7f0:	bcc.n	a7f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a7f2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a7f4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a7f6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a7f8:	bx	lr
    a7fa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a7fc:	cmp	r2, #8
	blo	.Lbyte_copy
    a7fe:	bcc.n	a828 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a800:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a802:	beq.n	a720 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a804:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a808:	beq.n	a720 <memcpy+0xc>

	rsb	r3, #4
    a80a:	rsb	r3, r3, #4
	subs	r2, r3
    a80e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a810:	lsls	r3, r3, #31
	itt ne
    a812:	itt	ne
	ldrbne  r3, [r1], #1
    a814:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a818:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a81c:	bcc.n	a720 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a81e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a822:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a826:	b.n	a720 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a828:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a82a:	bcc.n	a7e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a82c:	subs	r2, #1
	ldrb    r3, [r1], #1
    a82e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a832:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a836:	bcs.n	a82c <memcpy+0x118>

	ldrb	r3, [r1]
    a838:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a83a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a83c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a83e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a840:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a842:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a844:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a846:	bx	lr

0000a848 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    a848:	movs	r0, #4
    a84a:	mov	r1, lr
    a84c:	tst	r0, r1
    a84e:	beq.n	a858 <_MSP>
    a850:	mrs	r0, PSP
    a854:	b.w	a868 <HardFault_HandlerC>

0000a858 <_MSP>:
    a858:	mrs	r0, MSP
    a85c:	b.w	a868 <HardFault_HandlerC>

0000a860 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    a860:	bx	lr
    a862:	nop

0000a864 <startup_default_late_hook>:
extern void __libc_init_array(void); // C++ standard library


void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    a864:	bx	lr
    a866:	nop

0000a868 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a868:	ldr	r3, [pc, #108]	; (a8d8 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    a86a:	movs	r1, #5
    a86c:	ldr	r2, [pc, #108]	; (a8dc <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    a86e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    a870:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    a872:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    a876:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    a878:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    a87c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a87e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    a880:	ldr	r4, [pc, #92]	; (a8e0 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a882:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    a884:	ldr	r0, [pc, #92]	; (a8e4 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    a886:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    a888:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    a88c:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    a890:	ldr	r3, [r4, #0]
    a892:	cmp	r3, r0
    a894:	bls.n	a89c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    a896:	ldr	r0, [pc, #80]	; (a8e8 <HardFault_HandlerC+0x80>)
    a898:	bl	9418 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    a89c:	ldr	r5, [pc, #56]	; (a8d8 <HardFault_HandlerC+0x70>)
    a89e:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    a8a0:	movs	r0, #0
    a8a2:	ldr	r2, [pc, #72]	; (a8ec <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    a8a4:	ldr	r1, [pc, #72]	; (a8f0 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    a8a6:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    a8aa:	str	r0, [sp, #4]
    a8ac:	ldr	r3, [sp, #4]
    a8ae:	cmp	r3, r2
    a8b0:	bhi.n	a8be <HardFault_HandlerC+0x56>
    a8b2:	ldr	r3, [sp, #4]
    a8b4:	adds	r3, #1
    a8b6:	str	r3, [sp, #4]
    a8b8:	ldr	r3, [sp, #4]
    a8ba:	cmp	r3, r2
    a8bc:	bls.n	a8b2 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    a8be:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    a8c2:	str	r0, [sp, #4]
    a8c4:	ldr	r3, [sp, #4]
    a8c6:	cmp	r3, r1
    a8c8:	bhi.n	a8a6 <HardFault_HandlerC+0x3e>
    a8ca:	ldr	r3, [sp, #4]
    a8cc:	adds	r3, #1
    a8ce:	str	r3, [sp, #4]
    a8d0:	ldr	r3, [sp, #4]
    a8d2:	cmp	r3, r1
    a8d4:	bls.n	a8ca <HardFault_HandlerC+0x62>
    a8d6:	b.n	a8a6 <HardFault_HandlerC+0x3e>
    a8d8:	.word	0x401bc000
    a8dc:	.word	0x401f8000
    a8e0:	.word	0x20000c98
    a8e4:	.word	0x23c345ff
    a8e8:	.word	0x11e1a300
    a8ec:	.word	0x000f423f
    a8f0:	.word	0x0089543f

0000a8f4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    a8f4:	ldr	r2, [pc, #36]	; (a91c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    a8f6:	push	{r3, lr}
        char *prev = __brkval;
    a8f8:	ldr	r3, [r2, #0]
        if (incr != 0) {
    a8fa:	cbz	r0, a906 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    a8fc:	add	r0, r3
    a8fe:	ldr	r1, [pc, #32]	; (a920 <_sbrk+0x2c>)
    a900:	cmp	r0, r1
    a902:	bhi.n	a90a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    a904:	str	r0, [r2, #0]
        }
        return prev;
}
    a906:	mov	r0, r3
    a908:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    a90a:	bl	acdc <__errno>
    a90e:	movs	r2, #12
                        return (void *)-1;
    a910:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    a914:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    a916:	mov	r0, r3
    a918:	pop	{r3, pc}
    a91a:	nop
    a91c:	.word	0x20000d5c
    a920:	.word	0x20280000

0000a924 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a924:	push	{r4, r5, r6, r7}
    a926:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    a928:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a92a:	mov	r7, r6
    a92c:	b.n	a930 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a92e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a930:	udiv	r3, r0, r2
    a934:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a938:	add.w	r4, r0, #55	; 0x37
    a93c:	cmp	r0, #9
    a93e:	add.w	r0, r0, #48	; 0x30
    a942:	uxtb	r4, r4
    a944:	it	ls
    a946:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    a948:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a94a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    a94e:	cmp	r3, #0
    a950:	bne.n	a92e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a952:	adds	r2, r1, r5
    a954:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a956:	cbz	r5, a96c <ultoa+0x48>
    a958:	adds	r3, #1
		t = buf[j];
    a95a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    a95e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a960:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    a962:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a964:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a966:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a96a:	blt.n	a958 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a96c:	mov	r0, r1
    a96e:	pop	{r4, r5, r6, r7}
    a970:	bx	lr
    a972:	nop

0000a974 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a974:	ldr	r0, [pc, #656]	; (ac08 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a976:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a97a:	ldr	r3, [pc, #656]	; (ac0c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a97c:	ldr	r2, [r0, #120]	; 0x78
    a97e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    a982:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a984:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a986:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a988:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a98c:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a990:	ldr	r4, [pc, #636]	; (ac10 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a992:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a996:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a998:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a99c:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a99e:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a9a0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a9a4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a9a8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a9ac:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a9b0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a9b4:	ldrh.w	r0, [r3, #392]	; 0x188
    a9b8:	uxth	r0, r0
    a9ba:	orr.w	r0, r0, #240	; 0xf0
    a9be:	strh.w	r0, [r3, #392]	; 0x188
    a9c2:	add.w	r0, r1, r1, lsl #1
    a9c6:	ldr	r3, [pc, #580]	; (ac0c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    a9c8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a9ca:	movs	r5, #0
    a9cc:	lsls	r0, r0, #5
    a9ce:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a9d0:	cmp	r1, #4
    a9d2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a9d4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a9d8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    a9da:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a9dc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a9de:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a9e0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a9e2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a9e4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a9e6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a9e8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a9ea:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a9ec:	bne.n	a9c2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a9ee:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a9f2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a9f6:	ldr	r3, [pc, #540]	; (ac14 <pwm_init+0x2a0>)
    a9f8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a9fc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a9fe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    aa00:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    aa04:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa06:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    aa0a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa0e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    aa12:	ldrh.w	r0, [r4, #392]	; 0x188
    aa16:	uxth	r0, r0
    aa18:	orr.w	r0, r0, #3840	; 0xf00
    aa1c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    aa20:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    aa24:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    aa28:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    aa2c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    aa30:	ldrh.w	r0, [r3, #392]	; 0x188
    aa34:	uxth	r0, r0
    aa36:	orr.w	r0, r0, #240	; 0xf0
    aa3a:	strh.w	r0, [r3, #392]	; 0x188
    aa3e:	add.w	r0, r1, r1, lsl #1
    aa42:	ldr	r3, [pc, #464]	; (ac14 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    aa44:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    aa46:	movs	r5, #0
    aa48:	lsls	r0, r0, #5
    aa4a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aa4c:	cmp	r1, #4
    aa4e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    aa50:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    aa52:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    aa56:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    aa58:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    aa5a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    aa5c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    aa5e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    aa60:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    aa62:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    aa64:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    aa66:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aa68:	bne.n	aa3e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa6a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    aa6e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    aa72:	ldr	r3, [pc, #420]	; (ac18 <pwm_init+0x2a4>)
    aa74:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa78:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aa7a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    aa7c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    aa80:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa82:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    aa86:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aa8a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    aa8e:	ldrh.w	r0, [r4, #392]	; 0x188
    aa92:	uxth	r0, r0
    aa94:	orr.w	r0, r0, #3840	; 0xf00
    aa98:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    aa9c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    aaa0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    aaa4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    aaa8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    aaac:	ldrh.w	r0, [r3, #392]	; 0x188
    aab0:	uxth	r0, r0
    aab2:	orr.w	r0, r0, #240	; 0xf0
    aab6:	strh.w	r0, [r3, #392]	; 0x188
    aaba:	add.w	r0, r1, r1, lsl #1
    aabe:	ldr	r3, [pc, #344]	; (ac18 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    aac0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    aac2:	movs	r5, #0
    aac4:	lsls	r0, r0, #5
    aac6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aac8:	cmp	r1, #4
    aaca:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    aacc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    aace:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    aad2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    aad4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    aad6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    aad8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    aada:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    aadc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    aade:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    aae0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    aae2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aae4:	bne.n	aaba <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aae6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    aaea:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    aaee:	ldr	r3, [pc, #300]	; (ac1c <pwm_init+0x2a8>)
    aaf0:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aaf4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    aaf6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    aaf8:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    aafc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    aafe:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ab02:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ab06:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ab0a:	ldrh.w	r0, [r4, #392]	; 0x188
    ab0e:	uxth	r0, r0
    ab10:	orr.w	r0, r0, #3840	; 0xf00
    ab14:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ab18:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ab1c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    ab20:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    ab24:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ab28:	ldrh.w	r0, [r3, #392]	; 0x188
    ab2c:	uxth	r0, r0
    ab2e:	orr.w	r0, r0, #240	; 0xf0
    ab32:	strh.w	r0, [r3, #392]	; 0x188
    ab36:	add.w	r0, r1, r1, lsl #1
    ab3a:	ldr	r3, [pc, #224]	; (ac1c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    ab3c:	adds	r1, #1
    ab3e:	lsls	r0, r0, #5
    ab40:	mov	r4, r3
    ab42:	cmp	r1, #4
    ab44:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ab46:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ab48:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ab4c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ab4e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ab50:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ab52:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ab54:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    ab56:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ab58:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ab5a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ab5c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    ab5e:	bne.n	ab36 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ab60:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ab64:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ab66:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ab68:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ab6c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ab6e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ab72:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ab74:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ab78:	orrs	r3, r7
    ab7a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ab7e:	ldrh.w	r3, [r4, #392]	; 0x188
    ab82:	uxth	r3, r3
    ab84:	orr.w	r3, r3, #3840	; 0xf00
    ab88:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    ab8c:	lsls	r0, r2, #5
    ab8e:	ldr	r3, [pc, #144]	; (ac20 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ab90:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ab92:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ab94:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    ab96:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    ab98:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ab9a:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ab9c:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ab9e:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    aba2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    aba4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    aba6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    aba8:	bne.n	ab8c <pwm_init+0x218>
    abaa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    abac:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    abae:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    abb2:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    abb6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    abb8:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    abbc:	lsls	r0, r2, #5
    abbe:	ldr	r3, [pc, #100]	; (ac24 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    abc0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    abc2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    abc4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    abc6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    abc8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    abca:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    abcc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    abce:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    abd0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    abd2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    abd4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    abd6:	bne.n	abbc <pwm_init+0x248>
    abd8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    abda:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    abdc:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    abe0:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    abe4:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    abe6:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    abea:	lsls	r0, r2, #5
    abec:	ldr	r3, [pc, #56]	; (ac28 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    abee:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    abf0:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    abf2:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    abf4:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    abf6:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    abf8:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    abfa:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    abfc:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    abfe:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    ac00:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac02:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ac04:	bne.n	abea <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    ac06:	pop	{r4, r5, r6, r7, pc}
    ac08:	.word	0x400fc000
    ac0c:	.word	0x403dc000
    ac10:	.word	0xfc030000
    ac14:	.word	0x403e0000
    ac18:	.word	0x403e4000
    ac1c:	.word	0x403e8000
    ac20:	.word	0x401dc000
    ac24:	.word	0x401e0000
    ac28:	.word	0x401e4000

0000ac2c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    ac2c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    ac2e:	ldr	r3, [pc, #28]	; (ac4c <HardwareSerial::processSerialEvents()+0x20>)
    ac30:	ldrb	r4, [r3, #0]
    ac32:	cbz	r4, ac48 <HardwareSerial::processSerialEvents()+0x1c>
    ac34:	ldr	r5, [pc, #24]	; (ac50 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    ac36:	ldr.w	r3, [r5, #4]!
    ac3a:	cmp	r3, #0
    ac3c:	beq.n	ac36 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    ac3e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    ac40:	subs	r3, r4, #1
    ac42:	ands.w	r4, r3, #255	; 0xff
    ac46:	bne.n	ac36 <HardwareSerial::processSerialEvents()+0xa>
    ac48:	pop	{r3, r4, r5, pc}
    ac4a:	nop
    ac4c:	.word	0x2001592c
    ac50:	.word	0x2001590c

0000ac54 <__aeabi_atexit>:
    ac54:	mov	r3, r1
    ac56:	mov	r1, r0
    ac58:	mov	r0, r3
    ac5a:	b.w	acd0 <__cxa_atexit>
    ac5e:	nop

0000ac60 <calloc>:
    ac60:	ldr	r3, [pc, #8]	; (ac6c <calloc+0xc>)
    ac62:	mov	r2, r1
    ac64:	mov	r1, r0
    ac66:	ldr	r0, [r3, #0]
    ac68:	b.w	ac70 <_calloc_r>
    ac6c:	.word	0x20001188

0000ac70 <_calloc_r>:
    ac70:	push	{r4, lr}
    ac72:	mul.w	r1, r2, r1
    ac76:	bl	ad58 <_malloc_r>
    ac7a:	mov	r4, r0
    ac7c:	cbz	r0, acb6 <_calloc_r+0x46>
    ac7e:	ldr.w	r2, [r0, #-4]
    ac82:	bic.w	r2, r2, #3
    ac86:	subs	r2, #4
    ac88:	cmp	r2, #36	; 0x24
    ac8a:	bhi.n	acbe <_calloc_r+0x4e>
    ac8c:	cmp	r2, #19
    ac8e:	bls.n	acba <_calloc_r+0x4a>
    ac90:	movs	r3, #0
    ac92:	cmp	r2, #27
    ac94:	str	r3, [r0, #0]
    ac96:	str	r3, [r0, #4]
    ac98:	bls.n	acc8 <_calloc_r+0x58>
    ac9a:	cmp	r2, #36	; 0x24
    ac9c:	str	r3, [r0, #8]
    ac9e:	str	r3, [r0, #12]
    aca0:	iteee	ne
    aca2:	addne.w	r2, r0, #16
    aca6:	streq	r3, [r0, #16]
    aca8:	streq	r3, [r0, #20]
    acaa:	addeq.w	r2, r0, #24
    acae:	movs	r3, #0
    acb0:	str	r3, [r2, #0]
    acb2:	str	r3, [r2, #4]
    acb4:	str	r3, [r2, #8]
    acb6:	mov	r0, r4
    acb8:	pop	{r4, pc}
    acba:	mov	r2, r0
    acbc:	b.n	acae <_calloc_r+0x3e>
    acbe:	movs	r1, #0
    acc0:	bl	b2c8 <memset>
    acc4:	mov	r0, r4
    acc6:	pop	{r4, pc}
    acc8:	add.w	r2, r0, #8
    accc:	b.n	acae <_calloc_r+0x3e>
    acce:	nop

0000acd0 <__cxa_atexit>:
    acd0:	mov	r3, r2
    acd2:	mov	r2, r1
    acd4:	mov	r1, r0
    acd6:	movs	r0, #2
    acd8:	b.w	b390 <__register_exitproc>

0000acdc <__errno>:
    acdc:	ldr	r3, [pc, #4]	; (ace4 <__errno+0x8>)
    acde:	ldr	r0, [r3, #0]
    ace0:	bx	lr
    ace2:	nop
    ace4:	.word	0x20001188

0000ace8 <__libc_init_array>:
    ace8:	push	{r4, r5, r6, lr}
    acea:	ldr	r6, [pc, #60]	; (ad28 <__libc_init_array+0x40>)
    acec:	ldr	r5, [pc, #60]	; (ad2c <__libc_init_array+0x44>)
    acee:	subs	r6, r6, r5
    acf0:	asrs	r6, r6, #2
    acf2:	it	ne
    acf4:	movne	r4, #0
    acf6:	beq.n	ad04 <__libc_init_array+0x1c>
    acf8:	adds	r4, #1
    acfa:	ldr.w	r3, [r5], #4
    acfe:	blx	r3
    ad00:	cmp	r6, r4
    ad02:	bne.n	acf8 <__libc_init_array+0x10>
    ad04:	ldr	r6, [pc, #40]	; (ad30 <__libc_init_array+0x48>)
    ad06:	ldr	r5, [pc, #44]	; (ad34 <__libc_init_array+0x4c>)
    ad08:	subs	r6, r6, r5
    ad0a:	bl	b6a0 <___init_veneer>
    ad0e:	asrs	r6, r6, #2
    ad10:	it	ne
    ad12:	movne	r4, #0
    ad14:	beq.n	ad24 <__libc_init_array+0x3c>
    ad16:	adds	r4, #1
    ad18:	ldr.w	r3, [r5], #4
    ad1c:	blx	r3
    ad1e:	cmp	r6, r4
    ad20:	bne.n	ad16 <__libc_init_array+0x2e>
    ad22:	pop	{r4, r5, r6, pc}
    ad24:	pop	{r4, r5, r6, pc}
    ad26:	nop
    ad28:	.word	0x60001648
    ad2c:	.word	0x60001648
    ad30:	.word	0x60001654
    ad34:	.word	0x60001648

0000ad38 <malloc>:
    ad38:	ldr	r3, [pc, #8]	; (ad44 <malloc+0xc>)
    ad3a:	mov	r1, r0
    ad3c:	ldr	r0, [r3, #0]
    ad3e:	b.w	ad58 <_malloc_r>
    ad42:	nop
    ad44:	.word	0x20001188

0000ad48 <free>:
    ad48:	ldr	r3, [pc, #8]	; (ad54 <free+0xc>)
    ad4a:	mov	r1, r0
    ad4c:	ldr	r0, [r3, #0]
    ad4e:	b.w	b4d0 <_free_r>
    ad52:	nop
    ad54:	.word	0x20001188

0000ad58 <_malloc_r>:
    ad58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad5c:	add.w	r5, r1, #11
    ad60:	cmp	r5, #22
    ad62:	sub	sp, #12
    ad64:	mov	r6, r0
    ad66:	bls.w	aea8 <_malloc_r+0x150>
    ad6a:	bics.w	r5, r5, #7
    ad6e:	bmi.w	aef0 <_malloc_r+0x198>
    ad72:	cmp	r1, r5
    ad74:	bhi.w	aef0 <_malloc_r+0x198>
    ad78:	bl	b364 <__malloc_lock>
    ad7c:	cmp.w	r5, #504	; 0x1f8
    ad80:	bcc.w	b2bc <_malloc_r+0x564>
    ad84:	lsrs	r3, r5, #9
    ad86:	beq.w	aefe <_malloc_r+0x1a6>
    ad8a:	cmp	r3, #4
    ad8c:	bhi.w	b096 <_malloc_r+0x33e>
    ad90:	lsrs	r0, r5, #6
    ad92:	add.w	lr, r0, #57	; 0x39
    ad96:	mov.w	r3, lr, lsl #1
    ad9a:	adds	r0, #56	; 0x38
    ad9c:	ldr	r7, [pc, #784]	; (b0b0 <_malloc_r+0x358>)
    ad9e:	add.w	r3, r7, r3, lsl #2
    ada2:	sub.w	r1, r3, #8
    ada6:	ldr	r4, [r3, #4]
    ada8:	cmp	r1, r4
    adaa:	bne.n	adbc <_malloc_r+0x64>
    adac:	b.n	af08 <_malloc_r+0x1b0>
    adae:	cmp	r2, #0
    adb0:	bge.w	af0c <_malloc_r+0x1b4>
    adb4:	ldr	r4, [r4, #12]
    adb6:	cmp	r1, r4
    adb8:	beq.w	af08 <_malloc_r+0x1b0>
    adbc:	ldr	r3, [r4, #4]
    adbe:	bic.w	r3, r3, #3
    adc2:	subs	r2, r3, r5
    adc4:	cmp	r2, #15
    adc6:	ble.n	adae <_malloc_r+0x56>
    adc8:	ldr	r1, [pc, #740]	; (b0b0 <_malloc_r+0x358>)
    adca:	ldr	r4, [r7, #16]
    adcc:	add.w	lr, r1, #8
    add0:	cmp	r4, lr
    add2:	beq.w	b13c <_malloc_r+0x3e4>
    add6:	ldr	r3, [r4, #4]
    add8:	bic.w	r3, r3, #3
    addc:	subs	r2, r3, r5
    adde:	cmp	r2, #15
    ade0:	bgt.w	b116 <_malloc_r+0x3be>
    ade4:	cmp	r2, #0
    ade6:	str.w	lr, [r1, #20]
    adea:	str.w	lr, [r1, #16]
    adee:	bge.w	af2e <_malloc_r+0x1d6>
    adf2:	cmp.w	r3, #512	; 0x200
    adf6:	bcs.w	b0c8 <_malloc_r+0x370>
    adfa:	lsrs	r3, r3, #3
    adfc:	add.w	ip, r3, #1
    ae00:	movs	r2, #1
    ae02:	asrs	r3, r3, #2
    ae04:	lsl.w	r3, r2, r3
    ae08:	ldr	r2, [r1, #4]
    ae0a:	ldr.w	r8, [r1, ip, lsl #3]
    ae0e:	str.w	r8, [r4, #8]
    ae12:	add.w	r9, r1, ip, lsl #3
    ae16:	orrs	r2, r3
    ae18:	sub.w	r3, r9, #8
    ae1c:	str	r3, [r4, #12]
    ae1e:	str	r2, [r1, #4]
    ae20:	str.w	r4, [r1, ip, lsl #3]
    ae24:	str.w	r4, [r8, #12]
    ae28:	asrs	r3, r0, #2
    ae2a:	movs	r4, #1
    ae2c:	lsls	r4, r3
    ae2e:	cmp	r4, r2
    ae30:	bhi.w	af48 <_malloc_r+0x1f0>
    ae34:	tst	r4, r2
    ae36:	bne.n	ae46 <_malloc_r+0xee>
    ae38:	bic.w	r0, r0, #3
    ae3c:	lsls	r4, r4, #1
    ae3e:	tst	r4, r2
    ae40:	add.w	r0, r0, #4
    ae44:	beq.n	ae3c <_malloc_r+0xe4>
    ae46:	add.w	r9, r7, r0, lsl #3
    ae4a:	mov	ip, r9
    ae4c:	mov	r8, r0
    ae4e:	ldr.w	r1, [ip, #12]
    ae52:	cmp	ip, r1
    ae54:	bne.n	ae66 <_malloc_r+0x10e>
    ae56:	b.n	b140 <_malloc_r+0x3e8>
    ae58:	cmp	r2, #0
    ae5a:	bge.w	b160 <_malloc_r+0x408>
    ae5e:	ldr	r1, [r1, #12]
    ae60:	cmp	ip, r1
    ae62:	beq.w	b140 <_malloc_r+0x3e8>
    ae66:	ldr	r3, [r1, #4]
    ae68:	bic.w	r3, r3, #3
    ae6c:	subs	r2, r3, r5
    ae6e:	cmp	r2, #15
    ae70:	ble.n	ae58 <_malloc_r+0x100>
    ae72:	mov	r4, r1
    ae74:	ldr.w	ip, [r1, #12]
    ae78:	ldr.w	r8, [r4, #8]!
    ae7c:	adds	r3, r1, r5
    ae7e:	orr.w	r5, r5, #1
    ae82:	str	r5, [r1, #4]
    ae84:	orr.w	r1, r2, #1
    ae88:	str.w	ip, [r8, #12]
    ae8c:	mov	r0, r6
    ae8e:	str.w	r8, [ip, #8]
    ae92:	str	r3, [r7, #20]
    ae94:	str	r3, [r7, #16]
    ae96:	str.w	lr, [r3, #12]
    ae9a:	str.w	lr, [r3, #8]
    ae9e:	str	r1, [r3, #4]
    aea0:	str	r2, [r3, r2]
    aea2:	bl	b368 <__malloc_unlock>
    aea6:	b.n	aee8 <_malloc_r+0x190>
    aea8:	cmp	r1, #16
    aeaa:	bhi.n	aef0 <_malloc_r+0x198>
    aeac:	bl	b364 <__malloc_lock>
    aeb0:	movs	r5, #16
    aeb2:	movs	r3, #6
    aeb4:	movs	r0, #2
    aeb6:	ldr	r7, [pc, #504]	; (b0b0 <_malloc_r+0x358>)
    aeb8:	add.w	r3, r7, r3, lsl #2
    aebc:	sub.w	r2, r3, #8
    aec0:	ldr	r4, [r3, #4]
    aec2:	cmp	r4, r2
    aec4:	beq.w	b152 <_malloc_r+0x3fa>
    aec8:	ldr	r3, [r4, #4]
    aeca:	ldr	r1, [r4, #12]
    aecc:	ldr	r5, [r4, #8]
    aece:	bic.w	r3, r3, #3
    aed2:	add	r3, r4
    aed4:	mov	r0, r6
    aed6:	ldr	r2, [r3, #4]
    aed8:	str	r1, [r5, #12]
    aeda:	orr.w	r2, r2, #1
    aede:	str	r5, [r1, #8]
    aee0:	str	r2, [r3, #4]
    aee2:	bl	b368 <__malloc_unlock>
    aee6:	adds	r4, #8
    aee8:	mov	r0, r4
    aeea:	add	sp, #12
    aeec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aef0:	movs	r4, #0
    aef2:	movs	r3, #12
    aef4:	mov	r0, r4
    aef6:	str	r3, [r6, #0]
    aef8:	add	sp, #12
    aefa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aefe:	movs	r3, #128	; 0x80
    af00:	mov.w	lr, #64	; 0x40
    af04:	movs	r0, #63	; 0x3f
    af06:	b.n	ad9c <_malloc_r+0x44>
    af08:	mov	r0, lr
    af0a:	b.n	adc8 <_malloc_r+0x70>
    af0c:	add	r3, r4
    af0e:	ldr	r1, [r4, #12]
    af10:	ldr	r2, [r3, #4]
    af12:	ldr	r5, [r4, #8]
    af14:	orr.w	r2, r2, #1
    af18:	str	r1, [r5, #12]
    af1a:	mov	r0, r6
    af1c:	str	r5, [r1, #8]
    af1e:	str	r2, [r3, #4]
    af20:	bl	b368 <__malloc_unlock>
    af24:	adds	r4, #8
    af26:	mov	r0, r4
    af28:	add	sp, #12
    af2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af2e:	add	r3, r4
    af30:	mov	r0, r6
    af32:	ldr	r2, [r3, #4]
    af34:	orr.w	r2, r2, #1
    af38:	str	r2, [r3, #4]
    af3a:	bl	b368 <__malloc_unlock>
    af3e:	adds	r4, #8
    af40:	mov	r0, r4
    af42:	add	sp, #12
    af44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af48:	ldr	r4, [r7, #8]
    af4a:	ldr	r3, [r4, #4]
    af4c:	bic.w	r8, r3, #3
    af50:	cmp	r8, r5
    af52:	bcc.n	af5e <_malloc_r+0x206>
    af54:	rsb	r3, r5, r8
    af58:	cmp	r3, #15
    af5a:	bgt.w	b076 <_malloc_r+0x31e>
    af5e:	ldr	r3, [pc, #340]	; (b0b4 <_malloc_r+0x35c>)
    af60:	ldr.w	r9, [pc, #352]	; b0c4 <_malloc_r+0x36c>
    af64:	ldr	r2, [r3, #0]
    af66:	ldr.w	r3, [r9]
    af6a:	adds	r3, #1
    af6c:	add	r2, r5
    af6e:	add.w	sl, r4, r8
    af72:	beq.w	b236 <_malloc_r+0x4de>
    af76:	add.w	r2, r2, #4096	; 0x1000
    af7a:	adds	r2, #15
    af7c:	bic.w	r2, r2, #4080	; 0xff0
    af80:	bic.w	r2, r2, #15
    af84:	mov	r1, r2
    af86:	mov	r0, r6
    af88:	str	r2, [sp, #4]
    af8a:	bl	b36c <_sbrk_r>
    af8e:	cmp.w	r0, #4294967295
    af92:	mov	fp, r0
    af94:	ldr	r2, [sp, #4]
    af96:	beq.w	b24a <_malloc_r+0x4f2>
    af9a:	cmp	sl, r0
    af9c:	bhi.w	b198 <_malloc_r+0x440>
    afa0:	ldr	r3, [pc, #276]	; (b0b8 <_malloc_r+0x360>)
    afa2:	ldr	r1, [r3, #0]
    afa4:	cmp	sl, fp
    afa6:	add	r1, r2
    afa8:	str	r1, [r3, #0]
    afaa:	beq.w	b254 <_malloc_r+0x4fc>
    afae:	ldr.w	r0, [r9]
    afb2:	ldr.w	lr, [pc, #272]	; b0c4 <_malloc_r+0x36c>
    afb6:	adds	r0, #1
    afb8:	ittet	ne
    afba:	rsbne	sl, sl, fp
    afbe:	addne	r1, sl
    afc0:	streq.w	fp, [lr]
    afc4:	strne	r1, [r3, #0]
    afc6:	ands.w	r1, fp, #7
    afca:	beq.w	b1fc <_malloc_r+0x4a4>
    afce:	rsb	r0, r1, #8
    afd2:	rsb	r1, r1, #4096	; 0x1000
    afd6:	add	fp, r0
    afd8:	adds	r1, #8
    afda:	add	r2, fp
    afdc:	ubfx	r2, r2, #0, #12
    afe0:	rsb	r9, r2, r1
    afe4:	mov	r1, r9
    afe6:	mov	r0, r6
    afe8:	str	r3, [sp, #4]
    afea:	bl	b36c <_sbrk_r>
    afee:	adds	r3, r0, #1
    aff0:	ldr	r3, [sp, #4]
    aff2:	beq.w	b274 <_malloc_r+0x51c>
    aff6:	rsb	r2, fp, r0
    affa:	add	r2, r9
    affc:	orr.w	r2, r2, #1
    b000:	ldr	r1, [r3, #0]
    b002:	str.w	fp, [r7, #8]
    b006:	add	r1, r9
    b008:	cmp	r4, r7
    b00a:	str.w	r2, [fp, #4]
    b00e:	str	r1, [r3, #0]
    b010:	ldr.w	r9, [pc, #164]	; b0b8 <_malloc_r+0x360>
    b014:	beq.n	b044 <_malloc_r+0x2ec>
    b016:	cmp.w	r8, #15
    b01a:	bls.w	b218 <_malloc_r+0x4c0>
    b01e:	ldr	r2, [r4, #4]
    b020:	sub.w	r3, r8, #12
    b024:	bic.w	r3, r3, #7
    b028:	adds	r0, r4, r3
    b02a:	and.w	r2, r2, #1
    b02e:	mov.w	lr, #5
    b032:	orrs	r2, r3
    b034:	cmp	r3, #15
    b036:	str	r2, [r4, #4]
    b038:	str.w	lr, [r0, #4]
    b03c:	str.w	lr, [r0, #8]
    b040:	bhi.w	b27c <_malloc_r+0x524>
    b044:	ldr	r3, [pc, #116]	; (b0bc <_malloc_r+0x364>)
    b046:	ldr	r4, [r7, #8]
    b048:	ldr	r2, [r3, #0]
    b04a:	cmp	r1, r2
    b04c:	it	hi
    b04e:	strhi	r1, [r3, #0]
    b050:	ldr	r3, [pc, #108]	; (b0c0 <_malloc_r+0x368>)
    b052:	ldr	r2, [r3, #0]
    b054:	cmp	r1, r2
    b056:	ldr	r2, [r4, #4]
    b058:	it	hi
    b05a:	strhi	r1, [r3, #0]
    b05c:	bic.w	r2, r2, #3
    b060:	cmp	r5, r2
    b062:	sub.w	r3, r2, r5
    b066:	bhi.n	b06c <_malloc_r+0x314>
    b068:	cmp	r3, #15
    b06a:	bgt.n	b076 <_malloc_r+0x31e>
    b06c:	mov	r0, r6
    b06e:	bl	b368 <__malloc_unlock>
    b072:	movs	r4, #0
    b074:	b.n	aee8 <_malloc_r+0x190>
    b076:	adds	r2, r4, r5
    b078:	orr.w	r3, r3, #1
    b07c:	orr.w	r5, r5, #1
    b080:	str	r5, [r4, #4]
    b082:	mov	r0, r6
    b084:	str	r2, [r7, #8]
    b086:	str	r3, [r2, #4]
    b088:	bl	b368 <__malloc_unlock>
    b08c:	adds	r4, #8
    b08e:	mov	r0, r4
    b090:	add	sp, #12
    b092:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b096:	cmp	r3, #20
    b098:	bls.n	b17e <_malloc_r+0x426>
    b09a:	cmp	r3, #84	; 0x54
    b09c:	bhi.w	b1e8 <_malloc_r+0x490>
    b0a0:	lsrs	r0, r5, #12
    b0a2:	add.w	lr, r0, #111	; 0x6f
    b0a6:	mov.w	r3, lr, lsl #1
    b0aa:	adds	r0, #110	; 0x6e
    b0ac:	b.n	ad9c <_malloc_r+0x44>
    b0ae:	nop
    b0b0:	.word	0x2000118c
    b0b4:	.word	0x20015938
    b0b8:	.word	0x2001593c
    b0bc:	.word	0x20015934
    b0c0:	.word	0x20015930
    b0c4:	.word	0x20001598
    b0c8:	lsrs	r2, r3, #9
    b0ca:	cmp	r2, #4
    b0cc:	bls.n	b18c <_malloc_r+0x434>
    b0ce:	cmp	r2, #20
    b0d0:	bhi.w	b23a <_malloc_r+0x4e2>
    b0d4:	add.w	r1, r2, #92	; 0x5c
    b0d8:	lsls	r1, r1, #1
    b0da:	adds	r2, #91	; 0x5b
    b0dc:	add.w	ip, r7, r1, lsl #2
    b0e0:	ldr.w	r1, [r7, r1, lsl #2]
    b0e4:	ldr.w	r8, [pc, #476]	; b2c4 <_malloc_r+0x56c>
    b0e8:	sub.w	ip, ip, #8
    b0ec:	cmp	ip, r1
    b0ee:	beq.w	b202 <_malloc_r+0x4aa>
    b0f2:	ldr	r2, [r1, #4]
    b0f4:	bic.w	r2, r2, #3
    b0f8:	cmp	r3, r2
    b0fa:	bcs.n	b102 <_malloc_r+0x3aa>
    b0fc:	ldr	r1, [r1, #8]
    b0fe:	cmp	ip, r1
    b100:	bne.n	b0f2 <_malloc_r+0x39a>
    b102:	ldr.w	ip, [r1, #12]
    b106:	ldr	r2, [r7, #4]
    b108:	str.w	ip, [r4, #12]
    b10c:	str	r1, [r4, #8]
    b10e:	str.w	r4, [ip, #8]
    b112:	str	r4, [r1, #12]
    b114:	b.n	ae28 <_malloc_r+0xd0>
    b116:	adds	r3, r4, r5
    b118:	orr.w	r7, r2, #1
    b11c:	orr.w	r5, r5, #1
    b120:	str	r5, [r4, #4]
    b122:	mov	r0, r6
    b124:	str	r3, [r1, #20]
    b126:	str	r3, [r1, #16]
    b128:	str.w	lr, [r3, #12]
    b12c:	str.w	lr, [r3, #8]
    b130:	str	r7, [r3, #4]
    b132:	str	r2, [r3, r2]
    b134:	adds	r4, #8
    b136:	bl	b368 <__malloc_unlock>
    b13a:	b.n	aee8 <_malloc_r+0x190>
    b13c:	ldr	r2, [r1, #4]
    b13e:	b.n	ae28 <_malloc_r+0xd0>
    b140:	add.w	r8, r8, #1
    b144:	tst.w	r8, #3
    b148:	add.w	ip, ip, #8
    b14c:	bne.w	ae4e <_malloc_r+0xf6>
    b150:	b.n	b1b4 <_malloc_r+0x45c>
    b152:	ldr	r4, [r3, #12]
    b154:	cmp	r3, r4
    b156:	it	eq
    b158:	addeq	r0, #2
    b15a:	beq.w	adc8 <_malloc_r+0x70>
    b15e:	b.n	aec8 <_malloc_r+0x170>
    b160:	add	r3, r1
    b162:	mov	r4, r1
    b164:	ldr	r2, [r3, #4]
    b166:	ldr	r1, [r1, #12]
    b168:	ldr.w	r5, [r4, #8]!
    b16c:	orr.w	r2, r2, #1
    b170:	str	r2, [r3, #4]
    b172:	mov	r0, r6
    b174:	str	r1, [r5, #12]
    b176:	str	r5, [r1, #8]
    b178:	bl	b368 <__malloc_unlock>
    b17c:	b.n	aee8 <_malloc_r+0x190>
    b17e:	add.w	lr, r3, #92	; 0x5c
    b182:	add.w	r0, r3, #91	; 0x5b
    b186:	mov.w	r3, lr, lsl #1
    b18a:	b.n	ad9c <_malloc_r+0x44>
    b18c:	lsrs	r2, r3, #6
    b18e:	add.w	r1, r2, #57	; 0x39
    b192:	lsls	r1, r1, #1
    b194:	adds	r2, #56	; 0x38
    b196:	b.n	b0dc <_malloc_r+0x384>
    b198:	cmp	r4, r7
    b19a:	ldr	r3, [pc, #296]	; (b2c4 <_malloc_r+0x56c>)
    b19c:	beq.w	afa0 <_malloc_r+0x248>
    b1a0:	ldr	r4, [r3, #8]
    b1a2:	ldr	r2, [r4, #4]
    b1a4:	bic.w	r2, r2, #3
    b1a8:	b.n	b060 <_malloc_r+0x308>
    b1aa:	ldr.w	r3, [r9], #-8
    b1ae:	cmp	r9, r3
    b1b0:	bne.w	b2b8 <_malloc_r+0x560>
    b1b4:	tst.w	r0, #3
    b1b8:	add.w	r0, r0, #4294967295
    b1bc:	bne.n	b1aa <_malloc_r+0x452>
    b1be:	ldr	r3, [r7, #4]
    b1c0:	bic.w	r3, r3, r4
    b1c4:	str	r3, [r7, #4]
    b1c6:	lsls	r4, r4, #1
    b1c8:	cmp	r4, r3
    b1ca:	bhi.w	af48 <_malloc_r+0x1f0>
    b1ce:	cmp	r4, #0
    b1d0:	beq.w	af48 <_malloc_r+0x1f0>
    b1d4:	tst	r4, r3
    b1d6:	mov	r0, r8
    b1d8:	bne.w	ae46 <_malloc_r+0xee>
    b1dc:	lsls	r4, r4, #1
    b1de:	tst	r4, r3
    b1e0:	add.w	r0, r0, #4
    b1e4:	beq.n	b1dc <_malloc_r+0x484>
    b1e6:	b.n	ae46 <_malloc_r+0xee>
    b1e8:	cmp.w	r3, #340	; 0x154
    b1ec:	bhi.n	b220 <_malloc_r+0x4c8>
    b1ee:	lsrs	r0, r5, #15
    b1f0:	add.w	lr, r0, #120	; 0x78
    b1f4:	mov.w	r3, lr, lsl #1
    b1f8:	adds	r0, #119	; 0x77
    b1fa:	b.n	ad9c <_malloc_r+0x44>
    b1fc:	mov.w	r1, #4096	; 0x1000
    b200:	b.n	afda <_malloc_r+0x282>
    b202:	movs	r1, #1
    b204:	ldr.w	r3, [r8, #4]
    b208:	asrs	r2, r2, #2
    b20a:	lsl.w	r2, r1, r2
    b20e:	orrs	r2, r3
    b210:	str.w	r2, [r8, #4]
    b214:	mov	r1, ip
    b216:	b.n	b108 <_malloc_r+0x3b0>
    b218:	movs	r3, #1
    b21a:	str.w	r3, [fp, #4]
    b21e:	b.n	b06c <_malloc_r+0x314>
    b220:	movw	r2, #1364	; 0x554
    b224:	cmp	r3, r2
    b226:	bhi.n	b26a <_malloc_r+0x512>
    b228:	lsrs	r0, r5, #18
    b22a:	add.w	lr, r0, #125	; 0x7d
    b22e:	mov.w	r3, lr, lsl #1
    b232:	adds	r0, #124	; 0x7c
    b234:	b.n	ad9c <_malloc_r+0x44>
    b236:	adds	r2, #16
    b238:	b.n	af84 <_malloc_r+0x22c>
    b23a:	cmp	r2, #84	; 0x54
    b23c:	bhi.n	b28c <_malloc_r+0x534>
    b23e:	lsrs	r2, r3, #12
    b240:	add.w	r1, r2, #111	; 0x6f
    b244:	lsls	r1, r1, #1
    b246:	adds	r2, #110	; 0x6e
    b248:	b.n	b0dc <_malloc_r+0x384>
    b24a:	ldr	r4, [r7, #8]
    b24c:	ldr	r2, [r4, #4]
    b24e:	bic.w	r2, r2, #3
    b252:	b.n	b060 <_malloc_r+0x308>
    b254:	ubfx	r0, sl, #0, #12
    b258:	cmp	r0, #0
    b25a:	bne.w	afae <_malloc_r+0x256>
    b25e:	add	r2, r8
    b260:	ldr	r3, [r7, #8]
    b262:	orr.w	r2, r2, #1
    b266:	str	r2, [r3, #4]
    b268:	b.n	b044 <_malloc_r+0x2ec>
    b26a:	movs	r3, #254	; 0xfe
    b26c:	mov.w	lr, #127	; 0x7f
    b270:	movs	r0, #126	; 0x7e
    b272:	b.n	ad9c <_malloc_r+0x44>
    b274:	movs	r2, #1
    b276:	mov.w	r9, #0
    b27a:	b.n	b000 <_malloc_r+0x2a8>
    b27c:	add.w	r1, r4, #8
    b280:	mov	r0, r6
    b282:	bl	b4d0 <_free_r>
    b286:	ldr.w	r1, [r9]
    b28a:	b.n	b044 <_malloc_r+0x2ec>
    b28c:	cmp.w	r2, #340	; 0x154
    b290:	bhi.n	b29e <_malloc_r+0x546>
    b292:	lsrs	r2, r3, #15
    b294:	add.w	r1, r2, #120	; 0x78
    b298:	lsls	r1, r1, #1
    b29a:	adds	r2, #119	; 0x77
    b29c:	b.n	b0dc <_malloc_r+0x384>
    b29e:	movw	r1, #1364	; 0x554
    b2a2:	cmp	r2, r1
    b2a4:	bhi.n	b2b2 <_malloc_r+0x55a>
    b2a6:	lsrs	r2, r3, #18
    b2a8:	add.w	r1, r2, #125	; 0x7d
    b2ac:	lsls	r1, r1, #1
    b2ae:	adds	r2, #124	; 0x7c
    b2b0:	b.n	b0dc <_malloc_r+0x384>
    b2b2:	movs	r1, #254	; 0xfe
    b2b4:	movs	r2, #126	; 0x7e
    b2b6:	b.n	b0dc <_malloc_r+0x384>
    b2b8:	ldr	r3, [r7, #4]
    b2ba:	b.n	b1c6 <_malloc_r+0x46e>
    b2bc:	lsrs	r0, r5, #3
    b2be:	adds	r3, r0, #1
    b2c0:	lsls	r3, r3, #1
    b2c2:	b.n	aeb6 <_malloc_r+0x15e>
    b2c4:	.word	0x2000118c

0000b2c8 <memset>:
    b2c8:	push	{r4, r5, r6}
    b2ca:	lsls	r4, r0, #30
    b2cc:	beq.n	b35c <memset+0x94>
    b2ce:	subs	r4, r2, #1
    b2d0:	cmp	r2, #0
    b2d2:	beq.n	b358 <memset+0x90>
    b2d4:	uxtb	r5, r1
    b2d6:	mov	r3, r0
    b2d8:	b.n	b2e0 <memset+0x18>
    b2da:	subs	r2, r4, #1
    b2dc:	cbz	r4, b358 <memset+0x90>
    b2de:	mov	r4, r2
    b2e0:	strb.w	r5, [r3], #1
    b2e4:	lsls	r2, r3, #30
    b2e6:	bne.n	b2da <memset+0x12>
    b2e8:	cmp	r4, #3
    b2ea:	bls.n	b34a <memset+0x82>
    b2ec:	uxtb	r5, r1
    b2ee:	orr.w	r5, r5, r5, lsl #8
    b2f2:	cmp	r4, #15
    b2f4:	orr.w	r5, r5, r5, lsl #16
    b2f8:	bls.n	b32e <memset+0x66>
    b2fa:	add.w	r2, r3, #16
    b2fe:	mov	r6, r4
    b300:	subs	r6, #16
    b302:	cmp	r6, #15
    b304:	str.w	r5, [r2, #-16]
    b308:	str.w	r5, [r2, #-12]
    b30c:	str.w	r5, [r2, #-8]
    b310:	str.w	r5, [r2, #-4]
    b314:	add.w	r2, r2, #16
    b318:	bhi.n	b300 <memset+0x38>
    b31a:	sub.w	r2, r4, #16
    b31e:	bic.w	r2, r2, #15
    b322:	and.w	r4, r4, #15
    b326:	adds	r2, #16
    b328:	cmp	r4, #3
    b32a:	add	r3, r2
    b32c:	bls.n	b34a <memset+0x82>
    b32e:	mov	r6, r3
    b330:	mov	r2, r4
    b332:	subs	r2, #4
    b334:	cmp	r2, #3
    b336:	str.w	r5, [r6], #4
    b33a:	bhi.n	b332 <memset+0x6a>
    b33c:	subs	r2, r4, #4
    b33e:	bic.w	r2, r2, #3
    b342:	adds	r2, #4
    b344:	add	r3, r2
    b346:	and.w	r4, r4, #3
    b34a:	cbz	r4, b358 <memset+0x90>
    b34c:	uxtb	r1, r1
    b34e:	add	r4, r3
    b350:	strb.w	r1, [r3], #1
    b354:	cmp	r3, r4
    b356:	bne.n	b350 <memset+0x88>
    b358:	pop	{r4, r5, r6}
    b35a:	bx	lr
    b35c:	mov	r4, r2
    b35e:	mov	r3, r0
    b360:	b.n	b2e8 <memset+0x20>
    b362:	nop

0000b364 <__malloc_lock>:
    b364:	bx	lr
    b366:	nop

0000b368 <__malloc_unlock>:
    b368:	bx	lr
    b36a:	nop

0000b36c <_sbrk_r>:
    b36c:	push	{r3, r4, r5, lr}
    b36e:	ldr	r4, [pc, #28]	; (b38c <_sbrk_r+0x20>)
    b370:	movs	r3, #0
    b372:	mov	r5, r0
    b374:	mov	r0, r1
    b376:	str	r3, [r4, #0]
    b378:	bl	a8f4 <_sbrk>
    b37c:	adds	r3, r0, #1
    b37e:	beq.n	b382 <_sbrk_r+0x16>
    b380:	pop	{r3, r4, r5, pc}
    b382:	ldr	r3, [r4, #0]
    b384:	cmp	r3, #0
    b386:	beq.n	b380 <_sbrk_r+0x14>
    b388:	str	r3, [r5, #0]
    b38a:	pop	{r3, r4, r5, pc}
    b38c:	.word	0x200176c0

0000b390 <__register_exitproc>:
    b390:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b394:	ldr	r4, [pc, #148]	; (b42c <__register_exitproc+0x9c>)
    b396:	ldr	r5, [r4, #0]
    b398:	ldr.w	r4, [r5, #328]	; 0x148
    b39c:	mov	r6, r0
    b39e:	mov	r8, r1
    b3a0:	mov	sl, r2
    b3a2:	mov	r9, r3
    b3a4:	cbz	r4, b418 <__register_exitproc+0x88>
    b3a6:	ldr	r0, [r4, #4]
    b3a8:	cmp	r0, #31
    b3aa:	bgt.n	b3dc <__register_exitproc+0x4c>
    b3ac:	adds	r3, r0, #1
    b3ae:	cbz	r6, b3ce <__register_exitproc+0x3e>
    b3b0:	add.w	r5, r4, r0, lsl #2
    b3b4:	movs	r2, #1
    b3b6:	str.w	sl, [r5, #136]	; 0x88
    b3ba:	ldr.w	r1, [r4, #392]	; 0x188
    b3be:	lsls	r2, r0
    b3c0:	orrs	r1, r2
    b3c2:	cmp	r6, #2
    b3c4:	str.w	r1, [r4, #392]	; 0x188
    b3c8:	str.w	r9, [r5, #264]	; 0x108
    b3cc:	beq.n	b40c <__register_exitproc+0x7c>
    b3ce:	adds	r0, #2
    b3d0:	str	r3, [r4, #4]
    b3d2:	str.w	r8, [r4, r0, lsl #2]
    b3d6:	movs	r0, #0
    b3d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3dc:	ldr	r3, [pc, #80]	; (b430 <__register_exitproc+0xa0>)
    b3de:	cbz	r3, b422 <__register_exitproc+0x92>
    b3e0:	mov.w	r0, #400	; 0x190
    b3e4:	bl	ad38 <malloc>
    b3e8:	mov	r4, r0
    b3ea:	cbz	r0, b422 <__register_exitproc+0x92>
    b3ec:	ldr.w	r3, [r5, #328]	; 0x148
    b3f0:	movs	r7, #0
    b3f2:	stmia.w	r0, {r3, r7}
    b3f6:	str.w	r4, [r5, #328]	; 0x148
    b3fa:	mov	r0, r7
    b3fc:	movs	r3, #1
    b3fe:	str.w	r7, [r4, #392]	; 0x188
    b402:	str.w	r7, [r4, #396]	; 0x18c
    b406:	cmp	r6, #0
    b408:	beq.n	b3ce <__register_exitproc+0x3e>
    b40a:	b.n	b3b0 <__register_exitproc+0x20>
    b40c:	ldr.w	r1, [r4, #396]	; 0x18c
    b410:	orrs	r2, r1
    b412:	str.w	r2, [r4, #396]	; 0x18c
    b416:	b.n	b3ce <__register_exitproc+0x3e>
    b418:	add.w	r4, r5, #332	; 0x14c
    b41c:	str.w	r4, [r5, #328]	; 0x148
    b420:	b.n	b3a6 <__register_exitproc+0x16>
    b422:	mov.w	r0, #4294967295
    b426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b42a:	nop
    b42c:	.word	0x20000744
    b430:	.word	0x0000ad39

0000b434 <_malloc_trim_r>:
    b434:	push	{r3, r4, r5, r6, r7, lr}
    b436:	ldr	r7, [pc, #140]	; (b4c4 <_malloc_trim_r+0x90>)
    b438:	mov	r4, r1
    b43a:	mov	r6, r0
    b43c:	bl	b364 <__malloc_lock>
    b440:	ldr	r3, [r7, #8]
    b442:	ldr	r5, [r3, #4]
    b444:	bic.w	r5, r5, #3
    b448:	subs	r1, r5, r4
    b44a:	addw	r1, r1, #4079	; 0xfef
    b44e:	bic.w	r1, r1, #4080	; 0xff0
    b452:	bic.w	r1, r1, #15
    b456:	sub.w	r4, r1, #4096	; 0x1000
    b45a:	cmp.w	r4, #4096	; 0x1000
    b45e:	blt.n	b470 <_malloc_trim_r+0x3c>
    b460:	movs	r1, #0
    b462:	mov	r0, r6
    b464:	bl	b36c <_sbrk_r>
    b468:	ldr	r3, [r7, #8]
    b46a:	add	r3, r5
    b46c:	cmp	r0, r3
    b46e:	beq.n	b47a <_malloc_trim_r+0x46>
    b470:	mov	r0, r6
    b472:	bl	b368 <__malloc_unlock>
    b476:	movs	r0, #0
    b478:	pop	{r3, r4, r5, r6, r7, pc}
    b47a:	negs	r1, r4
    b47c:	mov	r0, r6
    b47e:	bl	b36c <_sbrk_r>
    b482:	adds	r0, #1
    b484:	beq.n	b4a2 <_malloc_trim_r+0x6e>
    b486:	ldr	r3, [pc, #64]	; (b4c8 <_malloc_trim_r+0x94>)
    b488:	ldr	r2, [r7, #8]
    b48a:	ldr	r1, [r3, #0]
    b48c:	subs	r5, r5, r4
    b48e:	orr.w	r5, r5, #1
    b492:	mov	r0, r6
    b494:	subs	r1, r1, r4
    b496:	str	r5, [r2, #4]
    b498:	str	r1, [r3, #0]
    b49a:	bl	b368 <__malloc_unlock>
    b49e:	movs	r0, #1
    b4a0:	pop	{r3, r4, r5, r6, r7, pc}
    b4a2:	movs	r1, #0
    b4a4:	mov	r0, r6
    b4a6:	bl	b36c <_sbrk_r>
    b4aa:	ldr	r2, [r7, #8]
    b4ac:	subs	r3, r0, r2
    b4ae:	cmp	r3, #15
    b4b0:	ble.n	b470 <_malloc_trim_r+0x3c>
    b4b2:	ldr	r4, [pc, #24]	; (b4cc <_malloc_trim_r+0x98>)
    b4b4:	ldr	r1, [pc, #16]	; (b4c8 <_malloc_trim_r+0x94>)
    b4b6:	ldr	r4, [r4, #0]
    b4b8:	orr.w	r3, r3, #1
    b4bc:	subs	r0, r0, r4
    b4be:	str	r3, [r2, #4]
    b4c0:	str	r0, [r1, #0]
    b4c2:	b.n	b470 <_malloc_trim_r+0x3c>
    b4c4:	.word	0x2000118c
    b4c8:	.word	0x2001593c
    b4cc:	.word	0x20001598

0000b4d0 <_free_r>:
    b4d0:	cmp	r1, #0
    b4d2:	beq.n	b560 <_free_r+0x90>
    b4d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4d8:	mov	r5, r1
    b4da:	mov	r8, r0
    b4dc:	bl	b364 <__malloc_lock>
    b4e0:	ldr.w	r7, [r5, #-4]
    b4e4:	ldr	r1, [pc, #424]	; (b690 <_free_r+0x1c0>)
    b4e6:	bic.w	r3, r7, #1
    b4ea:	sub.w	r4, r5, #8
    b4ee:	adds	r2, r4, r3
    b4f0:	ldr	r6, [r1, #8]
    b4f2:	ldr	r0, [r2, #4]
    b4f4:	cmp	r2, r6
    b4f6:	bic.w	r0, r0, #3
    b4fa:	beq.n	b5c2 <_free_r+0xf2>
    b4fc:	lsls	r6, r7, #31
    b4fe:	str	r0, [r2, #4]
    b500:	bmi.n	b51a <_free_r+0x4a>
    b502:	ldr.w	r7, [r5, #-8]
    b506:	subs	r4, r4, r7
    b508:	add.w	lr, r1, #8
    b50c:	ldr	r5, [r4, #8]
    b50e:	cmp	r5, lr
    b510:	add	r3, r7
    b512:	beq.n	b5f4 <_free_r+0x124>
    b514:	ldr	r7, [r4, #12]
    b516:	str	r7, [r5, #12]
    b518:	str	r5, [r7, #8]
    b51a:	adds	r5, r2, r0
    b51c:	ldr	r5, [r5, #4]
    b51e:	lsls	r5, r5, #31
    b520:	bpl.n	b5a8 <_free_r+0xd8>
    b522:	orr.w	r2, r3, #1
    b526:	str	r2, [r4, #4]
    b528:	str	r3, [r4, r3]
    b52a:	cmp.w	r3, #512	; 0x200
    b52e:	bcs.n	b562 <_free_r+0x92>
    b530:	lsrs	r3, r3, #3
    b532:	adds	r2, r3, #1
    b534:	ldr	r5, [r1, #4]
    b536:	ldr.w	r7, [r1, r2, lsl #3]
    b53a:	str	r7, [r4, #8]
    b53c:	movs	r0, #1
    b53e:	asrs	r3, r3, #2
    b540:	lsl.w	r3, r0, r3
    b544:	add.w	r0, r1, r2, lsl #3
    b548:	orrs	r5, r3
    b54a:	subs	r0, #8
    b54c:	str	r0, [r4, #12]
    b54e:	str	r5, [r1, #4]
    b550:	str.w	r4, [r1, r2, lsl #3]
    b554:	str	r4, [r7, #12]
    b556:	mov	r0, r8
    b558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b55c:	b.w	b368 <__malloc_unlock>
    b560:	bx	lr
    b562:	lsrs	r2, r3, #9
    b564:	cmp	r2, #4
    b566:	bhi.n	b610 <_free_r+0x140>
    b568:	lsrs	r2, r3, #6
    b56a:	add.w	r7, r2, #57	; 0x39
    b56e:	lsls	r7, r7, #1
    b570:	add.w	r5, r2, #56	; 0x38
    b574:	add.w	r0, r1, r7, lsl #2
    b578:	ldr.w	r2, [r1, r7, lsl #2]
    b57c:	ldr	r1, [pc, #272]	; (b690 <_free_r+0x1c0>)
    b57e:	subs	r0, #8
    b580:	cmp	r0, r2
    b582:	beq.n	b620 <_free_r+0x150>
    b584:	ldr	r1, [r2, #4]
    b586:	bic.w	r1, r1, #3
    b58a:	cmp	r3, r1
    b58c:	bcs.n	b594 <_free_r+0xc4>
    b58e:	ldr	r2, [r2, #8]
    b590:	cmp	r0, r2
    b592:	bne.n	b584 <_free_r+0xb4>
    b594:	ldr	r0, [r2, #12]
    b596:	str	r0, [r4, #12]
    b598:	str	r2, [r4, #8]
    b59a:	str	r4, [r0, #8]
    b59c:	str	r4, [r2, #12]
    b59e:	mov	r0, r8
    b5a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5a4:	b.w	b368 <__malloc_unlock>
    b5a8:	ldr	r5, [r2, #8]
    b5aa:	ldr	r7, [pc, #232]	; (b694 <_free_r+0x1c4>)
    b5ac:	cmp	r5, r7
    b5ae:	add	r3, r0
    b5b0:	beq.n	b632 <_free_r+0x162>
    b5b2:	ldr	r0, [r2, #12]
    b5b4:	str	r0, [r5, #12]
    b5b6:	orr.w	r2, r3, #1
    b5ba:	str	r5, [r0, #8]
    b5bc:	str	r2, [r4, #4]
    b5be:	str	r3, [r4, r3]
    b5c0:	b.n	b52a <_free_r+0x5a>
    b5c2:	lsls	r7, r7, #31
    b5c4:	add	r3, r0
    b5c6:	bmi.n	b5d8 <_free_r+0x108>
    b5c8:	ldr.w	r2, [r5, #-8]
    b5cc:	subs	r4, r4, r2
    b5ce:	add	r3, r2
    b5d0:	ldr	r0, [r4, #8]
    b5d2:	ldr	r2, [r4, #12]
    b5d4:	str	r2, [r0, #12]
    b5d6:	str	r0, [r2, #8]
    b5d8:	ldr	r2, [pc, #188]	; (b698 <_free_r+0x1c8>)
    b5da:	ldr	r2, [r2, #0]
    b5dc:	orr.w	r0, r3, #1
    b5e0:	cmp	r3, r2
    b5e2:	str	r0, [r4, #4]
    b5e4:	str	r4, [r1, #8]
    b5e6:	bcc.n	b556 <_free_r+0x86>
    b5e8:	ldr	r3, [pc, #176]	; (b69c <_free_r+0x1cc>)
    b5ea:	mov	r0, r8
    b5ec:	ldr	r1, [r3, #0]
    b5ee:	bl	b434 <_malloc_trim_r>
    b5f2:	b.n	b556 <_free_r+0x86>
    b5f4:	adds	r1, r2, r0
    b5f6:	ldr	r1, [r1, #4]
    b5f8:	lsls	r1, r1, #31
    b5fa:	bmi.n	b686 <_free_r+0x1b6>
    b5fc:	ldr	r1, [r2, #8]
    b5fe:	ldr	r2, [r2, #12]
    b600:	str	r2, [r1, #12]
    b602:	add	r3, r0
    b604:	orr.w	r0, r3, #1
    b608:	str	r1, [r2, #8]
    b60a:	str	r0, [r4, #4]
    b60c:	str	r3, [r4, r3]
    b60e:	b.n	b556 <_free_r+0x86>
    b610:	cmp	r2, #20
    b612:	bhi.n	b644 <_free_r+0x174>
    b614:	add.w	r7, r2, #92	; 0x5c
    b618:	lsls	r7, r7, #1
    b61a:	add.w	r5, r2, #91	; 0x5b
    b61e:	b.n	b574 <_free_r+0xa4>
    b620:	asrs	r2, r5, #2
    b622:	ldr	r3, [r1, #4]
    b624:	movs	r5, #1
    b626:	lsl.w	r2, r5, r2
    b62a:	orrs	r3, r2
    b62c:	str	r3, [r1, #4]
    b62e:	mov	r2, r0
    b630:	b.n	b596 <_free_r+0xc6>
    b632:	orr.w	r2, r3, #1
    b636:	str	r4, [r1, #20]
    b638:	str	r4, [r1, #16]
    b63a:	str	r5, [r4, #12]
    b63c:	str	r5, [r4, #8]
    b63e:	str	r2, [r4, #4]
    b640:	str	r3, [r4, r3]
    b642:	b.n	b556 <_free_r+0x86>
    b644:	cmp	r2, #84	; 0x54
    b646:	bhi.n	b656 <_free_r+0x186>
    b648:	lsrs	r2, r3, #12
    b64a:	add.w	r7, r2, #111	; 0x6f
    b64e:	lsls	r7, r7, #1
    b650:	add.w	r5, r2, #110	; 0x6e
    b654:	b.n	b574 <_free_r+0xa4>
    b656:	cmp.w	r2, #340	; 0x154
    b65a:	bhi.n	b66a <_free_r+0x19a>
    b65c:	lsrs	r2, r3, #15
    b65e:	add.w	r7, r2, #120	; 0x78
    b662:	lsls	r7, r7, #1
    b664:	add.w	r5, r2, #119	; 0x77
    b668:	b.n	b574 <_free_r+0xa4>
    b66a:	movw	r0, #1364	; 0x554
    b66e:	cmp	r2, r0
    b670:	bhi.n	b680 <_free_r+0x1b0>
    b672:	lsrs	r2, r3, #18
    b674:	add.w	r7, r2, #125	; 0x7d
    b678:	lsls	r7, r7, #1
    b67a:	add.w	r5, r2, #124	; 0x7c
    b67e:	b.n	b574 <_free_r+0xa4>
    b680:	movs	r7, #254	; 0xfe
    b682:	movs	r5, #126	; 0x7e
    b684:	b.n	b574 <_free_r+0xa4>
    b686:	orr.w	r2, r3, #1
    b68a:	str	r2, [r4, #4]
    b68c:	str	r3, [r4, r3]
    b68e:	b.n	b556 <_free_r+0x86>
    b690:	.word	0x2000118c
    b694:	.word	0x20001194
    b698:	.word	0x20001594
    b69c:	.word	0x20015938

0000b6a0 <___init_veneer>:
    b6a0:	ldr.w	pc, [pc]	; b6a4 <___init_veneer+0x4>
    b6a4:	.word	0x600015e1
	...

Disassembly of section .fini:

0000b6b0 <_fini>:
    b6b0:	push	{r3, r4, r5, r6, r7, lr}
    b6b2:	nop
