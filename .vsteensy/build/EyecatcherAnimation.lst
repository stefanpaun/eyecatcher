
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000f8a0 l    d  .fini	00000000 .fini
0000f8a4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001770 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000de74 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000c3f8 l     F .text.itcm	0000005c schedule_transfer
0000c454 l     F .text.itcm	00000030 run_callbacks
0000c484 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000c51c l     F .text.itcm	00000544 isr
2000df48 l     O .bss	00000004 endpointN_notify_mask
2000df50 l     O .bss	00000004 endpoint0_notify_mask
2000df54 l     O .bss	00000001 usb_reboot_timer
2000df58 l     O .bss	00000008 endpoint0_setupdata
2000df60 l     O .bss	00000008 reply_buffer
2000df68 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000e7dc l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000e7e0 l     O .bss	00000004 s_hotTemp
2000e7e4 l     O .bss	00000004 s_hot_ROOM
2000e7e8 l     O .bss	00000004 s_roomC_hotC
2000e7ec l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001770 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001774 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000321c l     F .text.itcm	00000958 Screen::iterate_animation() [clone .part.20]
000051c8 l     F .text.itcm	00005cf8 _GLOBAL__sub_I_bri_level
20003e70 l     O .bss	00001200 mask_B
200001c0 l     O .data	00000400 dim_curve
20000970 l     O .data	00000240 background_B
20009ef0 l     O .bss	00001200 mask_A
20000bb0 l     O .data	00000240 background_A
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
0000bbc4 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
0000b680 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000bd04 l     F .text.itcm	00000028 rx_event
0000bd2c l     F .text.itcm	00000070 usb_serial_flush_callback
0000bd9c l     F .text.itcm	0000015c usb_serial_write.part.1
2000d5fc l     O .bss	00000700 txbuffer
2000dcfc l     O .bss	00000001 tx_noautoflush
2000dcfd l     O .bss	00000001 tx_head
2000dd00 l     O .bss	000000c0 rx_buffer
2000ddc0 l     O .bss	00000006 rx_index
2000ddc8 l     O .bss	00000006 rx_count
2000dde0 l     O .bss	00000060 rx_transfer
2000de40 l     O .bss	00000002 tx_available
2000de60 l     O .bss	000000e0 tx_transfer
2000df40 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000cbfc l     F .text.itcm	00000068 flash_wait
0000cc64 l     F .text.itcm	000000d0 flash_write.constprop.0
2000df74 l     O .bss	0000001e sector_index
2000df92 l     O .bss	00000001 initialized
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000d0d0 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000df8 l     O .data	0000000a qualifier_descriptor
20000e1c l     O .data	00000043 config_descriptor
20000e60 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 WString.cpp
0000d868 l     F .text.itcm	0000001a String::operator=(char const*) [clone .part.3]
00000000 l    df *ABS*	00000000 yield.cpp
2000dfb9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000da28 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000dfbc l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
2000dfc0 l     O .bss	00000400 tx_buffer1
200008d0 l     O .data	0000005c UART6_Hardware
2000e3c0 l     O .bss	00000400 rx_buffer1
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000f28 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015c0 l     F .text.progmem	00000008 __loop_veneer
600015c8 l     F .text.progmem	00000008 __setup_veneer
600015d0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015d8 l     F .text.progmem	00000008 __pwm_init_veneer
600015e0 l     F .text.progmem	00000008 __memset_veneer
600015e8 l     F .text.progmem	00000008 __yield_veneer
600015f0 l     F .text.progmem	00000008 __delay_veneer
600015f8 l     F .text.progmem	00000008 ____libc_init_array_veneer
0000f898 l     F .text.itcm	00000008 ___init_veneer
0000c020 g     F .text.itcm	00000014 usb_serial_available
0000f35c g     F .text.itcm	000000ba strcpy
0000d988  w    F .text.itcm	000000a0 yield
0000e240 g     F .text.itcm	000000a8 sqrt
2000178d g     O .bss	00000001 didPulse
2000df4c g     O .bss	00000004 usb_timer1_callback
20000e04 g     O .data	00000018 usb_string_manufacturer_name_default
2000df9c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000bb0c g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
20002c1c g     O .bss	00000004 sinceBeam
0000dda8 g     F .text.itcm	00000020 Print::println()
0000dab8 g     F .text.itcm	00000014 random(long, long)
20002c18 g     O .bss	00000004 sinceCircle
0000bb6c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000ec4c g     F .text.itcm	00000002 __malloc_unlock
20005070 g     O .bss	00000004 speed_offset
60001458 g     F .text.progmem	00000058 analog_init
0000cd34 g     F .text.itcm	0000004c eeprom_initialize
20000df4 g     O .data	00000004 F_CPU_ACTUAL
0000d76c g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000eae4 g     F .text.itcm	000000c6 memmove
000010f8 g     F .text.itcm	00001b90 regular_setup()
0000dc44 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000d214 g     F .text.itcm	00000038 HardwareSerial::peek()
2000e7d4 g     O .bss	00000001 EventResponder::runningFromYield
2000d538 g     O .bss	000000c4 Alarm
0000dd30 g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000e4f8 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000e7c0 g     O .bss	00000004 EventResponder::firstInterrupt
0000cba8 g     F .text.itcm	00000028 usb_transfer_status
20000f08 g     O .data	00000001 usb_enable_serial_event_processing
20000ea8 g     O .data	00000060 Serial1
0000dd14  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200005c0 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
0000f8a0 g       .text.itcm	00000000 _etext
0000b9fc g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001770 g       .bss	00000000 _sbss
0000b708 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
0000d1f8 g     F .text.itcm	0000001c HardwareSerial::available()
60001610 g       *ABS*	00000000 _stextload
0000afb4 g     F .text.itcm	00000020 loop
20006838 g     O .bss	00001224 sat_automaton_B
20008ca4 g     O .bss	00000014 synapse_A
0000ca60 g     F .text.itcm	00000064 usb_config_rx
0000dad8  w    F .text.itcm	0000000c serialEvent1()
0000dbdc g     F .text.itcm	00000068 MillisTimer::addToActiveList()
0000b7b4 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000d614 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000e7c4 g     O .bss	00000004 EventResponder::lastInterrupt
0000bbd0 g     F .text.itcm	00000134 memcpy
20008c9c g     O .bss	00000004 sinceIntro
0000d794 g     F .text.itcm	0000002c HardwareSerial::disableSerialEvents()
2000df98 g     O .bss	00000004 systick_millis_count
2000df70 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00000b88 g     F .text.itcm	00000534 updateCircles()
20000e04  w    O .data	00000018 usb_string_manufacturer_name
0000e554 g     F .text.itcm	00000010 malloc
20008cb8 g     O .bss	00000014 synapse_B
0000db78  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
200029bc g     O .bss	00000258 circles
60001268 g     F .text.progmem	000000ec usb_init
000005d0 g     F .text.itcm	000005b4 updateBeams()
2000e7f8 g     O .bss	00000004 __malloc_top_pad
0000cbd0 g     F .text.itcm	0000002c rtc_set
20010280 g     O .bss	00000004 systick_safe_read
00003b78 g     F .text.itcm	00001172 regular_animation()
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
20000964 g     O .data	00000000 .hidden __dso_handle
0000b72c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000d7d0 g     F .text.itcm	0000002a String::reserve(unsigned int)
0000f040 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000bfb0 g     F .text.itcm	0000004c usb_serial_getchar
2000e824 g     O .bss	00000008 usb_cdc_line_coding
0000d0f4 g     F .text.itcm	0000000a digitalWrite
2000e7cc g     O .bss	00000004 EventResponder::lastYield
0000aec0 g     F .text.itcm	000000f4 readMessages()
00004cf0 g     F .text.itcm	000004d4 ceremony_animation()
2000e7f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d100 g     F .text.itcm	00000080 pinMode
0000d954 g     F .text.itcm	00000034 String::getBytes(unsigned char*, unsigned int, unsigned int) const
20007a64 g     O .bss	00000010 readBuffer
20280000 g       .bss	00000000 _heap_end
20008ca0 g     O .bss	00000004 implosionTimer
20007a5c g     O .bss	00000001 isRegularAnimation
20000f20 g     O .data	00000001 __fdlib_version
2000e7d0 g     O .bss	00000004 EventResponder::firstYield
20000960 g     O .data	00000004 _global_impure_ptr
0000ec60 g     F .text.itcm	000003de _realloc_r
0000e504 g     F .text.itcm	00000050 __libc_init_array
0000de7c  w    F .text.itcm	0000008c HardFault_HandlerC
200029b8 g     O .bss	00000001 screenFadeUpdateSwitcher
0000dcfc  w    F .text.itcm	00000004 usb_serial_class::clear()
0000df08 g     F .text.itcm	00000030 _sbrk
60010ebc g       *ABS*	00000000 _sdataload
2000e7d8 g     O .bss	00000004 MillisTimer::listWaiting
20000f1c g     O .data	00000004 __brkval
2000df41 g     O .bss	00000001 usb_cdc_line_rtsdtr
600015a8 g     F .text.progmem	00000000 _init
0000bef8 g     F .text.itcm	00000002 usb_serial_reset
0000d7c0 g     F .text.itcm	0000000e String::~String()
0000cdf0 g     F .text.itcm	000001ac eeprom_write_byte
20010700 g       .bss	00000000 _ebss
0000d1d8 g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
0000d898 g     F .text.itcm	00000070 String::append(char const*, unsigned int)
20008c98 g     O .bss	00000004 randomSeedN
0000e47c g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000b0f0 g     O .bss	00001224 bg_automaton_A
0000d7fc g     F .text.itcm	00000042 String::copy(char const*, unsigned int)
0000b764 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
0000d554 g     F .text.itcm	000000c0 HardwareSerial::write9bit(unsigned long)
2000f000 g     O .bss	00000020 endpoint0_transfer_data
0000df88 g     F .text.itcm	000002b8 pwm_init
0000d2b8 g     F .text.itcm	0000001a HardwareSerial::flush()
0000d7c0 g     F .text.itcm	0000000e String::~String()
600013f4 g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
0000ba58 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e82c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000cb5c g     F .text.itcm	00000028 usb_transmit
0000dcdc g     F .text.itcm	00000020 systick_isr
20000f0c g     O .data	00000010 Serial
0000dacc g     F .text.itcm	0000000c IRQHandler_Serial1
2000dfb8 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
200008ac g     O .data	00000024 vtable for HardwareSerial
0000dd1c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000bffc g     F .text.itcm	00000024 usb_serial_peekchar
0000c16c g     F .text.itcm	0000028c set_arm_clock
2000df94 g     O .bss	00000004 systick_cycle_count
20000e90 g     O .data	00000016 usb_string_serial_number_default
0000f6c4 g     F .text.itcm	000001d0 _free_r
0000dd0c  w    F .text.itcm	00000004 usb_serial_class::flush()
20001760 g     O .data	00000004 __malloc_sbrk_base
0000dd04  w    F .text.itcm	00000004 usb_serial_class::read()
00000290 g     F .text.itcm	000000f4 newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])
0000cb2c g     F .text.itcm	0000002e usb_prepare_transfer
0000de64 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000df44 g     O .bss	00000004 usb_timer0_callback
0000dd24  w    F .text.itcm	0000000c serialEvent()
0000f584 g     F .text.itcm	000000a4 __register_exitproc
0000bb6c g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000cd80 g     F .text.itcm	00000070 eeprom_read_byte
0000c034 g     F .text.itcm	0000003c usb_serial_flush_input
0000c070 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
0000f51c g     F .text.itcm	00000066 strncpy
2000e7fc g     O .bss	00000028 __malloc_current_mallinfo
20008ccc g     O .bss	00001224 grow_automaton_A
00000080  w    F .text.itcm	00000140 Screen::Screen()
0000ec50 g     F .text.itcm	00000010 realloc
00000388 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000e4ec g     F .text.itcm	0000000c __cxa_atexit
20005614 g     O .bss	00001224 sat_automaton_A
0000dae4 g     F .text.itcm	00000014 serial_event_check_serial1()
0000dab0 g     F .text.itcm	00000008 random(unsigned long)
2000092c  w    O .data	00000028 vtable for usb_serial_class
0000d840 g     F .text.itcm	00000026 String::String(char const*)
20003e5c g     O .bss	00000014 matrix_B
2000e7c8 g     O .bss	00000004 MillisTimer::listActive
2000178c g     O .bss	00000001 incomingByte
20001354 g     O .data	00000408 __malloc_av_
0000c100 g     F .text.itcm	0000006c usb_serial_flush_output
0000ec48 g     F .text.itcm	00000002 __malloc_lock
000010bc g     F .text.itcm	00000038 updateRandomSeed()
20010400 g     O .bss	000002c0 _VectorsRam
0000e48c g     F .text.itcm	0000005e _calloc_r
0000d928 g     F .text.itcm	0000002c String::equals(char const*) const
0000bb08 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
20000968 g     O .data	00000004 bri_level
0000ebac g     F .text.itcm	0000009a memset
2000e7f0 g     O .bss	00000004 __malloc_max_total_mem
000001c0 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
00002c88 g     F .text.itcm	00000594 updateScreensFade()
0000e46c g     F .text.itcm	00000004 matherr
0000d180 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000e574 g     F .text.itcm	00000570 _malloc_r
0000daf8 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20003e48 g     O .bss	00000014 matrix_A
0000d07c g     F .text.itcm	00000054 micros
0000f628 g     F .text.itcm	0000009c _malloc_trim_r
20001794 g     O .bss	00001224 fg_automaton_A
20000e8c g     O .data	00000004 string0
0000c09c g     F .text.itcm	00000018 usb_serial_write
0000dd08  w    F .text.itcm	00000004 usb_serial_class::available()
0000f088 g     F .text.itcm	000002dc strcmp
0000bb60 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
20010000 g     O .bss	00000280 endpoint_queue_head
20000e74  w    O .data	00000016 usb_string_product_name
0000cfbc g     F .text.itcm	000000c0 delay
0000f8a0 g     F .fini	00000000 _fini
0000d884 g     F .text.itcm	00000014 String::operator=(char const*)
60001020 g     O .text.progmem	0000000c BootData
0000de48 g     F .text.itcm	00000016 Print::print(long)
2000c314 g     O .bss	00001224 bg_automaton_B
0000d840 g     F .text.itcm	00000026 String::String(char const*)
20001350 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
0000b994 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000daa4 g     F .text.itcm	0000000c randomSeed(unsigned long)
0000d618 g     F .text.itcm	00000152 HardwareSerial::IRQHandler()
0000b100 g     F .text.itcm	00000580 setup
20000840 g     O .data	0000006c usb_descriptor_list
20005268 g     O .bss	000001f4 screen_B
20007a74 g     O .bss	00001224 grow_automaton_B
20007a60 g     O .bss	00000004 sinceAutomatonInit
0000e2e8 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
20001790 g     O .bss	00000004 sinceCircleUpdate
0000c0b4 g     F .text.itcm	0000004c usb_serial_write_buffer_free
20002c24 g     O .bss	00001224 fg_automaton_B
20005074 g     O .bss	000001f4 screen_A
0000befc g     F .text.itcm	000000b4 usb_serial_configure
20001770 g       .data	00000000 _edata
0000b9d0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000dd10  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
2000096c g     O .data	00000004 freq_offset
0000d2d4 g     F .text.itcm	00000040 nvic_execution_priority()
0000ba4c g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000df38 g     F .text.itcm	0000004e ultoa
20002c14 g     O .bss	00000004 sinceBeamUpdate
2000545c g     O .bss	000001b8 beams
0000de60 g     F .text.itcm	00000004 operator new(unsigned int)
0000db94 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
2000175c g     O .data	00000004 __malloc_trim_threshold
0000dd00  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d24c g     F .text.itcm	0000006a HardwareSerial::read()
60001600 g       .text.progmem	00000000 __init_array_start
20000df0 g     O .data	00000004 F_BUS_ACTUAL
0000b9d0 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20002c20 g     O .bss	00000001 didIntro
0000f440 g     F .text.itcm	000000dc strlen
20000e74 g     O .data	00000016 usb_string_product_name_default
0000afd8 g     F .text.itcm	00000124 readAnimationType()
0000dd5c g     F .text.itcm	0000004a Print::print(String const&)
60001354 g     F .text.progmem	000000a0 configure_cache
0000cf9c g     F .text.itcm	0000001e eeprom_write_block
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000d314 g     F .text.itcm	00000240 HardwareSerial::begin(unsigned long, unsigned short)
60001600 g       .text.progmem	00000000 __preinit_array_start
0000cb84 g     F .text.itcm	00000024 usb_receive
0000b6e8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000d908 g     F .text.itcm	0000001e String::append(char)
0000b6e8 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00012620 g       *ABS*	00000000 _flashimagelen
0000e470 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000dbd8 g     F .text.itcm	00000004 pendablesrvreq_isr
0000ddc8 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000cac4 g     F .text.itcm	00000068 usb_config_tx
0000e564 g     F .text.itcm	00000010 free
20000e90  w    O .data	00000016 usb_string_serial_number
00000080  w    F .text.itcm	00000140 Screen::Screen()



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...` &......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	60001354 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	600013f4 <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015b8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001458 <analog_init>
	pwm_init();
600011be:	bl	600015d8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015c8 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015c0 <__loop_veneer>
		yield();
600011da:	bl	600015e8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000f8a0
600011f8:	.word	0x20000000
600011fc:	.word	0x60010ebc
60001200:	.word	0x20001770
60001204:	.word	0x20001770
60001208:	.word	0x20010700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200103fc
60001214:	.word	0x0000de65
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000dbd9
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000dcdd
6000124c:	.word	0xe0001004
60001250:	.word	0x2000df94
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000df98
60001264:	.word	0x20010400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015d0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015f0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015e0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20010000
60001348:	.word	0x20010400
6000134c:	.word	0x0000c51d
60001350:	.word	0xe000e10c

60001354 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
60001354:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
60001356:	ldr	r2, [pc, #100]	; (600013bc <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001358:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000135a:	ldr	r3, [pc, #100]	; (600013c0 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000135c:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001360:	ldr	r0, [pc, #96]	; (600013c4 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001362:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001364:	ldr	r6, [pc, #96]	; (600013c8 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001366:	ldr	r5, [pc, #100]	; (600013cc <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001368:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000136a:	ldr	r7, [pc, #100]	; (600013d0 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000136c:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001370:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001372:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001374:	ldr	r6, [pc, #92]	; (600013d4 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001376:	ldr	r5, [pc, #96]	; (600013d8 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001378:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000137a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000137c:	ldr	r7, [pc, #92]	; (600013dc <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000137e:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001380:	ldr	r6, [pc, #92]	; (600013e0 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001382:	ldr	r5, [pc, #96]	; (600013e4 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001384:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001386:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001388:	ldr	r7, [pc, #92]	; (600013e8 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000138a:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000138c:	ldr	r6, [pc, #92]	; (600013ec <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000138e:	ldr	r5, [pc, #96]	; (600013f0 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001390:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001392:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001394:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001396:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001398:	dsb	sy
	asm("isb");
6000139c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013a0:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013a4:	dsb	sy
	asm("isb");
600013a8:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600013ac:	ldr.w	r3, [r2, #-136]
600013b0:	orr.w	r3, r3, #196608	; 0x30000
600013b4:	str.w	r3, [r2, #-136]
600013b8:	pop	{r4, r5, r6, r7, pc}
600013ba:	nop
600013bc:	.word	0xe000ed9c
600013c0:	.word	0xe000eda0
600013c4:	.word	0xe000ed94
600013c8:	.word	0x03080025
600013cc:	.word	0x00200011
600013d0:	.word	0x07020021
600013d4:	.word	0x20000012
600013d8:	.word	0x13080025
600013dc:	.word	0x20200013
600013e0:	.word	0x130b0027
600013e4:	.word	0x40000014
600013e8:	.word	0x13100033
600013ec:	.word	0x60000015
600013f0:	.word	0x070b002f

600013f4 <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
600013f4:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	tst.w	r3, #2
60001414:	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	tst.w	r3, #2
60001422:	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	tst.w	r3, #8192	; 0x2000
60001428:	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	str	r5, [r2, #20]
			continue;
6000142c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	tst.w	r3, #4096	; 0x1000
60001432:	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	str	r6, [r2, #20]
			continue;
60001436:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	cmp	r3, #0
6000143a:	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	tst.w	r3, #65536	; 0x10000
60001440:	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	str	r1, [r2, #24]
			continue;
60001444:	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	lsls	r3, r3, #25
60001448:	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	str	r7, [r2, #20]
			continue;
6000144c:	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	pop	{r4, r5, r6, r7}
60001450:	bx	lr
60001452:	nop
60001454:	.word	0x400d8000

60001458 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001458:	ldr	r3, [pc, #68]	; (600014a0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000145a:	ldr	r1, [pc, #72]	; (600014a4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000145c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000145e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001460:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001464:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001466:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001468:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000146c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000146e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001470:	orr.w	r0, r0, #768	; 0x300
60001474:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001476:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001478:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000147a:	ldr	r3, [r2, #72]	; 0x48
6000147c:	lsls	r3, r3, #24
6000147e:	bmi.n	6000147a <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001480:	ldr	r3, [pc, #36]	; (600014a8 <analog_init+0x50>)
60001482:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001486:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001488:	ldr	r2, [pc, #24]	; (600014a4 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000148a:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000148c:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000148e:	ldr	r3, [r2, #72]	; 0x48
60001490:	ands.w	r3, r3, #128	; 0x80
60001494:	bne.n	6000148e <analog_init+0x36>
	calibrating = 0;
60001496:	ldr	r2, [pc, #20]	; (600014ac <analog_init+0x54>)
60001498:	strb	r3, [r2, #0]
}
6000149a:	pop	{r4, r5}
6000149c:	bx	lr
6000149e:	nop
600014a0:	.word	0x400fc000
600014a4:	.word	0x400c4000
600014a8:	.word	0x400c8000
600014ac:	.word	0x2000e7dc

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000e7e8
60001598:	.word	0x2000e7e4
6000159c:	.word	0x2000e7ec
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000e7e0

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__set_arm_clock_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__set_arm_clock_veneer+0x4>
600015bc:	.word	0x0000c16d

600015c0 <__loop_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__loop_veneer+0x4>
600015c4:	.word	0x0000afb5

600015c8 <__setup_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__setup_veneer+0x4>
600015cc:	.word	0x0000b101

600015d0 <__usb_init_serialnumber_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__usb_init_serialnumber_veneer+0x4>
600015d4:	.word	0x0000d181

600015d8 <__pwm_init_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__pwm_init_veneer+0x4>
600015dc:	.word	0x0000df89

600015e0 <__memset_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__memset_veneer+0x4>
600015e4:	.word	0x0000ebad

600015e8 <__yield_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__yield_veneer+0x4>
600015ec:	.word	0x0000d989

600015f0 <__delay_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__delay_veneer+0x4>
600015f4:	.word	0x0000cfbd

600015f8 <____libc_init_array_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <____libc_init_array_veneer+0x4>
600015fc:	.word	0x0000e505

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x000051c9
60001608:	.word	0x0000bbc5

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r6, #29
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x0000f8a4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r6, #29
      6e:	.short	0x2000
      70:	strh.w	r0, [r4]
      74:	asrs	r0, r6, #29
      76:	movs	r0, #0
	...

00000080 <Screen::Screen()>:
      80:	.word	0x41f0e92d
      84:	ldr	r4, [pc, #304]	; (1b8 <Screen::Screen()+0x138>)
      86:	mov	r6, r0
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r5, r0
      8a:	.short	0x2702
      8c:	mov.w	r8, #1
  
  if(num >= 4){
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	.word	0xc50fcc0f
      94:	ldmia.w	r4, {r0, r1}
      98:	.word	0xe88522a8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      9c:	movs	r3, r0
      9e:	add.w	r1, r4, #8
      a2:	.short	0xf106
      a4:	movs	r0, r3
      a6:	.short	0xf00b
      a8:	ldc2	1, cr15, [r3, #16]
      ac:	lsls	r0, r6, #6
      ae:	add.w	r4, r4, #344	; 0x158
      b2:	movs	r2, #168	; 0xa8
      b4:	add.w	r0, r6, #192	; 0xc0
      b8:	.word	0xf00b2503
      bc:	stc2	5, cr15, [r9, #24]
      c0:	strb	r4, [r6, #14]
      c2:	ldmia.w	r4, {r0, r1, r2}
      c6:	.short	0xe883
      c8:	movs	r7, r0
      ca:	movs	r2, #60	; 0x3c
      cc:	movs	r1, #0
      ce:	add.w	r0, r6, #372	; 0x174
      d2:	bl	ebac <memset>
      d6:	movs	r3, #5
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      d8:	mov	r1, r5
      da:	mov	r0, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      dc:	str.w	r3, [r6, #372]	; 0x174
      e0:	.word	0x7180f8c6
      e4:	str.w	r8, [r6, #376]	; 0x178
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      e8:	.word	0xfce6f00d
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      ec:	str.w	r5, [r6, #396]	; 0x18c
      f0:	.word	0x0184f8c6
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      f4:	movs	r1, #4
      f6:	mov	r0, r7
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
      f8:	.word	0xf00d2700
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      fc:	ldc2l	1, cr2, [sp], {10}
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     100:	str.w	r0, [r6, #400]	; 0x190

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{LINE, random(3, 10), false}
     104:	.word	0xf8c64628
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     108:	strh	r0, [r3, #12]

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{LINE, random(3, 10), false}
     10a:	.short	0xf00d
     10c:	ldc2l	11, cr4, [r5], {43}	; 0x2b
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     110:	.word	0x461d2200
     114:	str.w	r2, [r6, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     118:	.word	0x6a996a5c
     11c:	str.w	r0, [r6, #412]	; 0x19c
     120:	str.w	r7, [r6, #468]	; 0x1d4
     124:	str.w	r2, [r6, #464]	; 0x1d0
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     128:	.word	0x6aab6a6a
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     12c:	cmp	r3, r1
     12e:	.short	0xbf08
     130:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     132:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     134:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     136:	ite	eq
     138:	moveq	r0, #1
     13a:	movne	r0, #0
     13c:	cmp	r0, #0
     13e:	beq.n	128 <Screen::Screen()+0xa8>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
     140:	lsrs	r1, r3, #5
     142:	mov.w	r0, #1728	; 0x6c0
     146:	orr.w	r1, r1, r2, lsl #27
     14a:	vmov	s15, r1
     14e:	vldr	d5, [pc, #96]	; 1b0 <Screen::Screen()+0x130>
     152:	.short	0xeeb8
     154:	ldrb	r7, [r4, #13]
     156:	.short	0xee87
     158:	ldr	r5, [r0, #48]	; 0x30
     15a:	vcvt.u32.f64	s12, d6
     15e:	vstr	s12, [r6, #476]	; 0x1dc
     162:	bl	de60 <operator new(unsigned int)>
     166:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     168:	mov.w	r2, #1728	; 0x6c0
     16c:	.word	0xf00e2100
     170:	ldc2	8, cr15, [sp, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     174:	rors	r0, r5
     176:	mov.w	r0, #1728	; 0x6c0
     17a:	bl	de60 <operator new(unsigned int)>
     17e:	mov	r4, r0
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     180:	mov.w	r2, #1728	; 0x6c0
     184:	.word	0xf00e2100
     188:	ldc2	8, cr15, [r1, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     18c:	.word	0xf44f41ec
     190:	str	r0, [r3, #12]
     192:	bl	de60 <operator new(unsigned int)>
     196:	.short	0x4604
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     198:	mov.w	r2, #1728	; 0x6c0
     19c:	.word	0xf00e2100
     1a0:	stc2	8, cr15, [r5, #-792]	; 0xfffffce8
		bottom_hue_threshold = random(0, 360);
		hue_difference = random(60, 260);
		sinceFadeUpdate = 0;
	}

	Screen(){};
     1a4:	.word	0x463041f0
     1a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1ac:	nop.w
     1b0:	.word	0xd2f1a9fc
     1b4:	str	r5, [r1, #36]	; 0x24
     1b6:	.short	0x3ff0
     1b8:	movs	r0, r0
     1ba:	.short	0x2000
     1bc:	ands	r0, r0
     1be:	.short	0x400d

000001c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1c0:	sub	sp, #8
     1c2:	.short	0x4684
     1c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     1c8:	.word	0xb0852400
     1cc:	mov	lr, r1
     1ce:	.short	0x4e2e
     1d0:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     1d2:	.short	0x4625

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1d4:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     1d8:	.word	0x342c5d33
     1dc:	ldr	r2, [pc, #168]	; (288 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     1de:	cbz	r3, 1f2 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x32>
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     1e0:	.word	0x2d0a3501
     1e4:	bne.n	1d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     1e6:	.short	0x2000
}
     1e8:	add	sp, #20
     1ea:	.short	0xe8bd
     1ec:	mvns	r0, r6
     1ee:	.short	0xb002
     1f0:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     1f2:	.short	0x232c
     1f4:	movs	r1, #1
     1f6:	mov	r7, sp
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1f8:	.word	0x8090f8df
     1fc:	mul.w	r3, r3, r5
     200:	.word	0x0903eb02
     204:	strb	r1, [r2, r3]
     206:	.short	0xab0c
	strip = _strip;
     208:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     20c:	.word	0x040cf109

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     210:	strb.w	lr, [r9, #8]
     214:	.word	0xc707cb0f
     218:	strh	r3, [r7, #0]
	color = _color;
     21a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     21c:	mov	r7, r8
     21e:	.short	0xe913
     220:	movs	r7, r1
     222:	.short	0xc407
     224:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     226:	.short	0x9b10
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     228:	vstr	s0, [r9, #28]
	duration = _duration;
     22c:	.word	0x3020f8c9
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     230:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     234:	.word	0x1028f8d8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     238:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     23a:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     23c:	.word	0xbf08428b
     240:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     242:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     244:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     246:	.short	0xbf0c
     248:	moveq	r0, #1
     24a:	movne	r0, #0
     24c:	.word	0xd0f32800
	startTime = rtcMillis();
     250:	lsrs	r1, r3, #5
     252:	movs	r3, #44	; 0x2c
     254:	orr.w	r1, r1, r2, lsl #27
     258:	mla	r5, r3, r5, r6
     25c:	vmov	s15, r1
     260:	vldr	d5, [pc, #28]	; 280 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc0>
     264:	vcvt.f64.u32	d7, s15
     268:	vdiv.f64	d6, d7, d5
     26c:	vcvt.u32.f64	s12, d6
     270:	vstr	s12, [r5, #36]	; 0x24
     274:	.word	0xe8bdb005
     278:	mvns	r0, r6
     27a:	add	sp, #8
     27c:	bx	lr
     27e:	nop
     280:	add	r1, sp, #1008	; 0x3f0
     282:	bcs.n	268 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xa8>
     284:	.word	0x3ff0624d
     288:	strb	r4, [r3, r1]
     28a:	.short	0x2000
     28c:	ands	r0, r0
     28e:	.short	0x400d

00000290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>:

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     290:	sub	sp, #16
     292:	.short	0xe92d
     294:	ldr	r7, [pc, #960]	; (658 <updateBeams()+0x88>)
     296:	.short	0x2400
     298:	sub	sp, #20
     29a:	.short	0x4e35
     29c:	add.w	lr, sp, #60	; 0x3c
	for (int i = 0; i < CIRCLE_AM; i++) {
     2a0:	.word	0xe88e4625

elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     2a4:	movs	r6, r1
	for (int i = 0; i < CIRCLE_AM; i++) {
		if (!circles[i].active) {
     2a6:	.short	0x5d33
     2a8:	adds	r4, #60	; 0x3c
     2aa:	.short	0x4a31
     2ac:	cbz	r3, 2c0 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0x30>
elapsedMillis sinceCircleUpdate;



bool newCircle(Adafruit_NeoPixel* _strip, Color _c, int _duration, Cellmask (*_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
	for (int i = 0; i < CIRCLE_AM; i++) {
     2ae:	.short	0x3501
     2b0:	cmp	r5, #10
     2b2:	bne.n	2a6 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0x16>
		if (!circles[i].active) {
			circles[i].begin(_strip, SIZE_SCREEN / 2, SIZE_SCREEN / 2, _c, 2, 35, -3, _duration, _mask);
			return true;
		}
	}
	return false;
     2b4:	.word	0xb0052000
}
     2b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2bc:	.word	0x4770b004
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c0:	lsls	r7, r5, #4
     2c2:	.short	0x2101
		strip = _strip;
		pos.x = x;
     2c4:	ldr	r3, [pc, #172]	; (374 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xe4>)
     2c6:	.short	0x46e8
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2c8:	subs	r4, r7, r5
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     2ca:	.short	0xf04f
     2cc:	ldr	r3, [pc, #512]	; (4d0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x148>)
		BSize = _BSize;
		ESize = _ESize;
     2ce:	.short	0xf8df
     2d0:	str	r0, [sp, #688]	; 0x2b0
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d2:	.short	0x00a4
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     2d4:	ldr.w	sl, [pc, #168]	; 380 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])+0xf0>
	float borderSize;

	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
     2d8:	.word	0x44145511
		strip = _strip;
     2dc:	str	r0, [r4, #4]
		pos.x = x;
		pos.y = y;
		color = _color;
     2de:	.short	0xf104
     2e0:	lsrs	r0, r4, #16
	
	Circle() { active = false; };
	void begin(Adafruit_NeoPixel * _strip, float x, float y, Color _color, float _borderSize, float _BSize, float _ESize, int _duration, Cellmask (* _mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		active = true;
		strip = _strip;
		pos.x = x;
     2e2:	.short	0x60e3
		pos.y = y;
     2e4:	str	r3, [r4, #16]
     2e6:	.short	0xe89e
     2e8:	movs	r7, r1
     2ea:	stmia.w	r8!, {r0, r1, r2}
     2ee:	.short	0xf8a8
     2f0:	adds	r0, #0
		color = _color;
     2f2:	.short	0xab04
     2f4:	ldmdb	r3, {r0, r1, r2, r3}
     2f8:	.word	0x0007e8ac
     2fc:	strh.w	r3, [ip]
		borderSize = _borderSize;
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
     300:	.word	0x4a1d9b13
     304:	str	r3, [r4, #48]	; 0x30
        mask = _mask;
     306:	.short	0x9b14
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     308:	mov	lr, r2
		active = true;
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
     30a:	.short	0xf8c4
     30c:	add	sp, #224	; 0xe0
		BSize = _BSize;
		ESize = _ESize;
		duration = _duration;
        mask = _mask;
     30e:	.short	0x60a3
		strip = _strip;
		pos.x = x;
		pos.y = y;
		color = _color;
		borderSize = _borderSize;
		BSize = _BSize;
     310:	str.w	sl, [r4, #24]
		ESize = _ESize;
     314:	.word	0x901cf8c4
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     318:	ldr	r4, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     31a:	.short	0x6a91
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     31c:	ldr.w	r2, [lr, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     320:	.word	0x3028f8de
    if (lo1 == lo2 && hi1 == hi2) {
     324:	cmp	r3, r1
     326:	.short	0xbf08
     328:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     32a:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     32c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     32e:	.short	0xbf0c
     330:	moveq	r0, #1
     332:	.short	0x2000
     334:	cmp	r0, #0
     336:	.short	0xd0f1
		duration = _duration;
        mask = _mask;
		startTime = rtcMillis();
     338:	lsrs	r1, r3, #5
     33a:	.short	0x1b7d
     33c:	orr.w	r1, r1, r2, lsl #27
     340:	.word	0x0685eb06
     344:	vmov	s15, r1
     348:	.word	0x5b07ed9f
     34c:	vcvt.f64.u32	d7, s15
     350:	.word	0x6b05ee87
     354:	vcvt.u32.f64	s12, d6
     358:	.word	0x6a0ded86
     35c:	add	sp, #20
     35e:	.short	0xe8bd
     360:	ldr	r7, [pc, #960]	; (724 <updateBeams()+0x154>)
     362:	.short	0xb004
     364:	bx	lr	; unpredictable branch in IT block

     366:	.short	0xbf00
     368:	.word	0xd2f1a9fc
     36c:	.word	0x3ff0624d
     370:	.word	0x200029bc
     374:	.word	0x41400000
     378:	.word	0x400d4000
     37c:	.word	0xc0400000
     380:	.word	0x420c0000
     384:	.word	0x00000000

00000388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     388:	sub	sp, #8
     38a:	stmdbne	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38e:	sub	sp, #20
	int colInt = strip->getPixelColor(pixel);
     390:	uxth	r6, r1
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     392:	mov	r8, r0
     394:	ldrb.w	r4, [sp, #65]	; 0x41
	int colInt = strip->getPixelColor(pixel);
     398:	mov	r1, r6
     39a:	ldrb.w	r9, [sp, #68]	; 0x44
     39e:	str	r4, [sp, #4]
	byte g;
	byte r;
	byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     3a0:	add	r4, sp, #56	; 0x38
     3a2:	ldrb.w	r5, [sp, #64]	; 0x40
     3a6:	stmia.w	r4, {r2, r3}
     3aa:	ldrb.w	sl, [sp, #56]	; 0x38
     3ae:	ldrb.w	r4, [sp, #57]	; 0x39
     3b2:	ldrb.w	fp, [sp, #58]	; 0x3a
     3b6:	ldr	r7, [sp, #60]	; 0x3c
	int colInt = strip->getPixelColor(pixel);
     3b8:	bl	ba58 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     3bc:	str	r0, [sp, #12]
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3be:	ubfx	r0, r0, #16, #8
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     3c2:	cmp.w	r9, #0
     3c6:	beq.n	40c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x84>
     3c8:	add	sl, r0
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3ca:	ldrb.w	r2, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ce:	ldrb.w	r5, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3d2:	mov	r1, r6

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3d4:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3d6:	cmp.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3da:	add.w	r3, r5, fp

	strip->setPixelColor(pixel, *(int*)getCol);
     3de:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3e0:	it	ge
     3e2:	movge.w	sl, #255	; 0xff
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3e6:	cmp	r4, #255	; 0xff
     3e8:	it	ge
     3ea:	movge	r4, #255	; 0xff
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3ec:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
     3ee:	strb.w	sl, [sp, #14]
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3f2:	it	ge
     3f4:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
	int colInt = strip->getPixelColor(pixel);
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
     3f6:	strb.w	r4, [sp, #13]
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     3fa:	strb.w	r3, [sp, #12]

	strip->setPixelColor(pixel, *(int*)getCol);
     3fe:	ldr	r2, [sp, #12]
}
     400:	add	sp, #20
     402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     406:	add	sp, #8
	RGB32* getCol = (RGB32*)&colInt;
	getCol->r = constrain(getCol->r + c.red(), 0, 255);
	getCol->g = constrain(getCol->g + c.green(), 0, 255);
	getCol->b = constrain(getCol->b + c.blue(), 0, 255);

	strip->setPixelColor(pixel, *(int*)getCol);
     408:	b.w	ba4c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     40c:	ldr	r3, [sp, #4]
     40e:	cmp	r3, #99	; 0x63
     410:	bgt.n	48e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     412:	vmov	s15, r3
     416:	vldr	d6, [pc, #424]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     41a:	vcvt.f64.s32	d7, s15
     41e:	vmul.f64	d7, d7, d6
     422:	vcvt.u32.f64	s15, d7
     426:	vstr	s15, [sp, #4]
     42a:	ldrb.w	sl, [sp, #4]
     42e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     430:	cbz	r5, 498 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     432:	cmp	r5, #99	; 0x63
     434:	bgt.n	49c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     436:	vmov	s15, r5
     43a:	vldr	d6, [pc, #388]	; 5c0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     43e:	vcvt.f64.s32	d7, s15
     442:	vmul.f64	d7, d7, d6
     446:	vcvt.s32.f64	s15, d7
     44a:	vmov	r2, s15
     44e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     452:	ldr	r4, [pc, #372]	; (5c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     454:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     456:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     45a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     45e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     462:	adds	r4, r7, r5
     464:	mov.w	r5, #360	; 0x168
     468:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     46c:	ldr	r4, [pc, #348]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     46e:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     472:	smull	r3, r4, r4, r1
     476:	asrs	r5, r1, #31
     478:	add	r4, r1
     47a:	rsb	r4, r5, r4, asr #5
     47e:	cmp	r4, #5
     480:	bhi.w	5b6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     484:	tbb	[pc, r4]
     488:	.word	0x415b7588
     48c:	.short	0x0c27
     48e:	mov.w	sl, #254	; 0xfe
     492:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     494:	cmp	r5, #0
     496:	bne.n	432 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     498:	mov	r4, sl
     49a:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     49c:	movs	r2, #1
     49e:	b.n	452 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     4a0:	ldr	r7, [pc, #296]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4a2:	rsb	r3, r2, sl
     4a6:	smull	r4, lr, r7, r1
     4aa:	mov	r4, r2
     4ac:	add	lr, r1
     4ae:	rsb	r5, r5, lr, asr #5
     4b2:	rsb	r5, r5, r5, lsl #4
     4b6:	sub.w	r1, r1, r5, lsl #2
     4ba:	rsb	r1, r1, #60	; 0x3c
     4be:	mul.w	r3, r1, r3
     4c2:	smull	r1, r7, r7, r3
     4c6:	asrs	r1, r3, #31
     4c8:	add	r3, r7
     4ca:	rsb	r3, r1, r3, asr #5
     4ce:	add	r3, r2
     4d0:	uxtb.w	fp, r3
     4d4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     4d6:	ldr	r7, [pc, #244]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     4d8:	rsb	sl, r2, sl
     4dc:	mov	r4, r2
     4de:	smull	r3, lr, r7, r1
     4e2:	add	lr, r1
     4e4:	rsb	r5, r5, lr, asr #5
     4e8:	rsb	r5, r5, r5, lsl #4
     4ec:	sub.w	r1, r1, r5, lsl #2
     4f0:	mul.w	r1, r1, sl
     4f4:	smull	r3, r7, r7, r1
     4f8:	mov.w	sl, r1, asr #31
     4fc:	add	r1, r7
     4fe:	rsb	r1, sl, r1, asr #5
     502:	add	r2, r1
     504:	uxtb.w	sl, r2
     508:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     50a:	ldr	r7, [pc, #192]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     50c:	rsb	lr, r2, sl
     510:	mov	sl, r2
     512:	smull	r3, r4, r7, r1
     516:	add	r4, r1
     518:	rsb	r5, r5, r4, asr #5
     51c:	rsb	r5, r5, r5, lsl #4
     520:	sub.w	r1, r1, r5, lsl #2
     524:	rsb	r4, r1, #60	; 0x3c
     528:	mul.w	r1, r4, lr
     52c:	smull	r3, r7, r7, r1
     530:	asrs	r4, r1, #31
     532:	add	r1, r7
     534:	rsb	r4, r4, r1, asr #5
     538:	add	r4, r2
     53a:	uxtb	r4, r4
     53c:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     53e:	ldr	r7, [pc, #140]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     540:	rsb	lr, r2, sl
     544:	mov	r4, sl
     546:	mov	sl, r2
     548:	smull	ip, r3, r7, r1
     54c:	add	r3, r1
     54e:	rsb	r5, r5, r3, asr #5
     552:	rsb	r5, r5, r5, lsl #4
     556:	sub.w	r1, r1, r5, lsl #2
     55a:	mul.w	r1, r1, lr
     55e:	smull	r3, r7, r7, r1
     562:	asrs	r3, r1, #31
     564:	add	r1, r7
     566:	rsb	r3, r3, r1, asr #5
     56a:	add	r3, r2
     56c:	uxtb.w	fp, r3
     570:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     572:	ldr	r7, [pc, #88]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     574:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     578:	mov	r4, sl
      output.g = bri;
      output.b = base;
     57a:	mov	fp, r2
     57c:	smull	r3, ip, r7, r1
     580:	add	ip, r1
     582:	rsb	r5, r5, ip, asr #5
     586:	rsb	r5, r5, r5, lsl #4
     58a:	sub.w	r5, r1, r5, lsl #2
     58e:	rsb	r5, r5, #60	; 0x3c
     592:	mul.w	r1, r5, lr
     596:	b.n	4f4 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     598:	rsb	r3, r2, sl
     59c:	ldr	r5, [pc, #44]	; (5cc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     59e:	mov	fp, r2
     5a0:	mul.w	r1, r1, r3
     5a4:	smull	r3, r5, r5, r1
     5a8:	asrs	r4, r1, #31
     5aa:	add	r1, r5
     5ac:	rsb	r1, r4, r1, asr #5
     5b0:	adds	r4, r2, r1
     5b2:	uxtb	r4, r4
     5b4:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5b6:	mov.w	sl, #0
     5ba:	mov	r4, sl
     5bc:	b.n	3c8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     5be:	nop
     5c0:	.word	0x66666666
     5c4:	.word	0x40046666
     5c8:	.word	0xb60b60b7
     5cc:	.word	0x88888889

000005d0 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     5d0:	ldr	r3, [pc, #804]	; (8f8 <updateBeams()+0x328>)

void updateBeams() {
     5d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5d8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     5da:	ldr	r1, [r3, #40]	; 0x28
     5dc:	vpush	{d8-d10}
     5e0:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     5e4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5e6:	ldr	r6, [pc, #784]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     5e8:	cmp	r3, r1
     5ea:	it	eq
     5ec:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5ee:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     5f0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     5f2:	ite	eq
     5f4:	moveq	r5, #1
     5f6:	movne	r5, #0
     5f8:	cmp	r5, #0
     5fa:	beq.n	5e2 <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     5fc:	lsrs	r1, r3, #5
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     5fe:	ldr	r4, [pc, #764]	; (8fc <updateBeams()+0x32c>)
     600:	orr.w	r1, r1, r2, lsl #27
     604:	ldr	r3, [r4, #0]
     606:	vmov	s15, r1
     60a:	vldr	d5, [pc, #732]	; 8e8 <updateBeams()+0x318>
     60e:	vcvt.f64.u32	d7, s15
     612:	vdiv.f64	d6, d7, d5
     616:	vcvt.u32.f64	s12, d6
     61a:	vmov	r2, s12
     61e:	subs	r3, r2, r3
     620:	cmp	r3, #24
     622:	ble.w	9e2 <updateBeams()+0x412>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     626:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     628:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     62a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     62c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     62e:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     630:	ldr	r7, [pc, #708]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     632:	cmp	r3, r1
     634:	it	eq
     636:	cmpeq	r2, r5
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    }
    hi1 = hi2;
     638:	mov	r5, r2
    lo1 = lo2;
     63a:	mov	r1, r3
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     63c:	ite	eq
     63e:	moveq	r6, #1
     640:	movne	r6, #0
     642:	cmp	r6, #0
     644:	beq.n	62c <updateBeams()+0x5c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     646:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     648:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     64a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     64c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     64e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     650:	cmp	r3, r1
     652:	it	eq
     654:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     656:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     658:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     65a:	ite	eq
     65c:	moveq	r6, #1
     65e:	movne	r6, #0
     660:	cmp	r6, #0
     662:	beq.n	64c <updateBeams()+0x7c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     664:	lsrs	r1, r3, #5
     666:	ldr	r7, [pc, #664]	; (900 <updateBeams()+0x330>)
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     668:	ldr	r0, [pc, #664]	; (904 <updateBeams()+0x334>)
     66a:	orr.w	r1, r1, r2, lsl #27
     66e:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     672:	ldr.w	fp, [pc, #644]	; 8f8 <updateBeams()+0x328>
  synapse_B.clear();
     676:	mov	sl, r7
     678:	vmov	s15, r1
     67c:	vldr	d8, [pc, #616]	; 8e8 <updateBeams()+0x318>
     680:	vcvt.f64.u32	d7, s15
     684:	vldr	d9, [pc, #616]	; 8f0 <updateBeams()+0x320>
     688:	vdiv.f64	d6, d7, d8
     68c:	vcvt.u32.f64	s12, d6
     690:	vstr	s12, [r4]
void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  unsigned int startTime = rtcMillis();
  sinceBeamUpdate = 0;

  synapse_A.clear();
     694:	bl	bb60 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     698:	ldr	r0, [pc, #620]	; (908 <updateBeams()+0x338>)
     69a:	bl	bb60 <Adafruit_NeoPixel::clear()>
     69e:	b.n	6aa <updateBeams()+0xda>
     6a0:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     6a4:	cmp	sl, r9
     6a6:	beq.w	990 <updateBeams()+0x3c0>
    if (beams[i].active) {
     6aa:	ldrb.w	r3, [sl, #-36]
     6ae:	cmp	r3, #0
     6b0:	beq.n	6a0 <updateBeams()+0xd0>
     6b2:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     6b6:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ba:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     6be:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6c2:	ldr	r7, [pc, #564]	; (8f8 <updateBeams()+0x328>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     6c4:	cmp	r3, r1
     6c6:	it	eq
     6c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     6ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     6cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     6ce:	ite	eq
     6d0:	moveq	r4, #1
     6d2:	movne	r4, #0
     6d4:	cmp	r4, #0
     6d6:	beq.n	6ba <updateBeams()+0xea>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     6d8:	lsrs	r1, r3, #5
     6da:	ldr.w	r5, [sl]
     6de:	ldr.w	r6, [sl, #-4]
     6e2:	orr.w	r1, r1, r2, lsl #27
     6e6:	adds	r3, r6, r5
     6e8:	vmov	s15, r1
     6ec:	vcvt.f64.u32	d7, s15
     6f0:	vdiv.f64	d6, d7, d8
     6f4:	vcvt.u32.f64	s12, d6
     6f8:	vmov	r2, s12
     6fc:	cmp	r2, r3
     6fe:	bhi.w	9da <updateBeams()+0x40a>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     702:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     704:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     706:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     70a:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     70e:	cmp	r3, r1
     710:	it	eq
     712:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     714:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     716:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     718:	ite	eq
     71a:	moveq	r4, #1
     71c:	movne	r4, #0
     71e:	cmp	r4, #0
     720:	beq.n	706 <updateBeams()+0x136>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     722:	lsrs	r1, r3, #5
     724:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     728:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     72c:	orr.w	r1, r1, r2, lsl #27
     730:	vcvt.f32.s32	s11, s15
     734:	vmov	s15, r1
     738:	vcvt.f64.u32	d7, s15
     73c:	vdiv.f64	d6, d7, d8
     740:	vcvt.u32.f64	s12, d6
     744:	vmov	r2, s12
     748:	subs	r5, r2, r5
     74a:	vmov	s15, r5
     74e:	vcvt.f32.u32	s15, s15
     752:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     756:	cmp	r3, #0
     758:	bne.w	9d0 <updateBeams()+0x400>
	position = (strip->numPixels() + length) * posFac - length / 2;
     75c:	ldr.w	r0, [sl, #-32]
     760:	bl	bb08 <Adafruit_NeoPixel::numPixels() const>
     764:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     768:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     76c:	vmov.f32	s14, #96	; 0x3f000000  0.5
     770:	vcvt.f32.s32	s13, s15
     774:	vldr	s15, [sl, #-8]
     778:	vmul.f32	s14, s15, s14
     77c:	vadd.f32	s15, s13, s15
     780:	vmov.f32	s13, s14
     784:	vfnms.f32	s13, s15, s20
     788:	vmov.f32	s15, s13
     78c:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     790:	cmp	r3, #0
     792:	beq.n	6a0 <updateBeams()+0xd0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     794:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     798:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     79c:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7a0:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     7a4:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     7a8:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     7ac:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     7b0:	cmp	r7, r3
     7b2:	ble.n	8ae <updateBeams()+0x2de>
     7b4:	b.n	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     7b6:	vldr	s11, [sl, #-8]
     7ba:	vmov.f32	s14, #112	; 0x3f800000  1.0
     7be:	vmov.f32	s13, #0	; 0x40000000  2.0
     7c2:	vdiv.f32	s12, s15, s11
     7c6:	vmov.f32	s15, s14
     7ca:	vfms.f32	s15, s12, s13
     7ce:	vcmpe.f32	s15, #0.0
     7d2:	vmrs	APSR_nzcv, fpscr
     7d6:	bmi.w	8e0 <updateBeams()+0x310>
     7da:	vcmp.f32	s15, s14
     7de:	vmrs	APSR_nzcv, fpscr
     7e2:	it	gt
     7e4:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     7e8:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     7ec:	sub.w	r3, sl, #24
     7f0:	add	r4, sp, #24
     7f2:	ldrb.w	ip, [sl, #-24]
     7f6:	ldrb.w	lr, [sl, #-23]
     7fa:	vcmp.f32	s15, s14
     7fe:	ldrb.w	r6, [sl, #-22]
     802:	ldr.w	r8, [sl, #-20]
     806:	vmrs	APSR_nzcv, fpscr
     80a:	ldmia	r3, {r0, r1, r2, r3}
     80c:	stmia.w	r4, {r0, r1, r2, r3}
     810:	ldrb.w	r3, [sl, #-16]
     814:	ldrb.w	r2, [sl, #-15]
     818:	ldrb.w	r1, [sl, #-12]
     81c:	beq.n	872 <updateBeams()+0x2a2>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     81e:	cmp	r1, #0
     820:	beq.n	910 <updateBeams()+0x340>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     822:	vmov	s14, ip
     826:	vmov	s13, lr
     82a:	vcvt.f32.s32	s14, s14
     82e:	vmul.f32	s14, s14, s15
     832:	vcvt.u32.f32	s14, s14
     836:	vstr	s14, [sp, #12]
     83a:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     83e:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     842:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     846:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     848:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     84a:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     84e:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     852:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     856:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     85a:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     85e:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     862:	vstr	s14, [sp, #12]
     866:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     86a:	vstr	s15, [sp, #16]
     86e:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     872:	strb.w	r3, [sp, #32]
     876:	add	r3, sp, #40	; 0x28
     878:	strb.w	r2, [sp, #33]	; 0x21
     87c:	strb.w	r1, [sp, #36]	; 0x24
     880:	strb.w	ip, [sp, #24]
     884:	strb.w	lr, [sp, #25]
     888:	strb.w	r6, [sp, #26]
     88c:	str.w	r8, [sp, #28]
     890:	ldmdb	r3, {r0, r1}
     894:	ldmia.w	r4, {r2, r3}
     898:	stmia.w	sp, {r0, r1}
     89c:	mov	r1, r7
     89e:	ldr.w	r0, [sl, #-32]
     8a2:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     8a6:	adds	r7, #1
     8a8:	cmp	r5, r7
     8aa:	blt.w	6a0 <updateBeams()+0xd0>
		if (i >= 0 && i < strip->numPixels()) {
     8ae:	cmp	r7, #0
     8b0:	blt.n	8a6 <updateBeams()+0x2d6>
     8b2:	ldr.w	r0, [sl, #-32]
     8b6:	bl	bb08 <Adafruit_NeoPixel::numPixels() const>
     8ba:	cmp	r0, r7
     8bc:	ble.n	8a6 <updateBeams()+0x2d6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     8be:	vmov	s14, r7
     8c2:	vldr	s15, [sl, #4]
     8c6:	vcvt.f32.s32	s14, s14
     8ca:	vsub.f32	s15, s14, s15
     8ce:	vcmpe.f32	s15, #0.0
     8d2:	vmrs	APSR_nzcv, fpscr
     8d6:	bgt.w	7b6 <updateBeams()+0x1e6>
     8da:	vneg.f32	s15, s15
     8de:	b.n	7b6 <updateBeams()+0x1e6>
     8e0:	vldr	s15, [pc, #40]	; 90c <updateBeams()+0x33c>
     8e4:	b.n	7e8 <updateBeams()+0x218>
     8e6:	nop
     8e8:	.word	0xd2f1a9fc
     8ec:	.word	0x3ff0624d
     8f0:	.word	0x66666666
     8f4:	.word	0x40046666
     8f8:	.word	0x400d4000
     8fc:	.word	0x20002c14
     900:	.word	0x20005480
     904:	.word	0x20008ca4
     908:	.word	0x20008cb8
     90c:	.word	0x00000000
     910:	cmp	r2, #99	; 0x63
     912:	bgt.n	9a6 <updateBeams()+0x3d6>
     914:	vmov	s14, r2
     918:	vcvt.f64.s32	d6, s14
     91c:	vmul.f64	d6, d6, d9
     920:	vcvt.u32.f64	s14, d6
     924:	vstr	s14, [sp, #12]
     928:	ldrb.w	ip, [sp, #12]
     92c:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     92e:	cmp	r3, #0
     930:	beq.n	9b0 <updateBeams()+0x3e0>
     932:	cmp	r3, #99	; 0x63
     934:	bgt.n	9ec <updateBeams()+0x41c>
     936:	vmov	s14, r3
     93a:	vcvt.f64.s32	d6, s14
     93e:	vmul.f64	d6, d6, d9
     942:	vcvt.s32.f64	s14, d6
     946:	vmov	r6, s14
     94a:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     94e:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     952:	ldr	r1, [pc, #544]	; (b74 <updateBeams()+0x5a4>)
     954:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     958:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     95c:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     95e:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     960:	mov.w	r0, r8, asr #31
     964:	rsb	r1, r0, r1, asr #8
     968:	mov.w	r0, #360	; 0x168
     96c:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     970:	ldr	r0, [pc, #516]	; (b78 <updateBeams()+0x5a8>)
     972:	smull	r6, r0, r0, r1
     976:	asrs	r6, r1, #31
     978:	add	r0, r1
     97a:	str	r6, [sp, #16]
     97c:	rsb	r0, r6, r0, asr #5
     980:	cmp	r0, #5
     982:	bhi.w	b6a <updateBeams()+0x59a>
     986:	tbb	[pc, r0]
     98a:	.short	0xbadc
     98c:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     990:	ldr	r0, [pc, #488]	; (b7c <updateBeams()+0x5ac>)
     992:	bl	b7b4 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     996:	ldr	r0, [pc, #488]	; (b80 <updateBeams()+0x5b0>)
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     998:	add	sp, #44	; 0x2c
     99a:	vpop	{d8-d10}
     99e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     9a2:	b.w	b7b4 <Adafruit_NeoPixel::show()>
     9a6:	mov.w	ip, #254	; 0xfe
     9aa:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     9ac:	cmp	r3, #0
     9ae:	bne.n	932 <updateBeams()+0x362>
     9b0:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9b4:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     9b8:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     9ba:	vcvt.f32.s32	s14, s14
     9be:	vmul.f32	s14, s14, s15
     9c2:	vcvt.u32.f32	s14, s14
     9c6:	vstr	s14, [sp, #12]
     9ca:	ldrb.w	ip, [sp, #12]
     9ce:	b.n	83e <updateBeams()+0x26e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     9d0:	vmov.f32	s15, #112	; 0x3f800000  1.0
     9d4:	vsub.f32	s20, s15, s20
     9d8:	b.n	75c <updateBeams()+0x18c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     9da:	movs	r3, #0
     9dc:	strb.w	r3, [sl, #-36]
     9e0:	b.n	6a0 <updateBeams()+0xd0>
  

 // Serial.print("Beam FrameTime: ");
  //Serial.println(rtcMillis()-startTime);
}
     9e2:	add	sp, #44	; 0x2c
     9e4:	vpop	{d8-d10}
     9e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9ec:	movs	r6, #1
     9ee:	b.n	94e <updateBeams()+0x37e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     9f0:	ldr	r0, [pc, #388]	; (b78 <updateBeams()+0x5a8>)
     9f2:	smull	r6, r0, r0, r1
     9f6:	ldr	r6, [sp, #12]
     9f8:	add	r0, r1
     9fa:	vmov	s13, r6
     9fe:	rsb	lr, r6, ip
     a02:	ldr	r6, [sp, #16]
     a04:	rsb	r0, r6, r0, asr #5
     a08:	rsb	r0, r0, r0, lsl #4
     a0c:	sub.w	r1, r1, r0, lsl #2
     a10:	rsb	r1, r1, #60	; 0x3c
     a14:	mul.w	lr, r1, lr
     a18:	ldr	r1, [pc, #348]	; (b78 <updateBeams()+0x5a8>)
     a1a:	smull	r1, r0, r1, lr
     a1e:	mov.w	r1, lr, asr #31
     a22:	add	lr, r0
     a24:	rsb	lr, r1, lr, asr #5
     a28:	vmov	r1, s13
     a2c:	add	r1, lr
     a2e:	uxtb.w	lr, r1
     a32:	b.n	9b4 <updateBeams()+0x3e4>
     a34:	ldr	r0, [pc, #320]	; (b78 <updateBeams()+0x5a8>)
     a36:	smull	r6, r0, r0, r1
     a3a:	ldr	r6, [sp, #12]
     a3c:	add	r0, r1
     a3e:	rsb	ip, r6, ip
     a42:	vmov	s13, r6
     a46:	ldr	r6, [sp, #16]
     a48:	rsb	r0, r6, r0, asr #5
     a4c:	vmov	r6, s13
     a50:	rsb	r0, r0, r0, lsl #4
     a54:	sub.w	r1, r1, r0, lsl #2
     a58:	mul.w	ip, r1, ip
     a5c:	ldr	r1, [pc, #280]	; (b78 <updateBeams()+0x5a8>)
     a5e:	smull	r1, r0, r1, ip
     a62:	mov.w	r1, ip, asr #31
     a66:	add	ip, r0
     a68:	rsb	ip, r1, ip, asr #5
     a6c:	add	r6, ip
     a6e:	uxtb.w	ip, r6
     a72:	b.n	9b4 <updateBeams()+0x3e4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     a74:	ldr	r0, [pc, #256]	; (b78 <updateBeams()+0x5a8>)
     a76:	smull	r6, r0, r0, r1
     a7a:	ldr	r6, [sp, #12]
     a7c:	add	r0, r1
     a7e:	rsb	r6, r6, ip
     a82:	ldr.w	ip, [sp, #12]
     a86:	str	r6, [sp, #20]
     a88:	mov	r6, r0
     a8a:	ldr	r0, [sp, #16]
     a8c:	rsb	r0, r0, r6, asr #5
     a90:	ldr	r6, [sp, #20]
     a92:	rsb	r0, r0, r0, lsl #4
     a96:	sub.w	r1, r1, r0, lsl #2
     a9a:	ldr	r0, [pc, #220]	; (b78 <updateBeams()+0x5a8>)
     a9c:	rsb	r1, r1, #60	; 0x3c
     aa0:	mul.w	r1, r1, r6
     aa4:	smull	r6, r0, r0, r1
     aa8:	mov	r6, r0
     aaa:	asrs	r0, r1, #31
     aac:	add	r1, r6
     aae:	mov	r6, ip
     ab0:	rsb	r0, r0, r1, asr #5
     ab4:	add	r6, r0
     ab6:	uxtb	r1, r6
     ab8:	vmov	s13, r1
     abc:	b.n	9b4 <updateBeams()+0x3e4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     abe:	ldr	r0, [pc, #184]	; (b78 <updateBeams()+0x5a8>)
     ac0:	vmov	s13, ip
     ac4:	smull	r6, r0, r0, r1
     ac8:	ldr	r6, [sp, #12]
     aca:	add	r0, r1
     acc:	rsb	lr, r6, ip
     ad0:	mov	ip, r6
     ad2:	ldr	r6, [sp, #16]
     ad4:	rsb	r0, r6, r0, asr #5
     ad8:	mov	r6, ip
     ada:	rsb	r0, r0, r0, lsl #4
     ade:	sub.w	r1, r1, r0, lsl #2
     ae2:	mul.w	lr, r1, lr
     ae6:	ldr	r1, [pc, #144]	; (b78 <updateBeams()+0x5a8>)
     ae8:	smull	r1, r0, r1, lr
     aec:	mov.w	r1, lr, asr #31
     af0:	add	lr, r0
     af2:	rsb	lr, r1, lr, asr #5
     af6:	add	r6, lr
     af8:	uxtb.w	lr, r6
     afc:	b.n	9b4 <updateBeams()+0x3e4>
     afe:	ldr	r0, [pc, #120]	; (b78 <updateBeams()+0x5a8>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b00:	vmov	s13, ip
     b04:	smull	r6, r0, r0, r1
     b08:	ldr	r6, [sp, #12]
     b0a:	add	r0, r1
     b0c:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     b10:	mov	lr, r6
     b12:	ldr	r6, [sp, #16]
     b14:	rsb	r0, r6, r0, asr #5
     b18:	mov	r6, lr
     b1a:	rsb	r0, r0, r0, lsl #4
     b1e:	sub.w	r1, r1, r0, lsl #2
     b22:	rsb	r1, r1, #60	; 0x3c
     b26:	mul.w	ip, r1, ip
     b2a:	ldr	r1, [pc, #76]	; (b78 <updateBeams()+0x5a8>)
     b2c:	smull	r1, r0, r1, ip
     b30:	mov.w	r1, ip, asr #31
     b34:	add	ip, r0
     b36:	rsb	ip, r1, ip, asr #5
     b3a:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     b3c:	uxtb.w	ip, r6
     b40:	b.n	9b4 <updateBeams()+0x3e4>
     b42:	ldr	r6, [sp, #12]
     b44:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     b48:	mov	lr, r6
     b4a:	mul.w	r1, r1, r0
     b4e:	ldr	r0, [pc, #40]	; (b78 <updateBeams()+0x5a8>)
     b50:	smull	r6, r0, r0, r1
     b54:	mov	r6, r0
     b56:	asrs	r0, r1, #31
     b58:	add	r1, r6
     b5a:	mov	r6, lr
     b5c:	rsb	r0, r0, r1, asr #5
     b60:	add	r6, r0
     b62:	uxtb	r1, r6
     b64:	vmov	s13, r1
     b68:	b.n	9b4 <updateBeams()+0x3e4>
     b6a:	mov.w	ip, #0
     b6e:	vmov	s13, ip
     b72:	b.n	9b4 <updateBeams()+0x3e4>
     b74:	.word	0xb60b60b7
     b78:	.word	0x88888889
     b7c:	.word	0x20008ca4
     b80:	.word	0x20008cb8
     b84:	.word	0x00000000

00000b88 <updateCircles()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     b88:	ldr	r3, [pc, #772]	; (e90 <updateCircles()+0x308>)
		}
	}
	return false;
}

void updateCircles() {
     b8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b8e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b90:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     b92:	ldr	r1, [r3, #40]	; 0x28
     b94:	vpush	{d8}
     b98:	sub	sp, #52	; 0x34
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     b9c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b9e:	ldr	r6, [pc, #752]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     ba0:	cmp	r3, r1
     ba2:	it	eq
     ba4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ba6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     ba8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     baa:	ite	eq
     bac:	moveq	r5, #1
     bae:	movne	r5, #0
     bb0:	cmp	r5, #0
     bb2:	beq.n	b9a <updateCircles()+0x12>
	if ((int)sinceCircleUpdate < CIRCLE_UPDATE_INTERVAL) return;
     bb4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     bb6:	ldr	r4, [pc, #732]	; (e94 <updateCircles()+0x30c>)
     bb8:	orr.w	r1, r1, r2, lsl #27
     bbc:	ldr	r3, [r4, #0]
     bbe:	vmov	s15, r1
     bc2:	vldr	d5, [pc, #708]	; e88 <updateCircles()+0x300>
     bc6:	vcvt.f64.u32	d7, s15
     bca:	vdiv.f64	d6, d7, d5
     bce:	vcvt.u32.f64	s12, d6
     bd2:	vmov	r2, s12
     bd6:	subs	r3, r2, r3
     bd8:	cmp	r3, #15
     bda:	ble.w	1076 <updateCircles()+0x4ee>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     bde:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     be2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     be4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     be6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     be8:	cmp	r3, r1
     bea:	it	eq
     bec:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     bee:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     bf0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     bf2:	ite	eq
     bf4:	moveq	r6, #1
     bf6:	movne	r6, #0
     bf8:	cmp	r6, #0
     bfa:	beq.n	be4 <updateCircles()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     bfc:	lsrs	r1, r3, #5
	sinceCircleUpdate = 0;

	matrix_A.clear();
     bfe:	ldr	r0, [pc, #664]	; (e98 <updateCircles()+0x310>)
     c00:	ldr.w	fp, [pc, #684]	; eb0 <updateCircles()+0x328>
     c04:	orr.w	r1, r1, r2, lsl #27
     c08:	vmov	s15, r1
     c0c:	vldr	d8, [pc, #632]	; e88 <updateCircles()+0x300>
     c10:	vcvt.f64.u32	d7, s15
     c14:	vdiv.f64	d6, d7, d8
     c18:	vcvt.u32.f64	s12, d6
     c1c:	vstr	s12, [r4]
     c20:	bl	bb60 <Adafruit_NeoPixel::clear()>
	matrix_B.clear();
     c24:	ldr	r0, [pc, #628]	; (e9c <updateCircles()+0x314>)
     c26:	bl	bb60 <Adafruit_NeoPixel::clear()>
     c2a:	b.n	c38 <updateCircles()+0xb0>
     c2c:	add.w	fp, fp, #60	; 0x3c

	for (int i = 0; i < CIRCLE_AM; i++) {
     c30:	ldr	r3, [pc, #620]	; (ea0 <updateCircles()+0x318>)
     c32:	cmp	r3, fp
     c34:	beq.w	e70 <updateCircles()+0x2e8>
		if (circles[i].active) {
     c38:	ldrb.w	r3, [fp, #-52]
     c3c:	cmp	r3, #0
     c3e:	beq.n	c2c <updateCircles()+0xa4>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c40:	ldr	r3, [pc, #588]	; (e90 <updateCircles()+0x308>)
     c42:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c44:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c46:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c48:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c4a:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c4c:	ldr	r6, [pc, #576]	; (e90 <updateCircles()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     c4e:	cmp	r3, r1
     c50:	it	eq
     c52:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c54:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     c56:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     c58:	ite	eq
     c5a:	moveq	r5, #1
     c5c:	movne	r5, #0
     c5e:	cmp	r5, #0
     c60:	beq.n	c48 <updateCircles()+0xc0>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
     c62:	lsrs	r1, r3, #5
     c64:	ldr.w	r4, [fp]
     c68:	ldr.w	r7, [fp, #-4]
     c6c:	orr.w	r1, r1, r2, lsl #27
     c70:	adds	r3, r7, r4
     c72:	vmov	s15, r1
     c76:	vcvt.f64.u32	d7, s15
     c7a:	vdiv.f64	d6, d7, d8
     c7e:	vcvt.u32.f64	s12, d6
     c82:	vmov	r2, s12
     c86:	cmp	r2, r3
     c88:	bhi.w	106e <updateCircles()+0x4e6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c8c:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c8e:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c90:	ldr	r3, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c92:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c94:	ldr	r2, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     c96:	cmp	r2, r3
     c98:	it	eq
     c9a:	cmpeq	r1, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c9c:	mov	r0, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     c9e:	mov	r3, r2
    if (lo1 == lo2 && hi1 == hi2) {
     ca0:	ite	eq
     ca2:	moveq	r6, #1
     ca4:	movne	r6, #0
     ca6:	cmp	r6, #0
     ca8:	beq.n	c92 <updateCircles()+0x10a>
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     caa:	lsrs	r3, r2, #5
     cac:	vmov	s15, r7
     cb0:	vldr	s11, [fp, #-28]	; 0xffffffe4
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cb4:	vmov.f32	s8, #96	; 0x3f000000  0.5
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cb8:	orr.w	r3, r3, r1, lsl #27
     cbc:	vcvt.f32.s32	s7, s15
     cc0:	vldr	s6, [fp, #-24]	; 0xffffffe8
     cc4:	vmov	s15, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     cc8:	vldr	s10, [fp, #-36]	; 0xffffffdc
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ccc:	vsub.f32	s6, s6, s11
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     cd0:	vldr	s9, [fp, #-40]	; 0xffffffd8
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cd4:	vcvt.f64.u32	d7, s15
     cd8:	vdiv.f64	d6, d7, d8
     cdc:	vcvt.u32.f64	s12, d6

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     ce0:	vmov.f32	s13, s9
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     ce4:	vmov	r3, s12
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     ce8:	vmov.f32	s12, s10
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     cec:	subs	r4, r3, r4
     cee:	vmov	s15, r4
     cf2:	vcvt.f32.u32	s15, s15
     cf6:	vdiv.f32	s14, s15, s7
     cfa:	vmov.f32	s15, s11
     cfe:	vfma.f32	s15, s14, s6
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d02:	vneg.f32	s14, s15
			active = false;
			return;
		}

		float sizeRatio = (float)(rtcMillis() - startTime) / duration;
		size = BSize + (ESize - BSize)*sizeRatio;
     d06:	vstr	s15, [fp, #-32]	; 0xffffffe0
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d0a:	vfma.f32	s12, s15, s8

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d0e:	vfma.f32	s13, s15, s8
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d12:	vfma.f32	s9, s14, s8
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d16:	vfma.f32	s10, s14, s8
		int y2 = pos.y + size / 2;
     d1a:	vcvt.s32.f32	s15, s12

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d1e:	vcvt.s32.f32	s14, s13
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;
     d22:	vmov	r5, s15
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d26:	vcvt.s32.f32	s15, s9
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d2a:	vmov	r3, s14

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
     d2e:	vstr	s14, [sp, #28]
	}

	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
     d32:	vmov	r9, s15
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d36:	vcvt.s32.f32	s15, s10
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d3a:	cmp	r9, r3
	void draw() {
		if (!active) return;
		
		int x1 = pos.x - size / 2;
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
     d3c:	vstr	s15, [sp, #20]
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     d40:	bgt.w	c2c <updateCircles()+0xa4>
     d44:	add.w	r3, r9, r9, lsl #1
     d48:	add.w	r2, r9, r9, lsl #3
     d4c:	lsls	r6, r3, #3
     d4e:	mov.w	r8, r2, lsl #9
     d52:	mov	r3, r6
     d54:	mov	r6, r9
     d56:	mov	r9, r3
			for (int y = y1; y <= y2; y++) {
     d58:	ldr	r3, [sp, #20]
     d5a:	cmp	r3, r5
     d5c:	bgt.n	e52 <updateCircles()+0x2ca>
     d5e:	cmp	r6, #23
     d60:	ldr	r4, [sp, #20]
     d62:	ite	ls
     d64:	movls	r7, #0
     d66:	movhi	r7, #1
     d68:	b.n	d70 <updateCircles()+0x1e8>
     d6a:	adds	r4, #1
     d6c:	cmp	r5, r4
     d6e:	blt.n	e52 <updateCircles()+0x2ca>

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
     d70:	cmp	r4, #23
     d72:	bhi.n	d6a <updateCircles()+0x1e2>
     d74:	cmp	r7, #0
     d76:	bne.n	d6a <updateCircles()+0x1e2>
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
     d78:	vmov	s14, r4
     d7c:	vldr	s15, [fp, #-36]	; 0xffffffdc
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d80:	vldr	s13, [fp, #-40]	; 0xffffffd8
     d84:	add.w	sl, r4, r9
				float Dy = y - pos.y;
     d88:	vcvt.f32.s32	s14, s14
     d8c:	vsub.f32	s14, s14, s15
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d90:	vmov	s15, r6
     d94:	vcvt.f32.s32	s15, s15
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     d98:	vmul.f32	s14, s14, s14
			for (int y = y1; y <= y2; y++) {

				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
     d9c:	vsub.f32	s15, s15, s13
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
     da0:	vfma.f32	s14, s15, s15
     da4:	vcvt.f64.f32	d7, s14
     da8:	vsqrt.f64	d0, d7
     dac:	vcmp.f64	d0, d0
     db0:	vmrs	APSR_nzcv, fpscr
     db4:	bne.w	10a2 <updateCircles()+0x51a>


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     db8:	vcvt.f32.f64	s0, d0
     dbc:	vldr	s14, [fp, #-32]	; 0xffffffe0
     dc0:	vmov.f64	d6, #96	; 0x3f000000  0.5
     dc4:	vldr	s10, [fp, #4]
     dc8:	vcvt.f64.f32	d7, s14

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dcc:	ldr.w	r3, [fp, #-44]
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd0:	vcvt.f64.f32	d0, s0

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     dd4:	add.w	r2, r4, r4, lsl #1
				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);


				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);
     dd8:	vcvt.f64.f32	d5, s10
     ddc:	vfnms.f64	d0, d7, d6
     de0:	vmov.f64	d6, #112	; 0x3f800000  1.0
     de4:	vcmpe.f64	d0, #0.0
     de8:	vmrs	APSR_nzcv, fpscr
     dec:	it	le
     dee:	vnegle.f64	d0, d0
     df2:	vdiv.f64	d7, d0, d5
     df6:	vcmpe.f64	d7, d6
     dfa:	vmrs	APSR_nzcv, fpscr
     dfe:	bmi.n	eb4 <updateCircles()+0x32c>

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     e00:	add.w	r3, r3, r2, lsl #6
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     e04:	movs	r0, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e06:	mov.w	r1, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
     e0a:	vldr	s14, [pc, #152]	; ea4 <updateCircles()+0x31c>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e0e:	ldr.w	r2, [r3, r8]
	HSB_color.s = s;
     e12:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e16:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     e1a:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     e1e:	ldr	r0, [pc, #136]	; (ea8 <updateCircles()+0x320>)
     e20:	lsrs	r3, r2, #3
     e22:	umull	r0, r3, r0, r3
     e26:	lsrs	r3, r3, #2
     e28:	mls	r3, r1, r3, r2
     e2c:	str	r3, [sp, #36]	; 0x24
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     e2e:	ldr	r2, [pc, #124]	; (eac <updateCircles()+0x324>)
     e30:	smull	r1, r2, r2, r3
     e34:	asrs	r1, r3, #31
     e36:	add	r2, r3
     e38:	rsb	r2, r1, r2, asr #5
     e3c:	subs	r2, #1
     e3e:	cmp	r2, #4
     e40:	bhi.w	1046 <updateCircles()+0x4be>
     e44:	tbh	[pc, r2, lsl #1]
     e48:	.word	0x00d100ee
     e4c:	.word	0x007600b2
     e50:	.short	0x011c
		int x2 = pos.x + size / 2;
		int y1 = pos.y - size / 2;
		int y2 = pos.y + size / 2;


		for (int x = x1; x <= x2; x++) {
     e52:	adds	r6, #1
     e54:	ldr	r3, [sp, #28]
     e56:	add.w	r8, r8, #4608	; 0x1200
     e5a:	add.w	r9, r9, #24
     e5e:	cmp	r3, r6
     e60:	bge.w	d58 <updateCircles()+0x1d0>
     e64:	add.w	fp, fp, #60	; 0x3c
	sinceCircleUpdate = 0;

	matrix_A.clear();
	matrix_B.clear();

	for (int i = 0; i < CIRCLE_AM; i++) {
     e68:	ldr	r3, [pc, #52]	; (ea0 <updateCircles()+0x318>)
     e6a:	cmp	r3, fp
     e6c:	bne.w	c38 <updateCircles()+0xb0>
	// for (int i = 0; i < synapse_B.numPixels(); i++) {
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
     e70:	ldr	r0, [pc, #36]	; (e98 <updateCircles()+0x310>)
     e72:	bl	b7b4 <Adafruit_NeoPixel::show()>
	matrix_B.show();
     e76:	ldr	r0, [pc, #36]	; (e9c <updateCircles()+0x314>)

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
     e78:	add	sp, #52	; 0x34
     e7a:	vpop	{d8}
     e7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//   synapse_B.setPixelColor(i,50,0,10);
	//   synapse_A.setPixelColor(i,50,0,10);
	// }

	matrix_A.show();
	matrix_B.show();
     e82:	b.w	b7b4 <Adafruit_NeoPixel::show()>
     e86:	nop
     e88:	.word	0xd2f1a9fc
     e8c:	.word	0x3ff0624d
     e90:	.word	0x400d4000
     e94:	.word	0x20001790
     e98:	.word	0x20003e48
     e9c:	.word	0x20003e5c
     ea0:	.word	0x20002c48
     ea4:	.word	0x00000000
     ea8:	.word	0x16c16c17
     eac:	.word	0x88888889
     eb0:	.word	0x200029f0

				float b = 1-min(abs((size / 2.) - dist) / borderSize,1);

                //float b = dist<size/2 ? 1 : 0;

				Color c = Color(mask[x][y]->getHue(), 100, 100, HSB_MODE);
     eb4:	add.w	r3, r3, r2, lsl #6
     eb8:	vsub.f64	d7, d6, d7
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
     ebc:	movs	r0, #100	; 0x64
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ebe:	vmov.f32	s13, #112	; 0x3f800000  1.0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ec2:	ldr.w	r2, [r3, r8]
     ec6:	mov.w	r1, #360	; 0x168
     eca:	vcvt.f32.f64	s14, d7
	HSB_color.s = s;
     ece:	strb.w	r0, [sp, #40]	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ed2:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
     ed6:	strb.w	r0, [sp, #41]	; 0x29
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eda:	ldr	r0, [pc, #464]	; (10ac <updateCircles()+0x524>)
     edc:	lsrs	r3, r2, #3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ede:	vcmp.f32	s14, s13
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     ee2:	umull	r0, r3, r0, r3
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ee6:	vmrs	APSR_nzcv, fpscr
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
     eea:	mov.w	r3, r3, lsr #2
     eee:	mls	r3, r1, r3, r2
     ef2:	str	r3, [sp, #36]	; 0x24
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     ef4:	bne.n	e2e <updateCircles()+0x2a6>
void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
     ef6:	movs	r2, #1

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
     ef8:	movs	r3, #0
	HSB_updated = true;
     efa:	strb.w	r2, [sp, #45]	; 0x2d
				c.multiply(b);
				addPixelColor(strip, ledID, c);
     efe:	ldrb.w	r2, [sp, #8]
     f02:	strb.w	r3, [sp, #44]	; 0x2c
     f06:	add	r3, sp, #32
     f08:	strb.w	r2, [sp, #32]
     f0c:	ldrb.w	r2, [sp, #16]
     f10:	strb.w	r2, [sp, #33]	; 0x21
     f14:	ldrb.w	r2, [sp, #12]
     f18:	strb.w	r2, [sp, #34]	; 0x22
     f1c:	add	r2, sp, #48	; 0x30
     f1e:	ldmdb	r2, {r0, r1}
     f22:	stmia.w	sp, {r0, r1}
     f26:	mov	r1, sl
     f28:	ldr.w	r0, [fp, #-48]
     f2c:	ldmia	r3, {r2, r3}
     f2e:	bl	388 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
     f32:	b.n	d6a <updateCircles()+0x1e2>
     f34:	ldr	r2, [pc, #376]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
      output.b = bri;
      break;

    case 4:
      output.r = (((bri-base)*(hue%60))/60)+base;
     f36:	vldr	s13, [pc, #380]	; 10b4 <updateCircles()+0x52c>
     f3a:	smull	r0, r2, r2, r3
     f3e:	vldr	s12, [pc, #376]	; 10b8 <updateCircles()+0x530>
     f42:	add	r2, r3
     f44:	rsb	r1, r1, r2, asr #5
     f48:	rsb	r1, r1, r1, lsl #4
     f4c:	sub.w	r3, r3, r1, lsl #2
     f50:	rsb	r3, r3, r3, lsl #7
     f54:	ldr	r2, [pc, #344]	; (10b0 <updateCircles()+0x528>)
     f56:	lsls	r3, r3, #1
     f58:	smull	r2, r1, r2, r3
     f5c:	asrs	r2, r3, #31
     f5e:	add	r3, r1
     f60:	rsb	r3, r2, r3, asr #5
     f64:	vmov	s15, r3
     f68:	vcvt.f32.s32	s15, s15
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f6c:	vmul.f32	s15, s15, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f70:	movs	r2, #0
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     f72:	vmul.f32	s13, s13, s14

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     f76:	movs	r3, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     f78:	vmul.f32	s14, s12, s14
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     f7c:	strb.w	r2, [sp, #45]	; 0x2d
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f80:	vcvt.u32.f32	s15, s15
     f84:	vstr	s15, [sp, #8]
		byte g = green()*multFac;
     f88:	vcvt.u32.f32	s15, s13
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f8c:	ldrb.w	r2, [sp, #8]
		byte g = green()*multFac;
     f90:	vstr	s15, [sp, #12]
		byte b = blue()*multFac;
     f94:	vcvt.u32.f32	s15, s14
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     f98:	str	r2, [sp, #8]
		byte g = green()*multFac;
     f9a:	ldrb.w	r2, [sp, #12]
		byte b = blue()*multFac;
     f9e:	vstr	s15, [sp, #24]
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     fa2:	str	r2, [sp, #16]
		byte b = blue()*multFac;
     fa4:	ldrb.w	r2, [sp, #24]
     fa8:	str	r2, [sp, #12]
     faa:	b.n	efe <updateCircles()+0x376>
     fac:	ldr	r2, [pc, #256]	; (10b0 <updateCircles()+0x528>)
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     fae:	vldr	s12, [pc, #264]	; 10b8 <updateCircles()+0x530>
     fb2:	smull	r0, r2, r2, r3
     fb6:	vldr	s15, [pc, #252]	; 10b4 <updateCircles()+0x52c>
     fba:	add	r2, r3
     fbc:	rsb	r1, r1, r2, asr #5
     fc0:	ldr	r2, [pc, #236]	; (10b0 <updateCircles()+0x528>)
     fc2:	rsb	r1, r1, r1, lsl #4
     fc6:	sub.w	r3, r3, r1, lsl #2
     fca:	rsb	r3, r3, #60	; 0x3c
     fce:	rsb	r3, r3, r3, lsl #7
     fd2:	lsls	r3, r3, #1
     fd4:	smull	r2, r1, r2, r3
     fd8:	asrs	r2, r3, #31
     fda:	add	r3, r1
     fdc:	rsb	r3, r2, r3, asr #5
     fe0:	vmov	s13, r3
     fe4:	vcvt.f32.s32	s13, s13
     fe8:	b.n	f6c <updateCircles()+0x3e4>
     fea:	ldr	r2, [pc, #196]	; (10b0 <updateCircles()+0x528>)
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     fec:	vldr	s13, [pc, #200]	; 10b8 <updateCircles()+0x530>
     ff0:	smull	r0, r2, r2, r3
     ff4:	vldr	s15, [pc, #188]	; 10b4 <updateCircles()+0x52c>
     ff8:	add	r2, r3
     ffa:	rsb	r1, r1, r2, asr #5
     ffe:	rsb	r1, r1, r1, lsl #4
    1002:	sub.w	r3, r3, r1, lsl #2
    1006:	rsb	r3, r3, r3, lsl #7
    100a:	ldr	r2, [pc, #164]	; (10b0 <updateCircles()+0x528>)
    100c:	lsls	r3, r3, #1
    100e:	smull	r2, r1, r2, r3
    1012:	asrs	r2, r3, #31
    1014:	add	r3, r1
    1016:	rsb	r3, r2, r3, asr #5
    101a:	vmov	s12, r3
    101e:	vcvt.f32.s32	s12, s12
    1022:	b.n	f6c <updateCircles()+0x3e4>
    1024:	ldr	r2, [pc, #136]	; (10b0 <updateCircles()+0x528>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
    1026:	vldr	s13, [pc, #144]	; 10b8 <updateCircles()+0x530>
    102a:	smull	r0, r2, r2, r3
    102e:	vldr	s12, [pc, #132]	; 10b4 <updateCircles()+0x52c>
    1032:	add	r2, r3
    1034:	rsb	r1, r1, r2, asr #5
    1038:	rsb	r1, r1, r1, lsl #4
    103c:	sub.w	r3, r3, r1, lsl #2
    1040:	rsb	r3, r3, #60	; 0x3c
    1044:	b.n	f50 <updateCircles()+0x3c8>
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
    1046:	rsb	r3, r3, r3, lsl #7
    104a:	ldr	r2, [pc, #100]	; (10b0 <updateCircles()+0x528>)
    104c:	vldr	s12, [pc, #100]	; 10b4 <updateCircles()+0x52c>
    1050:	lsls	r3, r3, #1
    1052:	vldr	s15, [pc, #100]	; 10b8 <updateCircles()+0x530>
    1056:	smull	r2, r1, r2, r3
    105a:	asrs	r2, r3, #31
    105c:	add	r3, r1
    105e:	rsb	r3, r2, r3, asr #5
    1062:	uxtb	r3, r3
    1064:	vmov	s13, r3
    1068:	vcvt.f32.s32	s13, s13
    106c:	b.n	f6c <updateCircles()+0x3e4>
	}

	void update() {
		if (!active) return;
		if (rtcMillis() > startTime + duration) {
			active = false;
    106e:	movs	r3, #0
    1070:	strb.w	r3, [fp, #-52]
    1074:	b.n	c2c <updateCircles()+0xa4>

	// Serial.print("Beam FrameTime: ");
	 //Serial.println(rtcMillis()-startTime);
}
    1076:	add	sp, #52	; 0x34
    1078:	vpop	{d8}
    107c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1080:	ldr	r2, [pc, #44]	; (10b0 <updateCircles()+0x528>)
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
    1082:	vldr	s13, [pc, #48]	; 10b4 <updateCircles()+0x52c>
    1086:	smull	r0, r2, r2, r3
    108a:	vldr	s15, [pc, #44]	; 10b8 <updateCircles()+0x530>
    108e:	add	r2, r3
    1090:	rsb	r1, r1, r2, asr #5
    1094:	rsb	r1, r1, r1, lsl #4
    1098:	sub.w	r3, r3, r1, lsl #2
    109c:	rsb	r3, r3, #60	; 0x3c
    10a0:	b.n	1006 <updateCircles()+0x47e>
				if (x < 0 || x >= SIZE_SCREEN || y < 0 || y >= SIZE_SCREEN) continue;
				int ledID = x* SIZE_SCREEN + y;

				float Dx = x - pos.x;
				float Dy = y - pos.y;
				float dist = sqrt(Dx * Dx + Dy * Dy);
    10a2:	vmov.f64	d0, d7
    10a6:	bl	e240 <sqrt>
    10aa:	b.n	db8 <updateCircles()+0x230>
    10ac:	.word	0x16c16c17
    10b0:	.word	0x88888889
    10b4:	.word	0x00000000
    10b8:	.word	0x437e0000

000010bc <updateRandomSeed()>:
      }
  }
}

unsigned int randomSeedN = 0;
void updateRandomSeed(){
    10bc:	push	{r4, r5, r6, lr}
    10be:	ldr	r6, [pc, #48]	; (10f0 <updateRandomSeed()+0x34>)
    10c0:	movs	r4, #0
    10c2:	mov	r5, r6

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    10c4:	mov	r0, r4
    10c6:	adds	r4, #1
    10c8:	bl	cd80 <eeprom_read_byte>

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    10cc:	strb.w	r0, [r5], #1
    10d0:	cmp	r4, #4
    10d2:	bne.n	10c4 <updateRandomSeed()+0x8>
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
    10d4:	ldr	r3, [r6, #0]
    }

    template< typename T > const T &put( int idx, const T &t ){        
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    10d6:	mov	r2, r4
    10d8:	ldr	r0, [pc, #20]	; (10f0 <updateRandomSeed()+0x34>)
    10da:	movs	r1, #0
    10dc:	adds	r3, #1
    10de:	str	r3, [r6, #0]
    10e0:	bl	cf9c <eeprom_write_block>
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10e4:	ldr	r0, [r6, #0]
}
    10e6:	ldmia.w	sp!, {r4, r5, r6, lr}
unsigned int randomSeedN = 0;
void updateRandomSeed(){
  EEPROM.get(0,randomSeedN);
  randomSeedN++;
  EEPROM.put(0,randomSeedN);
  randomSeed(randomSeedN);
    10ea:	b.w	daa4 <randomSeed(unsigned long)>
    10ee:	nop
    10f0:	.word	0x20008c98
    10f4:	.word	0x00000000

000010f8 <regular_setup()>:
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    10f8:	ldr	r3, [pc, #720]	; (13cc <regular_setup()+0x2d4>)
    10fa:	movs	r1, #255	; 0xff
}

elapsedMillis sinceAutomatonInit;

void regular_setup(){
    10fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1100:	ldr.w	r0, [r3, #448]	; 0x1c0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1104:	mov.w	fp, #1
    1108:	movw	r5, #4636	; 0x121c
    110c:	vpush	{d8-d9}
    1110:	sub	sp, #12
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1112:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    1116:	ldr	r3, [pc, #692]	; (13cc <regular_setup()+0x2d4>)
    1118:	movs	r1, #8
    111a:	movs	r0, #0
    111c:	ldr.w	r4, [r3, #436]	; 0x1b4
    1120:	bl	dab8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1124:	add.w	r1, r0, fp
    1128:	ldr	r3, [pc, #672]	; (13cc <regular_setup()+0x2d4>)
    112a:	add.w	r0, r0, r0, lsl #1
    112e:	mov.w	ip, #0
    1132:	add.w	r1, r1, r1, lsl #1
    1136:	ldr.w	lr, [r3, #452]	; 0x1c4
    113a:	add.w	r8, r3, r0, lsl #3
    113e:	ldr	r0, [pc, #652]	; (13cc <regular_setup()+0x2d4>)
    1140:	lsls	r1, r1, #3
    1142:	str.w	lr, [r4, r5]
    1146:	ldr.w	r2, [r8, #32]
    114a:	ldr.w	r6, [r8, #40]	; 0x28
    114e:	add.w	r9, r0, r1
    1152:	ldr	r0, [r0, r1]
    1154:	ldr.w	r1, [r8, #36]	; 0x24
    1158:	ldr.w	r7, [r3, #456]	; 0x1c8
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    115c:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1160:	str	r1, [r4, #12]
    1162:	ldr.w	r1, [r9, #4]
    1166:	add.w	r9, r3, #4640	; 0x1220
    116a:	str	r6, [r4, #16]
    116c:	ldr.w	r6, [r8, #44]	; 0x2c
    1170:	add.w	r8, r4, #4640	; 0x1220
    1174:	str	r2, [r4, #8]
    1176:	ldr	r2, [pc, #596]	; (13cc <regular_setup()+0x2d4>)
    1178:	str	r6, [r4, #20]
    117a:	ldr	r2, [r2, #4]
    117c:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    117e:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1180:	mov	r6, r2
    1182:	ldr	r2, [pc, #584]	; (13cc <regular_setup()+0x2d4>)
    1184:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    1186:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1188:	strb.w	ip, [r4, #24]
    118c:	ldr.w	ip, [r2, #12]
    1190:	ldr	r4, [r2, #8]
    1192:	ldr	r2, [r2, #16]
    1194:	str.w	r7, [r8]
    1198:	str	r2, [r3, #16]
    119a:	ldr	r2, [pc, #560]	; (13cc <regular_setup()+0x2d4>)
    119c:	str.w	lr, [r3, r5]
    11a0:	ldr	r2, [r2, #20]
    11a2:	strb.w	fp, [r3, #24]
    11a6:	str	r2, [r3, #20]
    11a8:	ldr	r2, [pc, #544]	; (13cc <regular_setup()+0x2d4>)
    11aa:	str.w	ip, [r3, #12]
    11ae:	ldr	r2, [r2, #0]
    11b0:	str	r6, [r3, #4]
    11b2:	str	r2, [r3, #0]
    11b4:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    11b6:	ldr	r3, [pc, #532]	; (13cc <regular_setup()+0x2d4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11b8:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    11bc:	ldr.w	r8, [r3, #440]	; 0x1b8
    11c0:	bl	dab8 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11c4:	ldr	r3, [pc, #516]	; (13cc <regular_setup()+0x2d4>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11c6:	add.w	r0, r0, r0, lsl #1
    11ca:	add.w	sl, r8, #4640	; 0x1220
    11ce:	add.w	r0, r3, r0, lsl #3
    11d2:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    11d6:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    11da:	add.w	r1, r0, #200	; 0xc8
    11de:	str.w	ip, [r8, r5]
    11e2:	ldr.w	r3, [r3, #456]	; 0x1c8
    11e6:	add.w	r9, r7, #4640	; 0x1220
    11ea:	ldr.w	r4, [r0, #196]	; 0xc4
    11ee:	ldmia	r1, {r1, r2, r6}
    11f0:	str.w	r6, [r8, #16]
    11f4:	ldr.w	r6, [r0, #212]	; 0xd4
    11f8:	ldr.w	r0, [r0, #192]	; 0xc0
    11fc:	str.w	r1, [r8, #8]
    1200:	ldr	r1, [pc, #456]	; (13cc <regular_setup()+0x2d4>)
    1202:	str.w	r2, [r8, #12]
    1206:	ldr	r1, [r1, #4]
    1208:	ldr	r2, [pc, #448]	; (13cc <regular_setup()+0x2d4>)
    120a:	str.w	r6, [r8, #20]
    120e:	mov	r6, r1
    1210:	ldr.w	lr, [r2, #8]
    1214:	ldr	r1, [r2, #20]
    1216:	strb.w	fp, [r8, #24]
    121a:	stmia.w	r8, {r0, r4}
    121e:	ldr	r4, [r2, #16]
    1220:	ldr	r0, [r2, #12]
    1222:	ldr	r2, [r2, #0]
    1224:	str.w	r3, [sl]
    1228:	str.w	ip, [r7, r5]
    122c:	str	r6, [r7, #4]
    122e:	str	r2, [r7, #0]
    1230:	strb.w	fp, [r7, #24]
    1234:	str.w	lr, [r7, #8]
    1238:	str	r0, [r7, #12]
    123a:	str	r4, [r7, #16]
    123c:	str	r1, [r7, #20]
    123e:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1242:	ldr	r3, [pc, #392]	; (13cc <regular_setup()+0x2d4>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1244:	ldr	r2, [pc, #388]	; (13cc <regular_setup()+0x2d4>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1246:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    124a:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    124e:	subs	r3, #1
    1250:	ldr.w	r6, [r2, #364]	; 0x16c
    1254:	ldrb.w	sl, [r2, #368]	; 0x170
    1258:	cmp	r3, #4
    125a:	bhi.w	2946 <regular_setup()+0x184e>
    125e:	tbh	[pc, r3, lsl #1]
    1262:	.short	0x002f
    1264:	.word	0x00940059
    1268:	.word	0x000500eb
    126c:	add.w	r7, r5, #2304	; 0x900
    1270:	add.w	r6, r5, #28
    1274:	mov	r4, r5
    1276:	mov	r8, r7
    1278:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    127a:	cmp	r7, #0
    127c:	bne.w	2660 <regular_setup()+0x1568>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1280:	ldr	r3, [r5, #0]
    1282:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1284:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1288:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    128a:	str	r3, [r4, #120]	; 0x78
    128c:	adds	r4, #96	; 0x60
    128e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1290:	cmp	r4, r8
    1292:	bne.n	127a <regular_setup()+0x182>
    1294:	ldr	r3, [pc, #308]	; (13cc <regular_setup()+0x2d4>)
    1296:	ldr	r2, [pc, #308]	; (13cc <regular_setup()+0x2d4>)
    1298:	ldrb.w	sl, [r3, #368]	; 0x170
    129c:	ldr.w	r3, [r3, #360]	; 0x168
    12a0:	ldr.w	r6, [r2, #364]	; 0x16c
    12a4:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    12a6:	ldr	r2, [pc, #292]	; (13cc <regular_setup()+0x2d4>)
    12a8:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    12ac:	cmp	r3, #4
    12ae:	bhi.w	2a1a <regular_setup()+0x1922>
    12b2:	tbh	[pc, r3, lsl #1]
    12b6:	.short	0x01b6
    12b8:	.word	0x0126017a
    12bc:	.word	0x00f401e1
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12c0:	movs	r0, #8
    12c2:	bl	dab0 <random(unsigned long)>
    12c6:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12ca:	movs	r0, #8
    12cc:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    12d0:	cmp	r6, #0
    12d2:	ble.n	1294 <regular_setup()+0x19c>
    12d4:	add.w	r3, r0, #15
    12d8:	add.w	r4, r4, r4, lsl #1
    12dc:	movs	r7, #0
    12de:	add.w	r4, r3, r4, lsl #3
    12e2:	add.w	r4, r5, r4, lsl #2
      if (rand){
    12e6:	cmp.w	sl, #0
    12ea:	bne.n	12fe <regular_setup()+0x206>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    12ec:	ldr	r3, [r5, #0]
    12ee:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    12f0:	adds	r7, #1
    12f2:	adds	r4, #4
    12f4:	cmp	r7, r6
    12f6:	beq.n	1294 <regular_setup()+0x19c>
      if (rand){
    12f8:	cmp.w	sl, #0
    12fc:	beq.n	12ec <regular_setup()+0x1f4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    12fe:	ldr	r3, [r5, #20]
    1300:	ldr	r2, [r5, #16]
    1302:	subs	r0, r3, r2
    1304:	adds	r0, #2
    1306:	bl	dab0 <random(unsigned long)>
    130a:	ldr	r3, [r5, #16]
    130c:	subs	r3, #1
    130e:	add	r0, r3
    1310:	str	r0, [r4, #0]
    1312:	b.n	12f0 <regular_setup()+0x1f8>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1314:	movs	r0, #8
    1316:	bl	dab0 <random(unsigned long)>
    131a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    131e:	movs	r0, #8
    1320:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1324:	cmp	r6, #0
    1326:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1328:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    132c:	it	lt
    132e:	addlt	r3, r6, #1
    1330:	cmp	r6, #0
    1332:	mov.w	fp, r3, asr #1
    1336:	it	lt
    1338:	addlt	r6, #1
    133a:	rsb	fp, fp, #0
    133e:	asrs	r6, r6, #1
    1340:	add.w	r7, r0, fp
    1344:	adds	r3, r0, r6
    1346:	cmp	r7, r3
    1348:	str	r3, [sp, #4]
    134a:	bge.n	1294 <regular_setup()+0x19c>
    134c:	add	fp, r4
    134e:	add	r4, r6
    1350:	add.w	r6, fp, fp, lsl #1
    1354:	add.w	r6, r7, r6, lsl #3
    1358:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    135c:	cmp	fp, r4
    135e:	bge.n	137e <regular_setup()+0x286>
    1360:	mov	r9, r6
    1362:	mov	r8, fp
        if (rand){
    1364:	cmp.w	sl, #0
    1368:	bne.w	2646 <regular_setup()+0x154e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    136c:	ldr	r3, [r5, #0]
    136e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1372:	add.w	r8, r8, #1
    1376:	add.w	r9, r9, #96	; 0x60
    137a:	cmp	r8, r4
    137c:	bne.n	1364 <regular_setup()+0x26c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    137e:	adds	r7, #1
    1380:	ldr	r3, [sp, #4]
    1382:	adds	r6, #4
    1384:	cmp	r7, r3
    1386:	bne.n	135c <regular_setup()+0x264>
    1388:	b.n	1294 <regular_setup()+0x19c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    138a:	movs	r0, #8
    138c:	mov	r7, r5
    138e:	bl	dab0 <random(unsigned long)>
    1392:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1394:	movs	r0, #8
    1396:	add.w	fp, r5, #96	; 0x60
    139a:	bl	dab0 <random(unsigned long)>
    139e:	vmov	s15, r6
    13a2:	adds	r4, #8
    13a4:	add.w	r3, r0, #8
    13a8:	vcvt.f64.s32	d9, s15
    13ac:	rsb	r9, r0, #16
    13b0:	negs	r3, r3
    13b2:	rsb	r8, r4, #0
    13b6:	str	r3, [sp, #4]
    13b8:	vmov	s15, r8
    13bc:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    13be:	mov	r6, r7
    13c0:	vcvt.f64.s32	d8, s15
    13c4:	vmul.f64	d8, d8, d8
    13c8:	b.n	13dc <regular_setup()+0x2e4>
    13ca:	nop
    13cc:	.word	0x20005074
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    13d0:	ldr	r3, [r5, #0]
    13d2:	str	r3, [r6, #28]
    13d4:	adds	r4, #1
    13d6:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    13d8:	cmp	r4, r9
    13da:	beq.n	142c <regular_setup()+0x334>
      double xx = x-midPoint_y;
    13dc:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    13e0:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    13e4:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    13e8:	vfma.f64	d0, d7, d7
    13ec:	vsqrt.f64	d7, d0
    13f0:	vcmp.f64	d7, d7
    13f4:	vmrs	APSR_nzcv, fpscr
    13f8:	bne.w	2c2a <regular_setup()+0x1b32>
    13fc:	vcmpe.f64	d7, d9
    1400:	vmrs	APSR_nzcv, fpscr
    1404:	bhi.n	13d4 <regular_setup()+0x2dc>
        if (rand){
    1406:	cmp.w	sl, #0
    140a:	beq.n	13d0 <regular_setup()+0x2d8>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    140c:	ldr	r3, [r5, #20]
    140e:	adds	r4, #1
    1410:	ldr	r0, [r5, #16]
    1412:	adds	r6, #96	; 0x60
    1414:	subs	r0, r3, r0
    1416:	adds	r0, #2
    1418:	bl	dab0 <random(unsigned long)>
    141c:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    141e:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1420:	add.w	r3, r3, #4294967295
    1424:	add	r0, r3
    1426:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    142a:	bne.n	13dc <regular_setup()+0x2e4>
    142c:	adds	r7, #4
    142e:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1432:	cmp	r7, fp
    1434:	bne.n	13b8 <regular_setup()+0x2c0>
    1436:	b.n	1294 <regular_setup()+0x19c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1438:	cmp	r6, #0
    143a:	ble.n	14c6 <regular_setup()+0x3ce>
    143c:	mov	r9, r5
    143e:	movs	r7, #0
    1440:	mov	r5, sl
    1442:	b.n	145a <regular_setup()+0x362>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1444:	add.w	r3, r8, r3, lsl #3
    1448:	ldr.w	r2, [r9]
    144c:	add.w	r3, r9, r3, lsl #2
    1450:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1452:	adds	r7, #1
    1454:	cmp	r7, r6
    1456:	beq.w	1294 <regular_setup()+0x19c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    145a:	movs	r0, #8
    145c:	bl	dab0 <random(unsigned long)>
    1460:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1464:	movs	r0, #8
    1466:	bl	dab0 <random(unsigned long)>
    146a:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    146e:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1472:	cmp	r5, #0
    1474:	beq.n	1444 <regular_setup()+0x34c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1476:	ldr.w	r3, [r9, #20]
    147a:	add.w	r4, r4, r4, lsl #1
    147e:	ldr.w	r2, [r9, #16]
    1482:	subs	r0, r3, r2
    1484:	adds	r0, #2
    1486:	bl	dab0 <random(unsigned long)>
    148a:	ldr.w	r3, [r9, #16]
    148e:	subs	r2, r3, #1
    1490:	add.w	r3, r8, r4, lsl #3
    1494:	add	r0, r2
    1496:	add.w	r3, r9, r3, lsl #2
    149a:	str	r0, [r3, #28]
    149c:	b.n	1452 <regular_setup()+0x35a>
    149e:	add.w	r7, r5, #2304	; 0x900
    14a2:	add.w	r6, r5, #28
    14a6:	mov	r4, r5
    14a8:	mov	r8, r7
    14aa:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    14ac:	cmp	r7, #0
    14ae:	bne.w	2700 <regular_setup()+0x1608>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    14b2:	ldr	r3, [r5, #0]
    14b4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    14b6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    14ba:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    14bc:	str	r3, [r4, #120]	; 0x78
    14be:	adds	r4, #96	; 0x60
    14c0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    14c2:	cmp	r4, r8
    14c4:	bne.n	14ac <regular_setup()+0x3b4>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    14c6:	ldr	r3, [pc, #800]	; (17e8 <regular_setup()+0x6f0>)
    14c8:	movs	r1, #4
    14ca:	movs	r0, #0
    14cc:	ldr.w	r5, [r3, #440]	; 0x1b8
    14d0:	bl	dab8 <random(long, long)>
    14d4:	ldr	r3, [pc, #784]	; (17e8 <regular_setup()+0x6f0>)
    14d6:	add.w	r0, r0, r0, lsl #1
    14da:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    14de:	ldr.w	r2, [r3, #372]	; 0x174
    14e2:	add.w	r3, r3, #372	; 0x174
    14e6:	subs	r2, #1
    14e8:	ldr	r6, [r3, #4]
    14ea:	ldrb.w	sl, [r3, #8]
    14ee:	cmp	r2, #4
    14f0:	bhi.w	28dc <regular_setup()+0x17e4>
    14f4:	tbh	[pc, r2, lsl #1]
    14f8:	.word	0x01ae01ea
    14fc:	.word	0x01260158
    1500:	.short	0x00f4
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1502:	movs	r0, #8
    1504:	mov	r7, r5
    1506:	bl	dab0 <random(unsigned long)>
    150a:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    150c:	movs	r0, #8
    150e:	add.w	fp, r5, #96	; 0x60
    1512:	bl	dab0 <random(unsigned long)>
    1516:	vmov	s15, r6
    151a:	adds	r4, #8
    151c:	add.w	r3, r0, #8
    1520:	vcvt.f64.s32	d9, s15
    1524:	rsb	r9, r0, #16
    1528:	negs	r3, r3
    152a:	rsb	r8, r4, #0
    152e:	str	r3, [sp, #4]
    1530:	vmov	s15, r8
    1534:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1536:	mov	r6, r7
    1538:	vcvt.f64.s32	d8, s15
    153c:	vmul.f64	d8, d8, d8
    1540:	b.n	154e <regular_setup()+0x456>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1542:	ldr	r3, [r5, #0]
    1544:	str	r3, [r6, #28]
    1546:	adds	r4, #1
    1548:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    154a:	cmp	r4, r9
    154c:	beq.n	159e <regular_setup()+0x4a6>
      double xx = x-midPoint_y;
    154e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1552:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1556:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    155a:	vfma.f64	d0, d7, d7
    155e:	vsqrt.f64	d7, d0
    1562:	vcmp.f64	d7, d7
    1566:	vmrs	APSR_nzcv, fpscr
    156a:	bne.w	2c7c <regular_setup()+0x1b84>
    156e:	vcmpe.f64	d7, d9
    1572:	vmrs	APSR_nzcv, fpscr
    1576:	bhi.n	1546 <regular_setup()+0x44e>
        if (rand){
    1578:	cmp.w	sl, #0
    157c:	beq.n	1542 <regular_setup()+0x44a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    157e:	ldr	r3, [r5, #20]
    1580:	adds	r4, #1
    1582:	ldr	r0, [r5, #16]
    1584:	adds	r6, #96	; 0x60
    1586:	subs	r0, r3, r0
    1588:	adds	r0, #2
    158a:	bl	dab0 <random(unsigned long)>
    158e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1590:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1592:	add.w	r3, r3, #4294967295
    1596:	add	r0, r3
    1598:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    159c:	bne.n	154e <regular_setup()+0x456>
    159e:	adds	r7, #4
    15a0:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    15a4:	cmp	r7, fp
    15a6:	bne.n	1530 <regular_setup()+0x438>
    15a8:	b.n	14c6 <regular_setup()+0x3ce>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15aa:	movs	r0, #8
    15ac:	bl	dab0 <random(unsigned long)>
    15b0:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15b4:	movs	r0, #8
    15b6:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15ba:	cmp	r6, #0
    15bc:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    15be:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    15c2:	it	lt
    15c4:	addlt	r3, r6, #1
    15c6:	cmp	r6, #0
    15c8:	mov.w	fp, r3, asr #1
    15cc:	it	lt
    15ce:	addlt	r6, #1
    15d0:	rsb	fp, fp, #0
    15d4:	asrs	r6, r6, #1
    15d6:	add.w	r7, r0, fp
    15da:	adds	r3, r0, r6
    15dc:	cmp	r7, r3
    15de:	str	r3, [sp, #4]
    15e0:	bge.w	14c6 <regular_setup()+0x3ce>
    15e4:	add	fp, r4
    15e6:	add	r4, r6
    15e8:	add.w	r6, fp, fp, lsl #1
    15ec:	add.w	r6, r7, r6, lsl #3
    15f0:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    15f4:	cmp	fp, r4
    15f6:	bge.n	1616 <regular_setup()+0x51e>
    15f8:	mov	r9, r6
    15fa:	mov	r8, fp
        if (rand){
    15fc:	cmp.w	sl, #0
    1600:	bne.w	2612 <regular_setup()+0x151a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1604:	ldr	r3, [r5, #0]
    1606:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    160a:	add.w	r8, r8, #1
    160e:	add.w	r9, r9, #96	; 0x60
    1612:	cmp	r8, r4
    1614:	bne.n	15fc <regular_setup()+0x504>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1616:	adds	r7, #1
    1618:	ldr	r3, [sp, #4]
    161a:	adds	r6, #4
    161c:	cmp	r7, r3
    161e:	bne.n	15f4 <regular_setup()+0x4fc>
    1620:	b.n	14c6 <regular_setup()+0x3ce>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1622:	movs	r0, #8
    1624:	bl	dab0 <random(unsigned long)>
    1628:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    162c:	movs	r0, #8
    162e:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1632:	cmp	r6, #0
    1634:	ble.w	14c6 <regular_setup()+0x3ce>
    1638:	add.w	r3, r0, #15
    163c:	add.w	r4, r4, r4, lsl #1
    1640:	mov	r8, r6
    1642:	mov	r6, sl
    1644:	add.w	r4, r3, r4, lsl #3
    1648:	movs	r7, #0
    164a:	add.w	r4, r5, r4, lsl #2
      if (rand){
    164e:	cbnz	r6, 1662 <regular_setup()+0x56a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1650:	ldr	r3, [r5, #0]
    1652:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1654:	adds	r7, #1
    1656:	adds	r4, #4
    1658:	cmp	r7, r8
    165a:	beq.w	14c6 <regular_setup()+0x3ce>
      if (rand){
    165e:	cmp	r6, #0
    1660:	beq.n	1650 <regular_setup()+0x558>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1662:	ldr	r3, [r5, #20]
    1664:	ldr	r2, [r5, #16]
    1666:	subs	r0, r3, r2
    1668:	adds	r0, #2
    166a:	bl	dab0 <random(unsigned long)>
    166e:	ldr	r3, [r5, #16]
    1670:	subs	r3, #1
    1672:	add	r0, r3
    1674:	str	r0, [r4, #0]
    1676:	b.n	1654 <regular_setup()+0x55c>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1678:	cmp	r6, #0
    167a:	ble.w	14c6 <regular_setup()+0x3ce>
    167e:	mov	r9, r5
    1680:	movs	r7, #0
    1682:	mov	r5, sl
    1684:	b.n	169c <regular_setup()+0x5a4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1686:	add.w	r3, r4, r3, lsl #3
    168a:	ldr.w	r2, [r9]
    168e:	add.w	r3, r9, r3, lsl #2
    1692:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1694:	adds	r7, #1
    1696:	cmp	r7, r6
    1698:	beq.w	14c6 <regular_setup()+0x3ce>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    169c:	movs	r0, #8
    169e:	bl	dab0 <random(unsigned long)>
    16a2:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    16a6:	movs	r0, #8
    16a8:	bl	dab0 <random(unsigned long)>
    16ac:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    16b0:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    16b4:	cmp	r5, #0
    16b6:	beq.n	1686 <regular_setup()+0x58e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    16b8:	ldr.w	r3, [r9, #20]
    16bc:	add.w	r8, r8, r8, lsl #1
    16c0:	ldr.w	r2, [r9, #16]
    16c4:	add.w	r4, r4, r8, lsl #3
    16c8:	subs	r0, r3, r2
    16ca:	add.w	r4, r9, r4, lsl #2
    16ce:	adds	r0, #2
    16d0:	bl	dab0 <random(unsigned long)>
    16d4:	ldr.w	r3, [r9, #16]
    16d8:	subs	r3, #1
    16da:	add	r0, r3
    16dc:	str	r0, [r4, #28]
    16de:	b.n	1694 <regular_setup()+0x59c>
    16e0:	add.w	r7, r5, #2304	; 0x900
    16e4:	add.w	r6, r5, #28
    16e8:	mov	r4, r5
    16ea:	mov	r8, r7
    16ec:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    16ee:	cmp	r7, #0
    16f0:	bne.w	26b0 <regular_setup()+0x15b8>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    16f4:	ldr	r3, [r5, #0]
    16f6:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    16f8:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    16fc:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    16fe:	str	r3, [r4, #120]	; 0x78
    1700:	adds	r4, #96	; 0x60
    1702:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1704:	cmp	r4, r8
    1706:	bne.n	16ee <regular_setup()+0x5f6>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    1708:	ldr	r3, [pc, #220]	; (17e8 <regular_setup()+0x6f0>)
    170a:	movs	r1, #4
    170c:	movs	r0, #0
    170e:	ldr.w	r5, [r3, #444]	; 0x1bc
    1712:	bl	dab8 <random(long, long)>
    1716:	ldr	r3, [pc, #208]	; (17e8 <regular_setup()+0x6f0>)
    1718:	add.w	r0, r0, r0, lsl #1
    171c:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1720:	ldr.w	r2, [r3, #372]	; 0x174
    1724:	add.w	r3, r3, #372	; 0x174
    1728:	subs	r2, #1
    172a:	ldr	r4, [r3, #4]
    172c:	ldrb.w	fp, [r3, #8]
    1730:	cmp	r2, #4
    1732:	bhi.w	2bc0 <regular_setup()+0x1ac8>
    1736:	tbh	[pc, r2, lsl #1]
    173a:	.short	0x0281
    173c:	.word	0x01ef0243
    1740:	.word	0x00f401bd
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1744:	cmp	r6, #0
    1746:	ble.n	1708 <regular_setup()+0x610>
    1748:	mov	r9, r5
    174a:	movs	r7, #0
    174c:	mov	r5, sl
    174e:	b.n	1764 <regular_setup()+0x66c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1750:	add.w	r3, r4, r3, lsl #3
    1754:	ldr.w	r2, [r9]
    1758:	add.w	r3, r9, r3, lsl #2
    175c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    175e:	adds	r7, #1
    1760:	cmp	r7, r6
    1762:	beq.n	1708 <regular_setup()+0x610>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1764:	movs	r0, #8
    1766:	bl	dab0 <random(unsigned long)>
    176a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    176e:	movs	r0, #8
    1770:	bl	dab0 <random(unsigned long)>
    1774:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1778:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    177c:	cmp	r5, #0
    177e:	beq.n	1750 <regular_setup()+0x658>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1780:	ldr.w	r3, [r9, #20]
    1784:	add.w	r8, r8, r8, lsl #1
    1788:	ldr.w	r2, [r9, #16]
    178c:	add.w	r4, r4, r8, lsl #3
    1790:	subs	r0, r3, r2
    1792:	add.w	r4, r9, r4, lsl #2
    1796:	adds	r0, #2
    1798:	bl	dab0 <random(unsigned long)>
    179c:	ldr.w	r3, [r9, #16]
    17a0:	subs	r3, #1
    17a2:	add	r0, r3
    17a4:	str	r0, [r4, #28]
    17a6:	b.n	175e <regular_setup()+0x666>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17a8:	movs	r0, #8
    17aa:	mov	r7, r5
    17ac:	bl	dab0 <random(unsigned long)>
    17b0:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17b2:	movs	r0, #8
    17b4:	add.w	fp, r5, #96	; 0x60
    17b8:	bl	dab0 <random(unsigned long)>
    17bc:	vmov	s15, r6
    17c0:	adds	r4, #8
    17c2:	add.w	r3, r0, #8
    17c6:	vcvt.f64.s32	d9, s15
    17ca:	rsb	r9, r0, #16
    17ce:	negs	r3, r3
    17d0:	rsb	r8, r4, #0
    17d4:	str	r3, [sp, #4]
    17d6:	vmov	s15, r8
    17da:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    17dc:	mov	r6, r7
    17de:	vcvt.f64.s32	d8, s15
    17e2:	vmul.f64	d8, d8, d8
    17e6:	b.n	17f8 <regular_setup()+0x700>
    17e8:	.word	0x20005074
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    17ec:	ldr	r3, [r5, #0]
    17ee:	str	r3, [r6, #28]
    17f0:	adds	r4, #1
    17f2:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    17f4:	cmp	r4, r9
    17f6:	beq.n	1848 <regular_setup()+0x750>
      double xx = x-midPoint_y;
    17f8:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    17fc:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1800:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1804:	vfma.f64	d0, d7, d7
    1808:	vsqrt.f64	d7, d0
    180c:	vcmp.f64	d7, d7
    1810:	vmrs	APSR_nzcv, fpscr
    1814:	bne.w	2c70 <regular_setup()+0x1b78>
    1818:	vcmpe.f64	d7, d9
    181c:	vmrs	APSR_nzcv, fpscr
    1820:	bhi.n	17f0 <regular_setup()+0x6f8>
        if (rand){
    1822:	cmp.w	sl, #0
    1826:	beq.n	17ec <regular_setup()+0x6f4>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1828:	ldr	r3, [r5, #20]
    182a:	adds	r4, #1
    182c:	ldr	r0, [r5, #16]
    182e:	adds	r6, #96	; 0x60
    1830:	subs	r0, r3, r0
    1832:	adds	r0, #2
    1834:	bl	dab0 <random(unsigned long)>
    1838:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    183a:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    183c:	add.w	r3, r3, #4294967295
    1840:	add	r0, r3
    1842:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1846:	bne.n	17f8 <regular_setup()+0x700>
    1848:	adds	r7, #4
    184a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    184e:	cmp	r7, fp
    1850:	bne.n	17d6 <regular_setup()+0x6de>
    1852:	b.n	1708 <regular_setup()+0x610>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1854:	movs	r0, #8
    1856:	bl	dab0 <random(unsigned long)>
    185a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    185e:	movs	r0, #8
    1860:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1864:	cmp	r6, #0
    1866:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1868:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    186c:	it	lt
    186e:	addlt	r3, r6, #1
    1870:	cmp	r6, #0
    1872:	mov.w	fp, r3, asr #1
    1876:	it	lt
    1878:	addlt	r6, #1
    187a:	rsb	fp, fp, #0
    187e:	asrs	r6, r6, #1
    1880:	add.w	r7, r0, fp
    1884:	adds	r3, r0, r6
    1886:	cmp	r3, r7
    1888:	str	r3, [sp, #4]
    188a:	ble.w	1708 <regular_setup()+0x610>
    188e:	add	fp, r4
    1890:	add	r4, r6
    1892:	add.w	r6, fp, fp, lsl #1
    1896:	add.w	r6, r7, r6, lsl #3
    189a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    189e:	cmp	r4, fp
    18a0:	ble.n	18c0 <regular_setup()+0x7c8>
    18a2:	mov	r9, r6
    18a4:	mov	r8, fp
        if (rand){
    18a6:	cmp.w	sl, #0
    18aa:	bne.w	262c <regular_setup()+0x1534>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    18ae:	ldr	r3, [r5, #0]
    18b0:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    18b4:	add.w	r8, r8, #1
    18b8:	add.w	r9, r9, #96	; 0x60
    18bc:	cmp	r8, r4
    18be:	bne.n	18a6 <regular_setup()+0x7ae>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    18c0:	adds	r7, #1
    18c2:	ldr	r3, [sp, #4]
    18c4:	adds	r6, #4
    18c6:	cmp	r3, r7
    18c8:	bne.n	189e <regular_setup()+0x7a6>
    18ca:	b.n	1708 <regular_setup()+0x610>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18cc:	movs	r0, #8
    18ce:	bl	dab0 <random(unsigned long)>
    18d2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18d6:	movs	r0, #8
    18d8:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    18dc:	cmp	r6, #0
    18de:	ble.w	1708 <regular_setup()+0x610>
    18e2:	add.w	r3, r0, #15
    18e6:	add.w	r4, r4, r4, lsl #1
    18ea:	mov	r8, r6
    18ec:	mov	r6, sl
    18ee:	add.w	r4, r3, r4, lsl #3
    18f2:	movs	r7, #0
    18f4:	add.w	r4, r5, r4, lsl #2
      if (rand){
    18f8:	cbnz	r6, 190c <regular_setup()+0x814>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    18fa:	ldr	r3, [r5, #0]
    18fc:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    18fe:	adds	r7, #1
    1900:	adds	r4, #4
    1902:	cmp	r7, r8
    1904:	beq.w	1708 <regular_setup()+0x610>
      if (rand){
    1908:	cmp	r6, #0
    190a:	beq.n	18fa <regular_setup()+0x802>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    190c:	ldr	r3, [r5, #20]
    190e:	ldr	r2, [r5, #16]
    1910:	subs	r0, r3, r2
    1912:	adds	r0, #2
    1914:	bl	dab0 <random(unsigned long)>
    1918:	ldr	r3, [r5, #16]
    191a:	subs	r3, #1
    191c:	add	r0, r3
    191e:	str	r0, [r4, #0]
    1920:	b.n	18fe <regular_setup()+0x806>
    1922:	add.w	r7, r5, #2304	; 0x900
    1926:	add.w	r6, r5, #28
    192a:	mov	r4, r5
    192c:	mov	r8, r7
    192e:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1930:	cmp	r7, #0
    1932:	bne.w	283c <regular_setup()+0x1744>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1936:	ldr	r3, [r5, #0]
    1938:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    193a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    193e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1940:	str	r3, [r4, #120]	; 0x78
    1942:	adds	r4, #96	; 0x60
    1944:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1946:	cmp	r4, r8
    1948:	bne.n	1930 <regular_setup()+0x838>
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    194a:	ldr	r3, [pc, #748]	; (1c38 <regular_setup()+0xb40>)
    194c:	movs	r1, #255	; 0xff
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    194e:	mov.w	fp, #1
    1952:	movw	r5, #4636	; 0x121c
		}
	}

	void init_screen() {	
		//_screen->begin();
		_screen->setBrightness(HIGH_BRI);
    1956:	ldr.w	r0, [r3, #448]	; 0x1c0
    195a:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    195e:	ldr	r3, [pc, #728]	; (1c38 <regular_setup()+0xb40>)
    1960:	movs	r1, #8
    1962:	movs	r0, #0
    1964:	ldr.w	r4, [r3, #436]	; 0x1b4
    1968:	bl	dab8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    196c:	add.w	r1, r0, fp
    1970:	ldr	r3, [pc, #708]	; (1c38 <regular_setup()+0xb40>)
    1972:	add.w	r0, r0, r0, lsl #1
    1976:	mov.w	ip, #0
    197a:	add.w	r1, r1, r1, lsl #1
    197e:	ldr.w	lr, [r3, #452]	; 0x1c4
    1982:	add.w	r8, r3, r0, lsl #3
    1986:	ldr	r0, [pc, #688]	; (1c38 <regular_setup()+0xb40>)
    1988:	lsls	r1, r1, #3
    198a:	str.w	lr, [r4, r5]
    198e:	ldr.w	r2, [r8, #32]
    1992:	ldr.w	r6, [r8, #40]	; 0x28
    1996:	add.w	r9, r0, r1
    199a:	ldr	r0, [r0, r1]
    199c:	ldr.w	r1, [r8, #36]	; 0x24
    19a0:	ldr.w	r7, [r3, #456]	; 0x1c8
	}

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    19a4:	ldr.w	r3, [r3, #432]	; 0x1b0
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19a8:	str	r1, [r4, #12]
    19aa:	ldr.w	r1, [r9, #4]
    19ae:	add.w	r9, r3, #4640	; 0x1220
    19b2:	str	r6, [r4, #16]
    19b4:	ldr.w	r6, [r8, #44]	; 0x2c
    19b8:	add.w	r8, r4, #4640	; 0x1220
    19bc:	str	r2, [r4, #8]
    19be:	ldr	r2, [pc, #632]	; (1c38 <regular_setup()+0xb40>)
    19c0:	str	r6, [r4, #20]
    19c2:	ldr	r2, [r2, #4]
    19c4:	str	r0, [r4, #0]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19c6:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19c8:	mov	r6, r2
    19ca:	ldr	r2, [pc, #620]	; (1c38 <regular_setup()+0xb40>)
    19cc:	str	r1, [r4, #4]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19ce:	movs	r1, #8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19d0:	strb.w	ip, [r4, #24]
    19d4:	ldr.w	ip, [r2, #12]
    19d8:	ldr	r4, [r2, #8]
    19da:	ldr	r2, [r2, #16]
    19dc:	str.w	r7, [r8]
    19e0:	str	r2, [r3, #16]
    19e2:	ldr	r2, [pc, #596]	; (1c38 <regular_setup()+0xb40>)
    19e4:	str.w	lr, [r3, r5]
    19e8:	ldr	r2, [r2, #20]
    19ea:	strb.w	fp, [r3, #24]
    19ee:	str	r2, [r3, #20]
    19f0:	ldr	r2, [pc, #580]	; (1c38 <regular_setup()+0xb40>)
    19f2:	str.w	ip, [r3, #12]
    19f6:	ldr	r2, [r2, #0]
    19f8:	str	r6, [r3, #4]
    19fa:	str	r2, [r3, #0]
    19fc:	str	r4, [r3, #8]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    19fe:	ldr	r3, [pc, #568]	; (1c38 <regular_setup()+0xb40>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a00:	str.w	r7, [r9]

	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    1a04:	ldr.w	r8, [r3, #440]	; 0x1b8
    1a08:	bl	dab8 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a0c:	ldr	r3, [pc, #552]	; (1c38 <regular_setup()+0xb40>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a0e:	add.w	r0, r0, r0, lsl #1
    1a12:	add.w	sl, r8, #4640	; 0x1220
    1a16:	add.w	r0, r3, r0, lsl #3
    1a1a:	ldr.w	ip, [r3, #452]	; 0x1c4
	void define_automaton(){
		
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    1a1e:	ldr.w	r7, [r3, #444]	; 0x1bc
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1a22:	add.w	r1, r0, #200	; 0xc8
    1a26:	str.w	ip, [r8, r5]
    1a2a:	ldr.w	r3, [r3, #456]	; 0x1c8
    1a2e:	add.w	r9, r7, #4640	; 0x1220
    1a32:	ldr.w	r4, [r0, #196]	; 0xc4
    1a36:	ldmia	r1, {r1, r2, r6}
    1a38:	str.w	r6, [r8, #16]
    1a3c:	ldr.w	r6, [r0, #212]	; 0xd4
    1a40:	ldr.w	r0, [r0, #192]	; 0xc0
    1a44:	str.w	r1, [r8, #8]
    1a48:	ldr	r1, [pc, #492]	; (1c38 <regular_setup()+0xb40>)
    1a4a:	str.w	r2, [r8, #12]
    1a4e:	ldr	r1, [r1, #4]
    1a50:	ldr	r2, [pc, #484]	; (1c38 <regular_setup()+0xb40>)
    1a52:	str.w	r6, [r8, #20]
    1a56:	mov	r6, r1
    1a58:	ldr.w	lr, [r2, #8]
    1a5c:	ldr	r1, [r2, #20]
    1a5e:	strb.w	fp, [r8, #24]
    1a62:	stmia.w	r8, {r0, r4}
    1a66:	ldr	r4, [r2, #16]
    1a68:	ldr	r0, [r2, #12]
    1a6a:	ldr	r2, [r2, #0]
    1a6c:	str.w	r3, [sl]
    1a70:	str.w	ip, [r7, r5]
    1a74:	str	r6, [r7, #4]
    1a76:	str	r2, [r7, #0]
    1a78:	strb.w	fp, [r7, #24]
    1a7c:	str.w	lr, [r7, #8]
    1a80:	str	r0, [r7, #12]
    1a82:	str	r4, [r7, #16]
    1a84:	str	r1, [r7, #20]
    1a86:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a8a:	ldr	r3, [pc, #428]	; (1c38 <regular_setup()+0xb40>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a8c:	ldr	r2, [pc, #424]	; (1c38 <regular_setup()+0xb40>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a8e:	ldr.w	r3, [r3, #360]	; 0x168
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a92:	ldr.w	r5, [r2, #436]	; 0x1b4
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a96:	subs	r3, #1
    1a98:	ldr.w	r6, [r2, #364]	; 0x16c
    1a9c:	ldrb.w	sl, [r2, #368]	; 0x170
    1aa0:	cmp	r3, #4
    1aa2:	bhi.w	2b56 <regular_setup()+0x1a5e>
    1aa6:	tbh	[pc, r3, lsl #1]
    1aaa:	.short	0x01e1
    1aac:	.word	0x015101a5
    1ab0:	.word	0x00f4011e
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ab4:	cmp	r4, #0
    1ab6:	ble.w	194a <regular_setup()+0x852>
    1aba:	mov	r9, r4
    1abc:	mov.w	r8, #0
    1ac0:	mov	r4, fp
    1ac2:	b.n	1ada <regular_setup()+0x9e2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1ac4:	add.w	r3, r6, r3, lsl #3
    1ac8:	ldr	r2, [r5, #0]
    1aca:	add.w	r3, r5, r3, lsl #2
    1ace:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ad0:	add.w	r8, r8, #1
    1ad4:	cmp	r8, r9
    1ad6:	beq.w	194a <regular_setup()+0x852>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ada:	movs	r0, #8
    1adc:	bl	dab0 <random(unsigned long)>
    1ae0:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ae4:	movs	r0, #8
    1ae6:	bl	dab0 <random(unsigned long)>
    1aea:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1aee:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1af2:	cmp	r4, #0
    1af4:	beq.n	1ac4 <regular_setup()+0x9cc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1af6:	ldr	r3, [r5, #20]
    1af8:	add.w	r7, r7, r7, lsl #1
    1afc:	ldr	r2, [r5, #16]
    1afe:	add.w	r6, r6, r7, lsl #3
    1b02:	subs	r0, r3, r2
    1b04:	add.w	r6, r5, r6, lsl #2
    1b08:	adds	r0, #2
    1b0a:	bl	dab0 <random(unsigned long)>
    1b0e:	ldr	r3, [r5, #16]
    1b10:	subs	r3, #1
    1b12:	add	r0, r3
    1b14:	str	r0, [r6, #28]
    1b16:	b.n	1ad0 <regular_setup()+0x9d8>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b18:	movs	r0, #8
    1b1a:	mov	r7, r5
    1b1c:	bl	dab0 <random(unsigned long)>
    1b20:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b22:	movs	r0, #8
    1b24:	add.w	r9, r5, #96	; 0x60
    1b28:	bl	dab0 <random(unsigned long)>
    1b2c:	vmov	s15, r4
    1b30:	adds	r6, #8
    1b32:	add.w	r3, r0, #8
    1b36:	vcvt.f64.s32	d9, s15
    1b3a:	rsb	sl, r0, #16
    1b3e:	negs	r3, r3
    1b40:	rsb	r8, r6, #0
    1b44:	str	r3, [sp, #4]
    1b46:	vmov	s15, r8
    1b4a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1b4c:	mov	r6, r7
    1b4e:	vcvt.f64.s32	d8, s15
    1b52:	vmul.f64	d8, d8, d8
    1b56:	b.n	1b64 <regular_setup()+0xa6c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1b58:	ldr	r3, [r5, #0]
    1b5a:	str	r3, [r6, #28]
    1b5c:	adds	r4, #1
    1b5e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1b60:	cmp	r4, sl
    1b62:	beq.n	1bb4 <regular_setup()+0xabc>
      double xx = x-midPoint_y;
    1b64:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1b68:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1b6c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1b70:	vfma.f64	d0, d7, d7
    1b74:	vsqrt.f64	d7, d0
    1b78:	vcmp.f64	d7, d7
    1b7c:	vmrs	APSR_nzcv, fpscr
    1b80:	bne.w	2c64 <regular_setup()+0x1b6c>
    1b84:	vcmpe.f64	d7, d9
    1b88:	vmrs	APSR_nzcv, fpscr
    1b8c:	bhi.n	1b5c <regular_setup()+0xa64>
        if (rand){
    1b8e:	cmp.w	fp, #0
    1b92:	beq.n	1b58 <regular_setup()+0xa60>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1b94:	ldr	r3, [r5, #20]
    1b96:	adds	r4, #1
    1b98:	ldr	r0, [r5, #16]
    1b9a:	adds	r6, #96	; 0x60
    1b9c:	subs	r0, r3, r0
    1b9e:	adds	r0, #2
    1ba0:	bl	dab0 <random(unsigned long)>
    1ba4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1ba6:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ba8:	add.w	r3, r3, #4294967295
    1bac:	add	r0, r3
    1bae:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bb2:	bne.n	1b64 <regular_setup()+0xa6c>
    1bb4:	adds	r7, #4
    1bb6:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1bba:	cmp	r7, r9
    1bbc:	bne.n	1b46 <regular_setup()+0xa4e>
    1bbe:	b.n	194a <regular_setup()+0x852>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bc0:	movs	r0, #8
    1bc2:	bl	dab0 <random(unsigned long)>
    1bc6:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bca:	movs	r0, #8
    1bcc:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bd0:	cmp	r4, #0
    1bd2:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bd4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1bd8:	it	lt
    1bda:	addlt	r3, r4, #1
    1bdc:	cmp	r4, #0
    1bde:	mov.w	r8, r3, asr #1
    1be2:	it	lt
    1be4:	addlt	r4, #1
    1be6:	rsb	r8, r8, #0
    1bea:	asrs	r4, r4, #1
    1bec:	add.w	r7, r0, r8
    1bf0:	adds	r3, r4, r0
    1bf2:	cmp	r3, r7
    1bf4:	str	r3, [sp, #4]
    1bf6:	ble.w	194a <regular_setup()+0x852>
    1bfa:	add	r8, r6
    1bfc:	add.w	sl, r4, r6
    1c00:	add.w	r6, r8, r8, lsl #1
    1c04:	add.w	r6, r7, r6, lsl #3
    1c08:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c0c:	cmp	r8, sl
    1c0e:	bge.n	1c2c <regular_setup()+0xb34>
    1c10:	mov	r9, r6
    1c12:	mov	r4, r8
        if (rand){
    1c14:	cmp.w	fp, #0
    1c18:	bne.w	25f8 <regular_setup()+0x1500>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1c1c:	ldr	r3, [r5, #0]
    1c1e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c22:	adds	r4, #1
    1c24:	add.w	r9, r9, #96	; 0x60
    1c28:	cmp	r4, sl
    1c2a:	bne.n	1c14 <regular_setup()+0xb1c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c2c:	adds	r7, #1
    1c2e:	ldr	r3, [sp, #4]
    1c30:	adds	r6, #4
    1c32:	cmp	r3, r7
    1c34:	bne.n	1c0c <regular_setup()+0xb14>
    1c36:	b.n	194a <regular_setup()+0x852>
    1c38:	.word	0x20005268
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c3c:	movs	r0, #8
    1c3e:	bl	dab0 <random(unsigned long)>
    1c42:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c46:	movs	r0, #8
    1c48:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1c4c:	cmp	r4, #0
    1c4e:	ble.w	194a <regular_setup()+0x852>
    1c52:	add.w	r3, r0, #15
    1c56:	add.w	r6, r6, r6, lsl #1
    1c5a:	mov	r8, r4
    1c5c:	mov	r4, fp
    1c5e:	add.w	r6, r3, r6, lsl #3
    1c62:	movs	r7, #0
    1c64:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1c68:	cbnz	r4, 1c7c <regular_setup()+0xb84>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1c6a:	ldr	r3, [r5, #0]
    1c6c:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1c6e:	adds	r7, #1
    1c70:	adds	r6, #4
    1c72:	cmp	r7, r8
    1c74:	beq.w	194a <regular_setup()+0x852>
      if (rand){
    1c78:	cmp	r4, #0
    1c7a:	beq.n	1c6a <regular_setup()+0xb72>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1c7c:	ldr	r3, [r5, #20]
    1c7e:	ldr	r2, [r5, #16]
    1c80:	subs	r0, r3, r2
    1c82:	adds	r0, #2
    1c84:	bl	dab0 <random(unsigned long)>
    1c88:	ldr	r3, [r5, #16]
    1c8a:	subs	r3, #1
    1c8c:	add	r0, r3
    1c8e:	str	r0, [r6, #0]
    1c90:	b.n	1c6e <regular_setup()+0xb76>
    1c92:	add.w	r7, r5, #2304	; 0x900
    1c96:	add.w	r6, r5, #28
    1c9a:	mov	r4, r5
    1c9c:	mov	r8, r7
    1c9e:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ca0:	cmp	r7, #0
    1ca2:	bne.w	288c <regular_setup()+0x1794>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ca6:	ldr	r3, [r5, #0]
    1ca8:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1caa:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1cae:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1cb0:	str	r3, [r4, #120]	; 0x78
    1cb2:	adds	r4, #96	; 0x60
    1cb4:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1cb6:	cmp	r4, r8
    1cb8:	bne.n	1ca0 <regular_setup()+0xba8>
    1cba:	ldr	r3, [pc, #788]	; (1fd0 <regular_setup()+0xed8>)
    1cbc:	ldr	r2, [pc, #784]	; (1fd0 <regular_setup()+0xed8>)
    1cbe:	ldr.w	r3, [r3, #360]	; 0x168
    1cc2:	ldrb.w	sl, [r2, #368]	; 0x170
    1cc6:	ldr.w	r4, [r2, #364]	; 0x16c
    1cca:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1ccc:	ldr	r2, [pc, #768]	; (1fd0 <regular_setup()+0xed8>)
    1cce:	ldr.w	r5, [r2, #432]	; 0x1b0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1cd2:	cmp	r3, #4
    1cd4:	bhi.w	29b0 <regular_setup()+0x18b8>
    1cd8:	tbh	[pc, r3, lsl #1]
    1cdc:	.word	0x017c01b8
    1ce0:	.word	0x01e30126
    1ce4:	.short	0x00f4
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1ce6:	cmp	r6, #0
    1ce8:	ble.w	1eec <regular_setup()+0xdf4>
    1cec:	mov	r9, r5
    1cee:	movs	r7, #0
    1cf0:	mov	r5, sl
    1cf2:	b.n	1d08 <regular_setup()+0xc10>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1cf4:	add.w	r3, r4, r3, lsl #3
    1cf8:	ldr.w	r2, [r9]
    1cfc:	add.w	r3, r9, r3, lsl #2
    1d00:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1d02:	adds	r7, #1
    1d04:	cmp	r7, r6
    1d06:	beq.n	1cba <regular_setup()+0xbc2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d08:	movs	r0, #8
    1d0a:	bl	dab0 <random(unsigned long)>
    1d0e:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d12:	movs	r0, #8
    1d14:	bl	dab0 <random(unsigned long)>
    1d18:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1d1c:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1d20:	cmp	r5, #0
    1d22:	beq.n	1cf4 <regular_setup()+0xbfc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1d24:	ldr.w	r3, [r9, #20]
    1d28:	add.w	r8, r8, r8, lsl #1
    1d2c:	ldr.w	r2, [r9, #16]
    1d30:	add.w	r4, r4, r8, lsl #3
    1d34:	subs	r0, r3, r2
    1d36:	add.w	r4, r9, r4, lsl #2
    1d3a:	adds	r0, #2
    1d3c:	bl	dab0 <random(unsigned long)>
    1d40:	ldr.w	r3, [r9, #16]
    1d44:	subs	r3, #1
    1d46:	add	r0, r3
    1d48:	str	r0, [r4, #28]
    1d4a:	b.n	1d02 <regular_setup()+0xc0a>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d4c:	movs	r0, #8
    1d4e:	mov	r7, r5
    1d50:	bl	dab0 <random(unsigned long)>
    1d54:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d56:	movs	r0, #8
    1d58:	add.w	fp, r5, #96	; 0x60
    1d5c:	bl	dab0 <random(unsigned long)>
    1d60:	vmov	s15, r6
    1d64:	adds	r4, #8
    1d66:	add.w	r3, r0, #8
    1d6a:	vcvt.f64.s32	d9, s15
    1d6e:	rsb	r9, r0, #16
    1d72:	negs	r3, r3
    1d74:	rsb	r8, r4, #0
    1d78:	str	r3, [sp, #4]
    1d7a:	vmov	s15, r8
    1d7e:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1d80:	mov	r6, r7
    1d82:	vcvt.f64.s32	d8, s15
    1d86:	vmul.f64	d8, d8, d8
    1d8a:	b.n	1d98 <regular_setup()+0xca0>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1d8c:	ldr	r3, [r5, #0]
    1d8e:	str	r3, [r6, #28]
    1d90:	adds	r4, #1
    1d92:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d94:	cmp	r4, r9
    1d96:	beq.n	1de8 <regular_setup()+0xcf0>
      double xx = x-midPoint_y;
    1d98:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1d9c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1da0:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1da4:	vfma.f64	d0, d7, d7
    1da8:	vsqrt.f64	d7, d0
    1dac:	vcmp.f64	d7, d7
    1db0:	vmrs	APSR_nzcv, fpscr
    1db4:	bne.w	2c58 <regular_setup()+0x1b60>
    1db8:	vcmpe.f64	d7, d9
    1dbc:	vmrs	APSR_nzcv, fpscr
    1dc0:	bhi.n	1d90 <regular_setup()+0xc98>
        if (rand){
    1dc2:	cmp.w	sl, #0
    1dc6:	beq.n	1d8c <regular_setup()+0xc94>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1dc8:	ldr	r3, [r5, #20]
    1dca:	adds	r4, #1
    1dcc:	ldr	r0, [r5, #16]
    1dce:	adds	r6, #96	; 0x60
    1dd0:	subs	r0, r3, r0
    1dd2:	adds	r0, #2
    1dd4:	bl	dab0 <random(unsigned long)>
    1dd8:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1dda:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ddc:	add.w	r3, r3, #4294967295
    1de0:	add	r0, r3
    1de2:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1de6:	bne.n	1d98 <regular_setup()+0xca0>
    1de8:	adds	r7, #4
    1dea:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1dee:	cmp	r7, fp
    1df0:	bne.n	1d7a <regular_setup()+0xc82>
    1df2:	b.n	1cba <regular_setup()+0xbc2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1df4:	movs	r0, #8
    1df6:	bl	dab0 <random(unsigned long)>
    1dfa:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1dfe:	movs	r0, #8
    1e00:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e04:	cmp	r6, #0
    1e06:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e08:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e0c:	it	lt
    1e0e:	addlt	r3, r6, #1
    1e10:	cmp	r6, #0
    1e12:	mov.w	fp, r3, asr #1
    1e16:	it	lt
    1e18:	addlt	r6, #1
    1e1a:	rsb	fp, fp, #0
    1e1e:	asrs	r6, r6, #1
    1e20:	add.w	r7, r0, fp
    1e24:	adds	r3, r0, r6
    1e26:	cmp	r7, r3
    1e28:	str	r3, [sp, #4]
    1e2a:	bge.w	1cba <regular_setup()+0xbc2>
    1e2e:	add	fp, r4
    1e30:	add	r4, r6
    1e32:	add.w	r6, fp, fp, lsl #1
    1e36:	add.w	r6, r7, r6, lsl #3
    1e3a:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e3e:	cmp	fp, r4
    1e40:	bge.n	1e60 <regular_setup()+0xd68>
    1e42:	mov	r9, r6
    1e44:	mov	r8, fp
        if (rand){
    1e46:	cmp.w	sl, #0
    1e4a:	bne.w	25e0 <regular_setup()+0x14e8>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1e4e:	ldr	r3, [r5, #0]
    1e50:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1e54:	add.w	r8, r8, #1
    1e58:	add.w	r9, r9, #96	; 0x60
    1e5c:	cmp	r8, r4
    1e5e:	bne.n	1e46 <regular_setup()+0xd4e>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e60:	adds	r7, #1
    1e62:	ldr	r3, [sp, #4]
    1e64:	adds	r6, #4
    1e66:	cmp	r7, r3
    1e68:	bne.n	1e3e <regular_setup()+0xd46>
    1e6a:	b.n	1cba <regular_setup()+0xbc2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e6c:	movs	r0, #8
    1e6e:	bl	dab0 <random(unsigned long)>
    1e72:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e76:	movs	r0, #8
    1e78:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1e7c:	cmp	r6, #0
    1e7e:	ble.w	1cba <regular_setup()+0xbc2>
    1e82:	add.w	r3, r0, #15
    1e86:	add.w	r4, r4, r4, lsl #1
    1e8a:	movs	r7, #0
    1e8c:	add.w	r4, r3, r4, lsl #3
    1e90:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1e94:	cmp.w	sl, #0
    1e98:	bne.n	1eae <regular_setup()+0xdb6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1e9a:	ldr	r3, [r5, #0]
    1e9c:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1e9e:	adds	r7, #1
    1ea0:	adds	r4, #4
    1ea2:	cmp	r7, r6
    1ea4:	beq.w	1cba <regular_setup()+0xbc2>
      if (rand){
    1ea8:	cmp.w	sl, #0
    1eac:	beq.n	1e9a <regular_setup()+0xda2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1eae:	ldr	r3, [r5, #20]
    1eb0:	ldr	r2, [r5, #16]
    1eb2:	subs	r0, r3, r2
    1eb4:	adds	r0, #2
    1eb6:	bl	dab0 <random(unsigned long)>
    1eba:	ldr	r3, [r5, #16]
    1ebc:	subs	r3, #1
    1ebe:	add	r0, r3
    1ec0:	str	r0, [r4, #0]
    1ec2:	b.n	1e9e <regular_setup()+0xda6>
    1ec4:	add.w	r7, r5, #2304	; 0x900
    1ec8:	add.w	r6, r5, #28
    1ecc:	mov	r4, r5
    1ece:	mov	r8, r7
    1ed0:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1ed2:	cmp	r7, #0
    1ed4:	bne.w	27ec <regular_setup()+0x16f4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ed8:	ldr	r3, [r5, #0]
    1eda:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1edc:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1ee0:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1ee2:	str	r3, [r4, #120]	; 0x78
    1ee4:	adds	r4, #96	; 0x60
    1ee6:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1ee8:	cmp	r4, r8
    1eea:	bne.n	1ed2 <regular_setup()+0xdda>
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
    1eec:	ldr	r3, [pc, #224]	; (1fd0 <regular_setup()+0xed8>)
    1eee:	movs	r1, #4
    1ef0:	movs	r0, #0
    1ef2:	ldr.w	r5, [r3, #440]	; 0x1b8
    1ef6:	bl	dab8 <random(long, long)>
    1efa:	ldr	r3, [pc, #212]	; (1fd0 <regular_setup()+0xed8>)
    1efc:	add.w	r0, r0, r0, lsl #1
    1f00:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1f04:	ldr.w	r2, [r3, #372]	; 0x174
    1f08:	add.w	r3, r3, #372	; 0x174
    1f0c:	subs	r2, #1
    1f0e:	ldr	r4, [r3, #4]
    1f10:	ldrb.w	sl, [r3, #8]
    1f14:	cmp	r2, #4
    1f16:	bhi.w	2aec <regular_setup()+0x19f4>
    1f1a:	tbh	[pc, r2, lsl #1]
    1f1e:	.short	0x01e2
    1f20:	.word	0x015201a6
    1f24:	.word	0x00f20124
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f28:	movs	r0, #8
    1f2a:	mov	r7, r5
    1f2c:	bl	dab0 <random(unsigned long)>
    1f30:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f32:	movs	r0, #8
    1f34:	add.w	fp, r5, #96	; 0x60
    1f38:	bl	dab0 <random(unsigned long)>
    1f3c:	vmov	s15, r4
    1f40:	adds	r6, #8
    1f42:	add.w	r3, r0, #8
    1f46:	vcvt.f64.s32	d9, s15
    1f4a:	rsb	r9, r0, #16
    1f4e:	negs	r3, r3
    1f50:	rsb	r8, r6, #0
    1f54:	str	r3, [sp, #4]
    1f56:	vmov	s15, r8
    1f5a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1f5c:	mov	r6, r7
    1f5e:	vcvt.f64.s32	d8, s15
    1f62:	vmul.f64	d8, d8, d8
    1f66:	b.n	1f74 <regular_setup()+0xe7c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1f68:	ldr	r3, [r5, #0]
    1f6a:	str	r3, [r6, #28]
    1f6c:	adds	r4, #1
    1f6e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f70:	cmp	r4, r9
    1f72:	beq.n	1fc4 <regular_setup()+0xecc>
      double xx = x-midPoint_y;
    1f74:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1f78:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1f7c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1f80:	vfma.f64	d0, d7, d7
    1f84:	vsqrt.f64	d7, d0
    1f88:	vcmp.f64	d7, d7
    1f8c:	vmrs	APSR_nzcv, fpscr
    1f90:	bne.w	2c4c <regular_setup()+0x1b54>
    1f94:	vcmpe.f64	d7, d9
    1f98:	vmrs	APSR_nzcv, fpscr
    1f9c:	bhi.n	1f6c <regular_setup()+0xe74>
        if (rand){
    1f9e:	cmp.w	sl, #0
    1fa2:	beq.n	1f68 <regular_setup()+0xe70>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fa4:	ldr	r3, [r5, #20]
    1fa6:	adds	r4, #1
    1fa8:	ldr	r0, [r5, #16]
    1faa:	adds	r6, #96	; 0x60
    1fac:	subs	r0, r3, r0
    1fae:	adds	r0, #2
    1fb0:	bl	dab0 <random(unsigned long)>
    1fb4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fb6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1fb8:	add.w	r3, r3, #4294967295
    1fbc:	add	r0, r3
    1fbe:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fc2:	bne.n	1f74 <regular_setup()+0xe7c>
    1fc4:	adds	r7, #4
    1fc6:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1fca:	cmp	r7, fp
    1fcc:	bne.n	1f56 <regular_setup()+0xe5e>
    1fce:	b.n	1eec <regular_setup()+0xdf4>
    1fd0:	.word	0x20005268
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fd4:	movs	r0, #8
    1fd6:	bl	dab0 <random(unsigned long)>
    1fda:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fde:	movs	r0, #8
    1fe0:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fe4:	cmp	r4, #0
    1fe6:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1fe8:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fec:	it	lt
    1fee:	addlt	r3, r4, #1
    1ff0:	cmp	r4, #0
    1ff2:	mov.w	fp, r3, asr #1
    1ff6:	it	lt
    1ff8:	addlt	r4, #1
    1ffa:	rsb	fp, fp, #0
    1ffe:	asrs	r4, r4, #1
    2000:	add.w	r7, r0, fp
    2004:	adds	r3, r4, r0
    2006:	cmp	r3, r7
    2008:	str	r3, [sp, #4]
    200a:	ble.w	1eec <regular_setup()+0xdf4>
    200e:	add	fp, r6
    2010:	add.w	r9, r4, r6
    2014:	add.w	r6, fp, fp, lsl #1
    2018:	add.w	r6, r7, r6, lsl #3
    201c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2020:	cmp	r9, fp
    2022:	ble.n	2040 <regular_setup()+0xf48>
    2024:	mov	r8, r6
    2026:	mov	r4, fp
        if (rand){
    2028:	cmp.w	sl, #0
    202c:	bne.w	25c8 <regular_setup()+0x14d0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2030:	ldr	r3, [r5, #0]
    2032:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2036:	adds	r4, #1
    2038:	add.w	r8, r8, #96	; 0x60
    203c:	cmp	r4, r9
    203e:	bne.n	2028 <regular_setup()+0xf30>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2040:	adds	r7, #1
    2042:	ldr	r3, [sp, #4]
    2044:	adds	r6, #4
    2046:	cmp	r3, r7
    2048:	bne.n	2020 <regular_setup()+0xf28>
    204a:	b.n	1eec <regular_setup()+0xdf4>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    204c:	movs	r0, #8
    204e:	bl	dab0 <random(unsigned long)>
    2052:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2056:	movs	r0, #8
    2058:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    205c:	cmp	r4, #0
    205e:	ble.w	1eec <regular_setup()+0xdf4>
    2062:	add.w	r6, r6, r6, lsl #1
    2066:	add.w	r3, r0, #15
    206a:	mov	r8, r4
    206c:	mov	r4, sl
    206e:	add.w	r6, r3, r6, lsl #3
    2072:	movs	r7, #0
    2074:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2078:	cbnz	r4, 208c <regular_setup()+0xf94>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    207a:	ldr	r3, [r5, #0]
    207c:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    207e:	adds	r7, #1
    2080:	adds	r6, #4
    2082:	cmp	r7, r8
    2084:	beq.w	1eec <regular_setup()+0xdf4>
      if (rand){
    2088:	cmp	r4, #0
    208a:	beq.n	207a <regular_setup()+0xf82>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    208c:	ldr	r3, [r5, #20]
    208e:	ldr	r2, [r5, #16]
    2090:	subs	r0, r3, r2
    2092:	adds	r0, #2
    2094:	bl	dab0 <random(unsigned long)>
    2098:	ldr	r3, [r5, #16]
    209a:	subs	r3, #1
    209c:	add	r0, r3
    209e:	str	r0, [r6, #0]
    20a0:	b.n	207e <regular_setup()+0xf86>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20a2:	cmp	r4, #0
    20a4:	ble.w	1eec <regular_setup()+0xdf4>
    20a8:	mov	r9, r4
    20aa:	movs	r7, #0
    20ac:	mov	r4, sl
    20ae:	b.n	20c4 <regular_setup()+0xfcc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20b0:	add.w	r3, r6, r3, lsl #3
    20b4:	ldr	r2, [r5, #0]
    20b6:	add.w	r3, r5, r3, lsl #2
    20ba:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    20bc:	adds	r7, #1
    20be:	cmp	r7, r9
    20c0:	beq.w	1eec <regular_setup()+0xdf4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20c4:	movs	r0, #8
    20c6:	bl	dab0 <random(unsigned long)>
    20ca:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    20ce:	movs	r0, #8
    20d0:	bl	dab0 <random(unsigned long)>
    20d4:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    20d8:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    20dc:	cmp	r4, #0
    20de:	beq.n	20b0 <regular_setup()+0xfb8>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20e0:	ldr	r3, [r5, #20]
    20e2:	add.w	r8, r8, r8, lsl #1
    20e6:	ldr	r2, [r5, #16]
    20e8:	add.w	r6, r6, r8, lsl #3
    20ec:	subs	r0, r3, r2
    20ee:	add.w	r6, r5, r6, lsl #2
    20f2:	adds	r0, #2
    20f4:	bl	dab0 <random(unsigned long)>
    20f8:	ldr	r3, [r5, #16]
    20fa:	subs	r3, #1
    20fc:	add	r0, r3
    20fe:	str	r0, [r6, #28]
    2100:	b.n	20bc <regular_setup()+0xfc4>
    2102:	add.w	r7, r5, #2304	; 0x900
    2106:	add.w	r6, r5, #28
    210a:	mov	r4, r5
    210c:	mov	r8, r7
    210e:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2110:	cmp	r7, #0
    2112:	bne.w	2750 <regular_setup()+0x1658>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    2116:	ldr	r3, [r5, #0]
    2118:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    211a:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    211e:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2120:	str	r3, [r4, #120]	; 0x78
    2122:	adds	r4, #96	; 0x60
    2124:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    2126:	cmp	r4, r8
    2128:	bne.n	2110 <regular_setup()+0x1018>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[random(0, 4)]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 4)]);
    212a:	ldr	r3, [pc, #812]	; (2458 <regular_setup()+0x1360>)
    212c:	movs	r1, #4
    212e:	movs	r0, #0
    2130:	ldr.w	r5, [r3, #444]	; 0x1bc
    2134:	bl	dab8 <random(long, long)>
    2138:	ldr	r3, [pc, #796]	; (2458 <regular_setup()+0x1360>)
    213a:	add.w	r0, r0, r0, lsl #1
    213e:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    2142:	ldr.w	r2, [r3, #372]	; 0x174
    2146:	add.w	r3, r3, #372	; 0x174
    214a:	subs	r2, #1
    214c:	ldr	r4, [r3, #4]
    214e:	ldrb.w	fp, [r3, #8]
    2152:	cmp	r2, #4
    2154:	bhi.w	2a84 <regular_setup()+0x198c>
    2158:	tbh	[pc, r2, lsl #1]
    215c:	.word	0x01b801f3
    2160:	.word	0x01270157
    2164:	.short	0x00ee
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2166:	cmp	r4, #0
    2168:	ble.n	212a <regular_setup()+0x1032>
    216a:	mov	r9, r4
    216c:	movs	r7, #0
    216e:	mov	r4, sl
    2170:	b.n	2184 <regular_setup()+0x108c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2172:	add.w	r3, r6, r3, lsl #3
    2176:	ldr	r2, [r5, #0]
    2178:	add.w	r3, r5, r3, lsl #2
    217c:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    217e:	adds	r7, #1
    2180:	cmp	r7, r9
    2182:	beq.n	212a <regular_setup()+0x1032>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2184:	movs	r0, #8
    2186:	bl	dab0 <random(unsigned long)>
    218a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    218e:	movs	r0, #8
    2190:	bl	dab0 <random(unsigned long)>
    2194:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2198:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    219c:	cmp	r4, #0
    219e:	beq.n	2172 <regular_setup()+0x107a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21a0:	ldr	r3, [r5, #20]
    21a2:	add.w	r8, r8, r8, lsl #1
    21a6:	ldr	r2, [r5, #16]
    21a8:	add.w	r6, r6, r8, lsl #3
    21ac:	subs	r0, r3, r2
    21ae:	add.w	r6, r5, r6, lsl #2
    21b2:	adds	r0, #2
    21b4:	bl	dab0 <random(unsigned long)>
    21b8:	ldr	r3, [r5, #16]
    21ba:	subs	r3, #1
    21bc:	add	r0, r3
    21be:	str	r0, [r6, #28]
    21c0:	b.n	217e <regular_setup()+0x1086>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21c2:	movs	r0, #8
    21c4:	mov	r7, r5
    21c6:	bl	dab0 <random(unsigned long)>
    21ca:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    21cc:	movs	r0, #8
    21ce:	add.w	fp, r5, #96	; 0x60
    21d2:	bl	dab0 <random(unsigned long)>
    21d6:	vmov	s15, r4
    21da:	adds	r6, #8
    21dc:	add.w	r3, r0, #8
    21e0:	vcvt.f64.s32	d9, s15
    21e4:	rsb	r9, r0, #16
    21e8:	negs	r3, r3
    21ea:	rsb	r8, r6, #0
    21ee:	str	r3, [sp, #4]
    21f0:	vmov	s15, r8
    21f4:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    21f6:	mov	r6, r7
    21f8:	vcvt.f64.s32	d8, s15
    21fc:	vmul.f64	d8, d8, d8
    2200:	b.n	220e <regular_setup()+0x1116>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2202:	ldr	r3, [r5, #0]
    2204:	str	r3, [r6, #28]
    2206:	adds	r4, #1
    2208:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    220a:	cmp	r9, r4
    220c:	beq.n	225e <regular_setup()+0x1166>
      double xx = x-midPoint_y;
    220e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2212:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2216:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    221a:	vfma.f64	d0, d7, d7
    221e:	vsqrt.f64	d7, d0
    2222:	vcmp.f64	d7, d7
    2226:	vmrs	APSR_nzcv, fpscr
    222a:	bne.w	2c40 <regular_setup()+0x1b48>
    222e:	vcmpe.f64	d7, d9
    2232:	vmrs	APSR_nzcv, fpscr
    2236:	bhi.n	2206 <regular_setup()+0x110e>
        if (rand){
    2238:	cmp.w	sl, #0
    223c:	beq.n	2202 <regular_setup()+0x110a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    223e:	ldr	r3, [r5, #20]
    2240:	adds	r4, #1
    2242:	ldr	r0, [r5, #16]
    2244:	adds	r6, #96	; 0x60
    2246:	subs	r0, r3, r0
    2248:	adds	r0, #2
    224a:	bl	dab0 <random(unsigned long)>
    224e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2250:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2252:	add.w	r3, r3, #4294967295
    2256:	add	r0, r3
    2258:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    225c:	bne.n	220e <regular_setup()+0x1116>
    225e:	adds	r7, #4
    2260:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2264:	cmp	fp, r7
    2266:	bne.n	21f0 <regular_setup()+0x10f8>
    2268:	b.n	212a <regular_setup()+0x1032>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    226a:	movs	r0, #8
    226c:	bl	dab0 <random(unsigned long)>
    2270:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2274:	movs	r0, #8
    2276:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    227a:	cmp	r4, #0
    227c:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    227e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2282:	it	lt
    2284:	addlt	r3, r4, #1
    2286:	cmp	r4, #0
    2288:	mov.w	fp, r3, asr #1
    228c:	it	lt
    228e:	addlt	r4, #1
    2290:	rsb	fp, fp, #0
    2294:	asrs	r4, r4, #1
    2296:	add.w	r7, r0, fp
    229a:	adds	r3, r4, r0
    229c:	cmp	r7, r3
    229e:	str	r3, [sp, #4]
    22a0:	bge.w	212a <regular_setup()+0x1032>
    22a4:	add	fp, r6
    22a6:	add.w	r9, r4, r6
    22aa:	add.w	r6, fp, fp, lsl #1
    22ae:	add.w	r6, r7, r6, lsl #3
    22b2:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22b6:	cmp	fp, r9
    22b8:	bge.n	22d6 <regular_setup()+0x11de>
    22ba:	mov	r8, r6
    22bc:	mov	r4, fp
        if (rand){
    22be:	cmp.w	sl, #0
    22c2:	bne.w	25b0 <regular_setup()+0x14b8>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    22c6:	ldr	r3, [r5, #0]
    22c8:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    22cc:	adds	r4, #1
    22ce:	add.w	r8, r8, #96	; 0x60
    22d2:	cmp	r4, r9
    22d4:	bne.n	22be <regular_setup()+0x11c6>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    22d6:	adds	r7, #1
    22d8:	ldr	r3, [sp, #4]
    22da:	adds	r6, #4
    22dc:	cmp	r7, r3
    22de:	bne.n	22b6 <regular_setup()+0x11be>
    22e0:	b.n	212a <regular_setup()+0x1032>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22e2:	movs	r0, #8
    22e4:	bl	dab0 <random(unsigned long)>
    22e8:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22ec:	movs	r0, #8
    22ee:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    22f2:	cmp	r4, #0
    22f4:	ble.w	212a <regular_setup()+0x1032>
    22f8:	add.w	r3, r0, #15
    22fc:	add.w	r6, r6, r6, lsl #1
    2300:	mov	r8, r4
    2302:	mov	r4, sl
    2304:	add.w	r6, r3, r6, lsl #3
    2308:	movs	r7, #0
    230a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    230e:	cbnz	r4, 2322 <regular_setup()+0x122a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2310:	ldr	r3, [r5, #0]
    2312:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2314:	adds	r7, #1
    2316:	adds	r6, #4
    2318:	cmp	r7, r8
    231a:	beq.w	212a <regular_setup()+0x1032>
      if (rand){
    231e:	cmp	r4, #0
    2320:	beq.n	2310 <regular_setup()+0x1218>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2322:	ldr	r3, [r5, #20]
    2324:	ldr	r2, [r5, #16]
    2326:	subs	r0, r3, r2
    2328:	adds	r0, #2
    232a:	bl	dab0 <random(unsigned long)>
    232e:	ldr	r3, [r5, #16]
    2330:	subs	r3, #1
    2332:	add	r0, r3
    2334:	str	r0, [r6, #0]
    2336:	b.n	2314 <regular_setup()+0x121c>
    2338:	add.w	r7, r5, #2304	; 0x900
    233c:	add.w	r6, r5, #28
    2340:	mov	r4, r5
    2342:	mov	r8, r7
    2344:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2346:	cmp	r7, #0
    2348:	bne.w	279e <regular_setup()+0x16a6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    234c:	ldr	r3, [r5, #0]
    234e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2350:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2354:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2356:	str	r3, [r4, #120]	; 0x78
    2358:	adds	r4, #96	; 0x60
    235a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    235c:	cmp	r4, r8
    235e:	bne.n	2346 <regular_setup()+0x124e>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2360:	ldr	r3, [pc, #248]	; (245c <regular_setup()+0x1364>)
    2362:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2364:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2366:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2368:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    236a:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    236c:	cmp	r3, r1
    236e:	it	eq
    2370:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2372:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2374:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2376:	ite	eq
    2378:	moveq	r5, #1
    237a:	movne	r5, #0
    237c:	cmp	r5, #0
    237e:	beq.n	2368 <regular_setup()+0x1270>
    2380:	lsrs	r1, r3, #5
    2382:	ldr	r3, [pc, #220]	; (2460 <regular_setup()+0x1368>)
    2384:	orr.w	r1, r1, r2, lsl #27
    2388:	vmov	s15, r1
    238c:	vldr	d5, [pc, #192]	; 2450 <regular_setup()+0x1358>
    2390:	vcvt.f64.u32	d7, s15
    2394:	vdiv.f64	d6, d7, d5
    2398:	vcvt.u32.f64	s12, d6
    239c:	vstr	s12, [r3]
  screen_A.init_screen();
  screen_B.init_screen();
  sinceAutomatonInit = 0;
}
    23a0:	add	sp, #12
    23a2:	vpop	{d8-d9}
    23a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23aa:	cmp	r4, #0
    23ac:	ble.n	2360 <regular_setup()+0x1268>
    23ae:	mov	r9, r4
    23b0:	mov.w	r8, #0
    23b4:	mov	r4, fp
    23b6:	b.n	23cc <regular_setup()+0x12d4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23b8:	add.w	r3, r6, r3, lsl #3
    23bc:	ldr	r2, [r5, #0]
    23be:	add.w	r3, r5, r3, lsl #2
    23c2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23c4:	add.w	r8, r8, #1
    23c8:	cmp	r8, r9
    23ca:	beq.n	2360 <regular_setup()+0x1268>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23cc:	movs	r0, #8
    23ce:	bl	dab0 <random(unsigned long)>
    23d2:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23d6:	movs	r0, #8
    23d8:	bl	dab0 <random(unsigned long)>
    23dc:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23e0:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    23e4:	cmp	r4, #0
    23e6:	beq.n	23b8 <regular_setup()+0x12c0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    23e8:	ldr	r3, [r5, #20]
    23ea:	add.w	r7, r7, r7, lsl #1
    23ee:	ldr	r2, [r5, #16]
    23f0:	add.w	r6, r6, r7, lsl #3
    23f4:	subs	r0, r3, r2
    23f6:	add.w	r6, r5, r6, lsl #2
    23fa:	adds	r0, #2
    23fc:	bl	dab0 <random(unsigned long)>
    2400:	ldr	r3, [r5, #16]
    2402:	subs	r3, #1
    2404:	add	r0, r3
    2406:	str	r0, [r6, #28]
    2408:	b.n	23c4 <regular_setup()+0x12cc>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    240a:	movs	r0, #8
    240c:	mov	r7, r5
    240e:	bl	dab0 <random(unsigned long)>
    2412:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2414:	movs	r0, #8
    2416:	add.w	r9, r5, #96	; 0x60
    241a:	bl	dab0 <random(unsigned long)>
    241e:	vmov	s15, r4
    2422:	adds	r6, #8
    2424:	add.w	r3, r0, #8
    2428:	vcvt.f64.s32	d9, s15
    242c:	rsb	sl, r0, #16
    2430:	negs	r3, r3
    2432:	rsb	r8, r6, #0
    2436:	str	r3, [sp, #4]
    2438:	vmov	s15, r8
    243c:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    243e:	mov	r6, r7
    2440:	vcvt.f64.s32	d8, s15
    2444:	vmul.f64	d8, d8, d8
    2448:	b.n	2470 <regular_setup()+0x1378>
    244a:	nop
    244c:	nop.w
    2450:	.word	0xd2f1a9fc
    2454:	.word	0x3ff0624d
    2458:	.word	0x20005268
    245c:	.word	0x400d4000
    2460:	.word	0x20007a60
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2464:	ldr	r3, [r5, #0]
    2466:	str	r3, [r6, #28]
    2468:	adds	r4, #1
    246a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    246c:	cmp	sl, r4
    246e:	beq.n	24c0 <regular_setup()+0x13c8>
      double xx = x-midPoint_y;
    2470:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2474:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2478:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    247c:	vfma.f64	d0, d7, d7
    2480:	vsqrt.f64	d7, d0
    2484:	vcmp.f64	d7, d7
    2488:	vmrs	APSR_nzcv, fpscr
    248c:	bne.w	2c36 <regular_setup()+0x1b3e>
    2490:	vcmpe.f64	d7, d9
    2494:	vmrs	APSR_nzcv, fpscr
    2498:	bhi.n	2468 <regular_setup()+0x1370>
        if (rand){
    249a:	cmp.w	fp, #0
    249e:	beq.n	2464 <regular_setup()+0x136c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24a0:	ldr	r3, [r5, #20]
    24a2:	adds	r4, #1
    24a4:	ldr	r0, [r5, #16]
    24a6:	adds	r6, #96	; 0x60
    24a8:	subs	r0, r3, r0
    24aa:	adds	r0, #2
    24ac:	bl	dab0 <random(unsigned long)>
    24b0:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24b2:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24b4:	add.w	r3, r3, #4294967295
    24b8:	add	r0, r3
    24ba:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    24be:	bne.n	2470 <regular_setup()+0x1378>
    24c0:	adds	r7, #4
    24c2:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    24c6:	cmp	r9, r7
    24c8:	bne.n	2438 <regular_setup()+0x1340>
    24ca:	b.n	2360 <regular_setup()+0x1268>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24cc:	movs	r0, #8
    24ce:	bl	dab0 <random(unsigned long)>
    24d2:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24d6:	movs	r0, #8
    24d8:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24dc:	cmp	r4, #0
    24de:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24e0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    24e4:	it	lt
    24e6:	addlt	r3, r4, #1
    24e8:	cmp	r4, #0
    24ea:	mov.w	r8, r3, asr #1
    24ee:	it	lt
    24f0:	addlt	r4, #1
    24f2:	rsb	r8, r8, #0
    24f6:	asrs	r4, r4, #1
    24f8:	add.w	r7, r0, r8
    24fc:	adds	r3, r4, r0
    24fe:	cmp	r7, r3
    2500:	str	r3, [sp, #4]
    2502:	bge.w	2360 <regular_setup()+0x1268>
    2506:	add	r8, r6
    2508:	add.w	sl, r4, r6
    250c:	add.w	r6, r8, r8, lsl #1
    2510:	add.w	r6, r7, r6, lsl #3
    2514:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2518:	cmp	sl, r8
    251a:	ble.n	2536 <regular_setup()+0x143e>
    251c:	mov	r9, r6
    251e:	mov	r4, r8
        if (rand){
    2520:	cmp.w	fp, #0
    2524:	bne.n	2598 <regular_setup()+0x14a0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2526:	ldr	r3, [r5, #0]
    2528:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    252c:	adds	r4, #1
    252e:	add.w	r9, r9, #96	; 0x60
    2532:	cmp	r4, sl
    2534:	bne.n	2520 <regular_setup()+0x1428>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2536:	adds	r7, #1
    2538:	ldr	r3, [sp, #4]
    253a:	adds	r6, #4
    253c:	cmp	r7, r3
    253e:	bne.n	2518 <regular_setup()+0x1420>
    2540:	b.n	2360 <regular_setup()+0x1268>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2542:	movs	r0, #8
    2544:	bl	dab0 <random(unsigned long)>
    2548:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    254c:	movs	r0, #8
    254e:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2552:	cmp	r4, #0
    2554:	ble.w	2360 <regular_setup()+0x1268>
    2558:	add.w	r6, r6, r6, lsl #1
    255c:	add.w	r3, r0, #15
    2560:	mov	r8, r4
    2562:	mov	r4, fp
    2564:	add.w	r6, r3, r6, lsl #3
    2568:	movs	r7, #0
    256a:	add.w	r6, r5, r6, lsl #2
      if (rand){
    256e:	cbnz	r4, 2582 <regular_setup()+0x148a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2570:	ldr	r3, [r5, #0]
    2572:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2574:	adds	r7, #1
    2576:	adds	r6, #4
    2578:	cmp	r7, r8
    257a:	beq.w	2360 <regular_setup()+0x1268>
      if (rand){
    257e:	cmp	r4, #0
    2580:	beq.n	2570 <regular_setup()+0x1478>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2582:	ldr	r3, [r5, #20]
    2584:	ldr	r2, [r5, #16]
    2586:	subs	r0, r3, r2
    2588:	adds	r0, #2
    258a:	bl	dab0 <random(unsigned long)>
    258e:	ldr	r3, [r5, #16]
    2590:	subs	r3, #1
    2592:	add	r0, r3
    2594:	str	r0, [r6, #0]
    2596:	b.n	2574 <regular_setup()+0x147c>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2598:	ldr	r3, [r5, #20]
    259a:	ldr	r0, [r5, #16]
    259c:	subs	r0, r3, r0
    259e:	adds	r0, #2
    25a0:	bl	dab0 <random(unsigned long)>
    25a4:	ldr	r3, [r5, #16]
    25a6:	subs	r3, #1
    25a8:	add	r0, r3
    25aa:	str.w	r0, [r9, #28]
    25ae:	b.n	252c <regular_setup()+0x1434>
    25b0:	ldr	r3, [r5, #20]
    25b2:	ldr	r0, [r5, #16]
    25b4:	subs	r0, r3, r0
    25b6:	adds	r0, #2
    25b8:	bl	dab0 <random(unsigned long)>
    25bc:	ldr	r3, [r5, #16]
    25be:	subs	r3, #1
    25c0:	add	r0, r3
    25c2:	str.w	r0, [r8, #28]
    25c6:	b.n	22cc <regular_setup()+0x11d4>
    25c8:	ldr	r3, [r5, #20]
    25ca:	ldr	r0, [r5, #16]
    25cc:	subs	r0, r3, r0
    25ce:	adds	r0, #2
    25d0:	bl	dab0 <random(unsigned long)>
    25d4:	ldr	r3, [r5, #16]
    25d6:	subs	r3, #1
    25d8:	add	r0, r3
    25da:	str.w	r0, [r8, #28]
    25de:	b.n	2036 <regular_setup()+0xf3e>
    25e0:	ldr	r3, [r5, #20]
    25e2:	ldr	r0, [r5, #16]
    25e4:	subs	r0, r3, r0
    25e6:	adds	r0, #2
    25e8:	bl	dab0 <random(unsigned long)>
    25ec:	ldr	r3, [r5, #16]
    25ee:	subs	r3, #1
    25f0:	add	r0, r3
    25f2:	str.w	r0, [r9, #28]
    25f6:	b.n	1e54 <regular_setup()+0xd5c>
    25f8:	ldr	r3, [r5, #20]
    25fa:	ldr	r0, [r5, #16]
    25fc:	subs	r0, r3, r0
    25fe:	adds	r0, #2
    2600:	bl	dab0 <random(unsigned long)>
    2604:	ldr	r3, [r5, #16]
    2606:	subs	r3, #1
    2608:	add	r0, r3
    260a:	str.w	r0, [r9, #28]
    260e:	b.w	1c22 <regular_setup()+0xb2a>
    2612:	ldr	r3, [r5, #20]
    2614:	ldr	r0, [r5, #16]
    2616:	subs	r0, r3, r0
    2618:	adds	r0, #2
    261a:	bl	dab0 <random(unsigned long)>
    261e:	ldr	r3, [r5, #16]
    2620:	subs	r3, #1
    2622:	add	r0, r3
    2624:	str.w	r0, [r9, #28]
    2628:	b.w	160a <regular_setup()+0x512>
    262c:	ldr	r3, [r5, #20]
    262e:	ldr	r0, [r5, #16]
    2630:	subs	r0, r3, r0
    2632:	adds	r0, #2
    2634:	bl	dab0 <random(unsigned long)>
    2638:	ldr	r3, [r5, #16]
    263a:	subs	r3, #1
    263c:	add	r0, r3
    263e:	str.w	r0, [r9, #28]
    2642:	b.w	18b4 <regular_setup()+0x7bc>
    2646:	ldr	r3, [r5, #20]
    2648:	ldr	r0, [r5, #16]
    264a:	subs	r0, r3, r0
    264c:	adds	r0, #2
    264e:	bl	dab0 <random(unsigned long)>
    2652:	ldr	r3, [r5, #16]
    2654:	subs	r3, #1
    2656:	add	r0, r3
    2658:	str.w	r0, [r9, #28]
    265c:	b.w	1372 <regular_setup()+0x27a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2660:	ldr	r3, [r5, #20]
    2662:	ldr	r2, [r5, #16]
    2664:	subs	r0, r3, r2
    2666:	adds	r0, #2
    2668:	bl	dab0 <random(unsigned long)>
    266c:	ldr	r1, [r5, #16]
    266e:	subs	r2, r1, #1
    2670:	add	r0, r2
    2672:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2674:	ldr	r3, [r5, #20]
    2676:	subs	r0, r3, r1
    2678:	adds	r0, #2
    267a:	bl	dab0 <random(unsigned long)>
    267e:	ldr	r1, [r5, #16]
    2680:	subs	r2, r1, #1
    2682:	add	r0, r2
    2684:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2688:	ldr	r3, [r5, #20]
    268a:	subs	r0, r3, r1
    268c:	adds	r0, #2
    268e:	bl	dab0 <random(unsigned long)>
    2692:	ldr	r1, [r5, #16]
    2694:	subs	r2, r1, #1
    2696:	add	r0, r2
    2698:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    269a:	ldr	r3, [r5, #20]
    269c:	subs	r0, r3, r1
    269e:	adds	r0, #2
    26a0:	bl	dab0 <random(unsigned long)>
    26a4:	ldr	r3, [r5, #16]
    26a6:	subs	r3, #1
    26a8:	add	r0, r3
    26aa:	str	r0, [r4, #120]	; 0x78
    26ac:	b.w	128c <regular_setup()+0x194>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26b0:	ldr	r3, [r5, #20]
    26b2:	ldr	r2, [r5, #16]
    26b4:	subs	r0, r3, r2
    26b6:	adds	r0, #2
    26b8:	bl	dab0 <random(unsigned long)>
    26bc:	ldr	r1, [r5, #16]
    26be:	subs	r2, r1, #1
    26c0:	add	r0, r2
    26c2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26c4:	ldr	r3, [r5, #20]
    26c6:	subs	r0, r3, r1
    26c8:	adds	r0, #2
    26ca:	bl	dab0 <random(unsigned long)>
    26ce:	ldr	r1, [r5, #16]
    26d0:	subs	r2, r1, #1
    26d2:	add	r0, r2
    26d4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26d8:	ldr	r3, [r5, #20]
    26da:	subs	r0, r3, r1
    26dc:	adds	r0, #2
    26de:	bl	dab0 <random(unsigned long)>
    26e2:	ldr	r1, [r5, #16]
    26e4:	subs	r2, r1, #1
    26e6:	add	r0, r2
    26e8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    26ea:	ldr	r3, [r5, #20]
    26ec:	subs	r0, r3, r1
    26ee:	adds	r0, #2
    26f0:	bl	dab0 <random(unsigned long)>
    26f4:	ldr	r3, [r5, #16]
    26f6:	subs	r3, #1
    26f8:	add	r0, r3
    26fa:	str	r0, [r4, #120]	; 0x78
    26fc:	b.w	1700 <regular_setup()+0x608>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2700:	ldr	r3, [r5, #20]
    2702:	ldr	r2, [r5, #16]
    2704:	subs	r0, r3, r2
    2706:	adds	r0, #2
    2708:	bl	dab0 <random(unsigned long)>
    270c:	ldr	r1, [r5, #16]
    270e:	subs	r2, r1, #1
    2710:	add	r0, r2
    2712:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2714:	ldr	r3, [r5, #20]
    2716:	subs	r0, r3, r1
    2718:	adds	r0, #2
    271a:	bl	dab0 <random(unsigned long)>
    271e:	ldr	r1, [r5, #16]
    2720:	subs	r2, r1, #1
    2722:	add	r0, r2
    2724:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2728:	ldr	r3, [r5, #20]
    272a:	subs	r0, r3, r1
    272c:	adds	r0, #2
    272e:	bl	dab0 <random(unsigned long)>
    2732:	ldr	r1, [r5, #16]
    2734:	subs	r2, r1, #1
    2736:	add	r0, r2
    2738:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    273a:	ldr	r3, [r5, #20]
    273c:	subs	r0, r3, r1
    273e:	adds	r0, #2
    2740:	bl	dab0 <random(unsigned long)>
    2744:	ldr	r3, [r5, #16]
    2746:	subs	r3, #1
    2748:	add	r0, r3
    274a:	str	r0, [r4, #120]	; 0x78
    274c:	b.w	14be <regular_setup()+0x3c6>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2750:	ldr	r3, [r5, #20]
    2752:	ldr	r2, [r5, #16]
    2754:	subs	r0, r3, r2
    2756:	adds	r0, #2
    2758:	bl	dab0 <random(unsigned long)>
    275c:	ldr	r1, [r5, #16]
    275e:	subs	r2, r1, #1
    2760:	add	r0, r2
    2762:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2764:	ldr	r3, [r5, #20]
    2766:	subs	r0, r3, r1
    2768:	adds	r0, #2
    276a:	bl	dab0 <random(unsigned long)>
    276e:	ldr	r1, [r5, #16]
    2770:	subs	r2, r1, #1
    2772:	add	r0, r2
    2774:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2778:	ldr	r3, [r5, #20]
    277a:	subs	r0, r3, r1
    277c:	adds	r0, #2
    277e:	bl	dab0 <random(unsigned long)>
    2782:	ldr	r1, [r5, #16]
    2784:	subs	r2, r1, #1
    2786:	add	r0, r2
    2788:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    278a:	ldr	r3, [r5, #20]
    278c:	subs	r0, r3, r1
    278e:	adds	r0, #2
    2790:	bl	dab0 <random(unsigned long)>
    2794:	ldr	r3, [r5, #16]
    2796:	subs	r3, #1
    2798:	add	r0, r3
    279a:	str	r0, [r4, #120]	; 0x78
    279c:	b.n	2122 <regular_setup()+0x102a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    279e:	ldr	r3, [r5, #20]
    27a0:	ldr	r2, [r5, #16]
    27a2:	subs	r0, r3, r2
    27a4:	adds	r0, #2
    27a6:	bl	dab0 <random(unsigned long)>
    27aa:	ldr	r1, [r5, #16]
    27ac:	subs	r2, r1, #1
    27ae:	add	r0, r2
    27b0:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27b2:	ldr	r3, [r5, #20]
    27b4:	subs	r0, r3, r1
    27b6:	adds	r0, #2
    27b8:	bl	dab0 <random(unsigned long)>
    27bc:	ldr	r1, [r5, #16]
    27be:	subs	r2, r1, #1
    27c0:	add	r0, r2
    27c2:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27c6:	ldr	r3, [r5, #20]
    27c8:	subs	r0, r3, r1
    27ca:	adds	r0, #2
    27cc:	bl	dab0 <random(unsigned long)>
    27d0:	ldr	r1, [r5, #16]
    27d2:	subs	r2, r1, #1
    27d4:	add	r0, r2
    27d6:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27d8:	ldr	r3, [r5, #20]
    27da:	subs	r0, r3, r1
    27dc:	adds	r0, #2
    27de:	bl	dab0 <random(unsigned long)>
    27e2:	ldr	r3, [r5, #16]
    27e4:	subs	r3, #1
    27e6:	add	r0, r3
    27e8:	str	r0, [r4, #120]	; 0x78
    27ea:	b.n	2358 <regular_setup()+0x1260>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    27ec:	ldr	r3, [r5, #20]
    27ee:	ldr	r2, [r5, #16]
    27f0:	subs	r0, r3, r2
    27f2:	adds	r0, #2
    27f4:	bl	dab0 <random(unsigned long)>
    27f8:	ldr	r1, [r5, #16]
    27fa:	subs	r2, r1, #1
    27fc:	add	r0, r2
    27fe:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2800:	ldr	r3, [r5, #20]
    2802:	subs	r0, r3, r1
    2804:	adds	r0, #2
    2806:	bl	dab0 <random(unsigned long)>
    280a:	ldr	r1, [r5, #16]
    280c:	subs	r2, r1, #1
    280e:	add	r0, r2
    2810:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2814:	ldr	r3, [r5, #20]
    2816:	subs	r0, r3, r1
    2818:	adds	r0, #2
    281a:	bl	dab0 <random(unsigned long)>
    281e:	ldr	r1, [r5, #16]
    2820:	subs	r2, r1, #1
    2822:	add	r0, r2
    2824:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2826:	ldr	r3, [r5, #20]
    2828:	subs	r0, r3, r1
    282a:	adds	r0, #2
    282c:	bl	dab0 <random(unsigned long)>
    2830:	ldr	r3, [r5, #16]
    2832:	subs	r3, #1
    2834:	add	r0, r3
    2836:	str	r0, [r4, #120]	; 0x78
    2838:	b.w	1ee4 <regular_setup()+0xdec>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    283c:	ldr	r3, [r5, #20]
    283e:	ldr	r2, [r5, #16]
    2840:	subs	r0, r3, r2
    2842:	adds	r0, #2
    2844:	bl	dab0 <random(unsigned long)>
    2848:	ldr	r1, [r5, #16]
    284a:	subs	r2, r1, #1
    284c:	add	r0, r2
    284e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2850:	ldr	r3, [r5, #20]
    2852:	subs	r0, r3, r1
    2854:	adds	r0, #2
    2856:	bl	dab0 <random(unsigned long)>
    285a:	ldr	r1, [r5, #16]
    285c:	subs	r2, r1, #1
    285e:	add	r0, r2
    2860:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2864:	ldr	r3, [r5, #20]
    2866:	subs	r0, r3, r1
    2868:	adds	r0, #2
    286a:	bl	dab0 <random(unsigned long)>
    286e:	ldr	r1, [r5, #16]
    2870:	subs	r2, r1, #1
    2872:	add	r0, r2
    2874:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2876:	ldr	r3, [r5, #20]
    2878:	subs	r0, r3, r1
    287a:	adds	r0, #2
    287c:	bl	dab0 <random(unsigned long)>
    2880:	ldr	r3, [r5, #16]
    2882:	subs	r3, #1
    2884:	add	r0, r3
    2886:	str	r0, [r4, #120]	; 0x78
    2888:	b.w	1942 <regular_setup()+0x84a>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    288c:	ldr	r3, [r5, #20]
    288e:	ldr	r2, [r5, #16]
    2890:	subs	r0, r3, r2
    2892:	adds	r0, #2
    2894:	bl	dab0 <random(unsigned long)>
    2898:	ldr	r1, [r5, #16]
    289a:	subs	r2, r1, #1
    289c:	add	r0, r2
    289e:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28a0:	ldr	r3, [r5, #20]
    28a2:	subs	r0, r3, r1
    28a4:	adds	r0, #2
    28a6:	bl	dab0 <random(unsigned long)>
    28aa:	ldr	r1, [r5, #16]
    28ac:	subs	r2, r1, #1
    28ae:	add	r0, r2
    28b0:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28b4:	ldr	r3, [r5, #20]
    28b6:	subs	r0, r3, r1
    28b8:	adds	r0, #2
    28ba:	bl	dab0 <random(unsigned long)>
    28be:	ldr	r1, [r5, #16]
    28c0:	subs	r2, r1, #1
    28c2:	add	r0, r2
    28c4:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    28c6:	ldr	r3, [r5, #20]
    28c8:	subs	r0, r3, r1
    28ca:	adds	r0, #2
    28cc:	bl	dab0 <random(unsigned long)>
    28d0:	ldr	r3, [r5, #16]
    28d2:	subs	r3, #1
    28d4:	add	r0, r3
    28d6:	str	r0, [r4, #120]	; 0x78
    28d8:	b.w	1cb2 <regular_setup()+0xbba>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    28dc:	movw	sl, #4636	; 0x121c
    28e0:	add.w	r3, r5, #28
    28e4:	movs	r7, #0
    28e6:	add.w	r9, r5, #4640	; 0x1220
    28ea:	add	sl, r5
    28ec:	str	r3, [sp, #4]
    28ee:	mov.w	r8, r7, lsl #3
    28f2:	ldr	r6, [sp, #4]
    28f4:	movs	r4, #0
    28f6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    28fa:	ldrb	r2, [r5, #24]
      return _background[x][y];
    28fc:	add	r3, r4
    28fe:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2900:	cbnz	r2, 2906 <regular_setup()+0x180e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2902:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2906:	cbnz	r3, 2922 <regular_setup()+0x182a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2908:	adds	r4, #1
    290a:	adds	r6, #4
    290c:	cmp	r4, #24
    290e:	bne.n	28f6 <regular_setup()+0x17fe>
    2910:	ldr	r3, [sp, #4]
    2912:	adds	r7, #24
    2914:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2916:	cmp.w	r7, #576	; 0x240
    291a:	str	r3, [sp, #4]
    291c:	bne.n	28ee <regular_setup()+0x17f6>
    291e:	b.w	1708 <regular_setup()+0x610>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2922:	ldr	r2, [r5, #20]
    2924:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2926:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    292a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    292c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    292e:	adds	r0, #2
    2930:	ldr.w	fp, [r3, r4, lsl #3]
    2934:	bl	dab0 <random(unsigned long)>
    2938:	ldr	r3, [r5, #16]
    293a:	rsb	r3, r3, fp
    293e:	adds	r3, #1
    2940:	subs	r0, r3, r0
    2942:	str	r0, [r6, #0]
    2944:	b.n	2908 <regular_setup()+0x1810>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2946:	movw	sl, #4636	; 0x121c
    294a:	add.w	r3, r5, #28
    294e:	movs	r7, #0
    2950:	add.w	r9, r5, #4640	; 0x1220
    2954:	add	sl, r5
    2956:	str	r3, [sp, #4]
    2958:	mov.w	r8, r7, lsl #3
    295c:	ldr	r6, [sp, #4]
    295e:	movs	r4, #0
    2960:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2964:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2966:	add	r3, r4
    2968:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    296a:	cbnz	r2, 2970 <regular_setup()+0x1878>
      return _background[x][y];
    } else {
      return !_background[x][y];
    296c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2970:	cbnz	r3, 298c <regular_setup()+0x1894>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2972:	adds	r4, #1
    2974:	adds	r6, #4
    2976:	cmp	r4, #24
    2978:	bne.n	2960 <regular_setup()+0x1868>
    297a:	ldr	r3, [sp, #4]
    297c:	adds	r7, #24
    297e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2980:	cmp.w	r7, #576	; 0x240
    2984:	str	r3, [sp, #4]
    2986:	bne.n	2958 <regular_setup()+0x1860>
    2988:	b.w	1294 <regular_setup()+0x19c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    298c:	ldr	r2, [r5, #20]
    298e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2990:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2994:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2996:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2998:	adds	r0, #2
    299a:	ldr.w	fp, [r3, r4, lsl #3]
    299e:	bl	dab0 <random(unsigned long)>
    29a2:	ldr	r3, [r5, #16]
    29a4:	rsb	r3, r3, fp
    29a8:	adds	r3, #1
    29aa:	subs	r0, r3, r0
    29ac:	str	r0, [r6, #0]
    29ae:	b.n	2972 <regular_setup()+0x187a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29b0:	movw	sl, #4636	; 0x121c
    29b4:	add.w	r3, r5, #28
    29b8:	movs	r7, #0
    29ba:	add.w	r9, r5, #4640	; 0x1220
    29be:	add	sl, r5
    29c0:	str	r3, [sp, #4]
    29c2:	mov.w	r8, r7, lsl #3
    29c6:	ldr	r6, [sp, #4]
    29c8:	movs	r4, #0
    29ca:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29ce:	ldrb	r2, [r5, #24]
      return _background[x][y];
    29d0:	add	r3, r4
    29d2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    29d4:	cbnz	r2, 29da <regular_setup()+0x18e2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    29d6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    29da:	cbnz	r3, 29f6 <regular_setup()+0x18fe>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    29dc:	adds	r4, #1
    29de:	adds	r6, #4
    29e0:	cmp	r4, #24
    29e2:	bne.n	29ca <regular_setup()+0x18d2>
    29e4:	ldr	r3, [sp, #4]
    29e6:	adds	r7, #24
    29e8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    29ea:	cmp.w	r7, #576	; 0x240
    29ee:	str	r3, [sp, #4]
    29f0:	bne.n	29c2 <regular_setup()+0x18ca>
    29f2:	b.w	1eec <regular_setup()+0xdf4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29f6:	ldr	r2, [r5, #20]
    29f8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    29fa:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    29fe:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a00:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a02:	adds	r0, #2
    2a04:	ldr.w	fp, [r3, r4, lsl #3]
    2a08:	bl	dab0 <random(unsigned long)>
    2a0c:	ldr	r3, [r5, #16]
    2a0e:	rsb	r3, r3, fp
    2a12:	adds	r3, #1
    2a14:	subs	r0, r3, r0
    2a16:	str	r0, [r6, #0]
    2a18:	b.n	29dc <regular_setup()+0x18e4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a1a:	movw	sl, #4636	; 0x121c
    2a1e:	add.w	r3, r5, #28
    2a22:	movs	r7, #0
    2a24:	add.w	r9, r5, #4640	; 0x1220
    2a28:	add	sl, r5
    2a2a:	str	r3, [sp, #4]
    2a2c:	mov.w	r8, r7, lsl #3
    2a30:	ldr	r6, [sp, #4]
    2a32:	movs	r4, #0
    2a34:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a38:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2a3a:	add	r3, r4
    2a3c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a3e:	cbnz	r2, 2a44 <regular_setup()+0x194c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2a40:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2a44:	cbnz	r3, 2a60 <regular_setup()+0x1968>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2a46:	adds	r4, #1
    2a48:	adds	r6, #4
    2a4a:	cmp	r4, #24
    2a4c:	bne.n	2a34 <regular_setup()+0x193c>
    2a4e:	ldr	r3, [sp, #4]
    2a50:	adds	r7, #24
    2a52:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2a54:	cmp.w	r7, #576	; 0x240
    2a58:	str	r3, [sp, #4]
    2a5a:	bne.n	2a2c <regular_setup()+0x1934>
    2a5c:	b.w	14c6 <regular_setup()+0x3ce>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a60:	ldr	r2, [r5, #20]
    2a62:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a64:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a68:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a6a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2a6c:	adds	r0, #2
    2a6e:	ldr.w	fp, [r3, r4, lsl #3]
    2a72:	bl	dab0 <random(unsigned long)>
    2a76:	ldr	r3, [r5, #16]
    2a78:	rsb	r3, r3, fp
    2a7c:	adds	r3, #1
    2a7e:	subs	r0, r3, r0
    2a80:	str	r0, [r6, #0]
    2a82:	b.n	2a46 <regular_setup()+0x194e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2a84:	movw	sl, #4636	; 0x121c
    2a88:	add.w	r3, r5, #28
    2a8c:	movs	r7, #0
    2a8e:	add.w	r9, r5, #4640	; 0x1220
    2a92:	add	sl, r5
    2a94:	str	r3, [sp, #4]
    2a96:	mov.w	r8, r7, lsl #3
    2a9a:	ldr	r6, [sp, #4]
    2a9c:	movs	r4, #0
    2a9e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2aa2:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2aa4:	add	r3, r4
    2aa6:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2aa8:	cbnz	r2, 2aae <regular_setup()+0x19b6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2aaa:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2aae:	cbnz	r3, 2ac8 <regular_setup()+0x19d0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2ab0:	adds	r4, #1
    2ab2:	adds	r6, #4
    2ab4:	cmp	r4, #24
    2ab6:	bne.n	2a9e <regular_setup()+0x19a6>
    2ab8:	ldr	r3, [sp, #4]
    2aba:	adds	r7, #24
    2abc:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2abe:	cmp.w	r7, #576	; 0x240
    2ac2:	str	r3, [sp, #4]
    2ac4:	bne.n	2a96 <regular_setup()+0x199e>
    2ac6:	b.n	2360 <regular_setup()+0x1268>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ac8:	ldr	r2, [r5, #20]
    2aca:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2acc:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ad0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ad2:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ad4:	adds	r0, #2
    2ad6:	ldr.w	fp, [r3, r4, lsl #3]
    2ada:	bl	dab0 <random(unsigned long)>
    2ade:	ldr	r3, [r5, #16]
    2ae0:	rsb	r3, r3, fp
    2ae4:	adds	r3, #1
    2ae6:	subs	r0, r3, r0
    2ae8:	str	r0, [r6, #0]
    2aea:	b.n	2ab0 <regular_setup()+0x19b8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2aec:	movw	sl, #4636	; 0x121c
    2af0:	add.w	r3, r5, #28
    2af4:	movs	r7, #0
    2af6:	add.w	r9, r5, #4640	; 0x1220
    2afa:	add	sl, r5
    2afc:	str	r3, [sp, #4]
    2afe:	mov.w	r8, r7, lsl #3
    2b02:	ldr	r6, [sp, #4]
    2b04:	movs	r4, #0
    2b06:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b0a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b0c:	add	r3, r4
    2b0e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b10:	cbnz	r2, 2b16 <regular_setup()+0x1a1e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b12:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b16:	cbnz	r3, 2b32 <regular_setup()+0x1a3a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b18:	adds	r4, #1
    2b1a:	adds	r6, #4
    2b1c:	cmp	r4, #24
    2b1e:	bne.n	2b06 <regular_setup()+0x1a0e>
    2b20:	ldr	r3, [sp, #4]
    2b22:	adds	r7, #24
    2b24:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b26:	cmp.w	r7, #576	; 0x240
    2b2a:	str	r3, [sp, #4]
    2b2c:	bne.n	2afe <regular_setup()+0x1a06>
    2b2e:	b.w	212a <regular_setup()+0x1032>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b32:	ldr	r2, [r5, #20]
    2b34:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b36:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b3a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b3c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b3e:	adds	r0, #2
    2b40:	ldr.w	fp, [r3, r4, lsl #3]
    2b44:	bl	dab0 <random(unsigned long)>
    2b48:	ldr	r3, [r5, #16]
    2b4a:	rsb	r3, r3, fp
    2b4e:	adds	r3, #1
    2b50:	subs	r0, r3, r0
    2b52:	str	r0, [r6, #0]
    2b54:	b.n	2b18 <regular_setup()+0x1a20>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2b56:	movw	sl, #4636	; 0x121c
    2b5a:	add.w	r3, r5, #28
    2b5e:	movs	r7, #0
    2b60:	add.w	r9, r5, #4640	; 0x1220
    2b64:	add	sl, r5
    2b66:	str	r3, [sp, #4]
    2b68:	mov.w	r8, r7, lsl #3
    2b6c:	ldr	r6, [sp, #4]
    2b6e:	movs	r4, #0
    2b70:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b74:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2b76:	add	r3, r4
    2b78:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2b7a:	cbnz	r2, 2b80 <regular_setup()+0x1a88>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2b7c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2b80:	cbnz	r3, 2b9c <regular_setup()+0x1aa4>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b82:	adds	r4, #1
    2b84:	adds	r6, #4
    2b86:	cmp	r4, #24
    2b88:	bne.n	2b70 <regular_setup()+0x1a78>
    2b8a:	ldr	r3, [sp, #4]
    2b8c:	adds	r7, #24
    2b8e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b90:	cmp.w	r7, #576	; 0x240
    2b94:	str	r3, [sp, #4]
    2b96:	bne.n	2b68 <regular_setup()+0x1a70>
    2b98:	b.w	1cba <regular_setup()+0xbc2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2b9c:	ldr	r2, [r5, #20]
    2b9e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ba0:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ba4:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2ba6:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2ba8:	adds	r0, #2
    2baa:	ldr.w	fp, [r3, r4, lsl #3]
    2bae:	bl	dab0 <random(unsigned long)>
    2bb2:	ldr	r3, [r5, #16]
    2bb4:	rsb	r3, r3, fp
    2bb8:	adds	r3, #1
    2bba:	subs	r0, r3, r0
    2bbc:	str	r0, [r6, #0]
    2bbe:	b.n	2b82 <regular_setup()+0x1a8a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2bc0:	movw	sl, #4636	; 0x121c
    2bc4:	add.w	r3, r5, #28
    2bc8:	movs	r7, #0
    2bca:	add.w	r9, r5, #4640	; 0x1220
    2bce:	add	sl, r5
    2bd0:	str	r3, [sp, #4]
    2bd2:	mov.w	r8, r7, lsl #3
    2bd6:	ldr	r6, [sp, #4]
    2bd8:	movs	r4, #0
    2bda:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2bde:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2be0:	add	r3, r4
    2be2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2be4:	cbnz	r2, 2bea <regular_setup()+0x1af2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2be6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2bea:	cbnz	r3, 2c06 <regular_setup()+0x1b0e>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2bec:	adds	r4, #1
    2bee:	adds	r6, #4
    2bf0:	cmp	r4, #24
    2bf2:	bne.n	2bda <regular_setup()+0x1ae2>
    2bf4:	ldr	r3, [sp, #4]
    2bf6:	adds	r7, #24
    2bf8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2bfa:	cmp.w	r7, #576	; 0x240
    2bfe:	str	r3, [sp, #4]
    2c00:	bne.n	2bd2 <regular_setup()+0x1ada>
    2c02:	b.w	194a <regular_setup()+0x852>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c06:	ldr	r2, [r5, #20]
    2c08:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c0a:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c0e:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2c10:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c12:	adds	r0, #2
    2c14:	ldr.w	fp, [r3, r4, lsl #3]
    2c18:	bl	dab0 <random(unsigned long)>
    2c1c:	ldr	r3, [r5, #16]
    2c1e:	rsb	r3, r3, fp
    2c22:	adds	r3, #1
    2c24:	subs	r0, r3, r0
    2c26:	str	r0, [r6, #0]
    2c28:	b.n	2bec <regular_setup()+0x1af4>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    2c2a:	bl	e240 <sqrt>
    2c2e:	vmov.f64	d7, d0
    2c32:	b.w	13fc <regular_setup()+0x304>
    2c36:	bl	e240 <sqrt>
    2c3a:	vmov.f64	d7, d0
    2c3e:	b.n	2490 <regular_setup()+0x1398>
    2c40:	bl	e240 <sqrt>
    2c44:	vmov.f64	d7, d0
    2c48:	b.w	222e <regular_setup()+0x1136>
    2c4c:	bl	e240 <sqrt>
    2c50:	vmov.f64	d7, d0
    2c54:	b.w	1f94 <regular_setup()+0xe9c>
    2c58:	bl	e240 <sqrt>
    2c5c:	vmov.f64	d7, d0
    2c60:	b.w	1db8 <regular_setup()+0xcc0>
    2c64:	bl	e240 <sqrt>
    2c68:	vmov.f64	d7, d0
    2c6c:	b.w	1b84 <regular_setup()+0xa8c>
    2c70:	bl	e240 <sqrt>
    2c74:	vmov.f64	d7, d0
    2c78:	b.w	1818 <regular_setup()+0x720>
    2c7c:	bl	e240 <sqrt>
    2c80:	vmov.f64	d7, d0
    2c84:	b.w	156e <regular_setup()+0x476>

00002c88 <updateScreensFade()>:
  renderInterrupt(); 
}


void updateScreensFade() {
  if(screenFadeUpdateSwitcher){
    2c88:	ldr	r3, [pc, #700]	; (2f48 <updateScreensFade()+0x2c0>)
    2c8a:	ldrb	r3, [r3, #0]
 
  renderInterrupt(); 
}


void updateScreensFade() {
    2c8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c90:	vpush	{d8}
    2c94:	sub	sp, #28
  if(screenFadeUpdateSwitcher){
    2c96:	cmp	r3, #0
    2c98:	beq.w	2f64 <updateScreensFade()+0x2dc>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2c9c:	ldr	r3, [pc, #684]	; (2f4c <updateScreensFade()+0x2c4>)
    2c9e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca0:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2ca2:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca4:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2ca6:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2ca8:	ldr	r6, [pc, #672]	; (2f4c <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2caa:	cmp	r3, r1
    2cac:	it	eq
    2cae:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cb0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2cb2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2cb4:	ite	eq
    2cb6:	moveq	r5, #1
    2cb8:	movne	r5, #0
    2cba:	cmp	r5, #0
    2cbc:	beq.n	2ca4 <updateScreensFade()+0x1c>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2cbe:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2cc0:	ldr.w	r8, [pc, #652]	; 2f50 <updateScreensFade()+0x2c8>
    2cc4:	orr.w	r1, r1, r2, lsl #27
    2cc8:	ldr.w	r3, [r8, #476]	; 0x1dc
    2ccc:	vmov	s15, r1
    2cd0:	vldr	d5, [pc, #620]	; 2f40 <updateScreensFade()+0x2b8>
    2cd4:	vcvt.f64.u32	d7, s15
    2cd8:	vdiv.f64	d6, d7, d5
    2cdc:	vcvt.u32.f64	s12, d6
    2ce0:	vmov	r2, s12
    2ce4:	subs	r3, r2, r3
    2ce6:	cmp	r3, #49	; 0x31
    2ce8:	bls.w	2f30 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2cec:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cee:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2cf0:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cf2:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2cf4:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cf6:	ldr	r4, [pc, #596]	; (2f4c <updateScreensFade()+0x2c4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2cf8:	cmp	r3, r1
    2cfa:	it	eq
    2cfc:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2cfe:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2d00:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d02:	ite	eq
    2d04:	moveq	r6, #1
    2d06:	movne	r6, #0
    2d08:	cmp	r6, #0
    2d0a:	beq.n	2cf2 <updateScreensFade()+0x6a>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2d0c:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2d0e:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2d12:	vldr	s10, [r8, #468]	; 0x1d4
    2d16:	orr.w	r1, r1, r2, lsl #27
    2d1a:	ldr	r7, [pc, #564]	; (2f50 <updateScreensFade()+0x2c8>)
    2d1c:	vcmpe.f32	s10, s11
    2d20:	vmov	s15, r1
    2d24:	vldr	d4, [pc, #536]	; 2f40 <updateScreensFade()+0x2b8>
    2d28:	vcvt.f64.u32	d7, s15
    2d2c:	vmrs	APSR_nzcv, fpscr
    2d30:	vdiv.f64	d6, d7, d4
    2d34:	vcvt.u32.f64	s12, d6
    2d38:	vstr	s12, [r8, #476]	; 0x1dc
    2d3c:	blt.w	31ec <updateScreensFade()+0x564>
      		
			if (newFrameReady) {
    2d40:	ldrb.w	r1, [r7, #460]	; 0x1cc
    2d44:	cmp	r1, #0
    2d46:	beq.w	2f10 <updateScreensFade()+0x288>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d4a:	movs	r1, #0
    2d4c:	ldr	r0, [pc, #516]	; (2f54 <updateScreensFade()+0x2cc>)
    2d4e:	bl	de48 <Print::print(long)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2d52:	movs	r1, #15
    2d54:	ldr	r0, [pc, #512]	; (2f58 <updateScreensFade()+0x2d0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d56:	mov	r6, r4
    2d58:	bl	c09c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2d5c:	ldr	r0, [pc, #500]	; (2f54 <updateScreensFade()+0x2cc>)
    2d5e:	bl	dda8 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    2d62:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2d66:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2d6a:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2d6e:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    2d70:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    2d74:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    2d76:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    2d7a:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d7e:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2d80:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2d82:	cmp	r3, r4
    2d84:	it	eq
    2d86:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2d88:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2d8a:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2d8c:	ite	eq
    2d8e:	moveq	r7, #1
    2d90:	movne	r7, #0
    2d92:	cmp	r7, #0
    2d94:	beq.n	2d7e <updateScreensFade()+0xf6>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    2d96:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    2d98:	movs	r3, #0
    2d9a:	orr.w	r4, r4, r1, lsl #27
    2d9e:	strb.w	r3, [r8, #460]	; 0x1cc
    2da2:	vmov	s15, r4
    2da6:	vldr	d5, [pc, #408]	; 2f40 <updateScreensFade()+0x2b8>
    2daa:	vcvt.f64.u32	d7, s15
    2dae:	vdiv.f64	d6, d7, d5
    2db2:	vcvt.u32.f64	s15, d6
    2db6:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    2dba:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2dbe:	ldr	r3, [pc, #396]	; (2f4c <updateScreensFade()+0x2c4>)
    2dc0:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dc2:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2dc4:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dc6:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2dc8:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2dca:	cmp	r3, r4
    2dcc:	it	eq
    2dce:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2dd0:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    2dd2:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2dd4:	ite	eq
    2dd6:	moveq	r6, #1
    2dd8:	movne	r6, #0
    2dda:	cmp	r6, #0
    2ddc:	beq.n	2dc6 <updateScreensFade()+0x13e>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dde:	lsrs	r4, r3, #5
    2de0:	vldr	s10, [pc, #376]	; 2f5c <updateScreensFade()+0x2d4>
    2de4:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    2de8:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dea:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dee:	ldr	r5, [pc, #352]	; (2f50 <updateScreensFade()+0x2c8>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2df0:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2df2:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2df6:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2dfa:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    2dfc:	vcvt.f64.u32	d7, s15
    2e00:	vldr	d4, [pc, #316]	; 2f40 <updateScreensFade()+0x2b8>
    2e04:	vdiv.f64	d6, d7, d4
    2e08:	vcvt.u32.f64	s14, d6
    2e0c:	vmov	r3, s14
    2e10:	rsb	r6, lr, r3
    2e14:	vmov	s15, r6
    2e18:	vcvt.f32.u32	s14, s15
    2e1c:	vdiv.f32	s15, s14, s10
    2e20:	vcmpe.f32	s15, s11
    2e24:	vmrs	APSR_nzcv, fpscr
    2e28:	it	pl
    2e2a:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    2e2e:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e32:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2e36:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e38:	lsls	r6, r6, #3
    2e3a:	b.n	2e48 <updateScreensFade()+0x1c0>
    2e3c:	ldr.w	r2, [r5, #488]	; 0x1e8
    2e40:	vldr	s15, [r5, #468]	; 0x1d4
    2e44:	ldr.w	r0, [r5, #492]	; 0x1ec
    2e48:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    2e4c:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e50:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2e52:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e54:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e56:	ldr.w	r9, [pc, #248]	; 2f50 <updateScreensFade()+0x2c8>
    2e5a:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e5c:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e60:	ldrb	r0, [r0, r3]
    2e62:	vmov	s14, r0
    2e66:	ldrb.w	r0, [lr, #2]
    2e6a:	ldrb.w	lr, [lr, #1]
    2e6e:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    2e72:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    2e74:	vmov	s13, lr
    2e78:	ldrb	r3, [r2, r3]
    2e7a:	ldrb.w	lr, [r0, #2]
    2e7e:	vcvt.f32.s32	s12, s12
    2e82:	vcvt.f32.s32	s13, s13
    2e86:	vmov	s10, r3
    2e8a:	vmov	s8, lr
    2e8e:	ldrb	r3, [r0, #1]
    2e90:	vcvt.f32.s32	s14, s14
    2e94:	ldr.w	r0, [r8, #448]	; 0x1c0
    2e98:	vmul.f32	s13, s13, s15
    2e9c:	vmov	s9, r3
    2ea0:	vcvt.f32.s32	s8, s8
    2ea4:	vmul.f32	s12, s12, s15
    2ea8:	vcvt.f32.s32	s9, s9
    2eac:	vmul.f32	s15, s14, s15
    2eb0:	vcvt.f32.s32	s10, s10
    2eb4:	vmov.f32	s14, s13
    2eb8:	vfma.f32	s12, s11, s8
    2ebc:	vfma.f32	s15, s10, s11
    2ec0:	vfma.f32	s14, s11, s9
    2ec4:	vcvt.s32.f32	s13, s12
    2ec8:	vcvt.s32.f32	s15, s15
    2ecc:	vcvt.s32.f32	s14, s14
    2ed0:	vstr	s13, [sp, #20]
    2ed4:	ldrb.w	r2, [sp, #20]
    2ed8:	vstr	s14, [sp, #12]
    2edc:	vstr	s15, [sp, #16]
    2ee0:	str	r2, [sp, #0]
    2ee2:	ldrb.w	r3, [sp, #12]
    2ee6:	ldrb.w	r2, [sp, #16]
    2eea:	bl	b9fc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    2eee:	cmp	r4, #24
    2ef0:	bne.n	2e3c <updateScreensFade()+0x1b4>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    2ef2:	add.w	sl, sl, #1
    2ef6:	adds	r7, #24
    2ef8:	cmp.w	sl, #24
    2efc:	uxth	r7, r7
    2efe:	beq.w	31d4 <updateScreensFade()+0x54c>
    2f02:	ldr.w	r2, [fp, #488]	; 0x1e8
    2f06:	vldr	s15, [fp, #468]	; 0x1d4
    2f0a:	ldr.w	r0, [fp, #492]	; 0x1ec
    2f0e:	b.n	2e32 <updateScreensFade()+0x1aa>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2f10:	ldr	r0, [pc, #64]	; (2f54 <updateScreensFade()+0x2cc>)
    2f12:	bl	de48 <Print::print(long)>
    2f16:	movs	r1, #22
    2f18:	ldr	r0, [pc, #68]	; (2f60 <updateScreensFade()+0x2d8>)
    2f1a:	bl	c09c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f1e:	ldr	r0, [pc, #52]	; (2f54 <updateScreensFade()+0x2cc>)
    2f20:	bl	dda8 <Print::println()>
    if(screen_A.updateFade(0)) screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }else{
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
    2f24:	ldr	r3, [pc, #32]	; (2f48 <updateScreensFade()+0x2c0>)
    2f26:	ldr	r2, [pc, #32]	; (2f48 <updateScreensFade()+0x2c0>)
    2f28:	ldrb	r3, [r3, #0]
    2f2a:	eor.w	r3, r3, #1
    2f2e:	strb	r3, [r2, #0]
  }
}
    2f30:	add	sp, #28
    2f32:	vpop	{d8}
    2f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f3a:	nop
    2f3c:	nop.w
    2f40:	.word	0xd2f1a9fc
    2f44:	.word	0x3ff0624d
    2f48:	.word	0x200029b8
    2f4c:	.word	0x400d4000
    2f50:	.word	0x20005074
    2f54:	.word	0x20000f0c
    2f58:	.word	0x20000174
    2f5c:	.word	0x44160000
    2f60:	.word	0x20000184
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2f64:	ldr	r3, [pc, #672]	; (3208 <updateScreensFade()+0x580>)
    2f66:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f68:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2f6a:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f6c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2f6e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f70:	ldr	r6, [pc, #660]	; (3208 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2f72:	cmp	r3, r1
    2f74:	it	eq
    2f76:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2f78:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2f7a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2f7c:	ite	eq
    2f7e:	moveq	r5, #1
    2f80:	movne	r5, #0
    2f82:	cmp	r5, #0
    2f84:	beq.n	2f6c <updateScreensFade()+0x2e4>
			}
		}
	}

	bool updateFade(int id) {
		if (sinceFadeUpdate < FADE_INTERVAL) return false;
    2f86:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    2f88:	ldr.w	r8, [pc, #640]	; 320c <updateScreensFade()+0x584>
    2f8c:	orr.w	r1, r1, r2, lsl #27
    2f90:	ldr.w	r3, [r8, #476]	; 0x1dc
    2f94:	vmov	s15, r1
    2f98:	vldr	d5, [pc, #612]	; 3200 <updateScreensFade()+0x578>
    2f9c:	vcvt.f64.u32	d7, s15
    2fa0:	vdiv.f64	d6, d7, d5
    2fa4:	vcvt.u32.f64	s12, d6
    2fa8:	vmov	r2, s12
    2fac:	subs	r3, r2, r3
    2fae:	cmp	r3, #49	; 0x31
    2fb0:	bls.n	2f30 <updateScreensFade()+0x2a8>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2fb2:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fb4:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2fb6:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fb8:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2fba:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fbc:	ldr	r4, [pc, #584]	; (3208 <updateScreensFade()+0x580>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2fbe:	cmp	r3, r1
    2fc0:	it	eq
    2fc2:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2fc4:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2fc6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2fc8:	ite	eq
    2fca:	moveq	r6, #1
    2fcc:	movne	r6, #0
    2fce:	cmp	r6, #0
    2fd0:	beq.n	2fb8 <updateScreensFade()+0x330>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    2fd2:	lsrs	r1, r3, #5
		sinceFadeUpdate = 0;
		if (fadeFactor >= 1) {
    2fd4:	vmov.f32	s11, #112	; 0x3f800000  1.0
    2fd8:	vldr	s10, [r8, #468]	; 0x1d4
    2fdc:	orr.w	r1, r1, r2, lsl #27
    2fe0:	ldr	r7, [pc, #552]	; (320c <updateScreensFade()+0x584>)
    2fe2:	vcmpe.f32	s10, s11
    2fe6:	vmov	s15, r1
    2fea:	vldr	d4, [pc, #532]	; 3200 <updateScreensFade()+0x578>
    2fee:	vcvt.f64.u32	d7, s15
    2ff2:	vmrs	APSR_nzcv, fpscr
    2ff6:	vdiv.f64	d6, d7, d4
    2ffa:	vcvt.u32.f64	s12, d6
    2ffe:	vstr	s12, [r8, #476]	; 0x1dc
    3002:	blt.w	31de <updateScreensFade()+0x556>
      		
			if (newFrameReady) {
    3006:	ldrb.w	r3, [r7, #460]	; 0x1cc
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    300a:	movs	r1, #1
    300c:	ldr	r0, [pc, #512]	; (3210 <updateScreensFade()+0x588>)
    300e:	cmp	r3, #0
    3010:	beq.w	2f12 <updateScreensFade()+0x28a>
    3014:	bl	de48 <Print::print(long)>
    3018:	movs	r1, #15
    301a:	ldr	r0, [pc, #504]	; (3214 <updateScreensFade()+0x58c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    301c:	mov	r6, r4
    301e:	bl	c09c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3022:	ldr	r0, [pc, #492]	; (3210 <updateScreensFade()+0x588>)
    3024:	bl	dda8 <Print::println()>
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
    3028:	ldr.w	r3, [r7, #488]	; 0x1e8
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    302c:	ldr.w	r0, [r7, #496]	; 0x1f0
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    3030:	ldr.w	r2, [r7, #492]	; 0x1ec
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3034:	ldr	r5, [r4, #36]	; 0x24
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
    3036:	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t lo1 = SNVS_HPRTCLR;
    303a:	ldr	r4, [r4, #40]	; 0x28
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
    303c:	str.w	r0, [r7, #492]	; 0x1ec
      		
			if (newFrameReady) {
				Serial.print(id);
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
    3040:	str.w	r2, [r7, #488]	; 0x1e8
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3044:	ldr	r1, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3046:	ldr	r3, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3048:	cmp	r3, r4
    304a:	it	eq
    304c:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    304e:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    3050:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3052:	ite	eq
    3054:	moveq	r7, #1
    3056:	movne	r7, #0
    3058:	cmp	r7, #0
    305a:	beq.n	3044 <updateScreensFade()+0x3bc>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    305c:	lsrs	r4, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        		newFrameReady = false;
    305e:	movs	r3, #0
    3060:	orr.w	r4, r4, r1, lsl #27
    3064:	strb.w	r3, [r8, #460]	; 0x1cc
    3068:	vmov	s15, r4
    306c:	vldr	d5, [pc, #400]	; 3200 <updateScreensFade()+0x578>
    3070:	vcvt.f64.u32	d7, s15
    3074:	vdiv.f64	d6, d7, d5
    3078:	vcvt.u32.f64	s15, d6
    307c:	vmov	lr, s15
        		Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
    3080:	vstr	s15, [r8, #472]	; 0x1d8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3084:	ldr	r3, [pc, #384]	; (3208 <updateScreensFade()+0x580>)
    3086:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3088:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    308a:	ldr	r4, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    308c:	ldr	r1, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    308e:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3090:	cmp	r3, r4
    3092:	it	eq
    3094:	cmpeq	r1, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3096:	mov	r5, r1
    uint32_t lo2 = SNVS_HPRTCLR;
    3098:	mov	r4, r3
    if (lo1 == lo2 && hi1 == hi2) {
    309a:	ite	eq
    309c:	moveq	r6, #1
    309e:	movne	r6, #0
    30a0:	cmp	r6, #0
    30a2:	beq.n	308c <updateScreensFade()+0x404>
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30a4:	lsrs	r4, r3, #5
    30a6:	vldr	s10, [pc, #368]	; 3218 <updateScreensFade()+0x590>
    30aa:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
    30ae:	movs	r7, #0
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30b0:	orr.w	r4, r4, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    30b4:	ldr	r5, [pc, #340]	; (320c <updateScreensFade()+0x584>)
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    30b6:	mov	sl, r7
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30b8:	vmov	s15, r4

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    30bc:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    30c0:	mov	fp, r5
				Serial.println("No next frame ready!!!");
				return true;
			}
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
    30c2:	vcvt.f64.u32	d7, s15
    30c6:	vldr	d4, [pc, #312]	; 3200 <updateScreensFade()+0x578>
    30ca:	vdiv.f64	d6, d7, d4
    30ce:	vcvt.u32.f64	s14, d6
    30d2:	vmov	r3, s14
    30d6:	rsb	r6, lr, r3
    30da:	vmov	s15, r6
    30de:	vcvt.f32.u32	s14, s15
    30e2:	vdiv.f32	s15, s14, s10
    30e6:	vcmpe.f32	s15, s11
    30ea:	vmrs	APSR_nzcv, fpscr
    30ee:	it	pl
    30f0:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
    30f4:	vstr	s15, [r8, #468]	; 0x1d4
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    30f8:	add.w	r6, sl, sl, lsl #3
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    30fc:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    30fe:	lsls	r6, r6, #3
    3100:	b.n	310e <updateScreensFade()+0x486>
    3102:	ldr.w	r2, [r5, #488]	; 0x1e8
    3106:	vldr	s15, [r5, #468]	; 0x1d4
    310a:	ldr.w	r0, [r5, #492]	; 0x1ec
    310e:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
    3112:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3116:	adds	r1, r7, r4
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    3118:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    311a:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    311c:	ldr.w	r9, [pc, #236]	; 320c <updateScreensFade()+0x584>
    3120:	uxth	r1, r1
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3122:	add.w	lr, r0, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    3126:	ldrb	r0, [r0, r3]
    3128:	vmov	s14, r0
    312c:	ldrb.w	r0, [lr, #2]
    3130:	ldrb.w	lr, [lr, #1]
    3134:	vmov	s12, r0
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
    3138:	adds	r0, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
    313a:	vmov	s13, lr
    313e:	ldrb	r3, [r2, r3]
    3140:	ldrb.w	lr, [r0, #2]
    3144:	vcvt.f32.s32	s12, s12
    3148:	vcvt.f32.s32	s13, s13
    314c:	vmov	s10, r3
    3150:	vmov	s8, lr
    3154:	ldrb	r3, [r0, #1]
    3156:	vcvt.f32.s32	s14, s14
    315a:	ldr.w	r0, [r8, #448]	; 0x1c0
    315e:	vmul.f32	s13, s13, s15
    3162:	vmov	s9, r3
    3166:	vcvt.f32.s32	s8, s8
    316a:	vmul.f32	s12, s12, s15
    316e:	vcvt.f32.s32	s9, s9
    3172:	vmul.f32	s15, s14, s15
    3176:	vcvt.f32.s32	s10, s10
    317a:	vmov.f32	s14, s13
    317e:	vfma.f32	s12, s11, s8
    3182:	vfma.f32	s15, s10, s11
    3186:	vfma.f32	s14, s11, s9
    318a:	vcvt.s32.f32	s13, s12
    318e:	vcvt.s32.f32	s15, s15
    3192:	vcvt.s32.f32	s14, s14
    3196:	vstr	s13, [sp, #20]
    319a:	ldrb.w	r2, [sp, #20]
    319e:	vstr	s14, [sp, #12]
    31a2:	vstr	s15, [sp, #16]
    31a6:	str	r2, [sp, #0]
    31a8:	ldrb.w	r3, [sp, #12]
    31ac:	ldrb.w	r2, [sp, #16]
    31b0:	bl	b9fc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    31b4:	cmp	r4, #24
    31b6:	bne.n	3102 <updateScreensFade()+0x47a>
		}
	}

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    31b8:	add.w	sl, sl, #1
    31bc:	adds	r7, #24
    31be:	cmp.w	sl, #24
    31c2:	uxth	r7, r7
    31c4:	beq.n	31d4 <updateScreensFade()+0x54c>
    31c6:	ldr.w	r2, [fp, #488]	; 0x1e8
    31ca:	vldr	s15, [fp, #468]	; 0x1d4
    31ce:	ldr.w	r0, [fp, #492]	; 0x1ec
    31d2:	b.n	30f8 <updateScreensFade()+0x470>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
    31d4:	ldr.w	r0, [r9, #448]	; 0x1c0
    31d8:	bl	b7b4 <Adafruit_NeoPixel::show()>
    31dc:	b.n	2f24 <updateScreensFade()+0x29c>
    31de:	ldr.w	lr, [r7, #472]	; 0x1d8
    31e2:	ldr.w	r2, [r7, #488]	; 0x1e8
    31e6:	ldr.w	r0, [r7, #492]	; 0x1ec
    31ea:	b.n	3084 <updateScreensFade()+0x3fc>
    31ec:	ldr.w	lr, [r7, #472]	; 0x1d8
    31f0:	ldr.w	r2, [r7, #488]	; 0x1e8
    31f4:	ldr.w	r0, [r7, #492]	; 0x1ec
    31f8:	b.n	2dbe <updateScreensFade()+0x136>
    31fa:	nop
    31fc:	nop.w
    3200:	.word	0xd2f1a9fc
    3204:	.word	0x3ff0624d
    3208:	.word	0x400d4000
    320c:	.word	0x20005268
    3210:	.word	0x20000f0c
    3214:	.word	0x20000174
    3218:	.word	0x44160000

0000321c <Screen::iterate_animation() [clone .part.20]>:
		return true;
	}


	void iterate_animation(){
    321c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3220:	movs	r3, #2
    3222:	sub	sp, #68	; 0x44
		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		
		(*_fg_automaton).iterate();
    3224:	ldr.w	r9, [r0, #436]	; 0x1b4
    3228:	movs	r2, #32
    322a:	str	r3, [sp, #4]
		_screen->show();
		return true;
	}


	void iterate_animation(){
    322c:	mov	fp, r0
    322e:	addw	r3, r9, #2428	; 0x97c
    3232:	movs	r1, #0
    3234:	ldr.w	sl, [pc, #1608]	; 3880 <Screen::iterate_animation() [clone .part.20]+0x664>
    3238:	add.w	r0, sp, r2
    323c:	str	r3, [sp, #12]
    323e:	add.w	r3, r9, #4640	; 0x1220
    3242:	str	r1, [sp, #20]
    3244:	str	r3, [sp, #24]
    3246:	bl	ebac <memset>
    324a:	str.w	fp, [sp, #28]

void renderInterrupt() {
  updateBeams();
    324e:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3252:	movs	r7, #2
  updateScreensFade();
    3254:	bl	2c88 <updateScreensFade()>
    3258:	ldrb.w	r2, [r9, #24]
    325c:	ldr	r3, [sp, #24]
    325e:	str	r2, [sp, #16]
    3260:	ldr	r3, [r3, #0]
    3262:	ldr	r2, [sp, #20]
    3264:	ldr	r1, [sp, #12]
    3266:	add.w	r8, r3, r2
    326a:	sub.w	ip, r1, #96	; 0x60
    326e:	sub.w	r3, r1, #2400	; 0x960
    3272:	mov	fp, r8
    3274:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3276:	ldr	r3, [sp, #16]
    3278:	cmp	r3, #0
    327a:	beq.w	36b8 <Screen::iterate_animation() [clone .part.20]+0x49c>
      return _background[x][y];
    327e:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    3282:	cmp	r3, #0
    3284:	beq.n	335a <Screen::iterate_animation() [clone .part.20]+0x13e>
    3286:	ldr	r3, [sp, #4]
    3288:	add.w	lr, sp, #32
    328c:	subs	r6, r3, #3
    328e:	subs	r3, r7, #3
    3290:	str	r3, [sp, #8]
    3292:	smull	r3, r2, sl, r6
    3296:	asrs	r3, r6, #31
    3298:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    329a:	mov	r5, lr
    329c:	rsb	r3, r3, r2, asr #2
    32a0:	add.w	r3, r3, r3, lsl #1
    32a4:	sub.w	r3, r6, r3, lsl #3
    32a8:	adds	r3, #24
    32aa:	smull	r2, r1, sl, r3
    32ae:	asrs	r2, r3, #31
    32b0:	rsb	r2, r2, r1, asr #2
    32b4:	add.w	r2, r2, r2, lsl #1
    32b8:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    32bc:	add.w	r2, r2, r2, lsl #1
    32c0:	lsls	r4, r2, #3
    32c2:	smull	r3, r2, sl, r0
    32c6:	asrs	r3, r0, #31
    32c8:	rsb	r3, r3, r2, asr #2
    32cc:	add.w	r3, r3, r3, lsl #1
    32d0:	sub.w	r3, r0, r3, lsl #3
    32d4:	adds	r0, #1
    32d6:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    32d8:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    32da:	smull	r2, r1, sl, r3
    32de:	mov.w	r2, r3, asr #31
    32e2:	rsb	r2, r2, r1, asr #2
    32e6:	add.w	r2, r2, r2, lsl #1
    32ea:	sub.w	r3, r3, r2, lsl #3
    32ee:	add	r3, r4
    32f0:	add.w	r3, r9, r3, lsl #2
    32f4:	ldr	r3, [r3, #28]
    32f6:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    32fa:	bne.n	32c2 <Screen::iterate_animation() [clone .part.20]+0xa6>
    32fc:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    32fe:	ldr	r3, [sp, #4]
    3300:	add.w	lr, lr, #12
    3304:	cmp	r3, r6
    3306:	bne.n	3292 <Screen::iterate_animation() [clone .part.20]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3308:	ldr	r3, [sp, #0]
    330a:	movs	r0, #1
    330c:	ldr	r1, [r3, #0]
    330e:	ldr.w	r3, [r9]
    3312:	adds	r5, r1, r3
    3314:	movs	r4, #0
    3316:	mov	r3, r4
    3318:	b.n	3320 <Screen::iterate_animation() [clone .part.20]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    331a:	adds	r3, #1
    331c:	cmp	r3, #8
    331e:	beq.n	3336 <Screen::iterate_animation() [clone .part.20]+0x11a>
          if ((i >> j) % 2 == 1){
    3320:	asr.w	r2, r0, r3
    3324:	lsls	r6, r2, #31
    3326:	bpl.n	331a <Screen::iterate_animation() [clone .part.20]+0xfe>
            sum += neighbours[j];
    3328:	add	r2, sp, #32
    332a:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    332e:	adds	r3, #1
    3330:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3332:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3334:	bne.n	3320 <Screen::iterate_animation() [clone .part.20]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3336:	cmp	r5, r4
    3338:	beq.w	36c2 <Screen::iterate_animation() [clone .part.20]+0x4a6>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    333c:	adds	r0, #1
    333e:	cmp.w	r0, #256	; 0x100
    3342:	bne.n	3314 <Screen::iterate_animation() [clone .part.20]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3344:	ldr.w	r3, [r9, #8]
    3348:	subs	r1, r1, r3
    334a:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    334e:	ldr.w	r3, [r9, #12]
    3352:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    3354:	it	gt
    3356:	strgt.w	r3, [ip]
    335a:	ldr	r3, [sp, #0]
    335c:	add.w	ip, ip, #4
    3360:	adds	r7, #1
    3362:	add.w	r8, r8, #1
    3366:	adds	r3, #4
    3368:	add.w	fp, fp, #1
    336c:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    336e:	ldr	r3, [sp, #12]
    3370:	cmp	r3, ip
    3372:	bne.n	3276 <Screen::iterate_animation() [clone .part.20]+0x5a>
    3374:	ldr	r2, [sp, #12]
    3376:	ldr	r3, [sp, #20]
    3378:	adds	r2, #96	; 0x60
    337a:	adds	r3, #24
    337c:	str	r2, [sp, #12]
    337e:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3380:	cmp.w	r3, #576	; 0x240
    3384:	str	r3, [sp, #20]
    3386:	add.w	r2, r2, #1
    338a:	str	r2, [sp, #4]
    338c:	bne.w	324e <Screen::iterate_animation() [clone .part.20]+0x32>
    3390:	movw	r5, #4632	; 0x1218
    3394:	ldr.w	fp, [sp, #28]
    3398:	addw	r4, r9, #2328	; 0x918
    339c:	add	r5, r9
    339e:	sub.w	r3, r4, #2304	; 0x900
    33a2:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    33a6:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    33a8:	ldr.w	r1, [r2, #4]!
    33ac:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    33b0:	cmp	r0, r3
    33b2:	bne.n	33a8 <Screen::iterate_animation() [clone .part.20]+0x18c>
    33b4:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    33b6:	cmp	r5, r4
    33b8:	bne.n	339e <Screen::iterate_animation() [clone .part.20]+0x182>
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    33ba:	ldr.w	r9, [fp, #432]	; 0x1b0
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    33be:	movs	r3, #2
    33c0:	movs	r2, #32
    33c2:	movs	r1, #0
    33c4:	str	r3, [sp, #4]
    33c6:	addw	r3, r9, #2428	; 0x97c
    33ca:	ldr.w	sl, [pc, #1204]	; 3880 <Screen::iterate_animation() [clone .part.20]+0x664>
    33ce:	add.w	r0, sp, r2
    33d2:	str	r3, [sp, #12]
    33d4:	add.w	r3, r9, #4640	; 0x1220
    33d8:	str	r1, [sp, #20]
    33da:	str	r3, [sp, #24]
    33dc:	bl	ebac <memset>
    33e0:	str.w	fp, [sp, #28]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    33e4:	bl	5d0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    33e8:	movs	r7, #2
  updateScreensFade();
    33ea:	bl	2c88 <updateScreensFade()>
    33ee:	ldrb.w	r2, [r9, #24]
    33f2:	ldr	r3, [sp, #24]
    33f4:	str	r2, [sp, #16]
    33f6:	ldr	r3, [r3, #0]
    33f8:	ldr	r2, [sp, #20]
    33fa:	ldr	r1, [sp, #12]
    33fc:	add.w	r8, r3, r2
    3400:	sub.w	ip, r1, #96	; 0x60
    3404:	sub.w	r3, r1, #2400	; 0x960
    3408:	mov	fp, r8
    340a:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    340c:	ldr	r3, [sp, #16]
    340e:	cmp	r3, #0
    3410:	beq.w	36ce <Screen::iterate_animation() [clone .part.20]+0x4b2>
      return _background[x][y];
    3414:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    3418:	cmp	r3, #0
    341a:	beq.n	34f0 <Screen::iterate_animation() [clone .part.20]+0x2d4>
    341c:	ldr	r3, [sp, #4]
    341e:	add.w	lr, sp, #32
    3422:	subs	r6, r3, #3
    3424:	subs	r3, r7, #3
    3426:	str	r3, [sp, #8]
    3428:	smull	r3, r2, sl, r6
    342c:	asrs	r3, r6, #31
    342e:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    3430:	mov	r5, lr
    3432:	rsb	r3, r3, r2, asr #2
    3436:	add.w	r3, r3, r3, lsl #1
    343a:	sub.w	r3, r6, r3, lsl #3
    343e:	adds	r3, #24
    3440:	smull	r2, r1, sl, r3
    3444:	asrs	r2, r3, #31
    3446:	rsb	r2, r2, r1, asr #2
    344a:	add.w	r2, r2, r2, lsl #1
    344e:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3452:	add.w	r2, r2, r2, lsl #1
    3456:	lsls	r4, r2, #3
    3458:	smull	r3, r2, sl, r0
    345c:	asrs	r3, r0, #31
    345e:	rsb	r3, r3, r2, asr #2
    3462:	add.w	r3, r3, r3, lsl #1
    3466:	sub.w	r3, r0, r3, lsl #3
    346a:	adds	r0, #1
    346c:	adds	r3, #24
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    346e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3470:	smull	r2, r1, sl, r3
    3474:	mov.w	r2, r3, asr #31
    3478:	rsb	r2, r2, r1, asr #2
    347c:	add.w	r2, r2, r2, lsl #1
    3480:	sub.w	r3, r3, r2, lsl #3
    3484:	add	r3, r4
    3486:	add.w	r3, r9, r3, lsl #2
    348a:	ldr	r3, [r3, #28]
    348c:	str.w	r3, [r5], #4
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    3490:	bne.n	3458 <Screen::iterate_animation() [clone .part.20]+0x23c>
    3492:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    3494:	ldr	r3, [sp, #4]
    3496:	add.w	lr, lr, #12
    349a:	cmp	r3, r6
    349c:	bne.n	3428 <Screen::iterate_animation() [clone .part.20]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    349e:	ldr	r3, [sp, #0]
    34a0:	movs	r0, #1
    34a2:	ldr	r1, [r3, #0]
    34a4:	ldr.w	r3, [r9]
    34a8:	adds	r5, r1, r3
    34aa:	movs	r4, #0
    34ac:	mov	r3, r4
    34ae:	b.n	34b6 <Screen::iterate_animation() [clone .part.20]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34b0:	adds	r3, #1
    34b2:	cmp	r3, #8
    34b4:	beq.n	34cc <Screen::iterate_animation() [clone .part.20]+0x2b0>
          if ((i >> j) % 2 == 1){
    34b6:	asr.w	r2, r0, r3
    34ba:	lsls	r2, r2, #31
    34bc:	bpl.n	34b0 <Screen::iterate_animation() [clone .part.20]+0x294>
            sum += neighbours[j];
    34be:	add	r2, sp, #32
    34c0:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34c4:	adds	r3, #1
    34c6:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    34c8:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    34ca:	bne.n	34b6 <Screen::iterate_animation() [clone .part.20]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    34cc:	cmp	r5, r4
    34ce:	beq.w	36d8 <Screen::iterate_animation() [clone .part.20]+0x4bc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    34d2:	adds	r0, #1
    34d4:	cmp.w	r0, #256	; 0x100
    34d8:	bne.n	34aa <Screen::iterate_animation() [clone .part.20]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    34da:	ldr.w	r3, [r9, #8]
    34de:	subs	r1, r1, r3
    34e0:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    34e4:	ldr.w	r3, [r9, #12]
    34e8:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    34ea:	it	gt
    34ec:	strgt.w	r3, [ip]
    34f0:	ldr	r3, [sp, #0]
    34f2:	add.w	ip, ip, #4
    34f6:	adds	r7, #1
    34f8:	add.w	r8, r8, #1
    34fc:	adds	r3, #4
    34fe:	add.w	fp, fp, #1
    3502:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
        renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3504:	ldr	r3, [sp, #12]
    3506:	cmp	r3, ip
    3508:	bne.n	340c <Screen::iterate_animation() [clone .part.20]+0x1f0>
    350a:	ldr	r2, [sp, #12]
    350c:	ldr	r3, [sp, #20]
    350e:	adds	r2, #96	; 0x60
    3510:	adds	r3, #24
    3512:	str	r2, [sp, #12]
    3514:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3516:	cmp.w	r3, #576	; 0x240
    351a:	str	r3, [sp, #20]
    351c:	add.w	r2, r2, #1
    3520:	str	r2, [sp, #4]
    3522:	bne.w	33e4 <Screen::iterate_animation() [clone .part.20]+0x1c8>
    3526:	movw	r5, #4632	; 0x1218
    352a:	ldr.w	fp, [sp, #28]
    352e:	addw	r4, r9, #2328	; 0x918
    3532:	add	r5, r9
    3534:	sub.w	r3, r4, #2304	; 0x900
    3538:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    353c:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    353e:	ldr.w	r1, [r2, #4]!
    3542:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3546:	cmp	r0, r3
    3548:	bne.n	353e <Screen::iterate_animation() [clone .part.20]+0x322>
    354a:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    354c:	cmp	r5, r4
    354e:	bne.n	3534 <Screen::iterate_animation() [clone .part.20]+0x318>
		ratio++;
    3550:	ldr.w	r3, [fp, #464]	; 0x1d0
    3554:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    3556:	cmp	r3, #1
			initialize_seed(_fg_automaton, hue_seeds[0]);
		}
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    3558:	str.w	r3, [fp, #464]	; 0x1d0
		if (ratio == RATIO_GROWTH){
    355c:	beq.w	3888 <Screen::iterate_animation() [clone .part.20]+0x66c>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3560:	movs	r3, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3562:	ldr.w	ip, [pc, #800]	; 3884 <Screen::iterate_animation() [clone .part.20]+0x668>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3566:	str	r3, [sp, #0]
    3568:	str	r3, [sp, #8]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    356a:	ldr	r2, [sp, #8]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    356c:	mov.w	lr, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    3570:	mov.w	r8, #360	; 0x168
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3574:	add.w	r9, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    3578:	add.w	r3, r2, r2, lsl #3
    357c:	mov.w	r9, r9, lsl #3
    3580:	lsls	r3, r3, #3
    3582:	str	r3, [sp, #4]
    3584:	add.w	r3, r9, lr
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3588:	ldr.w	r2, [fp, #444]	; 0x1bc
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    358c:	ldr.w	r1, [fp, #440]	; 0x1b8
    3590:	adds	r3, #6
    3592:	lsls	r3, r3, #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3594:	add	r2, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    3596:	add	r3, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    3598:	ldr	r4, [r2, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    359a:	ldr	r0, [r3, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    359c:	adds	r4, #50	; 0x32
    359e:	ldr	r3, [pc, #720]	; (3870 <Screen::iterate_animation() [clone .part.20]+0x654>)
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35a0:	add.w	r0, r0, r0, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35a4:	smull	r2, r3, r4, r3
    35a8:	asrs	r1, r4, #31
    35aa:	adds	r5, r4, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35ac:	ldr	r3, [pc, #704]	; (3870 <Screen::iterate_animation() [clone .part.20]+0x654>)
    35ae:	smull	r2, r3, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35b2:	rsb	r2, r1, r5, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35b6:	adds	r1, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35b8:	rsb	r2, r2, r2, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35bc:	asrs	r3, r0, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    35be:	subs	r2, r4, r2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    35c0:	rsb	r1, r3, r1, asr #7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    35c4:	cmp	r2, #219	; 0xdb
    35c6:	rsb	r1, r1, r1, lsl #8
    35ca:	sub.w	r1, r0, r1
    35ce:	ble.w	3858 <Screen::iterate_animation() [clone .part.20]+0x63c>
    35d2:	rsb	r2, r2, #255	; 0xff
    35d6:	ldr	r3, [pc, #668]	; (3874 <Screen::iterate_animation() [clone .part.20]+0x658>)
    35d8:	ldr.w	r0, [r3, r2, lsl #2]
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				bri = (*_grow_automaton).brightnessMap(x, y);
				sat = (*_sat_automaton).saturationMap(x, y);	
				if ((*_fg_automaton).can_color(x, y)) {
    35dc:	ldr.w	r3, [fp, #436]	; 0x1b4
    35e0:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    35e4:	ldrb	r4, [r3, #24]
    35e6:	ldr	r2, [r2, #0]
      return _background[x][y];
    35e8:	add	r2, lr
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    35ea:	cmp	r4, #0
    35ec:	beq.w	385c <Screen::iterate_animation() [clone .part.20]+0x640>
      return _background[x][y];
    35f0:	ldr	r4, [sp, #0]
    35f2:	ldrb	r2, [r2, r4]
    35f4:	cbnz	r2, 35fa <Screen::iterate_animation() [clone .part.20]+0x3de>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*5 % 360;
    35f6:	ldr.w	r3, [fp, #432]	; 0x1b0
    35fa:	add.w	r2, r9, lr
    35fe:	ldr.w	r6, [fp, #480]	; 0x1e0
    3602:	add.w	r3, r3, r2, lsl #2
    3606:	ldr	r4, [r3, #28]
    3608:	add.w	r4, r4, r4, lsl #2
    360c:	smull	r2, r3, r4, ip
    3610:	asrs	r2, r4, #31
    3612:	adds	r5, r4, r3
    3614:	ldr.w	r3, [fp, #484]	; 0x1e4
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    3618:	cmp	r3, #0
    361a:	rsb	r5, r2, r5, asr #8
    361e:	mov	r2, r3
    3620:	it	lt
    3622:	addlt	r2, r3, #1
    3624:	mls	r5, r8, r5, r4
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3628:	add	r3, r6
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    362a:	asrs	r2, r2, #1
    362c:	adds	r4, r6, r2
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    362e:	negs	r2, r2
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3630:	subs	r3, r3, r4
    3632:	smull	r6, r7, r2, ip
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    3636:	subs	r6, r5, r4
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3638:	smull	r4, r5, r3, ip
    363c:	add	r7, r2
    363e:	asrs	r4, r2, #31
    3640:	add.w	sl, r3, r5
    3644:	asrs	r5, r3, #31
    3646:	rsb	r7, r4, r7, asr #8
    364a:	rsb	sl, r5, sl, asr #8
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    364e:	smull	r4, r5, r6, ip
    3652:	mls	r2, r8, r7, r2
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    3656:	mls	sl, r8, sl, r3
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    365a:	adds	r4, r6, r5
    365c:	asrs	r3, r6, #31
    365e:	rsb	r2, sl, r2
    3662:	rsb	r3, r3, r4, asr #8
    3666:	cmp.w	r2, #360	; 0x168
    366a:	mls	r3, r8, r3, r6
    366e:	bge.w	382e <Screen::iterate_animation() [clone .part.20]+0x612>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    3672:	mla	r3, r2, r3, r3
    3676:	ldr	r2, [pc, #512]	; (3878 <Screen::iterate_animation() [clone .part.20]+0x65c>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3678:	cmp	r1, #120	; 0x78
    367a:	smull	r4, r2, r2, r3
    367e:	mov.w	r3, r3, asr #31
    3682:	rsb	r3, r3, r2, asr #7
    3686:	add	sl, r3
    3688:	bgt.w	3848 <Screen::iterate_animation() [clone .part.20]+0x62c>
    368c:	movs	r2, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    368e:	cmp	r0, #255	; 0xff
    3690:	beq.n	372e <Screen::iterate_animation() [clone .part.20]+0x512>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3692:	ldr	r3, [pc, #488]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    3694:	mul.w	r0, r2, r0
    switch(hue/60) {
    3698:	smull	r1, r3, r3, sl
    369c:	mov.w	r1, sl, asr #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    36a0:	asrs	r0, r0, #8
    switch(hue/60) {
    36a2:	add	r3, sl
    36a4:	rsb	r3, r1, r3, asr #5
    36a8:	cmp	r3, #5
    36aa:	bhi.w	3866 <Screen::iterate_animation() [clone .part.20]+0x64a>
    36ae:	tbb	[pc, r3]
    36b2:	.short	0xab53
    36b4:	.word	0x19647e9a

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    36b8:	ldrb.w	r3, [fp]
    36bc:	eor.w	r3, r3, #1
    36c0:	b.n	3282 <Screen::iterate_animation() [clone .part.20]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    36c2:	ldr.w	r2, [r9, #4]
    36c6:	add	r1, r2
    36c8:	str.w	r1, [ip]
    36cc:	b.n	334e <Screen::iterate_animation() [clone .part.20]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    36ce:	ldrb.w	r3, [fp]
    36d2:	eor.w	r3, r3, #1
    36d6:	b.n	3418 <Screen::iterate_animation() [clone .part.20]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    36d8:	ldr.w	r2, [r9, #4]
    36dc:	add	r1, r2
    36de:	str.w	r1, [ip]
    36e2:	b.n	34e4 <Screen::iterate_animation() [clone .part.20]+0x2c8>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    36e4:	ldr	r3, [pc, #404]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    36e6:	uxtb	r6, r2
    36e8:	uxtb	r5, r0
    36ea:	smull	r3, r4, r3, sl
    36ee:	subs	r3, r2, r0
    36f0:	add.w	r2, r4, sl
    36f4:	rsb	r1, r1, r2, asr #5
    36f8:	rsb	r1, r1, r1, lsl #4
    36fc:	sub.w	sl, sl, r1, lsl #2
    3700:	rsb	r2, sl, #60	; 0x3c
    3704:	mul.w	r3, r3, r2
    3708:	ldr	r2, [pc, #368]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    370a:	smull	r2, r1, r2, r3
    370e:	asrs	r2, r3, #31
    3710:	add	r3, r1
    3712:	rsb	r3, r2, r3, asr #5
    3716:	adds	r2, r0, r3
    3718:	uxtb	r4, r2
    break;
    }
    *r = colors[0];
    371a:	ldr	r1, [sp, #4]
    371c:	add.w	r3, lr, lr, lsl #1
				}
				
				hue = filter_hue(hue);
				bri = shift_bri(bri);
				
				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    3720:	ldr.w	r2, [fp, #496]	; 0x1f0
    3724:	add	r3, r1
    3726:	adds	r1, r2, r3
    3728:	strb	r6, [r2, r3]
    *g = colors[1];
    372a:	strb	r5, [r1, #1]
    *b = colors[2]; 
    372c:	strb	r4, [r1, #2]
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    372e:	add.w	lr, lr, #1
    3732:	cmp.w	lr, #24
    3736:	bne.w	3584 <Screen::iterate_animation() [clone .part.20]+0x368>
		return result;
	}

	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    373a:	ldr	r3, [sp, #8]
    373c:	ldr	r2, [sp, #0]
    373e:	adds	r3, #1
    3740:	adds	r2, #24
    3742:	cmp	r3, #24
    3744:	str	r3, [sp, #8]
    3746:	str	r2, [sp, #0]
    3748:	bne.w	356a <Screen::iterate_animation() [clone .part.20]+0x34e>
			(*_sat_automaton).iterate_growth();
			ratio = 0;
		}

		gen_color_matrix();
		newFrameReady = true;
    374c:	movs	r3, #1
    374e:	strb.w	r3, [fp, #460]	; 0x1cc
	}
    3752:	add	sp, #68	; 0x44
    3754:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    3758:	subs	r3, r2, r0
    375a:	uxtb	r6, r2
    375c:	uxtb	r4, r0
    375e:	mul.w	sl, sl, r3
    3762:	ldr	r3, [pc, #280]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    3764:	smull	r2, r3, r3, sl
    3768:	mov.w	r2, sl, asr #31
    376c:	add	sl, r3
    376e:	rsb	sl, r2, sl, asr #5
    3772:	add.w	r2, r0, sl
    3776:	uxtb	r5, r2
    3778:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    377a:	ldr	r3, [pc, #256]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    377c:	uxtb	r4, r2
    377e:	smull	r3, r5, r3, sl
    3782:	subs	r3, r2, r0
    3784:	add.w	r2, r5, sl
    3788:	uxtb	r5, r0
    378a:	rsb	r1, r1, r2, asr #5
    378e:	rsb	r1, r1, r1, lsl #4
    3792:	sub.w	sl, sl, r1, lsl #2
    3796:	mul.w	r3, sl, r3
    379a:	ldr	r2, [pc, #224]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    379c:	smull	r2, r1, r2, r3
    37a0:	asrs	r2, r3, #31
    37a2:	add	r3, r1
    37a4:	rsb	r3, r2, r3, asr #5
    37a8:	adds	r2, r0, r3
    37aa:	uxtb	r6, r2
    37ac:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    37ae:	ldr	r3, [pc, #204]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37b0:	uxtb	r4, r2
    37b2:	uxtb	r6, r0
    37b4:	smull	r3, r5, r3, sl
    37b8:	subs	r3, r2, r0
    37ba:	add.w	r2, r5, sl
    37be:	rsb	r1, r1, r2, asr #5
    37c2:	rsb	r1, r1, r1, lsl #4
    37c6:	sub.w	sl, sl, r1, lsl #2
    37ca:	rsb	r2, sl, #60	; 0x3c
    37ce:	mul.w	r3, r3, r2
    37d2:	ldr	r2, [pc, #168]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37d4:	smull	r2, r1, r2, r3
    37d8:	asrs	r2, r3, #31
    37da:	add	r3, r1
    37dc:	rsb	r3, r2, r3, asr #5
    37e0:	adds	r2, r0, r3
    37e2:	uxtb	r5, r2
    37e4:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    37e6:	ldr	r3, [pc, #148]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    37e8:	uxtb	r5, r2
    37ea:	uxtb	r6, r0
    37ec:	smull	r3, r4, r3, sl
    37f0:	subs	r3, r2, r0
    37f2:	add.w	r2, r4, sl
    37f6:	rsb	r1, r1, r2, asr #5
    37fa:	rsb	r1, r1, r1, lsl #4
    37fe:	sub.w	sl, sl, r1, lsl #2
    3802:	mul.w	r3, sl, r3
    3806:	b.n	3708 <Screen::iterate_animation() [clone .part.20]+0x4ec>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    3808:	ldr	r3, [pc, #112]	; (387c <Screen::iterate_animation() [clone .part.20]+0x660>)
    380a:	uxtb	r5, r2
    380c:	smull	r3, r4, r3, sl
    3810:	subs	r3, r2, r0
    3812:	add.w	r2, r4, sl
    3816:	uxtb	r4, r0
    3818:	rsb	r1, r1, r2, asr #5
    381c:	rsb	r1, r1, r1, lsl #4
    3820:	sub.w	sl, sl, r1, lsl #2
    3824:	rsb	r2, sl, #60	; 0x3c
    3828:	mul.w	r3, r3, r2
    382c:	b.n	379a <Screen::iterate_animation() [clone .part.20]+0x57e>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    382e:	mul.w	r3, r2, r3
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    3832:	cmp	r1, #120	; 0x78
    3834:	smull	r2, r4, ip, r3
    3838:	mov.w	r2, r3, asr #31
    383c:	add	r3, r4
    383e:	rsb	r3, r2, r3, asr #8
    3842:	add	sl, r3
    3844:	ble.w	368c <Screen::iterate_animation() [clone .part.20]+0x470>
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    3848:	adds	r1, #70	; 0x46
    384a:	ldr	r3, [pc, #40]	; (3874 <Screen::iterate_animation() [clone .part.20]+0x658>)
    384c:	cmp	r1, #255	; 0xff
    384e:	it	ge
    3850:	movge	r1, #255	; 0xff
    3852:	ldr.w	r2, [r3, r1, lsl #2]
    3856:	b.n	368e <Screen::iterate_animation() [clone .part.20]+0x472>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    3858:	movs	r0, #5
    385a:	b.n	35dc <Screen::iterate_animation() [clone .part.20]+0x3c0>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    385c:	ldr	r4, [sp, #0]
    385e:	ldrb	r2, [r2, r4]
    3860:	eor.w	r2, r2, #1
    3864:	b.n	35f4 <Screen::iterate_animation() [clone .part.20]+0x3d8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    3866:	movs	r4, #0
    3868:	mov	r5, r4
    386a:	mov	r6, r4
    386c:	b.n	371a <Screen::iterate_animation() [clone .part.20]+0x4fe>
    386e:	nop
    3870:	.word	0x80808081
    3874:	.word	0x200001c0
    3878:	.word	0x5ac5242b
    387c:	.word	0x88888889
    3880:	.word	0x2aaaaaab
    3884:	.word	0xb60b60b7
		
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    3888:	ldr.w	sl, [fp, #440]	; 0x1b8
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    388c:	movs	r2, #32
    388e:	mov.w	r8, #2
    3892:	ldr.w	r9, [pc, #732]	; 3b70 <Screen::iterate_animation() [clone .part.20]+0x954>
    3896:	addw	r3, sl, #2332	; 0x91c
    389a:	movs	r1, #0
    389c:	add.w	r0, sp, r2
    38a0:	str	r3, [sp, #4]
    38a2:	bl	ebac <memset>
    38a6:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    38aa:	bl	5d0 <updateBeams()>
  updateScreensFade();
    38ae:	bl	2c88 <updateScreensFade()>
    38b2:	ldr.w	r3, [sl]
    38b6:	ldr	r2, [sp, #4]
    38b8:	mov.w	ip, #4294967295
    38bc:	str	r3, [sp, #8]
    38be:	ldr.w	r3, [sl, #12]
    38c2:	mov	fp, r2
    38c4:	str	r3, [sp, #12]
    38c6:	subw	r3, r2, #2308	; 0x904
    38ca:	str	r3, [sp, #0]
    38cc:	sub.w	r3, r8, #3
    38d0:	str	r3, [sp, #16]
    38d2:	ldr	r6, [sp, #16]
    38d4:	add.w	lr, sp, #32
    38d8:	add.w	r7, ip, #3
    38dc:	smull	r3, r2, r9, r6
    38e0:	asrs	r3, r6, #31
    38e2:	mov	r4, lr
    38e4:	mov	r1, ip
    38e6:	rsb	r3, r3, r2, asr #2
    38ea:	add.w	r3, r3, r3, lsl #1
    38ee:	sub.w	r3, r6, r3, lsl #3
    38f2:	adds	r3, #24
    38f4:	smull	r2, r0, r9, r3
    38f8:	asrs	r2, r3, #31
    38fa:	rsb	r0, r2, r0, asr #2
    38fe:	add.w	r0, r0, r0, lsl #1
    3902:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3906:	add.w	r0, r0, r0, lsl #1
    390a:	lsls	r0, r0, #3
    390c:	smull	r3, r2, r9, r1
    3910:	asrs	r3, r1, #31
    3912:	rsb	r3, r3, r2, asr #2
    3916:	add.w	r3, r3, r3, lsl #1
    391a:	sub.w	r3, r1, r3, lsl #3
    391e:	adds	r1, #1
    3920:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3922:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3924:	smull	r2, r5, r9, r3
    3928:	mov.w	r2, r3, asr #31
    392c:	rsb	r2, r2, r5, asr #2
    3930:	add.w	r2, r2, r2, lsl #1
    3934:	sub.w	r3, r3, r2, lsl #3
    3938:	add	r3, r0
    393a:	add.w	r3, sl, r3, lsl #2
    393e:	ldr	r3, [r3, #28]
    3940:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3944:	bne.n	390c <Screen::iterate_animation() [clone .part.20]+0x6f0>
    3946:	adds	r6, #1
    3948:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    394c:	cmp	r8, r6
    394e:	bne.n	38dc <Screen::iterate_animation() [clone .part.20]+0x6c0>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3950:	ldr	r3, [sp, #0]
    3952:	movs	r1, #1
    3954:	ldr.w	r0, [r3, #4]!
    3958:	str	r3, [sp, #0]
    395a:	ldr	r3, [sp, #8]
    395c:	adds	r5, r0, r3
    395e:	movs	r4, #0
    3960:	mov	r3, r4
    3962:	b.n	396a <Screen::iterate_animation() [clone .part.20]+0x74e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3964:	adds	r3, #1
    3966:	cmp	r3, #8
    3968:	beq.n	3980 <Screen::iterate_animation() [clone .part.20]+0x764>
          if ((i >> j) % 2 == 1){
    396a:	asr.w	r2, r1, r3
    396e:	lsls	r6, r2, #31
    3970:	bpl.n	3964 <Screen::iterate_animation() [clone .part.20]+0x748>
            sum += neighbours[j];
    3972:	add	r2, sp, #32
    3974:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3978:	adds	r3, #1
    397a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    397c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    397e:	bne.n	396a <Screen::iterate_animation() [clone .part.20]+0x74e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3980:	cmp	r5, r4
    3982:	beq.w	3b56 <Screen::iterate_animation() [clone .part.20]+0x93a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3986:	adds	r1, #1
    3988:	cmp.w	r1, #256	; 0x100
    398c:	bne.n	395e <Screen::iterate_animation() [clone .part.20]+0x742>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    398e:	ldr.w	r3, [sl, #8]
    3992:	subs	r0, r0, r3
    3994:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3998:	ldr	r2, [sp, #12]
    399a:	add.w	ip, ip, #1
    399e:	add.w	fp, fp, #4
    39a2:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    39a4:	it	gt
    39a6:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    39aa:	cmp.w	ip, #23
    39ae:	bne.n	38d2 <Screen::iterate_animation() [clone .part.20]+0x6b6>
    39b0:	ldr	r3, [sp, #4]
    39b2:	add.w	r8, r8, #1
    39b6:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    39b8:	cmp.w	r8, #26
    39bc:	str	r3, [sp, #4]
    39be:	bne.w	38aa <Screen::iterate_animation() [clone .part.20]+0x68e>
    39c2:	movw	r0, #4632	; 0x1218
    39c6:	ldr.w	fp, [sp, #20]
    39ca:	addw	r3, sl, #2328	; 0x918
    39ce:	add	r0, sl
    39d0:	sub.w	r2, r3, #2304	; 0x900
    39d4:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    39d8:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    39da:	ldr.w	r4, [r1, #4]!
    39de:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    39e2:	cmp	r5, r2
    39e4:	bne.n	39da <Screen::iterate_animation() [clone .part.20]+0x7be>
    39e6:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    39e8:	cmp	r0, r3
    39ea:	bne.n	39d0 <Screen::iterate_animation() [clone .part.20]+0x7b4>
			(*_sat_automaton).iterate_growth();
    39ec:	ldr.w	sl, [fp, #444]	; 0x1bc
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    39f0:	movs	r2, #32
    39f2:	mov.w	r8, #2
    39f6:	ldr.w	r9, [pc, #376]	; 3b70 <Screen::iterate_animation() [clone .part.20]+0x954>
    39fa:	addw	r3, sl, #2332	; 0x91c
    39fe:	movs	r1, #0
    3a00:	add.w	r0, sp, r2
    3a04:	str	r3, [sp, #4]
    3a06:	bl	ebac <memset>
    3a0a:	str.w	fp, [sp, #20]
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3a0e:	bl	5d0 <updateBeams()>
  updateScreensFade();
    3a12:	bl	2c88 <updateScreensFade()>
    3a16:	ldr.w	r3, [sl]
    3a1a:	ldr	r2, [sp, #4]
    3a1c:	mov.w	ip, #4294967295
    3a20:	str	r3, [sp, #8]
    3a22:	ldr.w	r3, [sl, #12]
    3a26:	mov	fp, r2
    3a28:	str	r3, [sp, #12]
    3a2a:	subw	r3, r2, #2308	; 0x904
    3a2e:	str	r3, [sp, #0]
    3a30:	sub.w	r3, r8, #3
    3a34:	str	r3, [sp, #16]
    3a36:	ldr	r6, [sp, #16]
    3a38:	add.w	lr, sp, #32
    3a3c:	add.w	r7, ip, #3
    3a40:	smull	r3, r2, r9, r6
    3a44:	asrs	r3, r6, #31
    3a46:	mov	r4, lr
    3a48:	mov	r1, ip
    3a4a:	rsb	r3, r3, r2, asr #2
    3a4e:	add.w	r3, r3, r3, lsl #1
    3a52:	sub.w	r3, r6, r3, lsl #3
    3a56:	adds	r3, #24
    3a58:	smull	r2, r0, r9, r3
    3a5c:	asrs	r2, r3, #31
    3a5e:	rsb	r0, r2, r0, asr #2
    3a62:	add.w	r0, r0, r0, lsl #1
    3a66:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3a6a:	add.w	r0, r0, r0, lsl #1
    3a6e:	lsls	r0, r0, #3
    3a70:	smull	r3, r2, r9, r1
    3a74:	asrs	r3, r1, #31
    3a76:	rsb	r3, r3, r2, asr #2
    3a7a:	add.w	r3, r3, r3, lsl #1
    3a7e:	sub.w	r3, r1, r3, lsl #3
    3a82:	adds	r1, #1
    3a84:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3a86:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3a88:	smull	r2, r5, r9, r3
    3a8c:	mov.w	r2, r3, asr #31
    3a90:	rsb	r2, r2, r5, asr #2
    3a94:	add.w	r2, r2, r2, lsl #1
    3a98:	sub.w	r3, r3, r2, lsl #3
    3a9c:	add	r3, r0
    3a9e:	add.w	r3, sl, r3, lsl #2
    3aa2:	ldr	r3, [r3, #28]
    3aa4:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3aa8:	bne.n	3a70 <Screen::iterate_animation() [clone .part.20]+0x854>
    3aaa:	adds	r6, #1
    3aac:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3ab0:	cmp	r6, r8
    3ab2:	bne.n	3a40 <Screen::iterate_animation() [clone .part.20]+0x824>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3ab4:	ldr	r3, [sp, #0]
    3ab6:	movs	r1, #1
    3ab8:	ldr.w	r0, [r3, #4]!
    3abc:	str	r3, [sp, #0]
    3abe:	ldr	r3, [sp, #8]
    3ac0:	adds	r5, r0, r3
    3ac2:	movs	r4, #0
    3ac4:	mov	r3, r4
    3ac6:	b.n	3ace <Screen::iterate_animation() [clone .part.20]+0x8b2>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3ac8:	adds	r3, #1
    3aca:	cmp	r3, #8
    3acc:	beq.n	3ae4 <Screen::iterate_animation() [clone .part.20]+0x8c8>
          if ((i >> j) % 2 == 1){
    3ace:	asr.w	r2, r1, r3
    3ad2:	lsls	r2, r2, #31
    3ad4:	bpl.n	3ac8 <Screen::iterate_animation() [clone .part.20]+0x8ac>
            sum += neighbours[j];
    3ad6:	add	r2, sp, #32
    3ad8:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3adc:	adds	r3, #1
    3ade:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3ae0:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3ae2:	bne.n	3ace <Screen::iterate_animation() [clone .part.20]+0x8b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3ae4:	cmp	r5, r4
    3ae6:	beq.n	3b62 <Screen::iterate_animation() [clone .part.20]+0x946>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3ae8:	adds	r1, #1
    3aea:	cmp.w	r1, #256	; 0x100
    3aee:	bne.n	3ac2 <Screen::iterate_animation() [clone .part.20]+0x8a6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3af0:	ldr.w	r3, [sl, #8]
    3af4:	subs	r0, r0, r3
    3af6:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    3afa:	ldr	r2, [sp, #12]
    3afc:	add.w	ip, ip, #1
    3b00:	add.w	fp, fp, #4
    3b04:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    3b06:	it	gt
    3b08:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3b0c:	cmp.w	ip, #23
    3b10:	bne.n	3a36 <Screen::iterate_animation() [clone .part.20]+0x81a>
    3b12:	ldr	r3, [sp, #4]
    3b14:	add.w	r8, r8, #1
    3b18:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3b1a:	cmp.w	r8, #26
    3b1e:	str	r3, [sp, #4]
    3b20:	bne.w	3a0e <Screen::iterate_animation() [clone .part.20]+0x7f2>
    3b24:	movw	r0, #4632	; 0x1218
    3b28:	ldr.w	fp, [sp, #20]
    3b2c:	addw	r3, sl, #2328	; 0x918
    3b30:	add	r0, sl
    3b32:	sub.w	r2, r3, #2304	; 0x900
    3b36:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3b3a:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    3b3c:	ldr.w	r4, [r1, #4]!
    3b40:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3b44:	cmp	r5, r2
    3b46:	bne.n	3b3c <Screen::iterate_animation() [clone .part.20]+0x920>
    3b48:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    3b4a:	cmp	r0, r3
    3b4c:	bne.n	3b32 <Screen::iterate_animation() [clone .part.20]+0x916>
			ratio = 0;
    3b4e:	movs	r3, #0
    3b50:	str.w	r3, [fp, #464]	; 0x1d0
    3b54:	b.n	3560 <Screen::iterate_animation() [clone .part.20]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3b56:	ldr.w	r2, [sl, #4]
    3b5a:	add	r0, r2
    3b5c:	str.w	r0, [fp]
    3b60:	b.n	3998 <Screen::iterate_animation() [clone .part.20]+0x77c>
    3b62:	ldr.w	r2, [sl, #4]
    3b66:	add	r0, r2
    3b68:	str.w	r0, [fp]
    3b6c:	b.n	3afa <Screen::iterate_animation() [clone .part.20]+0x8de>
    3b6e:	nop
    3b70:	.word	0x2aaaaaab
    3b74:	.word	0x00000000

00003b78 <regular_animation()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3b78:	ldr	r3, [pc, #724]	; (3e50 <regular_animation()+0x2d8>)
  screen_B.init_screen();
  sinceAutomatonInit = 0;
}


void regular_animation(){
    3b7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b7e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b80:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3b82:	ldr	r1, [r3, #40]	; 0x28
    3b84:	vpush	{d8-d9}
    3b88:	sub	sp, #68	; 0x44
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b8a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3b8c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b8e:	ldr	r6, [pc, #704]	; (3e50 <regular_animation()+0x2d8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3b90:	cmp	r3, r1
    3b92:	it	eq
    3b94:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3b96:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3b98:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3b9a:	ite	eq
    3b9c:	moveq	r5, #1
    3b9e:	movne	r5, #0
    3ba0:	cmp	r5, #0
    3ba2:	beq.n	3b8a <regular_animation()+0x12>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL && sinceAutomatonInit > 2000){
    3ba4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    3ba6:	ldr	r4, [pc, #684]	; (3e54 <regular_animation()+0x2dc>)
    3ba8:	orr.w	r1, r1, r2, lsl #27
    3bac:	ldr	r3, [r4, #0]
    3bae:	vmov	s15, r1
    3bb2:	vldr	d5, [pc, #660]	; 3e48 <regular_animation()+0x2d0>
    3bb6:	vcvt.f64.u32	d7, s15
    3bba:	vdiv.f64	d6, d7, d5
    3bbe:	vcvt.u32.f64	s12, d6
    3bc2:	vmov	r2, s12
    3bc6:	subs	r3, r2, r3
    3bc8:	cmp.w	r3, #800	; 0x320
    3bcc:	bls.n	3c18 <regular_animation()+0xa0>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3bce:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd0:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3bd2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd4:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3bd6:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3bd8:	ldr	r7, [pc, #628]	; (3e50 <regular_animation()+0x2d8>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    3bda:	cmp	r3, r1
    3bdc:	it	eq
    3bde:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3be0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3be2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3be4:	ite	eq
    3be6:	moveq	r6, #1
    3be8:	movne	r6, #0
    3bea:	cmp	r6, #0
    3bec:	beq.n	3bd4 <regular_animation()+0x5c>
    3bee:	lsrs	r1, r3, #5
    3bf0:	ldr	r3, [pc, #612]	; (3e58 <regular_animation()+0x2e0>)
    3bf2:	orr.w	r1, r1, r2, lsl #27
    3bf6:	ldr	r3, [r3, #0]
    3bf8:	vmov	s15, r1
    3bfc:	vldr	d5, [pc, #584]	; 3e48 <regular_animation()+0x2d0>
    3c00:	vcvt.f64.u32	d7, s15
    3c04:	vdiv.f64	d6, d7, d5
    3c08:	vcvt.u32.f64	s12, d6
    3c0c:	vmov	r2, s12
    3c10:	subs	r3, r2, r3
    3c12:	cmp.w	r3, #2000	; 0x7d0
    3c16:	bhi.n	3cd2 <regular_animation()+0x15a>
    3c18:	ldr	r3, [pc, #576]	; (3e5c <regular_animation()+0x2e4>)
    3c1a:	ldr.w	fp, [pc, #580]	; 3e60 <regular_animation()+0x2e8>
    3c1e:	str	r3, [sp, #24]
	}


	void iterate_animation(){
		
		if (newFrameReady) return;
    3c20:	ldr	r3, [sp, #24]
    3c22:	ldr	r2, [pc, #568]	; (3e5c <regular_animation()+0x2e4>)
    3c24:	ldrb.w	r3, [r3, #460]	; 0x1cc
    3c28:	cbnz	r3, 3c72 <regular_animation()+0xfa>

		if (allZero(_grow_automaton)){
    3c2a:	ldr.w	r7, [r2, #440]	; 0x1b8
    3c2e:	add.w	r2, r7, #120	; 0x78
    3c32:	addw	r1, r7, #2424	; 0x978
    3c36:	sub.w	r3, r2, #96	; 0x60
    3c3a:	b.n	3c42 <regular_animation()+0xca>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c3c:	cmp	r3, r2
    3c3e:	beq.w	3ef2 <regular_animation()+0x37a>
				if ((*automaton).cells[i][j] != 0){
    3c42:	ldr.w	r4, [r3, #4]!
    3c46:	cmp	r4, #0
    3c48:	beq.n	3c3c <regular_animation()+0xc4>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    3c4a:	ldr	r3, [sp, #24]
    3c4c:	ldr.w	r7, [r3, #436]	; 0x1b4
    3c50:	add.w	r2, r7, #120	; 0x78
    3c54:	addw	r1, r7, #2424	; 0x978
    3c58:	sub.w	r3, r2, #96	; 0x60
    3c5c:	b.n	3c64 <regular_animation()+0xec>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c5e:	cmp	r3, r2
    3c60:	beq.w	3f8a <regular_animation()+0x412>
				if ((*automaton).cells[i][j] != 0){
    3c64:	ldr.w	r6, [r3, #4]!
    3c68:	cmp	r6, #0
    3c6a:	beq.n	3c5e <regular_animation()+0xe6>
    3c6c:	ldr	r0, [pc, #492]	; (3e5c <regular_animation()+0x2e4>)
    3c6e:	bl	321c <Screen::iterate_animation() [clone .part.20]>
	}


	void iterate_animation(){
		
		if (newFrameReady) return;
    3c72:	ldrb.w	r3, [fp, #460]	; 0x1cc
    3c76:	ldr	r2, [pc, #488]	; (3e60 <regular_animation()+0x2e8>)
    3c78:	cbnz	r3, 3cc0 <regular_animation()+0x148>

		if (allZero(_grow_automaton)){
    3c7a:	ldr.w	r7, [r2, #440]	; 0x1b8
    3c7e:	add.w	r2, r7, #120	; 0x78
    3c82:	addw	r1, r7, #2424	; 0x978
    3c86:	sub.w	r3, r2, #96	; 0x60
    3c8a:	b.n	3c92 <regular_animation()+0x11a>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3c8c:	cmp	r2, r3
    3c8e:	beq.w	4016 <regular_animation()+0x49e>
				if ((*automaton).cells[i][j] != 0){
    3c92:	ldr.w	r4, [r3, #4]!
    3c96:	cmp	r4, #0
    3c98:	beq.n	3c8c <regular_animation()+0x114>
		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
    3c9a:	ldr.w	r7, [fp, #436]	; 0x1b4
    3c9e:	add.w	r2, r7, #120	; 0x78
    3ca2:	addw	r1, r7, #2424	; 0x978
    3ca6:	sub.w	r3, r2, #96	; 0x60
    3caa:	b.n	3cb2 <regular_animation()+0x13a>
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    3cac:	cmp	r3, r2
    3cae:	beq.w	3e70 <regular_animation()+0x2f8>
				if ((*automaton).cells[i][j] != 0){
    3cb2:	ldr.w	r4, [r3, #4]!
    3cb6:	cmp	r4, #0
    3cb8:	beq.n	3cac <regular_animation()+0x134>
    3cba:	ldr	r0, [pc, #420]	; (3e60 <regular_animation()+0x2e8>)
    3cbc:	bl	321c <Screen::iterate_animation() [clone .part.20]>
    if(screen_B.updateFade(1))  screenFadeUpdateSwitcher = !screenFadeUpdateSwitcher;
  }
}

void renderInterrupt() {
  updateBeams();
    3cc0:	bl	5d0 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt(); 
}
    3cc4:	add	sp, #68	; 0x44
    3cc6:	vpop	{d8-d9}
    3cca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    3cce:	b.w	2c88 <updateScreensFade()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    3cd2:	ldr	r5, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3cd4:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    3cd6:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3cd8:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    3cda:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    3cdc:	cmp	r3, r1
    3cde:	it	eq
    3ce0:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    3ce2:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    3ce4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    3ce6:	ite	eq
    3ce8:	moveq	r6, #1
    3cea:	movne	r6, #0
    3cec:	cmp	r6, #0
    3cee:	beq.n	3cd8 <regular_animation()+0x160>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    3cf0:	lsrs	r3, r3, #5


void regular_animation(){
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL && sinceAutomatonInit > 2000){
    sinceBeam = 0;
    int rand1 = random(0, 2);
    3cf2:	movs	r0, #0
    3cf4:	movs	r1, #2
    3cf6:	orr.w	r3, r3, r2, lsl #27

	public:
		

Color(){
	RGB_updated = false;
    3cfa:	mov	r6, r0
    3cfc:	vmov	s15, r3
    3d00:	vldr	d5, [pc, #324]	; 3e48 <regular_animation()+0x2d0>
    3d04:	vcvt.f64.u32	d7, s15
    3d08:	vdiv.f64	d6, d7, d5
    3d0c:	vcvt.u32.f64	s12, d6
    3d10:	vstr	s12, [r4]
    3d14:	bl	dab8 <random(long, long)>
    3d18:	mov	r5, r0
    int rand2 = random(0, 2);
    3d1a:	movs	r1, #2
    3d1c:	mov	r0, r6
    3d1e:	bl	dab8 <random(long, long)>
    3d22:	mov	r4, r0
    Color color1, color2;
    if (rand1 == 0){
    3d24:	cmp	r5, #0
    3d26:	bne.w	40ac <regular_animation()+0x534>
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    3d2a:	ldr	r3, [pc, #304]	; (3e5c <regular_animation()+0x2e4>)
    3d2c:	mov	r1, r3
    3d2e:	str	r3, [sp, #24]
    3d30:	ldr.w	r3, [r3, #480]	; 0x1e0
    3d34:	ldr.w	r1, [r1, #484]	; 0x1e4
    3d38:	mov	r0, r3
    3d3a:	add	r1, r3
    3d3c:	bl	dab8 <random(long, long)>
    3d40:	movs	r1, #75	; 0x4b
    3d42:	mov	r6, r0
    3d44:	movs	r0, #50	; 0x32
    3d46:	bl	dab8 <random(long, long)>
    3d4a:	movs	r1, #80	; 0x50
    3d4c:	mov	r7, r0
    3d4e:	movs	r0, #55	; 0x37
    3d50:	bl	dab8 <random(long, long)>
    3d54:	add.w	r1, r6, #720	; 0x2d0
    3d58:	ldr	r2, [pc, #264]	; (3e64 <regular_animation()+0x2ec>)
    3d5a:	mov.w	r6, #360	; 0x168
    3d5e:	lsrs	r3, r1, #3
    3d60:	strb.w	r0, [sp, #41]	; 0x29
    3d64:	movs	r0, #1
    3d66:	strb.w	r7, [sp, #40]	; 0x28
    3d6a:	umull	r3, r2, r2, r3
    3d6e:	strb.w	r5, [sp, #44]	; 0x2c
    3d72:	lsrs	r2, r2, #2
    3d74:	strb.w	r0, [sp, #45]	; 0x2d
    3d78:	mls	r3, r6, r2, r1
    3d7c:	str	r3, [sp, #36]	; 0x24
    } else {
      color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    }

    if (rand2 == 0){
    3d7e:	cmp	r4, #0
    3d80:	bne.w	40fe <regular_animation()+0x586>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    3d84:	ldr.w	fp, [pc, #216]	; 3e60 <regular_animation()+0x2e8>
    3d88:	ldr.w	r3, [fp, #480]	; 0x1e0
    3d8c:	ldr.w	r1, [fp, #484]	; 0x1e4
    3d90:	mov	r0, r3
    3d92:	add	r1, r3
    3d94:	bl	dab8 <random(long, long)>
    3d98:	movs	r1, #75	; 0x4b
    3d9a:	mov	r6, r0
    3d9c:	movs	r0, #50	; 0x32
    3d9e:	bl	dab8 <random(long, long)>
    3da2:	movs	r1, #80	; 0x50
    3da4:	mov	r7, r0
    3da6:	movs	r0, #55	; 0x37
    3da8:	bl	dab8 <random(long, long)>
    3dac:	add.w	r1, r6, #720	; 0x2d0
    3db0:	ldr	r2, [pc, #176]	; (3e64 <regular_animation()+0x2ec>)
    3db2:	mov.w	r6, #360	; 0x168
    3db6:	lsrs	r3, r1, #3
    3db8:	strb.w	r0, [sp, #57]	; 0x39
    3dbc:	movs	r0, #1
    3dbe:	strb.w	r7, [sp, #56]	; 0x38
    3dc2:	umull	r3, r2, r2, r3
    3dc6:	strb.w	r4, [sp, #60]	; 0x3c
    3dca:	lsrs	r2, r2, #2
    3dcc:	strb.w	r0, [sp, #61]	; 0x3d
    3dd0:	mls	r3, r6, r2, r1
    3dd4:	str	r3, [sp, #52]	; 0x34
    } else {
      color2 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    }
    newBeam(&synapse_A, rand1, color1, random(3, 30),random(1000,6000));
    3dd6:	movs	r1, #30
    3dd8:	movs	r0, #3
    3dda:	bl	dab8 <random(long, long)>
    3dde:	movw	r1, #6000	; 0x1770
    3de2:	vmov	s16, r0
    3de6:	mov.w	r0, #1000	; 0x3e8
    3dea:	bl	dab8 <random(long, long)>
    3dee:	add	r2, sp, #40	; 0x28
    3df0:	str	r0, [sp, #8]
    3df2:	add	r3, sp, #32
    3df4:	vcvt.f32.s32	s0, s16
    3df8:	ldmia.w	r2, {r0, r1}
    3dfc:	ldmia	r3, {r2, r3}
    3dfe:	stmia.w	sp, {r0, r1}
    3e02:	adds	r1, r5, #0
    3e04:	ldr	r0, [pc, #96]	; (3e68 <regular_animation()+0x2f0>)
    3e06:	it	ne
    3e08:	movne	r1, #1
    3e0a:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_B, rand2, color2, random(3, 30),random(1000,6000));
    3e0e:	movs	r1, #30
    3e10:	movs	r0, #3
    3e12:	bl	dab8 <random(long, long)>
    3e16:	movw	r1, #6000	; 0x1770
    3e1a:	vmov	s16, r0
    3e1e:	mov.w	r0, #1000	; 0x3e8
    3e22:	bl	dab8 <random(long, long)>
    3e26:	add	r2, sp, #64	; 0x40
    3e28:	str	r0, [sp, #8]
    3e2a:	add	r3, sp, #48	; 0x30
    3e2c:	vcvt.f32.s32	s0, s16
    3e30:	ldmdb	r2, {r0, r1}
    3e34:	ldmia	r3, {r2, r3}
    3e36:	stmia.w	sp, {r0, r1}
    3e3a:	adds	r1, r4, #0
    3e3c:	ldr	r0, [pc, #44]	; (3e6c <regular_animation()+0x2f4>)
    3e3e:	it	ne
    3e40:	movne	r1, #1
    3e42:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    3e46:	b.n	3c20 <regular_animation()+0xa8>
    3e48:	.word	0xd2f1a9fc
    3e4c:	.word	0x3ff0624d
    3e50:	.word	0x400d4000
    3e54:	.word	0x20002c1c
    3e58:	.word	0x20007a60
    3e5c:	.word	0x20005074
    3e60:	.word	0x20005268
    3e64:	.word	0x16c16c17
    3e68:	.word	0x20008ca4
    3e6c:	.word	0x20008cb8
    3e70:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3e74:	cmp	r2, r1
    3e76:	bne.w	3ca6 <regular_animation()+0x12e>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3e7a:	movs	r1, #8
    3e7c:	mov	r0, r4
    3e7e:	bl	dab8 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3e82:	adds	r1, r0, #1
    3e84:	ldr.w	r2, [fp, #452]	; 0x1c4
    3e88:	movw	r3, #4636	; 0x121c
    3e8c:	add.w	r1, r1, r1, lsl #1
    3e90:	ldr.w	r6, [fp, #456]	; 0x1c8
    3e94:	str	r2, [r7, r3]
    3e96:	add.w	r0, r0, r0, lsl #1
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3e9a:	ldr.w	r2, [fp, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3e9e:	lsls	r1, r1, #3
    3ea0:	add.w	r3, fp, r0, lsl #3
    3ea4:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3ea8:	add.w	lr, r2, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3eac:	add.w	r2, fp, r1
    3eb0:	ldr.w	r5, [fp, r1]
    3eb4:	ldr	r2, [r2, #4]
    3eb6:	ldr	r0, [r3, #32]
    3eb8:	ldr	r1, [r3, #36]	; 0x24
    3eba:	str	r2, [r7, #4]
    3ebc:	ldr	r2, [r3, #40]	; 0x28
    3ebe:	ldr	r3, [r3, #44]	; 0x2c
    3ec0:	str	r5, [r7, #0]
    3ec2:	str	r0, [r7, #8]
    3ec4:	str	r1, [r7, #12]
    3ec6:	str	r2, [r7, #16]
    3ec8:	str	r3, [r7, #20]
    3eca:	strb	r4, [r7, #24]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3ecc:	ldr.w	r5, [fp, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3ed0:	str.w	r6, [ip]
    3ed4:	ldr.w	r6, [fp, #364]	; 0x16c
    3ed8:	ldrb.w	fp, [fp, #368]	; 0x170
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3edc:	cmp.w	lr, #4
    3ee0:	bhi.w	4b12 <regular_animation()+0xf9a>
    3ee4:	tbh	[pc, lr, lsl #1]
    3ee8:	.word	0x043d047a
    3eec:	.word	0x040c03b7
    3ef0:	.short	0x037a
    3ef2:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3ef6:	cmp	r2, r1
    3ef8:	bne.w	3c36 <regular_animation()+0xbe>
	void iterate_animation(){
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    3efc:	movs	r1, #8
    3efe:	mov	r0, r4
    3f00:	bl	dab8 <random(long, long)>
    3f04:	ldr	r6, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f06:	add.w	r5, r0, r0, lsl #1
    3f0a:	movw	r2, #4636	; 0x121c
    3f0e:	ldr.w	r1, [r6, #452]	; 0x1c4
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f12:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f14:	add.w	r5, r6, r5, lsl #3
    3f18:	ldr.w	r3, [r6, #456]	; 0x1c8
    3f1c:	str	r1, [r7, r2]
    3f1e:	add.w	lr, r7, #4640	; 0x1220
    3f22:	ldr.w	r6, [r5, #208]	; 0xd0
    3f26:	mov.w	r9, #1
    3f2a:	ldr.w	r4, [r5, #200]	; 0xc8
    3f2e:	ldr.w	r1, [r5, #196]	; 0xc4
    3f32:	ldr.w	r2, [r5, #204]	; 0xcc
    3f36:	str	r6, [r7, #16]
    3f38:	ldr.w	r6, [r5, #212]	; 0xd4
    3f3c:	ldr.w	r5, [r5, #192]	; 0xc0
    3f40:	str	r4, [r7, #8]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f42:	ldr	r4, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f44:	str	r1, [r7, #4]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f46:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f48:	str	r5, [r7, #0]
    3f4a:	str	r2, [r7, #12]
    3f4c:	str	r6, [r7, #20]
    3f4e:	strb.w	r9, [r7, #24]
    3f52:	str.w	r3, [lr]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    3f56:	ldr.w	r5, [r4, #440]	; 0x1b8
    3f5a:	bl	dab8 <random(long, long)>
    3f5e:	add.w	r0, r0, r0, lsl #1
    3f62:	add.w	r3, r4, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3f66:	ldr.w	r2, [r3, #372]	; 0x174
    3f6a:	add.w	r3, r3, #372	; 0x174
    3f6e:	subs	r2, #1
    3f70:	ldr	r4, [r3, #4]
    3f72:	ldrb.w	sl, [r3, #8]
    3f76:	cmp	r2, #4
    3f78:	bhi.w	4b7c <regular_animation()+0x1004>
    3f7c:	tbh	[pc, r2, lsl #1]
    3f80:	.word	0x02d0030e
    3f84:	.word	0x02420278
    3f88:	.short	0x0205
    3f8a:	add.w	r2, r3, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    3f8e:	cmp	r2, r1
    3f90:	bne.w	3c58 <regular_animation()+0xe0>
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    3f94:	movs	r1, #8
    3f96:	mov	r0, r6
    3f98:	bl	dab8 <random(long, long)>
    3f9c:	ldr	r5, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3f9e:	movw	r1, #4636	; 0x121c
    3fa2:	adds	r2, r0, #1
    3fa4:	ldr.w	r3, [r5, #452]	; 0x1c4
    3fa8:	add.w	r0, r0, r0, lsl #1
    3fac:	add.w	r2, r2, r2, lsl #1
    3fb0:	ldr.w	r4, [r5, #456]	; 0x1c8
    3fb4:	str	r3, [r7, r1]
    3fb6:	add.w	sl, r5, r0, lsl #3
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3fba:	ldr.w	r3, [r5, #360]	; 0x168
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fbe:	lsls	r2, r2, #3
    3fc0:	ldr.w	r1, [sl, #36]	; 0x24
    3fc4:	add.w	ip, r7, #4640	; 0x1220
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    3fc8:	add.w	lr, r3, #4294967295
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fcc:	mov	r3, r5
    3fce:	ldr.w	r0, [sl, #32]
    3fd2:	add	r3, r2
    3fd4:	ldr	r2, [r5, r2]
    3fd6:	ldr	r5, [r3, #4]
    3fd8:	str	r2, [r7, #0]
    3fda:	ldr.w	r3, [sl, #44]	; 0x2c
    3fde:	ldr.w	r2, [sl, #40]	; 0x28
    3fe2:	str	r1, [r7, #12]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3fe4:	ldr	r1, [sp, #24]
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3fe6:	str	r5, [r7, #4]
    3fe8:	strb	r6, [r7, #24]
    3fea:	str	r0, [r7, #8]
    3fec:	str	r2, [r7, #16]
    3fee:	str	r3, [r7, #20]
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
		}

		if (allZero(_fg_automaton)){
			initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
			initialize_seed(_fg_automaton, hue_seeds[0]);
    3ff0:	ldr.w	r5, [r1, #436]	; 0x1b4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    3ff4:	str.w	r4, [ip]
    3ff8:	ldr.w	r6, [r1, #364]	; 0x16c
    3ffc:	ldrb.w	sl, [r1, #368]	; 0x170
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4000:	cmp.w	lr, #4
    4004:	bhi.w	4c54 <regular_animation()+0x10dc>
    4008:	tbh	[pc, lr, lsl #1]
    400c:	.word	0x016301a0
    4010:	.word	0x00de010d
    4014:	.short	0x00a1
    4016:	adds	r2, #96	; 0x60
		gen_color_matrix();
		newFrameReady = true;
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    4018:	cmp	r2, r1
    401a:	bne.w	3c86 <regular_animation()+0x10e>
	void iterate_animation(){
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
    401e:	movs	r1, #8
    4020:	mov	r0, r4
    4022:	bl	dab8 <random(long, long)>
    4026:	ldr.w	r1, [fp, #452]	; 0x1c4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    402a:	add.w	r6, r0, r0, lsl #1
    402e:	movw	r2, #4636	; 0x121c
    4032:	ldr.w	r3, [fp, #456]	; 0x1c8
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4036:	mov	r0, r4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4038:	add.w	r6, fp, r6, lsl #3
    403c:	str	r1, [r7, r2]
    403e:	mov.w	ip, #1
    4042:	add.w	r8, r7, #4640	; 0x1220
    4046:	ldr.w	r2, [r6, #208]	; 0xd0
    404a:	ldr.w	r1, [r6, #196]	; 0xc4
    404e:	str	r2, [sp, #20]
    4050:	ldr.w	r2, [r6, #212]	; 0xd4
    4054:	ldr.w	r5, [r6, #200]	; 0xc8
    4058:	ldr.w	r4, [r6, #204]	; 0xcc
    405c:	ldr.w	r6, [r6, #192]	; 0xc0
    4060:	str	r2, [r7, #20]
    4062:	ldr	r2, [sp, #20]
    4064:	str	r1, [r7, #4]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4066:	movs	r1, #5
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, hue_seeds[0]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    4068:	str	r6, [r7, #0]
    406a:	str	r5, [r7, #8]
    406c:	str	r2, [r7, #16]
    406e:	str	r4, [r7, #12]
    4070:	strb.w	ip, [r7, #24]
    4074:	str.w	r3, [r8]
		
		if (newFrameReady) return;

		if (allZero(_grow_automaton)){
			initialize_automaton(_grow_automaton, &bri_automatons[random(0, 8)], true);
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    4078:	ldr.w	r5, [fp, #440]	; 0x1b8
    407c:	bl	dab8 <random(long, long)>
    4080:	add.w	r0, r0, r0, lsl #1
    4084:	add.w	r3, fp, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    4088:	ldr.w	r2, [r3, #372]	; 0x174
    408c:	add.w	r3, r3, #372	; 0x174
    4090:	subs	r2, #1
    4092:	ldr	r6, [r3, #4]
    4094:	ldrb.w	sl, [r3, #8]
    4098:	cmp	r2, #4
    409a:	bhi.w	4be8 <regular_animation()+0x1070>
    409e:	tbh	[pc, r2, lsl #1]
    40a2:	.short	0x0480
    40a4:	.word	0x03fa04a0
    40a8:	.word	0x03bd0451
    int rand2 = random(0, 2);
    Color color1, color2;
    if (rand1 == 0){
      color1 = Color(random(screen_A.bottom_hue_threshold, screen_A.bottom_hue_threshold + screen_A.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    } else {
      color1 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    40ac:	mov.w	r1, #260	; 0x104
    40b0:	mov	r0, r6
    40b2:	bl	dab8 <random(long, long)>
    40b6:	movs	r1, #75	; 0x4b
    40b8:	mov	r7, r0
    40ba:	movs	r0, #50	; 0x32
    40bc:	bl	dab8 <random(long, long)>
    40c0:	movs	r1, #80	; 0x50
    40c2:	mov	r8, r0
    40c4:	movs	r0, #55	; 0x37
    40c6:	bl	dab8 <random(long, long)>
    40ca:	add.w	r1, r7, #720	; 0x2d0
    40ce:	ldr	r2, [pc, #832]	; (4410 <regular_animation()+0x898>)
    40d0:	mov.w	r7, #360	; 0x168
    40d4:	lsrs	r3, r1, #3
    40d6:	strb.w	r0, [sp, #41]	; 0x29
    40da:	movs	r0, #1
    40dc:	strb.w	r8, [sp, #40]	; 0x28
    40e0:	umull	r3, r2, r2, r3
    40e4:	ldr	r3, [pc, #812]	; (4414 <regular_animation()+0x89c>)
    40e6:	strb.w	r6, [sp, #44]	; 0x2c
    40ea:	lsrs	r2, r2, #2
    40ec:	str	r3, [sp, #24]
    40ee:	strb.w	r0, [sp, #45]	; 0x2d
    40f2:	mls	r3, r7, r2, r1
    40f6:	str	r3, [sp, #36]	; 0x24
    }

    if (rand2 == 0){
    40f8:	cmp	r4, #0
    40fa:	beq.w	3d84 <regular_animation()+0x20c>
      color2 = Color(random(screen_B.bottom_hue_threshold, screen_B.bottom_hue_threshold + screen_B.hue_difference), random(50, 75), random(55, 80), HSB_MODE);
    } else {
      color2 = Color(random(0,260), random(50, 75), random(55, 80), HSB_MODE);
    40fe:	mov.w	r1, #260	; 0x104
    4102:	movs	r0, #0
    4104:	bl	dab8 <random(long, long)>
    4108:	movs	r1, #75	; 0x4b
    410a:	mov	r6, r0
    410c:	movs	r0, #50	; 0x32
    410e:	bl	dab8 <random(long, long)>
    4112:	movs	r1, #80	; 0x50
    4114:	mov	r7, r0
    4116:	movs	r0, #55	; 0x37
    4118:	bl	dab8 <random(long, long)>
    411c:	add.w	r1, r6, #720	; 0x2d0
    4120:	ldr	r2, [pc, #748]	; (4410 <regular_animation()+0x898>)
    4122:	mov.w	r6, #360	; 0x168
    4126:	lsrs	r3, r1, #3
    4128:	strb.w	r0, [sp, #57]	; 0x39
    412c:	movs	r0, #0
    412e:	strb.w	r7, [sp, #56]	; 0x38
    4132:	umull	r3, r2, r2, r3
    4136:	movs	r3, #1
    4138:	strb.w	r0, [sp, #60]	; 0x3c
    413c:	lsrs	r2, r2, #2
    413e:	strb.w	r3, [sp, #61]	; 0x3d
    4142:	ldr.w	fp, [pc, #724]	; 4418 <regular_animation()+0x8a0>
    4146:	mls	r3, r6, r2, r1
    414a:	str	r3, [sp, #52]	; 0x34
    414c:	b.n	3dd6 <regular_animation()+0x25e>
    414e:	add.w	r6, r5, #28
    4152:	mov	r4, r5
    4154:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4158:	cmp.w	sl, #0
    415c:	bne.n	417a <regular_animation()+0x602>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    415e:	ldr	r3, [r5, #0]
    4160:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4162:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4166:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4168:	str	r3, [r4, #120]	; 0x78
    416a:	adds	r4, #96	; 0x60
    416c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    416e:	cmp	r4, r7
    4170:	beq.w	3c6c <regular_animation()+0xf4>
    if (rand){
    4174:	cmp.w	sl, #0
    4178:	beq.n	415e <regular_animation()+0x5e6>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    417a:	ldr	r3, [r5, #20]
    417c:	ldr	r2, [r5, #16]
    417e:	subs	r0, r3, r2
    4180:	adds	r0, #2
    4182:	bl	dab0 <random(unsigned long)>
    4186:	ldr	r1, [r5, #16]
    4188:	subs	r2, r1, #1
    418a:	add	r0, r2
    418c:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    418e:	ldr	r3, [r5, #20]
    4190:	subs	r0, r3, r1
    4192:	adds	r0, #2
    4194:	bl	dab0 <random(unsigned long)>
    4198:	ldr	r1, [r5, #16]
    419a:	subs	r2, r1, #1
    419c:	add	r0, r2
    419e:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    41a2:	ldr	r3, [r5, #20]
    41a4:	subs	r0, r3, r1
    41a6:	adds	r0, #2
    41a8:	bl	dab0 <random(unsigned long)>
    41ac:	ldr	r1, [r5, #16]
    41ae:	subs	r2, r1, #1
    41b0:	add	r0, r2
    41b2:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    41b4:	ldr	r3, [r5, #20]
    41b6:	subs	r0, r3, r1
    41b8:	adds	r0, #2
    41ba:	bl	dab0 <random(unsigned long)>
    41be:	ldr	r3, [r5, #16]
    41c0:	subs	r3, #1
    41c2:	add	r0, r3
    41c4:	str	r0, [r4, #120]	; 0x78
    41c6:	b.n	416a <regular_animation()+0x5f2>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    41c8:	cmp	r6, #0
    41ca:	ble.w	3c6c <regular_animation()+0xf4>
    41ce:	movs	r7, #0
    41d0:	b.n	41e6 <regular_animation()+0x66e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    41d2:	add.w	r3, r4, r3, lsl #3
    41d6:	ldr	r2, [r5, #0]
    41d8:	add.w	r3, r5, r3, lsl #2
    41dc:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    41de:	adds	r7, #1
    41e0:	cmp	r7, r6
    41e2:	beq.w	3c6c <regular_animation()+0xf4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41e6:	movs	r0, #8
    41e8:	bl	dab0 <random(unsigned long)>
    41ec:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    41f0:	movs	r0, #8
    41f2:	bl	dab0 <random(unsigned long)>
    41f6:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    41fa:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    41fe:	cmp.w	sl, #0
    4202:	beq.n	41d2 <regular_animation()+0x65a>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4204:	ldr	r3, [r5, #20]
    4206:	add.w	r8, r8, r8, lsl #1
    420a:	ldr	r2, [r5, #16]
    420c:	add.w	r4, r4, r8, lsl #3
    4210:	subs	r0, r3, r2
    4212:	add.w	r4, r5, r4, lsl #2
    4216:	adds	r0, #2
    4218:	bl	dab0 <random(unsigned long)>
    421c:	ldr	r3, [r5, #16]
    421e:	subs	r3, #1
    4220:	add	r0, r3
    4222:	str	r0, [r4, #28]
    4224:	b.n	41de <regular_animation()+0x666>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4226:	movs	r0, #8
    4228:	mov	r7, r5
    422a:	bl	dab0 <random(unsigned long)>
    422e:	add.w	r3, r5, #96	; 0x60
    4232:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4234:	movs	r0, #8
    4236:	str	r3, [sp, #20]
    4238:	bl	dab0 <random(unsigned long)>
    423c:	vmov	s15, r6
    4240:	adds	r4, #8
    4242:	add.w	r3, r0, #8
    4246:	rsb	r9, r0, #16
    424a:	vcvt.f64.s32	d9, s15
    424e:	rsb	r8, r4, #0
    4252:	negs	r3, r3
    4254:	str	r3, [sp, #24]
    4256:	vmov	s15, r8
    425a:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    425c:	mov	r6, r7
    425e:	vcvt.f64.s32	d8, s15
    4262:	vmul.f64	d8, d8, d8
    4266:	b.n	4274 <regular_animation()+0x6fc>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4268:	ldr	r3, [r5, #0]
    426a:	str	r3, [r6, #28]
    426c:	adds	r4, #1
    426e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4270:	cmp	r4, r9
    4272:	beq.n	42c4 <regular_animation()+0x74c>
      double xx = x-midPoint_y;
    4274:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    4278:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    427c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    4280:	vfma.f64	d0, d7, d7
    4284:	vsqrt.f64	d7, d0
    4288:	vcmp.f64	d7, d7
    428c:	vmrs	APSR_nzcv, fpscr
    4290:	bne.w	4cca <regular_animation()+0x1152>
    4294:	vcmpe.f64	d7, d9
    4298:	vmrs	APSR_nzcv, fpscr
    429c:	bhi.n	426c <regular_animation()+0x6f4>
        if (rand){
    429e:	cmp.w	sl, #0
    42a2:	beq.n	4268 <regular_animation()+0x6f0>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42a4:	ldr	r3, [r5, #20]
    42a6:	adds	r4, #1
    42a8:	ldr	r0, [r5, #16]
    42aa:	adds	r6, #96	; 0x60
    42ac:	subs	r0, r3, r0
    42ae:	adds	r0, #2
    42b0:	bl	dab0 <random(unsigned long)>
    42b4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    42b6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    42b8:	add.w	r3, r3, #4294967295
    42bc:	add	r0, r3
    42be:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    42c2:	bne.n	4274 <regular_animation()+0x6fc>
    42c4:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    42c6:	ldr	r3, [sp, #20]
    42c8:	add.w	r8, r8, #1
    42cc:	cmp	r7, r3
    42ce:	bne.n	4256 <regular_animation()+0x6de>
    42d0:	b.n	3c6c <regular_animation()+0xf4>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42d2:	movs	r0, #8
    42d4:	bl	dab0 <random(unsigned long)>
    42d8:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42dc:	movs	r0, #8
    42de:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    42e2:	cmp	r6, #0
    42e4:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    42e6:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    42ea:	it	lt
    42ec:	addlt	r3, r6, #1
    42ee:	cmp	r6, #0
    42f0:	mov.w	r3, r3, asr #1
    42f4:	it	lt
    42f6:	addlt	r6, #1
    42f8:	negs	r3, r3
    42fa:	asrs	r6, r6, #1
    42fc:	adds	r7, r0, r3
    42fe:	adds	r2, r0, r6
    4300:	cmp	r7, r2
    4302:	str	r2, [sp, #24]
    4304:	bge.w	3c6c <regular_animation()+0xf4>
    4308:	adds	r3, r4, r3
    430a:	add	r4, r6
    430c:	add.w	r6, r3, r3, lsl #1
    4310:	str	r3, [sp, #20]
    4312:	add.w	r6, r7, r6, lsl #3
    4316:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    431a:	ldr	r3, [sp, #20]
    431c:	cmp	r3, r4
    431e:	bge.n	4340 <regular_animation()+0x7c8>
    4320:	mov	r9, r6
    4322:	ldr.w	r8, [sp, #20]
        if (rand){
    4326:	cmp.w	sl, #0
    432a:	bne.w	4a8a <regular_animation()+0xf12>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    432e:	ldr	r3, [r5, #0]
    4330:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4334:	add.w	r8, r8, #1
    4338:	add.w	r9, r9, #96	; 0x60
    433c:	cmp	r8, r4
    433e:	bne.n	4326 <regular_animation()+0x7ae>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4340:	adds	r7, #1
    4342:	ldr	r3, [sp, #24]
    4344:	adds	r6, #4
    4346:	cmp	r7, r3
    4348:	bne.n	431a <regular_animation()+0x7a2>
    434a:	b.n	3c6c <regular_animation()+0xf4>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    434c:	movs	r0, #8
    434e:	bl	dab0 <random(unsigned long)>
    4352:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4356:	movs	r0, #8
    4358:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    435c:	cmp	r6, #0
    435e:	ble.w	3c6c <regular_animation()+0xf4>
    4362:	add.w	r3, r0, #15
    4366:	add.w	r4, r4, r4, lsl #1
    436a:	movs	r7, #0
    436c:	add.w	r4, r3, r4, lsl #3
    4370:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4374:	cmp.w	sl, #0
    4378:	bne.w	4ad0 <regular_animation()+0xf58>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    437c:	ldr	r3, [r5, #0]
    437e:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4380:	adds	r7, #1
    4382:	adds	r4, #4
    4384:	cmp	r7, r6
    4386:	bne.n	4374 <regular_animation()+0x7fc>
    4388:	b.n	3c6c <regular_animation()+0xf4>
    438a:	add.w	r6, r5, #28
    438e:	mov	r4, r5
    4390:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4394:	cmp.w	sl, #0
    4398:	bne.n	43b6 <regular_animation()+0x83e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    439a:	ldr	r3, [r5, #0]
    439c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    439e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    43a2:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    43a4:	str	r3, [r4, #120]	; 0x78
    43a6:	adds	r4, #96	; 0x60
    43a8:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    43aa:	cmp	r4, r7
    43ac:	beq.w	3c4a <regular_animation()+0xd2>
    if (rand){
    43b0:	cmp.w	sl, #0
    43b4:	beq.n	439a <regular_animation()+0x822>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43b6:	ldr	r3, [r5, #20]
    43b8:	ldr	r2, [r5, #16]
    43ba:	subs	r0, r3, r2
    43bc:	adds	r0, #2
    43be:	bl	dab0 <random(unsigned long)>
    43c2:	ldr	r1, [r5, #16]
    43c4:	subs	r2, r1, #1
    43c6:	add	r0, r2
    43c8:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43ca:	ldr	r3, [r5, #20]
    43cc:	subs	r0, r3, r1
    43ce:	adds	r0, #2
    43d0:	bl	dab0 <random(unsigned long)>
    43d4:	ldr	r1, [r5, #16]
    43d6:	subs	r2, r1, #1
    43d8:	add	r0, r2
    43da:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43de:	ldr	r3, [r5, #20]
    43e0:	subs	r0, r3, r1
    43e2:	adds	r0, #2
    43e4:	bl	dab0 <random(unsigned long)>
    43e8:	ldr	r1, [r5, #16]
    43ea:	subs	r2, r1, #1
    43ec:	add	r0, r2
    43ee:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    43f0:	ldr	r3, [r5, #20]
    43f2:	subs	r0, r3, r1
    43f4:	adds	r0, #2
    43f6:	bl	dab0 <random(unsigned long)>
    43fa:	ldr	r3, [r5, #16]
    43fc:	subs	r3, #1
    43fe:	add	r0, r3
    4400:	str	r0, [r4, #120]	; 0x78
    4402:	b.n	43a6 <regular_animation()+0x82e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4404:	cmp	r4, #0
    4406:	ble.w	3c4a <regular_animation()+0xd2>
    440a:	movs	r7, #0
    440c:	b.n	4430 <regular_animation()+0x8b8>
    440e:	nop
    4410:	.word	0x16c16c17
    4414:	.word	0x20005074
    4418:	.word	0x20005268
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    441c:	add.w	r3, r6, r3, lsl #3
    4420:	ldr	r2, [r5, #0]
    4422:	add.w	r3, r5, r3, lsl #2
    4426:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4428:	adds	r7, #1
    442a:	cmp	r7, r4
    442c:	beq.w	3c4a <regular_animation()+0xd2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4430:	movs	r0, #8
    4432:	bl	dab0 <random(unsigned long)>
    4436:	add.w	r9, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    443a:	movs	r0, #8
    443c:	bl	dab0 <random(unsigned long)>
    4440:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4444:	add.w	r3, r9, r9, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    4448:	cmp.w	sl, #0
    444c:	beq.n	441c <regular_animation()+0x8a4>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    444e:	ldr	r3, [r5, #20]
    4450:	add.w	r9, r9, r9, lsl #1
    4454:	ldr	r2, [r5, #16]
    4456:	add.w	r6, r6, r9, lsl #3
    445a:	subs	r0, r3, r2
    445c:	add.w	r6, r5, r6, lsl #2
    4460:	adds	r0, #2
    4462:	bl	dab0 <random(unsigned long)>
    4466:	ldr	r3, [r5, #16]
    4468:	subs	r3, #1
    446a:	add	r0, r3
    446c:	str	r0, [r6, #28]
    446e:	b.n	4428 <regular_animation()+0x8b0>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4470:	movs	r0, #8
    4472:	mov	r7, r5
    4474:	bl	dab0 <random(unsigned long)>
    4478:	mov	r6, r0
    447a:	add.w	r3, r5, #96	; 0x60
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    447e:	movs	r0, #8
    4480:	adds	r6, #8
    4482:	str	r3, [sp, #20]
    4484:	bl	dab0 <random(unsigned long)>
    4488:	vmov	s15, r4
    448c:	add.w	r3, r0, #8
    4490:	negs	r2, r6
    4492:	rsb	r9, r0, #16
    4496:	vcvt.f64.s32	d9, s15
    449a:	negs	r3, r3
    449c:	mov	r8, r2
    449e:	str	r3, [sp, #28]
    44a0:	vmov	s15, r8
    44a4:	ldr	r4, [sp, #28]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    44a6:	mov	r6, r7
    44a8:	vcvt.f64.s32	d8, s15
    44ac:	vmul.f64	d8, d8, d8
    44b0:	b.n	44be <regular_animation()+0x946>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    44b2:	ldr	r3, [r5, #0]
    44b4:	str	r3, [r6, #28]
    44b6:	adds	r4, #1
    44b8:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    44ba:	cmp	r4, r9
    44bc:	beq.n	450e <regular_animation()+0x996>
      double xx = x-midPoint_y;
    44be:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    44c2:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    44c6:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    44ca:	vfma.f64	d0, d7, d7
    44ce:	vsqrt.f64	d7, d0
    44d2:	vcmp.f64	d7, d7
    44d6:	vmrs	APSR_nzcv, fpscr
    44da:	bne.w	4cc0 <regular_animation()+0x1148>
    44de:	vcmpe.f64	d7, d9
    44e2:	vmrs	APSR_nzcv, fpscr
    44e6:	bhi.n	44b6 <regular_animation()+0x93e>
        if (rand){
    44e8:	cmp.w	sl, #0
    44ec:	beq.n	44b2 <regular_animation()+0x93a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    44ee:	ldr	r3, [r5, #20]
    44f0:	adds	r4, #1
    44f2:	ldr	r0, [r5, #16]
    44f4:	adds	r6, #96	; 0x60
    44f6:	subs	r0, r3, r0
    44f8:	adds	r0, #2
    44fa:	bl	dab0 <random(unsigned long)>
    44fe:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4500:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4502:	add.w	r3, r3, #4294967295
    4506:	add	r0, r3
    4508:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    450c:	bne.n	44be <regular_animation()+0x946>
    450e:	mov	r3, r8
    4510:	adds	r7, #4
    4512:	adds	r3, #1
    4514:	mov	r8, r3
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4516:	ldr	r3, [sp, #20]
    4518:	cmp	r7, r3
    451a:	bne.n	44a0 <regular_animation()+0x928>
    451c:	b.w	3c4a <regular_animation()+0xd2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4520:	movs	r0, #8
    4522:	bl	dab0 <random(unsigned long)>
    4526:	add.w	r7, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    452a:	movs	r0, #8
    452c:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4530:	cmp	r4, #0
    4532:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4534:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4538:	it	lt
    453a:	addlt	r3, r4, #1
    453c:	cmp	r4, #0
    453e:	mov.w	r3, r3, asr #1
    4542:	it	lt
    4544:	addlt	r4, #1
    4546:	negs	r3, r3
    4548:	asrs	r4, r4, #1
    454a:	adds	r6, r0, r3
    454c:	adds	r2, r4, r0
    454e:	cmp	r2, r6
    4550:	str	r2, [sp, #28]
    4552:	ble.w	3c4a <regular_animation()+0xd2>
    4556:	adds	r3, r7, r3
    4558:	add.w	r9, r4, r7
    455c:	str	r3, [sp, #20]
    455e:	add.w	r3, r3, r3, lsl #1
    4562:	add.w	r3, r6, r3, lsl #3
    4566:	add.w	r3, r5, r3, lsl #2
    456a:	mov	r8, r3
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    456c:	ldr	r3, [sp, #20]
    456e:	cmp	r3, r9
    4570:	bge.n	458a <regular_animation()+0xa12>
    4572:	mov	r7, r8
    4574:	ldr	r4, [sp, #20]
        if (rand){
    4576:	cmp.w	sl, #0
    457a:	bne.w	4a74 <regular_animation()+0xefc>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    457e:	ldr	r3, [r5, #0]
    4580:	str	r3, [r7, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4582:	adds	r4, #1
    4584:	adds	r7, #96	; 0x60
    4586:	cmp	r4, r9
    4588:	bne.n	4576 <regular_animation()+0x9fe>
    458a:	mov	r3, r8

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    458c:	adds	r6, #1
    458e:	adds	r3, #4
    4590:	mov	r8, r3
    4592:	ldr	r3, [sp, #28]
    4594:	cmp	r3, r6
    4596:	bne.n	456c <regular_animation()+0x9f4>
    4598:	b.w	3c4a <regular_animation()+0xd2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    459c:	movs	r0, #8
    459e:	bl	dab0 <random(unsigned long)>
    45a2:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    45a6:	movs	r0, #8
    45a8:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    45ac:	cmp	r4, #0
    45ae:	ble.w	3c4a <regular_animation()+0xd2>
    45b2:	add.w	r3, r0, #15
    45b6:	add.w	r6, r6, r6, lsl #1
    45ba:	movs	r7, #0
    45bc:	add.w	r6, r3, r6, lsl #3
    45c0:	add.w	r6, r5, r6, lsl #2
      if (rand){
    45c4:	cmp.w	sl, #0
    45c8:	bne.w	4afc <regular_animation()+0xf84>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    45cc:	ldr	r3, [r5, #0]
    45ce:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    45d0:	adds	r7, #1
    45d2:	adds	r6, #4
    45d4:	cmp	r7, r4
    45d6:	bne.n	45c4 <regular_animation()+0xa4c>
    45d8:	b.w	3c4a <regular_animation()+0xd2>
    45dc:	add.w	r6, r5, #28
    45e0:	mov	r4, r5
    45e2:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    45e6:	cmp.w	fp, #0
    45ea:	bne.n	4608 <regular_animation()+0xa90>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    45ec:	ldr	r3, [r5, #0]
    45ee:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    45f0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    45f4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    45f6:	str	r3, [r4, #120]	; 0x78
    45f8:	adds	r4, #96	; 0x60
    45fa:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    45fc:	cmp	r4, r7
    45fe:	beq.w	3cba <regular_animation()+0x142>
    if (rand){
    4602:	cmp.w	fp, #0
    4606:	beq.n	45ec <regular_animation()+0xa74>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4608:	ldr	r3, [r5, #20]
    460a:	ldr	r2, [r5, #16]
    460c:	subs	r0, r3, r2
    460e:	adds	r0, #2
    4610:	bl	dab0 <random(unsigned long)>
    4614:	ldr	r1, [r5, #16]
    4616:	subs	r2, r1, #1
    4618:	add	r0, r2
    461a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    461c:	ldr	r3, [r5, #20]
    461e:	subs	r0, r3, r1
    4620:	adds	r0, #2
    4622:	bl	dab0 <random(unsigned long)>
    4626:	ldr	r1, [r5, #16]
    4628:	subs	r2, r1, #1
    462a:	add	r0, r2
    462c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4630:	ldr	r3, [r5, #20]
    4632:	subs	r0, r3, r1
    4634:	adds	r0, #2
    4636:	bl	dab0 <random(unsigned long)>
    463a:	ldr	r1, [r5, #16]
    463c:	subs	r2, r1, #1
    463e:	add	r0, r2
    4640:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4642:	ldr	r3, [r5, #20]
    4644:	subs	r0, r3, r1
    4646:	adds	r0, #2
    4648:	bl	dab0 <random(unsigned long)>
    464c:	ldr	r3, [r5, #16]
    464e:	subs	r3, #1
    4650:	add	r0, r3
    4652:	str	r0, [r4, #120]	; 0x78
    4654:	b.n	45f8 <regular_animation()+0xa80>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4656:	movs	r0, #8
    4658:	mov	r7, r5
    465a:	bl	dab0 <random(unsigned long)>
    465e:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4660:	movs	r0, #8
    4662:	add.w	r9, r5, #96	; 0x60
    4666:	bl	dab0 <random(unsigned long)>
    466a:	vmov	s15, r6
    466e:	adds	r4, #8
    4670:	add.w	r3, r0, #8
    4674:	vcvt.f64.s32	d9, s15
    4678:	rsb	sl, r0, #16
    467c:	negs	r3, r3
    467e:	rsb	r8, r4, #0
    4682:	str	r3, [sp, #20]
    4684:	vmov	s15, r8
    4688:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    468a:	mov	r6, r7
    468c:	vcvt.f64.s32	d8, s15
    4690:	vmul.f64	d8, d8, d8
    4694:	b.n	46a2 <regular_animation()+0xb2a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    4696:	ldr	r3, [r5, #0]
    4698:	str	r3, [r6, #28]
    469a:	adds	r4, #1
    469c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    469e:	cmp	sl, r4
    46a0:	beq.n	46f2 <regular_animation()+0xb7a>
      double xx = x-midPoint_y;
    46a2:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    46a6:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    46aa:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    46ae:	vfma.f64	d0, d7, d7
    46b2:	vsqrt.f64	d7, d0
    46b6:	vcmp.f64	d7, d7
    46ba:	vmrs	APSR_nzcv, fpscr
    46be:	bne.w	4ce0 <regular_animation()+0x1168>
    46c2:	vcmpe.f64	d7, d9
    46c6:	vmrs	APSR_nzcv, fpscr
    46ca:	bhi.n	469a <regular_animation()+0xb22>
        if (rand){
    46cc:	cmp.w	fp, #0
    46d0:	beq.n	4696 <regular_animation()+0xb1e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    46d2:	ldr	r3, [r5, #20]
    46d4:	adds	r4, #1
    46d6:	ldr	r0, [r5, #16]
    46d8:	adds	r6, #96	; 0x60
    46da:	subs	r0, r3, r0
    46dc:	adds	r0, #2
    46de:	bl	dab0 <random(unsigned long)>
    46e2:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    46e4:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    46e6:	add.w	r3, r3, #4294967295
    46ea:	add	r0, r3
    46ec:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    46f0:	bne.n	46a2 <regular_animation()+0xb2a>
    46f2:	adds	r7, #4
    46f4:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    46f8:	cmp	r9, r7
    46fa:	bne.n	4684 <regular_animation()+0xb0c>
    46fc:	b.w	3cba <regular_animation()+0x142>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4700:	cmp	r6, #0
    4702:	ble.w	3cba <regular_animation()+0x142>
    4706:	mov.w	r8, #0
    470a:	b.n	4722 <regular_animation()+0xbaa>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    470c:	add.w	r3, r4, r3, lsl #3
    4710:	ldr	r2, [r5, #0]
    4712:	add.w	r3, r5, r3, lsl #2
    4716:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4718:	add.w	r8, r8, #1
    471c:	cmp	r8, r6
    471e:	beq.w	3cba <regular_animation()+0x142>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4722:	movs	r0, #8
    4724:	bl	dab0 <random(unsigned long)>
    4728:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    472c:	movs	r0, #8
    472e:	bl	dab0 <random(unsigned long)>
    4732:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4736:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    473a:	cmp.w	fp, #0
    473e:	beq.n	470c <regular_animation()+0xb94>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4740:	ldr	r3, [r5, #20]
    4742:	add.w	r7, r7, r7, lsl #1
    4746:	ldr	r2, [r5, #16]
    4748:	add.w	r4, r4, r7, lsl #3
    474c:	subs	r0, r3, r2
    474e:	add.w	r4, r5, r4, lsl #2
    4752:	adds	r0, #2
    4754:	bl	dab0 <random(unsigned long)>
    4758:	ldr	r3, [r5, #16]
    475a:	subs	r3, #1
    475c:	add	r0, r3
    475e:	str	r0, [r4, #28]
    4760:	b.n	4718 <regular_animation()+0xba0>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4762:	movs	r0, #8
    4764:	bl	dab0 <random(unsigned long)>
    4768:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    476c:	movs	r0, #8
    476e:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4772:	cmp	r6, #0
    4774:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4776:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    477a:	it	lt
    477c:	addlt	r3, r6, #1
    477e:	cmp	r6, #0
    4780:	mov.w	r8, r3, asr #1
    4784:	it	lt
    4786:	addlt	r6, #1
    4788:	rsb	r8, r8, #0
    478c:	asrs	r6, r6, #1
    478e:	add.w	r7, r0, r8
    4792:	adds	r3, r0, r6
    4794:	cmp	r7, r3
    4796:	str	r3, [sp, #20]
    4798:	bge.w	3cba <regular_animation()+0x142>
    479c:	add	r8, r4
    479e:	add	r4, r6
    47a0:	add.w	r6, r8, r8, lsl #1
    47a4:	add.w	r6, r7, r6, lsl #3
    47a8:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    47ac:	cmp	r8, r4
    47ae:	bge.n	47ce <regular_animation()+0xc56>
    47b0:	mov	sl, r6
    47b2:	mov	r9, r8
        if (rand){
    47b4:	cmp.w	fp, #0
    47b8:	bne.w	4aa2 <regular_animation()+0xf2a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    47bc:	ldr	r3, [r5, #0]
    47be:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    47c2:	add.w	r9, r9, #1
    47c6:	add.w	sl, sl, #96	; 0x60
    47ca:	cmp	r9, r4
    47cc:	bne.n	47b4 <regular_animation()+0xc3c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    47ce:	adds	r7, #1
    47d0:	ldr	r3, [sp, #20]
    47d2:	adds	r6, #4
    47d4:	cmp	r7, r3
    47d6:	bne.n	47ac <regular_animation()+0xc34>
    47d8:	b.w	3cba <regular_animation()+0x142>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    47dc:	movs	r0, #8
    47de:	bl	dab0 <random(unsigned long)>
    47e2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    47e6:	movs	r0, #8
    47e8:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    47ec:	cmp	r6, #0
    47ee:	ble.w	3cba <regular_animation()+0x142>
    47f2:	add.w	r4, r4, r4, lsl #1
    47f6:	add.w	r3, r0, #15
    47fa:	movs	r7, #0
    47fc:	add.w	r4, r3, r4, lsl #3
    4800:	add.w	r4, r5, r4, lsl #2
      if (rand){
    4804:	cmp.w	fp, #0
    4808:	bne.w	4aba <regular_animation()+0xf42>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    480c:	ldr	r3, [r5, #0]
    480e:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    4810:	adds	r7, #1
    4812:	adds	r4, #4
    4814:	cmp	r7, r6
    4816:	bne.n	4804 <regular_animation()+0xc8c>
    4818:	b.w	3cba <regular_animation()+0x142>
    481c:	add.w	r6, r5, #28
    4820:	mov	r4, r5
    4822:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    4826:	cmp.w	sl, #0
    482a:	bne.n	4848 <regular_animation()+0xcd0>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    482c:	ldr	r3, [r5, #0]
    482e:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    4830:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    4834:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    4836:	str	r3, [r4, #120]	; 0x78
    4838:	adds	r4, #96	; 0x60
    483a:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    483c:	cmp	r4, r7
    483e:	beq.w	3c9a <regular_animation()+0x122>
    if (rand){
    4842:	cmp.w	sl, #0
    4846:	beq.n	482c <regular_animation()+0xcb4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4848:	ldr	r3, [r5, #20]
    484a:	ldr	r2, [r5, #16]
    484c:	subs	r0, r3, r2
    484e:	adds	r0, #2
    4850:	bl	dab0 <random(unsigned long)>
    4854:	ldr	r1, [r5, #16]
    4856:	subs	r2, r1, #1
    4858:	add	r0, r2
    485a:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    485c:	ldr	r3, [r5, #20]
    485e:	subs	r0, r3, r1
    4860:	adds	r0, #2
    4862:	bl	dab0 <random(unsigned long)>
    4866:	ldr	r1, [r5, #16]
    4868:	subs	r2, r1, #1
    486a:	add	r0, r2
    486c:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4870:	ldr	r3, [r5, #20]
    4872:	subs	r0, r3, r1
    4874:	adds	r0, #2
    4876:	bl	dab0 <random(unsigned long)>
    487a:	ldr	r1, [r5, #16]
    487c:	subs	r2, r1, #1
    487e:	add	r0, r2
    4880:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4882:	ldr	r3, [r5, #20]
    4884:	subs	r0, r3, r1
    4886:	adds	r0, #2
    4888:	bl	dab0 <random(unsigned long)>
    488c:	ldr	r3, [r5, #16]
    488e:	subs	r3, #1
    4890:	add	r0, r3
    4892:	str	r0, [r4, #120]	; 0x78
    4894:	b.n	4838 <regular_animation()+0xcc0>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4896:	movs	r0, #8
    4898:	mov	r7, r5
    489a:	bl	dab0 <random(unsigned long)>
    489e:	add.w	r3, r5, #96	; 0x60
    48a2:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    48a4:	movs	r0, #8
    48a6:	str	r3, [sp, #20]
    48a8:	bl	dab0 <random(unsigned long)>
    48ac:	vmov	s15, r6
    48b0:	adds	r4, #8
    48b2:	add.w	r3, r0, #8
    48b6:	rsb	r9, r0, #16
    48ba:	vcvt.f64.s32	d9, s15
    48be:	rsb	r8, r4, #0
    48c2:	negs	r3, r3
    48c4:	str	r3, [sp, #24]
    48c6:	vmov	s15, r8
    48ca:	ldr	r4, [sp, #24]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    48cc:	mov	r6, r7
    48ce:	vcvt.f64.s32	d8, s15
    48d2:	vmul.f64	d8, d8, d8
    48d6:	b.n	48e4 <regular_animation()+0xd6c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    48d8:	ldr	r3, [r5, #0]
    48da:	str	r3, [r6, #28]
    48dc:	adds	r4, #1
    48de:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    48e0:	cmp	r4, r9
    48e2:	beq.n	4934 <regular_animation()+0xdbc>
      double xx = x-midPoint_y;
    48e4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    48e8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    48ec:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    48f0:	vfma.f64	d0, d7, d7
    48f4:	vsqrt.f64	d7, d0
    48f8:	vcmp.f64	d7, d7
    48fc:	vmrs	APSR_nzcv, fpscr
    4900:	bne.w	4cd6 <regular_animation()+0x115e>
    4904:	vcmpe.f64	d7, d9
    4908:	vmrs	APSR_nzcv, fpscr
    490c:	bhi.n	48dc <regular_animation()+0xd64>
        if (rand){
    490e:	cmp.w	sl, #0
    4912:	beq.n	48d8 <regular_animation()+0xd60>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4914:	ldr	r3, [r5, #20]
    4916:	adds	r4, #1
    4918:	ldr	r0, [r5, #16]
    491a:	adds	r6, #96	; 0x60
    491c:	subs	r0, r3, r0
    491e:	adds	r0, #2
    4920:	bl	dab0 <random(unsigned long)>
    4924:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4926:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4928:	add.w	r3, r3, #4294967295
    492c:	add	r0, r3
    492e:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    4932:	bne.n	48e4 <regular_animation()+0xd6c>
    4934:	adds	r7, #4
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    4936:	ldr	r3, [sp, #20]
    4938:	add.w	r8, r8, #1
    493c:	cmp	r7, r3
    493e:	bne.n	48c6 <regular_animation()+0xd4e>
    4940:	b.w	3c9a <regular_animation()+0x122>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    4944:	cmp	r6, #0
    4946:	ble.w	3c9a <regular_animation()+0x122>
    494a:	movs	r7, #0
    494c:	b.n	4962 <regular_animation()+0xdea>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    494e:	add.w	r3, r4, r3, lsl #3
    4952:	ldr	r2, [r5, #0]
    4954:	add.w	r3, r5, r3, lsl #2
    4958:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    495a:	adds	r7, #1
    495c:	cmp	r7, r6
    495e:	beq.w	3c9a <regular_animation()+0x122>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    4962:	movs	r0, #8
    4964:	bl	dab0 <random(unsigned long)>
    4968:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    496c:	movs	r0, #8
    496e:	bl	dab0 <random(unsigned long)>
    4972:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    4976:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    497a:	cmp.w	sl, #0
    497e:	beq.n	494e <regular_animation()+0xdd6>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4980:	ldr	r3, [r5, #20]
    4982:	add.w	r8, r8, r8, lsl #1
    4986:	ldr	r2, [r5, #16]
    4988:	add.w	r4, r4, r8, lsl #3
    498c:	subs	r0, r3, r2
    498e:	add.w	r4, r5, r4, lsl #2
    4992:	adds	r0, #2
    4994:	bl	dab0 <random(unsigned long)>
    4998:	ldr	r3, [r5, #16]
    499a:	subs	r3, #1
    499c:	add	r0, r3
    499e:	str	r0, [r4, #28]
    49a0:	b.n	495a <regular_animation()+0xde2>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49a2:	movs	r0, #8
    49a4:	bl	dab0 <random(unsigned long)>
    49a8:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49ac:	movs	r0, #8
    49ae:	bl	dab0 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    49b2:	cmp	r6, #0
    49b4:	ble.w	3c9a <regular_animation()+0x122>
    49b8:	add.w	r3, r0, #15
    49bc:	add.w	r4, r4, r4, lsl #1
    49c0:	movs	r7, #0
    49c2:	add.w	r4, r3, r4, lsl #3
    49c6:	add.w	r4, r5, r4, lsl #2
      if (rand){
    49ca:	cmp.w	sl, #0
    49ce:	bne.w	4ae6 <regular_animation()+0xf6e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    49d2:	ldr	r3, [r5, #0]
    49d4:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    49d6:	adds	r7, #1
    49d8:	adds	r4, #4
    49da:	cmp	r7, r6
    49dc:	bne.n	49ca <regular_animation()+0xe52>
    49de:	b.w	3c9a <regular_animation()+0x122>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49e2:	movs	r0, #8
    49e4:	bl	dab0 <random(unsigned long)>
    49e8:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49ec:	movs	r0, #8
    49ee:	bl	dab0 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    49f2:	cmp	r6, #0
    49f4:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    49f6:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    49fa:	it	lt
    49fc:	addlt	r3, r6, #1
    49fe:	cmp	r6, #0
    4a00:	mov.w	r3, r3, asr #1
    4a04:	it	lt
    4a06:	addlt	r6, #1
    4a08:	negs	r3, r3
    4a0a:	asrs	r6, r6, #1
    4a0c:	adds	r7, r0, r3
    4a0e:	adds	r2, r0, r6
    4a10:	cmp	r7, r2
    4a12:	str	r2, [sp, #24]
    4a14:	bge.w	3c9a <regular_animation()+0x122>
    4a18:	adds	r3, r4, r3
    4a1a:	add	r4, r6
    4a1c:	add.w	r6, r3, r3, lsl #1
    4a20:	str	r3, [sp, #20]
    4a22:	add.w	r6, r7, r6, lsl #3
    4a26:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4a2a:	ldr	r3, [sp, #20]
    4a2c:	cmp	r3, r4
    4a2e:	bge.n	4a4e <regular_animation()+0xed6>
    4a30:	mov	r9, r6
    4a32:	ldr.w	r8, [sp, #20]
        if (rand){
    4a36:	cmp.w	sl, #0
    4a3a:	bne.n	4a5c <regular_animation()+0xee4>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    4a3c:	ldr	r3, [r5, #0]
    4a3e:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    4a42:	add.w	r8, r8, #1
    4a46:	add.w	r9, r9, #96	; 0x60
    4a4a:	cmp	r8, r4
    4a4c:	bne.n	4a36 <regular_animation()+0xebe>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    4a4e:	adds	r7, #1
    4a50:	ldr	r3, [sp, #24]
    4a52:	adds	r6, #4
    4a54:	cmp	r7, r3
    4a56:	bne.n	4a2a <regular_animation()+0xeb2>
    4a58:	b.w	3c9a <regular_animation()+0x122>
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4a5c:	ldr	r3, [r5, #20]
    4a5e:	ldr	r0, [r5, #16]
    4a60:	subs	r0, r3, r0
    4a62:	adds	r0, #2
    4a64:	bl	dab0 <random(unsigned long)>
    4a68:	ldr	r3, [r5, #16]
    4a6a:	subs	r3, #1
    4a6c:	add	r0, r3
    4a6e:	str.w	r0, [r9, #28]
    4a72:	b.n	4a42 <regular_animation()+0xeca>
    4a74:	ldr	r3, [r5, #20]
    4a76:	ldr	r0, [r5, #16]
    4a78:	subs	r0, r3, r0
    4a7a:	adds	r0, #2
    4a7c:	bl	dab0 <random(unsigned long)>
    4a80:	ldr	r3, [r5, #16]
    4a82:	subs	r3, #1
    4a84:	add	r0, r3
    4a86:	str	r0, [r7, #28]
    4a88:	b.n	4582 <regular_animation()+0xa0a>
    4a8a:	ldr	r3, [r5, #20]
    4a8c:	ldr	r0, [r5, #16]
    4a8e:	subs	r0, r3, r0
    4a90:	adds	r0, #2
    4a92:	bl	dab0 <random(unsigned long)>
    4a96:	ldr	r3, [r5, #16]
    4a98:	subs	r3, #1
    4a9a:	add	r0, r3
    4a9c:	str.w	r0, [r9, #28]
    4aa0:	b.n	4334 <regular_animation()+0x7bc>
    4aa2:	ldr	r3, [r5, #20]
    4aa4:	ldr	r0, [r5, #16]
    4aa6:	subs	r0, r3, r0
    4aa8:	adds	r0, #2
    4aaa:	bl	dab0 <random(unsigned long)>
    4aae:	ldr	r3, [r5, #16]
    4ab0:	subs	r3, #1
    4ab2:	add	r0, r3
    4ab4:	str.w	r0, [sl, #28]
    4ab8:	b.n	47c2 <regular_animation()+0xc4a>
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
      if (rand){
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    4aba:	ldr	r3, [r5, #20]
    4abc:	ldr	r2, [r5, #16]
    4abe:	subs	r0, r3, r2
    4ac0:	adds	r0, #2
    4ac2:	bl	dab0 <random(unsigned long)>
    4ac6:	ldr	r3, [r5, #16]
    4ac8:	subs	r3, #1
    4aca:	add	r0, r3
    4acc:	str	r0, [r4, #0]
    4ace:	b.n	4810 <regular_animation()+0xc98>
    4ad0:	ldr	r3, [r5, #20]
    4ad2:	ldr	r2, [r5, #16]
    4ad4:	subs	r0, r3, r2
    4ad6:	adds	r0, #2
    4ad8:	bl	dab0 <random(unsigned long)>
    4adc:	ldr	r3, [r5, #16]
    4ade:	subs	r3, #1
    4ae0:	add	r0, r3
    4ae2:	str	r0, [r4, #0]
    4ae4:	b.n	4380 <regular_animation()+0x808>
    4ae6:	ldr	r3, [r5, #20]
    4ae8:	ldr	r2, [r5, #16]
    4aea:	subs	r0, r3, r2
    4aec:	adds	r0, #2
    4aee:	bl	dab0 <random(unsigned long)>
    4af2:	ldr	r3, [r5, #16]
    4af4:	subs	r3, #1
    4af6:	add	r0, r3
    4af8:	str	r0, [r4, #0]
    4afa:	b.n	49d6 <regular_animation()+0xe5e>
    4afc:	ldr	r3, [r5, #20]
    4afe:	ldr	r2, [r5, #16]
    4b00:	subs	r0, r3, r2
    4b02:	adds	r0, #2
    4b04:	bl	dab0 <random(unsigned long)>
    4b08:	ldr	r3, [r5, #16]
    4b0a:	subs	r3, #1
    4b0c:	add	r0, r3
    4b0e:	str	r0, [r6, #0]
    4b10:	b.n	45d0 <regular_animation()+0xa58>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b12:	movw	sl, #4636	; 0x121c
    4b16:	add.w	r3, r5, #28
    4b1a:	movs	r7, #0
    4b1c:	add.w	r9, r5, #4640	; 0x1220
    4b20:	add	sl, r5
    4b22:	str	r3, [sp, #20]
    4b24:	mov.w	r8, r7, lsl #3
    4b28:	ldr	r6, [sp, #20]
    4b2a:	movs	r4, #0
    4b2c:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4b30:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4b32:	add	r3, r4
    4b34:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4b36:	cbnz	r2, 4b3c <regular_animation()+0xfc4>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4b38:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4b3c:	cbnz	r3, 4b58 <regular_animation()+0xfe0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4b3e:	adds	r4, #1
    4b40:	adds	r6, #4
    4b42:	cmp	r4, #24
    4b44:	bne.n	4b2c <regular_animation()+0xfb4>
    4b46:	ldr	r3, [sp, #20]
    4b48:	adds	r7, #24
    4b4a:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4b4c:	cmp.w	r7, #576	; 0x240
    4b50:	str	r3, [sp, #20]
    4b52:	bne.n	4b24 <regular_animation()+0xfac>
    4b54:	b.w	3cba <regular_animation()+0x142>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b58:	ldr	r2, [r5, #20]
    4b5a:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b5c:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b60:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b62:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4b64:	adds	r0, #2
    4b66:	ldr.w	fp, [r3, r4, lsl #3]
    4b6a:	bl	dab0 <random(unsigned long)>
    4b6e:	ldr	r3, [r5, #16]
    4b70:	rsb	r3, r3, fp
    4b74:	adds	r3, #1
    4b76:	subs	r0, r3, r0
    4b78:	str	r0, [r6, #0]
    4b7a:	b.n	4b3e <regular_animation()+0xfc6>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4b7c:	movw	sl, #4636	; 0x121c
    4b80:	add.w	r3, r5, #28
    4b84:	movs	r7, #0
    4b86:	add.w	r9, r5, #4640	; 0x1220
    4b8a:	add	sl, r5
    4b8c:	str	r3, [sp, #28]
    4b8e:	lsls	r3, r7, #3
    4b90:	ldr	r6, [sp, #28]
    4b92:	movs	r4, #0
    4b94:	str	r3, [sp, #20]
    4b96:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4b9a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4b9c:	add	r3, r4
    4b9e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4ba0:	cbnz	r2, 4ba6 <regular_animation()+0x102e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4ba2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4ba6:	cbnz	r3, 4bc2 <regular_animation()+0x104a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4ba8:	adds	r4, #1
    4baa:	adds	r6, #4
    4bac:	cmp	r4, #24
    4bae:	bne.n	4b96 <regular_animation()+0x101e>
    4bb0:	ldr	r3, [sp, #28]
    4bb2:	adds	r7, #24
    4bb4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4bb6:	cmp.w	r7, #576	; 0x240
    4bba:	str	r3, [sp, #28]
    4bbc:	bne.n	4b8e <regular_animation()+0x1016>
    4bbe:	b.w	3c4a <regular_animation()+0xd2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4bc2:	ldr	r2, [r5, #20]
    4bc4:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4bc6:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4bca:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4bcc:	ldr	r2, [sp, #20]
    4bce:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4bd0:	adds	r0, #2
    4bd2:	ldr.w	r8, [r3, r4, lsl #3]
    4bd6:	bl	dab0 <random(unsigned long)>
    4bda:	ldr	r3, [r5, #16]
    4bdc:	rsb	r3, r3, r8
    4be0:	adds	r3, #1
    4be2:	subs	r0, r3, r0
    4be4:	str	r0, [r6, #0]
    4be6:	b.n	4ba8 <regular_animation()+0x1030>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4be8:	movw	r9, #4636	; 0x121c
    4bec:	add.w	r3, r5, #28
    4bf0:	movs	r7, #0
    4bf2:	add.w	r8, r5, #4640	; 0x1220
    4bf6:	add	r9, r5
    4bf8:	str	r3, [sp, #24]
    4bfa:	lsls	r3, r7, #3
    4bfc:	ldr	r6, [sp, #24]
    4bfe:	movs	r4, #0
    4c00:	str	r3, [sp, #20]
    4c02:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c06:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4c08:	add	r3, r4
    4c0a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c0c:	cbnz	r2, 4c12 <regular_animation()+0x109a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4c0e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4c12:	cbnz	r3, 4c2e <regular_animation()+0x10b6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4c14:	adds	r4, #1
    4c16:	adds	r6, #4
    4c18:	cmp	r4, #24
    4c1a:	bne.n	4c02 <regular_animation()+0x108a>
    4c1c:	ldr	r3, [sp, #24]
    4c1e:	adds	r7, #24
    4c20:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4c22:	cmp.w	r7, #576	; 0x240
    4c26:	str	r3, [sp, #24]
    4c28:	bne.n	4bfa <regular_animation()+0x1082>
    4c2a:	b.w	3c9a <regular_animation()+0x122>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c2e:	ldr	r2, [r5, #20]
    4c30:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c32:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c36:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c38:	ldr	r2, [sp, #20]
    4c3a:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c3c:	adds	r0, #2
    4c3e:	ldr.w	sl, [r3, r4, lsl #3]
    4c42:	bl	dab0 <random(unsigned long)>
    4c46:	ldr	r3, [r5, #16]
    4c48:	rsb	r3, r3, sl
    4c4c:	adds	r3, #1
    4c4e:	subs	r0, r3, r0
    4c50:	str	r0, [r6, #0]
    4c52:	b.n	4c14 <regular_animation()+0x109c>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c54:	movw	r9, #4636	; 0x121c
    4c58:	add.w	r3, r5, #28
    4c5c:	movs	r7, #0
    4c5e:	add.w	r8, r5, #4640	; 0x1220
    4c62:	add	r9, r5
    4c64:	str	r3, [sp, #24]
    4c66:	lsls	r3, r7, #3
    4c68:	ldr	r6, [sp, #24]
    4c6a:	movs	r4, #0
    4c6c:	str	r3, [sp, #20]
    4c6e:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c72:	ldrb	r2, [r5, #24]
      return _background[x][y];
    4c74:	add	r3, r4
    4c76:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    4c78:	cbnz	r2, 4c7e <regular_animation()+0x1106>
      return _background[x][y];
    } else {
      return !_background[x][y];
    4c7a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    4c7e:	cbnz	r3, 4c9a <regular_animation()+0x1122>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    4c80:	adds	r4, #1
    4c82:	adds	r6, #4
    4c84:	cmp	r4, #24
    4c86:	bne.n	4c6e <regular_animation()+0x10f6>
    4c88:	ldr	r3, [sp, #24]
    4c8a:	adds	r7, #24
    4c8c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    4c8e:	cmp.w	r7, #576	; 0x240
    4c92:	str	r3, [sp, #24]
    4c94:	bne.n	4c66 <regular_animation()+0x10ee>
    4c96:	b.w	3c6c <regular_animation()+0xf4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4c9a:	ldr	r2, [r5, #20]
    4c9c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4c9e:	ldr.w	r3, [r9]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4ca2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    4ca4:	ldr	r2, [sp, #20]
    4ca6:	add	r3, r2
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    4ca8:	adds	r0, #2
    4caa:	ldr.w	sl, [r3, r4, lsl #3]
    4cae:	bl	dab0 <random(unsigned long)>
    4cb2:	ldr	r3, [r5, #16]
    4cb4:	rsb	r3, r3, sl
    4cb8:	adds	r3, #1
    4cba:	subs	r0, r3, r0
    4cbc:	str	r0, [r6, #0]
    4cbe:	b.n	4c80 <regular_animation()+0x1108>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    4cc0:	bl	e240 <sqrt>
    4cc4:	vmov.f64	d7, d0
    4cc8:	b.n	44de <regular_animation()+0x966>
    4cca:	bl	e240 <sqrt>
    4cce:	vmov.f64	d7, d0
    4cd2:	b.w	4294 <regular_animation()+0x71c>
    4cd6:	bl	e240 <sqrt>
    4cda:	vmov.f64	d7, d0
    4cde:	b.n	4904 <regular_animation()+0xd8c>
    4ce0:	bl	e240 <sqrt>
    4ce4:	vmov.f64	d7, d0
    4ce8:	b.n	46c2 <regular_animation()+0xb4a>
    4cea:	nop
    4cec:	movs	r0, r0
	...

00004cf0 <ceremony_animation()>:
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4cf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  	if (!didPulse && !didIntro) {
    4cf4:	ldr	r5, [pc, #664]	; (4f90 <ceremony_animation()+0x2a0>)
    4cf6:	ldrb	r3, [r5, #0]
boolean didIntro = false;
boolean startAutomaton = false;
elapsedMillis sinceIntro = 0;
int freq_offset = 500;
int speed_offset = 0;
void ceremony_animation(){
    4cf8:	vpush	{d8}
    4cfc:	sub	sp, #36	; 0x24

  	if (!didPulse && !didIntro) {
    4cfe:	cbnz	r3, 4d0a <ceremony_animation()+0x1a>
    4d00:	ldr	r3, [pc, #656]	; (4f94 <ceremony_animation()+0x2a4>)
    4d02:	ldrb	r4, [r3, #0]
    4d04:	cmp	r4, #0
    4d06:	beq.w	50a4 <ceremony_animation()+0x3b4>
    4d0a:	ldr	r3, [pc, #652]	; (4f98 <ceremony_animation()+0x2a8>)
    4d0c:	ldr.w	lr, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4d10:	ldr	r2, [pc, #648]	; (4f9c <ceremony_animation()+0x2ac>)
    4d12:	ldr	r0, [r2, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d14:	mov	r6, r2

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4d16:	ldr	r1, [r2, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d18:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4d1a:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d1c:	ldr	r4, [pc, #636]	; (4f9c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4d1e:	cmp	r3, r1
    4d20:	it	eq
    4d22:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d24:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4d26:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4d28:	ite	eq
    4d2a:	moveq	r7, #1
    4d2c:	movne	r7, #0
    4d2e:	cmp	r7, #0
    4d30:	beq.n	4d18 <ceremony_animation()+0x28>

    didPulse = true;
	}

  
	if (sinceCircle > 6000 && didPulse && !didIntro) {
    4d32:	lsrs	r1, r3, #5
    4d34:	movw	r2, #6000	; 0x1770
    4d38:	orr.w	r1, r1, r0, lsl #27
    4d3c:	vmov	s15, r1
    4d40:	vldr	d5, [pc, #580]	; 4f88 <ceremony_animation()+0x298>
    4d44:	vcvt.f64.u32	d7, s15
    4d48:	vdiv.f64	d6, d7, d5
    4d4c:	vcvt.u32.f64	s12, d6
    4d50:	vmov	r3, s12
    4d54:	rsb	r3, lr, r3
    4d58:	cmp	r3, r2
    4d5a:	bls.n	4d64 <ceremony_animation()+0x74>
    4d5c:	ldrb	r3, [r5, #0]
    4d5e:	cmp	r3, #0
    4d60:	bne.w	4fbc <ceremony_animation()+0x2cc>
    4d64:	ldr	r5, [pc, #568]	; (4fa0 <ceremony_animation()+0x2b0>)
    sinceIntro = 0;
	}



  updateBeams();
    4d66:	bl	5d0 <updateBeams()>
	updateCircles();
    4d6a:	bl	b88 <updateCircles()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4d6e:	ldr	r3, [pc, #556]	; (4f9c <ceremony_animation()+0x2ac>)
    4d70:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d72:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4d74:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d76:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4d78:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d7a:	ldr	r7, [pc, #544]	; (4f9c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4d7c:	cmp	r3, r1
    4d7e:	it	eq
    4d80:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4d82:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4d84:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4d86:	ite	eq
    4d88:	moveq	r6, #1
    4d8a:	movne	r6, #0
    4d8c:	cmp	r6, #0
    4d8e:	beq.n	4d76 <ceremony_animation()+0x86>

  if (sinceIntro > 0 && didIntro){
    4d90:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    4d92:	ldr.w	lr, [r5]
    4d96:	orr.w	r1, r1, r2, lsl #27
    4d9a:	vmov	s15, r1
    4d9e:	vldr	d5, [pc, #488]	; 4f88 <ceremony_animation()+0x298>
    4da2:	vcvt.f64.u32	d7, s15
    4da6:	vdiv.f64	d6, d7, d5
    4daa:	vcvt.u32.f64	s15, d6
    4dae:	vmov	r3, s15
    4db2:	cmp	r3, lr
    4db4:	beq.w	4f80 <ceremony_animation()+0x290>
    4db8:	ldr	r3, [pc, #472]	; (4f94 <ceremony_animation()+0x2a4>)
    4dba:	ldrb	r3, [r3, #0]
    4dbc:	cmp	r3, #0
    4dbe:	bne.n	4e26 <ceremony_animation()+0x136>
    4dc0:	mov	r6, lr
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4dc2:	ldr	r3, [pc, #472]	; (4f9c <ceremony_animation()+0x2ac>)
    4dc4:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4dc6:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4dc8:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4dca:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4dcc:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4dce:	cmp	r3, r1
    4dd0:	it	eq
    4dd2:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4dd4:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4dd6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4dd8:	ite	eq
    4dda:	moveq	r5, #1
    4ddc:	movne	r5, #0
    4dde:	cmp	r5, #0
    4de0:	beq.n	4dca <ceremony_animation()+0xda>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    }
  }

  if (sinceIntro > 3500 && didIntro){
    4de2:	lsrs	r1, r3, #5
    4de4:	movw	r3, #3500	; 0xdac
    4de8:	orr.w	r1, r1, r2, lsl #27
    4dec:	vmov	s15, r1
    4df0:	vldr	d5, [pc, #404]	; 4f88 <ceremony_animation()+0x298>
    4df4:	vcvt.f64.u32	d7, s15
    4df8:	vdiv.f64	d6, d7, d5
    4dfc:	vcvt.u32.f64	s12, d6
    4e00:	vmov	r2, s12
    4e04:	rsb	lr, r6, r2
    4e08:	cmp	lr, r3
    4e0a:	bls.n	4e1c <ceremony_animation()+0x12c>
    4e0c:	ldr	r3, [pc, #388]	; (4f94 <ceremony_animation()+0x2a4>)
    4e0e:	ldrb	r3, [r3, #0]
    4e10:	cbz	r3, 4e1c <ceremony_animation()+0x12c>
    regular_setup();
    4e12:	bl	10f8 <regular_setup()>
    isRegularAnimation = true;
    4e16:	ldr	r3, [pc, #396]	; (4fa4 <ceremony_animation()+0x2b4>)
    4e18:	movs	r2, #1
    4e1a:	strb	r2, [r3, #0]
  }
}
    4e1c:	add	sp, #36	; 0x24
    4e1e:	vpop	{d8}
    4e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4e26:	movs	r4, #57	; 0x39
	HSB_color.b = b;
    4e28:	movs	r0, #90	; 0x5a
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4e2a:	movs	r1, #204	; 0xcc
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4e2c:	movs	r2, #0
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4e2e:	strb.w	r4, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4e32:	movs	r3, #1
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e34:	mov	r4, r7
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
	HSB_color.b = b;
    4e36:	strb.w	r0, [sp, #25]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4e3a:	ldr	r0, [r7, #36]	; 0x24
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4e3c:	str	r1, [sp, #20]
  uint32_t lo1 = SNVS_HPRTCLR;
    4e3e:	ldr	r1, [r7, #40]	; 0x28
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4e40:	strb.w	r2, [sp, #28]
	HSB_updated = true;
    4e44:	strb.w	r3, [sp, #29]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e48:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4e4a:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e4c:	ldr	r7, [pc, #332]	; (4f9c <ceremony_animation()+0x2ac>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    4e4e:	cmp	r3, r1
    4e50:	it	eq
    4e52:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e54:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4e56:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4e58:	ite	eq
    4e5a:	moveq	r6, #1
    4e5c:	movne	r6, #0
    4e5e:	cmp	r6, #0
    4e60:	beq.n	4e48 <ceremony_animation()+0x158>
  updateBeams();
	updateCircles();

  if (sinceIntro > 0 && didIntro){
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
    4e62:	lsrs	r1, r3, #5
    4e64:	ldr	r6, [pc, #320]	; (4fa8 <ceremony_animation()+0x2b8>)
    4e66:	ldr	r4, [pc, #324]	; (4fac <ceremony_animation()+0x2bc>)
    4e68:	orr.w	r1, r1, r2, lsl #27
    4e6c:	ldr	r3, [r6, #0]
    4e6e:	ldr	r2, [r4, #0]
    4e70:	vmov	s15, r1
    4e74:	rsb	r2, r2, #800	; 0x320
    4e78:	vcvt.f64.u32	d7, s15
    4e7c:	vldr	d5, [pc, #264]	; 4f88 <ceremony_animation()+0x298>
    4e80:	vdiv.f64	d6, d7, d5
    4e84:	vcvt.u32.f64	s12, d6
    4e88:	vmov	r1, s12
    4e8c:	subs	r3, r1, r3
    4e8e:	cmp	r2, r3
    4e90:	bcs.n	4dc0 <ceremony_animation()+0xd0>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    4e92:	ldr.w	lr, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e96:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    4e98:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4e9a:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    4e9c:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    4e9e:	cmp	r3, r1
    4ea0:	it	eq
    4ea2:	cmpeq	r2, lr
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    4ea4:	mov	lr, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    4ea6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    4ea8:	ite	eq
    4eaa:	moveq	r7, #1
    4eac:	movne	r7, #0
    4eae:	cmp	r7, #0
    4eb0:	beq.n	4e9a <ceremony_animation()+0x1aa>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    4eb2:	lsrs	r3, r3, #5
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    4eb4:	ldr	r7, [pc, #248]	; (4fb0 <ceremony_animation()+0x2c0>)
    4eb6:	movs	r1, #2
    4eb8:	movs	r0, #0
    4eba:	orr.w	r3, r3, r2, lsl #27
    4ebe:	add.w	r9, sp, #24
    4ec2:	add.w	r8, sp, #16
    4ec6:	vmov	s15, r3
    4eca:	vldr	d5, [pc, #188]	; 4f88 <ceremony_animation()+0x298>
    4ece:	vcvt.f64.u32	d7, s15
    4ed2:	vdiv.f64	d6, d7, d5
    4ed6:	vcvt.u32.f64	s12, d6
    4eda:	vstr	s12, [r6]
    4ede:	bl	dab8 <random(long, long)>
    4ee2:	movs	r1, #10
    4ee4:	mov	r6, r0
    4ee6:	movs	r0, #2
    4ee8:	bl	dab8 <random(long, long)>
    4eec:	vmov	s16, r0
    4ef0:	ldr	r0, [r7, #0]
    4ef2:	add.w	r1, r0, #900	; 0x384
    4ef6:	add.w	r0, r0, #400	; 0x190
    4efa:	bl	dab8 <random(long, long)>
    4efe:	str	r0, [sp, #8]
    4f00:	vcvt.f32.s32	s0, s16
    4f04:	ldmia.w	r9, {r0, r1}
    4f08:	ldmia.w	r8, {r2, r3}
    4f0c:	stmia.w	sp, {r0, r1}
    4f10:	adds	r1, r6, #0
    4f12:	ldr	r0, [pc, #160]	; (4fb4 <ceremony_animation()+0x2c4>)
    4f14:	it	ne
    4f16:	movne	r1, #1
    4f18:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
    4f1c:	movs	r1, #2
    4f1e:	movs	r0, #0
    4f20:	bl	dab8 <random(long, long)>
    4f24:	movs	r1, #10
    4f26:	mov	r6, r0
    4f28:	movs	r0, #2
    4f2a:	bl	dab8 <random(long, long)>
    4f2e:	vmov	s16, r0
    4f32:	ldr	r0, [r7, #0]
    4f34:	add.w	r1, r0, #900	; 0x384
    4f38:	add.w	r0, r0, #400	; 0x190
    4f3c:	bl	dab8 <random(long, long)>
    4f40:	str	r0, [sp, #8]
    4f42:	vcvt.f32.s32	s0, s16
    4f46:	ldmia.w	r9, {r0, r1}
    4f4a:	ldmia.w	r8, {r2, r3}
    4f4e:	stmia.w	sp, {r0, r1}
    4f52:	adds	r1, r6, #0
    4f54:	ldr	r0, [pc, #96]	; (4fb8 <ceremony_animation()+0x2c8>)
    4f56:	it	ne
    4f58:	movne	r1, #1
    4f5a:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
      freq_offset = max(freq_offset - 50, 0); 
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f5e:	ldr	r3, [r7, #0]
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f60:	ldr	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f62:	adds	r3, #200	; 0xc8
    4f64:	ldr	r6, [r5, #0]
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f66:	subs	r2, #50	; 0x32
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f68:	cmp.w	r3, #800	; 0x320
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f6c:	bic.w	r2, r2, r2, asr #31
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f70:	it	ge
    4f72:	movge.w	r3, #800	; 0x320
    Color c = Color(204, 57, 90, HSB_MODE);
    if(sinceBeam > BEAM_FREQUENCY_INTERVAL-freq_offset){
      sinceBeam = 0;
      newBeam(&synapse_A, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      newBeam(&synapse_B, random(0, 2), c, random (2, 10), random(400+speed_offset, 900+speed_offset));
      freq_offset = max(freq_offset - 50, 0); 
    4f76:	str	r2, [r4, #0]
      speed_offset = constrain(speed_offset + 200, 0, 800);
    4f78:	bic.w	r3, r3, r3, asr #31
    4f7c:	str	r3, [r7, #0]
    4f7e:	b.n	4dc2 <ceremony_animation()+0xd2>
    4f80:	vmov	r6, s15
    4f84:	b.n	4dc2 <ceremony_animation()+0xd2>
    4f86:	nop
    4f88:	.word	0xd2f1a9fc
    4f8c:	.word	0x3ff0624d
    4f90:	.word	0x2000178d
    4f94:	.word	0x20002c20
    4f98:	.word	0x20002c18
    4f9c:	.word	0x400d4000
    4fa0:	.word	0x20008c9c
    4fa4:	.word	0x20007a5c
    4fa8:	.word	0x20002c1c
    4fac:	.word	0x2000096c
    4fb0:	.word	0x20005070
    4fb4:	.word	0x20008ca4
    4fb8:	.word	0x20008cb8

    didPulse = true;
	}

  
	if (sinceCircle > 6000 && didPulse && !didIntro) {
    4fbc:	ldr	r3, [pc, #464]	; (5190 <ceremony_animation()+0x4a0>)
    4fbe:	ldrb	r6, [r3, #0]
    4fc0:	cmp	r6, #0
    4fc2:	bne.w	4d64 <ceremony_animation()+0x74>
    newCircle(&matrix_A, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_A);
    4fc6:	mov.w	r1, #360	; 0x168
    4fca:	mov	r0, r6
    4fcc:	bl	dab8 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4fd0:	add.w	r0, r0, #720	; 0x2d0
    4fd4:	ldr.w	fp, [pc, #488]	; 51c0 <ceremony_animation()+0x4d0>
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4fd8:	mov.w	r8, #1
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4fdc:	lsrs	r3, r0, #3
    4fde:	mov.w	r9, #360	; 0x168
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    4fe2:	strb.w	r6, [sp, #28]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    4fe6:	movs	r7, #100	; 0x64
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4fe8:	umull	r2, r3, fp, r3
    4fec:	add	r5, sp, #16
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    4fee:	strb.w	r8, [sp, #29]
    4ff2:	mov.w	sl, #1000	; 0x3e8
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    4ff6:	lsrs	r3, r3, #2
    4ff8:	ldr	r2, [sp, #28]
    4ffa:	ldr	r1, [pc, #408]	; (5194 <ceremony_animation()+0x4a4>)
    4ffc:	mls	r3, r9, r3, r0
    5000:	ldr	r0, [pc, #404]	; (5198 <ceremony_animation()+0x4a8>)
	HSB_color.s = s;
    5002:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5006:	str	r3, [sp, #20]
	HSB_color.s = s;
	HSB_color.b = b;
    5008:	strb.w	r7, [sp, #25]
    500c:	str	r2, [sp, #0]
    500e:	str	r1, [sp, #8]
    5010:	str.w	sl, [sp, #4]
    5014:	ldmia.w	r5, {r1, r2, r3}
    5018:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
		newCircle(&matrix_B, Color(random(0, 360), 100, 100, HSB_MODE), 1000, &mask_B);
    501c:	mov	r1, r9
    501e:	mov	r0, r6
    5020:	bl	dab8 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5024:	add.w	r0, r0, #720	; 0x2d0
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    5028:	strb.w	r8, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    502c:	lsrs	r1, r0, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    502e:	strb.w	r6, [sp, #28]
    5032:	ldr	r2, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    5034:	umull	r3, fp, fp, r1
    5038:	ldr	r1, [pc, #352]	; (519c <ceremony_animation()+0x4ac>)
	HSB_color.s = s;
    503a:	strb.w	r7, [sp, #24]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    503e:	mov.w	fp, fp, lsr #2
	HSB_color.s = s;
	HSB_color.b = b;
    5042:	strb.w	r7, [sp, #25]
    5046:	str.w	sl, [sp, #4]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    504a:	mls	r3, r9, fp, r0
    504e:	ldr	r0, [pc, #336]	; (51a0 <ceremony_animation()+0x4b0>)
    5050:	str	r2, [sp, #0]
    5052:	str	r3, [sp, #20]
    5054:	str	r1, [sp, #8]
    5056:	ldmia.w	r5, {r1, r2, r3}
    505a:	bl	290 <newCircle(Adafruit_NeoPixel*, Color, int, Cellmask (*) [24][24])>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    505e:	mov	r5, r4
    didIntro = true;
    5060:	ldr	r3, [pc, #300]	; (5190 <ceremony_animation()+0x4a0>)
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5062:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    5064:	ldr	r1, [r4, #40]	; 0x28
    5066:	strb.w	r8, [r3]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    506a:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    506c:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    506e:	cmp	r3, r1
    5070:	it	eq
    5072:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5074:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    5076:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    5078:	ite	eq
    507a:	moveq	r4, #1
    507c:	movne	r4, #0
    507e:	cmp	r4, #0
    5080:	beq.n	506a <ceremony_animation()+0x37a>
    5082:	lsrs	r1, r3, #5
    5084:	ldr	r5, [pc, #284]	; (51a4 <ceremony_animation()+0x4b4>)
    5086:	orr.w	r1, r1, r2, lsl #27
    508a:	vmov	s15, r1
    508e:	vldr	d5, [pc, #248]	; 5188 <ceremony_animation()+0x498>
    5092:	vcvt.f64.u32	d7, s15
    5096:	vdiv.f64	d6, d7, d5
    509a:	vcvt.u32.f64	s12, d6
    509e:	vstr	s12, [r5]
    50a2:	b.n	4d66 <ceremony_animation()+0x76>
int speed_offset = 0;
void ceremony_animation(){

  	if (!didPulse && !didIntro) {
    Color c = Color(204, 57, 90, HSB_MODE);
		newBeam(&synapse_A, true, c, NUM_LEDS_SYNAPSE_A*1.5, 7 *1000);
    50a4:	add	r7, sp, #24
    50a6:	movw	r8, #7000	; 0x1b58
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    50aa:	mov.w	r9, #1
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    50ae:	movs	r1, #57	; 0x39
	HSB_color.b = b;
    50b0:	movs	r2, #90	; 0x5a
    50b2:	add	r6, sp, #16
	RGB_updated = false;
    50b4:	strb.w	r4, [sp, #28]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    50b8:	movs	r3, #204	; 0xcc
	HSB_color.s = s;
	HSB_color.b = b;
    50ba:	strb.w	r2, [sp, #25]
    50be:	str.w	r8, [sp, #8]
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
	HSB_color.s = s;
    50c2:	strb.w	r1, [sp, #24]
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    50c6:	strb.w	r9, [sp, #29]
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    50ca:	str	r3, [sp, #20]
    50cc:	vldr	s0, [pc, #216]	; 51a8 <ceremony_animation()+0x4b8>
    50d0:	ldmia.w	r7, {r0, r1}
    50d4:	ldmia.w	r6, {r2, r3}
    50d8:	stmia.w	sp, {r0, r1}
    50dc:	mov	r1, r9
    50de:	ldr	r0, [pc, #204]	; (51ac <ceremony_animation()+0x4bc>)
    50e0:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_A, false, c, NUM_LEDS_SYNAPSE_A*1.5, 7* 1000);
    50e4:	str.w	r8, [sp, #8]
    50e8:	vldr	s0, [pc, #188]	; 51a8 <ceremony_animation()+0x4b8>
    50ec:	ldmia.w	r7, {r0, r1}
    50f0:	ldmia.w	r6, {r2, r3}
    50f4:	stmia.w	sp, {r0, r1}
    50f8:	mov	r1, r4
    50fa:	ldr	r0, [pc, #176]	; (51ac <ceremony_animation()+0x4bc>)
    50fc:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, true, c, NUM_LEDS_SYNAPSE_B*1.5, 7 * 1000);
    5100:	str.w	r8, [sp, #8]
    5104:	vldr	s0, [pc, #168]	; 51b0 <ceremony_animation()+0x4c0>
    5108:	ldmia.w	r7, {r0, r1}
    510c:	ldmia.w	r6, {r2, r3}
    5110:	stmia.w	sp, {r0, r1}
    5114:	mov	r1, r9
    5116:	ldr	r0, [pc, #156]	; (51b4 <ceremony_animation()+0x4c4>)
    5118:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
		newBeam(&synapse_B, false, c, NUM_LEDS_SYNAPSE_B*1.5, 7 * 1000);
    511c:	str.w	r8, [sp, #8]
    5120:	vldr	s0, [pc, #140]	; 51b0 <ceremony_animation()+0x4c0>
    5124:	ldmia.w	r7, {r0, r1}
    5128:	ldmia.w	r6, {r2, r3}
    512c:	stmia.w	sp, {r0, r1}
    5130:	mov	r1, r4
    5132:	ldr	r0, [pc, #128]	; (51b4 <ceremony_animation()+0x4c4>)
    5134:	bl	1c0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    5138:	ldr	r3, [pc, #124]	; (51b8 <ceremony_animation()+0x4c8>)
    513a:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    513c:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    513e:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    5140:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    5142:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    5144:	cmp	r3, r1
    5146:	it	eq
    5148:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    514a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    514c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    514e:	ite	eq
    5150:	moveq	r6, #1
    5152:	movne	r6, #0
    5154:	cmp	r6, #0
    5156:	beq.n	5140 <ceremony_animation()+0x450>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
    5158:	lsrs	r1, r3, #5
    515a:	ldr	r2, [pc, #96]	; (51bc <ceremony_animation()+0x4cc>)
		sinceCircle = 0;

    didPulse = true;
    515c:	movs	r3, #1
    515e:	orr.w	r1, r1, r0, lsl #27
    5162:	strb	r3, [r5, #0]
    5164:	vmov	s15, r1
    5168:	vldr	d5, [pc, #28]	; 5188 <ceremony_animation()+0x498>
    516c:	vcvt.f64.u32	d7, s15
    5170:	vdiv.f64	d6, d7, d5
    5174:	vcvt.u32.f64	s15, d6
    5178:	vmov	lr, s15
    517c:	vstr	s15, [r2]
    5180:	b.n	4d10 <ceremony_animation()+0x20>
    5182:	nop
    5184:	nop.w
    5188:	.word	0xd2f1a9fc
    518c:	.word	0x3ff0624d
    5190:	.word	0x20002c20
    5194:	.word	0x20009ef0
    5198:	.word	0x20003e48
    519c:	.word	0x20003e70
    51a0:	.word	0x20003e5c
    51a4:	.word	0x20008c9c
    51a8:	.word	0x436a0000
    51ac:	.word	0x20008ca4
    51b0:	.word	0x432c8000
    51b4:	.word	0x20008cb8
    51b8:	.word	0x400d4000
    51bc:	.word	0x20002c18
    51c0:	.word	0x16c16c17
    51c4:	.word	0x00000000

000051c8 <_GLOBAL__sub_I_bri_level>:
void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
}
    51c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    51cc:	bl	cd34 <eeprom_initialize>
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    51d0:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51d4:	ldr	r3, [pc, #972]	; (55a4 <_GLOBAL__sub_I_bri_level+0x3dc>)
      _s = s;
    51d6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51da:	movs	r5, #0
      _s = s;
    51dc:	mov.w	lr, #252	; 0xfc
    51e0:	strb.w	r6, [r3, #68]	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51e4:	movs	r6, #152	; 0x98
      _s = s;
    51e6:	mov.w	fp, #251	; 0xfb
      _b = b;
    51ea:	mov.w	ip, #149	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51ee:	str	r6, [r3, #16]
      _s = s;
    51f0:	mov.w	r6, #22
    51f4:	strb.w	r1, [r3, #36]	; 0x24
    51f8:	movs	r7, #121	; 0x79
    51fa:	strb	r6, [r3, #20]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51fc:	movs	r6, #168	; 0xa8
      _s = s;
    51fe:	strb.w	r1, [r3, #84]	; 0x54
    5202:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5206:	str	r6, [r3, #24]
      _s = s;
    5208:	mov.w	sl, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    520c:	str	r6, [r3, #80]	; 0x50
      _s = s;
    520e:	mvn.w	r6, #38	; 0x26
      _b = b;
    5212:	strb.w	ip, [r3, #21]
    5216:	mov.w	r8, #175	; 0xaf
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    521a:	strb	r6, [r3, #28]
      _b = b;
    521c:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5220:	strb.w	lr, [r3, #44]	; 0x2c
    5224:	movs	r0, #216	; 0xd8
      _b = b;
    5226:	strb	r6, [r3, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5228:	movs	r6, #145	; 0x91
      _s = s;
    522a:	strb.w	r1, [r3, #60]	; 0x3c
    522e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5232:	str	r6, [r3, #32]
      _s = s;
      _b = b;
    5234:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5238:	str	r5, [r3, #0]
    523a:	add.w	r2, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    523e:	strb.w	r6, [r3, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5242:	movs	r6, #165	; 0xa5
      _s = s;
    5244:	strb	r5, [r3, #4]
      _b = b;
    5246:	mov.w	r9, #254	; 0xfe
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    524a:	str	r6, [r3, #40]	; 0x28
      _s = s;
      _b = b;
    524c:	mov.w	r6, #120	; 0x78
    5250:	strb	r5, [r3, #5]
    5252:	strb.w	r6, [r3, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5256:	movs	r6, #186	; 0xba
    5258:	str	r5, [r3, #8]
    525a:	str	r6, [r3, #48]	; 0x30
      _s = s;
      _b = b;
    525c:	mov.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5260:	strb	r5, [r3, #12]
      _b = b;
    5262:	strb.w	r6, [r3, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5266:	movs	r6, #159	; 0x9f
      _s = s;
      _b = b;
    5268:	strb	r5, [r3, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    526a:	str	r6, [r3, #56]	; 0x38
      _s = s;
      _b = b;
    526c:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5270:	strb.w	fp, [r3, #52]	; 0x34
      _b = b;
    5274:	strb.w	r6, [r3, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5278:	movs	r6, #92	; 0x5c
    527a:	ldr	r4, [pc, #812]	; (55a8 <_GLOBAL__sub_I_bri_level+0x3e0>)
    527c:	str	r6, [r3, #64]	; 0x40
      _s = s;
      _b = b;
    527e:	mvn.w	r6, #23
    5282:	strb.w	r6, [r3, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5286:	movs	r6, #106	; 0x6a
    5288:	str	r6, [r3, #72]	; 0x48
      _s = s;
    528a:	mvn.w	r6, #124	; 0x7c
    528e:	strb.w	r6, [r3, #76]	; 0x4c
      _b = b;
    5292:	mvn.w	r6, #21
    5296:	strb.w	r6, [r3, #77]	; 0x4d
    529a:	mvn.w	r6, #36	; 0x24
    529e:	strb.w	r6, [r3, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52a2:	movs	r6, #168	; 0xa8
      _s = s;
    52a4:	strb.w	r1, [r3, #92]	; 0x5c
    52a8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52ac:	str	r6, [r3, #88]	; 0x58
    52ae:	movs	r6, #165	; 0xa5
      _s = s;
    52b0:	strb.w	r1, [r3, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52b4:	str	r6, [r3, #96]	; 0x60
      _s = s;
      _b = b;
    52b6:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52ba:	str	r5, [r3, #104]	; 0x68
      _s = s;
      _b = b;
    52bc:	strb.w	r6, [r3, #93]	; 0x5d
    52c0:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52c4:	strb.w	r5, [r3, #108]	; 0x6c
      _b = b;
    52c8:	strb.w	r6, [r3, #101]	; 0x65
    52cc:	mvn.w	r6, #46	; 0x2e
    52d0:	strb.w	r5, [r3, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52d4:	str	r5, [r3, #112]	; 0x70
      _s = s;
    52d6:	strb.w	r5, [r3, #116]	; 0x74
      _b = b;
    52da:	strb.w	r5, [r3, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52de:	str	r5, [r3, #120]	; 0x78
      _s = s;
    52e0:	strb.w	r5, [r3, #124]	; 0x7c
      _b = b;
    52e4:	strb.w	r5, [r3, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52e8:	str.w	r5, [r3, #128]	; 0x80
      _s = s;
    52ec:	strb.w	r5, [r3, #132]	; 0x84
      _b = b;
    52f0:	strb.w	r5, [r3, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52f4:	str.w	r5, [r3, #136]	; 0x88
      _s = s;
    52f8:	strb.w	r5, [r3, #140]	; 0x8c
      _b = b;
    52fc:	strb.w	r5, [r3, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5300:	str.w	r5, [r3, #144]	; 0x90
      _s = s;
    5304:	strb.w	r5, [r3, #148]	; 0x94
      _b = b;
    5308:	strb.w	r5, [r3, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    530c:	str.w	r5, [r3, #152]	; 0x98
      _s = s;
    5310:	strb.w	r5, [r3, #156]	; 0x9c
      _b = b;
    5314:	strb.w	r5, [r3, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5318:	str.w	r5, [r3, #160]	; 0xa0
      _s = s;
    531c:	strb.w	r5, [r3, #164]	; 0xa4
      _b = b;
    5320:	strb.w	r5, [r3, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5324:	str.w	r5, [r3, #168]	; 0xa8
      _s = s;
    5328:	strb.w	r5, [r3, #172]	; 0xac
      _b = b;
    532c:	strb.w	r5, [r3, #173]	; 0xad
    5330:	strb.w	r6, [r3, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5334:	movs	r6, #188	; 0xbc
      _s = s;
    5336:	strb.w	lr, [r3, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    533a:	str.w	r6, [r3, #240]	; 0xf0
    533e:	movs	r6, #131	; 0x83
      _s = s;
    5340:	strb.w	r1, [r3, #236]	; 0xec
    5344:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5348:	str.w	r6, [r3, #256]	; 0x100
      _s = s;
    534c:	mvn.w	r6, #124	; 0x7c
    5350:	strb.w	lr, [r3, #252]	; 0xfc
    5354:	strb.w	r6, [r3, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5358:	movs	r6, #52	; 0x34
    535a:	str.w	r5, [r3, #176]	; 0xb0
    535e:	str.w	r6, [r3, #208]	; 0xd0
      _s = s;
    5362:	mov.w	r6, #100	; 0x64
    5366:	strb.w	r5, [r3, #180]	; 0xb4
    536a:	strb.w	r6, [r3, #212]	; 0xd4
      _b = b;
    536e:	mvn.w	r6, #25
    5372:	strb.w	r5, [r3, #181]	; 0xb5
    5376:	strb.w	r6, [r3, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    537a:	movs	r6, #155	; 0x9b
    537c:	str.w	r5, [r3, #184]	; 0xb8
    5380:	str.w	r6, [r3, #216]	; 0xd8
      _s = s;
    5384:	mvn.w	r6, #118	; 0x76
    5388:	strb.w	r5, [r3, #188]	; 0xbc
    538c:	strb.w	r6, [r3, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5390:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    5392:	strb.w	r5, [r3, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5396:	str.w	r6, [r3, #224]	; 0xe0
      _s = s;
      _b = b;
    539a:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    539e:	str.w	r5, [r3, #192]	; 0xc0
      _s = s;
      _b = b;
    53a2:	strb.w	r6, [r3, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53a6:	movs	r6, #184	; 0xb8
      _s = s;
    53a8:	strb.w	r5, [r3, #196]	; 0xc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ac:	str.w	r6, [r3, #232]	; 0xe8
      _s = s;
      _b = b;
    53b0:	mov.w	r6, #97	; 0x61
    53b4:	strb.w	r5, [r3, #197]	; 0xc5
    53b8:	strb.w	r6, [r3, #237]	; 0xed
    53bc:	mov.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53c0:	str.w	r5, [r3, #200]	; 0xc8
      _s = s;
      _b = b;
    53c4:	strb.w	r6, [r3, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53c8:	movs	r6, #161	; 0xa1
      _s = s;
    53ca:	strb.w	r5, [r3, #204]	; 0xcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ce:	str.w	r6, [r3, #248]	; 0xf8
      _s = s;
      _b = b;
    53d2:	mov.w	r6, #85	; 0x55
    53d6:	strb.w	r5, [r3, #205]	; 0xcd
    53da:	strb.w	r6, [r3, #253]	; 0xfd
    53de:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53e2:	strb.w	fp, [r3, #244]	; 0xf4
      _b = b;
    53e6:	strb.w	r6, [r3, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ea:	movs	r6, #97	; 0x61
      _s = s;
    53ec:	strb.w	r7, [r3, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53f0:	str.w	r6, [r3, #272]	; 0x110
      _s = s;
    53f4:	mov.w	r6, #127	; 0x7f
    53f8:	strb.w	r1, [r3, #300]	; 0x12c
      _b = b;
    53fc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5400:	strb.w	r6, [r3, #276]	; 0x114
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5404:	movs	r6, #116	; 0x74
      _s = s;
      _b = b;
    5406:	strb.w	r7, [r3, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    540a:	str.w	r6, [r3, #264]	; 0x108
      _s = s;
      _b = b;
    540e:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5412:	str.w	r5, [r3, #312]	; 0x138
      _s = s;
      _b = b;
    5416:	strb.w	r6, [r3, #269]	; 0x10d
    541a:	strb.w	r6, [r3, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    541e:	mvn.w	r6, #46	; 0x2e
    5422:	strb.w	r5, [r3, #316]	; 0x13c
    5426:	strb.w	r6, [r3, #284]	; 0x11c
      _b = b;
    542a:	mvn.w	r6, #22
    542e:	strb.w	r5, [r3, #317]	; 0x13d
    5432:	strb.w	r6, [r3, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5436:	movs	r6, #92	; 0x5c
    5438:	str.w	r5, [r3, #320]	; 0x140
    543c:	str.w	r6, [r3, #288]	; 0x120
      _s = s;
      _b = b;
    5440:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5444:	strb.w	r5, [r3, #324]	; 0x144
      _b = b;
    5448:	strb.w	r6, [r3, #293]	; 0x125
    544c:	mvn.w	r6, #100	; 0x64
    5450:	strb.w	r5, [r3, #325]	; 0x145
    5454:	strb.w	r6, [r3, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5458:	movs	r6, #127	; 0x7f
    545a:	str.w	r5, [r3, #328]	; 0x148
    545e:	str.w	r6, [r3, #304]	; 0x130
    5462:	movs	r6, #73	; 0x49
      _s = s;
    5464:	strb.w	r5, [r3, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5468:	str.w	r6, [r3, #280]	; 0x118
      _s = s;
    546c:	mvn.w	r6, #49	; 0x31
      _b = b;
    5470:	strb.w	r5, [r3, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5474:	strb.w	r6, [r3, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5478:	movs	r6, #123	; 0x7b
    547a:	str.w	r5, [r3, #336]	; 0x150
    547e:	str.w	r6, [r3, #296]	; 0x128
      _s = s;
    5482:	mvn.w	r6, #11
    5486:	strb.w	r5, [r3, #340]	; 0x154
    548a:	strb.w	r6, [r3, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    548e:	movs	r6, #192	; 0xc0
      _s = s;
      _b = b;
    5490:	strb.w	r5, [r3, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5494:	str.w	r5, [r3, #344]	; 0x158
      _s = s;
    5498:	strb.w	r5, [r3, #348]	; 0x15c
      _b = b;
    549c:	strb.w	r5, [r3, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54a0:	str.w	r6, [r3, #424]	; 0x1a8
      _s = s;
      _b = b;
    54a4:	mov.w	r6, #61	; 0x3d
    54a8:	strb.w	r1, [r3, #405]	; 0x195
    54ac:	strb.w	r6, [r3, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54b0:	movs	r6, #174	; 0xae
      _s = s;
    54b2:	strb.w	r1, [r3, #420]	; 0x1a4
    54b6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54ba:	str.w	r6, [r3, #432]	; 0x1b0
    54be:	movs	r6, #48	; 0x30
      _s = s;
    54c0:	strb.w	r1, [r3, #428]	; 0x1ac
    54c4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54c8:	str.w	r6, [r3, #400]	; 0x190
      _s = s;
    54cc:	mvn.w	r6, #66	; 0x42
    54d0:	strb.w	lr, [r3, #436]	; 0x1b4
    54d4:	strb.w	r6, [r3, #404]	; 0x194
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54d8:	movs	r6, #142	; 0x8e
    54da:	str.w	r5, [r3, #352]	; 0x160
    54de:	str.w	r6, [r3, #408]	; 0x198
      _s = s;
    54e2:	mov.w	r6, #104	; 0x68
    54e6:	strb.w	r5, [r3, #356]	; 0x164
    54ea:	strb.w	r6, [r3, #412]	; 0x19c
      _b = b;
    54ee:	mvn.w	r6, #28
    54f2:	strb.w	r5, [r3, #357]	; 0x165
    54f6:	strb.w	r6, [r3, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54fa:	movs	r6, #180	; 0xb4
    54fc:	str.w	r5, [r3, #360]	; 0x168
    5500:	str.w	r6, [r3, #416]	; 0x1a0
      _s = s;
      _b = b;
    5504:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5508:	strb.w	r5, [r3, #364]	; 0x16c
      _b = b;
    550c:	strb.w	r6, [r3, #421]	; 0x1a5
    5510:	mov.w	r6, #108	; 0x6c
    5514:	strb.w	r5, [r3, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5518:	str.w	r5, [r3, #368]	; 0x170
      _s = s;
    551c:	strb.w	r5, [r3, #372]	; 0x174
      _b = b;
    5520:	strb.w	r5, [r3, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5524:	str.w	r5, [r3, #376]	; 0x178
      _s = s;
    5528:	strb.w	r5, [r3, #380]	; 0x17c
      _b = b;
    552c:	strb.w	r5, [r3, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5530:	str.w	r5, [r3, #384]	; 0x180
      _s = s;
    5534:	strb.w	r5, [r3, #388]	; 0x184
      _b = b;
    5538:	strb.w	r5, [r3, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    553c:	str.w	r5, [r3, #392]	; 0x188
      _s = s;
    5540:	strb.w	r5, [r3, #396]	; 0x18c
      _b = b;
    5544:	strb.w	r5, [r3, #397]	; 0x18d
    5548:	strb.w	r6, [r3, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    554c:	mvn.w	r6, #54	; 0x36
    5550:	strb.w	r1, [r3, #444]	; 0x1bc
    5554:	strb.w	r6, [r3, #460]	; 0x1cc
      _b = b;
    5558:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    555c:	strb.w	r1, [r3, #452]	; 0x1c4
      _b = b;
    5560:	strb.w	r6, [r3, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5564:	mvn.w	r6, #45	; 0x2d
    5568:	strb.w	r1, [r3, #476]	; 0x1dc
    556c:	mvn.w	r1, #2
    5570:	strb.w	r6, [r3, #468]	; 0x1d4
      _b = b;
    5574:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5578:	strb.w	r1, [r3, #492]	; 0x1ec
    557c:	mvn.w	r1, #2
      _b = b;
    5580:	strb.w	r6, [r3, #469]	; 0x1d5
    5584:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5588:	strb.w	lr, [r3, #484]	; 0x1e4
      _b = b;
    558c:	strb.w	r6, [r3, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5590:	movs	r6, #104	; 0x68
      _s = s;
    5592:	strb.w	r1, [r3, #500]	; 0x1f4
    5596:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    559a:	str.w	r6, [r3, #488]	; 0x1e8
      _s = s;
      _b = b;
    559e:	mvn.w	r6, #68	; 0x44
    55a2:	b.n	55ac <_GLOBAL__sub_I_bri_level+0x3e4>
    55a4:	.word	0x20009ef0
    55a8:	.word	0x20003e70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55ac:	str.w	ip, [r3, #512]	; 0x200
      _s = s;
      _b = b;
    55b0:	strb.w	r6, [r3, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55b4:	movs	r6, #115	; 0x73
    55b6:	str.w	r5, [r3, #520]	; 0x208
    55ba:	str.w	r6, [r3, #496]	; 0x1f0
      _s = s;
    55be:	mvn.w	r6, #67	; 0x43
    55c2:	strb.w	r5, [r3, #524]	; 0x20c
    55c6:	strb.w	r6, [r3, #516]	; 0x204
      _b = b;
    55ca:	mov.w	r6, #54	; 0x36
    55ce:	strb.w	r6, [r3, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55d2:	movs	r6, #167	; 0xa7
    55d4:	str.w	r6, [r3, #440]	; 0x1b8
      _s = s;
      _b = b;
    55d8:	mov.w	r6, #102	; 0x66
    55dc:	strb.w	r6, [r3, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55e0:	movs	r6, #162	; 0xa2
    55e2:	str.w	r6, [r3, #448]	; 0x1c0
    55e6:	movs	r6, #74	; 0x4a
    55e8:	str.w	r6, [r3, #456]	; 0x1c8
    55ec:	movs	r6, #75	; 0x4b
    55ee:	str.w	r6, [r3, #464]	; 0x1d0
    55f2:	movs	r6, #128	; 0x80
    55f4:	str.w	r6, [r3, #472]	; 0x1d8
    55f8:	movs	r6, #124	; 0x7c
    55fa:	str.w	r6, [r3, #480]	; 0x1e0
      _s = s;
      _b = b;
    55fe:	mov.w	r6, #112	; 0x70
    5602:	strb.w	r6, [r3, #485]	; 0x1e5
    5606:	mvn.w	r6, #65	; 0x41
    560a:	strb.w	r6, [r3, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    560e:	movs	r6, #66	; 0x42
    5610:	str.w	r6, [r3, #504]	; 0x1f8
      _s = s;
    5614:	mvn.w	r6, #7
    5618:	strb.w	r6, [r3, #508]	; 0x1fc
      _b = b;
    561c:	mvn.w	r6, #33	; 0x21
    5620:	strb.w	r6, [r3, #509]	; 0x1fd
    5624:	mvn.w	r6, #121	; 0x79
    5628:	strb.w	r6, [r3, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    562c:	movs	r6, #47	; 0x2f
      _s = s;
      _b = b;
    562e:	strb.w	r5, [r3, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5632:	str.w	r6, [r3, #592]	; 0x250
    5636:	movs	r6, #74	; 0x4a
      _s = s;
    5638:	strb.w	r1, [r3, #612]	; 0x264
    563c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5640:	str.w	r6, [r3, #600]	; 0x258
      _s = s;
      _b = b;
    5644:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5648:	str.w	r5, [r3, #528]	; 0x210
      _s = s;
      _b = b;
    564c:	strb.w	r6, [r3, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5650:	movs	r6, #171	; 0xab
      _s = s;
    5652:	strb.w	r5, [r3, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5656:	str.w	r6, [r3, #608]	; 0x260
      _s = s;
    565a:	mov.w	r6, #117	; 0x75
      _b = b;
    565e:	strb.w	r5, [r3, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5662:	strb.w	r6, [r3, #604]	; 0x25c
      _b = b;
    5666:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    566a:	str.w	r5, [r3, #536]	; 0x218
      _s = s;
      _b = b;
    566e:	strb.w	r6, [r3, #597]	; 0x255
    5672:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5676:	strb.w	r5, [r3, #540]	; 0x21c
      _b = b;
    567a:	strb.w	r5, [r3, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    567e:	str.w	r5, [r3, #544]	; 0x220
      _s = s;
    5682:	strb.w	r5, [r3, #548]	; 0x224
      _b = b;
    5686:	strb.w	r5, [r3, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    568a:	str.w	r5, [r3, #552]	; 0x228
      _s = s;
    568e:	strb.w	r5, [r3, #556]	; 0x22c
      _b = b;
    5692:	strb.w	r5, [r3, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5696:	str.w	r5, [r3, #560]	; 0x230
      _s = s;
    569a:	strb.w	r5, [r3, #564]	; 0x234
      _b = b;
    569e:	strb.w	r5, [r3, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56a2:	str.w	r5, [r3, #568]	; 0x238
      _s = s;
    56a6:	strb.w	r5, [r3, #572]	; 0x23c
      _b = b;
    56aa:	strb.w	r5, [r3, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ae:	str.w	r5, [r3, #576]	; 0x240
      _s = s;
    56b2:	strb.w	r5, [r3, #580]	; 0x244
      _b = b;
    56b6:	strb.w	r5, [r3, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ba:	str.w	r5, [r3, #584]	; 0x248
      _s = s;
    56be:	strb.w	r5, [r3, #588]	; 0x24c
      _b = b;
    56c2:	strb.w	r5, [r3, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56c6:	strb.w	fp, [r3, #596]	; 0x254
      _b = b;
    56ca:	strb.w	r6, [r3, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ce:	movs	r6, #183	; 0xb7
      _s = s;
    56d0:	strb.w	r1, [r3, #620]	; 0x26c
    56d4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56d8:	str.w	r6, [r3, #616]	; 0x268
    56dc:	movs	r6, #172	; 0xac
      _s = s;
    56de:	strb.w	r1, [r3, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56e2:	str.w	r6, [r3, #624]	; 0x270
      _s = s;
      _b = b;
    56e6:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56ea:	strb.w	r1, [r3, #644]	; 0x284
    56ee:	mov.w	r1, #4294967295
      _b = b;
    56f2:	strb.w	r6, [r3, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56f6:	movs	r6, #144	; 0x90
      _s = s;
    56f8:	strb.w	r1, [r3, #652]	; 0x28c
    56fc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5700:	str.w	r6, [r3, #648]	; 0x288
    5704:	movs	r6, #142	; 0x8e
      _s = s;
    5706:	strb.w	r1, [r3, #668]	; 0x29c
    570a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    570e:	str.w	r6, [r3, #664]	; 0x298
      _s = s;
      _b = b;
    5712:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5716:	strb.w	r1, [r3, #676]	; 0x2a4
    571a:	mvn.w	r1, #2
      _b = b;
    571e:	strb.w	r6, [r3, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5722:	movs	r6, #85	; 0x55
      _s = s;
    5724:	strb.w	r1, [r3, #684]	; 0x2ac
    5728:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    572c:	str.w	r6, [r3, #680]	; 0x2a8
      _s = s;
      _b = b;
    5730:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5734:	strb.w	r1, [r3, #692]	; 0x2b4
    5738:	mvn.w	r1, #2
      _b = b;
    573c:	strb.w	r6, [r3, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5740:	movs	r6, #120	; 0x78
      _s = s;
    5742:	strb.w	r1, [r3, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5746:	str.w	r6, [r3, #688]	; 0x2b0
      _s = s;
      _b = b;
    574a:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    574e:	strb.w	lr, [r3, #636]	; 0x27c
      _b = b;
    5752:	strb.w	r6, [r3, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5756:	movs	r6, #66	; 0x42
      _s = s;
      _b = b;
    5758:	strb.w	r7, [r3, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    575c:	str.w	r6, [r3, #696]	; 0x2b8
      _s = s;
      _b = b;
    5760:	mov.w	r6, #86	; 0x56
    5764:	strb.w	r7, [r3, #653]	; 0x28d
    5768:	strb.w	r6, [r3, #661]	; 0x295
    576c:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5770:	strb.w	lr, [r3, #660]	; 0x294
      _b = b;
    5774:	strb.w	r6, [r3, #621]	; 0x26d
    5778:	mov.w	r6, #94	; 0x5e
    577c:	strb.w	r6, [r3, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5780:	movs	r6, #160	; 0xa0
    5782:	str.w	r6, [r3, #632]	; 0x278
    5786:	movs	r6, #148	; 0x94
    5788:	str.w	r6, [r3, #640]	; 0x280
    578c:	str.w	r6, [r3, #656]	; 0x290
      _s = s;
      _b = b;
    5790:	mov.w	r6, #103	; 0x67
    5794:	strb.w	r6, [r3, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5798:	movs	r6, #122	; 0x7a
    579a:	mov	r1, r6
    579c:	str.w	r6, [r3, #672]	; 0x2a0
      _s = s;
      _b = b;
    57a0:	mvn.w	r6, #37	; 0x25
    57a4:	strb.w	r6, [r3, #701]	; 0x2bd
    57a8:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57ac:	str.w	r1, [r3, #704]	; 0x2c0
      _s = s;
    57b0:	mvn.w	r1, #2
      _b = b;
    57b4:	strb.w	r6, [r3, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57b8:	movs	r6, #112	; 0x70
    57ba:	str.w	r5, [r3, #728]	; 0x2d8
    57be:	str.w	r6, [r3, #712]	; 0x2c8
      _s = s;
      _b = b;
    57c2:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57c6:	strb.w	r5, [r3, #732]	; 0x2dc
      _b = b;
    57ca:	strb.w	r6, [r3, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57ce:	mov.w	r6, #110	; 0x6e
      _b = b;
    57d2:	strb.w	r5, [r3, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57d6:	strb.w	r6, [r3, #708]	; 0x2c4
    57da:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57de:	str.w	r5, [r3, #736]	; 0x2e0
      _s = s;
    57e2:	strb.w	r6, [r3, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57e6:	movs	r6, #56	; 0x38
      _s = s;
    57e8:	strb.w	r5, [r3, #740]	; 0x2e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57ec:	str.w	r6, [r3, #720]	; 0x2d0
      _s = s;
    57f0:	mvn.w	r6, #26
      _b = b;
    57f4:	strb.w	r5, [r3, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57f8:	strb.w	r6, [r3, #724]	; 0x2d4
      _b = b;
    57fc:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5800:	str.w	r5, [r3, #744]	; 0x2e8
      _s = s;
      _b = b;
    5804:	strb.w	r6, [r3, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5808:	movs	r6, #40	; 0x28
      _s = s;
    580a:	strb.w	r5, [r3, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    580e:	str.w	r6, [r3, #784]	; 0x310
      _s = s;
    5812:	mvn.w	r6, #16
      _b = b;
    5816:	strb.w	r5, [r3, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    581a:	strb.w	r6, [r3, #788]	; 0x314
      _b = b;
    581e:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5822:	str.w	r5, [r3, #752]	; 0x2f0
      _s = s;
    5826:	strb.w	r5, [r3, #756]	; 0x2f4
      _b = b;
    582a:	strb.w	r5, [r3, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    582e:	str.w	r5, [r3, #760]	; 0x2f8
      _s = s;
    5832:	strb.w	r5, [r3, #764]	; 0x2fc
      _b = b;
    5836:	strb.w	r5, [r3, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    583a:	str.w	r5, [r3, #768]	; 0x300
      _s = s;
    583e:	strb.w	r5, [r3, #772]	; 0x304
      _b = b;
    5842:	strb.w	r5, [r3, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5846:	str.w	r5, [r3, #776]	; 0x308
      _s = s;
    584a:	strb.w	r5, [r3, #780]	; 0x30c
      _b = b;
    584e:	strb.w	r5, [r3, #781]	; 0x30d
    5852:	strb.w	r6, [r3, #789]	; 0x315
    5856:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    585a:	strb.w	r1, [r3, #836]	; 0x344
    585e:	mov.w	r1, #4294967295
      _b = b;
    5862:	strb.w	r6, [r3, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5866:	movs	r6, #174	; 0xae
      _s = s;
    5868:	strb.w	r1, [r3, #844]	; 0x34c
    586c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5870:	str.w	r6, [r3, #808]	; 0x328
    5874:	str.w	r6, [r3, #816]	; 0x330
    5878:	movs	r6, #148	; 0x94
      _s = s;
    587a:	strb.w	r1, [r3, #852]	; 0x354
    587e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5882:	str.w	r6, [r3, #832]	; 0x340
      _s = s;
      _b = b;
    5886:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    588a:	strb.w	r1, [r3, #860]	; 0x35c
    588e:	mov.w	r1, #4294967295
      _b = b;
    5892:	strb.w	r6, [r3, #837]	; 0x345
    5896:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    589a:	strb.w	r1, [r3, #868]	; 0x364
    589e:	mvn.w	r1, #2
      _b = b;
    58a2:	strb.w	r6, [r3, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58a6:	movs	r6, #144	; 0x90
      _s = s;
    58a8:	strb.w	lr, [r3, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58ac:	str.w	r6, [r3, #848]	; 0x350
      _s = s;
      _b = b;
    58b0:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58b4:	strb.w	lr, [r3, #828]	; 0x33c
      _b = b;
    58b8:	strb.w	r6, [r3, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58bc:	movs	r6, #139	; 0x8b
      _s = s;
      _b = b;
    58be:	strb.w	r7, [r3, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58c2:	str.w	r6, [r3, #856]	; 0x358
      _s = s;
      _b = b;
    58c6:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58ca:	strb.w	r1, [r3, #876]	; 0x36c
    58ce:	mov.w	r1, #4294967295
      _b = b;
    58d2:	strb.w	r6, [r3, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58d6:	movs	r6, #122	; 0x7a
    58d8:	str.w	r6, [r3, #864]	; 0x360
      _s = s;
      _b = b;
    58dc:	mvn.w	r6, #121	; 0x79
    58e0:	strb.w	r6, [r3, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58e4:	movs	r6, #85	; 0x55
    58e6:	str.w	r6, [r3, #872]	; 0x368
    58ea:	movs	r6, #37	; 0x25
    58ec:	str.w	r6, [r3, #792]	; 0x318
      _s = s;
    58f0:	mvn.w	r6, #5
    58f4:	strb.w	r6, [r3, #796]	; 0x31c
    58f8:	strb.w	r6, [r3, #820]	; 0x334
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58fc:	movs	r6, #136	; 0x88
    58fe:	str.w	r6, [r3, #800]	; 0x320
      _s = s;
    5902:	mov.w	r6, #109	; 0x6d
    5906:	strb.w	r6, [r3, #804]	; 0x324
      _b = b;
    590a:	mvn.w	r6, #24
    590e:	strb.w	r6, [r3, #805]	; 0x325
    5912:	mov.w	r6, #88	; 0x58
    5916:	strb.w	r6, [r3, #813]	; 0x32d
    591a:	mov.w	r6, #62	; 0x3e
    591e:	strb.w	r6, [r3, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5922:	movs	r6, #158	; 0x9e
    5924:	str.w	r6, [r3, #824]	; 0x338
    5928:	movs	r6, #141	; 0x8d
    592a:	str.w	r6, [r3, #840]	; 0x348
      _s = s;
      _b = b;
    592e:	mvn.w	r6, #57	; 0x39
    5932:	strb.w	r6, [r3, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5936:	movs	r6, #123	; 0x7b
      _s = s;
    5938:	strb.w	r1, [r3, #884]	; 0x374
    593c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5940:	str.w	r6, [r3, #880]	; 0x370
    5944:	movs	r6, #97	; 0x61
      _s = s;
      _b = b;
    5946:	strb.w	ip, [r3, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    594a:	str.w	r6, [r3, #888]	; 0x378
      _s = s;
    594e:	mvn.w	r6, #5
    5952:	strb.w	r1, [r3, #924]	; 0x39c
    5956:	mov.w	r1, #4294967295
    595a:	strb.w	r6, [r3, #892]	; 0x37c
      _b = b;
    595e:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5962:	str.w	r5, [r3, #928]	; 0x3a0
      _s = s;
      _b = b;
    5966:	strb.w	r6, [r3, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    596a:	movs	r6, #71	; 0x47
      _s = s;
    596c:	strb.w	r5, [r3, #932]	; 0x3a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5970:	str.w	r6, [r3, #896]	; 0x380
      _s = s;
      _b = b;
    5974:	mvn.w	r6, #14
    5978:	strb.w	r5, [r3, #933]	; 0x3a5
    597c:	strb.w	r6, [r3, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5980:	movs	r6, #120	; 0x78
    5982:	str.w	r5, [r3, #936]	; 0x3a8
    5986:	str.w	r6, [r3, #904]	; 0x388
      _s = s;
    598a:	mov.w	r6, #99	; 0x63
    598e:	strb.w	r5, [r3, #940]	; 0x3ac
    5992:	strb.w	r6, [r3, #908]	; 0x38c
      _b = b;
    5996:	mvn.w	r6, #11
    599a:	strb.w	r5, [r3, #941]	; 0x3ad
    599e:	strb.w	r6, [r3, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59a2:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59a6:	str.w	r5, [r3, #944]	; 0x3b0
      _s = s;
    59aa:	strb.w	r6, [r3, #916]	; 0x394
      _b = b;
    59ae:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59b2:	strb.w	r5, [r3, #948]	; 0x3b4
      _b = b;
    59b6:	strb.w	r6, [r3, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ba:	movs	r6, #155	; 0x9b
      _s = s;
      _b = b;
    59bc:	strb.w	r5, [r3, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59c0:	str.w	r6, [r3, #920]	; 0x398
      _s = s;
      _b = b;
    59c4:	mov.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59c8:	str.w	r5, [r3, #952]	; 0x3b8
      _s = s;
      _b = b;
    59cc:	strb.w	r6, [r3, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59d0:	mvn.w	r6, #102	; 0x66
    59d4:	strb.w	r5, [r3, #956]	; 0x3bc
    59d8:	strb.w	r6, [r3, #900]	; 0x384
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59dc:	movs	r6, #90	; 0x5a
      _s = s;
      _b = b;
    59de:	strb.w	r5, [r3, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59e2:	str.w	r6, [r3, #912]	; 0x390
      _s = s;
    59e6:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ea:	str.w	r5, [r3, #960]	; 0x3c0
      _s = s;
    59ee:	strb.w	r5, [r3, #964]	; 0x3c4
      _b = b;
    59f2:	strb.w	r5, [r3, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59f6:	strb.w	r6, [r3, #980]	; 0x3d4
      _b = b;
    59fa:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59fe:	strb.w	r1, [r3, #1004]	; 0x3ec
      _b = b;
    5a02:	strb.w	r6, [r3, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a06:	movs	r6, #40	; 0x28
      _s = s;
    5a08:	strb.w	r1, [r3, #1012]	; 0x3f4
    5a0c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a10:	str.w	r6, [r3, #984]	; 0x3d8
      _s = s;
    5a14:	mvn.w	r6, #45	; 0x2d
    5a18:	strb.w	lr, [r3, #1020]	; 0x3fc
    5a1c:	strb.w	r6, [r3, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a20:	movs	r6, #75	; 0x4b
    5a22:	str.w	r5, [r3, #968]	; 0x3c8
    5a26:	str.w	r6, [r3, #992]	; 0x3e0
      _s = s;
    5a2a:	mov.w	r6, #92	; 0x5c
    5a2e:	strb.w	r5, [r3, #972]	; 0x3cc
    5a32:	strb.w	r6, [r3, #996]	; 0x3e4
      _b = b;
    5a36:	mvn.w	r6, #25
    5a3a:	strb.w	r5, [r3, #973]	; 0x3cd
    5a3e:	strb.w	r6, [r3, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a42:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    5a44:	strb.w	fp, [r3, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a48:	str.w	r6, [r3, #1000]	; 0x3e8
      _s = s;
      _b = b;
    5a4c:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a50:	strb.w	sl, [r3, #1052]	; 0x41c
      _b = b;
    5a54:	strb.w	r6, [r3, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a58:	movs	r6, #164	; 0xa4
    5a5a:	str.w	r6, [r3, #1016]	; 0x3f8
      _s = s;
      _b = b;
    5a5e:	mov.w	r6, #92	; 0x5c
    5a62:	strb.w	r6, [r3, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a66:	movs	r6, #127	; 0x7f
    5a68:	str.w	r6, [r3, #1024]	; 0x400
      _s = s;
      _b = b;
    5a6c:	mvn.w	r6, #77	; 0x4d
    5a70:	strb.w	r6, [r3, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a74:	movs	r6, #94	; 0x5e
    5a76:	str.w	r6, [r3, #1032]	; 0x408
      _s = s;
    5a7a:	mvn.w	r6, #114	; 0x72
    5a7e:	strb.w	r6, [r3, #1036]	; 0x40c
      _b = b;
    5a82:	mvn.w	r6, #26
    5a86:	strb.w	r6, [r3, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a8a:	movs	r6, #128	; 0x80
    5a8c:	str.w	r6, [r3, #1048]	; 0x418
      _s = s;
      _b = b;
    5a90:	mov.w	r6, #69	; 0x45
    5a94:	strb.w	r6, [r3, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a98:	movs	r6, #42	; 0x2a
    5a9a:	str.w	r6, [r3, #976]	; 0x3d0
    5a9e:	movs	r6, #173	; 0xad
    5aa0:	str.w	r6, [r3, #1008]	; 0x3f0
      _s = s;
    5aa4:	mvn.w	r6, #125	; 0x7d
    5aa8:	strb.w	r6, [r3, #1028]	; 0x404
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aac:	movs	r6, #93	; 0x5d
    5aae:	str.w	r6, [r3, #1040]	; 0x410
      _s = s;
    5ab2:	mvn.w	r6, #85	; 0x55
    5ab6:	strb.w	r6, [r3, #1044]	; 0x414
      _b = b;
    5aba:	mvn.w	r6, #19
    5abe:	strb.w	r6, [r3, #1045]	; 0x415
    5ac2:	mvn.w	r6, #101	; 0x65
    5ac6:	strb.w	r6, [r3, #1053]	; 0x41d
    5aca:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ace:	strb.w	r1, [r3, #1068]	; 0x42c
    5ad2:	mvn.w	r1, #2
      _b = b;
    5ad6:	strb.w	r6, [r3, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ada:	movs	r6, #90	; 0x5a
      _s = s;
    5adc:	strb.w	r1, [r3, #1084]	; 0x43c
    5ae0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ae4:	str.w	r6, [r3, #1064]	; 0x428
      _s = s;
      _b = b;
    5ae8:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5aec:	strb.w	r1, [r3, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5af0:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    5af2:	strb.w	r6, [r3, #1069]	; 0x42d
    5af6:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5afa:	str.w	r7, [r3, #1056]	; 0x420
      _s = s;
      _b = b;
    5afe:	strb.w	r6, [r3, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b02:	movs	r6, #128	; 0x80
      _s = s;
    5b04:	strb.w	lr, [r3, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b08:	str.w	r6, [r3, #1080]	; 0x438
    5b0c:	movs	r6, #123	; 0x7b
      _s = s;
    5b0e:	strb.w	lr, [r3, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b12:	str.w	r6, [r3, #1088]	; 0x440
      _s = s;
      _b = b;
    5b16:	mvn.w	r6, #50	; 0x32
    5b1a:	strb.w	r8, [r3, #1085]	; 0x43d
    5b1e:	strb.w	r6, [r3, #1093]	; 0x445
    5b22:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b26:	str.w	r1, [r3, #1096]	; 0x448
      _s = s;
    5b2a:	mov.w	r1, #4294967295
      _b = b;
    5b2e:	strb.w	r6, [r3, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b32:	movs	r6, #159	; 0x9f
    5b34:	str.w	r5, [r3, #1128]	; 0x468
    5b38:	str.w	r6, [r3, #1104]	; 0x450
      _s = s;
    5b3c:	mvn.w	r6, #95	; 0x5f
    5b40:	strb.w	r5, [r3, #1132]	; 0x46c
    5b44:	strb.w	r6, [r3, #1108]	; 0x454
      _b = b;
    5b48:	mvn.w	r6, #69	; 0x45
    5b4c:	strb.w	r5, [r3, #1133]	; 0x46d
    5b50:	strb.w	r6, [r3, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b54:	movs	r6, #145	; 0x91
    5b56:	str.w	r5, [r3, #1136]	; 0x470
    5b5a:	str.w	r6, [r3, #1112]	; 0x458
      _s = s;
      _b = b;
    5b5e:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b62:	strb.w	r5, [r3, #1140]	; 0x474
      _b = b;
    5b66:	strb.w	r6, [r3, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b6a:	mov.w	r6, #5
    5b6e:	strb.w	r6, [r3, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b72:	movs	r6, #65	; 0x41
    5b74:	str.w	r6, [r3, #1072]	; 0x430
      _s = s;
    5b78:	mvn.w	r6, #76	; 0x4c
    5b7c:	strb.w	r6, [r3, #1092]	; 0x444
    5b80:	mov.w	r6, #68	; 0x44
    5b84:	strb.w	r6, [r3, #1116]	; 0x45c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b88:	movs	r6, #150	; 0x96
    5b8a:	str.w	r6, [r3, #1120]	; 0x460
      _s = s;
      _b = b;
    5b8e:	mov.w	r6, #96	; 0x60
    5b92:	strb.w	r6, [r3, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b96:	movs	r6, #40	; 0x28
      _s = s;
      _b = b;
    5b98:	strb.w	r5, [r3, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b9c:	str.w	r6, [r3, #1168]	; 0x490
      _s = s;
    5ba0:	mvn.w	r6, #104	; 0x68
    5ba4:	strb.w	r1, [r3, #1196]	; 0x4ac
    5ba8:	strb.w	r6, [r3, #1172]	; 0x494
      _b = b;
    5bac:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bb0:	strb.w	lr, [r3, #1204]	; 0x4b4
      _b = b;
    5bb4:	strb.w	r6, [r3, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bb8:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bbc:	str.w	r5, [r3, #1144]	; 0x478
      _s = s;
    5bc0:	strb.w	r6, [r3, #1180]	; 0x49c
      _b = b;
    5bc4:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bc8:	strb.w	r5, [r3, #1148]	; 0x47c
      _b = b;
    5bcc:	strb.w	r6, [r3, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bd0:	movs	r6, #100	; 0x64
      _s = s;
      _b = b;
    5bd2:	strb.w	r5, [r3, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bd6:	str.w	r6, [r3, #1184]	; 0x4a0
      _s = s;
      _b = b;
    5bda:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bde:	str.w	r5, [r3, #1152]	; 0x480
      _s = s;
      _b = b;
    5be2:	strb.w	r6, [r3, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be6:	movs	r6, #168	; 0xa8
      _s = s;
    5be8:	strb.w	r5, [r3, #1156]	; 0x484
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bec:	str.w	r6, [r3, #1192]	; 0x4a8
      _s = s;
      _b = b;
    5bf0:	mov.w	r6, #123	; 0x7b
    5bf4:	strb.w	r5, [r3, #1157]	; 0x485
    5bf8:	strb.w	r6, [r3, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bfc:	movs	r6, #170	; 0xaa
    5bfe:	str.w	r5, [r3, #1160]	; 0x488
    5c02:	str.w	r6, [r3, #1200]	; 0x4b0
      _s = s;
      _b = b;
    5c06:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c0a:	strb.w	r5, [r3, #1164]	; 0x48c
      _b = b;
    5c0e:	strb.w	r6, [r3, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c12:	movs	r6, #151	; 0x97
      _s = s;
      _b = b;
    5c14:	strb.w	r5, [r3, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c18:	mov	r1, r6
    5c1a:	str.w	r6, [r3, #1208]	; 0x4b8
      _s = s;
    5c1e:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c22:	str.w	r1, [r3, #1224]	; 0x4c8
      _s = s;
    5c26:	mov.w	r1, #4294967295
    5c2a:	strb.w	r6, [r3, #1212]	; 0x4bc
      _b = b;
    5c2e:	mvn.w	r6, #117	; 0x75
    5c32:	strb.w	r6, [r3, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c36:	mov.w	r6, #106	; 0x6a
    5c3a:	strb.w	r6, [r3, #1220]	; 0x4c4
      _b = b;
    5c3e:	mvn.w	r6, #17
    5c42:	strb.w	r6, [r3, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c46:	mov.w	r6, #101	; 0x65
    5c4a:	strb.w	r6, [r3, #1228]	; 0x4cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c4e:	movs	r6, #38	; 0x26
    5c50:	str.w	r6, [r3, #1176]	; 0x498
      _s = s;
    5c54:	mov.w	r6, #59	; 0x3b
    5c58:	strb.w	r6, [r3, #1188]	; 0x4a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c5c:	movs	r6, #135	; 0x87
    5c5e:	str.w	r6, [r3, #1216]	; 0x4c0
      _s = s;
      _b = b;
    5c62:	mvn.w	r6, #18
    5c66:	strb.w	r6, [r3, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c6a:	movs	r6, #155	; 0x9b
      _s = s;
    5c6c:	strb.w	r1, [r3, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c70:	str.w	r6, [r3, #1232]	; 0x4d0
      _s = s;
    5c74:	mvn.w	r6, #91	; 0x5b
    5c78:	strb.w	r1, [r3, #1260]	; 0x4ec
    5c7c:	mov.w	r1, #4294967295
    5c80:	strb.w	r6, [r3, #1236]	; 0x4d4
      _b = b;
    5c84:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c88:	strb.w	r1, [r3, #1284]	; 0x504
    5c8c:	mvn.w	r1, #2
      _b = b;
    5c90:	strb.w	r6, [r3, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c94:	mvn.w	r6, #40	; 0x28
    5c98:	strb.w	r1, [r3, #1292]	; 0x50c
    5c9c:	mov.w	r1, #4294967295
    5ca0:	strb.w	r6, [r3, #1244]	; 0x4dc
      _b = b;
    5ca4:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ca8:	strb.w	r1, [r3, #1300]	; 0x514
      _b = b;
    5cac:	strb.w	r6, [r3, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cb0:	movs	r6, #127	; 0x7f
    5cb2:	str.w	r7, [r3, #1256]	; 0x4e8
    5cb6:	str.w	r6, [r3, #1248]	; 0x4e0
      _s = s;
      _b = b;
    5cba:	mvn.w	r6, #108	; 0x6c
    5cbe:	strb.w	r6, [r3, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cc2:	movs	r6, #100	; 0x64
    5cc4:	str.w	r6, [r3, #1264]	; 0x4f0
      _s = s;
    5cc8:	mvn.w	r6, #6
    5ccc:	strb.w	r6, [r3, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cd0:	movs	r6, #96	; 0x60
    5cd2:	str.w	r6, [r3, #1272]	; 0x4f8
      _s = s;
    5cd6:	mvn.w	r6, #26
    5cda:	strb.w	r6, [r3, #1276]	; 0x4fc
      _b = b;
    5cde:	mvn.w	r6, #41	; 0x29
    5ce2:	strb.w	r6, [r3, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ce6:	movs	r6, #135	; 0x87
    5ce8:	str.w	r6, [r3, #1280]	; 0x500
      _s = s;
      _b = b;
    5cec:	mvn.w	r6, #75	; 0x4b
    5cf0:	strb.w	r6, [r3, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cf4:	movs	r6, #139	; 0x8b
    5cf6:	str.w	r6, [r3, #1288]	; 0x508
    5cfa:	movs	r6, #152	; 0x98
    5cfc:	str.w	r6, [r3, #1296]	; 0x510
      _s = s;
      _b = b;
    5d00:	mvn.w	r6, #88	; 0x58
    5d04:	strb.w	r6, [r3, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d08:	movs	r6, #165	; 0xa5
    5d0a:	mov	r1, r6
    5d0c:	str.w	r6, [r3, #1304]	; 0x518
      _s = s;
    5d10:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d14:	str.w	r1, [r3, #1312]	; 0x520
      _s = s;
      _b = b;
    5d18:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d1c:	strb.w	r6, [r3, #1308]	; 0x51c
      _b = b;
    5d20:	mvn.w	r6, #55	; 0x37
    5d24:	strb.w	r6, [r3, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d28:	mov.w	r6, #83	; 0x53
    5d2c:	strb.w	r6, [r3, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d30:	movs	r6, #143	; 0x8f
    5d32:	str.w	r6, [r3, #1240]	; 0x4d8
      _s = s;
      _b = b;
    5d36:	mov.w	r6, #91	; 0x5b
    5d3a:	strb.w	r6, [r3, #1253]	; 0x4e5
    5d3e:	mvn.w	r6, #53	; 0x35
    5d42:	strb.w	r6, [r3, #1269]	; 0x4f5
    5d46:	strb.w	r6, [r3, #1293]	; 0x50d
    5d4a:	mvn.w	r6, #77	; 0x4d
    5d4e:	strb.w	r6, [r3, #1317]	; 0x525
    5d52:	mov.w	r6, #71	; 0x47
    5d56:	strb.w	r1, [r3, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d5a:	mov.w	r1, #4294967295
      _b = b;
    5d5e:	strb.w	r6, [r3, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d62:	mvn.w	r6, #94	; 0x5e
    5d66:	strb.w	r1, [r3, #1396]	; 0x574
    5d6a:	mvn.w	r1, #2
    5d6e:	strb.w	r6, [r3, #1372]	; 0x55c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d72:	movs	r6, #27
      _s = s;
    5d74:	strb.w	r1, [r3, #1404]	; 0x57c
    5d78:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d7c:	str.w	r6, [r3, #1376]	; 0x560
      _s = s;
    5d80:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d84:	str.w	r5, [r3, #1320]	; 0x528
      _s = s;
    5d88:	strb.w	r6, [r3, #1380]	; 0x564
      _b = b;
    5d8c:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d90:	strb.w	r5, [r3, #1324]	; 0x52c
      _b = b;
    5d94:	strb.w	r6, [r3, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d98:	movs	r6, #155	; 0x9b
    5d9a:	str.w	r5, [r3, #1328]	; 0x530
    5d9e:	str.w	r6, [r3, #1384]	; 0x568
      _s = s;
      _b = b;
    5da2:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5da6:	strb.w	r5, [r3, #1332]	; 0x534
      _b = b;
    5daa:	strb.w	r6, [r3, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dae:	movs	r6, #170	; 0xaa
      _s = s;
      _b = b;
    5db0:	strb.w	r5, [r3, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5db4:	str.w	r6, [r3, #1392]	; 0x570
      _s = s;
      _b = b;
    5db8:	mov.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dbc:	str.w	r5, [r3, #1336]	; 0x538
      _s = s;
      _b = b;
    5dc0:	strb.w	r6, [r3, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dc4:	movs	r6, #168	; 0xa8
      _s = s;
    5dc6:	strb.w	r5, [r3, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dca:	str.w	r6, [r3, #1400]	; 0x578
    5dce:	movs	r6, #41	; 0x29
      _s = s;
      _b = b;
    5dd0:	strb.w	r5, [r3, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dd4:	str.w	r6, [r3, #1368]	; 0x558
      _s = s;
    5dd8:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ddc:	str.w	r5, [r3, #1344]	; 0x540
      _s = s;
    5de0:	strb.w	r6, [r3, #1388]	; 0x56c
      _b = b;
    5de4:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5de8:	strb.w	r5, [r3, #1348]	; 0x544
      _b = b;
    5dec:	strb.w	r5, [r3, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5df0:	str.w	r5, [r3, #1352]	; 0x548
      _s = s;
    5df4:	strb.w	r5, [r3, #1356]	; 0x54c
      _b = b;
    5df8:	strb.w	r5, [r3, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dfc:	str.w	r5, [r3, #1360]	; 0x550
      _s = s;
    5e00:	strb.w	r5, [r3, #1364]	; 0x554
      _b = b;
    5e04:	strb.w	r5, [r3, #1365]	; 0x555
    5e08:	strb.w	r6, [r3, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e0c:	movs	r6, #164	; 0xa4
      _s = s;
    5e0e:	strb.w	r1, [r3, #1412]	; 0x584
    5e12:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e16:	str.w	r6, [r3, #1408]	; 0x580
      _s = s;
      _b = b;
    5e1a:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e1e:	strb.w	r1, [r3, #1420]	; 0x58c
    5e22:	mvn.w	r1, #2
      _b = b;
    5e26:	strb.w	r6, [r3, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e2a:	movs	r6, #173	; 0xad
      _s = s;
    5e2c:	strb.w	r1, [r3, #1460]	; 0x5b4
    5e30:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e34:	str.w	r6, [r3, #1416]	; 0x588
      _s = s;
      _b = b;
    5e38:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e3c:	strb.w	r1, [r3, #1468]	; 0x5bc
      _b = b;
    5e40:	strb.w	r6, [r3, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e44:	movs	r6, #165	; 0xa5
      _s = s;
    5e46:	strb.w	r1, [r3, #1476]	; 0x5c4
    5e4a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e4e:	str.w	r6, [r3, #1424]	; 0x590
      _s = s;
    5e52:	mvn.w	r6, #27
    5e56:	strb.w	r1, [r3, #1484]	; 0x5cc
    5e5a:	mvn.w	r1, #2
    5e5e:	strb.w	r6, [r3, #1428]	; 0x594
      _b = b;
    5e62:	strb.w	r6, [r3, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e66:	movs	r6, #167	; 0xa7
    5e68:	str.w	r7, [r3, #1456]	; 0x5b0
    5e6c:	str.w	r6, [r3, #1432]	; 0x598
      _s = s;
      _b = b;
    5e70:	mvn.w	r6, #18
    5e74:	strb.w	r8, [r3, #1461]	; 0x5b5
    5e78:	strb.w	r6, [r3, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e7c:	movs	r6, #144	; 0x90
      _s = s;
    5e7e:	strb.w	r1, [r3, #1492]	; 0x5d4
    5e82:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e86:	str.w	r6, [r3, #1440]	; 0x5a0
      _s = s;
    5e8a:	mvn.w	r6, #75	; 0x4b
    5e8e:	strb.w	r0, [r3, #1436]	; 0x59c
    5e92:	strb.w	r6, [r3, #1444]	; 0x5a4
    5e96:	mvn.w	r6, #37	; 0x25
    5e9a:	strb.w	r6, [r3, #1452]	; 0x5ac
      _b = b;
    5e9e:	mvn.w	r6, #57	; 0x39
    5ea2:	strb.w	r6, [r3, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ea6:	movs	r6, #127	; 0x7f
    5ea8:	str.w	r6, [r3, #1464]	; 0x5b8
      _s = s;
      _b = b;
    5eac:	mvn.w	r6, #112	; 0x70
    5eb0:	strb.w	r6, [r3, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eb4:	movs	r6, #133	; 0x85
    5eb6:	str.w	r6, [r3, #1480]	; 0x5c8
    5eba:	movs	r6, #148	; 0x94
    5ebc:	str.w	r6, [r3, #1488]	; 0x5d0
      _s = s;
      _b = b;
    5ec0:	mvn.w	r6, #73	; 0x49
    5ec4:	strb.w	r6, [r3, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ec8:	movs	r6, #119	; 0x77
    5eca:	str.w	r6, [r3, #1448]	; 0x5a8
      _s = s;
      _b = b;
    5ece:	mov.w	r6, #111	; 0x6f
    5ed2:	strb.w	r6, [r3, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ed6:	movs	r6, #126	; 0x7e
    5ed8:	str.w	r6, [r3, #1472]	; 0x5c0
      _s = s;
      _b = b;
    5edc:	mvn.w	r6, #92	; 0x5c
    5ee0:	strb.w	r6, [r3, #1485]	; 0x5cd
    5ee4:	mvn.w	r6, #117	; 0x75
    5ee8:	strb.w	r6, [r3, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eec:	movs	r6, #162	; 0xa2
      _s = s;
    5eee:	strb.w	r1, [r3, #1500]	; 0x5dc
    5ef2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ef6:	str.w	r6, [r3, #1496]	; 0x5d8
      _s = s;
      _b = b;
    5efa:	mov.w	r6, #119	; 0x77
    5efe:	strb.w	lr, [r3, #1573]	; 0x625
    5f02:	strb.w	r6, [r3, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f06:	movs	r6, #167	; 0xa7
    5f08:	str.w	r5, [r3, #1520]	; 0x5f0
    5f0c:	str.w	r6, [r3, #1504]	; 0x5e0
      _s = s;
      _b = b;
    5f10:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f14:	strb.w	r5, [r3, #1524]	; 0x5f4
      _b = b;
    5f18:	strb.w	r6, [r3, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f1c:	movs	r6, #166	; 0xa6
      _s = s;
      _b = b;
    5f1e:	strb.w	r5, [r3, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f22:	str.w	r6, [r3, #1512]	; 0x5e8
      _s = s;
      _b = b;
    5f26:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f2a:	str.w	r5, [r3, #1528]	; 0x5f8
      _s = s;
      _b = b;
    5f2e:	strb.w	r6, [r3, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f32:	mvn.w	r6, #50	; 0x32
    5f36:	strb.w	r5, [r3, #1532]	; 0x5fc
    5f3a:	strb.w	r6, [r3, #1564]	; 0x61c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f3e:	movs	r6, #31
      _s = s;
      _b = b;
    5f40:	strb.w	r5, [r3, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f44:	str.w	r6, [r3, #1568]	; 0x620
      _s = s;
    5f48:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f4c:	str.w	r5, [r3, #1536]	; 0x600
      _s = s;
    5f50:	strb.w	r6, [r3, #1572]	; 0x624
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f54:	movs	r6, #158	; 0x9e
      _s = s;
    5f56:	strb.w	r5, [r3, #1540]	; 0x604
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f5a:	str.w	r6, [r3, #1576]	; 0x628
      _s = s;
    5f5e:	mov.w	r6, #67	; 0x43
      _b = b;
    5f62:	strb.w	r5, [r3, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f66:	strb.w	r6, [r3, #1508]	; 0x5e4
    5f6a:	mov.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f6e:	str.w	r5, [r3, #1544]	; 0x608
      _s = s;
    5f72:	strb.w	r6, [r3, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f76:	movs	r6, #45	; 0x2d
      _s = s;
    5f78:	strb.w	r5, [r3, #1548]	; 0x60c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f7c:	str.w	r6, [r3, #1560]	; 0x618
      _s = s;
    5f80:	mov.w	r6, #70	; 0x46
      _b = b;
    5f84:	strb.w	r5, [r3, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f88:	strb.w	r6, [r3, #1580]	; 0x62c
      _b = b;
    5f8c:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f90:	str.w	r5, [r3, #1552]	; 0x610
      _s = s;
    5f94:	strb.w	r5, [r3, #1556]	; 0x614
      _b = b;
    5f98:	strb.w	r5, [r3, #1557]	; 0x615
    5f9c:	strb.w	sl, [r3, #1565]	; 0x61d
    5fa0:	strb.w	r6, [r3, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fa4:	movs	r6, #174	; 0xae
      _s = s;
    5fa6:	strb.w	r1, [r3, #1588]	; 0x634
    5faa:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fae:	str.w	r6, [r3, #1584]	; 0x630
      _s = s;
      _b = b;
    5fb2:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fb6:	strb.w	r1, [r3, #1596]	; 0x63c
    5fba:	mov.w	r1, #4294967295
      _b = b;
    5fbe:	strb.w	r6, [r3, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fc2:	movs	r6, #145	; 0x91
      _s = s;
    5fc4:	strb.w	r1, [r3, #1604]	; 0x644
    5fc8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fcc:	str.w	r6, [r3, #1592]	; 0x638
      _s = s;
      _b = b;
    5fd0:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fd4:	strb.w	r1, [r3, #1652]	; 0x674
    5fd8:	mov.w	r1, #4294967295
      _b = b;
    5fdc:	strb.w	r6, [r3, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fe0:	movs	r6, #139	; 0x8b
      _s = s;
    5fe2:	strb.w	r1, [r3, #1660]	; 0x67c
    5fe6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fea:	str.w	r6, [r3, #1608]	; 0x648
      _s = s;
    5fee:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ff2:	str.w	r7, [r3, #1600]	; 0x640
      _s = s;
    5ff6:	strb.w	r6, [r3, #1612]	; 0x64c
      _b = b;
    5ffa:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ffe:	str.w	ip, [r3, #1624]	; 0x658
      _s = s;
      _b = b;
    6002:	strb.w	r6, [r3, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6006:	mvn.w	r6, #94	; 0x5e
      _b = b;
    600a:	strb.w	r0, [r3, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    600e:	strb.w	r6, [r3, #1620]	; 0x654
      _b = b;
    6012:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6016:	strb.w	r1, [r3, #1668]	; 0x684
    601a:	mvn.w	r1, #2
      _b = b;
    601e:	strb.w	r6, [r3, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6022:	mvn.w	r6, #103	; 0x67
      _b = b;
    6026:	strb.w	sl, [r3, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    602a:	strb.w	r6, [r3, #1628]	; 0x65c
      _b = b;
    602e:	mvn.w	r6, #18
    6032:	strb.w	r6, [r3, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6036:	movs	r6, #142	; 0x8e
    6038:	str.w	r6, [r3, #1632]	; 0x660
      _s = s;
    603c:	mvn.w	r6, #56	; 0x38
    6040:	strb.w	r6, [r3, #1636]	; 0x664
    6044:	mvn.w	r6, #66	; 0x42
    6048:	strb.w	r6, [r3, #1644]	; 0x66c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    604c:	movs	r6, #126	; 0x7e
    604e:	str.w	r6, [r3, #1656]	; 0x678
    6052:	movs	r6, #124	; 0x7c
    6054:	str.w	r6, [r3, #1664]	; 0x680
    6058:	movs	r6, #89	; 0x59
    605a:	str.w	r6, [r3, #1616]	; 0x650
      _s = s;
      _b = b;
    605e:	mov.w	r6, #107	; 0x6b
    6062:	strb.w	r6, [r3, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6066:	movs	r6, #114	; 0x72
    6068:	str.w	r6, [r3, #1640]	; 0x668
    606c:	movs	r6, #129	; 0x81
    606e:	str.w	r6, [r3, #1648]	; 0x670
      _s = s;
      _b = b;
    6072:	mvn.w	r6, #34	; 0x22
    6076:	strb.w	r6, [r3, #1653]	; 0x675
    607a:	mvn.w	r6, #70	; 0x46
    607e:	strb.w	r6, [r3, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6082:	movs	r6, #142	; 0x8e
      _s = s;
      _b = b;
    6084:	strb.w	r7, [r3, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6088:	str.w	r6, [r3, #1672]	; 0x688
      _s = s;
      _b = b;
    608c:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6090:	strb.w	r1, [r3, #1684]	; 0x694
    6094:	mov.w	r1, #4294967295
      _b = b;
    6098:	strb.w	r6, [r3, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    609c:	movs	r6, #144	; 0x90
      _s = s;
    609e:	strb.w	r1, [r3, #1692]	; 0x69c
    60a2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60a6:	str.w	r6, [r3, #1680]	; 0x690
      _s = s;
      _b = b;
    60aa:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60ae:	strb.w	lr, [r3, #1676]	; 0x68c
      _b = b;
    60b2:	strb.w	r6, [r3, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60b6:	movs	r6, #150	; 0x96
      _s = s;
    60b8:	strb.w	r1, [r3, #1716]	; 0x6b4
    60bc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60c0:	str.w	r6, [r3, #1688]	; 0x698
      _s = s;
      _b = b;
    60c4:	mov.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60c8:	strb.w	fp, [r3, #1700]	; 0x6a4
      _b = b;
    60cc:	strb.w	r6, [r3, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60d0:	movs	r6, #166	; 0xa6
    60d2:	str.w	r5, [r3, #1720]	; 0x6b8
    60d6:	str.w	r6, [r3, #1696]	; 0x6a0
    60da:	movs	r6, #168	; 0xa8
      _s = s;
    60dc:	strb.w	r5, [r3, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60e0:	str.w	r6, [r3, #1704]	; 0x6a8
      _s = s;
    60e4:	mvn.w	r6, #119	; 0x77
      _b = b;
    60e8:	strb.w	r5, [r3, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60ec:	strb.w	r6, [r3, #1708]	; 0x6ac
      _b = b;
    60f0:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f4:	str.w	r5, [r3, #1728]	; 0x6c0
      _s = s;
      _b = b;
    60f8:	strb.w	r6, [r3, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60fc:	movs	r6, #171	; 0xab
      _s = s;
    60fe:	strb.w	r5, [r3, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6102:	str.w	r6, [r3, #1712]	; 0x6b0
      _s = s;
      _b = b;
    6106:	mov.w	r6, #108	; 0x6c
    610a:	strb.w	r5, [r3, #1733]	; 0x6c5
    610e:	strb.w	r6, [r3, #1717]	; 0x6b5
    6112:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6116:	str.w	r5, [r3, #1736]	; 0x6c8
      _s = s;
      _b = b;
    611a:	strb.w	r6, [r3, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    611e:	movs	r6, #46	; 0x2e
      _s = s;
    6120:	strb.w	r5, [r3, #1740]	; 0x6cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6124:	str.w	r6, [r3, #1752]	; 0x6d8
      _s = s;
    6128:	mvn.w	r6, #20
      _b = b;
    612c:	strb.w	r5, [r3, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6130:	strb.w	r6, [r3, #1756]	; 0x6dc
      _b = b;
    6134:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6138:	str.w	r5, [r3, #1744]	; 0x6d0
      _s = s;
    613c:	strb.w	r5, [r3, #1748]	; 0x6d4
      _b = b;
    6140:	strb.w	r5, [r3, #1749]	; 0x6d5
    6144:	strb.w	r6, [r3, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6148:	movs	r6, #83	; 0x53
      _s = s;
    614a:	strb.w	r1, [r3, #1780]	; 0x6f4
    614e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6152:	str.w	r6, [r3, #1760]	; 0x6e0
      _s = s;
    6156:	mov.w	r6, #45	; 0x2d
    615a:	strb.w	r1, [r3, #1788]	; 0x6fc
    615e:	mvn.w	r1, #2
    6162:	strb.w	r6, [r3, #1764]	; 0x6e4
      _b = b;
    6166:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    616a:	strb.w	r1, [r3, #1796]	; 0x704
    616e:	mvn.w	r1, #2
      _b = b;
    6172:	strb.w	r6, [r3, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6176:	movs	r6, #162	; 0xa2
      _s = s;
    6178:	strb.w	r1, [r3, #1804]	; 0x70c
    617c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6180:	str.w	r6, [r3, #1768]	; 0x6e8
      _s = s;
    6184:	mvn.w	r6, #7
    6188:	strb.w	r6, [r3, #1772]	; 0x6ec
      _b = b;
    618c:	mov.w	r6, #119	; 0x77
    6190:	strb.w	r6, [r3, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6194:	movs	r6, #159	; 0x9f
    6196:	str.w	r6, [r3, #1776]	; 0x6f0
      _s = s;
      _b = b;
    619a:	mov.w	r6, #59	; 0x3b
    619e:	strb.w	r6, [r3, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61a2:	movs	r6, #106	; 0x6a
    61a4:	str.w	r6, [r3, #1784]	; 0x6f8
    61a8:	movs	r6, #100	; 0x64
    61aa:	str.w	r6, [r3, #1792]	; 0x700
      _s = s;
      _b = b;
    61ae:	mvn.w	r6, #71	; 0x47
    61b2:	strb.w	r6, [r3, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61b6:	movs	r6, #94	; 0x5e
    61b8:	str.w	r6, [r3, #1800]	; 0x708
      _s = s;
      _b = b;
    61bc:	mvn.w	r6, #45	; 0x2d
    61c0:	strb.w	r6, [r3, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61c4:	movs	r6, #144	; 0x90
    61c6:	str.w	r6, [r3, #1808]	; 0x710
      _s = s;
    61ca:	mvn.w	r6, #122	; 0x7a
    61ce:	strb.w	r6, [r3, #1812]	; 0x714
      _b = b;
    61d2:	mvn.w	r6, #37	; 0x25
    61d6:	strb.w	r6, [r3, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61da:	mvn.w	r6, #97	; 0x61
    61de:	strb.w	r6, [r3, #1820]	; 0x71c
      _b = b;
    61e2:	mvn.w	r6, #11
    61e6:	strb.w	r6, [r3, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61ea:	movs	r6, #92	; 0x5c
    61ec:	str.w	r6, [r3, #1824]	; 0x720
      _s = s;
    61f0:	mvn.w	r6, #49	; 0x31
    61f4:	strb.w	r6, [r3, #1828]	; 0x724
      _b = b;
    61f8:	mvn.w	r6, #15
    61fc:	strb.w	r6, [r3, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6200:	movs	r6, #93	; 0x5d
    6202:	str.w	r6, [r3, #1832]	; 0x728
      _s = s;
      _b = b;
    6206:	mvn.w	r6, #42	; 0x2a
    620a:	strb.w	r6, [r3, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    620e:	movs	r6, #131	; 0x83
    6210:	str.w	r6, [r3, #1840]	; 0x730
      _s = s;
    6214:	mvn.w	r6, #19
    6218:	strb.w	r6, [r3, #1844]	; 0x734
      _b = b;
    621c:	mvn.w	r6, #62	; 0x3e
    6220:	strb.w	r6, [r3, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6224:	movs	r6, #140	; 0x8c
    6226:	str.w	r6, [r3, #1816]	; 0x718
      _s = s;
    622a:	mvn.w	r6, #52	; 0x34
    622e:	strb.w	r6, [r3, #1836]	; 0x72c
      _b = b;
    6232:	mvn.w	r6, #67	; 0x43
    6236:	strb.w	r6, [r3, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    623a:	movs	r6, #128	; 0x80
      _s = s;
    623c:	strb.w	r1, [r3, #1852]	; 0x73c
    6240:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6244:	str.w	r6, [r3, #1848]	; 0x738
      _s = s;
      _b = b;
    6248:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    624c:	strb.w	r1, [r3, #1860]	; 0x744
    6250:	mov.w	r1, #4294967295
      _b = b;
    6254:	strb.w	r6, [r3, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6258:	movs	r6, #138	; 0x8a
      _s = s;
    625a:	strb.w	r1, [r3, #1868]	; 0x74c
    625e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6262:	str.w	r6, [r3, #1856]	; 0x740
      _s = s;
      _b = b;
    6266:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    626a:	strb.w	r1, [r3, #1876]	; 0x754
    626e:	mov.w	r1, #4294967295
      _b = b;
    6272:	strb.w	r6, [r3, #1861]	; 0x745
    6276:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    627a:	strb.w	r1, [r3, #1884]	; 0x75c
    627e:	mov.w	r1, #4294967295
      _b = b;
    6282:	strb.w	r6, [r3, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6286:	movs	r6, #148	; 0x94
      _s = s;
    6288:	strb.w	r1, [r3, #1892]	; 0x764
    628c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6290:	str.w	r6, [r3, #1872]	; 0x750
      _s = s;
      _b = b;
    6294:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6298:	strb.w	r1, [r3, #1900]	; 0x76c
    629c:	mov.w	r1, #4294967295
      _b = b;
    62a0:	strb.w	r6, [r3, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62a4:	movs	r6, #150	; 0x96
    62a6:	str.w	ip, [r3, #1864]	; 0x748
    62aa:	str.w	r6, [r3, #1880]	; 0x758
    62ae:	movs	r6, #154	; 0x9a
      _s = s;
    62b0:	strb.w	r1, [r3, #1908]	; 0x774
    62b4:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62b8:	str.w	r6, [r3, #1888]	; 0x760
      _s = s;
      _b = b;
    62bc:	mvn.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62c0:	str.w	r5, [r3, #1912]	; 0x778
      _s = s;
      _b = b;
    62c4:	strb.w	r6, [r3, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62c8:	movs	r6, #168	; 0xa8
      _s = s;
    62ca:	strb.w	r5, [r3, #1916]	; 0x77c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ce:	str.w	r6, [r3, #1896]	; 0x768
      _s = s;
      _b = b;
    62d2:	mov.w	r6, #112	; 0x70
    62d6:	strb.w	r5, [r3, #1917]	; 0x77d
    62da:	strb.w	r6, [r3, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62de:	movs	r6, #168	; 0xa8
    62e0:	str.w	r5, [r3, #1920]	; 0x780
    62e4:	str.w	r6, [r3, #1904]	; 0x770
      _s = s;
      _b = b;
    62e8:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62ec:	strb.w	r5, [r3, #1924]	; 0x784
      _b = b;
    62f0:	strb.w	r6, [r3, #1909]	; 0x775
    62f4:	mvn.w	r6, #51	; 0x33
    62f8:	strb.w	r5, [r3, #1925]	; 0x785
    62fc:	strb.w	r6, [r3, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6300:	movs	r6, #50	; 0x32
    6302:	str.w	r5, [r3, #1928]	; 0x788
      _s = s;
    6306:	strb.w	r5, [r3, #1932]	; 0x78c
      _b = b;
    630a:	strb.w	r5, [r3, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    630e:	str.w	r6, [r3, #1944]	; 0x798
      _s = s;
      _b = b;
    6312:	mvn.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6316:	strb.w	r0, [r3, #1948]	; 0x79c
      _b = b;
    631a:	strb.w	r6, [r3, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    631e:	movs	r6, #108	; 0x6c
      _s = s;
    6320:	strb.w	r1, [r3, #1980]	; 0x7bc
    6324:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6328:	str.w	r6, [r3, #1952]	; 0x7a0
      _s = s;
    632c:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6330:	str.w	r5, [r3, #1936]	; 0x790
      _s = s;
    6334:	strb.w	r6, [r3, #1956]	; 0x7a4
      _b = b;
    6338:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    633c:	strb.w	r5, [r3, #1940]	; 0x794
      _b = b;
    6340:	strb.w	r6, [r3, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6344:	movs	r6, #126	; 0x7e
      _s = s;
      _b = b;
    6346:	strb.w	r5, [r3, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    634a:	str.w	r6, [r3, #1960]	; 0x7a8
      _s = s;
    634e:	mvn.w	r6, #5
    6352:	strb.w	r6, [r3, #1964]	; 0x7ac
      _b = b;
    6356:	mov.w	r6, #108	; 0x6c
    635a:	strb.w	r6, [r3, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    635e:	movs	r6, #119	; 0x77
    6360:	str.w	r6, [r3, #1968]	; 0x7b0
      _s = s;
    6364:	mvn.w	r6, #5
    6368:	strb.w	r6, [r3, #1972]	; 0x7b4
      _b = b;
    636c:	mvn.w	r6, #96	; 0x60
    6370:	strb.w	r6, [r3, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6374:	movs	r6, #101	; 0x65
    6376:	str.w	r6, [r3, #1976]	; 0x7b8
      _s = s;
      _b = b;
    637a:	mvn.w	r6, #72	; 0x48
    637e:	strb.w	r6, [r3, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6382:	mvn.w	r6, #7
    6386:	strb.w	r6, [r3, #1988]	; 0x7c4
      _b = b;
    638a:	mvn.w	r6, #52	; 0x34
    638e:	strb.w	r6, [r3, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6392:	movs	r6, #97	; 0x61
    6394:	str.w	r6, [r3, #1992]	; 0x7c8
      _s = s;
    6398:	mvn.w	r6, #41	; 0x29
    639c:	strb.w	r6, [r3, #1996]	; 0x7cc
      _b = b;
    63a0:	mvn.w	r6, #37	; 0x25
    63a4:	strb.w	r6, [r3, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63a8:	movs	r6, #96	; 0x60
    63aa:	str.w	r6, [r3, #2000]	; 0x7d0
      _s = s;
    63ae:	mvn.w	r6, #23
    63b2:	strb.w	r6, [r3, #2004]	; 0x7d4
      _b = b;
    63b6:	mvn.w	r6, #33	; 0x21
    63ba:	strb.w	r6, [r3, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63be:	movs	r6, #92	; 0x5c
    63c0:	str.w	r6, [r3, #2008]	; 0x7d8
      _s = s;
    63c4:	mvn.w	r6, #25
    63c8:	strb.w	r6, [r3, #2012]	; 0x7dc
      _b = b;
    63cc:	mvn.w	r6, #49	; 0x31
    63d0:	strb.w	r6, [r3, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63d4:	movs	r6, #88	; 0x58
    63d6:	str.w	r6, [r3, #2016]	; 0x7e0
      _s = s;
    63da:	mvn.w	r6, #21
    63de:	strb.w	r6, [r3, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63e2:	movs	r6, #80	; 0x50
    63e4:	str.w	r6, [r3, #1984]	; 0x7c0
      _s = s;
      _b = b;
    63e8:	mvn.w	r6, #28
    63ec:	strb.w	r6, [r3, #2021]	; 0x7e5
    63f0:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    63f4:	strb.w	r1, [r3, #2036]	; 0x7f4
    63f8:	mov.w	r1, #4294967295
      _b = b;
    63fc:	strb.w	r6, [r3, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6400:	movs	r6, #137	; 0x89
      _s = s;
    6402:	strb.w	r1, [r3, #2044]	; 0x7fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6406:	str.w	r6, [r3, #2032]	; 0x7f0
      _s = s;
      _b = b;
    640a:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    640e:	strb.w	ip, [r3, #2068]	; 0x814
      _b = b;
    6412:	strb.w	r6, [r3, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6416:	movs	r6, #123	; 0x7b
      _s = s;
    6418:	strb.w	sl, [r3, #2028]	; 0x7ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    641c:	str.w	r6, [r3, #2040]	; 0x7f8
      _s = s;
      _b = b;
    6420:	mvn.w	r6, #87	; 0x57
    6424:	strb.w	sl, [r3, #2077]	; 0x81d
    6428:	strb.w	r6, [r3, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    642c:	movs	r6, #148	; 0x94
    642e:	mov	r1, r6
    6430:	str.w	r6, [r3, #2048]	; 0x800
      _s = s;
    6434:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6438:	str.w	r1, [r3, #2056]	; 0x808
      _s = s;
    643c:	mov.w	r1, #4294967295
    6440:	strb.w	r6, [r3, #2052]	; 0x804
      _b = b;
    6444:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6448:	strb.w	r1, [r3, #2084]	; 0x824
    644c:	mov.w	r1, #4294967295
      _b = b;
    6450:	strb.w	r6, [r3, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6454:	mvn.w	r6, #119	; 0x77
    6458:	strb.w	r1, [r3, #2092]	; 0x82c
    645c:	mov.w	r1, #4294967295
    6460:	strb.w	r6, [r3, #2060]	; 0x80c
      _b = b;
    6464:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6468:	strb.w	r1, [r3, #2100]	; 0x834
    646c:	mov.w	r1, #4294967295
      _b = b;
    6470:	strb.w	r6, [r3, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6474:	movs	r6, #150	; 0x96
      _s = s;
    6476:	strb.w	r1, [r3, #2108]	; 0x83c
    647a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    647e:	str.w	r6, [r3, #2064]	; 0x810
      _s = s;
      _b = b;
    6482:	mvn.w	r6, #13
    6486:	strb.w	r6, [r3, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    648a:	movs	r6, #147	; 0x93
    648c:	str.w	r6, [r3, #2072]	; 0x818
      _s = s;
    6490:	mvn.w	r6, #102	; 0x66
    6494:	strb.w	r6, [r3, #2076]	; 0x81c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6498:	movs	r6, #153	; 0x99
    649a:	str.w	r6, [r3, #2080]	; 0x820
      _s = s;
      _b = b;
    649e:	mvn.w	r6, #73	; 0x49
    64a2:	strb.w	r6, [r3, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64a6:	movs	r6, #158	; 0x9e
    64a8:	str.w	r6, [r3, #2088]	; 0x828
      _s = s;
      _b = b;
    64ac:	mvn.w	r6, #111	; 0x6f
    64b0:	strb.w	r6, [r3, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64b4:	movs	r6, #164	; 0xa4
    64b6:	str.w	r6, [r3, #2096]	; 0x830
      _s = s;
      _b = b;
    64ba:	mvn.w	r6, #91	; 0x5b
    64be:	strb.w	r6, [r3, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64c2:	movs	r6, #161	; 0xa1
    64c4:	str.w	r6, [r3, #2104]	; 0x838
    64c8:	movs	r6, #105	; 0x69
    64ca:	str.w	r6, [r3, #2024]	; 0x7e8
      _s = s;
      _b = b;
    64ce:	mov.w	r6, #76	; 0x4c
    64d2:	strb.w	r6, [r3, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64d6:	movs	r6, #82	; 0x52
      _s = s;
    64d8:	strb.w	r1, [r3, #2156]	; 0x86c
    64dc:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64e0:	str.w	r6, [r3, #2136]	; 0x858
      _s = s;
    64e4:	mov.w	r6, #110	; 0x6e
    64e8:	strb.w	r1, [r3, #2164]	; 0x874
    64ec:	mvn.w	r1, #2
    64f0:	strb.w	r6, [r3, #2140]	; 0x85c
      _b = b;
    64f4:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64f8:	strb.w	r1, [r3, #2172]	; 0x87c
    64fc:	mvn.w	r1, #2
      _b = b;
    6500:	strb.w	r6, [r3, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6504:	movs	r6, #147	; 0x93
      _s = s;
    6506:	strb.w	r1, [r3, #2180]	; 0x884
    650a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    650e:	str.w	r6, [r3, #2144]	; 0x860
      _s = s;
    6512:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6516:	str.w	r5, [r3, #2112]	; 0x840
      _s = s;
    651a:	strb.w	r6, [r3, #2148]	; 0x864
      _b = b;
    651e:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6522:	strb.w	r5, [r3, #2116]	; 0x844
      _b = b;
    6526:	strb.w	r6, [r3, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    652a:	movs	r6, #134	; 0x86
      _s = s;
      _b = b;
    652c:	strb.w	r5, [r3, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6530:	str.w	r6, [r3, #2152]	; 0x868
      _s = s;
      _b = b;
    6534:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6538:	str.w	r5, [r3, #2120]	; 0x848
      _s = s;
      _b = b;
    653c:	strb.w	r6, [r3, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6540:	movs	r6, #110	; 0x6e
      _s = s;
    6542:	strb.w	r5, [r3, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6546:	str.w	r6, [r3, #2160]	; 0x870
      _s = s;
      _b = b;
    654a:	mvn.w	r6, #77	; 0x4d
    654e:	strb.w	r5, [r3, #2125]	; 0x84d
    6552:	strb.w	r6, [r3, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6556:	movs	r6, #94	; 0x5e
    6558:	str.w	r5, [r3, #2128]	; 0x850
    655c:	str.w	r6, [r3, #2168]	; 0x878
      _s = s;
      _b = b;
    6560:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6564:	strb.w	r5, [r3, #2132]	; 0x854
      _b = b;
    6568:	strb.w	r6, [r3, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    656c:	movs	r6, #104	; 0x68
      _s = s;
      _b = b;
    656e:	strb.w	r5, [r3, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6572:	str.w	r6, [r3, #2176]	; 0x880
      _s = s;
      _b = b;
    6576:	mvn.w	r6, #53	; 0x35
    657a:	strb.w	r6, [r3, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    657e:	movs	r6, #87	; 0x57
    6580:	str.w	r6, [r3, #2184]	; 0x888
      _s = s;
    6584:	mvn.w	r6, #65	; 0x41
    6588:	strb.w	r6, [r3, #2188]	; 0x88c
      _b = b;
    658c:	mvn.w	r6, #18
    6590:	strb.w	r6, [r3, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6594:	movs	r6, #111	; 0x6f
    6596:	str.w	r6, [r3, #2192]	; 0x890
      _s = s;
    659a:	mvn.w	r6, #34	; 0x22
    659e:	strb.w	r6, [r3, #2196]	; 0x894
      _b = b;
    65a2:	mvn.w	r6, #32
    65a6:	strb.w	r6, [r3, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65aa:	movs	r6, #101	; 0x65
      _s = s;
    65ac:	strb.w	r1, [r3, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65b0:	str.w	r6, [r3, #2200]	; 0x898
      _s = s;
    65b4:	mvn.w	r6, #49	; 0x31
    65b8:	strb.w	r1, [r3, #2236]	; 0x8bc
    65bc:	mvn.w	r1, #2
    65c0:	strb.w	r6, [r3, #2204]	; 0x89c
      _b = b;
    65c4:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65c8:	strb.w	r1, [r3, #2244]	; 0x8c4
    65cc:	mov.w	r1, #4294967295
      _b = b;
    65d0:	strb.w	r6, [r3, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65d4:	mvn.w	r6, #54	; 0x36
    65d8:	strb.w	r0, [r3, #2220]	; 0x8ac
    65dc:	strb.w	r6, [r3, #2212]	; 0x8a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65e0:	movs	r6, #96	; 0x60
    65e2:	str.w	r7, [r3, #2232]	; 0x8b8
    65e6:	str.w	r6, [r3, #2216]	; 0x8a8
      _s = s;
      _b = b;
    65ea:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65ee:	strb.w	r1, [r3, #2284]	; 0x8ec
    65f2:	mov.w	r1, #4294967295
      _b = b;
    65f6:	strb.w	r6, [r3, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65fa:	movs	r6, #131	; 0x83
      _s = s;
      _b = b;
    65fc:	strb.w	sl, [r3, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6600:	str.w	r6, [r3, #2224]	; 0x8b0
      _s = s;
      _b = b;
    6604:	mvn.w	r6, #75	; 0x4b
    6608:	strb.w	r6, [r3, #2229]	; 0x8b5
    660c:	mvn.w	r6, #89	; 0x59
    6610:	strb.w	r6, [r3, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6614:	movs	r6, #159	; 0x9f
    6616:	str.w	r6, [r3, #2240]	; 0x8c0
      _s = s;
      _b = b;
    661a:	mvn.w	r6, #44	; 0x2c
    661e:	strb.w	r6, [r3, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6622:	movs	r6, #140	; 0x8c
    6624:	str.w	r6, [r3, #2248]	; 0x8c8
      _s = s;
    6628:	mvn.w	r6, #107	; 0x6b
    662c:	strb.w	r6, [r3, #2252]	; 0x8cc
      _b = b;
    6630:	mvn.w	r6, #11
    6634:	strb.w	r6, [r3, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6638:	movs	r6, #103	; 0x67
    663a:	str.w	r6, [r3, #2256]	; 0x8d0
      _s = s;
      _b = b;
    663e:	mvn.w	r6, #14
    6642:	strb.w	r6, [r3, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6646:	movs	r6, #116	; 0x74
    6648:	str.w	r6, [r3, #2264]	; 0x8d8
      _s = s;
    664c:	strb.w	r6, [r3, #2268]	; 0x8dc
      _b = b;
    6650:	mvn.w	r6, #16
    6654:	strb.w	r6, [r3, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6658:	movs	r6, #159	; 0x9f
    665a:	str.w	r6, [r3, #2272]	; 0x8e0
      _s = s;
    665e:	mvn.w	r6, #65	; 0x41
    6662:	strb.w	r6, [r3, #2276]	; 0x8e4
      _b = b;
    6666:	mvn.w	r6, #57	; 0x39
    666a:	strb.w	r6, [r3, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    666e:	movs	r6, #158	; 0x9e
    6670:	str.w	r6, [r3, #2280]	; 0x8e8
    6674:	movs	r6, #98	; 0x62
    6676:	str.w	r6, [r3, #2208]	; 0x8a0
      _s = s;
    667a:	strb.w	r6, [r3, #2260]	; 0x8d4
      _b = b;
    667e:	mvn.w	r6, #50	; 0x32
    6682:	strb.w	r6, [r3, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6686:	movs	r6, #150	; 0x96
      _s = s;
    6688:	strb.w	r1, [r3, #2292]	; 0x8f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    668c:	str.w	r6, [r3, #2288]	; 0x8f0
      _s = s;
      _b = b;
    6690:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6694:	strb.w	r1, [r3, #2300]	; 0x8fc
    6698:	mov.w	r1, #4294967295
      _b = b;
    669c:	strb.w	r6, [r3, #2293]	; 0x8f5
    66a0:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66a4:	strb.w	r1, [r3, #2372]	; 0x944
      _b = b;
    66a8:	strb.w	r6, [r3, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ac:	movs	r6, #166	; 0xa6
      _s = s;
    66ae:	strb.w	lr, [r3, #2348]	; 0x92c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66b2:	str.w	r6, [r3, #2328]	; 0x918
      _s = s;
    66b6:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ba:	str.w	r5, [r3, #2304]	; 0x900
      _s = s;
    66be:	strb.w	r6, [r3, #2332]	; 0x91c
      _b = b;
    66c2:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66c6:	strb.w	r5, [r3, #2308]	; 0x904
      _b = b;
    66ca:	strb.w	r6, [r3, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ce:	movs	r6, #153	; 0x99
      _s = s;
      _b = b;
    66d0:	strb.w	r5, [r3, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66d4:	str.w	r6, [r3, #2336]	; 0x920
      _s = s;
      _b = b;
    66d8:	mov.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66dc:	str.w	r5, [r3, #2312]	; 0x908
      _s = s;
      _b = b;
    66e0:	strb.w	r6, [r3, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66e4:	movs	r6, #150	; 0x96
      _s = s;
    66e6:	strb.w	r5, [r3, #2316]	; 0x90c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ea:	str.w	r6, [r3, #2344]	; 0x928
      _s = s;
      _b = b;
    66ee:	mov.w	r6, #88	; 0x58
    66f2:	strb.w	r5, [r3, #2317]	; 0x90d
    66f6:	strb.w	r6, [r3, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66fa:	movs	r6, #108	; 0x6c
    66fc:	str.w	r5, [r3, #2320]	; 0x910
    6700:	str.w	r6, [r3, #2352]	; 0x930
      _s = s;
    6704:	mvn.w	r6, #7
    6708:	strb.w	r5, [r3, #2324]	; 0x914
    670c:	strb.w	r6, [r3, #2356]	; 0x934
      _b = b;
    6710:	mvn.w	r6, #46	; 0x2e
    6714:	strb.w	r5, [r3, #2325]	; 0x915
    6718:	strb.w	r6, [r3, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    671c:	movs	r6, #99	; 0x63
      _s = s;
    671e:	strb.w	fp, [r3, #2340]	; 0x924
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6722:	str.w	r6, [r3, #2360]	; 0x938
      _s = s;
    6726:	mvn.w	r6, #6
    672a:	strb.w	r6, [r3, #2364]	; 0x93c
      _b = b;
    672e:	mvn.w	r6, #36	; 0x24
    6732:	strb.w	r6, [r3, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6736:	movs	r6, #157	; 0x9d
    6738:	str.w	r6, [r3, #2296]	; 0x8f8
    673c:	movs	r6, #125	; 0x7d
    673e:	mov	r1, r6
    6740:	str.w	r6, [r3, #2368]	; 0x940
      _s = s;
      _b = b;
    6744:	mvn.w	r6, #72	; 0x48
    6748:	strb.w	r6, [r3, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    674c:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6750:	str.w	r1, [r3, #2376]	; 0x948
      _s = s;
    6754:	mvn.w	r1, #2
    6758:	strb.w	r6, [r3, #2380]	; 0x94c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    675c:	movs	r6, #122	; 0x7a
      _s = s;
    675e:	strb.w	r1, [r3, #2396]	; 0x95c
    6762:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6766:	str.w	r6, [r3, #2384]	; 0x950
      _s = s;
    676a:	mvn.w	r6, #64	; 0x40
    676e:	strb.w	r1, [r3, #2420]	; 0x974
    6772:	mvn.w	r1, #2
    6776:	strb.w	r6, [r3, #2388]	; 0x954
      _b = b;
    677a:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    677e:	strb.w	r1, [r3, #2428]	; 0x97c
    6782:	mov.w	r1, #4294967295
      _b = b;
    6786:	strb.w	r6, [r3, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    678a:	movs	r6, #138	; 0x8a
      _s = s;
    678c:	strb.w	r1, [r3, #2460]	; 0x99c
    6790:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6794:	str.w	r6, [r3, #2392]	; 0x958
      _s = s;
      _b = b;
    6798:	mvn.w	r6, #67	; 0x43
    679c:	strb.w	sl, [r3, #2413]	; 0x96d
    67a0:	strb.w	r6, [r3, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67a4:	movs	r6, #108	; 0x6c
    67a6:	str.w	r6, [r3, #2400]	; 0x960
      _s = s;
    67aa:	mvn.w	r6, #71	; 0x47
    67ae:	strb.w	r6, [r3, #2404]	; 0x964
      _b = b;
    67b2:	mvn.w	r6, #24
    67b6:	strb.w	r6, [r3, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67ba:	movs	r6, #102	; 0x66
    67bc:	str.w	r6, [r3, #2408]	; 0x968
    67c0:	movs	r6, #125	; 0x7d
    67c2:	str.w	r6, [r3, #2416]	; 0x970
      _s = s;
      _b = b;
    67c6:	mvn.w	r6, #57	; 0x39
    67ca:	strb.w	r6, [r3, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67ce:	movs	r6, #135	; 0x87
    67d0:	str.w	r6, [r3, #2424]	; 0x978
      _s = s;
      _b = b;
    67d4:	mvn.w	r6, #107	; 0x6b
    67d8:	strb.w	r6, [r3, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67dc:	movs	r6, #155	; 0x9b
    67de:	str.w	r6, [r3, #2432]	; 0x980
      _s = s;
    67e2:	mvn.w	r6, #73	; 0x49
    67e6:	strb.w	r6, [r3, #2436]	; 0x984
      _b = b;
    67ea:	mvn.w	r6, #27
    67ee:	strb.w	r6, [r3, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67f2:	movs	r6, #105	; 0x69
    67f4:	str.w	r6, [r3, #2440]	; 0x988
      _s = s;
    67f8:	mvn.w	r6, #95	; 0x5f
    67fc:	strb.w	r6, [r3, #2444]	; 0x98c
      _b = b;
    6800:	mvn.w	r6, #48	; 0x30
    6804:	strb.w	r6, [r3, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6808:	movs	r6, #120	; 0x78
    680a:	str.w	r6, [r3, #2448]	; 0x990
      _s = s;
    680e:	mvn.w	r6, #126	; 0x7e
    6812:	strb.w	r6, [r3, #2452]	; 0x994
      _b = b;
    6816:	mvn.w	r6, #17
    681a:	strb.w	r6, [r3, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    681e:	movs	r6, #75	; 0x4b
    6820:	str.w	r6, [r3, #2456]	; 0x998
      _s = s;
      _b = b;
    6824:	mvn.w	r6, #60	; 0x3c
    6828:	strb.w	r6, [r3, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    682c:	mvn.w	r6, #78	; 0x4e
    6830:	strb.w	r6, [r3, #2412]	; 0x96c
      _b = b;
    6834:	mvn.w	r6, #54	; 0x36
    6838:	strb.w	r6, [r3, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    683c:	movs	r6, #124	; 0x7c
      _s = s;
    683e:	strb.w	r1, [r3, #2476]	; 0x9ac
    6842:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6846:	str.w	r6, [r3, #2464]	; 0x9a0
      _s = s;
    684a:	mov.w	r6, #122	; 0x7a
    684e:	strb.w	r1, [r3, #2492]	; 0x9bc
    6852:	mov.w	r1, #4294967295
    6856:	strb.w	r6, [r3, #2468]	; 0x9a4
      _b = b;
    685a:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    685e:	strb.w	r1, [r3, #2516]	; 0x9d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6862:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    6864:	strb.w	r6, [r3, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6868:	movs	r6, #155	; 0x9b
    686a:	str.w	r1, [r3, #2520]	; 0x9d8
      _s = s;
    686e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6872:	str.w	r6, [r3, #2472]	; 0x9a8
      _s = s;
      _b = b;
    6876:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    687a:	strb.w	r1, [r3, #2524]	; 0x9dc
    687e:	mov.w	r1, #4294967295
      _b = b;
    6882:	strb.w	r6, [r3, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6886:	movs	r6, #140	; 0x8c
      _s = s;
    6888:	strb.w	r1, [r3, #2532]	; 0x9e4
    688c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6890:	str.w	r6, [r3, #2480]	; 0x9b0
      _s = s;
    6894:	mvn.w	r6, #25
    6898:	strb.w	r1, [r3, #2540]	; 0x9ec
    689c:	mov.w	r1, #4294967295
    68a0:	strb.w	r6, [r3, #2484]	; 0x9b4
      _b = b;
    68a4:	strb.w	r6, [r3, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68a8:	movs	r6, #144	; 0x90
      _s = s;
    68aa:	strb.w	r1, [r3, #2548]	; 0x9f4
    68ae:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68b2:	str.w	r6, [r3, #2488]	; 0x9b8
      _s = s;
      _b = b;
    68b6:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68ba:	str.w	r5, [r3, #2496]	; 0x9c0
      _s = s;
      _b = b;
    68be:	strb.w	r6, [r3, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68c2:	movs	r6, #170	; 0xaa
      _s = s;
    68c4:	strb.w	r5, [r3, #2500]	; 0x9c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68c8:	str.w	r6, [r3, #2512]	; 0x9d0
      _s = s;
      _b = b;
    68cc:	mov.w	r6, #119	; 0x77
    68d0:	strb.w	r5, [r3, #2501]	; 0x9c5
    68d4:	strb.w	r6, [r3, #2517]	; 0x9d5
    68d8:	mov.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68dc:	str.w	r5, [r3, #2504]	; 0x9c8
      _s = s;
      _b = b;
    68e0:	strb.w	r6, [r3, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68e4:	movs	r6, #151	; 0x97
      _s = s;
    68e6:	strb.w	r5, [r3, #2508]	; 0x9cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68ea:	str.w	r6, [r3, #2528]	; 0x9e0
      _s = s;
      _b = b;
    68ee:	mov.w	r6, #91	; 0x5b
    68f2:	strb.w	r5, [r3, #2509]	; 0x9cd
    68f6:	strb.w	r6, [r3, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68fa:	movs	r6, #160	; 0xa0
    68fc:	str.w	r6, [r3, #2536]	; 0x9e8
      _s = s;
      _b = b;
    6900:	mov.w	r6, #101	; 0x65
    6904:	strb.w	r6, [r3, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6908:	movs	r6, #145	; 0x91
    690a:	str.w	r6, [r3, #2544]	; 0x9f0
      _s = s;
      _b = b;
    690e:	mvn.w	r6, #74	; 0x4a
    6912:	strb.w	r6, [r3, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6916:	movs	r6, #150	; 0x96
      _s = s;
    6918:	strb.w	r1, [r3, #2556]	; 0x9fc
    691c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6920:	str.w	r6, [r3, #2552]	; 0x9f8
      _s = s;
      _b = b;
    6924:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6928:	strb.w	r1, [r3, #2564]	; 0xa04
    692c:	mov.w	r1, #4294967295
      _b = b;
    6930:	strb.w	r6, [r3, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6934:	movs	r6, #139	; 0x8b
      _s = s;
    6936:	strb.w	r1, [r3, #2580]	; 0xa14
    693a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    693e:	str.w	r6, [r3, #2560]	; 0xa00
      _s = s;
      _b = b;
    6942:	mvn.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6946:	strb.w	r1, [r3, #2588]	; 0xa1c
    694a:	mov.w	r1, #4294967295
      _b = b;
    694e:	strb.w	r6, [r3, #2565]	; 0xa05
    6952:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6956:	strb.w	r1, [r3, #2596]	; 0xa24
    695a:	mov.w	r1, #4294967295
      _b = b;
    695e:	strb.w	r6, [r3, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6962:	movs	r6, #133	; 0x85
      _s = s;
    6964:	strb.w	r1, [r3, #2604]	; 0xa2c
    6968:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    696c:	str.w	r6, [r3, #2576]	; 0xa10
      _s = s;
      _b = b;
    6970:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6974:	strb.w	r1, [r3, #2612]	; 0xa34
    6978:	mov.w	r1, #4294967295
      _b = b;
    697c:	strb.w	r6, [r3, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6980:	movs	r6, #151	; 0x97
      _s = s;
    6982:	strb.w	r1, [r3, #2620]	; 0xa3c
    6986:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    698a:	str.w	r6, [r3, #2584]	; 0xa18
      _s = s;
      _b = b;
    698e:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6992:	strb.w	lr, [r3, #2572]	; 0xa0c
      _b = b;
    6996:	strb.w	r6, [r3, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    699a:	movs	r6, #133	; 0x85
      _s = s;
    699c:	strb.w	r1, [r3, #2628]	; 0xa44
    69a0:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69a4:	str.w	r6, [r3, #2592]	; 0xa20
    69a8:	movs	r6, #144	; 0x90
    69aa:	str.w	r6, [r3, #2600]	; 0xa28
      _s = s;
      _b = b;
    69ae:	mvn.w	r6, #82	; 0x52
    69b2:	strb.w	r6, [r3, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69b6:	movs	r6, #134	; 0x86
    69b8:	str.w	r6, [r3, #2608]	; 0xa30
      _s = s;
      _b = b;
    69bc:	mvn.w	r6, #73	; 0x49
    69c0:	strb.w	r6, [r3, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69c4:	movs	r6, #148	; 0x94
    69c6:	str.w	r6, [r3, #2616]	; 0xa38
      _s = s;
      _b = b;
    69ca:	mvn.w	r6, #76	; 0x4c
    69ce:	strb.w	r6, [r3, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69d2:	movs	r6, #161	; 0xa1
    69d4:	str.w	r6, [r3, #2624]	; 0xa40
      _s = s;
      _b = b;
    69d8:	mvn.w	r6, #18
    69dc:	strb.w	r6, [r3, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69e0:	movs	r6, #153	; 0x99
    69e2:	str.w	r6, [r3, #2632]	; 0xa48
      _s = s;
    69e6:	mvn.w	r6, #108	; 0x6c
    69ea:	strb.w	r6, [r3, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ee:	movs	r6, #132	; 0x84
    69f0:	str.w	r6, [r3, #2568]	; 0xa08
      _s = s;
      _b = b;
    69f4:	mvn.w	r6, #58	; 0x3a
    69f8:	strb.w	r6, [r3, #2597]	; 0xa25
    69fc:	mvn.w	r6, #22
    6a00:	strb.w	r6, [r3, #2637]	; 0xa4d
    6a04:	mov.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a08:	strb.w	r1, [r3, #2668]	; 0xa6c
    6a0c:	mvn.w	r1, #2
      _b = b;
    6a10:	strb.w	r6, [r3, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a14:	mov.w	r6, #95	; 0x5f
    6a18:	strb.w	r1, [r3, #2676]	; 0xa74
    6a1c:	mov.w	r1, #4294967295
    6a20:	strb.w	r6, [r3, #2644]	; 0xa54
      _b = b;
    6a24:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a28:	strb.w	r1, [r3, #2700]	; 0xa8c
    6a2c:	mov.w	r1, #4294967295
      _b = b;
    6a30:	strb.w	r6, [r3, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a34:	movs	r6, #88	; 0x58
      _s = s;
    6a36:	strb.w	r1, [r3, #2716]	; 0xa9c
    6a3a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a3e:	str.w	r6, [r3, #2648]	; 0xa58
      _s = s;
      _b = b;
    6a42:	mvn.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a46:	strb.w	lr, [r3, #2652]	; 0xa5c
      _b = b;
    6a4a:	strb.w	r6, [r3, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a4e:	movs	r6, #94	; 0x5e
      _s = s;
    6a50:	strb.w	ip, [r3, #2660]	; 0xa64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a54:	str.w	r6, [r3, #2656]	; 0xa60
      _s = s;
      _b = b;
    6a58:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a5c:	str.w	r8, [r3, #2712]	; 0xa98
      _s = s;
      _b = b;
    6a60:	strb.w	r6, [r3, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a64:	movs	r6, #144	; 0x90
      _s = s;
    6a66:	strb.w	r1, [r3, #2724]	; 0xaa4
    6a6a:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a6e:	str.w	r6, [r3, #2664]	; 0xa68
      _s = s;
      _b = b;
    6a72:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a76:	str.w	r5, [r3, #2688]	; 0xa80
      _s = s;
      _b = b;
    6a7a:	strb.w	r6, [r3, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a7e:	movs	r6, #104	; 0x68
      _s = s;
    6a80:	strb.w	r5, [r3, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a84:	str.w	r6, [r3, #2672]	; 0xa70
      _s = s;
      _b = b;
    6a88:	mvn.w	r6, #29
    6a8c:	strb.w	r5, [r3, #2693]	; 0xa85
    6a90:	strb.w	r6, [r3, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a94:	movs	r6, #126	; 0x7e
    6a96:	str.w	r6, [r3, #2680]	; 0xa78
      _s = s;
    6a9a:	mvn.w	r6, #12
    6a9e:	strb.w	r6, [r3, #2684]	; 0xa7c
      _b = b;
    6aa2:	mvn.w	r6, #62	; 0x3e
    6aa6:	strb.w	r6, [r3, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aaa:	movs	r6, #169	; 0xa9
    6aac:	str.w	r6, [r3, #2696]	; 0xa88
    6ab0:	movs	r6, #167	; 0xa7
    6ab2:	str.w	r6, [r3, #2704]	; 0xa90
      _s = s;
    6ab6:	mvn.w	r6, #88	; 0x58
    6aba:	strb.w	r6, [r3, #2708]	; 0xa94
      _b = b;
    6abe:	mvn.w	r6, #83	; 0x53
    6ac2:	strb.w	r6, [r3, #2709]	; 0xa95
    6ac6:	mov.w	r6, #25
    6aca:	strb.w	r6, [r3, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ace:	movs	r6, #166	; 0xa6
    6ad0:	str.w	r6, [r3, #2720]	; 0xaa0
    6ad4:	movs	r6, #118	; 0x76
    6ad6:	str.w	r6, [r3, #2640]	; 0xa50
      _s = s;
      _b = b;
    6ada:	mov.w	r6, #61	; 0x3d
    6ade:	strb.w	r6, [r3, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ae2:	movs	r6, #158	; 0x9e
      _s = s;
    6ae4:	strb.w	r1, [r3, #2732]	; 0xaac
    6ae8:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aec:	str.w	r6, [r3, #2728]	; 0xaa8
      _s = s;
      _b = b;
    6af0:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6af4:	strb.w	r1, [r3, #2740]	; 0xab4
    6af8:	mvn.w	r1, #2
      _b = b;
    6afc:	strb.w	r6, [r3, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b00:	movs	r6, #162	; 0xa2
      _s = s;
    6b02:	strb.w	r1, [r3, #2748]	; 0xabc
    6b06:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b0a:	str.w	r6, [r3, #2736]	; 0xab0
      _s = s;
      _b = b;
    6b0e:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b12:	strb.w	r1, [r3, #2756]	; 0xac4
    6b16:	mov.w	r1, #4294967295
      _b = b;
    6b1a:	strb.w	r6, [r3, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b1e:	movs	r6, #151	; 0x97
      _s = s;
    6b20:	strb.w	r1, [r3, #2764]	; 0xacc
    6b24:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b28:	str.w	r6, [r3, #2744]	; 0xab8
      _s = s;
      _b = b;
    6b2c:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b30:	strb.w	r1, [r3, #2772]	; 0xad4
    6b34:	mov.w	r1, #4294967295
      _b = b;
    6b38:	strb.w	r6, [r3, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b3c:	movs	r6, #154	; 0x9a
      _s = s;
    6b3e:	strb.w	r1, [r3, #2780]	; 0xadc
    6b42:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b46:	str.w	r6, [r3, #2752]	; 0xac0
    6b4a:	movs	r6, #136	; 0x88
      _s = s;
    6b4c:	strb.w	r1, [r3, #2788]	; 0xae4
    6b50:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b54:	str.w	r6, [r3, #2760]	; 0xac8
      _s = s;
      _b = b;
    6b58:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b5c:	strb.w	r1, [r3, #2796]	; 0xaec
    6b60:	mov.w	r1, #4294967295
      _b = b;
    6b64:	strb.w	r6, [r3, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b68:	movs	r6, #140	; 0x8c
      _s = s;
    6b6a:	strb.w	r1, [r3, #2812]	; 0xafc
    6b6e:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b72:	str.w	r6, [r3, #2768]	; 0xad0
      _s = s;
      _b = b;
    6b76:	mvn.w	r6, #55	; 0x37
    6b7a:	strb.w	sl, [r3, #2757]	; 0xac5
    6b7e:	strb.w	r6, [r3, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b82:	movs	r6, #155	; 0x9b
    6b84:	str.w	r6, [r3, #2776]	; 0xad8
      _s = s;
      _b = b;
    6b88:	mvn.w	r6, #105	; 0x69
    6b8c:	strb.w	r6, [r3, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b90:	movs	r6, #154	; 0x9a
    6b92:	str.w	r6, [r3, #2784]	; 0xae0
      _s = s;
      _b = b;
    6b96:	mvn.w	r6, #110	; 0x6e
    6b9a:	strb.w	r6, [r3, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b9e:	movs	r6, #153	; 0x99
    6ba0:	str.w	r6, [r3, #2792]	; 0xae8
      _s = s;
      _b = b;
    6ba4:	mvn.w	r6, #79	; 0x4f
    6ba8:	strb.w	r6, [r3, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bac:	movs	r6, #132	; 0x84
    6bae:	str.w	r6, [r3, #2800]	; 0xaf0
      _s = s;
    6bb2:	mvn.w	r6, #64	; 0x40
    6bb6:	strb.w	r6, [r3, #2804]	; 0xaf4
      _b = b;
    6bba:	mvn.w	r6, #49	; 0x31
    6bbe:	strb.w	r6, [r3, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bc2:	movs	r6, #146	; 0x92
    6bc4:	str.w	r6, [r3, #2808]	; 0xaf8
      _s = s;
      _b = b;
    6bc8:	mvn.w	r6, #45	; 0x2d
    6bcc:	strb.w	r6, [r3, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bd0:	movs	r6, #164	; 0xa4
      _s = s;
    6bd2:	strb.w	r1, [r3, #2820]	; 0xb04
    6bd6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bda:	str.w	r6, [r3, #2816]	; 0xb00
      _s = s;
      _b = b;
    6bde:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6be2:	strb.w	r1, [r3, #2868]	; 0xb34
    6be6:	mov.w	r1, #4294967295
      _b = b;
    6bea:	strb.w	r6, [r3, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bee:	movs	r6, #146	; 0x92
      _s = s;
    6bf0:	strb.w	r1, [r3, #2876]	; 0xb3c
    6bf4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bf8:	str.w	r6, [r3, #2824]	; 0xb08
      _s = s;
    6bfc:	mvn.w	r6, #109	; 0x6d
    6c00:	strb.w	lr, [r3, #2900]	; 0xb54
    6c04:	strb.w	r6, [r3, #2828]	; 0xb0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c08:	movs	r6, #102	; 0x66
      _s = s;
      _b = b;
    6c0a:	strb.w	sl, [r3, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c0e:	str.w	r6, [r3, #2832]	; 0xb10
      _s = s;
      _b = b;
    6c12:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c16:	str.w	r5, [r3, #2880]	; 0xb40
      _s = s;
      _b = b;
    6c1a:	strb.w	r6, [r3, #2837]	; 0xb15
    6c1e:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c22:	strb.w	r5, [r3, #2884]	; 0xb44
      _b = b;
    6c26:	strb.w	r6, [r3, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c2a:	movs	r6, #106	; 0x6a
      _s = s;
      _b = b;
    6c2c:	strb.w	r5, [r3, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c30:	str.w	r6, [r3, #2848]	; 0xb20
      _s = s;
    6c34:	mov.w	r6, #116	; 0x74
    6c38:	strb.w	r6, [r3, #2852]	; 0xb24
      _b = b;
    6c3c:	mvn.w	r6, #11
    6c40:	strb.w	r6, [r3, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c44:	movs	r6, #109	; 0x6d
    6c46:	str.w	r6, [r3, #2856]	; 0xb28
      _s = s;
    6c4a:	mvn.w	r6, #11
    6c4e:	strb.w	r6, [r3, #2860]	; 0xb2c
      _b = b;
    6c52:	mvn.w	r6, #42	; 0x2a
    6c56:	strb.w	r6, [r3, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c5a:	movs	r6, #119	; 0x77
    6c5c:	str.w	r6, [r3, #2864]	; 0xb30
      _s = s;
      _b = b;
    6c60:	mvn.w	r6, #34	; 0x22
    6c64:	strb.w	r6, [r3, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c68:	movs	r6, #105	; 0x69
    6c6a:	str.w	r6, [r3, #2872]	; 0xb38
      _s = s;
      _b = b;
    6c6e:	mvn.w	r6, #54	; 0x36
    6c72:	strb.w	r6, [r3, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c76:	movs	r6, #171	; 0xab
    6c78:	str.w	r6, [r3, #2888]	; 0xb48
      _s = s;
    6c7c:	mvn.w	r6, #70	; 0x46
    6c80:	strb.w	r6, [r3, #2892]	; 0xb4c
      _b = b;
    6c84:	mvn.w	r6, #65	; 0x41
    6c88:	strb.w	r6, [r3, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c8c:	movs	r6, #172	; 0xac
    6c8e:	str.w	r6, [r3, #2896]	; 0xb50
      _s = s;
    6c92:	mvn.w	r6, #61	; 0x3d
    6c96:	strb.w	r6, [r3, #2836]	; 0xb14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c9a:	movs	r6, #78	; 0x4e
    6c9c:	str.w	r6, [r3, #2840]	; 0xb18
      _s = s;
    6ca0:	mvn.w	r6, #47	; 0x2f
    6ca4:	strb.w	r6, [r3, #2844]	; 0xb1c
      _b = b;
    6ca8:	mov.w	r6, #115	; 0x73
    6cac:	strb.w	r6, [r3, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cb0:	movs	r6, #172	; 0xac
      _s = s;
    6cb2:	strb.w	r1, [r3, #2908]	; 0xb5c
    6cb6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cba:	str.w	r6, [r3, #2904]	; 0xb58
      _s = s;
      _b = b;
    6cbe:	mov.w	r6, #17
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cc2:	strb.w	r1, [r3, #2916]	; 0xb64
      _b = b;
    6cc6:	strb.w	r6, [r3, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cca:	movs	r6, #176	; 0xb0
      _s = s;
    6ccc:	strb.w	r1, [r3, #2924]	; 0xb6c
    6cd0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cd4:	str.w	r6, [r3, #2912]	; 0xb60
      _s = s;
      _b = b;
    6cd8:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cdc:	strb.w	r1, [r3, #2932]	; 0xb74
    6ce0:	mov.w	r1, #4294967295
      _b = b;
    6ce4:	strb.w	r6, [r3, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ce8:	movs	r6, #171	; 0xab
      _s = s;
    6cea:	strb.w	r1, [r3, #2940]	; 0xb7c
    6cee:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cf2:	str.w	r6, [r3, #2928]	; 0xb70
      _s = s;
      _b = b;
    6cf6:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cfa:	strb.w	r1, [r3, #2948]	; 0xb84
    6cfe:	mvn.w	r1, #2
      _b = b;
    6d02:	strb.w	r6, [r3, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d06:	movs	r6, #157	; 0x9d
      _s = s;
    6d08:	strb.w	r1, [r3, #2956]	; 0xb8c
    6d0c:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d10:	str.w	r6, [r3, #2936]	; 0xb78
      _s = s;
      _b = b;
    6d14:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d18:	strb.w	r1, [r3, #2964]	; 0xb94
    6d1c:	mov.w	r1, #4294967295
      _b = b;
    6d20:	strb.w	r6, [r3, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d24:	movs	r6, #162	; 0xa2
      _s = s;
    6d26:	strb.w	r1, [r3, #2972]	; 0xb9c
    6d2a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d2e:	str.w	r6, [r3, #2944]	; 0xb80
      _s = s;
      _b = b;
    6d32:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d36:	strb.w	r1, [r3, #2980]	; 0xba4
    6d3a:	mov.w	r1, #4294967295
      _b = b;
    6d3e:	strb.w	r6, [r3, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d42:	movs	r6, #152	; 0x98
    6d44:	str.w	r8, [r3, #2920]	; 0xb68
    6d48:	str.w	r6, [r3, #2952]	; 0xb88
    6d4c:	movs	r6, #151	; 0x97
      _s = s;
    6d4e:	strb.w	r1, [r3, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d52:	str.w	r6, [r3, #2960]	; 0xb90
      _s = s;
      _b = b;
    6d56:	mvn.w	r6, #96	; 0x60
    6d5a:	strb.w	r6, [r3, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d5e:	movs	r6, #159	; 0x9f
    6d60:	str.w	r6, [r3, #2968]	; 0xb98
      _s = s;
      _b = b;
    6d64:	mvn.w	r6, #114	; 0x72
    6d68:	strb.w	r6, [r3, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d6c:	movs	r6, #152	; 0x98
    6d6e:	str.w	r6, [r3, #2976]	; 0xba0
      _s = s;
      _b = b;
    6d72:	mvn.w	r6, #82	; 0x52
    6d76:	strb.w	r6, [r3, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d7a:	movs	r6, #154	; 0x9a
    6d7c:	str.w	r6, [r3, #2984]	; 0xba8
      _s = s;
      _b = b;
    6d80:	mov.w	r6, #32
    6d84:	strb.w	r6, [r3, #2917]	; 0xb65
    6d88:	mvn.w	r6, #43	; 0x2b
    6d8c:	strb.w	r6, [r3, #2957]	; 0xb8d
    6d90:	mvn.w	r6, #46	; 0x2e
    6d94:	strb.w	r6, [r3, #2989]	; 0xbad
    6d98:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d9c:	strb.w	r1, [r3, #2996]	; 0xbb4
    6da0:	mov.w	r1, #4294967295
      _b = b;
    6da4:	strb.w	r6, [r3, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6da8:	movs	r6, #145	; 0x91
      _s = s;
    6daa:	strb.w	r1, [r3, #3020]	; 0xbcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dae:	str.w	r6, [r3, #3000]	; 0xbb8
      _s = s;
    6db2:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6db6:	str.w	ip, [r3, #2992]	; 0xbb0
      _s = s;
    6dba:	strb.w	r6, [r3, #3004]	; 0xbbc
      _b = b;
    6dbe:	mvn.w	r6, #77	; 0x4d
    6dc2:	strb.w	lr, [r3, #3029]	; 0xbd5
    6dc6:	strb.w	r6, [r3, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dca:	movs	r6, #164	; 0xa4
    6dcc:	str.w	r6, [r3, #3008]	; 0xbc0
      _s = s;
    6dd0:	mvn.w	r6, #6
    6dd4:	strb.w	r6, [r3, #3012]	; 0xbc4
      _b = b;
    6dd8:	mvn.w	r6, #9
    6ddc:	strb.w	r6, [r3, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6de0:	movs	r6, #163	; 0xa3
    6de2:	str.w	r6, [r3, #3016]	; 0xbc8
      _s = s;
      _b = b;
    6de6:	mvn.w	r6, #16
    6dea:	strb.w	r6, [r3, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dee:	movs	r6, #112	; 0x70
    6df0:	mov	r1, r6
    6df2:	str.w	r6, [r3, #3024]	; 0xbd0
      _s = s;
    6df6:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dfa:	str.w	r1, [r3, #3032]	; 0xbd8
      _s = s;
    6dfe:	mov.w	r1, #4294967295
    6e02:	strb.w	r6, [r3, #3028]	; 0xbd4
    6e06:	mvn.w	r6, #115	; 0x73
    6e0a:	strb.w	r1, [r3, #3060]	; 0xbf4
    6e0e:	mov.w	r1, #4294967295
    6e12:	strb.w	r6, [r3, #3036]	; 0xbdc
      _b = b;
    6e16:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e1a:	strb.w	r1, [r3, #3076]	; 0xc04
    6e1e:	mov.w	r1, #4294967295
      _b = b;
    6e22:	strb.w	r6, [r3, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e26:	movs	r6, #128	; 0x80
    6e28:	str.w	r6, [r3, #3040]	; 0xbe0
      _s = s;
    6e2c:	mvn.w	r6, #74	; 0x4a
    6e30:	strb.w	r6, [r3, #3044]	; 0xbe4
      _b = b;
    6e34:	mvn.w	r6, #36	; 0x24
    6e38:	strb.w	r6, [r3, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e3c:	movs	r6, #129	; 0x81
    6e3e:	str.w	r6, [r3, #3048]	; 0xbe8
      _s = s;
    6e42:	mvn.w	r6, #50	; 0x32
    6e46:	strb.w	r6, [r3, #3052]	; 0xbec
      _b = b;
    6e4a:	mvn.w	r6, #40	; 0x28
    6e4e:	strb.w	r6, [r3, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e52:	movs	r6, #127	; 0x7f
    6e54:	str.w	r6, [r3, #3056]	; 0xbf0
      _s = s;
      _b = b;
    6e58:	mvn.w	r6, #41	; 0x29
    6e5c:	strb.w	r6, [r3, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e60:	movs	r6, #114	; 0x72
    6e62:	str.w	r6, [r3, #3064]	; 0xbf8
      _s = s;
    6e66:	mvn.w	r6, #14
    6e6a:	strb.w	r6, [r3, #3068]	; 0xbfc
      _b = b;
    6e6e:	mvn.w	r6, #33	; 0x21
    6e72:	strb.w	r6, [r3, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e76:	movs	r6, #165	; 0xa5
    6e78:	str.w	r6, [r3, #3072]	; 0xc00
      _s = s;
      _b = b;
    6e7c:	mov.w	r6, #95	; 0x5f
    6e80:	strb.w	r6, [r3, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e84:	movs	r6, #169	; 0xa9
      _s = s;
    6e86:	strb.w	r1, [r3, #3092]	; 0xc14
    6e8a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e8e:	str.w	r6, [r3, #3080]	; 0xc08
      _s = s;
    6e92:	mvn.w	r6, #89	; 0x59
    6e96:	strb.w	r1, [r3, #3100]	; 0xc1c
    6e9a:	strb.w	r6, [r3, #3084]	; 0xc0c
      _b = b;
    6e9e:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ea2:	strb.w	r1, [r3, #3108]	; 0xc24
    6ea6:	mov.w	r1, #4294967295
      _b = b;
    6eaa:	strb.w	r6, [r3, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eae:	movs	r6, #177	; 0xb1
      _s = s;
    6eb0:	strb.w	r1, [r3, #3140]	; 0xc44
    6eb4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eb8:	str.w	r6, [r3, #3088]	; 0xc10
      _s = s;
      _b = b;
    6ebc:	mov.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ec0:	strb.w	r1, [r3, #3148]	; 0xc4c
    6ec4:	mvn.w	r1, #2
      _b = b;
    6ec8:	strb.w	r6, [r3, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ecc:	movs	r6, #178	; 0xb2
      _s = s;
    6ece:	strb.w	r1, [r3, #3156]	; 0xc54
    6ed2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ed6:	str.w	r6, [r3, #3096]	; 0xc18
      _s = s;
      _b = b;
    6eda:	mov.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ede:	str.w	r8, [r3, #3104]	; 0xc20
      _s = s;
      _b = b;
    6ee2:	strb.w	r6, [r3, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ee6:	movs	r6, #161	; 0xa1
      _s = s;
      _b = b;
    6ee8:	strb.w	ip, [r3, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eec:	str.w	r6, [r3, #3112]	; 0xc28
      _s = s;
    6ef0:	mvn.w	r6, #123	; 0x7b
    6ef4:	strb.w	r1, [r3, #3164]	; 0xc5c
    6ef8:	mvn.w	r1, #2
    6efc:	strb.w	r6, [r3, #3116]	; 0xc2c
      _b = b;
    6f00:	mvn.w	r6, #103	; 0x67
    6f04:	strb.w	r6, [r3, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f08:	movs	r6, #111	; 0x6f
    6f0a:	str.w	r6, [r3, #3120]	; 0xc30
      _s = s;
    6f0e:	mvn.w	r6, #55	; 0x37
    6f12:	strb.w	r6, [r3, #3124]	; 0xc34
      _b = b;
    6f16:	mvn.w	r6, #88	; 0x58
    6f1a:	strb.w	r6, [r3, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f1e:	movs	r6, #142	; 0x8e
    6f20:	str.w	r6, [r3, #3128]	; 0xc38
      _s = s;
    6f24:	mvn.w	r6, #62	; 0x3e
    6f28:	strb.w	r6, [r3, #3132]	; 0xc3c
      _b = b;
    6f2c:	mov.w	r6, #124	; 0x7c
    6f30:	strb.w	r6, [r3, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f34:	movs	r6, #168	; 0xa8
    6f36:	str.w	r6, [r3, #3136]	; 0xc40
      _s = s;
      _b = b;
    6f3a:	mvn.w	r6, #114	; 0x72
    6f3e:	strb.w	r6, [r3, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f42:	movs	r6, #164	; 0xa4
    6f44:	str.w	r6, [r3, #3144]	; 0xc48
      _s = s;
      _b = b;
    6f48:	mvn.w	r6, #75	; 0x4b
    6f4c:	strb.w	r6, [r3, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f50:	movs	r6, #162	; 0xa2
    6f52:	str.w	r6, [r3, #3152]	; 0xc50
    6f56:	str.w	r6, [r3, #3160]	; 0xc58
      _s = s;
      _b = b;
    6f5a:	mov.w	r6, #57	; 0x39
    6f5e:	strb.w	r6, [r3, #3109]	; 0xc25
    6f62:	mov.w	r6, #63	; 0x3f
    6f66:	strb.w	r6, [r3, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f6a:	movs	r6, #151	; 0x97
      _s = s;
    6f6c:	strb.w	r1, [r3, #3172]	; 0xc64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f70:	movs	r1, #156	; 0x9c
    6f72:	str.w	r6, [r3, #3168]	; 0xc60
      _s = s;
      _b = b;
    6f76:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f7a:	str.w	r1, [r3, #3176]	; 0xc68
      _s = s;
    6f7e:	mov.w	r1, #4294967295
      _b = b;
    6f82:	strb.w	r6, [r3, #3173]	; 0xc65
    6f86:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f8a:	strb.w	r1, [r3, #3180]	; 0xc6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f8e:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    6f90:	strb.w	r6, [r3, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f94:	movs	r6, #157	; 0x9d
    6f96:	str.w	r1, [r3, #3192]	; 0xc78
      _s = s;
    6f9a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f9e:	str.w	r6, [r3, #3184]	; 0xc70
      _s = s;
    6fa2:	mvn.w	r6, #8
    6fa6:	strb.w	r1, [r3, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6faa:	movs	r1, #156	; 0x9c
      _s = s;
    6fac:	strb.w	r6, [r3, #3188]	; 0xc74
      _b = b;
    6fb0:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fb4:	str.w	r1, [r3, #3200]	; 0xc80
      _s = s;
    6fb8:	mvn.w	r1, #2
      _b = b;
    6fbc:	strb.w	r6, [r3, #3189]	; 0xc75
    6fc0:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fc4:	strb.w	r1, [r3, #3204]	; 0xc84
    6fc8:	mov.w	r1, #4294967295
      _b = b;
    6fcc:	strb.w	r6, [r3, #3197]	; 0xc7d
    6fd0:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fd4:	strb.w	r1, [r3, #3228]	; 0xc9c
    6fd8:	mov.w	r1, #4294967295
      _b = b;
    6fdc:	strb.w	r6, [r3, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fe0:	movs	r6, #160	; 0xa0
      _s = s;
    6fe2:	strb.w	r1, [r3, #3236]	; 0xca4
    6fe6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fea:	str.w	r6, [r3, #3208]	; 0xc88
      _s = s;
    6fee:	mvn.w	r6, #54	; 0x36
    6ff2:	strb.w	r1, [r3, #3244]	; 0xcac
    6ff6:	mvn.w	r1, #2
    6ffa:	strb.w	r6, [r3, #3212]	; 0xc8c
      _b = b;
    6ffe:	mvn.w	r6, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7002:	strb.w	r1, [r3, #3252]	; 0xcb4
    7006:	mvn.w	r1, #2
      _b = b;
    700a:	strb.w	r6, [r3, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    700e:	movs	r6, #143	; 0x8f
    7010:	str.w	r6, [r3, #3216]	; 0xc90
      _s = s;
    7014:	mvn.w	r6, #51	; 0x33
    7018:	strb.w	r6, [r3, #3220]	; 0xc94
      _b = b;
    701c:	mvn.w	r6, #48	; 0x30
    7020:	strb.w	r6, [r3, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7024:	movs	r6, #145	; 0x91
    7026:	str.w	r6, [r3, #3224]	; 0xc98
      _s = s;
      _b = b;
    702a:	mvn.w	r6, #78	; 0x4e
    702e:	strb.w	r6, [r3, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7032:	movs	r6, #134	; 0x86
    7034:	str.w	r6, [r3, #3232]	; 0xca0
      _s = s;
      _b = b;
    7038:	mvn.w	r6, #102	; 0x66
    703c:	strb.w	r6, [r3, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7040:	movs	r6, #144	; 0x90
    7042:	str.w	r6, [r3, #3240]	; 0xca8
      _s = s;
      _b = b;
    7046:	mvn.w	r6, #49	; 0x31
    704a:	strb.w	r6, [r3, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    704e:	movs	r6, #145	; 0x91
    7050:	str.w	r6, [r3, #3248]	; 0xcb0
      _s = s;
      _b = b;
    7054:	mvn.w	r6, #63	; 0x3f
    7058:	strb.w	r6, [r3, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    705c:	movs	r6, #139	; 0x8b
      _s = s;
    705e:	strb.w	r1, [r3, #3260]	; 0xcbc
    7062:	mvn.w	r1, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7066:	str.w	r6, [r3, #3256]	; 0xcb8
      _s = s;
      _b = b;
    706a:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    706e:	strb.w	r1, [r3, #3316]	; 0xcf4
    7072:	mvn.w	r1, #99	; 0x63
      _b = b;
    7076:	strb.w	r6, [r3, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    707a:	movs	r6, #164	; 0xa4
      _s = s;
    707c:	strb.w	r1, [r3, #3324]	; 0xcfc
    7080:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7084:	str.w	r6, [r3, #3264]	; 0xcc0
      _s = s;
    7088:	mvn.w	r6, #120	; 0x78
    708c:	strb.w	lr, [r3, #3340]	; 0xd0c
    7090:	strb.w	r6, [r3, #3268]	; 0xcc4
      _b = b;
    7094:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7098:	strb.w	fp, [r3, #3284]	; 0xcd4
      _b = b;
    709c:	strb.w	r6, [r3, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70a0:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    70a2:	strb.w	sl, [r3, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70a6:	str.w	r6, [r3, #3272]	; 0xcc8
      _s = s;
    70aa:	mvn.w	r6, #89	; 0x59
    70ae:	strb.w	r6, [r3, #3276]	; 0xccc
      _b = b;
    70b2:	mvn.w	r6, #56	; 0x38
    70b6:	strb.w	r6, [r3, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ba:	movs	r6, #183	; 0xb7
    70bc:	str.w	r6, [r3, #3280]	; 0xcd0
      _s = s;
      _b = b;
    70c0:	mov.w	r6, #73	; 0x49
    70c4:	strb.w	r6, [r3, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70c8:	movs	r6, #174	; 0xae
    70ca:	str.w	r6, [r3, #3288]	; 0xcd8
      _s = s;
    70ce:	mvn.w	r6, #17
    70d2:	strb.w	r6, [r3, #3292]	; 0xcdc
      _b = b;
    70d6:	mov.w	r6, #107	; 0x6b
    70da:	strb.w	r6, [r3, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70de:	movs	r6, #151	; 0x97
    70e0:	str.w	r6, [r3, #3296]	; 0xce0
      _s = s;
    70e4:	mov.w	r6, #93	; 0x5d
    70e8:	strb.w	r6, [r3, #3300]	; 0xce4
      _b = b;
    70ec:	mvn.w	r6, #40	; 0x28
    70f0:	strb.w	r6, [r3, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70f4:	movs	r6, #102	; 0x66
    70f6:	str.w	r6, [r3, #3304]	; 0xce8
      _s = s;
    70fa:	mvn.w	r6, #71	; 0x47
    70fe:	strb.w	r6, [r3, #3308]	; 0xcec
      _b = b;
    7102:	mvn.w	r6, #31
    7106:	strb.w	r6, [r3, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    710a:	movs	r6, #126	; 0x7e
    710c:	str.w	r6, [r3, #3312]	; 0xcf0
    7110:	movs	r6, #135	; 0x87
    7112:	str.w	r6, [r3, #3320]	; 0xcf8
      _s = s;
      _b = b;
    7116:	mvn.w	r6, #32
    711a:	strb.w	r6, [r3, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    711e:	movs	r6, #118	; 0x76
    7120:	str.w	r6, [r3, #3328]	; 0xd00
      _s = s;
    7124:	mvn.w	r6, #100	; 0x64
    7128:	strb.w	r6, [r3, #3332]	; 0xd04
      _b = b;
    712c:	mvn.w	r6, #89	; 0x59
    7130:	strb.w	r6, [r3, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7134:	movs	r6, #173	; 0xad
    7136:	str.w	r6, [r3, #3336]	; 0xd08
      _s = s;
      _b = b;
    713a:	mov.w	r6, #127	; 0x7f
    713e:	strb.w	r6, [r3, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7142:	movs	r6, #176	; 0xb0
      _s = s;
    7144:	strb.w	r1, [r3, #3348]	; 0xd14
    7148:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    714c:	str.w	r6, [r3, #3344]	; 0xd10
    7150:	movs	r6, #160	; 0xa0
      _s = s;
    7152:	strb.w	r1, [r3, #3356]	; 0xd1c
    7156:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    715a:	str.w	r6, [r3, #3352]	; 0xd18
      _s = s;
      _b = b;
    715e:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7162:	strb.w	r1, [r3, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7166:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    7168:	strb.w	r6, [r3, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    716c:	movs	r6, #153	; 0x99
    716e:	str.w	r1, [r3, #3368]	; 0xd28
      _s = s;
    7172:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7176:	str.w	r6, [r3, #3360]	; 0xd20
      _s = s;
      _b = b;
    717a:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    717e:	strb.w	r1, [r3, #3372]	; 0xd2c
    7182:	mov.w	r1, #4294967295
      _b = b;
    7186:	strb.w	r6, [r3, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    718a:	movs	r6, #157	; 0x9d
      _s = s;
    718c:	strb.w	r1, [r3, #3380]	; 0xd34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7190:	movs	r1, #156	; 0x9c
    7192:	str.w	r6, [r3, #3376]	; 0xd30
      _s = s;
      _b = b;
    7196:	mov.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    719a:	str.w	r1, [r3, #3384]	; 0xd38
      _s = s;
    719e:	mov.w	r1, #4294967295
      _b = b;
    71a2:	strb.w	r6, [r3, #3381]	; 0xd35
    71a6:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71aa:	strb.w	r1, [r3, #3396]	; 0xd44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71ae:	movs	r1, #156	; 0x9c
      _s = s;
      _b = b;
    71b0:	strb.w	r6, [r3, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71b4:	movs	r6, #165	; 0xa5
    71b6:	str.w	r1, [r3, #3400]	; 0xd48
      _s = s;
    71ba:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71be:	str.w	r6, [r3, #3392]	; 0xd40
      _s = s;
      _b = b;
    71c2:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71c6:	strb.w	r1, [r3, #3404]	; 0xd4c
    71ca:	mov.w	r1, #4294967295
      _b = b;
    71ce:	strb.w	r6, [r3, #3397]	; 0xd45
    71d2:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71d6:	strb.w	lr, [r3, #3388]	; 0xd3c
      _b = b;
    71da:	strb.w	r6, [r3, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71de:	movs	r6, #145	; 0x91
      _s = s;
    71e0:	strb.w	r1, [r3, #3412]	; 0xd54
    71e4:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71e8:	str.w	r6, [r3, #3408]	; 0xd50
      _s = s;
      _b = b;
    71ec:	mvn.w	r6, #40	; 0x28
    71f0:	strb.w	r6, [r3, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71f4:	movs	r6, #134	; 0x86
    71f6:	str.w	r6, [r3, #3416]	; 0xd58
      _s = s;
    71fa:	mvn.w	r6, #38	; 0x26
    71fe:	strb.w	r6, [r3, #3420]	; 0xd5c
      _b = b;
    7202:	mvn.w	r6, #71	; 0x47
    7206:	strb.w	r6, [r3, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    720a:	movs	r6, #125	; 0x7d
    720c:	str.w	r6, [r3, #3424]	; 0xd60
      _s = s;
    7210:	mvn.w	r6, #50	; 0x32
    7214:	strb.w	r6, [r3, #3428]	; 0xd64
      _b = b;
    7218:	mov.w	r6, #55	; 0x37
    721c:	strb.w	r6, [r3, #3365]	; 0xd25
    7220:	mov.w	r6, #81	; 0x51
    7224:	strb.w	r6, [r3, #3349]	; 0xd15
    7228:	mvn.w	r6, #90	; 0x5a
    722c:	strb.w	r6, [r3, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7230:	movs	r6, #136	; 0x88
      _s = s;
    7232:	strb.w	r1, [r3, #3436]	; 0xd6c
    7236:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    723a:	str.w	r6, [r3, #3432]	; 0xd68
      _s = s;
      _b = b;
    723e:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7242:	strb.w	r1, [r3, #3452]	; 0xd7c
    7246:	mvn.w	r1, #99	; 0x63
      _b = b;
    724a:	strb.w	r6, [r3, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    724e:	movs	r6, #136	; 0x88
      _s = s;
    7250:	strb.w	lr, [r3, #3468]	; 0xd8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7254:	str.w	r6, [r3, #3440]	; 0xd70
      _s = s;
    7258:	mvn.w	r6, #7
    725c:	strb.w	lr, [r3, #3476]	; 0xd94
    7260:	strb.w	r6, [r3, #3444]	; 0xd74
      _b = b;
    7264:	mvn.w	r6, #52	; 0x34
    7268:	strb.w	r8, [r3, #3485]	; 0xd9d
    726c:	strb.w	r6, [r3, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7270:	movs	r6, #141	; 0x8d
    7272:	str.w	r6, [r3, #3448]	; 0xd78
      _s = s;
      _b = b;
    7276:	mvn.w	r6, #69	; 0x45
    727a:	strb.w	r6, [r3, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    727e:	movs	r6, #174	; 0xae
    7280:	str.w	r6, [r3, #3456]	; 0xd80
      _s = s;
    7284:	mvn.w	r6, #22
    7288:	strb.w	r6, [r3, #3460]	; 0xd84
      _b = b;
    728c:	mvn.w	r6, #64	; 0x40
    7290:	strb.w	r6, [r3, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7294:	movs	r6, #178	; 0xb2
    7296:	str.w	r6, [r3, #3464]	; 0xd88
      _s = s;
      _b = b;
    729a:	mov.w	r6, #126	; 0x7e
    729e:	strb.w	r6, [r3, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72a2:	movs	r6, #179	; 0xb3
    72a4:	str.w	r6, [r3, #3472]	; 0xd90
      _s = s;
      _b = b;
    72a8:	mov.w	r6, #97	; 0x61
    72ac:	strb.w	r6, [r3, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72b0:	movs	r6, #170	; 0xaa
    72b2:	str.w	r6, [r3, #3480]	; 0xd98
      _s = s;
    72b6:	mov.w	r6, #91	; 0x5b
    72ba:	strb.w	r6, [r3, #3484]	; 0xd9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72be:	movs	r6, #140	; 0x8c
    72c0:	str.w	r6, [r3, #3488]	; 0xda0
      _s = s;
    72c4:	mov.w	r6, #112	; 0x70
    72c8:	strb.w	r6, [r3, #3492]	; 0xda4
      _b = b;
    72cc:	mvn.w	r6, #27
    72d0:	strb.w	r6, [r3, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72d4:	movs	r6, #102	; 0x66
    72d6:	str.w	r6, [r3, #3496]	; 0xda8
      _s = s;
    72da:	mvn.w	r6, #90	; 0x5a
    72de:	strb.w	r6, [r3, #3500]	; 0xdac
      _b = b;
    72e2:	mvn.w	r6, #21
    72e6:	strb.w	r6, [r3, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72ea:	movs	r6, #166	; 0xa6
    72ec:	str.w	r6, [r3, #3504]	; 0xdb0
      _s = s;
    72f0:	mvn.w	r6, #66	; 0x42
    72f4:	strb.w	r6, [r3, #3508]	; 0xdb4
      _b = b;
    72f8:	mvn.w	r6, #25
    72fc:	strb.w	r6, [r3, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7300:	movs	r6, #143	; 0x8f
    7302:	str.w	r6, [r3, #3512]	; 0xdb8
      _s = s;
    7306:	mvn.w	r6, #59	; 0x3b
    730a:	strb.w	r6, [r3, #3516]	; 0xdbc
      _b = b;
    730e:	mvn.w	r6, #40	; 0x28
    7312:	strb.w	r6, [r3, #3517]	; 0xdbd
    7316:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    731a:	strb.w	r1, [r3, #3524]	; 0xdc4
    731e:	mov.w	r1, #4294967295
      _b = b;
    7322:	strb.w	r6, [r3, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7326:	movs	r6, #171	; 0xab
      _s = s;
    7328:	strb.w	r1, [r3, #3532]	; 0xdcc
    732c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7330:	str.w	r6, [r3, #3528]	; 0xdc8
      _s = s;
      _b = b;
    7334:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7338:	strb.w	r1, [r3, #3540]	; 0xdd4
    733c:	mov.w	r1, #4294967295
      _b = b;
    7340:	strb.w	r6, [r3, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7344:	movs	r6, #168	; 0xa8
      _s = s;
    7346:	strb.w	r1, [r3, #3548]	; 0xddc
    734a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    734e:	str.w	r6, [r3, #3536]	; 0xdd0
    7352:	movs	r6, #135	; 0x87
      _s = s;
    7354:	strb.w	r1, [r3, #3556]	; 0xde4
    7358:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    735c:	str.w	r6, [r3, #3544]	; 0xdd8
    7360:	movs	r6, #143	; 0x8f
      _s = s;
    7362:	strb.w	r1, [r3, #3564]	; 0xdec
    7366:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    736a:	str.w	r6, [r3, #3552]	; 0xde0
    736e:	movs	r6, #150	; 0x96
      _s = s;
    7370:	strb.w	r1, [r3, #3580]	; 0xdfc
    7374:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7378:	str.w	r6, [r3, #3560]	; 0xde8
      _s = s;
      _b = b;
    737c:	mov.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7380:	str.w	r7, [r3, #3520]	; 0xdc0
      _s = s;
      _b = b;
    7384:	strb.w	r6, [r3, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7388:	movs	r6, #155	; 0x9b
      _s = s;
    738a:	strb.w	lr, [r3, #3572]	; 0xdf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    738e:	str.w	r6, [r3, #3568]	; 0xdf0
      _s = s;
      _b = b;
    7392:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7396:	strb.w	r1, [r3, #3588]	; 0xe04
    739a:	mov.w	r1, #4294967295
      _b = b;
    739e:	strb.w	r6, [r3, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73a2:	movs	r6, #167	; 0xa7
      _s = s;
      _b = b;
    73a4:	strb.w	r5, [r3, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73a8:	str.w	r6, [r3, #3576]	; 0xdf8
      _s = s;
      _b = b;
    73ac:	mvn.w	r6, #36	; 0x24
    73b0:	strb.w	r5, [r3, #3549]	; 0xddd
    73b4:	strb.w	r6, [r3, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73b8:	movs	r6, #164	; 0xa4
    73ba:	str.w	r6, [r3, #3584]	; 0xe00
      _s = s;
      _b = b;
    73be:	mvn.w	r6, #49	; 0x31
    73c2:	strb.w	r6, [r3, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73c6:	mvn.w	r6, #78	; 0x4e
    73ca:	strb.w	r6, [r3, #3596]	; 0xe0c
      _b = b;
    73ce:	mvn.w	r6, #29
    73d2:	strb.w	r6, [r3, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d6:	movs	r6, #95	; 0x5f
    73d8:	str.w	r6, [r3, #3600]	; 0xe10
      _s = s;
    73dc:	mvn.w	r6, #31
    73e0:	strb.w	r6, [r3, #3604]	; 0xe14
      _b = b;
    73e4:	mov.w	r6, #13
    73e8:	strb.w	r6, [r3, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73ec:	movs	r6, #113	; 0x71
    73ee:	str.w	r6, [r3, #3592]	; 0xe08
      _s = s;
      _b = b;
    73f2:	mvn.w	r6, #48	; 0x30
    73f6:	strb.w	r6, [r3, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73fa:	movs	r6, #94	; 0x5e
      _s = s;
    73fc:	strb.w	r1, [r3, #3612]	; 0xe1c
    7400:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7404:	str.w	r6, [r3, #3608]	; 0xe18
      _s = s;
      _b = b;
    7408:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    740c:	strb.w	r1, [r3, #3628]	; 0xe2c
    7410:	mov.w	r1, #4294967295
      _b = b;
    7414:	strb.w	r6, [r3, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7418:	movs	r6, #133	; 0x85
      _s = s;
    741a:	strb.w	r1, [r3, #3652]	; 0xe44
    741e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7422:	str.w	r6, [r3, #3616]	; 0xe20
      _s = s;
    7426:	mvn.w	r6, #55	; 0x37
    742a:	strb.w	r1, [r3, #3660]	; 0xe4c
    742e:	mov.w	r1, #4294967295
    7432:	strb.w	r6, [r3, #3620]	; 0xe24
      _b = b;
    7436:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    743a:	strb.w	r1, [r3, #3668]	; 0xe54
    743e:	mvn.w	r1, #2
      _b = b;
    7442:	strb.w	r6, [r3, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7446:	movs	r6, #130	; 0x82
    7448:	str.w	r6, [r3, #3624]	; 0xe28
      _s = s;
      _b = b;
    744c:	mvn.w	r6, #74	; 0x4a
    7450:	strb.w	r6, [r3, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7454:	movs	r6, #135	; 0x87
    7456:	str.w	r6, [r3, #3632]	; 0xe30
      _s = s;
    745a:	mvn.w	r6, #8
    745e:	strb.w	r6, [r3, #3636]	; 0xe34
      _b = b;
    7462:	mvn.w	r6, #53	; 0x35
    7466:	strb.w	r6, [r3, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    746a:	movs	r6, #125	; 0x7d
    746c:	str.w	r6, [r3, #3640]	; 0xe38
      _s = s;
    7470:	mvn.w	r6, #117	; 0x75
    7474:	strb.w	r6, [r3, #3644]	; 0xe3c
      _b = b;
    7478:	mov.w	r6, #127	; 0x7f
    747c:	strb.w	r6, [r3, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7480:	movs	r6, #179	; 0xb3
    7482:	str.w	r6, [r3, #3648]	; 0xe40
      _s = s;
      _b = b;
    7486:	mov.w	r6, #120	; 0x78
    748a:	strb.w	r6, [r3, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    748e:	movs	r6, #179	; 0xb3
    7490:	str.w	r6, [r3, #3656]	; 0xe48
      _s = s;
      _b = b;
    7494:	mov.w	r6, #118	; 0x76
    7498:	strb.w	r6, [r3, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    749c:	movs	r6, #180	; 0xb4
    749e:	str.w	r6, [r3, #3664]	; 0xe50
      _s = s;
      _b = b;
    74a2:	mov.w	r6, #116	; 0x74
    74a6:	strb.w	r6, [r3, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74aa:	movs	r6, #173	; 0xad
    74ac:	str.w	r6, [r3, #3672]	; 0xe58
      _s = s;
    74b0:	mov.w	r6, #83	; 0x53
    74b4:	strb.w	r6, [r3, #3676]	; 0xe5c
      _b = b;
    74b8:	mvn.w	r6, #65	; 0x41
    74bc:	strb.w	r6, [r3, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74c0:	movs	r6, #163	; 0xa3
    74c2:	str.w	r6, [r3, #3680]	; 0xe60
      _s = s;
    74c6:	mvn.w	r6, #103	; 0x67
    74ca:	strb.w	r6, [r3, #3684]	; 0xe64
      _b = b;
    74ce:	mvn.w	r6, #23
    74d2:	strb.w	r6, [r3, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74d6:	movs	r6, #158	; 0x9e
    74d8:	str.w	r6, [r3, #3688]	; 0xe68
      _s = s;
    74dc:	mvn.w	r6, #108	; 0x6c
    74e0:	strb.w	r6, [r3, #3692]	; 0xe6c
      _b = b;
    74e4:	mvn.w	r6, #17
    74e8:	strb.w	r6, [r3, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74ec:	movs	r6, #173	; 0xad
      _s = s;
    74ee:	strb.w	r1, [r3, #3700]	; 0xe74
    74f2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74f6:	str.w	r6, [r3, #3696]	; 0xe70
    74fa:	movs	r6, #167	; 0xa7
      _s = s;
    74fc:	strb.w	r1, [r3, #3708]	; 0xe7c
    7500:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7504:	str.w	r6, [r3, #3704]	; 0xe78
      _s = s;
      _b = b;
    7508:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    750c:	strb.w	r1, [r3, #3716]	; 0xe84
    7510:	mov.w	r1, #4294967295
      _b = b;
    7514:	strb.w	r6, [r3, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7518:	movs	r6, #162	; 0xa2
      _s = s;
    751a:	strb.w	r1, [r3, #3724]	; 0xe8c
    751e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7522:	str.w	r6, [r3, #3712]	; 0xe80
      _s = s;
      _b = b;
    7526:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    752a:	strb.w	r1, [r3, #3732]	; 0xe94
      _b = b;
    752e:	strb.w	r6, [r3, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7532:	movs	r6, #173	; 0xad
      _s = s;
    7534:	strb.w	r1, [r3, #3740]	; 0xe9c
    7538:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    753c:	str.w	r6, [r3, #3720]	; 0xe88
      _s = s;
      _b = b;
    7540:	mov.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7544:	strb.w	r1, [r3, #3756]	; 0xeac
    7548:	mov.w	r1, #4294967295
      _b = b;
    754c:	strb.w	r6, [r3, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7550:	movs	r6, #174	; 0xae
      _s = s;
    7552:	strb.w	r1, [r3, #3764]	; 0xeb4
    7556:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    755a:	str.w	r6, [r3, #3728]	; 0xe90
      _s = s;
      _b = b;
    755e:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7562:	str.w	r8, [r3, #3736]	; 0xe98
      _s = s;
      _b = b;
    7566:	strb.w	r6, [r3, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    756a:	movs	r6, #159	; 0x9f
      _s = s;
    756c:	strb.w	r1, [r3, #3772]	; 0xebc
    7570:	mvn.w	r1, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7574:	str.w	r6, [r3, #3744]	; 0xea0
      _s = s;
      _b = b;
    7578:	mov.w	r6, #71	; 0x47
    757c:	strb.w	sl, [r3, #3701]	; 0xe75
    7580:	strb.w	r6, [r3, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7584:	movs	r6, #153	; 0x99
      _s = s;
    7586:	strb.w	fp, [r3, #3748]	; 0xea4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    758a:	str.w	r6, [r3, #3752]	; 0xea8
      _s = s;
      _b = b;
    758e:	mov.w	r6, #81	; 0x51
    7592:	strb.w	r6, [r3, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7596:	movs	r6, #164	; 0xa4
    7598:	str.w	r6, [r3, #3760]	; 0xeb0
      _s = s;
      _b = b;
    759c:	mvn.w	r6, #53	; 0x35
    75a0:	strb.w	r6, [r3, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75a4:	movs	r6, #167	; 0xa7
    75a6:	str.w	r6, [r3, #3768]	; 0xeb8
      _s = s;
      _b = b;
    75aa:	mvn.w	r6, #32
    75ae:	strb.w	r6, [r3, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75b2:	movs	r6, #161	; 0xa1
    75b4:	str.w	r6, [r3, #3776]	; 0xec0
      _s = s;
    75b8:	mvn.w	r6, #56	; 0x38
    75bc:	strb.w	r6, [r3, #3780]	; 0xec4
      _b = b;
    75c0:	mov.w	r6, #10
    75c4:	strb.w	r6, [r3, #3733]	; 0xe95
    75c8:	mvn.w	r6, #36	; 0x24
    75cc:	strb.w	r6, [r3, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75d0:	mov.w	r6, #85	; 0x55
    75d4:	strb.w	r1, [r3, #3804]	; 0xedc
    75d8:	mov.w	r1, #4294967295
    75dc:	strb.w	r6, [r3, #3868]	; 0xf1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75e0:	movs	r6, #135	; 0x87
      _s = s;
    75e2:	strb.w	r1, [r3, #3828]	; 0xef4
    75e6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75ea:	str.w	r6, [r3, #3784]	; 0xec8
      _s = s;
    75ee:	mov.w	r6, #120	; 0x78
    75f2:	strb.w	r1, [r3, #3844]	; 0xf04
    75f6:	mvn.w	r1, #2
    75fa:	strb.w	r6, [r3, #3788]	; 0xecc
      _b = b;
    75fe:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7602:	strb.w	r1, [r3, #3852]	; 0xf0c
    7606:	mvn.w	r1, #2
      _b = b;
    760a:	strb.w	r6, [r3, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    760e:	movs	r6, #73	; 0x49
      _s = s;
    7610:	strb.w	r1, [r3, #3860]	; 0xf14
    7614:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7618:	str.w	r6, [r3, #3792]	; 0xed0
      _s = s;
    761c:	mvn.w	r6, #84	; 0x54
      _b = b;
    7620:	strb.w	sl, [r3, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7624:	strb.w	r6, [r3, #3796]	; 0xed4
      _b = b;
    7628:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    762c:	str.w	r5, [r3, #3832]	; 0xef8
      _s = s;
      _b = b;
    7630:	strb.w	r6, [r3, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7634:	movs	r6, #76	; 0x4c
      _s = s;
    7636:	strb.w	r5, [r3, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    763a:	str.w	r6, [r3, #3800]	; 0xed8
      _s = s;
      _b = b;
    763e:	mvn.w	r6, #42	; 0x2a
    7642:	strb.w	r5, [r3, #3837]	; 0xefd
    7646:	strb.w	r6, [r3, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    764a:	movs	r6, #112	; 0x70
    764c:	str.w	r6, [r3, #3808]	; 0xee0
      _s = s;
    7650:	mvn.w	r6, #36	; 0x24
    7654:	strb.w	r6, [r3, #3812]	; 0xee4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7658:	movs	r6, #136	; 0x88
    765a:	str.w	r6, [r3, #3816]	; 0xee8
      _s = s;
    765e:	mvn.w	r6, #49	; 0x31
    7662:	strb.w	r6, [r3, #3820]	; 0xeec
      _b = b;
    7666:	mvn.w	r6, #108	; 0x6c
    766a:	strb.w	r6, [r3, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    766e:	movs	r6, #144	; 0x90
    7670:	str.w	r6, [r3, #3824]	; 0xef0
      _s = s;
      _b = b;
    7674:	mvn.w	r6, #95	; 0x5f
    7678:	strb.w	r6, [r3, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    767c:	movs	r6, #185	; 0xb9
    767e:	str.w	r6, [r3, #3840]	; 0xf00
      _s = s;
      _b = b;
    7682:	mov.w	r6, #94	; 0x5e
    7686:	strb.w	r6, [r3, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    768a:	movs	r6, #182	; 0xb6
    768c:	str.w	r6, [r3, #3848]	; 0xf08
      _s = s;
      _b = b;
    7690:	mvn.w	r6, #111	; 0x6f
    7694:	strb.w	r6, [r3, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7698:	movs	r6, #182	; 0xb6
    769a:	str.w	r6, [r3, #3856]	; 0xf10
      _s = s;
      _b = b;
    769e:	mvn.w	r6, #127	; 0x7f
    76a2:	strb.w	r6, [r3, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76a6:	movs	r6, #170	; 0xaa
    76a8:	str.w	r6, [r3, #3864]	; 0xf18
    76ac:	movs	r6, #172	; 0xac
      _s = s;
      _b = b;
    76ae:	strb.w	r8, [r3, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76b2:	str.w	r6, [r3, #3872]	; 0xf20
      _s = s;
    76b6:	mvn.w	r6, #76	; 0x4c
    76ba:	strb.w	r1, [r3, #3884]	; 0xf2c
    76be:	mov.w	r1, #4294967295
    76c2:	strb.w	r6, [r3, #3876]	; 0xf24
      _b = b;
    76c6:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76ca:	strb.w	r1, [r3, #3892]	; 0xf34
      _b = b;
    76ce:	strb.w	r6, [r3, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76d2:	movs	r6, #173	; 0xad
      _s = s;
    76d4:	strb.w	r1, [r3, #3900]	; 0xf3c
    76d8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76dc:	str.w	r6, [r3, #3880]	; 0xf28
      _s = s;
      _b = b;
    76e0:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76e4:	strb.w	r1, [r3, #3908]	; 0xf44
    76e8:	mvn.w	r1, #2
      _b = b;
    76ec:	strb.w	r6, [r3, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76f0:	movs	r6, #174	; 0xae
      _s = s;
    76f2:	strb.w	r1, [r3, #3916]	; 0xf4c
    76f6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76fa:	str.w	r6, [r3, #3888]	; 0xf30
      _s = s;
      _b = b;
    76fe:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7702:	strb.w	r1, [r3, #3924]	; 0xf54
    7706:	mov.w	r1, #4294967295
      _b = b;
    770a:	strb.w	r6, [r3, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    770e:	movs	r6, #174	; 0xae
      _s = s;
    7710:	strb.w	r1, [r3, #3932]	; 0xf5c
    7714:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7718:	str.w	r6, [r3, #3904]	; 0xf40
      _s = s;
      _b = b;
    771c:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7720:	strb.w	r1, [r3, #3940]	; 0xf64
    7724:	mov.w	r1, #4294967295
      _b = b;
    7728:	strb.w	r6, [r3, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    772c:	movs	r6, #173	; 0xad
      _s = s;
    772e:	strb.w	r1, [r3, #3948]	; 0xf6c
    7732:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7736:	str.w	r6, [r3, #3912]	; 0xf48
      _s = s;
      _b = b;
    773a:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    773e:	str.w	r8, [r3, #3896]	; 0xf38
      _s = s;
      _b = b;
    7742:	strb.w	r6, [r3, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7746:	movs	r6, #185	; 0xb9
      _s = s;
    7748:	strb.w	r1, [r3, #3956]	; 0xf74
    774c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7750:	str.w	r6, [r3, #3920]	; 0xf50
    7754:	movs	r6, #169	; 0xa9
      _s = s;
      _b = b;
    7756:	strb.w	sl, [r3, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    775a:	str.w	r6, [r3, #3928]	; 0xf58
      _s = s;
      _b = b;
    775e:	mvn.w	r6, #118	; 0x76
    7762:	strb.w	r6, [r3, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7766:	movs	r6, #171	; 0xab
    7768:	str.w	r6, [r3, #3936]	; 0xf60
      _s = s;
      _b = b;
    776c:	mvn.w	r6, #120	; 0x78
    7770:	strb.w	r6, [r3, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7774:	movs	r6, #161	; 0xa1
    7776:	str.w	r6, [r3, #3944]	; 0xf68
      _s = s;
      _b = b;
    777a:	mvn.w	r6, #90	; 0x5a
    777e:	strb.w	r6, [r3, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7782:	movs	r6, #164	; 0xa4
    7784:	str.w	r6, [r3, #3952]	; 0xf70
      _s = s;
      _b = b;
    7788:	mov.w	r6, #53	; 0x35
    778c:	strb.w	r6, [r3, #3925]	; 0xf55
    7790:	mvn.w	r6, #25
    7794:	strb.w	r6, [r3, #3957]	; 0xf75
    7798:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    779c:	strb.w	r1, [r3, #3964]	; 0xf7c
    77a0:	mov.w	r1, #4294967295
      _b = b;
    77a4:	strb.w	r6, [r3, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77a8:	movs	r6, #166	; 0xa6
      _s = s;
    77aa:	strb.w	r1, [r3, #4020]	; 0xfb4
    77ae:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77b2:	str.w	r6, [r3, #3960]	; 0xf78
      _s = s;
      _b = b;
    77b6:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77ba:	strb.w	r1, [r3, #4036]	; 0xfc4
    77be:	mvn.w	r1, #2
      _b = b;
    77c2:	strb.w	r6, [r3, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77c6:	movs	r6, #162	; 0xa2
      _s = s;
    77c8:	strb.w	r1, [r3, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77cc:	movs	r1, #174	; 0xae
    77ce:	str.w	r6, [r3, #3968]	; 0xf80
      _s = s;
    77d2:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77d6:	str.w	r5, [r3, #4024]	; 0xfb8
      _s = s;
    77da:	strb.w	r6, [r3, #3972]	; 0xf84
      _b = b;
    77de:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77e2:	strb.w	r5, [r3, #4028]	; 0xfbc
      _b = b;
    77e6:	strb.w	r6, [r3, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77ea:	movs	r6, #160	; 0xa0
      _s = s;
      _b = b;
    77ec:	strb.w	r5, [r3, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77f0:	str.w	r6, [r3, #3976]	; 0xf88
      _s = s;
    77f4:	mvn.w	r6, #90	; 0x5a
    77f8:	strb.w	r6, [r3, #3980]	; 0xf8c
      _b = b;
    77fc:	mvn.w	r6, #29
    7800:	strb.w	r6, [r3, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7804:	movs	r6, #88	; 0x58
    7806:	str.w	r6, [r3, #3984]	; 0xf90
      _s = s;
    780a:	mvn.w	r6, #32
    780e:	strb.w	r6, [r3, #3988]	; 0xf94
      _b = b;
    7812:	mvn.w	r6, #47	; 0x2f
    7816:	strb.w	r6, [r3, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    781a:	movs	r6, #81	; 0x51
    781c:	str.w	r6, [r3, #3992]	; 0xf98
      _s = s;
    7820:	mvn.w	r6, #23
    7824:	strb.w	r6, [r3, #3996]	; 0xf9c
      _b = b;
    7828:	mvn.w	r6, #87	; 0x57
    782c:	strb.w	r6, [r3, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7830:	movs	r6, #97	; 0x61
    7832:	str.w	r6, [r3, #4000]	; 0xfa0
      _s = s;
    7836:	mvn.w	r6, #11
    783a:	strb.w	r6, [r3, #4004]	; 0xfa4
      _b = b;
    783e:	mvn.w	r6, #40	; 0x28
    7842:	strb.w	r6, [r3, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7846:	movs	r6, #111	; 0x6f
    7848:	str.w	r6, [r3, #4008]	; 0xfa8
      _s = s;
    784c:	mvn.w	r6, #51	; 0x33
    7850:	strb.w	r6, [r3, #4012]	; 0xfac
      _b = b;
    7854:	mvn.w	r6, #52	; 0x34
    7858:	strb.w	r6, [r3, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    785c:	movs	r6, #126	; 0x7e
    785e:	str.w	r6, [r3, #4016]	; 0xfb0
      _s = s;
      _b = b;
    7862:	mov.w	r6, #70	; 0x46
    7866:	strb.w	r6, [r3, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    786a:	movs	r6, #183	; 0xb7
    786c:	str.w	r6, [r3, #4032]	; 0xfc0
    7870:	movs	r6, #180	; 0xb4
    7872:	str.w	r6, [r3, #4040]	; 0xfc8
      _s = s;
      _b = b;
    7876:	mvn.w	r6, #108	; 0x6c
    787a:	strb.w	r6, [r3, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    787e:	movs	r6, #180	; 0xb4
    7880:	str.w	r1, [r2], #32
    7884:	movs	r1, #171	; 0xab
    7886:	str.w	r6, [r3, #4048]	; 0xfd0
    788a:	str	r1, [r2, #0]
      _s = s;
    788c:	mov.w	r2, #4294967295
    7890:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7894:	str.w	r6, [r3, #4056]	; 0xfd8
      _s = s;
    7898:	strb.w	r2, [r3, #4052]	; 0xfd4
      _b = b;
    789c:	mvn.w	r2, #105	; 0x69
    78a0:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78a4:	str.w	r8, [r3, #4088]	; 0xff8
      _s = s;
      _b = b;
    78a8:	strb.w	r2, [r3, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78ac:	mvn.w	r2, #2
    78b0:	strb.w	r2, [r3, #4060]	; 0xfdc
      _b = b;
    78b4:	mvn.w	r2, #124	; 0x7c
    78b8:	strb.w	r2, [r3, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78bc:	movs	r2, #170	; 0xaa
    78be:	str.w	r2, [r3, #4064]	; 0xfe0
      _s = s;
    78c2:	mov.w	r2, #124	; 0x7c
    78c6:	strb.w	r2, [r3, #4068]	; 0xfe4
      _b = b;
    78ca:	mvn.w	r2, #50	; 0x32
    78ce:	strb.w	r2, [r3, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78d2:	movs	r2, #173	; 0xad
    78d4:	str.w	r2, [r3, #4072]	; 0xfe8
      _s = s;
    78d8:	mvn.w	r2, #2
    78dc:	strb.w	r2, [r3, #4076]	; 0xfec
      _b = b;
    78e0:	mvn.w	r2, #21
    78e4:	strb.w	r2, [r3, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78e8:	movs	r2, #174	; 0xae
    78ea:	str.w	r2, [r3, #4080]	; 0xff0
      _s = s;
    78ee:	mov.w	r2, #4294967295
    78f2:	strb.w	r2, [r3, #4084]	; 0xff4
      _b = b;
    78f6:	mvn.w	r2, #33	; 0x21
    78fa:	strb.w	r2, [r3, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78fe:	mov.w	r2, #4294967295
    7902:	strb.w	r2, [r3, #4092]	; 0xffc
      _b = b;
    7906:	mvn.w	r2, #81	; 0x51
    790a:	strb.w	r2, [r3, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    790e:	movw	r2, #4104	; 0x1008
    7912:	str.w	r8, [r3, r2]
      _s = s;
    7916:	movw	r2, #4100	; 0x1004
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    791a:	mov.w	r8, #6
      _s = s;
    791e:	strb	r1, [r3, r2]
      _b = b;
    7920:	movw	r2, #4101	; 0x1005
    7924:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7926:	movw	r2, #4108	; 0x100c
      _b = b;
    792a:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    792e:	strb	r1, [r3, r2]
      _b = b;
    7930:	movw	r2, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7934:	movs	r1, #177	; 0xb1
      _s = s;
      _b = b;
    7936:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7938:	movw	r2, #4112	; 0x1010
      _s = s;
      _b = b;
    793c:	mov.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7940:	str	r1, [r3, r2]
      _s = s;
    7942:	movw	r2, #4116	; 0x1014
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7946:	movs	r1, #172	; 0xac
      _s = s;
    7948:	strb.w	lr, [r3, r2]
      _b = b;
    794c:	movw	r2, #4117	; 0x1015
    7950:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7952:	movw	r2, #4120	; 0x1018
      _s = s;
      _b = b;
    7956:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    795a:	str	r1, [r3, r2]
      _s = s;
    795c:	mvn.w	r1, #2
    7960:	movw	r2, #4124	; 0x101c
    7964:	strb	r1, [r3, r2]
      _b = b;
    7966:	movw	r2, #4125	; 0x101d
    796a:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    796e:	movw	r2, #4132	; 0x1024
    7972:	strb	r1, [r3, r2]
      _b = b;
    7974:	movw	r2, #4133	; 0x1025
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7978:	add.w	r1, r3, #4096	; 0x1000
      _s = s;
      _b = b;
    797c:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    797e:	movs	r2, #165	; 0xa5
    7980:	movw	r6, #4176	; 0x1050
    7984:	str	r2, [r1, #64]	; 0x40
    7986:	mov	r2, r1
    7988:	movs	r1, #110	; 0x6e
    798a:	str	r1, [r2, #96]	; 0x60
    798c:	movs	r2, #78	; 0x4e
      _s = s;
    798e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7992:	str	r2, [r3, r6]
    7994:	movw	r6, #4200	; 0x1068
    7998:	movs	r2, #82	; 0x52
    799a:	str	r2, [r3, r6]
    799c:	movw	r6, #4136	; 0x1028
    79a0:	movs	r2, #161	; 0xa1
    79a2:	str	r2, [r3, r6]
      _s = s;
    79a4:	movw	r2, #4140	; 0x102c
      _b = b;
    79a8:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79ac:	strb	r1, [r3, r2]
      _b = b;
    79ae:	movw	r2, #4141	; 0x102d
    79b2:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79b4:	movw	r6, #4144	; 0x1030
    79b8:	movs	r2, #153	; 0x99
    79ba:	str	r2, [r3, r6]
      _s = s;
    79bc:	movw	r2, #4148	; 0x1034
    79c0:	mvn.w	r6, #42	; 0x2a
    79c4:	strb	r6, [r3, r2]
      _b = b;
    79c6:	movw	r2, #4149	; 0x1035
    79ca:	mvn.w	r6, #21
    79ce:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79d0:	movw	r6, #4152	; 0x1038
    79d4:	movs	r2, #164	; 0xa4
    79d6:	str	r2, [r3, r6]
      _s = s;
    79d8:	movw	r2, #4156	; 0x103c
      _b = b;
    79dc:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79e0:	strb	r1, [r3, r2]
      _b = b;
    79e2:	movw	r2, #4157	; 0x103d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79e6:	mvn.w	r1, #2
      _b = b;
    79ea:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79ec:	movw	r2, #4164	; 0x1044
    79f0:	mvn.w	r6, #91	; 0x5b
    79f4:	strb	r1, [r3, r2]
      _b = b;
    79f6:	movw	r2, #4165	; 0x1045
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79fa:	movs	r1, #182	; 0xb6
      _s = s;
      _b = b;
    79fc:	strb	r0, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79fe:	movw	r2, #4168	; 0x1048
    7a02:	str.w	ip, [r3, r2]
      _s = s;
    7a06:	movw	r2, #4172	; 0x104c
    7a0a:	strb	r6, [r3, r2]
      _b = b;
    7a0c:	movw	r2, #4173	; 0x104d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a10:	mvn.w	r6, #54	; 0x36
      _b = b;
    7a14:	strb.w	sl, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a18:	movw	r2, #4180	; 0x1054
    7a1c:	strb	r6, [r3, r2]
      _b = b;
    7a1e:	movw	r2, #4181	; 0x1055
    7a22:	mvn.w	r6, #47	; 0x2f
    7a26:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a28:	movw	r6, #4184	; 0x1058
    7a2c:	movs	r2, #98	; 0x62
    7a2e:	str	r2, [r3, r6]
      _s = s;
    7a30:	movw	r2, #4188	; 0x105c
    7a34:	mvn.w	r6, #56	; 0x38
    7a38:	strb	r6, [r3, r2]
      _b = b;
    7a3a:	movw	r2, #4189	; 0x105d
    7a3e:	mvn.w	r6, #53	; 0x35
    7a42:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a44:	movw	r2, #4196	; 0x1064
    7a48:	mvn.w	r6, #14
    7a4c:	strb	r6, [r3, r2]
      _b = b;
    7a4e:	movw	r2, #4197	; 0x1065
    7a52:	mvn.w	r6, #50	; 0x32
    7a56:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a58:	movw	r2, #4204	; 0x106c
      _b = b;
    7a5c:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a60:	strb.w	lr, [r3, r2]
      _b = b;
    7a64:	movw	r2, #4205	; 0x106d
    7a68:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a6a:	movw	r2, #4208	; 0x1070
      _s = s;
      _b = b;
    7a6e:	mov.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a72:	str	r5, [r3, r2]
      _s = s;
    7a74:	movw	r2, #4212	; 0x1074
    7a78:	strb	r5, [r3, r2]
      _b = b;
    7a7a:	movw	r2, #4213	; 0x1075
    7a7e:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a80:	movw	r2, #4216	; 0x1078
    7a84:	str	r5, [r3, r2]
      _s = s;
    7a86:	movw	r2, #4220	; 0x107c
    7a8a:	strb	r5, [r3, r2]
      _b = b;
    7a8c:	movw	r2, #4221	; 0x107d
    7a90:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a92:	add.w	r2, r3, #4224	; 0x1080
    7a96:	str	r1, [r2, #32]
    7a98:	movs	r1, #170	; 0xaa
    7a9a:	str	r5, [r2, #0]
    7a9c:	add.w	r2, r3, #4096	; 0x1000
    7aa0:	str.w	r1, [r2, #192]	; 0xc0
      _s = s;
      _b = b;
    7aa4:	movw	r2, #4237	; 0x108d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7aa8:	mov.w	r1, #4294967295
      _b = b;
    7aac:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7aae:	movw	r2, #4228	; 0x1084
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ab2:	movw	r6, #4232	; 0x1088
      _s = s;
    7ab6:	strb	r5, [r3, r2]
      _b = b;
    7ab8:	movw	r2, #4229	; 0x1085
    7abc:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7abe:	movs	r2, #178	; 0xb2
    7ac0:	str	r2, [r3, r6]
      _s = s;
    7ac2:	movw	r2, #4236	; 0x108c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ac6:	movw	r6, #4240	; 0x1090
      _s = s;
    7aca:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7acc:	movs	r2, #178	; 0xb2
    7ace:	str	r2, [r3, r6]
      _s = s;
    7ad0:	movw	r2, #4244	; 0x1094
      _b = b;
    7ad4:	mvn.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ad8:	strb	r1, [r3, r2]
      _b = b;
    7ada:	movw	r2, #4245	; 0x1095
    7ade:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ae0:	movw	r6, #4248	; 0x1098
    7ae4:	movs	r2, #179	; 0xb3
    7ae6:	str	r2, [r3, r6]
      _s = s;
    7ae8:	movw	r2, #4252	; 0x109c
      _b = b;
    7aec:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7af0:	strb	r1, [r3, r2]
      _b = b;
    7af2:	movw	r2, #4253	; 0x109d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7af6:	mvn.w	r1, #2
      _b = b;
    7afa:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7afc:	movw	r2, #4260	; 0x10a4
      _b = b;
    7b00:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b04:	strb	r1, [r3, r2]
      _b = b;
    7b06:	movw	r2, #4261	; 0x10a5
    7b0a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b0c:	movw	r6, #4264	; 0x10a8
    7b10:	movs	r2, #176	; 0xb0
    7b12:	str	r2, [r3, r6]
      _s = s;
    7b14:	movw	r2, #4268	; 0x10ac
      _b = b;
    7b18:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b1c:	strb	r1, [r3, r2]
      _b = b;
    7b1e:	movw	r2, #4269	; 0x10ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b22:	mov.w	r1, #4294967295
      _b = b;
    7b26:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b28:	movw	r6, #4272	; 0x10b0
    7b2c:	movs	r2, #176	; 0xb0
    7b2e:	str	r2, [r3, r6]
      _s = s;
    7b30:	movw	r2, #4276	; 0x10b4
      _b = b;
    7b34:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b38:	strb	r1, [r3, r2]
      _b = b;
    7b3a:	movw	r2, #4277	; 0x10b5
    7b3e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b40:	movw	r6, #4280	; 0x10b8
    7b44:	movs	r2, #178	; 0xb2
    7b46:	str	r2, [r3, r6]
      _s = s;
    7b48:	movw	r2, #4284	; 0x10bc
      _b = b;
    7b4c:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b50:	strb	r1, [r3, r2]
      _b = b;
    7b52:	movw	r2, #4285	; 0x10bd
    7b56:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b58:	movw	r2, #4292	; 0x10c4
      _b = b;
    7b5c:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b60:	strb	r1, [r3, r2]
      _b = b;
    7b62:	movw	r2, #4293	; 0x10c5
    7b66:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b68:	movw	r6, #4296	; 0x10c8
    7b6c:	movs	r2, #171	; 0xab
    7b6e:	str	r2, [r3, r6]
      _s = s;
    7b70:	movw	r2, #4300	; 0x10cc
    7b74:	mvn.w	r6, #47	; 0x2f
    7b78:	strb	r6, [r3, r2]
      _b = b;
    7b7a:	movw	r2, #4301	; 0x10cd
    7b7e:	mvn.w	r6, #29
    7b82:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b84:	movw	r6, #4304	; 0x10d0
    7b88:	movs	r2, #173	; 0xad
    7b8a:	str	r2, [r3, r6]
      _s = s;
    7b8c:	movw	r2, #4308	; 0x10d4
      _b = b;
    7b90:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b94:	strb	r1, [r3, r2]
      _b = b;
    7b96:	movw	r2, #4309	; 0x10d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b9a:	movs	r1, #161	; 0xa1
      _s = s;
      _b = b;
    7b9c:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b9e:	add.w	r2, r3, #4384	; 0x1120
      _s = s;
      _b = b;
    7ba2:	mov.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ba6:	str.w	r1, [r2, #-64]
    7baa:	movs	r1, #157	; 0x9d
    7bac:	str	r5, [r2, #0]
    7bae:	add.w	r2, r3, #4096	; 0x1000
    7bb2:	str.w	r1, [r2, #256]	; 0x100
      _s = s;
      _b = b;
    7bb6:	movw	r2, #4317	; 0x10dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bba:	add.w	r1, r3, #4448	; 0x1160
      _s = s;
      _b = b;
    7bbe:	strb	r6, [r3, r2]
    7bc0:	movw	r2, #4381	; 0x111d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bc4:	movw	r6, #4312	; 0x10d8
      _s = s;
      _b = b;
    7bc8:	strb.w	ip, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bcc:	movs	r2, #171	; 0xab
    7bce:	mov.w	ip, #356	; 0x164
    7bd2:	str	r2, [r3, r6]
      _s = s;
    7bd4:	movw	r2, #4316	; 0x10dc
    7bd8:	mvn.w	r6, #35	; 0x23
    7bdc:	strb.w	lr, [r3, r2]
    7be0:	movw	r2, #4324	; 0x10e4
    7be4:	strb	r6, [r3, r2]
      _b = b;
    7be6:	movw	r2, #4325	; 0x10e5
    7bea:	mvn.w	r6, #108	; 0x6c
    7bee:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bf0:	movw	r6, #4328	; 0x10e8
    7bf4:	movs	r2, #150	; 0x96
    7bf6:	str	r2, [r3, r6]
      _s = s;
    7bf8:	movw	r2, #4332	; 0x10ec
    7bfc:	mvn.w	r6, #54	; 0x36
    7c00:	strb	r6, [r3, r2]
      _b = b;
    7c02:	movw	r2, #4333	; 0x10ed
    7c06:	mvn.w	r6, #64	; 0x40
    7c0a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c0c:	movw	r6, #4336	; 0x10f0
    7c10:	movs	r2, #143	; 0x8f
    7c12:	str	r2, [r3, r6]
      _s = s;
    7c14:	movw	r2, #4340	; 0x10f4
    7c18:	mvn.w	r6, #65	; 0x41
    7c1c:	strb	r6, [r3, r2]
      _b = b;
    7c1e:	movw	r2, #4341	; 0x10f5
    7c22:	mvn.w	r6, #31
    7c26:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c28:	movw	r6, #4344	; 0x10f8
    7c2c:	movs	r2, #133	; 0x85
    7c2e:	str	r2, [r3, r6]
      _s = s;
    7c30:	movw	r2, #4348	; 0x10fc
    7c34:	mvn.w	r6, #75	; 0x4b
    7c38:	strb	r6, [r3, r2]
      _b = b;
    7c3a:	movw	r2, #4349	; 0x10fd
    7c3e:	mvn.w	r6, #20
    7c42:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c44:	movw	r2, #4356	; 0x1104
    7c48:	mvn.w	r6, #29
    7c4c:	strb	r6, [r3, r2]
      _b = b;
    7c4e:	movw	r2, #4357	; 0x1105
    7c52:	mvn.w	r6, #34	; 0x22
    7c56:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c58:	movw	r6, #4360	; 0x1108
    7c5c:	movs	r2, #152	; 0x98
    7c5e:	str	r2, [r3, r6]
      _s = s;
    7c60:	mvn.w	r6, #27
    7c64:	movw	r2, #4364	; 0x110c
    7c68:	strb	r6, [r3, r2]
      _b = b;
    7c6a:	movw	r2, #4365	; 0x110d
    7c6e:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c70:	movw	r6, #4368	; 0x1110
    7c74:	movs	r2, #93	; 0x5d
    7c76:	str	r2, [r3, r6]
      _s = s;
    7c78:	movw	r2, #4372	; 0x1114
    7c7c:	mvn.w	r6, #52	; 0x34
    7c80:	strb	r6, [r3, r2]
      _b = b;
    7c82:	movw	r2, #4373	; 0x1115
    7c86:	mvn.w	r6, #44	; 0x2c
    7c8a:	strb	r6, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c8c:	movw	r6, #4376	; 0x1118
    7c90:	movs	r2, #112	; 0x70
    7c92:	str	r2, [r3, r6]
      _s = s;
    7c94:	mvn.w	r6, #88	; 0x58
    7c98:	movw	r2, #4380	; 0x111c
    7c9c:	strb	r6, [r3, r2]
    7c9e:	movw	r2, #4388	; 0x1124
    7ca2:	strb	r5, [r3, r2]
      _b = b;
    7ca4:	movw	r2, #4389	; 0x1125
    7ca8:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7caa:	movw	r2, #4392	; 0x1128
    7cae:	str	r5, [r3, r2]
      _s = s;
    7cb0:	movw	r2, #4396	; 0x112c
    7cb4:	strb	r5, [r3, r2]
      _b = b;
    7cb6:	movw	r2, #4397	; 0x112d
    7cba:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cbc:	add.w	r2, r3, #4416	; 0x1140
    7cc0:	str	r5, [r2, #0]
    7cc2:	movs	r2, #180	; 0xb4
    7cc4:	str.w	r2, [r1], #32
    7cc8:	movw	r2, #4400	; 0x1130
    7ccc:	str	r5, [r3, r2]
    7cce:	movs	r2, #167	; 0xa7
    7cd0:	str	r2, [r1, #0]
      _s = s;
    7cd2:	movw	r2, #4404	; 0x1134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cd6:	movw	r1, #4432	; 0x1150
      _s = s;
    7cda:	strb	r5, [r3, r2]
      _b = b;
    7cdc:	movw	r2, #4405	; 0x1135
    7ce0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce2:	movw	r2, #4408	; 0x1138
    7ce6:	str	r5, [r3, r2]
      _s = s;
    7ce8:	movw	r2, #4412	; 0x113c
    7cec:	strb	r5, [r3, r2]
      _b = b;
    7cee:	movw	r2, #4413	; 0x113d
    7cf2:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cf4:	movw	r2, #4420	; 0x1144
    7cf8:	strb	r5, [r3, r2]
      _b = b;
    7cfa:	movw	r2, #4421	; 0x1145
    7cfe:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d00:	movw	r2, #4424	; 0x1148
    7d04:	str	r5, [r3, r2]
      _s = s;
    7d06:	movw	r2, #4428	; 0x114c
    7d0a:	strb	r5, [r3, r2]
      _b = b;
    7d0c:	movw	r2, #4429	; 0x114d
    7d10:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d12:	movs	r2, #180	; 0xb4
    7d14:	str	r2, [r3, r1]
      _s = s;
    7d16:	movw	r2, #4436	; 0x1154
    7d1a:	mov.w	r1, #4294967295
    7d1e:	strb	r1, [r3, r2]
      _b = b;
    7d20:	movw	r2, #4437	; 0x1155
    7d24:	mov.w	r1, #48	; 0x30
    7d28:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d2a:	movw	r1, #4440	; 0x1158
    7d2e:	movs	r2, #177	; 0xb1
    7d30:	str	r2, [r3, r1]
      _s = s;
    7d32:	movw	r2, #4444	; 0x115c
    7d36:	mov.w	r1, #4294967295
    7d3a:	strb	r1, [r3, r2]
      _b = b;
    7d3c:	movw	r2, #4445	; 0x115d
    7d40:	mvn.w	r1, #120	; 0x78
    7d44:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d46:	movw	r2, #4452	; 0x1164
    7d4a:	mov.w	r1, #4294967295
    7d4e:	strb	r1, [r3, r2]
      _b = b;
    7d50:	movw	r2, #4453	; 0x1165
    7d54:	mvn.w	r1, #109	; 0x6d
    7d58:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d5a:	movw	r1, #4456	; 0x1168
    7d5e:	movs	r2, #177	; 0xb1
    7d60:	str	r2, [r3, r1]
      _s = s;
    7d62:	movw	r2, #4460	; 0x116c
    7d66:	mov.w	r1, #4294967295
    7d6a:	strb	r1, [r3, r2]
      _b = b;
    7d6c:	movw	r2, #4461	; 0x116d
    7d70:	mvn.w	r1, #101	; 0x65
    7d74:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d76:	movw	r1, #4464	; 0x1170
    7d7a:	movs	r2, #174	; 0xae
    7d7c:	str	r2, [r3, r1]
      _s = s;
    7d7e:	movw	r2, #4468	; 0x1174
    7d82:	mvn.w	r1, #2
    7d86:	strb	r1, [r3, r2]
      _b = b;
    7d88:	movw	r2, #4469	; 0x1175
    7d8c:	mvn.w	r1, #76	; 0x4c
    7d90:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d92:	movw	r1, #4472	; 0x1178
    7d96:	movs	r2, #178	; 0xb2
    7d98:	str	r2, [r3, r1]
      _s = s;
    7d9a:	movw	r2, #4476	; 0x117c
    7d9e:	mov.w	r1, #4294967295
    7da2:	strb	r1, [r3, r2]
      _b = b;
    7da4:	movw	r2, #4477	; 0x117d
    7da8:	mvn.w	r1, #82	; 0x52
    7dac:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dae:	movw	r2, #4484	; 0x1184
      _b = b;
    7db2:	mov.w	r1, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7db6:	strb.w	lr, [r3, r2]
      _b = b;
    7dba:	movw	r2, #4485	; 0x1185
    7dbe:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dc0:	add.w	r2, r3, #4448	; 0x1160
    7dc4:	movs	r1, #159	; 0x9f
    7dc6:	str	r1, [r2, #64]	; 0x40
    7dc8:	movs	r1, #137	; 0x89
    7dca:	str	r1, [r2, #96]	; 0x60
      _s = s;
      _b = b;
    7dcc:	movw	r2, #4517	; 0x11a5
    7dd0:	mov.w	r1, #109	; 0x6d
    7dd4:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dd6:	movw	r1, #4528	; 0x11b0
    7dda:	movs	r2, #143	; 0x8f
    7ddc:	str	r2, [r3, r1]
    7dde:	movw	r1, #4536	; 0x11b8
    7de2:	movs	r2, #125	; 0x7d
    7de4:	str	r2, [r3, r1]
    7de6:	movw	r1, #4488	; 0x1188
    7dea:	movs	r2, #152	; 0x98
    7dec:	str	r2, [r3, r1]
      _s = s;
    7dee:	movw	r2, #4492	; 0x118c
    7df2:	mvn.w	r1, #127	; 0x7f
    7df6:	strb	r1, [r3, r2]
      _b = b;
    7df8:	movw	r2, #4493	; 0x118d
    7dfc:	mvn.w	r1, #78	; 0x4e
    7e00:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e02:	movs	r1, #156	; 0x9c
    7e04:	movw	r2, #4496	; 0x1190
    7e08:	str	r1, [r3, r2]
    7e0a:	movw	r2, #4520	; 0x11a8
    7e0e:	str	r1, [r3, r2]
      _s = s;
    7e10:	movw	r2, #4500	; 0x1194
    7e14:	mvn.w	r1, #103	; 0x67
    7e18:	strb	r1, [r3, r2]
      _b = b;
    7e1a:	movw	r2, #4501	; 0x1195
    7e1e:	mvn.w	r1, #33	; 0x21
    7e22:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e24:	movw	r1, #4504	; 0x1198
    7e28:	movs	r2, #162	; 0xa2
    7e2a:	str	r2, [r3, r1]
      _s = s;
    7e2c:	movw	r2, #4508	; 0x119c
    7e30:	mov.w	r1, #4294967295
    7e34:	strb.w	lr, [r3, r2]
      _b = b;
    7e38:	movw	r2, #4509	; 0x119d
    7e3c:	strb	r7, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e3e:	movw	r2, #4516	; 0x11a4
    7e42:	strb	r1, [r3, r2]
    7e44:	movw	r2, #4524	; 0x11ac
    7e48:	strb	r1, [r3, r2]
      _b = b;
    7e4a:	movw	r2, #4525	; 0x11ad
    7e4e:	mov.w	r1, #103	; 0x67
    7e52:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e54:	movw	r2, #4532	; 0x11b4
    7e58:	mov.w	r1, #4294967295
    7e5c:	strb	r1, [r3, r2]
      _b = b;
    7e5e:	movw	r2, #4533	; 0x11b5
    7e62:	mvn.w	r1, #69	; 0x45
    7e66:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e68:	movw	r2, #4540	; 0x11bc
    7e6c:	mvn.w	r1, #94	; 0x5e
    7e70:	strb	r1, [r3, r2]
      _b = b;
    7e72:	movw	r2, #4541	; 0x11bd
    7e76:	mvn.w	r1, #73	; 0x49
    7e7a:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e7c:	movw	r2, #4548	; 0x11c4
    7e80:	mvn.w	r1, #50	; 0x32
    7e84:	strb	r1, [r3, r2]
      _b = b;
    7e86:	movw	r2, #4549	; 0x11c5
    7e8a:	mvn.w	r1, #89	; 0x59
    7e8e:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e90:	movw	r1, #4552	; 0x11c8
    7e94:	movs	r2, #139	; 0x8b
    7e96:	str	r2, [r3, r1]
      _s = s;
    7e98:	movw	r2, #4556	; 0x11cc
    7e9c:	mov.w	r1, #4294967295
    7ea0:	strb	r1, [r3, r2]
      _b = b;
    7ea2:	movw	r2, #4557	; 0x11cd
    7ea6:	mov.w	r1, #88	; 0x58
    7eaa:	strb	r1, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eac:	movw	r2, #4560	; 0x11d0
      _s = s;
      _b = b;
    7eb0:	movs	r1, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eb2:	str	r5, [r3, r2]
      _s = s;
    7eb4:	movw	r2, #4564	; 0x11d4
    7eb8:	strb	r5, [r3, r2]
      _b = b;
    7eba:	movw	r2, #4565	; 0x11d5
    7ebe:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ec0:	movw	r2, #4568	; 0x11d8
    7ec4:	str	r5, [r3, r2]
      _s = s;
    7ec6:	movw	r2, #4572	; 0x11dc
    7eca:	strb	r5, [r3, r2]
      _b = b;
    7ecc:	movw	r2, #4573	; 0x11dd
    7ed0:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ed2:	add.w	r2, r3, #4576	; 0x11e0
    7ed6:	str	r5, [r4, #0]
    7ed8:	str	r5, [r2, #0]
    7eda:	movs	r2, #5
      _s = s;
    7edc:	strb	r5, [r4, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ede:	str	r2, [r4, #48]	; 0x30
      _s = s;
    7ee0:	mvn.w	r2, #22
      _b = b;
    7ee4:	strb	r5, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ee6:	strb.w	r2, [r4, #52]	; 0x34
    7eea:	movw	r2, #4580	; 0x11e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eee:	str	r5, [r4, #8]
      _s = s;
    7ef0:	strb	r5, [r3, r2]
      _b = b;
    7ef2:	movw	r2, #4581	; 0x11e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ef6:	strb	r5, [r4, #12]
      _b = b;
    7ef8:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7efa:	movw	r2, #4584	; 0x11e8
      _s = s;
      _b = b;
    7efe:	strb	r5, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f00:	str	r5, [r3, r2]
      _s = s;
    7f02:	movw	r2, #4588	; 0x11ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f06:	str	r5, [r4, #16]
      _s = s;
    7f08:	strb	r5, [r3, r2]
      _b = b;
    7f0a:	movw	r2, #4589	; 0x11ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f0e:	strb	r5, [r4, #20]
      _b = b;
    7f10:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f12:	movw	r2, #4592	; 0x11f0
      _s = s;
      _b = b;
    7f16:	strb	r5, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f18:	str	r5, [r3, r2]
      _s = s;
    7f1a:	movw	r2, #4596	; 0x11f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f1e:	str	r5, [r4, #24]
      _s = s;
    7f20:	strb	r5, [r3, r2]
      _b = b;
    7f22:	movw	r2, #4597	; 0x11f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f26:	strb	r5, [r4, #28]
      _b = b;
    7f28:	strb	r5, [r3, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f2a:	movw	r2, #4600	; 0x11f8
      _s = s;
      _b = b;
    7f2e:	strb	r5, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f30:	str	r5, [r3, r2]
      _s = s;
    7f32:	movw	r2, #4604	; 0x11fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f36:	str	r5, [r4, #32]
      _s = s;
    7f38:	strb	r5, [r3, r2]
      _b = b;
    7f3a:	movw	r2, #4605	; 0x11fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f3e:	strb.w	r5, [r4, #36]	; 0x24
      _b = b;
    7f42:	strb	r5, [r3, r2]
    7f44:	mov.w	r3, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f48:	mvn.w	r2, #46	; 0x2e
      _b = b;
    7f4c:	strb.w	r5, [r4, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f50:	str	r5, [r4, #40]	; 0x28
      _s = s;
    7f52:	strb.w	r5, [r4, #44]	; 0x2c
      _b = b;
    7f56:	strb.w	r5, [r4, #45]	; 0x2d
    7f5a:	strb.w	r3, [r4, #53]	; 0x35
    7f5e:	mvn.w	r3, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f62:	strb.w	r2, [r4, #84]	; 0x54
      _b = b;
    7f66:	mvn.w	r2, #25
    7f6a:	strb.w	r3, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f6e:	mvn.w	r3, #63	; 0x3f
      _b = b;
    7f72:	strb.w	r2, [r4, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f76:	mov.w	r2, #4294967295
    7f7a:	strb.w	r3, [r4, #68]	; 0x44
    7f7e:	mvn.w	r3, #124	; 0x7c
    7f82:	strb.w	r2, [r4, #92]	; 0x5c
      _b = b;
    7f86:	mvn.w	r2, #83	; 0x53
    7f8a:	strb.w	r0, [r4, #69]	; 0x45
    7f8e:	strb.w	r2, [r4, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f92:	movs	r2, #7
      _s = s;
    7f94:	strb.w	r3, [r4, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f98:	movs	r3, #35	; 0x23
    7f9a:	str	r2, [r4, #96]	; 0x60
      _s = s;
    7f9c:	mvn.w	r2, #20
      _b = b;
    7fa0:	strb.w	lr, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fa4:	strb.w	r2, [r4, #100]	; 0x64
      _b = b;
    7fa8:	mvn.w	r2, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fac:	strb.w	r7, [r4, #108]	; 0x6c
      _b = b;
    7fb0:	strb.w	r2, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fb4:	movs	r2, #7
      _s = s;
      _b = b;
    7fb6:	strb.w	lr, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fba:	str	r2, [r4, #112]	; 0x70
      _s = s;
    7fbc:	mvn.w	r2, #103	; 0x67
      _b = b;
    7fc0:	strb.w	r9, [r4, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fc4:	strb.w	r2, [r4, #116]	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fc8:	movs	r2, #16
      _s = s;
    7fca:	strb.w	sl, [r4, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fce:	str	r2, [r4, #120]	; 0x78
      _s = s;
    7fd0:	mvn.w	r2, #36	; 0x24
    7fd4:	strb.w	r2, [r4, #124]	; 0x7c
      _b = b;
    7fd8:	mov.w	r2, #4294967295
    7fdc:	strb.w	r2, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fe0:	movs	r2, #12
    7fe2:	str.w	r2, [r4, #128]	; 0x80
      _s = s;
    7fe6:	mvn.w	r2, #35	; 0x23
    7fea:	strb.w	r2, [r4, #132]	; 0x84
      _b = b;
    7fee:	mov.w	r2, #4294967295
    7ff2:	strb.w	r2, [r4, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ff6:	movs	r2, #10
    7ff8:	str.w	r2, [r4, #136]	; 0x88
      _s = s;
    7ffc:	mvn.w	r2, #82	; 0x52
    8000:	strb.w	r2, [r4, #140]	; 0x8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8004:	movs	r2, #2
    8006:	str	r2, [r4, #56]	; 0x38
    8008:	str	r2, [r4, #104]	; 0x68
    800a:	movs	r2, #4
    800c:	str	r2, [r4, #64]	; 0x40
    800e:	movs	r2, #1
    8010:	str	r2, [r4, #72]	; 0x48
    8012:	movw	r2, #359	; 0x167
    8016:	str	r2, [r4, #80]	; 0x50
    8018:	movw	r2, #355	; 0x163
    801c:	str	r2, [r4, #88]	; 0x58
      _s = s;
      _b = b;
    801e:	mov.w	r2, #4294967295
    8022:	strb.w	r2, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8026:	movs	r2, #2
      _s = s;
    8028:	strb.w	r0, [r4, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    802c:	str.w	r2, [r4, #144]	; 0x90
      _s = s;
    8030:	mvn.w	r2, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8034:	str.w	r5, [r4, #176]	; 0xb0
      _s = s;
    8038:	strb.w	r2, [r4, #148]	; 0x94
      _b = b;
    803c:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8040:	str.w	r5, [r4, #184]	; 0xb8
      _s = s;
      _b = b;
    8044:	strb.w	r2, [r4, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8048:	mvn.w	r2, #13
    804c:	strb.w	r5, [r4, #188]	; 0xbc
    8050:	strb.w	r2, [r4, #156]	; 0x9c
      _b = b;
    8054:	mvn.w	r2, #64	; 0x40
    8058:	strb.w	r5, [r4, #189]	; 0xbd
    805c:	strb.w	r2, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8060:	movs	r2, #2
    8062:	str.w	r5, [r4, #192]	; 0xc0
    8066:	str.w	r2, [r4, #160]	; 0xa0
      _s = s;
    806a:	mvn.w	r2, #27
    806e:	strb.w	r5, [r4, #196]	; 0xc4
    8072:	strb.w	r2, [r4, #164]	; 0xa4
      _b = b;
    8076:	mvn.w	r2, #23
    807a:	strb.w	r5, [r4, #197]	; 0xc5
    807e:	strb.w	r2, [r4, #165]	; 0xa5
    8082:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8086:	str.w	r5, [r4, #200]	; 0xc8
      _s = s;
      _b = b;
    808a:	strb.w	r2, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    808e:	mov.w	r2, #4294967295
    8092:	strb.w	r5, [r4, #204]	; 0xcc
    8096:	strb.w	r2, [r4, #180]	; 0xb4
      _b = b;
    809a:	mov.w	r2, #14
    809e:	strb.w	r5, [r4, #205]	; 0xcd
    80a2:	strb.w	r2, [r4, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80a6:	movw	r2, #359	; 0x167
    80aa:	str.w	r5, [r4, #208]	; 0xd0
    80ae:	str.w	r2, [r4, #224]	; 0xe0
      _s = s;
    80b2:	mvn.w	r2, #8
    80b6:	strb.w	r5, [r4, #212]	; 0xd4
    80ba:	strb.w	r2, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80be:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    80c2:	strb.w	r5, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80c6:	str.w	r2, [r4, #152]	; 0x98
    80ca:	movs	r2, #15
    80cc:	str.w	r5, [r4, #216]	; 0xd8
    80d0:	str.w	r2, [r4, #168]	; 0xa8
      _s = s;
      _b = b;
    80d4:	mov.w	r2, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80d8:	strb.w	r5, [r4, #220]	; 0xdc
      _b = b;
    80dc:	strb.w	r5, [r4, #221]	; 0xdd
    80e0:	strb.w	r2, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80e4:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    80e8:	strb.w	r9, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80ec:	str.w	r2, [r4, #232]	; 0xe8
      _s = s;
    80f0:	mvn.w	r2, #54	; 0x36
      _b = b;
    80f4:	strb.w	r9, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80f8:	strb.w	r2, [r4, #236]	; 0xec
      _b = b;
    80fc:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8100:	str.w	r8, [r4, #296]	; 0x128
      _s = s;
      _b = b;
    8104:	strb.w	r2, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8108:	mvn.w	r2, #34	; 0x22
    810c:	strb.w	r2, [r4, #244]	; 0xf4
      _b = b;
    8110:	mvn.w	r2, #13
    8114:	strb.w	r2, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8118:	movs	r2, #9
    811a:	str.w	r2, [r4, #248]	; 0xf8
      _s = s;
    811e:	mvn.w	r2, #32
    8122:	strb.w	r2, [r4, #252]	; 0xfc
      _b = b;
    8126:	mov.w	r2, #4294967295
    812a:	strb.w	r2, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    812e:	movs	r2, #11
    8130:	str.w	r2, [r4, #256]	; 0x100
      _s = s;
    8134:	mvn.w	r2, #32
    8138:	strb.w	r2, [r4, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    813c:	movs	r2, #10
    813e:	str.w	r2, [r4, #264]	; 0x108
      _s = s;
    8142:	mvn.w	r2, #76	; 0x4c
    8146:	strb.w	r2, [r4, #268]	; 0x10c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    814a:	movs	r2, #2
    814c:	str.w	r2, [r4, #272]	; 0x110
      _s = s;
    8150:	mov.w	r2, #99	; 0x63
    8154:	strb.w	r2, [r4, #276]	; 0x114
      _b = b;
    8158:	mvn.w	r2, #2
    815c:	strb.w	r2, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8160:	movw	r2, #359	; 0x167
    8164:	str.w	r2, [r4, #280]	; 0x118
      _s = s;
    8168:	mvn.w	r2, #43	; 0x2b
    816c:	strb.w	r2, [r4, #284]	; 0x11c
      _b = b;
    8170:	mvn.w	r2, #38	; 0x26
    8174:	strb.w	r2, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8178:	movs	r2, #2
    817a:	str.w	r2, [r4, #288]	; 0x120
      _s = s;
    817e:	mvn.w	r2, #34	; 0x22
    8182:	strb.w	r2, [r4, #292]	; 0x124
      _b = b;
    8186:	mvn.w	r2, #52	; 0x34
    818a:	strb.w	r2, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    818e:	mvn.w	r2, #121	; 0x79
    8192:	strb.w	r2, [r4, #300]	; 0x12c
      _b = b;
    8196:	mov.w	r2, #4294967295
    819a:	strb.w	r2, [r4, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    819e:	movs	r2, #15
    81a0:	str.w	r2, [r4, #304]	; 0x130
      _s = s;
    81a4:	mvn.w	r2, #32
    81a8:	strb.w	r2, [r4, #308]	; 0x134
      _b = b;
    81ac:	mov.w	r2, #4294967295
    81b0:	strb.w	r2, [r4, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81b4:	movs	r2, #11
    81b6:	str.w	r2, [r4, #312]	; 0x138
      _s = s;
    81ba:	mvn.w	r2, #19
    81be:	strb.w	r2, [r4, #316]	; 0x13c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81c2:	movs	r2, #8
    81c4:	str.w	r2, [r4, #240]	; 0xf0
      _s = s;
      _b = b;
    81c8:	mvn.w	r2, #57	; 0x39
    81cc:	strb.w	r2, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81d0:	movs	r2, #9
      _s = s;
      _b = b;
    81d2:	strb.w	lr, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81d6:	str.w	r2, [r4, #320]	; 0x140
      _s = s;
    81da:	mvn.w	r2, #16
      _b = b;
    81de:	strb.w	r9, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81e2:	strb.w	r2, [r4, #324]	; 0x144
      _b = b;
    81e6:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81ea:	str.w	r5, [r4, #344]	; 0x158
      _s = s;
      _b = b;
    81ee:	strb.w	r2, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81f2:	movs	r2, #11
      _s = s;
      _b = b;
    81f4:	strb.w	sl, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81f8:	str.w	r2, [r4, #328]	; 0x148
      _s = s;
    81fc:	mvn.w	r2, #32
      _b = b;
    8200:	strb.w	fp, [r4, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8204:	strb.w	r2, [r4, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8208:	movs	r2, #1
    820a:	str.w	r5, [r4, #376]	; 0x178
    820e:	str.w	r2, [r4, #336]	; 0x150
      _s = s;
    8212:	mvn.w	r2, #121	; 0x79
    8216:	strb.w	r5, [r4, #380]	; 0x17c
    821a:	strb.w	r2, [r4, #340]	; 0x154
    821e:	mvn.w	r2, #81	; 0x51
      _b = b;
    8222:	strb.w	r5, [r4, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8226:	strb.w	r2, [r4, #348]	; 0x15c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    822a:	movs	r2, #17
    822c:	str.w	r5, [r4, #384]	; 0x180
    8230:	str.w	r2, [r4, #352]	; 0x160
      _s = s;
    8234:	mvn.w	r2, #23
    8238:	strb.w	r5, [r4, #388]	; 0x184
    823c:	strb.w	r2, [r4, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8240:	movs	r2, #5
      _s = s;
      _b = b;
    8242:	strb.w	r5, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8246:	str.w	r2, [r4, #360]	; 0x168
      _s = s;
    824a:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    824e:	str.w	r5, [r4, #392]	; 0x188
      _s = s;
    8252:	strb.w	r2, [r4, #364]	; 0x16c
      _b = b;
    8256:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    825a:	strb.w	r5, [r4, #396]	; 0x18c
      _b = b;
    825e:	strb.w	r2, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8262:	movs	r2, #2
      _s = s;
      _b = b;
    8264:	strb.w	r5, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8268:	str.w	r2, [r4, #368]	; 0x170
      _s = s;
    826c:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8270:	str.w	r5, [r4, #400]	; 0x190
      _s = s;
    8274:	strb.w	r2, [r4, #372]	; 0x174
      _b = b;
    8278:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    827c:	strb.w	r5, [r4, #404]	; 0x194
      _b = b;
    8280:	strb.w	r2, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8284:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    8288:	strb.w	r5, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    828c:	str.w	r2, [r4, #408]	; 0x198
      _s = s;
    8290:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8294:	str.w	ip, [r4, #416]	; 0x1a0
      _s = s;
    8298:	strb.w	r2, [r4, #412]	; 0x19c
      _b = b;
    829c:	mov.w	r2, #94	; 0x5e
    82a0:	strb.w	lr, [r4, #429]	; 0x1ad
    82a4:	strb.w	r2, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82a8:	mvn.w	r2, #11
      _b = b;
    82ac:	strb.w	r9, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82b0:	strb.w	r2, [r4, #420]	; 0x1a4
    82b4:	mvn.w	r2, #42	; 0x2a
      _b = b;
    82b8:	strb.w	sl, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82bc:	strb.w	r2, [r4, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82c0:	movs	r2, #13
    82c2:	str.w	r8, [r4, #424]	; 0x1a8
    82c6:	str.w	r2, [r4, #432]	; 0x1b0
      _s = s;
    82ca:	mvn.w	r2, #32
    82ce:	strb.w	r2, [r4, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82d2:	movs	r2, #13
    82d4:	str.w	r2, [r4, #440]	; 0x1b8
      _s = s;
    82d8:	mvn.w	r2, #25
    82dc:	strb.w	r2, [r4, #444]	; 0x1bc
      _b = b;
    82e0:	mvn.w	r2, #10
    82e4:	strb.w	r2, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82e8:	movs	r2, #15
    82ea:	str.w	r2, [r4, #448]	; 0x1c0
      _s = s;
    82ee:	mvn.w	r2, #24
    82f2:	strb.w	r2, [r4, #452]	; 0x1c4
      _b = b;
    82f6:	mvn.w	r2, #16
    82fa:	strb.w	r2, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82fe:	movs	r2, #17
    8300:	str.w	r2, [r4, #456]	; 0x1c8
      _s = s;
    8304:	mvn.w	r2, #34	; 0x22
    8308:	strb.w	r2, [r4, #460]	; 0x1cc
      _b = b;
    830c:	mov.w	r2, #4294967295
    8310:	strb.w	r2, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8314:	movs	r2, #16
    8316:	str.w	r2, [r4, #464]	; 0x1d0
      _s = s;
    831a:	mvn.w	r2, #37	; 0x25
    831e:	strb.w	r2, [r4, #468]	; 0x1d4
      _b = b;
    8322:	mov.w	r2, #4294967295
    8326:	strb.w	r2, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    832a:	movs	r2, #3
    832c:	str.w	r2, [r4, #472]	; 0x1d8
      _s = s;
    8330:	mvn.w	r2, #89	; 0x59
    8334:	strb.w	r2, [r4, #476]	; 0x1dc
      _b = b;
    8338:	mvn.w	r2, #16
    833c:	strb.w	r2, [r4, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8340:	movs	r2, #2
    8342:	str.w	r2, [r4, #480]	; 0x1e0
      _s = s;
    8346:	mvn.w	r2, #116	; 0x74
    834a:	strb.w	r2, [r4, #484]	; 0x1e4
      _b = b;
    834e:	mvn.w	r2, #40	; 0x28
    8352:	strb.w	r2, [r4, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8356:	movs	r2, #10
    8358:	str.w	r2, [r4, #488]	; 0x1e8
      _s = s;
    835c:	mvn.w	r2, #73	; 0x49
    8360:	strb.w	r2, [r4, #492]	; 0x1ec
      _b = b;
    8364:	mov.w	r2, #4294967295
    8368:	strb.w	r2, [r4, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    836c:	movs	r2, #13
      _s = s;
    836e:	strb.w	lr, [r4, #508]	; 0x1fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8372:	str.w	r2, [r4, #496]	; 0x1f0
    8376:	movs	r2, #14
      _s = s;
      _b = b;
    8378:	strb.w	r9, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    837c:	str.w	r2, [r4, #504]	; 0x1f8
      _s = s;
      _b = b;
    8380:	mov.w	r2, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8384:	strb.w	sl, [r4, #500]	; 0x1f4
      _b = b;
    8388:	strb.w	r2, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    838c:	movs	r2, #9
      _s = s;
      _b = b;
    838e:	strb.w	fp, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8392:	str.w	r2, [r4, #512]	; 0x200
      _s = s;
      _b = b;
    8396:	mov.w	r2, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    839a:	strb.w	fp, [r4, #516]	; 0x204
      _b = b;
    839e:	strb.w	r2, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83a2:	movs	r2, #10
      _s = s;
    83a4:	strb.w	sl, [r4, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83a8:	str.w	r2, [r4, #520]	; 0x208
      _s = s;
      _b = b;
    83ac:	mvn.w	r2, #20
    83b0:	strb.w	fp, [r4, #549]	; 0x225
    83b4:	strb.w	r2, [r4, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83b8:	movs	r2, #4
    83ba:	str.w	r5, [r4, #568]	; 0x238
    83be:	str.w	r2, [r4, #528]	; 0x210
      _s = s;
    83c2:	mvn.w	r2, #104	; 0x68
    83c6:	strb.w	r5, [r4, #572]	; 0x23c
    83ca:	strb.w	r2, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83ce:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    83d2:	strb.w	r5, [r4, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83d6:	str.w	r2, [r4, #536]	; 0x218
      _s = s;
    83da:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83de:	str.w	r5, [r4, #576]	; 0x240
      _s = s;
    83e2:	strb.w	r2, [r4, #540]	; 0x21c
      _b = b;
    83e6:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83ea:	strb.w	r5, [r4, #580]	; 0x244
      _b = b;
    83ee:	strb.w	r2, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83f2:	movs	r2, #17
    83f4:	str.w	r2, [r4, #544]	; 0x220
      _s = s;
    83f8:	mvn.w	r2, #22
    83fc:	strb.w	r2, [r4, #548]	; 0x224
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8400:	movw	r2, #357	; 0x165
    8404:	str.w	r2, [r4, #552]	; 0x228
      _s = s;
    8408:	mvn.w	r2, #16
    840c:	strb.w	r2, [r4, #556]	; 0x22c
      _b = b;
    8410:	mvn.w	r2, #56	; 0x38
    8414:	strb.w	r2, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8418:	mov.w	r2, #4294967295
    841c:	strb.w	r2, [r4, #564]	; 0x234
      _b = b;
    8420:	mvn.w	r2, #78	; 0x4e
    8424:	strb.w	r2, [r4, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8428:	mov.w	r2, #354	; 0x162
    842c:	str.w	r2, [r4, #560]	; 0x230
    8430:	mov.w	r2, #358	; 0x166
      _s = s;
      _b = b;
    8434:	strb.w	r5, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8438:	str.w	r2, [r4, #592]	; 0x250
      _s = s;
    843c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8440:	str.w	r3, [r4, #640]	; 0x280
      _s = s;
      _b = b;
    8444:	mvn.w	r3, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8448:	strb.w	r2, [r4, #596]	; 0x254
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    844c:	movw	r2, #357	; 0x165
      _s = s;
      _b = b;
    8450:	strb.w	r9, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8454:	str.w	r2, [r4, #600]	; 0x258
      _s = s;
    8458:	mov.w	r2, #4294967295
    845c:	strb.w	r0, [r4, #668]	; 0x29c
    8460:	strb.w	r2, [r4, #604]	; 0x25c
      _b = b;
    8464:	mvn.w	r2, #113	; 0x71
    8468:	strb.w	r1, [r4, #597]	; 0x255
    846c:	mvn.w	r1, #32
    8470:	strb.w	r2, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8474:	movs	r2, #3
    8476:	str.w	r5, [r4, #584]	; 0x248
    847a:	str.w	r2, [r4, #608]	; 0x260
      _s = s;
    847e:	mvn.w	r2, #28
    8482:	strb.w	r5, [r4, #588]	; 0x24c
    8486:	strb.w	r2, [r4, #612]	; 0x264
      _b = b;
    848a:	mvn.w	r2, #34	; 0x22
    848e:	strb.w	r5, [r4, #589]	; 0x24d
    8492:	strb.w	r2, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8496:	movs	r2, #10
      _s = s;
    8498:	strb.w	fp, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    849c:	str.w	r2, [r4, #616]	; 0x268
      _s = s;
    84a0:	mvn.w	r2, #33	; 0x21
    84a4:	strb.w	r2, [r4, #620]	; 0x26c
      _b = b;
    84a8:	mvn.w	r2, #7
    84ac:	strb.w	r2, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84b0:	movs	r2, #15
    84b2:	str.w	r2, [r4, #624]	; 0x270
      _s = s;
    84b6:	mvn.w	r2, #25
    84ba:	strb.w	r2, [r4, #628]	; 0x274
      _b = b;
    84be:	mov.w	r2, #4294967295
    84c2:	strb.w	r2, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84c6:	movs	r2, #17
    84c8:	str.w	r2, [r4, #632]	; 0x278
      _s = s;
    84cc:	mvn.w	r2, #10
    84d0:	strb.w	r2, [r4, #636]	; 0x27c
      _b = b;
    84d4:	mvn.w	r2, #45	; 0x2d
    84d8:	strb.w	r2, [r4, #637]	; 0x27d
    84dc:	mvn.w	r2, #102	; 0x66
    84e0:	strb.w	r2, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84e4:	movs	r2, #20
    84e6:	str.w	r2, [r4, #648]	; 0x288
      _s = s;
    84ea:	mvn.w	r2, #35	; 0x23
    84ee:	strb.w	r2, [r4, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84f2:	movs	r2, #18
    84f4:	str.w	r2, [r4, #656]	; 0x290
      _s = s;
    84f8:	mvn.w	r2, #37	; 0x25
    84fc:	strb.w	r2, [r4, #660]	; 0x294
      _b = b;
    8500:	mov.w	r2, #4294967295
    8504:	strb.w	r2, [r4, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8508:	movs	r2, #10
    850a:	str.w	r2, [r4, #664]	; 0x298
      _s = s;
      _b = b;
    850e:	strb.w	r3, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8512:	movs	r3, #3
    8514:	str.w	r2, [r4, #680]	; 0x2a8
      _s = s;
      _b = b;
    8518:	mvn.w	r2, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    851c:	str.w	r3, [r4, #672]	; 0x2a0
      _s = s;
    8520:	mvn.w	r3, #73	; 0x49
      _b = b;
    8524:	strb.w	r9, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8528:	strb.w	r3, [r4, #676]	; 0x2a4
      _b = b;
    852c:	mvn.w	r3, #51	; 0x33
    8530:	strb.w	r9, [r4, #717]	; 0x2cd
    8534:	strb.w	r3, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8538:	mvn.w	r3, #81	; 0x51
      _b = b;
    853c:	strb.w	r6, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8540:	movs	r6, #14
      _s = s;
    8542:	strb.w	r3, [r4, #684]	; 0x2ac
      _b = b;
    8546:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    854a:	strb.w	lr, [r4, #756]	; 0x2f4
      _b = b;
    854e:	strb.w	r3, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8552:	movs	r3, #13
      _s = s;
    8554:	strb.w	fp, [r4, #708]	; 0x2c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8558:	str.w	r3, [r4, #688]	; 0x2b0
      _s = s;
    855c:	mvn.w	r3, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8560:	str.w	r8, [r4, #736]	; 0x2e0
      _s = s;
    8564:	strb.w	r3, [r4, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8568:	movs	r3, #12
    856a:	str.w	r3, [r4, #696]	; 0x2b8
      _s = s;
    856e:	mvn.w	r3, #9
    8572:	strb.w	r3, [r4, #700]	; 0x2bc
      _b = b;
    8576:	mvn.w	r3, #81	; 0x51
    857a:	strb.w	r3, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    857e:	movs	r3, #12
    8580:	str.w	r3, [r4, #704]	; 0x2c0
      _s = s;
      _b = b;
    8584:	mvn.w	r3, #114	; 0x72
    8588:	strb.w	r3, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    858c:	movs	r3, #12
    858e:	str.w	r3, [r4, #712]	; 0x2c8
      _s = s;
    8592:	mvn.w	r3, #33	; 0x21
    8596:	strb.w	r3, [r4, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    859a:	movs	r3, #7
    859c:	str.w	r3, [r4, #720]	; 0x2d0
      _s = s;
    85a0:	mvn.w	r3, #110	; 0x6e
    85a4:	strb.w	r3, [r4, #724]	; 0x2d4
      _b = b;
    85a8:	mov.w	r3, #4294967295
    85ac:	strb.w	r3, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85b0:	movs	r3, #1
    85b2:	str.w	r3, [r4, #728]	; 0x2d8
      _s = s;
    85b6:	mvn.w	r3, #28
    85ba:	strb.w	r3, [r4, #732]	; 0x2dc
      _b = b;
    85be:	mvn.w	r3, #36	; 0x24
    85c2:	strb.w	r3, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85c6:	mvn.w	r3, #23
    85ca:	strb.w	r3, [r4, #740]	; 0x2e4
      _b = b;
    85ce:	mvn.w	r3, #26
    85d2:	strb.w	r3, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85d6:	movw	r3, #357	; 0x165
    85da:	str.w	r3, [r4, #744]	; 0x2e8
      _s = s;
    85de:	mvn.w	r3, #11
    85e2:	strb.w	r3, [r4, #748]	; 0x2ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85e6:	mov.w	r3, #354	; 0x162
    85ea:	str.w	r3, [r4, #752]	; 0x2f0
      _s = s;
      _b = b;
    85ee:	mvn.w	r3, #50	; 0x32
    85f2:	strb.w	r3, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85f6:	movs	r3, #1
      _s = s;
      _b = b;
    85f8:	strb.w	r2, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85fc:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8600:	str.w	r3, [r4, #776]	; 0x308
      _s = s;
    8604:	mvn.w	r3, #10
    8608:	strb.w	r2, [r4, #844]	; 0x34c
      _b = b;
    860c:	mvn.w	r2, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8610:	strb.w	r3, [r4, #780]	; 0x30c
      _b = b;
    8614:	mov.w	r3, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8618:	str.w	ip, [r4, #792]	; 0x318
      _s = s;
      _b = b;
    861c:	strb.w	r3, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8620:	movs	r3, #2
    8622:	str.w	r5, [r4, #760]	; 0x2f8
    8626:	str.w	r3, [r4, #784]	; 0x310
      _s = s;
    862a:	mvn.w	r3, #16
    862e:	strb.w	r5, [r4, #764]	; 0x2fc
    8632:	strb.w	r3, [r4, #788]	; 0x314
      _b = b;
    8636:	mvn.w	r3, #57	; 0x39
    863a:	strb.w	r5, [r4, #765]	; 0x2fd
    863e:	strb.w	r3, [r4, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8642:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8646:	str.w	r5, [r4, #768]	; 0x300
      _s = s;
    864a:	strb.w	r3, [r4, #796]	; 0x31c
      _b = b;
    864e:	mvn.w	r3, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8652:	strb.w	r5, [r4, #772]	; 0x304
      _b = b;
    8656:	strb.w	r3, [r4, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    865a:	movs	r3, #8
      _s = s;
      _b = b;
    865c:	strb.w	r5, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8660:	str.w	r3, [r4, #800]	; 0x320
      _s = s;
    8664:	mvn.w	r3, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8668:	str.w	r8, [r4, #808]	; 0x328
      _s = s;
    866c:	strb.w	r3, [r4, #804]	; 0x324
      _b = b;
    8670:	mvn.w	r3, #18
    8674:	strb.w	r3, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8678:	mvn.w	r3, #25
    867c:	strb.w	r3, [r4, #812]	; 0x32c
      _b = b;
    8680:	mvn.w	r3, #26
    8684:	strb.w	r3, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8688:	mvn.w	r3, #20
    868c:	strb.w	r3, [r4, #820]	; 0x334
      _b = b;
    8690:	mov.w	r3, #4294967295
    8694:	strb.w	r3, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8698:	movs	r3, #22
    869a:	str.w	r3, [r4, #824]	; 0x338
      _s = s;
    869e:	mvn.w	r3, #26
    86a2:	strb.w	r3, [r4, #828]	; 0x33c
      _b = b;
    86a6:	mvn.w	r3, #31
    86aa:	strb.w	r3, [r4, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86ae:	movs	r3, #32
    86b0:	str.w	r3, [r4, #832]	; 0x340
      _s = s;
    86b4:	mvn.w	r3, #2
    86b8:	strb.w	r3, [r4, #836]	; 0x344
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86bc:	movs	r3, #17
    86be:	str.w	r3, [r4, #840]	; 0x348
    86c2:	movs	r3, #19
    86c4:	str.w	r3, [r4, #816]	; 0x330
      _s = s;
      _b = b;
    86c8:	strb.w	r2, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86cc:	mvn.w	r2, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86d0:	str.w	r3, [r4, #848]	; 0x350
      _s = s;
      _b = b;
    86d4:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86d8:	strb.w	r2, [r4, #916]	; 0x394
    86dc:	mvn.w	r2, #73	; 0x49
      _b = b;
    86e0:	strb.w	r3, [r4, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86e4:	movs	r3, #9
      _s = s;
    86e6:	strb.w	r2, [r4, #852]	; 0x354
    86ea:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86ee:	str.w	r3, [r4, #856]	; 0x358
    86f2:	movw	r3, #355	; 0x163
      _s = s;
    86f6:	strb.w	r2, [r4, #860]	; 0x35c
      _b = b;
    86fa:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86fe:	str.w	r3, [r4, #864]	; 0x360
      _s = s;
    8702:	mvn.w	r3, #2
      _b = b;
    8706:	strb.w	r2, [r4, #861]	; 0x35d
    870a:	mvn.w	r2, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    870e:	strb.w	r3, [r4, #868]	; 0x364
      _b = b;
    8712:	strb.w	r3, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8716:	movs	r3, #15
      _s = s;
      _b = b;
    8718:	strb.w	r2, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    871c:	mvn.w	r2, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8720:	str.w	r3, [r4, #880]	; 0x370
    8724:	movs	r3, #13
      _s = s;
    8726:	strb.w	r2, [r4, #876]	; 0x36c
    872a:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    872e:	str.w	r3, [r4, #888]	; 0x378
    8732:	str.w	r3, [r4, #896]	; 0x380
      _s = s;
      _b = b;
    8736:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    873a:	strb.w	r2, [r4, #892]	; 0x37c
    873e:	mvn.w	r2, #33	; 0x21
      _b = b;
    8742:	strb.w	r3, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8746:	movs	r3, #15
      _s = s;
    8748:	strb.w	r2, [r4, #900]	; 0x384
    874c:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8750:	str.w	r3, [r4, #904]	; 0x388
      _s = s;
      _b = b;
    8754:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8758:	strb.w	r2, [r4, #924]	; 0x39c
    875c:	mvn.w	r2, #23
      _b = b;
    8760:	strb.w	r3, [r4, #909]	; 0x38d
    8764:	strb.w	r3, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8768:	movs	r3, #3
      _s = s;
    876a:	strb.w	r2, [r4, #932]	; 0x3a4
      _b = b;
    876e:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8772:	str.w	r3, [r4, #920]	; 0x398
    8776:	movs	r3, #7
      _s = s;
    8778:	strb.w	r0, [r4, #884]	; 0x374
      _b = b;
    877c:	strb.w	r9, [r4, #885]	; 0x375
    8780:	strb.w	r9, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8784:	strb.w	r0, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8788:	str.w	r3, [r4, #928]	; 0x3a0
    878c:	movw	r3, #355	; 0x163
    8790:	str.w	r8, [r4, #872]	; 0x368
    8794:	str.w	r8, [r4, #912]	; 0x390
      _s = s;
      _b = b;
    8798:	strb.w	sl, [r4, #925]	; 0x39d
    879c:	strb.w	r2, [r4, #933]	; 0x3a5
    87a0:	mov.w	r2, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87a4:	str.w	r3, [r4, #944]	; 0x3b0
    87a8:	movw	r3, #359	; 0x167
      _s = s;
      _b = b;
    87ac:	strb.w	r2, [r4, #965]	; 0x3c5
    87b0:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87b4:	str.w	r3, [r4, #960]	; 0x3c0
      _s = s;
    87b8:	mov.w	r3, #4294967295
      _b = b;
    87bc:	strb.w	r2, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87c0:	mvn.w	r2, #10
    87c4:	strb.w	r3, [r4, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87c8:	movs	r3, #5
      _s = s;
    87ca:	strb.w	r2, [r4, #948]	; 0x3b4
      _b = b;
    87ce:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87d2:	str.w	r3, [r4, #968]	; 0x3c8
    87d6:	movs	r3, #4
      _s = s;
      _b = b;
    87d8:	strb.w	r2, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87dc:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87e0:	str.w	r3, [r4, #976]	; 0x3d0
      _s = s;
    87e4:	strb.w	r2, [r4, #972]	; 0x3cc
      _b = b;
    87e8:	mvn.w	r2, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87ec:	str.w	r3, [r4, #992]	; 0x3e0
    87f0:	movs	r3, #14
      _s = s;
      _b = b;
    87f2:	strb.w	r2, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87f6:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87fa:	str.w	r3, [r4, #1008]	; 0x3f0
    87fe:	movs	r3, #26
      _s = s;
    8800:	strb.w	r2, [r4, #980]	; 0x3d4
      _b = b;
    8804:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8808:	strb.w	r0, [r4, #940]	; 0x3ac
      _b = b;
    880c:	strb.w	r2, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8810:	mov.w	r2, #106	; 0x6a
      _b = b;
    8814:	strb.w	r9, [r4, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8818:	strb.w	r2, [r4, #988]	; 0x3dc
      _b = b;
    881c:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8820:	str.w	r3, [r4, #1016]	; 0x3f8
    8824:	movs	r3, #25
      _s = s;
      _b = b;
    8826:	strb.w	r2, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    882a:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    882e:	str.w	r5, [r4, #936]	; 0x3a8
      _s = s;
    8832:	strb.w	r2, [r4, #996]	; 0x3e4
    8836:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    883a:	str.w	r5, [r4, #952]	; 0x3b8
      _s = s;
    883e:	strb.w	r2, [r4, #1004]	; 0x3ec
      _b = b;
    8842:	mvn.w	r2, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8846:	strb.w	r5, [r4, #956]	; 0x3bc
      _b = b;
    884a:	strb.w	r2, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    884e:	mvn.w	r2, #24
      _b = b;
    8852:	strb.w	r5, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8856:	strb.w	r2, [r4, #1012]	; 0x3f4
      _b = b;
    885a:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    885e:	str.w	r8, [r4, #984]	; 0x3d8
      _s = s;
      _b = b;
    8862:	strb.w	r2, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8866:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    886a:	str.w	r5, [r4, #1000]	; 0x3e8
      _s = s;
    886e:	strb.w	r2, [r4, #1020]	; 0x3fc
      _b = b;
    8872:	mvn.w	r2, #7
    8876:	strb.w	r2, [r4, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    887a:	mov.w	r2, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    887e:	str.w	r3, [r4, #1024]	; 0x400
    8882:	movs	r3, #21
      _s = s;
    8884:	strb.w	r2, [r4, #1036]	; 0x40c
      _b = b;
    8888:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    888c:	str.w	r3, [r4, #1032]	; 0x408
    8890:	movs	r3, #14
      _s = s;
      _b = b;
    8892:	strb.w	r2, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8896:	mvn.w	r2, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    889a:	str.w	r3, [r4, #1040]	; 0x410
    889e:	movs	r3, #10
      _s = s;
    88a0:	strb.w	r2, [r4, #1044]	; 0x414
      _b = b;
    88a4:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88a8:	str.w	r3, [r4, #1048]	; 0x418
      _s = s;
    88ac:	mov.w	r3, #4294967295
      _b = b;
    88b0:	strb.w	r2, [r4, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88b4:	mvn.w	r2, #42	; 0x2a
    88b8:	strb.w	r3, [r4, #1060]	; 0x424
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88bc:	movs	r3, #8
      _s = s;
    88be:	strb.w	r2, [r4, #1052]	; 0x41c
      _b = b;
    88c2:	mvn.w	r2, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88c6:	str.w	r3, [r4, #1072]	; 0x430
    88ca:	movs	r3, #16
      _s = s;
      _b = b;
    88cc:	strb.w	r2, [r4, #1053]	; 0x41d
    88d0:	mov.w	r2, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88d4:	str.w	r3, [r4, #1080]	; 0x438
      _s = s;
      _b = b;
    88d8:	mov.w	r3, #4294967295
    88dc:	strb.w	r2, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88e0:	mvn.w	r2, #85	; 0x55
      _b = b;
    88e4:	strb.w	r3, [r4, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88e8:	movs	r3, #13
      _s = s;
    88ea:	strb.w	r2, [r4, #1068]	; 0x42c
      _b = b;
    88ee:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88f2:	str.w	r3, [r4, #1088]	; 0x440
      _s = s;
      _b = b;
    88f6:	mov.w	r3, #4294967295
    88fa:	strb.w	r2, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88fe:	mvn.w	r2, #90	; 0x5a
      _b = b;
    8902:	strb.w	r3, [r4, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8906:	movs	r3, #3
      _s = s;
    8908:	strb.w	r2, [r4, #1076]	; 0x434
    890c:	mvn.w	r2, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8910:	str.w	r3, [r4, #1104]	; 0x450
      _s = s;
      _b = b;
    8914:	mvn.w	r3, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8918:	strb.w	r2, [r4, #1084]	; 0x43c
    891c:	mvn.w	r2, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8920:	str.w	ip, [r4, #1056]	; 0x420
      _s = s;
    8924:	strb.w	r2, [r4, #1092]	; 0x444
    8928:	mov.w	r2, #127	; 0x7f
    892c:	strb.w	r0, [r4, #1028]	; 0x404
    8930:	strb.w	r2, [r4, #1100]	; 0x44c
    8934:	mvn.w	r2, #57	; 0x39
      _b = b;
    8938:	strb.w	r9, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    893c:	strb.w	r2, [r4, #1108]	; 0x454
    8940:	mvn.w	r2, #15
      _b = b;
    8944:	strb.w	r9, [r4, #1101]	; 0x44d
    8948:	strb.w	fp, [r4, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    894c:	str.w	r5, [r4, #1064]	; 0x428
    8950:	str.w	r8, [r4, #1096]	; 0x448
      _s = s;
      _b = b;
    8954:	strb.w	r3, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8958:	movw	r3, #357	; 0x165
      _s = s;
    895c:	strb.w	r2, [r4, #1116]	; 0x45c
      _b = b;
    8960:	mvn.w	r2, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8964:	str.w	r3, [r4, #1112]	; 0x458
    8968:	movs	r3, #1
      _s = s;
      _b = b;
    896a:	strb.w	r2, [r4, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    896e:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8972:	str.w	r3, [r4, #1120]	; 0x460
      _s = s;
    8976:	strb.w	r2, [r4, #1124]	; 0x464
      _b = b;
    897a:	mvn.w	r2, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    897e:	str.w	r3, [r4, #1128]	; 0x468
    8982:	movs	r3, #4
      _s = s;
      _b = b;
    8984:	strb.w	r2, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8988:	mov.w	r2, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    898c:	str.w	r3, [r4, #1136]	; 0x470
    8990:	mov.w	r3, #358	; 0x166
      _s = s;
    8994:	strb.w	r2, [r4, #1132]	; 0x46c
    8998:	mov.w	r2, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    899c:	str.w	r3, [r4, #1152]	; 0x480
    89a0:	movs	r3, #8
      _s = s;
    89a2:	strb.w	r2, [r4, #1140]	; 0x474
      _b = b;
    89a6:	mov.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89aa:	str.w	r3, [r4, #1160]	; 0x488
      _s = s;
      _b = b;
    89ae:	strb.w	r2, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89b2:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89b6:	str.w	r3, [r4, #1168]	; 0x490
    89ba:	movs	r3, #10
      _s = s;
    89bc:	strb.w	r2, [r4, #1156]	; 0x484
      _b = b;
    89c0:	mvn.w	r2, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89c4:	str.w	r3, [r4, #1176]	; 0x498
      _s = s;
      _b = b;
    89c8:	mov.w	r3, #4294967295
    89cc:	strb.w	r2, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89d0:	mvn.w	r2, #19
      _b = b;
    89d4:	strb.w	r3, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89d8:	movs	r3, #18
      _s = s;
    89da:	strb.w	r2, [r4, #1164]	; 0x48c
      _b = b;
    89de:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89e2:	str.w	r3, [r4, #1184]	; 0x4a0
      _s = s;
      _b = b;
    89e6:	mov.w	r3, #4294967295
    89ea:	strb.w	r2, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89ee:	mov.w	r2, #88	; 0x58
      _b = b;
    89f2:	strb.w	r3, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89f6:	movs	r3, #15
      _s = s;
    89f8:	strb.w	r2, [r4, #1172]	; 0x494
    89fc:	mvn.w	r2, #113	; 0x71
      _b = b;
    8a00:	strb.w	r9, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a04:	strb.w	r2, [r4, #1180]	; 0x49c
    8a08:	mvn.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a0c:	str.w	r3, [r4, #1192]	; 0x4a8
    8a10:	movw	r3, #359	; 0x167
      _s = s;
    8a14:	strb.w	r2, [r4, #1188]	; 0x4a4
    8a18:	mvn.w	r2, #23
    8a1c:	strb.w	r0, [r4, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a20:	str.w	r5, [r4, #1144]	; 0x478
      _s = s;
    8a24:	strb.w	r5, [r4, #1148]	; 0x47c
      _b = b;
    8a28:	strb.w	r5, [r4, #1149]	; 0x47d
    8a2c:	strb.w	fp, [r4, #1173]	; 0x495
    8a30:	strb.w	lr, [r4, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a34:	strb.w	r2, [r4, #1204]	; 0x4b4
      _b = b;
    8a38:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a3c:	str.w	r3, [r4, #1200]	; 0x4b0
    8a40:	movs	r3, #8
      _s = s;
      _b = b;
    8a42:	strb.w	r2, [r4, #1205]	; 0x4b5
    8a46:	mvn.w	r2, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a4a:	str.w	r3, [r4, #1208]	; 0x4b8
    8a4e:	movs	r3, #12
      _s = s;
      _b = b;
    8a50:	strb.w	r2, [r4, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a54:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a58:	str.w	r3, [r4, #1216]	; 0x4c0
    8a5c:	movs	r3, #5
      _s = s;
    8a5e:	strb.w	r2, [r4, #1220]	; 0x4c4
      _b = b;
    8a62:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a66:	str.w	r3, [r4, #1224]	; 0x4c8
    8a6a:	movw	r3, #357	; 0x165
      _s = s;
      _b = b;
    8a6e:	strb.w	r2, [r4, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a72:	mvn.w	r2, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a76:	str.w	r3, [r4, #1232]	; 0x4d0
      _s = s;
    8a7a:	mov.w	r3, #4294967295
    8a7e:	strb.w	r2, [r4, #1228]	; 0x4cc
      _b = b;
    8a82:	mvn.w	r2, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a86:	strb.w	r3, [r4, #1236]	; 0x4d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a8a:	movs	r3, #12
      _s = s;
      _b = b;
    8a8c:	strb.w	r2, [r4, #1229]	; 0x4cd
    8a90:	mvn.w	r2, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a94:	str.w	r3, [r4, #1240]	; 0x4d8
    8a98:	movs	r3, #11
      _s = s;
      _b = b;
    8a9a:	strb.w	r2, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a9e:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aa2:	str.w	r3, [r4, #1248]	; 0x4e0
    8aa6:	movs	r3, #14
      _s = s;
    8aa8:	strb.w	r2, [r4, #1244]	; 0x4dc
      _b = b;
    8aac:	mvn.w	r2, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ab0:	str.w	r3, [r4, #1256]	; 0x4e8
    8ab4:	movs	r3, #2
      _s = s;
      _b = b;
    8ab6:	strb.w	r2, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8aba:	mvn.w	r2, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8abe:	str.w	r3, [r4, #1272]	; 0x4f8
    8ac2:	movw	r3, #359	; 0x167
      _s = s;
    8ac6:	strb.w	r2, [r4, #1252]	; 0x4e4
      _b = b;
    8aca:	mvn.w	r2, #12
    8ace:	strb.w	r0, [r4, #1269]	; 0x4f5
    8ad2:	strb.w	r2, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ad6:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ada:	str.w	r3, [r4, #1280]	; 0x500
    8ade:	movs	r3, #1
      _s = s;
    8ae0:	strb.w	r2, [r4, #1260]	; 0x4ec
      _b = b;
    8ae4:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ae8:	strb.w	sl, [r4, #1212]	; 0x4bc
      _b = b;
    8aec:	strb.w	r2, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8af0:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8af4:	str.w	r5, [r4, #1264]	; 0x4f0
      _s = s;
    8af8:	strb.w	r2, [r4, #1268]	; 0x4f4
    8afc:	mvn.w	r2, #79	; 0x4f
    8b00:	strb.w	r2, [r4, #1276]	; 0x4fc
      _b = b;
    8b04:	mvn.w	r2, #5
    8b08:	strb.w	r2, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b0c:	mov.w	r2, #123	; 0x7b
    8b10:	strb.w	r2, [r4, #1284]	; 0x504
    8b14:	mov.w	r2, #93	; 0x5d
      _b = b;
    8b18:	strb.w	lr, [r4, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b1c:	strb.w	r2, [r4, #1316]	; 0x524
    8b20:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b24:	str.w	r3, [r4, #1296]	; 0x510
    8b28:	movs	r3, #4
      _s = s;
    8b2a:	strb.w	r2, [r4, #1292]	; 0x50c
    8b2e:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b32:	str.w	r3, [r4, #1312]	; 0x520
    8b36:	movs	r3, #8
      _s = s;
    8b38:	strb.w	r2, [r4, #1300]	; 0x514
      _b = b;
    8b3c:	mvn.w	r2, #13
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b40:	str.w	r3, [r4, #1320]	; 0x528
    8b44:	movs	r3, #2
      _s = s;
      _b = b;
    8b46:	strb.w	r2, [r4, #1301]	; 0x515
    8b4a:	mvn.w	r2, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b4e:	str.w	r3, [r4, #1344]	; 0x540
    8b52:	movs	r3, #11
      _s = s;
      _b = b;
    8b54:	strb.w	r2, [r4, #1309]	; 0x51d
    8b58:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b5c:	str.w	r3, [r4, #1352]	; 0x548
    8b60:	movs	r3, #9
      _s = s;
      _b = b;
    8b62:	strb.w	r2, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b66:	mvn.w	r2, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b6a:	str.w	r3, [r4, #1360]	; 0x550
    8b6e:	movs	r3, #15
      _s = s;
    8b70:	strb.w	r2, [r4, #1324]	; 0x52c
      _b = b;
    8b74:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b78:	str.w	ip, [r4, #1304]	; 0x518
      _s = s;
      _b = b;
    8b7c:	strb.w	r2, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b80:	mvn.w	r2, #14
      _b = b;
    8b84:	strb.w	r9, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b88:	strb.w	r2, [r4, #1348]	; 0x544
      _b = b;
    8b8c:	mvn.w	r2, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b90:	strb.w	lr, [r4, #1308]	; 0x51c
      _b = b;
    8b94:	strb.w	r2, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b98:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b9c:	str.w	r3, [r4, #1368]	; 0x558
    8ba0:	movs	r3, #16
      _s = s;
    8ba2:	strb.w	r2, [r4, #1356]	; 0x54c
    8ba6:	mvn.w	r2, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8baa:	str.w	r5, [r4, #1288]	; 0x508
      _s = s;
    8bae:	strb.w	r2, [r4, #1364]	; 0x554
      _b = b;
    8bb2:	mvn.w	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bb6:	str.w	r5, [r4, #1328]	; 0x530
      _s = s;
      _b = b;
    8bba:	strb.w	r2, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bbe:	mvn.w	r2, #11
    8bc2:	strb.w	r5, [r4, #1332]	; 0x534
    8bc6:	strb.w	r2, [r4, #1372]	; 0x55c
      _b = b;
    8bca:	mvn.w	r2, #79	; 0x4f
    8bce:	strb.w	r5, [r4, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bd2:	str.w	r5, [r4, #1336]	; 0x538
      _s = s;
    8bd6:	strb.w	r5, [r4, #1340]	; 0x53c
      _b = b;
    8bda:	strb.w	r5, [r4, #1341]	; 0x53d
    8bde:	strb.w	fp, [r4, #1357]	; 0x54d
    8be2:	strb.w	r2, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8be6:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bea:	str.w	r3, [r4, #1376]	; 0x560
    8bee:	movs	r3, #14
      _s = s;
    8bf0:	strb.w	r2, [r4, #1380]	; 0x564
      _b = b;
    8bf4:	mvn.w	r2, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bf8:	str.w	r3, [r4, #1384]	; 0x568
      _s = s;
      _b = b;
    8bfc:	mov.w	r3, #4294967295
    8c00:	strb.w	r2, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c04:	mvn.w	r2, #41	; 0x29
      _b = b;
    8c08:	strb.w	r3, [r4, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c0c:	movs	r3, #8
      _s = s;
    8c0e:	strb.w	r2, [r4, #1388]	; 0x56c
    8c12:	mvn.w	r2, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c16:	str.w	r3, [r4, #1392]	; 0x570
    8c1a:	mov.w	r3, #354	; 0x162
      _s = s;
    8c1e:	strb.w	r2, [r4, #1396]	; 0x574
      _b = b;
    8c22:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c26:	str.w	r3, [r4, #1400]	; 0x578
      _s = s;
    8c2a:	mov.w	r3, #4294967295
      _b = b;
    8c2e:	strb.w	r2, [r4, #1405]	; 0x57d
    8c32:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c36:	strb.w	r3, [r4, #1404]	; 0x57c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c3a:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    8c3e:	strb.w	r2, [r4, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c42:	mvn.w	r2, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c46:	str.w	r3, [r4, #1408]	; 0x580
      _s = s;
    8c4a:	mov.w	r3, #4294967295
    8c4e:	strb.w	r2, [r4, #1420]	; 0x58c
      _b = b;
    8c52:	mvn.w	r2, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c56:	strb.w	r3, [r4, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c5a:	mov.w	r3, #354	; 0x162
      _s = s;
      _b = b;
    8c5e:	strb.w	r2, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c62:	mvn.w	r2, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c66:	str.w	r3, [r4, #1416]	; 0x588
    8c6a:	movs	r3, #11
      _s = s;
    8c6c:	strb.w	r2, [r4, #1428]	; 0x594
      _b = b;
    8c70:	mvn.w	r2, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c74:	str.w	r3, [r4, #1424]	; 0x590
    8c78:	movs	r3, #21
      _s = s;
      _b = b;
    8c7a:	strb.w	r2, [r4, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c7e:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c82:	str.w	r3, [r4, #1432]	; 0x598
    8c86:	movs	r3, #26
      _s = s;
    8c88:	strb.w	r2, [r4, #1436]	; 0x59c
      _b = b;
    8c8c:	mvn.w	r2, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c90:	str.w	r3, [r4, #1440]	; 0x5a0
    8c94:	movs	r3, #25
      _s = s;
      _b = b;
    8c96:	strb.w	r2, [r4, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c9a:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c9e:	str.w	r3, [r4, #1448]	; 0x5a8
    8ca2:	movs	r3, #15
      _s = s;
    8ca4:	strb.w	r2, [r4, #1444]	; 0x5a4
      _b = b;
    8ca8:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cac:	str.w	r3, [r4, #1456]	; 0x5b0
    8cb0:	mov.w	r3, #358	; 0x166
      _s = s;
      _b = b;
    8cb4:	strb.w	r2, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cb8:	mvn.w	r2, #24
      _b = b;
    8cbc:	strb.w	fp, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cc0:	strb.w	r2, [r4, #1452]	; 0x5ac
      _b = b;
    8cc4:	mvn.w	r2, #13
    8cc8:	strb.w	r2, [r4, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ccc:	mvn.w	r2, #15
    8cd0:	strb.w	r2, [r4, #1460]	; 0x5b4
      _b = b;
    8cd4:	strb.w	r2, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cd8:	mvn.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cdc:	str.w	r3, [r4, #1464]	; 0x5b8
    8ce0:	movw	r3, #359	; 0x167
      _s = s;
    8ce4:	strb.w	r2, [r4, #1508]	; 0x5e4
    8ce8:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cec:	str.w	r3, [r4, #1480]	; 0x5c8
    8cf0:	movs	r3, #1
      _s = s;
    8cf2:	strb.w	r2, [r4, #1468]	; 0x5bc
      _b = b;
    8cf6:	mvn.w	r2, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cfa:	str.w	r3, [r4, #1488]	; 0x5d0
    8cfe:	movs	r3, #12
      _s = s;
      _b = b;
    8d00:	strb.w	r2, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d04:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d08:	str.w	r3, [r4, #1504]	; 0x5e0
      _s = s;
      _b = b;
    8d0c:	mov.w	r3, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d10:	strb.w	r2, [r4, #1476]	; 0x5c4
      _b = b;
    8d14:	mvn.w	r2, #43	; 0x2b
    8d18:	strb.w	r3, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d1c:	movs	r3, #18
      _s = s;
      _b = b;
    8d1e:	strb.w	r2, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d22:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d26:	str.w	r3, [r4, #1512]	; 0x5e8
    8d2a:	movs	r3, #9
      _s = s;
    8d2c:	strb.w	r2, [r4, #1484]	; 0x5cc
      _b = b;
    8d30:	mvn.w	r2, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d34:	str.w	r3, [r4, #1536]	; 0x600
    8d38:	movs	r3, #8
      _s = s;
      _b = b;
    8d3a:	strb.w	r2, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d3e:	mvn.w	r2, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d42:	str.w	ip, [r4, #1472]	; 0x5c0
      _s = s;
    8d46:	strb.w	r2, [r4, #1492]	; 0x5d4
      _b = b;
    8d4a:	mvn.w	r2, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d4e:	str.w	ip, [r4, #1496]	; 0x5d8
      _s = s;
      _b = b;
    8d52:	strb.w	r2, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d56:	mvn.w	r2, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d5a:	str.w	r3, [r4, #1544]	; 0x608
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 4
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 5
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    8d5e:	movs	r3, #82	; 0x52
      _s = s;
    8d60:	strb.w	r2, [r4, #1500]	; 0x5dc
      _b = b;
    8d64:	mvn.w	r2, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d68:	str.w	r5, [r4, #1520]	; 0x5f0
      _s = s;
      _b = b;
    8d6c:	strb.w	r2, [r4, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d70:	mvn.w	r2, #28
    8d74:	strb.w	r5, [r4, #1524]	; 0x5f4
    8d78:	strb.w	r2, [r4, #1516]	; 0x5ec
      _b = b;
    8d7c:	mvn.w	r2, #115	; 0x73
    8d80:	strb.w	r5, [r4, #1525]	; 0x5f5
    8d84:	strb.w	r2, [r4, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d88:	mvn.w	r2, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d8c:	str.w	r5, [r4, #1528]	; 0x5f8
      _s = s;
    8d90:	strb.w	r2, [r4, #1540]	; 0x604
      _b = b;
    8d94:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d98:	strb.w	r5, [r4, #1532]	; 0x5fc
      _b = b;
    8d9c:	strb.w	r2, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8da0:	mvn.w	r2, #74	; 0x4a
      _b = b;
    8da4:	strb.w	r5, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8da8:	strb.w	r2, [r4, #1548]	; 0x60c
      _b = b;
    8dac:	mvn.w	r2, #16
    8db0:	strb.w	r2, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8db4:	mvn.w	r2, #53	; 0x35
    8db8:	strb.w	fp, [r4, #1612]	; 0x64c
    8dbc:	strb.w	r2, [r4, #1588]	; 0x634
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dc0:	movs	r2, #12
    8dc2:	str.w	r2, [r4, #1552]	; 0x610
      _s = s;
    8dc6:	mvn.w	r2, #77	; 0x4d
    8dca:	strb.w	r2, [r4, #1556]	; 0x614
      _b = b;
    8dce:	mvn.w	r2, #55	; 0x37
    8dd2:	strb.w	r2, [r4, #1557]	; 0x615
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dd6:	movs	r2, #18
    8dd8:	str.w	r2, [r4, #1560]	; 0x618
      _s = s;
    8ddc:	mov.w	r2, #4294967295
    8de0:	strb.w	r2, [r4, #1564]	; 0x61c
      _b = b;
    8de4:	mov.w	r2, #68	; 0x44
    8de8:	strb.w	r2, [r4, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dec:	movs	r2, #15
    8dee:	str.w	r2, [r4, #1568]	; 0x620
      _s = s;
    8df2:	mvn.w	r2, #28
    8df6:	strb.w	r2, [r4, #1572]	; 0x624
      _b = b;
    8dfa:	mvn.w	r2, #22
    8dfe:	strb.w	r2, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e02:	movs	r2, #12
    8e04:	str.w	r2, [r4, #1576]	; 0x628
      _s = s;
    8e08:	mvn.w	r2, #57	; 0x39
    8e0c:	strb.w	r2, [r4, #1580]	; 0x62c
      _b = b;
    8e10:	mov.w	r2, #4294967295
    8e14:	strb.w	r2, [r4, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e18:	movs	r2, #11
    8e1a:	str.w	r2, [r4, #1584]	; 0x630
      _s = s;
      _b = b;
    8e1e:	mov.w	r2, #4294967295
    8e22:	strb.w	r2, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e26:	movw	r2, #355	; 0x163
    8e2a:	str.w	r2, [r4, #1592]	; 0x638
      _s = s;
    8e2e:	mvn.w	r2, #8
    8e32:	strb.w	r2, [r4, #1596]	; 0x63c
      _b = b;
    8e36:	mvn.w	r2, #38	; 0x26
    8e3a:	strb.w	r2, [r4, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e3e:	movw	r2, #355	; 0x163
    8e42:	str.w	r2, [r4, #1600]	; 0x640
      _s = s;
    8e46:	mov.w	r2, #4294967295
    8e4a:	strb.w	r2, [r4, #1604]	; 0x644
      _b = b;
    8e4e:	mvn.w	r2, #56	; 0x38
    8e52:	strb.w	r2, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e56:	movw	r2, #355	; 0x163
    8e5a:	str.w	r2, [r4, #1608]	; 0x648
      _s = s;
      _b = b;
    8e5e:	mvn.w	r2, #48	; 0x30
    8e62:	strb.w	r2, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e66:	movs	r2, #9
    8e68:	str.w	r2, [r4, #1616]	; 0x650
      _s = s;
    8e6c:	mvn.w	r2, #61	; 0x3d
    8e70:	strb.w	r2, [r4, #1620]	; 0x654
      _b = b;
    8e74:	mvn.w	r2, #24
    8e78:	strb.w	r2, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e7c:	movs	r2, #20
    8e7e:	str.w	r2, [r4, #1624]	; 0x658
      _s = s;
    8e82:	mov.w	r2, #4294967295
    8e86:	strb.w	r2, [r4, #1628]	; 0x65c
      _b = b;
    8e8a:	mvn.w	r2, #71	; 0x47
    8e8e:	strb.w	r2, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e92:	movs	r2, #26
    8e94:	str.w	r2, [r4, #1632]	; 0x660
      _s = s;
    8e98:	mvn.w	r2, #2
    8e9c:	strb.w	r2, [r4, #1636]	; 0x664
      _b = b;
    8ea0:	mvn.w	r2, #25
    8ea4:	strb.w	r2, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea8:	movs	r2, #19
      _s = s;
      _b = b;
    8eaa:	strb.w	r9, [r4, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eae:	str.w	r2, [r4, #1640]	; 0x668
      _s = s;
    8eb2:	mvn.w	r2, #2
    8eb6:	strb.w	r7, [r4, #1692]	; 0x69c
    8eba:	strb.w	r2, [r4, #1644]	; 0x66c
      _b = b;
    8ebe:	mvn.w	r2, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ec2:	str.w	r5, [r4, #1664]	; 0x680
      _s = s;
      _b = b;
    8ec6:	strb.w	r2, [r4, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eca:	movs	r2, #22
    8ecc:	str.w	r5, [r4, #1704]	; 0x6a8
    8ed0:	str.w	r2, [r4, #1648]	; 0x670
      _s = s;
    8ed4:	mvn.w	r2, #66	; 0x42
    8ed8:	strb.w	r5, [r4, #1708]	; 0x6ac
    8edc:	strb.w	r2, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ee0:	movs	r2, #12
      _s = s;
      _b = b;
    8ee2:	strb.w	r5, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ee6:	str.w	r2, [r4, #1656]	; 0x678
      _s = s;
    8eea:	mvn.w	r2, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eee:	str.w	r5, [r4, #1712]	; 0x6b0
      _s = s;
    8ef2:	strb.w	r2, [r4, #1660]	; 0x67c
      _b = b;
    8ef6:	strb.w	r2, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8efa:	mvn.w	r2, #13
    8efe:	strb.w	r5, [r4, #1716]	; 0x6b4
    8f02:	strb.w	r2, [r4, #1668]	; 0x684
      _b = b;
    8f06:	mvn.w	r2, #57	; 0x39
    8f0a:	strb.w	r5, [r4, #1717]	; 0x6b5
    8f0e:	strb.w	r2, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f12:	movs	r2, #4
    8f14:	str.w	r5, [r4, #1720]	; 0x6b8
    8f18:	str.w	r2, [r4, #1672]	; 0x688
      _s = s;
    8f1c:	mvn.w	r2, #21
    8f20:	strb.w	r5, [r4, #1724]	; 0x6bc
    8f24:	strb.w	r2, [r4, #1676]	; 0x68c
      _b = b;
    8f28:	mvn.w	r2, #35	; 0x23
    8f2c:	strb.w	r2, [r4, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f30:	movs	r2, #16
    8f32:	str.w	r2, [r4, #1680]	; 0x690
      _s = s;
    8f36:	mvn.w	r2, #35	; 0x23
    8f3a:	strb.w	r2, [r4, #1684]	; 0x694
      _b = b;
    8f3e:	mvn.w	r2, #9
    8f42:	strb.w	r2, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f46:	movs	r2, #3
    8f48:	str.w	r2, [r4, #1688]	; 0x698
      _s = s;
      _b = b;
    8f4c:	mvn.w	r2, #20
    8f50:	strb.w	r2, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f54:	movs	r2, #13
    8f56:	str.w	r2, [r4, #1696]	; 0x6a0
      _s = s;
    8f5a:	mvn.w	r2, #31
    8f5e:	strb.w	r2, [r4, #1700]	; 0x6a4
      _b = b;
    8f62:	strb.w	r2, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f66:	movs	r2, #10
      _s = s;
      _b = b;
    8f68:	strb.w	r5, [r4, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f6c:	str.w	r2, [r4, #1728]	; 0x6c0
      _s = s;
      _b = b;
    8f70:	mvn.w	r2, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f74:	str.w	ip, [r4, #1792]	; 0x700
      _s = s;
      _b = b;
    8f78:	strb.w	r2, [r4, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f7c:	movs	r2, #1
      _s = s;
    8f7e:	strb.w	r7, [r4, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f82:	str.w	r2, [r4, #1736]	; 0x6c8
      _s = s;
    8f86:	mvn.w	r2, #82	; 0x52
    8f8a:	strb.w	fp, [r4, #1756]	; 0x6dc
    8f8e:	strb.w	r2, [r4, #1740]	; 0x6cc
      _b = b;
    8f92:	mvn.w	r2, #63	; 0x3f
    8f96:	strb.w	r2, [r4, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f9a:	movs	r2, #8
    8f9c:	str.w	r2, [r4, #1744]	; 0x6d0
      _s = s;
    8fa0:	mvn.w	r2, #83	; 0x53
    8fa4:	strb.w	r2, [r4, #1748]	; 0x6d4
      _b = b;
    8fa8:	mvn.w	r2, #60	; 0x3c
    8fac:	strb.w	r2, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fb0:	movs	r2, #23
    8fb2:	str.w	r2, [r4, #1752]	; 0x6d8
    8fb6:	movs	r2, #11
    8fb8:	str.w	r2, [r4, #1760]	; 0x6e0
      _s = s;
    8fbc:	mvn.w	r2, #11
    8fc0:	strb.w	r2, [r4, #1764]	; 0x6e4
      _b = b;
    8fc4:	mvn.w	r2, #79	; 0x4f
    8fc8:	strb.w	r2, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fcc:	movs	r2, #12
    8fce:	str.w	r2, [r4, #1768]	; 0x6e8
      _s = s;
    8fd2:	mvn.w	r2, #42	; 0x2a
    8fd6:	strb.w	r2, [r4, #1772]	; 0x6ec
      _b = b;
    8fda:	mov.w	r2, #4294967295
    8fde:	strb.w	r2, [r4, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fe2:	movs	r2, #10
    8fe4:	str.w	r2, [r4, #1776]	; 0x6f0
      _s = s;
    8fe8:	mvn.w	r2, #36	; 0x24
    8fec:	strb.w	r2, [r4, #1780]	; 0x6f4
      _b = b;
    8ff0:	mov.w	r2, #4294967295
    8ff4:	strb.w	r2, [r4, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ff8:	movw	r2, #355	; 0x163
    8ffc:	str.w	r2, [r4, #1784]	; 0x6f8
      _s = s;
    9000:	mvn.w	r2, #5
    9004:	strb.w	r2, [r4, #1788]	; 0x6fc
      _b = b;
    9008:	mvn.w	r2, #40	; 0x28
    900c:	strb.w	r2, [r4, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9010:	mov.w	r2, #4294967295
    9014:	strb.w	r2, [r4, #1796]	; 0x704
      _b = b;
    9018:	mvn.w	r2, #86	; 0x56
    901c:	strb.w	r2, [r4, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9020:	movs	r2, #2
    9022:	str.w	r2, [r4, #1800]	; 0x708
      _s = s;
    9026:	mvn.w	r2, #31
    902a:	strb.w	r2, [r4, #1804]	; 0x70c
      _b = b;
    902e:	mvn.w	r2, #57	; 0x39
    9032:	strb.w	r2, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9036:	movs	r2, #12
    9038:	str.w	r2, [r4, #1808]	; 0x710
      _s = s;
    903c:	mvn.w	r2, #21
    9040:	strb.w	r2, [r4, #1812]	; 0x714
      _b = b;
    9044:	mov.w	r2, #64	; 0x40
    9048:	strb.w	r2, [r4, #1757]	; 0x6dd
    904c:	movs	r2, #8
    904e:	strb.w	r1, [r4, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9052:	movs	r1, #48	; 0x30
      _s = s;
      _b = b;
    9054:	strb.w	r0, [r4, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9058:	movs	r0, #2
    905a:	str.w	r6, [r4, #1816]	; 0x718
      _s = s;
    905e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9062:	str.w	r0, [r4, #1856]	; 0x740
      _s = s;
    9066:	mvn.w	r0, #15
    906a:	strb.w	r6, [r4, #1820]	; 0x71c
      _b = b;
    906e:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9072:	strb.w	r0, [r4, #1860]	; 0x744
      _b = b;
    9076:	mvn.w	r0, #42	; 0x2a
    907a:	strb.w	r6, [r4, #1821]	; 0x71d
    907e:	mov.w	r6, #127	; 0x7f
    9082:	strb.w	r0, [r4, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9086:	mvn.w	r0, #21
      _b = b;
    908a:	strb.w	r6, [r4, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    908e:	movs	r6, #17
      _s = s;
    9090:	strb.w	r0, [r4, #1868]	; 0x74c
      _b = b;
    9094:	mvn.w	r0, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9098:	mov	r7, r6
    909a:	str.w	r6, [r4, #1832]	; 0x728
      _s = s;
      _b = b;
    909e:	strb.w	r0, [r4, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a2:	movs	r0, #16
      _s = s;
    90a4:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a8:	str.w	r7, [r4, #1840]	; 0x730
    90ac:	str.w	r0, [r4, #1872]	; 0x750
      _s = s;
    90b0:	mvn.w	r0, #18
    90b4:	strb.w	r6, [r4, #1836]	; 0x72c
      _b = b;
    90b8:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90bc:	strb.w	r0, [r4, #1876]	; 0x754
      _b = b;
    90c0:	mvn.w	r0, #5
    90c4:	strb.w	r6, [r4, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90c8:	mvn.w	r6, #111	; 0x6f
      _b = b;
    90cc:	strb.w	r0, [r4, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90d0:	movs	r0, #13
      _s = s;
    90d2:	strb.w	r6, [r4, #1844]	; 0x734
      _b = b;
    90d6:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90da:	str.w	r0, [r4, #1880]	; 0x758
      _s = s;
    90de:	mvn.w	r0, #34	; 0x22
      _b = b;
    90e2:	strb.w	r6, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90e6:	movs	r6, #10
      _s = s;
    90e8:	strb.w	r0, [r4, #1884]	; 0x75c
      _b = b;
    90ec:	mvn.w	r0, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90f0:	mov	r7, r6
    90f2:	str.w	r6, [r4, #1848]	; 0x738
      _s = s;
      _b = b;
    90f6:	strb.w	r0, [r4, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90fa:	mvn.w	r6, #25
    90fe:	strb.w	r0, [r4, #1892]	; 0x764
      _b = b;
    9102:	mvn.w	r0, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9106:	str.w	r1, [r4, #1824]	; 0x720
    910a:	mov.w	r1, #576	; 0x240
      _s = s;
    910e:	strb.w	lr, [r4, #1828]	; 0x724
    9112:	strb.w	r6, [r4, #1852]	; 0x73c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9116:	str.w	r7, [r4, #1864]	; 0x748
      _s = s;
      _b = b;
    911a:	strb.w	r0, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    911e:	mvn.w	r0, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9122:	str.w	r5, [r4, #1888]	; 0x760
    9126:	str.w	r5, [r4, #1896]	; 0x768
      _s = s;
    912a:	strb.w	r5, [r4, #1900]	; 0x76c
      _b = b;
    912e:	strb.w	r5, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9132:	strb.w	r6, [r4, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9136:	movs	r6, #14
      _s = s;
    9138:	strb.w	r0, [r4, #1924]	; 0x784
      _b = b;
    913c:	mvn.w	r0, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9140:	str.w	r6, [r4, #1952]	; 0x7a0
      _s = s;
    9144:	mvn.w	r6, #7
      _b = b;
    9148:	strb.w	r0, [r4, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    914c:	movw	r0, #355	; 0x163
      _s = s;
    9150:	strb.w	r6, [r4, #1956]	; 0x7a4
      _b = b;
    9154:	mvn.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9158:	str.w	r0, [r4, #1928]	; 0x788
      _s = s;
    915c:	mov.w	r0, #4294967295
      _b = b;
    9160:	strb.w	r6, [r4, #1957]	; 0x7a5
    9164:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9168:	strb.w	r0, [r4, #1932]	; 0x78c
      _b = b;
    916c:	mvn.w	r0, #76	; 0x4c
    9170:	strb.w	r6, [r4, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9174:	movs	r6, #3
    9176:	str.w	r7, [r4, #1920]	; 0x780
    917a:	str.w	r6, [r4, #1968]	; 0x7b0
      _s = s;
      _b = b;
    917e:	mvn.w	r6, #7
    9182:	strb.w	r0, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9186:	movs	r0, #5
      _s = s;
      _b = b;
    9188:	strb.w	r6, [r4, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    918c:	movs	r6, #1
    918e:	str.w	r0, [r4, #1936]	; 0x790
      _s = s;
      _b = b;
    9192:	mvn.w	r0, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9196:	mov	r7, r6
    9198:	str.w	r6, [r4, #1976]	; 0x7b8
      _s = s;
    919c:	mvn.w	r6, #28
      _b = b;
    91a0:	strb.w	r0, [r4, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a4:	movs	r0, #17
    91a6:	str.w	ip, [r4, #1984]	; 0x7c0
      _s = s;
    91aa:	strb.w	r6, [r4, #1980]	; 0x7bc
      _b = b;
    91ae:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91b2:	str.w	r0, [r4, #1944]	; 0x798
      _s = s;
      _b = b;
    91b6:	mov.w	r0, #113	; 0x71
    91ba:	strb.w	r6, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91be:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91c2:	str.w	r2, [r4, #1960]	; 0x7a8
      _s = s;
    91c6:	strb.w	r6, [r4, #1988]	; 0x7c4
      _b = b;
    91ca:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91ce:	strb.w	lr, [r4, #1948]	; 0x79c
      _b = b;
    91d2:	strb.w	r0, [r4, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91d6:	str.w	r5, [r4, #1904]	; 0x770
      _s = s;
    91da:	strb.w	r5, [r4, #1908]	; 0x774
      _b = b;
    91de:	strb.w	r5, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91e2:	str.w	r5, [r4, #1912]	; 0x778
      _s = s;
    91e6:	strb.w	r5, [r4, #1916]	; 0x77c
      _b = b;
    91ea:	strb.w	r5, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    91ee:	strb.w	sl, [r4, #1964]	; 0x7ac
    91f2:	strb.w	sl, [r4, #1972]	; 0x7b4
      _b = b;
    91f6:	strb.w	r6, [r4, #1989]	; 0x7c5
    91fa:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91fe:	str.w	r7, [r4, #1992]	; 0x7c8
      _s = s;
      _b = b;
    9202:	strb.w	r6, [r4, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9206:	mvn.w	r6, #37	; 0x25
    920a:	strb.w	lr, [r4, #2012]	; 0x7dc
    920e:	strb.w	r6, [r4, #1996]	; 0x7cc
      _b = b;
    9212:	mvn.w	r6, #61	; 0x3d
    9216:	ldr	r0, [pc, #1012]	; (960c <_GLOBAL__sub_I_bri_level+0x4444>)
    9218:	strb.w	r6, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    921c:	movs	r6, #11
    921e:	str.w	r6, [r4, #2000]	; 0x7d0
      _s = s;
    9222:	mvn.w	r6, #15
    9226:	strb.w	r6, [r4, #2004]	; 0x7d4
      _b = b;
    922a:	mvn.w	r6, #63	; 0x3f
    922e:	strb.w	r6, [r4, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9232:	movs	r6, #18
    9234:	str.w	r6, [r4, #2008]	; 0x7d8
    9238:	movs	r6, #42	; 0x2a
    923a:	str.w	r6, [r4, #2016]	; 0x7e0
      _s = s;
    923e:	mvn.w	r6, #2
    9242:	strb.w	r6, [r4, #2020]	; 0x7e4
      _b = b;
    9246:	mvn.w	r6, #117	; 0x75
    924a:	strb.w	r6, [r4, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    924e:	movs	r6, #16
    9250:	mov	r7, r6
    9252:	str.w	r6, [r4, #2024]	; 0x7e8
      _s = s;
    9256:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    925a:	str.w	r7, [r4, #2032]	; 0x7f0
      _s = s;
    925e:	strb.w	r6, [r4, #2028]	; 0x7ec
      _b = b;
    9262:	mvn.w	r6, #98	; 0x62
    9266:	strb.w	r6, [r4, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    926a:	mvn.w	r6, #78	; 0x4e
    926e:	strb.w	r6, [r4, #2036]	; 0x7f4
      _b = b;
    9272:	mvn.w	r6, #7
    9276:	strb.w	r6, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    927a:	movs	r6, #1
    927c:	str.w	r6, [r4, #2040]	; 0x7f8
      _s = s;
    9280:	mvn.w	r6, #24
    9284:	strb.w	r6, [r4, #2044]	; 0x7fc
      _b = b;
    9288:	mvn.w	r6, #45	; 0x2d
    928c:	strb.w	r6, [r4, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9290:	movw	r6, #355	; 0x163
    9294:	str.w	r6, [r4, #2048]	; 0x800
      _s = s;
    9298:	mvn.w	r6, #2
    929c:	strb.w	r6, [r4, #2052]	; 0x804
      _b = b;
    92a0:	mvn.w	r6, #62	; 0x3e
    92a4:	strb.w	r6, [r4, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92a8:	movs	r6, #11
    92aa:	str.w	r6, [r4, #2056]	; 0x808
      _s = s;
    92ae:	mvn.w	r6, #20
    92b2:	strb.w	r6, [r4, #2060]	; 0x80c
      _b = b;
    92b6:	mvn.w	r6, #16
    92ba:	strb.w	r6, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92be:	movs	r6, #9
    92c0:	str.w	r6, [r4, #2064]	; 0x810
      _s = s;
    92c4:	mvn.w	r6, #66	; 0x42
    92c8:	strb.w	r6, [r4, #2068]	; 0x814
      _b = b;
    92cc:	mvn.w	r6, #9
    92d0:	strb.w	r6, [r4, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92d4:	movs	r6, #22
    92d6:	str.w	r6, [r4, #2072]	; 0x818
      _s = s;
    92da:	mvn.w	r6, #16
    92de:	strb.w	r6, [r4, #2076]	; 0x81c
      _b = b;
    92e2:	mvn.w	r6, #18
    92e6:	strb.w	r6, [r4, #2077]	; 0x81d
    92ea:	mvn.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92ee:	str.w	ip, [r4, #2120]	; 0x848
      _s = s;
      _b = b;
    92f2:	strb.w	r6, [r4, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92f6:	movs	r6, #3
    92f8:	str.w	r5, [r4, #2080]	; 0x820
    92fc:	str.w	r6, [r4, #2112]	; 0x840
      _s = s;
    9300:	mvn.w	r6, #107	; 0x6b
    9304:	strb.w	r5, [r4, #2084]	; 0x824
    9308:	strb.w	r6, [r4, #2116]	; 0x844
    930c:	mvn.w	r6, #2
      _b = b;
    9310:	strb.w	r5, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9314:	strb.w	r6, [r4, #2124]	; 0x84c
      _b = b;
    9318:	mvn.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    931c:	str.w	r5, [r4, #2088]	; 0x828
      _s = s;
      _b = b;
    9320:	strb.w	r6, [r4, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9324:	movw	r6, #357	; 0x165
      _s = s;
    9328:	strb.w	r5, [r4, #2092]	; 0x82c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    932c:	str.w	r6, [r4, #2128]	; 0x850
      _s = s;
    9330:	mvn.w	r6, #15
      _b = b;
    9334:	strb.w	r5, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9338:	strb.w	r6, [r4, #2132]	; 0x854
      _b = b;
    933c:	strb.w	r6, [r4, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9340:	movs	r6, #3
    9342:	str.w	r5, [r4, #2096]	; 0x830
    9346:	str.w	r6, [r4, #2136]	; 0x858
      _s = s;
    934a:	mvn.w	r6, #22
    934e:	strb.w	r5, [r4, #2100]	; 0x834
    9352:	strb.w	r6, [r4, #2140]	; 0x85c
      _b = b;
    9356:	mvn.w	r6, #34	; 0x22
    935a:	strb.w	r5, [r4, #2101]	; 0x835
    935e:	strb.w	r6, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9362:	movs	r6, #11
    9364:	str.w	r5, [r4, #2104]	; 0x838
    9368:	mov	r7, r6
    936a:	str.w	r6, [r4, #2144]	; 0x860
      _s = s;
    936e:	mvn.w	r6, #23
    9372:	strb.w	r5, [r4, #2108]	; 0x83c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9376:	str.w	r7, [r4, #2152]	; 0x868
      _s = s;
    937a:	strb.w	r6, [r4, #2148]	; 0x864
      _b = b;
    937e:	mvn.w	r6, #20
    9382:	strb.w	r5, [r4, #2109]	; 0x83d
    9386:	strb.w	r6, [r4, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    938a:	mvn.w	r6, #20
    938e:	strb.w	r6, [r4, #2156]	; 0x86c
      _b = b;
    9392:	mvn.w	r6, #6
    9396:	strb.w	r6, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    939a:	movs	r6, #13
    939c:	str.w	r6, [r4, #2160]	; 0x870
      _s = s;
    93a0:	mvn.w	r6, #21
    93a4:	strb.w	r6, [r4, #2164]	; 0x874
      _b = b;
    93a8:	mvn.w	r6, #7
    93ac:	strb.w	r6, [r4, #2165]	; 0x875
    93b0:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93b4:	str.w	ip, [r4, #2176]	; 0x880
      _s = s;
      _b = b;
    93b8:	strb.w	r6, [r4, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93bc:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93c0:	str.w	r8, [r4, #2168]	; 0x878
      _s = s;
    93c4:	strb.w	r6, [r4, #2172]	; 0x87c
    93c8:	mov.w	r6, #4294967295
      _b = b;
    93cc:	strb.w	sl, [r4, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93d0:	strb.w	r6, [r4, #2180]	; 0x884
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93d4:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    93d8:	strb.w	sl, [r4, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93dc:	str.w	r6, [r4, #2184]	; 0x888
      _s = s;
    93e0:	mov.w	r6, #4294967295
    93e4:	strb.w	r6, [r4, #2188]	; 0x88c
      _b = b;
    93e8:	mvn.w	r6, #76	; 0x4c
    93ec:	strb.w	r6, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93f0:	movs	r6, #10
    93f2:	str.w	r6, [r4, #2192]	; 0x890
      _s = s;
    93f6:	mvn.w	r6, #26
    93fa:	strb.w	r6, [r4, #2196]	; 0x894
      _b = b;
    93fe:	mvn.w	r6, #31
    9402:	strb.w	r6, [r4, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9406:	movs	r6, #19
    9408:	str.w	r6, [r4, #2200]	; 0x898
      _s = s;
    940c:	mvn.w	r6, #28
    9410:	strb.w	r6, [r4, #2204]	; 0x89c
      _b = b;
    9414:	mvn.w	r6, #61	; 0x3d
    9418:	strb.w	r6, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    941c:	movs	r6, #21
    941e:	str.w	r6, [r4, #2208]	; 0x8a0
      _s = s;
    9422:	mvn.w	r6, #33	; 0x21
    9426:	strb.w	r6, [r4, #2212]	; 0x8a4
      _b = b;
    942a:	mvn.w	r6, #68	; 0x44
    942e:	strb.w	r6, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9432:	movs	r6, #16
    9434:	str.w	r6, [r4, #2216]	; 0x8a8
      _s = s;
    9438:	mvn.w	r6, #28
    943c:	strb.w	r6, [r4, #2220]	; 0x8ac
      _b = b;
    9440:	mvn.w	r6, #22
    9444:	strb.w	r6, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9448:	movs	r6, #7
    944a:	str.w	r6, [r4, #2224]	; 0x8b0
      _s = s;
    944e:	mvn.w	r6, #28
    9452:	strb.w	r6, [r4, #2228]	; 0x8b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9456:	movs	r6, #10
    9458:	str.w	r6, [r4, #2232]	; 0x8b8
      _s = s;
    945c:	mvn.w	r6, #45	; 0x2d
    9460:	strb.w	r6, [r4, #2236]	; 0x8bc
      _b = b;
    9464:	mvn.w	r6, #13
    9468:	strb.w	r6, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    946c:	movs	r6, #12
    946e:	mov	r7, r6
    9470:	str.w	r6, [r4, #2240]	; 0x8c0
      _s = s;
    9474:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9478:	str.w	r7, [r4, #2248]	; 0x8c8
      _s = s;
    947c:	strb.w	r6, [r4, #2244]	; 0x8c4
      _b = b;
    9480:	mvn.w	r6, #2
    9484:	strb.w	r6, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9488:	mvn.w	r6, #52	; 0x34
    948c:	strb.w	r6, [r4, #2252]	; 0x8cc
      _b = b;
    9490:	mvn.w	r6, #12
    9494:	strb.w	r6, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9498:	movs	r6, #19
    949a:	str.w	ip, [r4, #2312]	; 0x908
    949e:	str.w	r6, [r4, #2256]	; 0x8d0
      _s = s;
    94a2:	mvn.w	r6, #20
      _b = b;
    94a6:	strb.w	r9, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94aa:	strb.w	r6, [r4, #2260]	; 0x8d4
      _b = b;
    94ae:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94b2:	str.w	r5, [r4, #2272]	; 0x8e0
      _s = s;
      _b = b;
    94b6:	strb.w	r6, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94ba:	movs	r6, #10
      _s = s;
    94bc:	strb.w	r5, [r4, #2276]	; 0x8e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94c0:	str.w	r6, [r4, #2264]	; 0x8d8
      _s = s;
    94c4:	mvn.w	r6, #9
      _b = b;
    94c8:	strb.w	r5, [r4, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94cc:	strb.w	r6, [r4, #2268]	; 0x8dc
      _b = b;
    94d0:	mov.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94d4:	str.w	r5, [r4, #2280]	; 0x8e8
      _s = s;
      _b = b;
    94d8:	strb.w	r6, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94dc:	movs	r6, #2
      _s = s;
    94de:	strb.w	r5, [r4, #2284]	; 0x8ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94e2:	str.w	r6, [r4, #2304]	; 0x900
      _s = s;
    94e6:	mvn.w	r6, #111	; 0x6f
      _b = b;
    94ea:	strb.w	r5, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94ee:	strb.w	r6, [r4, #2308]	; 0x904
      _b = b;
    94f2:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94f6:	str.w	r5, [r4, #2288]	; 0x8f0
      _s = s;
      _b = b;
    94fa:	strb.w	r6, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94fe:	mov.w	r6, #4294967295
    9502:	strb.w	r5, [r4, #2292]	; 0x8f4
    9506:	strb.w	r6, [r4, #2316]	; 0x90c
      _b = b;
    950a:	mvn.w	r6, #84	; 0x54
    950e:	strb.w	r5, [r4, #2293]	; 0x8f5
    9512:	strb.w	r6, [r4, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9516:	movs	r6, #9
    9518:	str.w	r5, [r4, #2296]	; 0x8f8
    951c:	str.w	r6, [r4, #2320]	; 0x910
      _s = s;
    9520:	mvn.w	r6, #32
    9524:	strb.w	r5, [r4, #2300]	; 0x8fc
    9528:	strb.w	r6, [r4, #2324]	; 0x914
      _b = b;
    952c:	mvn.w	r6, #6
    9530:	strb.w	r5, [r4, #2301]	; 0x8fd
    9534:	strb.w	r6, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9538:	movs	r6, #16
    953a:	str.w	r6, [r4, #2328]	; 0x918
      _s = s;
    953e:	mvn.w	r6, #31
    9542:	strb.w	r6, [r4, #2332]	; 0x91c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9546:	movs	r6, #18
    9548:	str.w	r6, [r4, #2336]	; 0x920
      _s = s;
    954c:	mvn.w	r6, #19
    9550:	strb.w	r6, [r4, #2340]	; 0x924
      _b = b;
    9554:	mvn.w	r6, #2
    9558:	strb.w	r6, [r4, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    955c:	movs	r6, #19
    955e:	str.w	ip, [r4, #2376]	; 0x948
    9562:	mov	r7, r6
    9564:	str.w	r6, [r4, #2344]	; 0x928
      _s = s;
      _b = b;
    9568:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    956c:	str.w	ip, [r4, #2384]	; 0x950
    9570:	str.w	r2, [r4, #2416]	; 0x970
      _s = s;
      _b = b;
    9574:	strb.w	r6, [r4, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9578:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    957c:	str.w	r7, [r4, #2352]	; 0x930
      _s = s;
    9580:	strb.w	r6, [r4, #2356]	; 0x934
      _b = b;
    9584:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9588:	strb.w	fp, [r4, #2348]	; 0x92c
      _b = b;
    958c:	strb.w	r6, [r4, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9590:	movs	r6, #15
    9592:	str.w	r8, [r4, #2392]	; 0x958
    9596:	str.w	r6, [r4, #2360]	; 0x938
      _s = s;
    959a:	mvn.w	r6, #31
    959e:	strb.w	r6, [r4, #2364]	; 0x93c
      _b = b;
    95a2:	mvn.w	r6, #6
    95a6:	strb.w	r6, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95aa:	movs	r6, #1
    95ac:	str.w	r6, [r4, #2368]	; 0x940
      _s = s;
    95b0:	mvn.w	r6, #20
    95b4:	strb.w	r6, [r4, #2372]	; 0x944
      _b = b;
    95b8:	mvn.w	r6, #73	; 0x49
    95bc:	strb.w	r6, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95c0:	mov.w	r6, #4294967295
    95c4:	strb.w	r6, [r4, #2380]	; 0x94c
      _b = b;
    95c8:	mvn.w	r6, #91	; 0x5b
    95cc:	strb.w	r6, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95d0:	mov.w	r6, #4294967295
    95d4:	strb.w	r6, [r4, #2388]	; 0x954
      _b = b;
    95d8:	mvn.w	r6, #111	; 0x6f
    95dc:	strb.w	r6, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    95e0:	mvn.w	r6, #26
    95e4:	strb.w	r6, [r4, #2396]	; 0x95c
      _b = b;
    95e8:	mvn.w	r6, #54	; 0x36
    95ec:	strb.w	r6, [r4, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95f0:	movs	r6, #9
    95f2:	str.w	r6, [r4, #2400]	; 0x960
      _s = s;
    95f6:	mvn.w	r6, #34	; 0x22
    95fa:	strb.w	r6, [r4, #2404]	; 0x964
      _b = b;
    95fe:	mvn.w	r6, #44	; 0x2c
    9602:	strb.w	r6, [r4, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9606:	movs	r6, #1
    9608:	b.n	9610 <_GLOBAL__sub_I_bri_level+0x4448>
    960a:	nop
    960c:	.word	0x20003e48
    9610:	str.w	r6, [r4, #2408]	; 0x968
      _s = s;
    9614:	mvn.w	r6, #27
    9618:	strb.w	r6, [r4, #2412]	; 0x96c
      _b = b;
    961c:	mvn.w	r6, #72	; 0x48
    9620:	strb.w	r6, [r4, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9624:	mvn.w	r6, #28
    9628:	strb.w	r6, [r4, #2420]	; 0x974
      _b = b;
    962c:	mvn.w	r6, #45	; 0x2d
    9630:	strb.w	r6, [r4, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9634:	movs	r6, #19
    9636:	str.w	r6, [r4, #2424]	; 0x978
      _s = s;
    963a:	mvn.w	r6, #34	; 0x22
    963e:	strb.w	r6, [r4, #2428]	; 0x97c
      _b = b;
    9642:	mov.w	r6, #4294967295
    9646:	strb.w	r6, [r4, #2429]	; 0x97d
    964a:	mov.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    964e:	str.w	r5, [r4, #2464]	; 0x9a0
      _s = s;
      _b = b;
    9652:	strb.w	r6, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9656:	movs	r6, #22
      _s = s;
    9658:	strb.w	r5, [r4, #2468]	; 0x9a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    965c:	str.w	r6, [r4, #2432]	; 0x980
      _s = s;
    9660:	mvn.w	r6, #55	; 0x37
      _b = b;
    9664:	strb.w	r5, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9668:	strb.w	r6, [r4, #2436]	; 0x984
      _b = b;
    966c:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9670:	str.w	r5, [r4, #2472]	; 0x9a8
      _s = s;
      _b = b;
    9674:	strb.w	r6, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9678:	movs	r6, #23
      _s = s;
    967a:	strb.w	r5, [r4, #2476]	; 0x9ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    967e:	str.w	r6, [r4, #2440]	; 0x988
      _s = s;
    9682:	mvn.w	r6, #68	; 0x44
      _b = b;
    9686:	strb.w	r5, [r4, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    968a:	strb.w	r6, [r4, #2444]	; 0x98c
      _b = b;
    968e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9692:	str.w	r5, [r4, #2480]	; 0x9b0
      _s = s;
      _b = b;
    9696:	strb.w	r6, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    969a:	movs	r6, #13
      _s = s;
    969c:	strb.w	r5, [r4, #2484]	; 0x9b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96a0:	str.w	r6, [r4, #2448]	; 0x990
      _s = s;
    96a4:	mvn.w	r6, #54	; 0x36
      _b = b;
    96a8:	strb.w	r5, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96ac:	strb.w	r6, [r4, #2452]	; 0x994
      _b = b;
    96b0:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96b4:	str.w	r5, [r4, #2488]	; 0x9b8
      _s = s;
      _b = b;
    96b8:	strb.w	r6, [r4, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96bc:	movw	r6, #357	; 0x165
      _s = s;
    96c0:	strb.w	r5, [r4, #2492]	; 0x9bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96c4:	mov	r7, r6
    96c6:	str.w	r6, [r4, #2456]	; 0x998
      _s = s;
    96ca:	mov.w	r6, #4294967295
      _b = b;
    96ce:	strb.w	r5, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96d2:	str.w	r7, [r4, #2496]	; 0x9c0
      _s = s;
    96d6:	strb.w	r6, [r4, #2460]	; 0x99c
    96da:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96de:	str.w	r7, [r4, #2504]	; 0x9c8
      _s = s;
    96e2:	strb.w	r6, [r4, #2500]	; 0x9c4
      _b = b;
    96e6:	mvn.w	r6, #116	; 0x74
    96ea:	strb.w	r6, [r4, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96ee:	mov.w	r6, #4294967295
    96f2:	strb.w	r6, [r4, #2508]	; 0x9cc
      _b = b;
    96f6:	mvn.w	r6, #82	; 0x52
    96fa:	strb.w	r6, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96fe:	movs	r6, #18
    9700:	str.w	r6, [r4, #2512]	; 0x9d0
      _s = s;
    9704:	mvn.w	r6, #46	; 0x2e
    9708:	strb.w	r6, [r4, #2516]	; 0x9d4
      _b = b;
    970c:	mvn.w	r6, #2
    9710:	strb.w	r6, [r4, #2517]	; 0x9d5
    9714:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9718:	str.w	ip, [r4, #2568]	; 0xa08
      _s = s;
      _b = b;
    971c:	strb.w	r6, [r4, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9720:	movs	r6, #21
    9722:	str.w	r6, [r4, #2520]	; 0x9d8
      _s = s;
    9726:	mvn.w	r6, #29
    972a:	strb.w	r6, [r4, #2524]	; 0x9dc
      _b = b;
    972e:	mvn.w	r6, #2
    9732:	strb.w	r6, [r4, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9736:	movs	r6, #19
    9738:	str.w	r6, [r4, #2528]	; 0x9e0
      _s = s;
    973c:	mvn.w	r6, #2
    9740:	strb.w	r6, [r4, #2532]	; 0x9e4
      _b = b;
    9744:	mvn.w	r6, #83	; 0x53
    9748:	strb.w	r6, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    974c:	movs	r6, #34	; 0x22
    974e:	str.w	r6, [r4, #2536]	; 0x9e8
      _s = s;
    9752:	mvn.w	r6, #2
    9756:	strb.w	r6, [r4, #2540]	; 0x9ec
      _b = b;
    975a:	mvn.w	r6, #6
    975e:	strb.w	r6, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9762:	movs	r6, #20
    9764:	str.w	r6, [r4, #2544]	; 0x9f0
      _s = s;
    9768:	mvn.w	r6, #2
    976c:	strb.w	r6, [r4, #2548]	; 0x9f4
      _b = b;
    9770:	mvn.w	r6, #54	; 0x36
    9774:	strb.w	r6, [r4, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9778:	movs	r6, #15
    977a:	str.w	r6, [r4, #2552]	; 0x9f8
      _s = s;
    977e:	mvn.w	r6, #10
    9782:	strb.w	r6, [r4, #2556]	; 0x9fc
      _b = b;
    9786:	mvn.w	r6, #36	; 0x24
    978a:	strb.w	r6, [r4, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    978e:	movs	r6, #11
    9790:	str.w	r6, [r4, #2560]	; 0xa00
      _s = s;
    9794:	mvn.w	r6, #41	; 0x29
    9798:	strb.w	r6, [r4, #2564]	; 0xa04
      _b = b;
    979c:	mvn.w	r6, #42	; 0x2a
    97a0:	strb.w	r6, [r4, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    97a4:	mov.w	r6, #4294967295
    97a8:	strb.w	r6, [r4, #2572]	; 0xa0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97ac:	movs	r6, #5
    97ae:	str.w	r6, [r4, #2576]	; 0xa10
      _s = s;
    97b2:	mvn.w	r6, #22
    97b6:	strb.w	r6, [r4, #2580]	; 0xa14
      _b = b;
    97ba:	mvn.w	r6, #65	; 0x41
    97be:	strb.w	r6, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97c2:	movs	r6, #17
    97c4:	str.w	r6, [r4, #2584]	; 0xa18
      _s = s;
    97c8:	mvn.w	r6, #36	; 0x24
    97cc:	strb.w	r6, [r4, #2588]	; 0xa1c
      _b = b;
    97d0:	mvn.w	r6, #18
    97d4:	strb.w	r6, [r4, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97d8:	movs	r6, #13
    97da:	str.w	r6, [r4, #2592]	; 0xa20
      _s = s;
    97de:	mvn.w	r6, #42	; 0x2a
    97e2:	strb.w	r6, [r4, #2596]	; 0xa24
      _b = b;
    97e6:	mvn.w	r6, #21
    97ea:	strb.w	r6, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    97ee:	movs	r6, #4
    97f0:	str.w	r6, [r4, #2600]	; 0xa28
      _s = s;
    97f4:	mvn.w	r6, #29
    97f8:	strb.w	r6, [r4, #2604]	; 0xa2c
      _b = b;
    97fc:	mvn.w	r6, #13
    9800:	strb.w	r6, [r4, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9804:	mov.w	r6, #81	; 0x51
      _b = b;
    9808:	strb.w	lr, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    980c:	strb.w	r6, [r4, #2692]	; 0xa84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9810:	movs	r6, #12
      _s = s;
    9812:	strb.w	sl, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9816:	str.w	r6, [r4, #2608]	; 0xa30
      _s = s;
    981a:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    981e:	str.w	r5, [r4, #2656]	; 0xa60
      _s = s;
    9822:	strb.w	r6, [r4, #2612]	; 0xa34
      _b = b;
    9826:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    982a:	strb.w	r5, [r4, #2660]	; 0xa64
      _b = b;
    982e:	strb.w	r6, [r4, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9832:	movs	r6, #13
      _s = s;
      _b = b;
    9834:	strb.w	r5, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9838:	str.w	r6, [r4, #2616]	; 0xa38
      _s = s;
      _b = b;
    983c:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9840:	str.w	r5, [r4, #2664]	; 0xa68
      _s = s;
      _b = b;
    9844:	strb.w	r6, [r4, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9848:	movs	r6, #16
      _s = s;
    984a:	strb.w	r5, [r4, #2668]	; 0xa6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    984e:	str.w	r6, [r4, #2624]	; 0xa40
      _s = s;
    9852:	mvn.w	r6, #21
      _b = b;
    9856:	strb.w	r5, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    985a:	strb.w	r6, [r4, #2628]	; 0xa44
      _b = b;
    985e:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9862:	str.w	r5, [r4, #2672]	; 0xa70
      _s = s;
      _b = b;
    9866:	strb.w	r6, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    986a:	movs	r6, #22
      _s = s;
    986c:	strb.w	r5, [r4, #2676]	; 0xa74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9870:	str.w	r6, [r4, #2632]	; 0xa48
      _s = s;
    9874:	mvn.w	r6, #37	; 0x25
      _b = b;
    9878:	strb.w	r5, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    987c:	strb.w	r6, [r4, #2636]	; 0xa4c
      _b = b;
    9880:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9884:	str.w	r5, [r4, #2680]	; 0xa78
      _s = s;
      _b = b;
    9888:	strb.w	r6, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    988c:	movs	r6, #20
      _s = s;
    988e:	strb.w	r5, [r4, #2684]	; 0xa7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9892:	str.w	r6, [r4, #2640]	; 0xa50
      _s = s;
    9896:	mvn.w	r6, #45	; 0x2d
      _b = b;
    989a:	strb.w	r5, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    989e:	strb.w	r6, [r4, #2644]	; 0xa54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98a2:	movs	r6, #4
    98a4:	str.w	r6, [r4, #2648]	; 0xa58
      _s = s;
    98a8:	mvn.w	r6, #22
    98ac:	strb.w	r6, [r4, #2652]	; 0xa5c
      _b = b;
    98b0:	mvn.w	r6, #114	; 0x72
    98b4:	strb.w	r6, [r4, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98b8:	movs	r6, #3
    98ba:	str.w	r6, [r4, #2688]	; 0xa80
      _s = s;
      _b = b;
    98be:	mvn.w	r6, #29
    98c2:	strb.w	r6, [r4, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98c6:	movs	r6, #4
      _s = s;
      _b = b;
    98c8:	strb.w	r9, [r4, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98cc:	str.w	r6, [r4, #2696]	; 0xa88
      _s = s;
    98d0:	mvn.w	r6, #18
      _b = b;
    98d4:	strb.w	lr, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    98d8:	strb.w	r6, [r4, #2700]	; 0xa8c
      _b = b;
    98dc:	mvn.w	r6, #38	; 0x26
    98e0:	strb.w	r9, [r4, #2773]	; 0xad5
    98e4:	strb.w	r6, [r4, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98e8:	movs	r6, #20
    98ea:	str.w	r6, [r4, #2704]	; 0xa90
      _s = s;
    98ee:	mvn.w	r6, #66	; 0x42
    98f2:	strb.w	r6, [r4, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    98f6:	movs	r6, #21
    98f8:	str.w	r6, [r4, #2712]	; 0xa98
      _s = s;
    98fc:	mvn.w	r6, #28
    9900:	strb.w	r6, [r4, #2716]	; 0xa9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9904:	movs	r6, #25
    9906:	str.w	r6, [r4, #2720]	; 0xaa0
      _s = s;
    990a:	mvn.w	r6, #2
    990e:	strb.w	r6, [r4, #2724]	; 0xaa4
      _b = b;
    9912:	mvn.w	r6, #88	; 0x58
    9916:	strb.w	r6, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    991a:	movs	r6, #30
    991c:	str.w	r6, [r4, #2728]	; 0xaa8
      _s = s;
    9920:	mvn.w	r6, #2
    9924:	strb.w	r6, [r4, #2732]	; 0xaac
      _b = b;
    9928:	mvn.w	r6, #42	; 0x2a
    992c:	strb.w	r6, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9930:	movs	r6, #28
    9932:	str.w	r6, [r4, #2736]	; 0xab0
      _s = s;
    9936:	mov.w	r6, #4294967295
    993a:	strb.w	r6, [r4, #2740]	; 0xab4
      _b = b;
    993e:	mvn.w	r6, #40	; 0x28
    9942:	strb.w	r6, [r4, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9946:	movs	r6, #19
    9948:	str.w	r6, [r4, #2744]	; 0xab8
      _s = s;
    994c:	mvn.w	r6, #6
    9950:	strb.w	r6, [r4, #2748]	; 0xabc
      _b = b;
    9954:	mvn.w	r6, #32
    9958:	strb.w	r6, [r4, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    995c:	movs	r6, #14
    995e:	str.w	r6, [r4, #2752]	; 0xac0
      _s = s;
    9962:	mvn.w	r6, #29
    9966:	strb.w	r6, [r4, #2756]	; 0xac4
      _b = b;
    996a:	mvn.w	r6, #20
    996e:	strb.w	r6, [r4, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9972:	movs	r6, #11
    9974:	str.w	r6, [r4, #2760]	; 0xac8
      _s = s;
    9978:	mvn.w	r6, #41	; 0x29
    997c:	strb.w	r6, [r4, #2764]	; 0xacc
      _b = b;
    9980:	mvn.w	r6, #37	; 0x25
    9984:	strb.w	r6, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9988:	movs	r6, #22
    998a:	str.w	r6, [r4, #2768]	; 0xad0
      _s = s;
    998e:	mvn.w	r6, #79	; 0x4f
    9992:	strb.w	r6, [r4, #2772]	; 0xad4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9996:	movs	r6, #19
    9998:	str.w	r6, [r4, #2776]	; 0xad8
      _s = s;
    999c:	mvn.w	r6, #31
    99a0:	strb.w	r6, [r4, #2780]	; 0xadc
      _b = b;
    99a4:	mvn.w	r6, #6
    99a8:	strb.w	r6, [r4, #2781]	; 0xadd
    99ac:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99b0:	str.w	r2, [r4, #2808]	; 0xaf8
      _s = s;
      _b = b;
    99b4:	strb.w	r6, [r4, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99b8:	movs	r6, #10
    99ba:	str.w	r2, [r4, #2816]	; 0xb00
    99be:	str.w	r6, [r4, #2784]	; 0xae0
      _s = s;
      _b = b;
    99c2:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99c6:	strb.w	sl, [r4, #2788]	; 0xae4
      _b = b;
    99ca:	strb.w	r6, [r4, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99ce:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99d2:	str.w	r8, [r4, #2792]	; 0xae8
      _s = s;
    99d6:	strb.w	r6, [r4, #2796]	; 0xaec
      _b = b;
    99da:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99de:	str.w	r8, [r4, #2800]	; 0xaf0
      _s = s;
      _b = b;
    99e2:	strb.w	r6, [r4, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99e6:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    99ea:	str.w	r5, [r4, #2848]	; 0xb20
      _s = s;
    99ee:	strb.w	r6, [r4, #2804]	; 0xaf4
      _b = b;
    99f2:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99f6:	strb.w	r5, [r4, #2852]	; 0xb24
      _b = b;
    99fa:	strb.w	r6, [r4, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    99fe:	mvn.w	r6, #22
      _b = b;
    9a02:	strb.w	r5, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a06:	strb.w	r6, [r4, #2812]	; 0xafc
    9a0a:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a0e:	str.w	r5, [r4, #2856]	; 0xb28
      _s = s;
    9a12:	strb.w	r6, [r4, #2820]	; 0xb04
      _b = b;
    9a16:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a1a:	strb.w	r5, [r4, #2860]	; 0xb2c
      _b = b;
    9a1e:	strb.w	r6, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a22:	movs	r6, #12
      _s = s;
      _b = b;
    9a24:	strb.w	r5, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a28:	str.w	r6, [r4, #2824]	; 0xb08
      _s = s;
    9a2c:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a30:	str.w	r5, [r4, #2864]	; 0xb30
      _s = s;
    9a34:	strb.w	r6, [r4, #2828]	; 0xb0c
      _b = b;
    9a38:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a3c:	strb.w	r5, [r4, #2868]	; 0xb34
      _b = b;
    9a40:	strb.w	r6, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a44:	movs	r6, #17
    9a46:	str.w	r6, [r4, #2832]	; 0xb10
      _s = s;
    9a4a:	mvn.w	r6, #43	; 0x2b
    9a4e:	strb.w	r6, [r4, #2836]	; 0xb14
      _b = b;
    9a52:	mov.w	r6, #4294967295
    9a56:	strb.w	r6, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a5a:	mov.w	r6, #358	; 0x166
    9a5e:	str.w	r6, [r4, #2840]	; 0xb18
      _s = s;
    9a62:	mvn.w	r6, #15
    9a66:	strb.w	r6, [r4, #2844]	; 0xb1c
      _b = b;
    9a6a:	mvn.w	r6, #102	; 0x66
    9a6e:	strb.w	r6, [r4, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a72:	mvn.w	r6, #113	; 0x71
      _b = b;
    9a76:	strb.w	r5, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a7a:	strb.w	r6, [r4, #2884]	; 0xb44
      _b = b;
    9a7e:	mvn.w	r6, #12
    9a82:	strb.w	r9, [r4, #2909]	; 0xb5d
    9a86:	strb.w	r6, [r4, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9a8a:	mvn.w	r6, #24
    9a8e:	strb.w	lr, [r4, #2916]	; 0xb64
    9a92:	strb.w	r6, [r4, #2892]	; 0xb4c
      _b = b;
    9a96:	mvn.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9a9a:	str.w	r5, [r4, #2872]	; 0xb38
      _s = s;
      _b = b;
    9a9e:	strb.w	r6, [r4, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aa2:	movs	r6, #15
      _s = s;
    9aa4:	strb.w	r5, [r4, #2876]	; 0xb3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9aa8:	str.w	r6, [r4, #2896]	; 0xb50
      _s = s;
    9aac:	mvn.w	r6, #47	; 0x2f
      _b = b;
    9ab0:	strb.w	r5, [r4, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ab4:	strb.w	r6, [r4, #2900]	; 0xb54
      _b = b;
    9ab8:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9abc:	str.w	r5, [r4, #2880]	; 0xb40
      _s = s;
      _b = b;
    9ac0:	strb.w	r6, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ac4:	movs	r6, #20
    9ac6:	str.w	r8, [r4, #2888]	; 0xb48
    9aca:	str.w	r6, [r4, #2904]	; 0xb58
      _s = s;
    9ace:	mvn.w	r6, #56	; 0x38
    9ad2:	strb.w	r6, [r4, #2908]	; 0xb5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ad6:	movs	r6, #28
    9ad8:	str.w	r6, [r4, #2912]	; 0xb60
      _s = s;
      _b = b;
    9adc:	mvn.w	r6, #47	; 0x2f
    9ae0:	strb.w	r6, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ae4:	mvn.w	r6, #2
    9ae8:	strb.w	r6, [r4, #2924]	; 0xb6c
      _b = b;
    9aec:	mvn.w	r6, #60	; 0x3c
    9af0:	strb.w	r6, [r4, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9af4:	movs	r6, #24
    9af6:	mov	r7, r6
    9af8:	str.w	r6, [r4, #2928]	; 0xb70
      _s = s;
    9afc:	mvn.w	r6, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b00:	str.w	r7, [r4, #2936]	; 0xb78
      _s = s;
    9b04:	strb.w	r6, [r4, #2932]	; 0xb74
      _b = b;
    9b08:	mvn.w	r6, #49	; 0x31
    9b0c:	strb.w	r6, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b10:	mvn.w	r6, #12
    9b14:	strb.w	r6, [r4, #2940]	; 0xb7c
      _b = b;
    9b18:	mvn.w	r6, #17
    9b1c:	strb.w	r6, [r4, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b20:	movs	r6, #15
    9b22:	str.w	r6, [r4, #2944]	; 0xb80
      _s = s;
    9b26:	mvn.w	r6, #24
    9b2a:	strb.w	r6, [r4, #2948]	; 0xb84
      _b = b;
    9b2e:	mvn.w	r6, #17
    9b32:	strb.w	r6, [r4, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b36:	movs	r6, #23
    9b38:	str.w	r6, [r4, #2952]	; 0xb88
      _s = s;
    9b3c:	mvn.w	r6, #58	; 0x3a
    9b40:	strb.w	r6, [r4, #2956]	; 0xb8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b44:	movs	r6, #29
    9b46:	str.w	r6, [r4, #2920]	; 0xb68
      _s = s;
      _b = b;
    9b4a:	mvn.w	r6, #27
    9b4e:	strb.w	r6, [r4, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b52:	movs	r6, #24
    9b54:	str.w	ip, [r4, #3032]	; 0xbd8
    9b58:	str.w	r6, [r4, #2960]	; 0xb90
      _s = s;
    9b5c:	mvn.w	r6, #17
    9b60:	strb.w	fp, [r4, #2980]	; 0xba4
    9b64:	strb.w	r6, [r4, #2964]	; 0xb94
      _b = b;
    9b68:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b6c:	str.w	r8, [r4, #2984]	; 0xba8
      _s = s;
      _b = b;
    9b70:	strb.w	r6, [r4, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b74:	movs	r6, #29
      _s = s;
    9b76:	strb.w	fp, [r4, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b7a:	str.w	r6, [r4, #2968]	; 0xb98
      _s = s;
    9b7e:	mvn.w	r6, #7
      _b = b;
    9b82:	strb.w	fp, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9b86:	strb.w	r6, [r4, #2972]	; 0xb9c
      _b = b;
    9b8a:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b8e:	str.w	r5, [r4, #3040]	; 0xbe0
      _s = s;
      _b = b;
    9b92:	strb.w	r6, [r4, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b96:	movs	r6, #14
      _s = s;
    9b98:	strb.w	r5, [r4, #3044]	; 0xbe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9b9c:	str.w	r6, [r4, #2976]	; 0xba0
      _s = s;
      _b = b;
    9ba0:	mvn.w	r6, #59	; 0x3b
    9ba4:	strb.w	r6, [r4, #2981]	; 0xba5
    9ba8:	mvn.w	r6, #90	; 0x5a
    9bac:	strb.w	r6, [r4, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bb0:	movw	r6, #359	; 0x167
    9bb4:	str.w	r6, [r4, #2992]	; 0xbb0
      _s = s;
    9bb8:	mvn.w	r6, #21
    9bbc:	strb.w	r6, [r4, #2996]	; 0xbb4
      _b = b;
    9bc0:	mvn.w	r6, #45	; 0x2d
    9bc4:	strb.w	r6, [r4, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bc8:	movs	r6, #9
    9bca:	str.w	r6, [r4, #3000]	; 0xbb8
      _s = s;
    9bce:	mvn.w	r6, #27
    9bd2:	strb.w	r6, [r4, #3004]	; 0xbbc
      _b = b;
    9bd6:	mvn.w	r6, #64	; 0x40
    9bda:	strb.w	r6, [r4, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bde:	movs	r6, #10
    9be0:	str.w	r6, [r4, #3008]	; 0xbc0
      _s = s;
    9be4:	mvn.w	r6, #18
    9be8:	strb.w	r6, [r4, #3012]	; 0xbc4
      _b = b;
    9bec:	mvn.w	r6, #113	; 0x71
    9bf0:	strb.w	r6, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9bf4:	movs	r6, #17
    9bf6:	str.w	r6, [r4, #3016]	; 0xbc8
      _s = s;
    9bfa:	mvn.w	r6, #37	; 0x25
    9bfe:	strb.w	r6, [r4, #3020]	; 0xbcc
      _b = b;
    9c02:	mvn.w	r6, #18
    9c06:	strb.w	r6, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c0a:	movs	r6, #14
    9c0c:	str.w	r6, [r4, #3024]	; 0xbd0
      _s = s;
    9c10:	mvn.w	r6, #44	; 0x2c
    9c14:	strb.w	r6, [r4, #3028]	; 0xbd4
    9c18:	mov.w	r6, #4294967295
    9c1c:	strb.w	r6, [r4, #3036]	; 0xbdc
      _b = b;
    9c20:	mvn.w	r6, #105	; 0x69
    9c24:	strb.w	r6, [r4, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c28:	mov.w	r6, #87	; 0x57
      _b = b;
    9c2c:	strb.w	r5, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c30:	strb.w	r6, [r4, #3084]	; 0xc0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c34:	movs	r6, #25
      _s = s;
      _b = b;
    9c36:	strb.w	r9, [r4, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c3a:	str.w	r6, [r4, #3072]	; 0xc00
      _s = s;
    9c3e:	mov.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c42:	str.w	r5, [r4, #3048]	; 0xbe8
      _s = s;
    9c46:	strb.w	r6, [r4, #3076]	; 0xc04
      _b = b;
    9c4a:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c4e:	strb.w	r5, [r4, #3052]	; 0xbec
      _b = b;
    9c52:	strb.w	r6, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c56:	movs	r6, #5
      _s = s;
      _b = b;
    9c58:	strb.w	r5, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c5c:	str.w	r6, [r4, #3080]	; 0xc08
      _s = s;
      _b = b;
    9c60:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c64:	str.w	r5, [r4, #3056]	; 0xbf0
      _s = s;
      _b = b;
    9c68:	strb.w	r6, [r4, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c6c:	movs	r6, #13
      _s = s;
    9c6e:	strb.w	r5, [r4, #3060]	; 0xbf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c72:	str.w	r6, [r4, #3088]	; 0xc10
      _s = s;
    9c76:	mvn.w	r6, #20
      _b = b;
    9c7a:	strb.w	r5, [r4, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9c7e:	strb.w	r6, [r4, #3092]	; 0xc14
      _b = b;
    9c82:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c86:	str.w	r5, [r4, #3064]	; 0xbf8
      _s = s;
      _b = b;
    9c8a:	strb.w	r6, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c8e:	movs	r6, #18
      _s = s;
    9c90:	strb.w	r5, [r4, #3068]	; 0xbfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9c94:	str.w	r6, [r4, #3096]	; 0xc18
      _s = s;
    9c98:	mvn.w	r6, #93	; 0x5d
      _b = b;
    9c9c:	strb.w	r5, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ca0:	strb.w	r6, [r4, #3100]	; 0xc1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ca4:	movs	r6, #26
      _s = s;
    9ca6:	strb.w	fp, [r4, #3124]	; 0xc34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9caa:	str.w	r6, [r4, #3104]	; 0xc20
      _s = s;
    9cae:	mvn.w	r6, #55	; 0x37
    9cb2:	strb.w	r6, [r4, #3108]	; 0xc24
      _b = b;
    9cb6:	mov.w	r6, #4294967295
    9cba:	strb.w	r6, [r4, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cbe:	movs	r6, #27
    9cc0:	str.w	r6, [r4, #3112]	; 0xc28
      _s = s;
    9cc4:	mvn.w	r6, #26
    9cc8:	strb.w	r6, [r4, #3116]	; 0xc2c
      _b = b;
    9ccc:	mvn.w	r6, #15
    9cd0:	strb.w	r6, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cd4:	movs	r6, #28
    9cd6:	str.w	r6, [r4, #3120]	; 0xc30
      _s = s;
      _b = b;
    9cda:	mvn.w	r6, #19
    9cde:	strb.w	r6, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ce2:	movs	r6, #24
    9ce4:	str.w	r6, [r4, #3128]	; 0xc38
      _s = s;
    9ce8:	mvn.w	r6, #19
    9cec:	strb.w	r6, [r4, #3132]	; 0xc3c
      _b = b;
    9cf0:	mov.w	r6, #4294967295
    9cf4:	strb.w	r6, [r4, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cf8:	movs	r6, #31
      _s = s;
      _b = b;
    9cfa:	strb.w	lr, [r4, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9cfe:	str.w	r6, [r4, #3168]	; 0xc60
    9d02:	movs	r6, #5
      _s = s;
      _b = b;
    9d04:	strb.w	r9, [r4, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d08:	str.w	r6, [r4, #3136]	; 0xc40
      _s = s;
    9d0c:	mvn.w	r6, #16
    9d10:	strb.w	r6, [r4, #3140]	; 0xc44
      _b = b;
    9d14:	mvn.w	r6, #71	; 0x47
    9d18:	strb.w	r6, [r4, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d1c:	movs	r6, #21
    9d1e:	str.w	r6, [r4, #3144]	; 0xc48
      _s = s;
    9d22:	mvn.w	r6, #64	; 0x40
    9d26:	strb.w	r6, [r4, #3148]	; 0xc4c
      _b = b;
    9d2a:	mvn.w	r6, #23
    9d2e:	strb.w	r6, [r4, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d32:	movs	r6, #28
    9d34:	str.w	r6, [r4, #3152]	; 0xc50
      _s = s;
    9d38:	mvn.w	r6, #16
    9d3c:	strb.w	r6, [r4, #3156]	; 0xc54
      _b = b;
    9d40:	mvn.w	r6, #25
    9d44:	strb.w	r6, [r4, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d48:	movs	r6, #30
    9d4a:	str.w	r6, [r4, #3160]	; 0xc58
      _s = s;
    9d4e:	mvn.w	r6, #2
    9d52:	strb.w	r6, [r4, #3164]	; 0xc5c
      _b = b;
    9d56:	mvn.w	r6, #77	; 0x4d
    9d5a:	strb.w	r6, [r4, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9d5e:	mvn.w	r6, #2
    9d62:	strb.w	r6, [r4, #3172]	; 0xc64
      _b = b;
    9d66:	mvn.w	r6, #32
    9d6a:	strb.w	r6, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d6e:	movs	r6, #24
    9d70:	str.w	r6, [r4, #3176]	; 0xc68
      _s = s;
    9d74:	mvn.w	r6, #18
    9d78:	strb.w	r6, [r4, #3180]	; 0xc6c
      _b = b;
    9d7c:	mvn.w	r6, #11
    9d80:	strb.w	r6, [r4, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d84:	movs	r6, #12
    9d86:	str.w	r6, [r4, #3184]	; 0xc70
      _s = s;
    9d8a:	mvn.w	r6, #31
    9d8e:	strb.w	r6, [r4, #3188]	; 0xc74
      _b = b;
    9d92:	mvn.w	r6, #9
    9d96:	strb.w	r6, [r4, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9d9a:	movs	r6, #11
    9d9c:	str.w	r6, [r4, #3192]	; 0xc78
      _s = s;
    9da0:	mvn.w	r6, #35	; 0x23
    9da4:	strb.w	r6, [r4, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9da8:	movs	r6, #14
    9daa:	str.w	r6, [r4, #3200]	; 0xc80
      _s = s;
    9dae:	mvn.w	r6, #37	; 0x25
    9db2:	strb.w	r6, [r4, #3204]	; 0xc84
      _b = b;
    9db6:	mvn.w	r6, #10
    9dba:	strb.w	r6, [r4, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dbe:	movs	r6, #16
    9dc0:	str.w	r6, [r4, #3208]	; 0xc88
      _s = s;
    9dc4:	mvn.w	r6, #42	; 0x2a
    9dc8:	strb.w	r6, [r4, #3212]	; 0xc8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dcc:	movs	r6, #7
    9dce:	str.w	r6, [r4, #3216]	; 0xc90
      _s = s;
    9dd2:	mvn.w	r6, #27
    9dd6:	strb.w	r6, [r4, #3220]	; 0xc94
      _b = b;
    9dda:	mvn.w	r6, #18
    9dde:	strb.w	r6, [r4, #3221]	; 0xc95
    9de2:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9de6:	str.w	r5, [r4, #3240]	; 0xca8
      _s = s;
      _b = b;
    9dea:	strb.w	r6, [r4, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9dee:	movs	r6, #20
      _s = s;
    9df0:	strb.w	r5, [r4, #3244]	; 0xcac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9df4:	str.w	r6, [r4, #3224]	; 0xc98
      _s = s;
    9df8:	mvn.w	r6, #32
      _b = b;
    9dfc:	strb.w	r5, [r4, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e00:	strb.w	r6, [r4, #3228]	; 0xc9c
      _b = b;
    9e04:	mvn.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e08:	str.w	r5, [r4, #3248]	; 0xcb0
      _s = s;
      _b = b;
    9e0c:	strb.w	r6, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e10:	movs	r6, #27
      _s = s;
    9e12:	strb.w	r5, [r4, #3252]	; 0xcb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e16:	str.w	r6, [r4, #3232]	; 0xca0
      _s = s;
    9e1a:	mvn.w	r6, #44	; 0x2c
      _b = b;
    9e1e:	strb.w	r5, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9e22:	strb.w	r6, [r4, #3236]	; 0xca4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e26:	movs	r6, #36	; 0x24
    9e28:	str.w	r5, [r4, #3256]	; 0xcb8
    9e2c:	str.w	r6, [r4, #3264]	; 0xcc0
      _s = s;
    9e30:	mov.w	r6, #17
    9e34:	strb.w	r5, [r4, #3260]	; 0xcbc
    9e38:	strb.w	r6, [r4, #3268]	; 0xcc4
      _b = b;
    9e3c:	mov.w	r6, #71	; 0x47
    9e40:	strb.w	r5, [r4, #3261]	; 0xcbd
    9e44:	strb.w	r6, [r4, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e48:	movs	r6, #21
    9e4a:	str.w	r6, [r4, #3272]	; 0xcc8
      _s = s;
    9e4e:	mov.w	r6, #18
    9e52:	strb.w	r6, [r4, #3276]	; 0xccc
      _b = b;
    9e56:	mvn.w	r6, #23
    9e5a:	strb.w	r6, [r4, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e5e:	movs	r6, #7
    9e60:	str.w	r6, [r4, #3280]	; 0xcd0
      _s = s;
    9e64:	mvn.w	r6, #91	; 0x5b
    9e68:	strb.w	r6, [r4, #3284]	; 0xcd4
      _b = b;
    9e6c:	mvn.w	r6, #6
    9e70:	strb.w	r6, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e74:	movs	r6, #9
    9e76:	str.w	r6, [r4, #3288]	; 0xcd8
      _s = s;
    9e7a:	mvn.w	r6, #56	; 0x38
    9e7e:	strb.w	r6, [r4, #3292]	; 0xcdc
      _b = b;
    9e82:	mvn.w	r6, #8
    9e86:	strb.w	r6, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9e8a:	movs	r6, #20
    9e8c:	str.w	r6, [r4, #3296]	; 0xce0
      _s = s;
    9e90:	mvn.w	r6, #88	; 0x58
    9e94:	strb.w	r6, [r4, #3300]	; 0xce4
      _b = b;
    9e98:	mvn.w	r6, #2
    9e9c:	strb.w	r6, [r4, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ea0:	movs	r6, #25
    9ea2:	str.w	r6, [r4, #3304]	; 0xce8
      _s = s;
    9ea6:	mvn.w	r6, #42	; 0x2a
    9eaa:	strb.w	r6, [r4, #3308]	; 0xcec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9eae:	movs	r6, #27
      _s = s;
      _b = b;
    9eb0:	strb.w	r9, [r4, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9eb4:	str.w	r6, [r4, #3312]	; 0xcf0
      _s = s;
    9eb8:	mvn.w	r6, #24
      _b = b;
    9ebc:	strb.w	sl, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9ec0:	strb.w	r6, [r4, #3316]	; 0xcf4
      _b = b;
    9ec4:	mov.w	r6, #4294967295
    9ec8:	strb.w	r6, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ecc:	movs	r6, #21
    9ece:	str.w	r6, [r4, #3320]	; 0xcf8
      _s = s;
    9ed2:	mvn.w	r6, #27
    9ed6:	strb.w	r6, [r4, #3324]	; 0xcfc
      _b = b;
    9eda:	mvn.w	r6, #5
    9ede:	strb.w	r6, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ee2:	mov.w	r6, #358	; 0x166
    9ee6:	str.w	r6, [r4, #3328]	; 0xd00
      _s = s;
    9eea:	mvn.w	r6, #2
    9eee:	strb.w	r6, [r4, #3332]	; 0xd04
      _b = b;
    9ef2:	mvn.w	r6, #117	; 0x75
    9ef6:	strb.w	r6, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9efa:	movs	r6, #14
    9efc:	str.w	r6, [r4, #3336]	; 0xd08
      _s = s;
    9f00:	mvn.w	r6, #44	; 0x2c
    9f04:	strb.w	r6, [r4, #3340]	; 0xd0c
      _b = b;
    9f08:	mvn.w	r6, #55	; 0x37
    9f0c:	strb.w	r6, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f10:	movs	r6, #23
    9f12:	str.w	r6, [r4, #3344]	; 0xd10
      _s = s;
    9f16:	mvn.w	r6, #41	; 0x29
    9f1a:	strb.w	r6, [r4, #3348]	; 0xd14
      _b = b;
    9f1e:	mvn.w	r6, #2
    9f22:	strb.w	r6, [r4, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f26:	movs	r6, #26
    9f28:	str.w	r6, [r4, #3352]	; 0xd18
      _s = s;
    9f2c:	mvn.w	r6, #2
    9f30:	strb.w	r6, [r4, #3356]	; 0xd1c
      _b = b;
    9f34:	mvn.w	r6, #68	; 0x44
    9f38:	strb.w	r6, [r4, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f3c:	movs	r6, #34	; 0x22
    9f3e:	str.w	r6, [r4, #3360]	; 0xd20
      _s = s;
    9f42:	mvn.w	r6, #2
    9f46:	strb.w	r6, [r4, #3364]	; 0xd24
      _b = b;
    9f4a:	mvn.w	r6, #44	; 0x2c
    9f4e:	strb.w	r6, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f52:	movs	r6, #20
    9f54:	str.w	r6, [r4, #3368]	; 0xd28
      _s = s;
    9f58:	mvn.w	r6, #24
    9f5c:	strb.w	r6, [r4, #3372]	; 0xd2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f60:	movs	r6, #11
    9f62:	str.w	r6, [r4, #3376]	; 0xd30
      _s = s;
    9f66:	mvn.w	r6, #23
    9f6a:	strb.w	r6, [r4, #3380]	; 0xd34
      _b = b;
    9f6e:	mvn.w	r6, #11
    9f72:	strb.w	r6, [r4, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f76:	movs	r6, #3
    9f78:	str.w	r6, [r4, #3384]	; 0xd38
      _s = s;
    9f7c:	mvn.w	r6, #31
    9f80:	strb.w	r6, [r4, #3388]	; 0xd3c
      _b = b;
    9f84:	mvn.w	r6, #11
    9f88:	strb.w	r6, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9f8c:	movs	r6, #9
    9f8e:	str.w	r6, [r4, #3392]	; 0xd40
      _s = s;
    9f92:	mvn.w	r6, #33	; 0x21
    9f96:	strb.w	r6, [r4, #3396]	; 0xd44
      _b = b;
    9f9a:	mvn.w	r6, #14
    9f9e:	strb.w	r6, [r4, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fa2:	movs	r6, #37	; 0x25
      _s = s;
      _b = b;
    9fa4:	strb.w	r9, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fa8:	str.w	r6, [r4, #3464]	; 0xd88
    9fac:	movs	r6, #4
      _s = s;
      _b = b;
    9fae:	strb.w	sl, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fb2:	str.w	r6, [r4, #3400]	; 0xd48
      _s = s;
    9fb6:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fba:	str.w	r5, [r4, #3432]	; 0xd68
      _s = s;
    9fbe:	strb.w	r6, [r4, #3404]	; 0xd4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fc2:	movs	r6, #24
      _s = s;
    9fc4:	strb.w	r5, [r4, #3436]	; 0xd6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fc8:	str.w	r6, [r4, #3408]	; 0xd50
      _s = s;
    9fcc:	mvn.w	r6, #46	; 0x2e
      _b = b;
    9fd0:	strb.w	r5, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9fd4:	strb.w	r6, [r4, #3412]	; 0xd54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9fd8:	movs	r6, #29
    9fda:	str.w	r5, [r4, #3440]	; 0xd70
    9fde:	str.w	r6, [r4, #3416]	; 0xd58
      _s = s;
    9fe2:	mvn.w	r6, #86	; 0x56
    9fe6:	strb.w	r5, [r4, #3444]	; 0xd74
    9fea:	strb.w	r6, [r4, #3420]	; 0xd5c
      _b = b;
    9fee:	mov.w	r6, #4294967295
    9ff2:	strb.w	r5, [r4, #3445]	; 0xd75
    9ff6:	strb.w	r6, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9ffa:	movs	r6, #30
    9ffc:	str.w	r5, [r4, #3448]	; 0xd78
    a000:	str.w	r6, [r4, #3424]	; 0xd60
      _s = s;
    a004:	mvn.w	r6, #127	; 0x7f
    a008:	strb.w	r5, [r4, #3452]	; 0xd7c
    a00c:	strb.w	r6, [r4, #3428]	; 0xd64
      _b = b;
    a010:	mvn.w	r6, #83	; 0x53
    a014:	strb.w	r5, [r4, #3453]	; 0xd7d
    a018:	strb.w	r6, [r4, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a01c:	mov.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a020:	str.w	r5, [r4, #3456]	; 0xd80
      _s = s;
    a024:	strb.w	r6, [r4, #3468]	; 0xd8c
      _b = b;
    a028:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a02c:	strb.w	r5, [r4, #3460]	; 0xd84
      _b = b;
    a030:	strb.w	r6, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a034:	movs	r6, #5
      _s = s;
      _b = b;
    a036:	strb.w	r5, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a03a:	str.w	r6, [r4, #3472]	; 0xd90
      _s = s;
    a03e:	mov.w	r6, #68	; 0x44
    a042:	strb.w	r6, [r4, #3476]	; 0xd94
      _b = b;
    a046:	mvn.w	r6, #14
    a04a:	strb.w	r6, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a04e:	movs	r6, #2
    a050:	str.w	r6, [r4, #3480]	; 0xd98
      _s = s;
    a054:	mvn.w	r6, #15
    a058:	strb.w	r6, [r4, #3484]	; 0xd9c
      _b = b;
    a05c:	mvn.w	r6, #48	; 0x30
    a060:	strb.w	r6, [r4, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a064:	movs	r6, #9
    a066:	str.w	ip, [r4, #3520]	; 0xdc0
    a06a:	str.w	r6, [r4, #3488]	; 0xda0
      _s = s;
    a06e:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a072:	str.w	ip, [r4, #3528]	; 0xdc8
      _s = s;
    a076:	strb.w	r6, [r4, #3492]	; 0xda4
      _b = b;
    a07a:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a07e:	strb.w	lr, [r4, #3532]	; 0xdcc
      _b = b;
    a082:	strb.w	r6, [r4, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a086:	movs	r6, #14
    a088:	str.w	r6, [r4, #3496]	; 0xda8
      _s = s;
    a08c:	mvn.w	r6, #40	; 0x28
    a090:	strb.w	r6, [r4, #3500]	; 0xdac
      _b = b;
    a094:	strb.w	r6, [r4, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a098:	movs	r6, #19
    a09a:	str.w	r6, [r4, #3504]	; 0xdb0
      _s = s;
    a09e:	mvn.w	r6, #33	; 0x21
    a0a2:	strb.w	r6, [r4, #3508]	; 0xdb4
      _b = b;
    a0a6:	mvn.w	r6, #7
    a0aa:	strb.w	r6, [r4, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0ae:	movs	r6, #16
    a0b0:	str.w	r6, [r4, #3512]	; 0xdb8
      _s = s;
    a0b4:	mvn.w	r6, #26
    a0b8:	strb.w	r6, [r4, #3516]	; 0xdbc
      _b = b;
    a0bc:	mvn.w	r6, #48	; 0x30
    a0c0:	strb.w	r6, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a0c4:	mov.w	r6, #4294967295
    a0c8:	strb.w	r6, [r4, #3524]	; 0xdc4
      _b = b;
    a0cc:	mvn.w	r6, #58	; 0x3a
    a0d0:	strb.w	r6, [r4, #3525]	; 0xdc5
    a0d4:	strb.w	r6, [r4, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0d8:	movs	r6, #20
    a0da:	str.w	r6, [r4, #3536]	; 0xdd0
      _s = s;
    a0de:	mvn.w	r6, #44	; 0x2c
    a0e2:	strb.w	r6, [r4, #3540]	; 0xdd4
      _b = b;
    a0e6:	mvn.w	r6, #20
    a0ea:	strb.w	r6, [r4, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a0ee:	movs	r6, #19
    a0f0:	str.w	r6, [r4, #3544]	; 0xdd8
      _s = s;
    a0f4:	mvn.w	r6, #34	; 0x22
    a0f8:	strb.w	r6, [r4, #3548]	; 0xddc
      _b = b;
    a0fc:	mvn.w	r6, #22
    a100:	strb.w	r6, [r4, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a104:	movs	r6, #21
    a106:	str.w	r6, [r4, #3552]	; 0xde0
      _s = s;
    a10a:	mvn.w	r6, #18
    a10e:	strb.w	r6, [r4, #3556]	; 0xde4
      _b = b;
    a112:	mvn.w	r6, #33	; 0x21
    a116:	strb.w	r6, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a11a:	movs	r6, #24
    a11c:	str.w	r6, [r4, #3560]	; 0xde8
      _s = s;
    a120:	mvn.w	r6, #23
    a124:	strb.w	r6, [r4, #3564]	; 0xdec
      _b = b;
    a128:	mvn.w	r6, #28
    a12c:	strb.w	r6, [r4, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a130:	movs	r6, #16
    a132:	str.w	r6, [r4, #3568]	; 0xdf0
      _s = s;
    a136:	mvn.w	r6, #21
    a13a:	strb.w	r6, [r4, #3572]	; 0xdf4
      _b = b;
    a13e:	mvn.w	r6, #22
    a142:	strb.w	r6, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a146:	movw	r6, #355	; 0x163
    a14a:	str.w	r5, [r4, #3624]	; 0xe28
    a14e:	mov	r7, r6
    a150:	str.w	r6, [r4, #3576]	; 0xdf8
      _s = s;
    a154:	mov.w	r6, #4294967295
    a158:	strb.w	r5, [r4, #3628]	; 0xe2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a15c:	str.w	r7, [r4, #3584]	; 0xe00
      _s = s;
    a160:	strb.w	r6, [r4, #3580]	; 0xdfc
      _b = b;
    a164:	mvn.w	r6, #45	; 0x2d
    a168:	strb.w	r5, [r4, #3629]	; 0xe2d
    a16c:	strb.w	r6, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a170:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a174:	str.w	r5, [r4, #3632]	; 0xe30
      _s = s;
    a178:	strb.w	r6, [r4, #3588]	; 0xe04
      _b = b;
    a17c:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a180:	strb.w	r5, [r4, #3636]	; 0xe34
      _b = b;
    a184:	strb.w	r6, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a188:	movs	r6, #13
      _s = s;
      _b = b;
    a18a:	strb.w	r5, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a18e:	str.w	r6, [r4, #3592]	; 0xe08
      _s = s;
    a192:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a196:	str.w	r5, [r4, #3640]	; 0xe38
      _s = s;
    a19a:	strb.w	r6, [r4, #3596]	; 0xe0c
      _b = b;
    a19e:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1a2:	strb.w	r5, [r4, #3644]	; 0xe3c
      _b = b;
    a1a6:	strb.w	r6, [r4, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1aa:	movs	r6, #30
      _s = s;
      _b = b;
    a1ac:	strb.w	r5, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1b0:	str.w	r6, [r4, #3600]	; 0xe10
      _s = s;
    a1b4:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1b8:	str.w	r5, [r4, #3648]	; 0xe40
      _s = s;
    a1bc:	strb.w	r6, [r4, #3604]	; 0xe14
      _b = b;
    a1c0:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1c4:	strb.w	r5, [r4, #3652]	; 0xe44
      _b = b;
    a1c8:	strb.w	r6, [r4, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1cc:	movs	r6, #25
      _s = s;
      _b = b;
    a1ce:	strb.w	r5, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1d2:	str.w	r6, [r4, #3608]	; 0xe18
      _s = s;
    a1d6:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1da:	str.w	r5, [r4, #3656]	; 0xe48
      _s = s;
    a1de:	strb.w	r6, [r4, #3612]	; 0xe1c
      _b = b;
    a1e2:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a1e6:	strb.w	r5, [r4, #3660]	; 0xe4c
      _b = b;
    a1ea:	strb.w	r6, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a1ee:	movs	r6, #29
    a1f0:	str.w	r6, [r4, #3616]	; 0xe20
      _s = s;
    a1f4:	mvn.w	r6, #96	; 0x60
    a1f8:	strb.w	r6, [r4, #3620]	; 0xe24
      _b = b;
    a1fc:	mvn.w	r6, #103	; 0x67
    a200:	strb.w	r6, [r4, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a204:	mov.w	r6, #104	; 0x68
      _b = b;
    a208:	strb.w	r5, [r4, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a20c:	strb.w	r6, [r4, #3668]	; 0xe54
      _b = b;
    a210:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a214:	str.w	r2, [r4, #3664]	; 0xe50
      _s = s;
      _b = b;
    a218:	strb.w	r6, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a21c:	mov.w	r6, #358	; 0x166
    a220:	str.w	r8, [r4, #3712]	; 0xe80
    a224:	str.w	r6, [r4, #3672]	; 0xe58
      _s = s;
    a228:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a22c:	str.w	r8, [r4, #3736]	; 0xe98
      _s = s;
    a230:	strb.w	r6, [r4, #3676]	; 0xe5c
      _b = b;
    a234:	mvn.w	r6, #42	; 0x2a
    a238:	strb.w	r6, [r4, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a23c:	movw	r6, #355	; 0x163
    a240:	str.w	r6, [r4, #3680]	; 0xe60
      _s = s;
    a244:	mvn.w	r6, #2
    a248:	strb.w	r6, [r4, #3684]	; 0xe64
      _b = b;
    a24c:	mvn.w	r6, #31
    a250:	strb.w	r6, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a254:	movw	r6, #357	; 0x165
    a258:	mov	r7, r6
    a25a:	str.w	r6, [r4, #3688]	; 0xe68
      _s = s;
    a25e:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a262:	str.w	r7, [r4, #3696]	; 0xe70
      _s = s;
    a266:	strb.w	r6, [r4, #3692]	; 0xe6c
      _b = b;
    a26a:	mvn.w	r6, #75	; 0x4b
    a26e:	strb.w	r6, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a272:	mov.w	r6, #4294967295
    a276:	strb.w	r6, [r4, #3700]	; 0xe74
      _b = b;
    a27a:	mvn.w	r6, #102	; 0x66
    a27e:	strb.w	r6, [r4, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a282:	movw	r6, #355	; 0x163
    a286:	str.w	r6, [r4, #3704]	; 0xe78
      _s = s;
    a28a:	mov.w	r6, #4294967295
    a28e:	strb.w	r6, [r4, #3708]	; 0xe7c
      _b = b;
    a292:	mvn.w	r6, #76	; 0x4c
    a296:	strb.w	r6, [r4, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a29a:	mvn.w	r6, #49	; 0x31
    a29e:	strb.w	r6, [r4, #3716]	; 0xe84
      _b = b;
    a2a2:	mvn.w	r6, #8
    a2a6:	strb.w	r6, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2aa:	movs	r6, #9
    a2ac:	str.w	r6, [r4, #3720]	; 0xe88
      _s = s;
    a2b0:	mvn.w	r6, #74	; 0x4a
    a2b4:	strb.w	r6, [r4, #3724]	; 0xe8c
      _b = b;
    a2b8:	mvn.w	r6, #10
    a2bc:	strb.w	r6, [r4, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2c0:	movw	r6, #355	; 0x163
    a2c4:	str.w	r6, [r4, #3728]	; 0xe90
      _s = s;
    a2c8:	mov.w	r6, #4294967295
    a2cc:	strb.w	r6, [r4, #3732]	; 0xe94
      _b = b;
    a2d0:	mvn.w	r6, #33	; 0x21
    a2d4:	strb.w	r6, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2d8:	mvn.w	r6, #31
    a2dc:	strb.w	r6, [r4, #3740]	; 0xe9c
      _b = b;
    a2e0:	mvn.w	r6, #6
    a2e4:	strb.w	r6, [r4, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a2e8:	movs	r6, #5
    a2ea:	str.w	r6, [r4, #3744]	; 0xea0
      _s = s;
    a2ee:	mvn.w	r6, #32
    a2f2:	strb.w	r6, [r4, #3748]	; 0xea4
    a2f6:	mvn.w	r6, #67	; 0x43
      _b = b;
    a2fa:	strb.w	lr, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a2fe:	strb.w	r6, [r4, #3796]	; 0xed4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a302:	movs	r6, #2
    a304:	str.w	ip, [r4, #3760]	; 0xeb0
    a308:	str.w	r6, [r4, #3752]	; 0xea8
      _s = s;
    a30c:	mvn.w	r6, #28
    a310:	strb.w	lr, [r4, #3780]	; 0xec4
    a314:	strb.w	r6, [r4, #3756]	; 0xeac
      _b = b;
    a318:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a31c:	str.w	r5, [r4, #3816]	; 0xee8
      _s = s;
      _b = b;
    a320:	strb.w	r6, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a324:	mvn.w	r6, #11
    a328:	strb.w	r5, [r4, #3820]	; 0xeec
    a32c:	strb.w	r6, [r4, #3764]	; 0xeb4
      _b = b;
    a330:	mvn.w	r6, #36	; 0x24
    a334:	strb.w	r5, [r4, #3821]	; 0xeed
    a338:	strb.w	r6, [r4, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a33c:	mov.w	r6, #354	; 0x162
    a340:	str.w	r5, [r4, #3824]	; 0xef0
    a344:	mov	r7, r6
    a346:	str.w	r6, [r4, #3768]	; 0xeb8
      _s = s;
    a34a:	mov.w	r6, #4294967295
    a34e:	strb.w	r5, [r4, #3828]	; 0xef4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a352:	str.w	r7, [r4, #3776]	; 0xec0
      _s = s;
    a356:	strb.w	r6, [r4, #3772]	; 0xebc
      _b = b;
    a35a:	mvn.w	r6, #37	; 0x25
    a35e:	strb.w	r5, [r4, #3829]	; 0xef5
    a362:	strb.w	r6, [r4, #3773]	; 0xebd
    a366:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a36a:	str.w	r5, [r4, #3832]	; 0xef8
      _s = s;
      _b = b;
    a36e:	strb.w	r6, [r4, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a372:	movs	r6, #7
      _s = s;
    a374:	strb.w	r5, [r4, #3836]	; 0xefc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a378:	str.w	r6, [r4, #3784]	; 0xec8
      _s = s;
    a37c:	mvn.w	r6, #19
    a380:	strb.w	r6, [r4, #3788]	; 0xecc
      _b = b;
    a384:	mvn.w	r6, #34	; 0x22
    a388:	strb.w	r6, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a38c:	movs	r6, #21
    a38e:	str.w	r6, [r4, #3792]	; 0xed0
      _s = s;
      _b = b;
    a392:	mvn.w	r6, #6
    a396:	strb.w	r6, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a39a:	movs	r6, #22
    a39c:	str.w	r6, [r4, #3800]	; 0xed8
      _s = s;
    a3a0:	mvn.w	r6, #11
    a3a4:	strb.w	r6, [r4, #3804]	; 0xedc
      _b = b;
    a3a8:	mvn.w	r6, #60	; 0x3c
    a3ac:	strb.w	r6, [r4, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3b0:	movs	r6, #10
    a3b2:	str.w	r6, [r4, #3808]	; 0xee0
      _s = s;
    a3b6:	mov.w	r6, #4294967295
    a3ba:	strb.w	r6, [r4, #3812]	; 0xee4
      _b = b;
    a3be:	mov.w	r6, #22
    a3c2:	strb.w	r6, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3c6:	mov.w	r6, #110	; 0x6e
      _b = b;
    a3ca:	strb.w	r5, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3ce:	strb.w	r6, [r4, #3908]	; 0xf44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3d2:	mov.w	r6, #358	; 0x166
    a3d6:	str.w	ip, [r4, #3896]	; 0xf38
    a3da:	str.w	r6, [r4, #3864]	; 0xf18
      _s = s;
      _b = b;
    a3de:	mov.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3e2:	str.w	r5, [r4, #3840]	; 0xf00
      _s = s;
      _b = b;
    a3e6:	strb.w	r6, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3ea:	movs	r6, #5
      _s = s;
    a3ec:	strb.w	r5, [r4, #3844]	; 0xf04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a3f0:	str.w	r6, [r4, #3872]	; 0xf20
      _s = s;
    a3f4:	mvn.w	r6, #47	; 0x2f
      _b = b;
    a3f8:	strb.w	r5, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a3fc:	strb.w	r6, [r4, #3876]	; 0xf24
      _b = b;
    a400:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a404:	str.w	r5, [r4, #3848]	; 0xf08
      _s = s;
      _b = b;
    a408:	strb.w	r6, [r4, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a40c:	movs	r6, #3
      _s = s;
    a40e:	strb.w	r5, [r4, #3852]	; 0xf0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a412:	str.w	r6, [r4, #3880]	; 0xf28
      _s = s;
    a416:	mvn.w	r6, #102	; 0x66
      _b = b;
    a41a:	strb.w	r5, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a41e:	strb.w	r6, [r4, #3884]	; 0xf2c
      _b = b;
    a422:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a426:	str.w	r5, [r4, #3856]	; 0xf10
      _s = s;
      _b = b;
    a42a:	strb.w	r6, [r4, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a42e:	movw	r6, #355	; 0x163
      _s = s;
    a432:	strb.w	r5, [r4, #3860]	; 0xf14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a436:	str.w	r6, [r4, #3888]	; 0xf30
      _s = s;
    a43a:	mov.w	r6, #4294967295
      _b = b;
    a43e:	strb.w	r5, [r4, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a442:	strb.w	r6, [r4, #3892]	; 0xf34
      _b = b;
    a446:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a44a:	strb.w	fp, [r4, #3868]	; 0xf1c
      _b = b;
    a44e:	strb.w	r6, [r4, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a452:	mvn.w	r6, #9
    a456:	strb.w	r6, [r4, #3900]	; 0xf3c
      _b = b;
    a45a:	mvn.w	r6, #27
    a45e:	strb.w	r6, [r4, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a462:	movs	r6, #13
    a464:	str.w	r6, [r4, #3904]	; 0xf40
      _s = s;
      _b = b;
    a468:	mov.w	r6, #4294967295
    a46c:	strb.w	r6, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a470:	movs	r6, #7
    a472:	str.w	r6, [r4, #3912]	; 0xf48
      _s = s;
    a476:	mvn.w	r6, #46	; 0x2e
    a47a:	strb.w	r6, [r4, #3916]	; 0xf4c
      _b = b;
    a47e:	mvn.w	r6, #11
    a482:	strb.w	r6, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a486:	mov.w	r6, #354	; 0x162
    a48a:	str.w	r6, [r4, #3920]	; 0xf50
      _s = s;
    a48e:	mov.w	r6, #4294967295
    a492:	strb.w	r6, [r4, #3924]	; 0xf54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a496:	movw	r6, #355	; 0x163
      _s = s;
      _b = b;
    a49a:	strb.w	sl, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a49e:	str.w	r6, [r4, #3928]	; 0xf58
      _s = s;
    a4a2:	mvn.w	r6, #5
      _b = b;
    a4a6:	strb.w	r9, [r4, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4aa:	strb.w	r6, [r4, #3932]	; 0xf5c
      _b = b;
    a4ae:	mvn.w	r6, #26
    a4b2:	strb.w	r9, [r4, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4b6:	mvn.w	r9, #115	; 0x73
      _b = b;
    a4ba:	strb.w	r6, [r4, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4be:	mov.w	r6, #354	; 0x162
      _s = s;
    a4c2:	strb.w	fp, [r4, #4004]	; 0xfa4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4c6:	mov	r7, r6
    a4c8:	str.w	r6, [r4, #3936]	; 0xf60
      _s = s;
    a4cc:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a4d0:	str.w	r5, [r4, #4008]	; 0xfa8
    a4d4:	str.w	r7, [r4, #3952]	; 0xf70
    a4d8:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
    a4dc:	strb.w	r6, [r4, #3940]	; 0xf64
      _b = b;
    a4e0:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4e4:	strb.w	r5, [r4, #4012]	; 0xfac
      _b = b;
    a4e8:	strb.w	r6, [r4, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4ec:	mov.w	r6, #4294967295
    a4f0:	strb.w	r6, [r4, #3948]	; 0xf6c
      _b = b;
    a4f4:	mvn.w	r6, #16
    a4f8:	strb.w	r6, [r4, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a4fc:	mov.w	r6, #4294967295
    a500:	strb.w	r6, [r4, #3956]	; 0xf74
      _b = b;
    a504:	mvn.w	r6, #69	; 0x45
    a508:	strb.w	r6, [r4, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a50c:	movw	r6, #357	; 0x165
    a510:	str.w	r6, [r4, #3960]	; 0xf78
      _s = s;
    a514:	mvn.w	r6, #18
    a518:	strb.w	r6, [r4, #3964]	; 0xf7c
      _b = b;
    a51c:	mvn.w	r6, #19
    a520:	strb.w	r6, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a524:	movs	r6, #1
    a526:	str.w	r6, [r4, #3968]	; 0xf80
      _s = s;
    a52a:	mvn.w	r6, #29
    a52e:	strb.w	r6, [r4, #3972]	; 0xf84
      _b = b;
    a532:	mvn.w	r6, #10
    a536:	strb.w	r6, [r4, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a53a:	movs	r6, #13
    a53c:	str.w	r6, [r4, #3976]	; 0xf88
      _s = s;
    a540:	mvn.w	r6, #35	; 0x23
    a544:	strb.w	r6, [r4, #3980]	; 0xf8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a548:	movs	r6, #10
    a54a:	str.w	r6, [r4, #3984]	; 0xf90
      _s = s;
    a54e:	mvn.w	r6, #22
    a552:	strb.w	r6, [r4, #3988]	; 0xf94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a556:	movs	r6, #14
    a558:	str.w	r6, [r4, #3992]	; 0xf98
      _s = s;
    a55c:	mvn.w	r6, #19
    a560:	strb.w	r6, [r4, #3996]	; 0xf9c
      _b = b;
    a564:	mvn.w	r6, #6
    a568:	strb.w	r6, [r4, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a56c:	movs	r6, #16
    a56e:	str.w	r6, [r4, #4000]	; 0xfa0
      _s = s;
      _b = b;
    a572:	mvn.w	r6, #110	; 0x6e
    a576:	strb.w	r6, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a57a:	movw	r6, #353	; 0x161
    a57e:	str.w	r6, [r4, #3944]	; 0xf68
      _s = s;
    a582:	movw	r6, #4100	; 0x1004
      _b = b;
    a586:	strb.w	r5, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a58a:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a58e:	mov.w	r6, #358	; 0x166
      _s = s;
      _b = b;
    a592:	mvn.w	r9, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a596:	str.w	r5, [r4, #4016]	; 0xfb0
    a59a:	str.w	r6, [r4, #4072]	; 0xfe8
      _s = s;
    a59e:	mvn.w	r6, #7
    a5a2:	strb.w	r5, [r4, #4020]	; 0xfb4
    a5a6:	strb.w	r6, [r4, #4076]	; 0xfec
      _b = b;
    a5aa:	mov.w	r6, #123	; 0x7b
    a5ae:	strb.w	r5, [r4, #4021]	; 0xfb5
    a5b2:	strb.w	r6, [r4, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5b6:	movw	r6, #357	; 0x165
    a5ba:	str.w	r5, [r4, #4024]	; 0xfb8
    a5be:	str.w	r6, [r4, #4080]	; 0xff0
      _s = s;
    a5c2:	mvn.w	r6, #16
    a5c6:	strb.w	r5, [r4, #4028]	; 0xfbc
    a5ca:	strb.w	r6, [r4, #4084]	; 0xff4
      _b = b;
    a5ce:	mvn.w	r6, #27
    a5d2:	strb.w	r5, [r4, #4029]	; 0xfbd
    a5d6:	strb.w	r6, [r4, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5da:	movs	r6, #17
    a5dc:	str.w	r5, [r4, #4032]	; 0xfc0
    a5e0:	str.w	r6, [r4, #4088]	; 0xff8
      _s = s;
    a5e4:	mvn.w	r6, #23
    a5e8:	strb.w	r5, [r4, #4036]	; 0xfc4
    a5ec:	strb.w	r6, [r4, #4092]	; 0xffc
      _b = b;
    a5f0:	mvn.w	r6, #16
    a5f4:	strb.w	r5, [r4, #4037]	; 0xfc5
    a5f8:	strb.w	r6, [r4, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a5fc:	mov	r6, r7
    a5fe:	movs	r7, #22
    a600:	str.w	r5, [r4, #4040]	; 0xfc8
      _s = s;
    a604:	strb.w	r5, [r4, #4044]	; 0xfcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a608:	str.w	r7, [r6], #32
    a60c:	mov	r7, r6
      _s = s;
      _b = b;
    a60e:	movw	r6, #4101	; 0x1005
    a612:	strb.w	r5, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a616:	str.w	r5, [r4, #4048]	; 0xfd0
      _s = s;
    a61a:	strb.w	r5, [r4, #4052]	; 0xfd4
      _b = b;
    a61e:	strb.w	r5, [r4, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a622:	str.w	r5, [r4, #4056]	; 0xfd8
      _s = s;
    a626:	strb.w	r5, [r4, #4060]	; 0xfdc
      _b = b;
    a62a:	strb.w	r5, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a62e:	str.w	r5, [r4, #4064]	; 0xfe0
      _s = s;
    a632:	strb.w	r5, [r4, #4068]	; 0xfe4
      _b = b;
    a636:	strb.w	r5, [r4, #4069]	; 0xfe5
    a63a:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a63e:	mov.w	r6, #354	; 0x162
    a642:	str.w	ip, [r7]
    a646:	add.w	r7, r4, #4096	; 0x1000
    a64a:	str	r6, [r7, #64]	; 0x40
    a64c:	movw	r7, #4104	; 0x1008
    a650:	movs	r6, #7
    a652:	str	r6, [r4, r7]
    a654:	movw	r7, #4120	; 0x1018
    a658:	mov.w	r6, #354	; 0x162
    a65c:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a65e:	movw	r6, #4133	; 0x1025
    a662:	mvn.w	r7, #13
    a666:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a668:	movw	r7, #4136	; 0x1028
    a66c:	movs	r6, #1
    a66e:	str	r6, [r4, r7]
    a670:	movw	r7, #4144	; 0x1030
    a674:	movw	r6, #357	; 0x165
    a678:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a67a:	movw	r6, #4165	; 0x1045
    a67e:	mvn.w	r7, #20
    a682:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a684:	movw	r7, #4168	; 0x1048
    a688:	movs	r6, #4
    a68a:	str	r6, [r4, r7]
    a68c:	movw	r7, #4176	; 0x1050
    a690:	movs	r6, #7
    a692:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a694:	mvn.w	r7, #20
    a698:	movw	r6, #4181	; 0x1055
    a69c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a69e:	movw	r6, #4184	; 0x1058
    a6a2:	str.w	r8, [r4, r6]
      _s = s;
    a6a6:	movw	r6, #4188	; 0x105c
    a6aa:	strb	r7, [r4, r6]
      _b = b;
    a6ac:	movw	r6, #4125	; 0x101d
    a6b0:	mvn.w	r7, #44	; 0x2c
    a6b4:	strb	r7, [r4, r6]
    a6b6:	movw	r6, #4157	; 0x103d
    a6ba:	mvn.w	r7, #41	; 0x29
    a6be:	strb	r7, [r4, r6]
    a6c0:	movw	r6, #4141	; 0x102d
    a6c4:	mvn.w	r7, #6
    a6c8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a6ca:	movw	r6, #4116	; 0x1014
    a6ce:	mvn.w	r7, #24
    a6d2:	strb	r7, [r4, r6]
    a6d4:	movw	r6, #4180	; 0x1054
    a6d8:	mvn.w	r7, #28
    a6dc:	strb	r7, [r4, r6]
    a6de:	movw	r6, #4108	; 0x100c
    a6e2:	mvn.w	r7, #25
    a6e6:	strb	r7, [r4, r6]
    a6e8:	movw	r6, #4148	; 0x1034
    a6ec:	mvn.w	r7, #55	; 0x37
    a6f0:	strb	r7, [r4, r6]
      _b = b;
    a6f2:	movw	r6, #4117	; 0x1015
    a6f6:	mvn.w	r7, #23
    a6fa:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a6fc:	movw	r6, #4156	; 0x103c
    a700:	mov.w	r7, #83	; 0x53
    a704:	strb	r7, [r4, r6]
      _b = b;
    a706:	movw	r6, #4109	; 0x100d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a70a:	mvn.w	r7, #90	; 0x5a
      _b = b;
    a70e:	strb.w	fp, [r4, r6]
    a712:	movw	r6, #4173	; 0x104d
    a716:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a71a:	movw	r6, #4172	; 0x104c
    a71e:	strb	r7, [r4, r6]
    a720:	movw	r6, #4124	; 0x101c
    a724:	mov.w	r7, #4294967295
    a728:	strb	r7, [r4, r6]
    a72a:	movw	r6, #4164	; 0x1044
    a72e:	mov.w	r7, #115	; 0x73
    a732:	strb	r7, [r4, r6]
    a734:	movw	r6, #4140	; 0x102c
    a738:	mvn.w	r7, #46	; 0x2e
    a73c:	strb	r7, [r4, r6]
      _b = b;
    a73e:	movw	r6, #4149	; 0x1035
    a742:	mvn.w	r7, #63	; 0x3f
    a746:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a748:	movw	r6, #4132	; 0x1024
    a74c:	mvn.w	r7, #17
    a750:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a752:	movw	r6, #4112	; 0x1010
    a756:	movw	r7, #4152	; 0x1038
    a75a:	str	r5, [r4, r6]
    a75c:	mov.w	r6, #342	; 0x156
    a760:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a762:	movw	r6, #4189	; 0x105d
    a766:	mvn.w	r7, #19
    a76a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a76c:	add.w	r6, r4, #4096	; 0x1000
      _s = s;
    a770:	mvn.w	r7, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a774:	str.w	r8, [r6, #96]	; 0x60
      _s = s;
    a778:	movw	r6, #4196	; 0x1064
    a77c:	strb	r7, [r4, r6]
      _b = b;
    a77e:	movw	r6, #4197	; 0x1065
    a782:	mov.w	r7, #106	; 0x6a
    a786:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a788:	movw	r6, #4200	; 0x1068
    a78c:	movw	r7, #4280	; 0x10b8
    a790:	str	r5, [r4, r6]
      _s = s;
    a792:	movw	r6, #4204	; 0x106c
    a796:	strb	r5, [r4, r6]
      _b = b;
    a798:	movw	r6, #4205	; 0x106d
    a79c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a79e:	movw	r6, #4208	; 0x1070
    a7a2:	str	r5, [r4, r6]
      _s = s;
    a7a4:	movw	r6, #4212	; 0x1074
    a7a8:	strb	r5, [r4, r6]
      _b = b;
    a7aa:	movw	r6, #4213	; 0x1075
    a7ae:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7b0:	movw	r6, #4216	; 0x1078
    a7b4:	str	r5, [r4, r6]
      _s = s;
    a7b6:	movw	r6, #4220	; 0x107c
    a7ba:	strb	r5, [r4, r6]
      _b = b;
    a7bc:	movw	r6, #4221	; 0x107d
    a7c0:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a7c2:	movw	r6, #4228	; 0x1084
    a7c6:	strb	r5, [r4, r6]
      _b = b;
    a7c8:	movw	r6, #4229	; 0x1085
    a7cc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7ce:	movw	r6, #4232	; 0x1088
    a7d2:	str	r5, [r4, r6]
      _s = s;
    a7d4:	movw	r6, #4236	; 0x108c
    a7d8:	strb	r5, [r4, r6]
      _b = b;
    a7da:	movw	r6, #4237	; 0x108d
    a7de:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7e0:	movw	r6, #4240	; 0x1090
    a7e4:	str	r5, [r4, r6]
      _s = s;
    a7e6:	movw	r6, #4244	; 0x1094
    a7ea:	strb	r5, [r4, r6]
      _b = b;
    a7ec:	movw	r6, #4245	; 0x1095
    a7f0:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a7f2:	movw	r6, #4248	; 0x1098
    a7f6:	str	r5, [r4, r6]
      _s = s;
    a7f8:	movw	r6, #4252	; 0x109c
    a7fc:	strb	r5, [r4, r6]
      _b = b;
    a7fe:	movw	r6, #4253	; 0x109d
    a802:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a804:	movw	r6, #4260	; 0x10a4
    a808:	strb	r5, [r4, r6]
      _b = b;
    a80a:	movw	r6, #4261	; 0x10a5
    a80e:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a810:	movw	r6, #4264	; 0x10a8
    a814:	str	r5, [r4, r6]
      _s = s;
    a816:	movw	r6, #4268	; 0x10ac
    a81a:	strb	r5, [r4, r6]
      _b = b;
    a81c:	movw	r6, #4269	; 0x10ad
    a820:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a822:	movw	r6, #4272	; 0x10b0
    a826:	str	r5, [r4, r6]
      _s = s;
    a828:	movw	r6, #4276	; 0x10b4
    a82c:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a82e:	add.w	r6, r4, #4224	; 0x1080
    a832:	str	r5, [r6, #0]
    a834:	str	r5, [r6, #32]
      _s = s;
      _b = b;
    a836:	movw	r6, #4277	; 0x10b5
    a83a:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a83c:	add.w	r6, r4, #4096	; 0x1000
    a840:	str.w	r8, [r6, #224]	; 0xe0
    a844:	movs	r6, #28
    a846:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a848:	movw	r6, #4293	; 0x10c5
    a84c:	mvn.w	r7, #109	; 0x6d
    a850:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a852:	movw	r6, #4308	; 0x10d4
    a856:	mov.w	r7, #70	; 0x46
    a85a:	strb	r7, [r4, r6]
    a85c:	movw	r6, #4316	; 0x10dc
    a860:	mov.w	r7, #46	; 0x2e
    a864:	strb	r7, [r4, r6]
    a866:	movw	r6, #4340	; 0x10f4
    a86a:	mov.w	r7, #76	; 0x4c
    a86e:	strb	r7, [r4, r6]
      _b = b;
    a870:	movw	r6, #4341	; 0x10f5
    a874:	mvn.w	r7, #109	; 0x6d
    a878:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a87a:	movw	r7, #4344	; 0x10f8
    a87e:	movs	r6, #181	; 0xb5
    a880:	str	r6, [r4, r7]
    a882:	add.w	r6, r4, #4096	; 0x1000
    a886:	mov.w	r7, #342	; 0x156
    a88a:	str.w	r7, [r6, #256]	; 0x100
    a88e:	movw	r7, #4360	; 0x1108
    a892:	mov.w	r6, #342	; 0x156
    a896:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a898:	movw	r6, #4309	; 0x10d5
    a89c:	mvn.w	r7, #41	; 0x29
    a8a0:	strb	r7, [r4, r6]
    a8a2:	movw	r6, #4285	; 0x10bd
    a8a6:	mvn.w	r7, #114	; 0x72
    a8aa:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8ac:	movw	r6, #4292	; 0x10c4
    a8b0:	mvn.w	r7, #119	; 0x77
    a8b4:	strb	r7, [r4, r6]
    a8b6:	movw	r6, #4300	; 0x10cc
    a8ba:	mov.w	r7, #103	; 0x67
    a8be:	strb	r7, [r4, r6]
      _b = b;
    a8c0:	movw	r6, #4325	; 0x10e5
    a8c4:	mvn.w	r7, #116	; 0x74
    a8c8:	strb	r7, [r4, r6]
    a8ca:	movw	r6, #4357	; 0x1105
    a8ce:	mov.w	r7, #71	; 0x47
    a8d2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a8d4:	add.w	r6, r4, #4096	; 0x1000
    a8d8:	movs	r7, #112	; 0x70
    a8da:	str.w	r7, [r6, #192]	; 0xc0
      _s = s;
      _b = b;
    a8de:	movw	r6, #4317	; 0x10dd
    a8e2:	mvn.w	r7, #75	; 0x4b
    a8e6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a8e8:	movw	r6, #4324	; 0x10e4
    a8ec:	mov.w	r7, #102	; 0x66
    a8f0:	strb	r7, [r4, r6]
    a8f2:	movw	r6, #4356	; 0x1104
    a8f6:	mov.w	r7, #75	; 0x4b
    a8fa:	strb	r7, [r4, r6]
      _b = b;
    a8fc:	movw	r6, #4349	; 0x10fd
    a900:	mov.w	r7, #73	; 0x49
    a904:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a906:	movw	r6, #4284	; 0x10bc
    a90a:	mvn.w	r7, #71	; 0x47
    a90e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a910:	movw	r7, #4296	; 0x10c8
    a914:	movs	r6, #100	; 0x64
    a916:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a918:	movw	r6, #4301	; 0x10cd
    a91c:	mvn.w	r7, #55	; 0x37
    a920:	strb	r7, [r4, r6]
    a922:	movw	r6, #4333	; 0x10ed
    a926:	mvn.w	r7, #96	; 0x60
    a92a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a92c:	movw	r6, #4332	; 0x10ec
    a930:	mov.w	r7, #83	; 0x53
    a934:	strb	r7, [r4, r6]
    a936:	movw	r6, #4348	; 0x10fc
    a93a:	mvn.w	r7, #77	; 0x4d
    a93e:	strb.w	fp, [r4, r6]
    a942:	movw	r6, #4364	; 0x110c
    a946:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a948:	movw	r7, #4304	; 0x10d0
    a94c:	movs	r6, #151	; 0x97
    a94e:	str	r6, [r4, r7]
    a950:	movw	r7, #4312	; 0x10d8
    a954:	movs	r6, #138	; 0x8a
    a956:	str	r6, [r4, r7]
    a958:	movw	r7, #4336	; 0x10f0
    a95c:	movs	r6, #207	; 0xcf
    a95e:	str	r6, [r4, r7]
    a960:	movw	r7, #4328	; 0x10e8
    a964:	mov.w	r6, #268	; 0x10c
    a968:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a96a:	movw	r6, #4365	; 0x110d
    a96e:	mov.w	r7, #83	; 0x53
    a972:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a974:	movw	r7, #4368	; 0x1110
    a978:	movs	r6, #7
    a97a:	str	r6, [r4, r7]
      _s = s;
      _b = b;
    a97c:	movw	r6, #4373	; 0x1115
    a980:	mvn.w	r7, #60	; 0x3c
    a984:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a986:	movw	r6, #4372	; 0x1114
    a98a:	mvn.w	r7, #44	; 0x2c
    a98e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a990:	movw	r7, #4376	; 0x1118
    a994:	movs	r6, #5
    a996:	str	r6, [r4, r7]
      _s = s;
    a998:	movw	r6, #4380	; 0x111c
    a99c:	mvn.w	r7, #24
    a9a0:	strb	r7, [r4, r6]
      _b = b;
    a9a2:	movw	r6, #4381	; 0x111d
    a9a6:	mvn.w	r7, #89	; 0x59
    a9aa:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a9ac:	movw	r6, #4388	; 0x1124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9b0:	movw	r7, #4488	; 0x1188
      _s = s;
    a9b4:	strb	r5, [r4, r6]
      _b = b;
    a9b6:	movw	r6, #4389	; 0x1125
    a9ba:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9bc:	movw	r6, #4392	; 0x1128
    a9c0:	str	r5, [r4, r6]
      _s = s;
    a9c2:	movw	r6, #4396	; 0x112c
    a9c6:	strb	r5, [r4, r6]
      _b = b;
    a9c8:	movw	r6, #4397	; 0x112d
    a9cc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9ce:	movw	r6, #4400	; 0x1130
    a9d2:	str	r5, [r4, r6]
      _s = s;
    a9d4:	movw	r6, #4404	; 0x1134
    a9d8:	strb	r5, [r4, r6]
      _b = b;
    a9da:	movw	r6, #4405	; 0x1135
    a9de:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9e0:	movw	r6, #4408	; 0x1138
    a9e4:	str	r5, [r4, r6]
      _s = s;
    a9e6:	movw	r6, #4412	; 0x113c
    a9ea:	strb	r5, [r4, r6]
      _b = b;
    a9ec:	movw	r6, #4413	; 0x113d
    a9f0:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    a9f2:	movw	r6, #4420	; 0x1144
    a9f6:	strb	r5, [r4, r6]
      _b = b;
    a9f8:	movw	r6, #4421	; 0x1145
    a9fc:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    a9fe:	movw	r6, #4424	; 0x1148
    aa02:	str	r5, [r4, r6]
      _s = s;
    aa04:	movw	r6, #4428	; 0x114c
    aa08:	strb	r5, [r4, r6]
      _b = b;
    aa0a:	movw	r6, #4429	; 0x114d
    aa0e:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa10:	movw	r6, #4432	; 0x1150
    aa14:	str	r5, [r4, r6]
      _s = s;
    aa16:	movw	r6, #4436	; 0x1154
    aa1a:	strb	r5, [r4, r6]
      _b = b;
    aa1c:	movw	r6, #4437	; 0x1155
    aa20:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa22:	movw	r6, #4440	; 0x1158
    aa26:	str	r5, [r4, r6]
      _s = s;
    aa28:	movw	r6, #4444	; 0x115c
    aa2c:	strb	r5, [r4, r6]
      _b = b;
    aa2e:	movw	r6, #4445	; 0x115d
    aa32:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa34:	movw	r6, #4452	; 0x1164
    aa38:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa3a:	add.w	r6, r4, #4384	; 0x1120
    aa3e:	str	r5, [r6, #0]
    aa40:	str	r5, [r6, #32]
    aa42:	str	r5, [r6, #64]	; 0x40
      _s = s;
      _b = b;
    aa44:	movw	r6, #4453	; 0x1165
    aa48:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aa4a:	movs	r6, #150	; 0x96
    aa4c:	str	r6, [r4, r7]
      _s = s;
    aa4e:	movw	r6, #4492	; 0x118c
    aa52:	mov.w	r7, #91	; 0x5b
    aa56:	strb	r7, [r4, r6]
      _b = b;
    aa58:	movw	r6, #4517	; 0x11a5
    aa5c:	mvn.w	r7, #105	; 0x69
    aa60:	strb	r7, [r4, r6]
    aa62:	movw	r6, #4525	; 0x11ad
    aa66:	mvn.w	r7, #120	; 0x78
    aa6a:	strb	r7, [r4, r6]
    aa6c:	movw	r6, #4533	; 0x11b5
    aa70:	mvn.w	r7, #79	; 0x4f
    aa74:	strb	r7, [r4, r6]
    aa76:	movw	r6, #4509	; 0x119d
    aa7a:	mvn.w	r7, #27
    aa7e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa80:	movw	r6, #4540	; 0x11bc
    aa84:	mvn.w	r7, #16
    aa88:	strb	r7, [r4, r6]
      _b = b;
    aa8a:	movw	r6, #4493	; 0x118d
    aa8e:	mov.w	r7, #112	; 0x70
    aa92:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    aa94:	movw	r6, #4500	; 0x1194
    aa98:	mvn.w	r7, #127	; 0x7f
    aa9c:	strb	r7, [r4, r6]
      _b = b;
    aa9e:	movw	r6, #4501	; 0x1195
    aaa2:	mvn.w	r7, #65	; 0x41
    aaa6:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaa8:	movw	r7, #4520	; 0x11a8
    aaac:	movs	r6, #180	; 0xb4
    aaae:	str	r6, [r4, r7]
      _s = s;
    aab0:	movw	r6, #4508	; 0x119c
    aab4:	mvn.w	r7, #122	; 0x7a
    aab8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aaba:	movw	r7, #4536	; 0x11b8
    aabe:	movs	r6, #166	; 0xa6
    aac0:	str	r6, [r4, r7]
      _s = s;
    aac2:	movw	r6, #4532	; 0x11b4
    aac6:	mvn.w	r7, #2
    aaca:	strb	r7, [r4, r6]
    aacc:	mov.w	r7, #4294967295
    aad0:	movw	r6, #4516	; 0x11a4
    aad4:	strb	r7, [r4, r6]
    aad6:	movw	r6, #4524	; 0x11ac
    aada:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aadc:	add.w	r6, r4, #4096	; 0x1000
    aae0:	movs	r7, #183	; 0xb7
    aae2:	str.w	r7, [r6, #416]	; 0x1a0
    aae6:	movw	r7, #4528	; 0x11b0
    aaea:	movs	r6, #171	; 0xab
    aaec:	str	r6, [r4, r7]
    aaee:	movs	r6, #174	; 0xae
    aaf0:	movw	r7, #4496	; 0x1190
    aaf4:	str	r6, [r4, r7]
    aaf6:	movw	r7, #4504	; 0x1198
    aafa:	str	r6, [r4, r7]
    aafc:	movw	r6, #4456	; 0x1168
      _s = s;
      _b = b;
    ab00:	mvn.w	r7, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab04:	str	r5, [r4, r6]
      _s = s;
    ab06:	movw	r6, #4460	; 0x116c
    ab0a:	strb	r5, [r4, r6]
      _b = b;
    ab0c:	movw	r6, #4461	; 0x116d
    ab10:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab12:	movw	r6, #4464	; 0x1170
    ab16:	str	r5, [r4, r6]
      _s = s;
    ab18:	movw	r6, #4468	; 0x1174
    ab1c:	strb	r5, [r4, r6]
      _b = b;
    ab1e:	movw	r6, #4469	; 0x1175
    ab22:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab24:	movw	r6, #4472	; 0x1178
    ab28:	str	r5, [r4, r6]
      _s = s;
    ab2a:	movw	r6, #4476	; 0x117c
    ab2e:	strb	r5, [r4, r6]
      _b = b;
    ab30:	movw	r6, #4477	; 0x117d
    ab34:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab36:	movw	r6, #4484	; 0x1184
    ab3a:	strb	r5, [r4, r6]
      _b = b;
    ab3c:	movw	r6, #4485	; 0x1185
    ab40:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab42:	add.w	r6, r4, #4480	; 0x1180
    ab46:	str	r5, [r6, #0]
      _s = s;
      _b = b;
    ab48:	movw	r6, #4541	; 0x11bd
    ab4c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    ab4e:	movw	r6, #4564	; 0x11d4
    ab52:	mvn.w	r7, #47	; 0x2f
    ab56:	strb	r7, [r4, r6]
      _b = b;
    ab58:	movw	r6, #4549	; 0x11c5
    ab5c:	mvn.w	r7, #44	; 0x2c
    ab60:	strb	r7, [r4, r6]
    ab62:	movw	r6, #4557	; 0x11cd
    ab66:	mov.w	r7, #84	; 0x54
    ab6a:	strb	r7, [r4, r6]
    ab6c:	movw	r6, #4565	; 0x11d5
    ab70:	mov.w	r7, #94	; 0x5e
    ab74:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab76:	add.w	r6, r4, #4096	; 0x1000
    ab7a:	movs	r7, #166	; 0xa6
    ab7c:	str.w	r5, [r6, #480]	; 0x1e0
    ab80:	str.w	r7, [r6, #448]	; 0x1c0
      _s = s;
    ab84:	movw	r6, #4548	; 0x11c4
    ab88:	mvn.w	r7, #25
    ab8c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab8e:	movw	r7, #4560	; 0x11d0
    ab92:	movs	r6, #187	; 0xbb
    ab94:	str	r6, [r4, r7]
      _s = s;
    ab96:	movw	r6, #4556	; 0x11cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    ab9a:	movw	r7, #4552	; 0x11c8
      _s = s;
    ab9e:	strb.w	fp, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    aba2:	movs	r6, #174	; 0xae
    aba4:	str	r6, [r4, r7]
    aba6:	movw	r6, #4568	; 0x11d8
    abaa:	str	r5, [r4, r6]
      _s = s;
    abac:	movw	r6, #4572	; 0x11dc
    abb0:	strb	r5, [r4, r6]
      _b = b;
    abb2:	movw	r6, #4573	; 0x11dd
    abb6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    abb8:	movw	r6, #4580	; 0x11e4
    abbc:	strb	r5, [r4, r6]
      _b = b;
    abbe:	movw	r6, #4581	; 0x11e5
    abc2:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abc4:	movw	r6, #4584	; 0x11e8
    abc8:	str	r5, [r4, r6]
      _s = s;
    abca:	movw	r6, #4588	; 0x11ec
    abce:	strb	r5, [r4, r6]
      _b = b;
    abd0:	movw	r6, #4589	; 0x11ed
    abd4:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abd6:	movw	r6, #4592	; 0x11f0
    abda:	str	r5, [r4, r6]
      _s = s;
    abdc:	movw	r6, #4596	; 0x11f4
    abe0:	strb	r5, [r4, r6]
      _b = b;
    abe2:	movw	r6, #4597	; 0x11f5
    abe6:	strb	r5, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    abe8:	movw	r6, #4600	; 0x11f8
    abec:	str	r5, [r4, r6]
      _s = s;
    abee:	movw	r6, #4604	; 0x11fc
    abf2:	strb	r5, [r4, r6]
      _b = b;
    abf4:	movw	r6, #4605	; 0x11fd
    abf8:	strb	r5, [r4, r6]
    abfa:	bl	b9d0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    abfe:	ldr	r2, [pc, #624]	; (ae70 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac00:	ldr	r1, [pc, #624]	; (ae74 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac02:	ldr	r0, [pc, #628]	; (ae78 <_GLOBAL__sub_I_bri_level+0x5cb0>)
    ac04:	bl	e470 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    ac08:	movs	r3, #82	; 0x52
    ac0a:	movs	r2, #7
    ac0c:	mov.w	r1, #576	; 0x240
    ac10:	ldr	r0, [pc, #616]	; (ae7c <_GLOBAL__sub_I_bri_level+0x5cb4>)
    ac12:	bl	b9d0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac16:	ldr	r2, [pc, #600]	; (ae70 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac18:	ldr	r1, [pc, #600]	; (ae74 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac1a:	ldr	r0, [pc, #608]	; (ae7c <_GLOBAL__sub_I_bri_level+0x5cb4>)
    ac1c:	bl	e470 <__aeabi_atexit>
#endif

//--------------------------------------------Screens

Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_A, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    ac20:	movs	r3, #82	; 0x52
    ac22:	movs	r2, #2
    ac24:	movs	r1, #156	; 0x9c
    ac26:	ldr	r0, [pc, #600]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5cb8>)
    ac28:	bl	b9d0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac2c:	ldr	r2, [pc, #576]	; (ae70 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac2e:	ldr	r1, [pc, #580]	; (ae74 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac30:	ldr	r0, [pc, #588]	; (ae80 <_GLOBAL__sub_I_bri_level+0x5cb8>)
    ac32:	bl	e470 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_B, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    ac36:	movs	r3, #82	; 0x52
    ac38:	movs	r2, #14
    ac3a:	movs	r1, #115	; 0x73
    ac3c:	ldr	r0, [pc, #580]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cbc>)
    ac3e:	bl	b9d0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    ac42:	ldr	r2, [pc, #556]	; (ae70 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    ac44:	ldr	r1, [pc, #556]	; (ae74 <_GLOBAL__sub_I_bri_level+0x5cac>)
    ac46:	ldr	r0, [pc, #572]	; (ae84 <_GLOBAL__sub_I_bri_level+0x5cbc>)
    ac48:	bl	e470 <__aeabi_atexit>
    ac4c:	ldr	r3, [pc, #568]	; (ae88 <_GLOBAL__sub_I_bri_level+0x5cc0>)

	public:
		

Color(){
	RGB_updated = false;
    ac4e:	mov	r2, r5
    ac50:	add.w	r1, r3, #440	; 0x1b8
    ac54:	strb.w	r2, [r3, #-20]
    ac58:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    ac5a:	strb.w	r2, [r3, #-63]
		unsigned long startTime;
		float position;


Beam() {
	active = false;
    ac5e:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    ac62:	cmp	r1, r3
    ac64:	bne.n	ac54 <_GLOBAL__sub_I_bri_level+0x5a8c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ac66:	ldr	r3, [pc, #548]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    ac68:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac6a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    ac6c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac6e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ac70:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    ac72:	cmp	r3, r1
    ac74:	it	eq
    ac76:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ac78:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ac7a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ac7c:	ite	eq
    ac7e:	moveq	r5, #1
    ac80:	movne	r5, #0
    ac82:	cmp	r5, #0
    ac84:	beq.n	ac6e <_GLOBAL__sub_I_bri_level+0x5aa6>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    ac86:	lsrs	r1, r3, #5
    ac88:	ldr	r3, [pc, #516]	; (ae90 <_GLOBAL__sub_I_bri_level+0x5cc8>)
    ac8a:	ldr	r4, [pc, #520]	; (ae94 <_GLOBAL__sub_I_bri_level+0x5ccc>)

	public:
		

Color(){
	RGB_updated = false;
    ac8c:	movs	r2, #0
    ac8e:	orr.w	r1, r1, r0, lsl #27
    ac92:	add.w	r0, r3, #600	; 0x258
    ac96:	vmov	s15, r1
    ac9a:	vldr	d5, [pc, #460]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ac9e:	vcvt.f64.u32	d7, s15
    aca2:	vdiv.f64	d6, d7, d5
    aca6:	vcvt.u32.f64	s12, d6
    acaa:	vstr	s12, [r4]
    acae:	strb.w	r2, [r3, #-16]
    acb2:	adds	r3, #60	; 0x3c
	HSB_updated = false;
    acb4:	strb.w	r2, [r3, #-75]
	int duration;
	unsigned long startTime;
	float borderSize;

	
	Circle() { active = false; };
    acb8:	strb.w	r2, [r3, #-120]
#define CIRCLE_AM 10


Circle circles[CIRCLE_AM];
    acbc:	cmp	r3, r0
    acbe:	bne.n	acae <_GLOBAL__sub_I_bri_level+0x5ae6>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    acc0:	ldr	r3, [pc, #456]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    acc2:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acc4:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    acc6:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acc8:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    acca:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    accc:	ldr	r6, [pc, #444]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    acce:	cmp	r3, r1
    acd0:	it	eq
    acd2:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    acd4:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    acd6:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    acd8:	ite	eq
    acda:	moveq	r5, #1
    acdc:	movne	r5, #0
    acde:	cmp	r5, #0
    ace0:	beq.n	acc8 <_GLOBAL__sub_I_bri_level+0x5b00>
    ace2:	lsrs	r1, r3, #5
    ace4:	ldr	r3, [pc, #432]	; (ae98 <_GLOBAL__sub_I_bri_level+0x5cd0>)
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A; //= Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    ace6:	ldr	r0, [pc, #436]	; (ae9c <_GLOBAL__sub_I_bri_level+0x5cd4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ace8:	mov	r4, r6
    acea:	orr.w	r1, r1, r2, lsl #27
    acee:	vmov	s15, r1
    acf2:	vldr	d5, [pc, #372]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    acf6:	vcvt.f64.u32	d7, s15
    acfa:	vdiv.f64	d6, d7, d5
    acfe:	vcvt.u32.f64	s12, d6
    ad02:	vstr	s12, [r3]
    ad06:	bl	80 <Screen::Screen()>
Screen screen_B; //= Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    ad0a:	ldr	r0, [pc, #404]	; (aea0 <_GLOBAL__sub_I_bri_level+0x5cd8>)
    ad0c:	bl	80 <Screen::Screen()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ad10:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ad12:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad14:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ad16:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad18:	ldr	r6, [pc, #368]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    ad1a:	cmp	r3, r1
    ad1c:	it	eq
    ad1e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad20:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ad22:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ad24:	ite	eq
    ad26:	moveq	r5, #1
    ad28:	movne	r5, #0
    ad2a:	cmp	r5, #0
    ad2c:	beq.n	ad14 <_GLOBAL__sub_I_bri_level+0x5b4c>
    ad2e:	lsrs	r1, r3, #5
    ad30:	ldr	r3, [pc, #368]	; (aea4 <_GLOBAL__sub_I_bri_level+0x5cdc>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad32:	mov	r4, r6
    ad34:	orr.w	r1, r1, r2, lsl #27
    ad38:	vmov	s15, r1
    ad3c:	vldr	d5, [pc, #296]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ad40:	vcvt.f64.u32	d7, s15
    ad44:	vdiv.f64	d6, d7, d5
    ad48:	vcvt.u32.f64	s12, d6
    ad4c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ad50:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ad52:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad54:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ad56:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad58:	ldr	r7, [pc, #304]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    ad5a:	cmp	r3, r1
    ad5c:	it	eq
    ad5e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad60:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ad62:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ad64:	ite	eq
    ad66:	moveq	r5, #1
    ad68:	movne	r5, #0
    ad6a:	cmp	r5, #0
    ad6c:	beq.n	ad54 <_GLOBAL__sub_I_bri_level+0x5b8c>
    ad6e:	lsrs	r1, r3, #5
    ad70:	ldr	r3, [pc, #308]	; (aea8 <_GLOBAL__sub_I_bri_level+0x5ce0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad72:	mov	r6, r7
    ad74:	orr.w	r1, r1, r2, lsl #27
    ad78:	vmov	s15, r1
    ad7c:	vldr	d5, [pc, #232]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ad80:	vcvt.f64.u32	d7, s15
    ad84:	vdiv.f64	d6, d7, d5
    ad88:	vcvt.u32.f64	s12, d6
    ad8c:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ad90:	ldr	r4, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ad92:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad94:	ldr	r2, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ad96:	ldr	r3, [r6, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ad98:	ldr	r5, [pc, #240]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    ad9a:	cmp	r3, r1
    ad9c:	it	eq
    ad9e:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ada0:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ada2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ada4:	ite	eq
    ada6:	moveq	r0, #1
    ada8:	movne	r0, #0
    adaa:	cmp	r0, #0
    adac:	beq.n	ad94 <_GLOBAL__sub_I_bri_level+0x5bcc>
    adae:	lsrs	r3, r3, #5
    adb0:	ldr	r2, [pc, #248]	; (aeac <_GLOBAL__sub_I_bri_level+0x5ce4>)
elapsedMillis implosionTimer;



byte incomingByte;
String readBuffer;  
    adb2:	movs	r1, #0
    adb4:	ldr	r0, [pc, #248]	; (aeb0 <_GLOBAL__sub_I_bri_level+0x5ce8>)
    adb6:	orr.w	r3, r3, r4, lsl #27
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adba:	mov	r4, r5
    adbc:	vmov	s15, r3
    adc0:	vldr	d5, [pc, #164]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    adc4:	vcvt.f64.u32	d7, s15
    adc8:	vdiv.f64	d6, d7, d5
    adcc:	vcvt.u32.f64	s12, d6
    add0:	vstr	s12, [r2]
    add4:	bl	d840 <String::String(char const*)>
    add8:	ldr	r1, [pc, #216]	; (aeb4 <_GLOBAL__sub_I_bri_level+0x5cec>)
    adda:	ldr	r2, [pc, #148]	; (ae70 <_GLOBAL__sub_I_bri_level+0x5ca8>)
    addc:	ldr	r0, [pc, #208]	; (aeb0 <_GLOBAL__sub_I_bri_level+0x5ce8>)
    adde:	bl	e470 <__aeabi_atexit>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ade2:	ldr	r0, [r5, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ade4:	ldr	r1, [r5, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ade6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ade8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adea:	ldr	r6, [pc, #160]	; (ae8c <_GLOBAL__sub_I_bri_level+0x5cc4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    adec:	cmp	r3, r1
    adee:	it	eq
    adf0:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    adf2:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    adf4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    adf6:	ite	eq
    adf8:	moveq	r5, #1
    adfa:	movne	r5, #0
    adfc:	cmp	r5, #0
    adfe:	beq.n	ade6 <_GLOBAL__sub_I_bri_level+0x5c1e>
    ae00:	lsrs	r1, r3, #5
    ae02:	ldr	r3, [pc, #180]	; (aeb8 <_GLOBAL__sub_I_bri_level+0x5cf0>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae04:	mov	r4, r6
    ae06:	orr.w	r1, r1, r2, lsl #27
    ae0a:	vmov	s15, r1
    ae0e:	vldr	d5, [pc, #88]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ae12:	vcvt.f64.u32	d7, s15
    ae16:	vdiv.f64	d6, d7, d5
    ae1a:	vcvt.u32.f64	s12, d6
    ae1e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    ae22:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    ae24:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae26:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    ae28:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    ae2a:	cmp	r3, r1
    ae2c:	it	eq
    ae2e:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    ae30:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    ae32:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    ae34:	ite	eq
    ae36:	moveq	r5, #1
    ae38:	movne	r5, #0
    ae3a:	cmp	r5, #0
    ae3c:	beq.n	ae26 <_GLOBAL__sub_I_bri_level+0x5c5e>
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
    ae3e:	lsrs	r1, r3, #5
    ae40:	ldr	r3, [pc, #120]	; (aebc <_GLOBAL__sub_I_bri_level+0x5cf4>)
    ae42:	orr.w	r1, r1, r2, lsl #27
    ae46:	vmov	s15, r1
    ae4a:	vldr	d5, [pc, #28]	; ae68 <_GLOBAL__sub_I_bri_level+0x5ca0>
    ae4e:	vcvt.f64.u32	d7, s15
    ae52:	vdiv.f64	d6, d7, d5
    ae56:	vcvt.u32.f64	s12, d6
    ae5a:	vstr	s12, [r3]
    ae5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae62:	nop
    ae64:	nop.w
    ae68:	.word	0xd2f1a9fc
    ae6c:	.word	0x3ff0624d
    ae70:	.word	0x20000964
    ae74:	.word	0x0000b6e9
    ae78:	.word	0x20003e48
    ae7c:	.word	0x20003e5c
    ae80:	.word	0x20008ca4
    ae84:	.word	0x20008cb8
    ae88:	.word	0x20005488
    ae8c:	.word	0x400d4000
    ae90:	.word	0x200029f8
    ae94:	.word	0x20002c14
    ae98:	.word	0x20001790
    ae9c:	.word	0x20005074
    aea0:	.word	0x20005268
    aea4:	.word	0x20002c1c
    aea8:	.word	0x20002c18
    aeac:	.word	0x20008ca0
    aeb0:	.word	0x20007a64
    aeb4:	.word	0x0000d7c1
    aeb8:	.word	0x20007a60
    aebc:	.word	0x20008c9c

0000aec0 <readMessages()>:

void readMessages(){
    aec0:	push	{r4, lr}
  if(Serial1.available()){
    aec2:	ldr	r0, [pc, #196]	; (af88 <readMessages()+0xc8>)
    aec4:	bl	d1f8 <HardwareSerial::available()>
    aec8:	cmp	r0, #0
    aeca:	beq.n	af26 <readMessages()+0x66>
    while (Serial1.available()){
      incomingByte = Serial1.read();
    aecc:	ldr	r4, [pc, #188]	; (af8c <readMessages()+0xcc>)
    aece:	b.n	aee2 <readMessages()+0x22>
    aed0:	ldr	r0, [pc, #180]	; (af88 <readMessages()+0xc8>)
    aed2:	bl	d24c <HardwareSerial::read()>
    aed6:	uxtb	r3, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    aed8:	ldr	r0, [pc, #180]	; (af90 <readMessages()+0xd0>)
    aeda:	mov	r1, r3
    aedc:	strb	r3, [r4, #0]
    aede:	bl	d908 <String::append(char)>
byte incomingByte;
String readBuffer;  

void readMessages(){
  if(Serial1.available()){
    while (Serial1.available()){
    aee2:	ldr	r0, [pc, #164]	; (af88 <readMessages()+0xc8>)
    aee4:	bl	d1f8 <HardwareSerial::available()>
    aee8:	cmp	r0, #0
    aeea:	bne.n	aed0 <readMessages()+0x10>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    aeec:	ldr	r1, [pc, #160]	; (af90 <readMessages()+0xd0>)
    aeee:	ldr	r0, [pc, #164]	; (af94 <readMessages()+0xd4>)
    aef0:	bl	dd5c <Print::print(String const&)>
    aef4:	ldr	r0, [pc, #156]	; (af94 <readMessages()+0xd4>)
    aef6:	bl	dda8 <Print::println()>
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
    aefa:	ldr	r1, [pc, #156]	; (af98 <readMessages()+0xd8>)
    aefc:	ldr	r0, [pc, #144]	; (af90 <readMessages()+0xd0>)
    aefe:	bl	d928 <String::equals(char const*) const>
    af02:	cbz	r0, af32 <readMessages()+0x72>
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af04:	ldr	r4, [pc, #148]	; (af9c <readMessages()+0xdc>)
    af06:	ldr	r3, [r4, #0]
    af08:	adds	r3, #50	; 0x32
    af0a:	cmp	r3, #119	; 0x77
    af0c:	ble.n	af7a <readMessages()+0xba>
    af0e:	cmp	r3, #255	; 0xff
    af10:	it	ge
    af12:	movge	r3, #255	; 0xff
    af14:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    af16:	ldr	r0, [pc, #136]	; (afa0 <readMessages()+0xe0>)
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af18:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    af1a:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    af1e:	ldrb	r1, [r4, #0]
    af20:	ldr	r0, [pc, #128]	; (afa4 <readMessages()+0xe4>)
    af22:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af26:	ldr	r1, [pc, #128]	; (afa8 <readMessages()+0xe8>)
    af28:	ldr	r0, [pc, #100]	; (af90 <readMessages()+0xd0>)
}
    af2a:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af2e:	b.w	d884 <String::operator=(char const*)>
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
    af32:	ldr	r1, [pc, #120]	; (afac <readMessages()+0xec>)
    af34:	ldr	r0, [pc, #88]	; (af90 <readMessages()+0xd0>)
    af36:	bl	d928 <String::equals(char const*) const>
    af3a:	cmp	r0, #0
    af3c:	beq.n	af26 <readMessages()+0x66>
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af3e:	ldr	r4, [pc, #92]	; (af9c <readMessages()+0xdc>)
    af40:	ldr	r3, [r4, #0]
    af42:	subs	r3, #50	; 0x32
    af44:	cmp	r3, #119	; 0x77
    af46:	ble.n	af80 <readMessages()+0xc0>
    af48:	cmp	r3, #255	; 0xff
    af4a:	it	ge
    af4c:	movge	r3, #255	; 0xff
    af4e:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    af50:	ldr	r0, [pc, #76]	; (afa0 <readMessages()+0xe0>)
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af52:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    af54:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    af58:	ldrb	r1, [r4, #0]
    af5a:	ldr	r0, [pc, #72]	; (afa4 <readMessages()+0xe4>)
    af5c:	bl	bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>
    af60:	movs	r1, #4
    af62:	ldr	r0, [pc, #76]	; (afb0 <readMessages()+0xf0>)
    af64:	bl	c09c <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    af68:	ldr	r0, [pc, #40]	; (af94 <readMessages()+0xd4>)
    af6a:	bl	dda8 <Print::println()>
      Serial.println("down");
    }
  }
  readBuffer = "";
    af6e:	ldr	r1, [pc, #56]	; (afa8 <readMessages()+0xe8>)
    af70:	ldr	r0, [pc, #28]	; (af90 <readMessages()+0xd0>)
}
    af72:	ldmia.w	sp!, {r4, lr}
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
      Serial.println("down");
    }
  }
  readBuffer = "";
    af76:	b.w	d884 <String::operator=(char const*)>
    af7a:	movs	r1, #120	; 0x78
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    af7c:	mov	r3, r1
    af7e:	b.n	af16 <readMessages()+0x56>
    af80:	movs	r1, #120	; 0x78
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    af82:	mov	r3, r1
    af84:	b.n	af50 <readMessages()+0x90>
    af86:	nop
    af88:	.word	0x20000ea8
    af8c:	.word	0x2000178c
    af90:	.word	0x20007a64
    af94:	.word	0x20000f0c
    af98:	.word	0x2000019c
    af9c:	.word	0x20000968
    afa0:	.word	0x20003e48
    afa4:	.word	0x20003e5c
    afa8:	.word	0x200001a8
    afac:	.word	0x200001a4
    afb0:	.word	0x200001ac

0000afb4 <loop>:
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}


void loop() {
    afb4:	push	{r3, lr}
  readMessages();
    afb6:	bl	aec0 <readMessages()>

  if (isRegularAnimation) regular_animation();
    afba:	ldr	r3, [pc, #20]	; (afd0 <loop+0x1c>)
    afbc:	ldrb	r3, [r3, #0]
    afbe:	cbnz	r3, afc8 <loop+0x14>
  else ceremony_animation();
}
    afc0:	ldmia.w	sp!, {r3, lr}

void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
  else ceremony_animation();
    afc4:	b.w	4cf0 <ceremony_animation()>
}
    afc8:	ldmia.w	sp!, {r3, lr}


void loop() {
  readMessages();

  if (isRegularAnimation) regular_animation();
    afcc:	b.w	3b78 <regular_animation()>
    afd0:	.word	0x20007a5c
    afd4:	.word	0x00000000

0000afd8 <readAnimationType()>:
    }
  }
  readBuffer = "";
}

void readAnimationType(){
    afd8:	push	{r4, r5, r6, r7, lr}
    afda:	vpush	{d8}
    afde:	sub	sp, #20
  String animReadBuffer = "";
    afe0:	ldr	r1, [pc, #252]	; (b0e0 <readAnimationType()+0x108>)
    afe2:	mov	r0, sp
    afe4:	bl	d840 <String::String(char const*)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    afe8:	ldr	r3, [pc, #248]	; (b0e4 <readAnimationType()+0x10c>)
    afea:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    afec:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    afee:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    aff0:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    aff2:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    aff4:	cmp	r3, r1
    aff6:	it	eq
    aff8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    affa:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    affc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    affe:	ite	eq
    b000:	moveq	r5, #1
    b002:	movne	r5, #0
    b004:	cmp	r5, #0
    b006:	beq.n	aff0 <readAnimationType()+0x18>
    b008:	lsrs	r1, r3, #5
  unsigned int readStartTime = rtcMillis();
  isRegularAnimation = false;
    b00a:	ldr	r6, [pc, #220]	; (b0e8 <readAnimationType()+0x110>)
    b00c:	movs	r3, #0
    b00e:	movw	r5, #5000	; 0x1388
    b012:	orr.w	r1, r1, r2, lsl #27
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b016:	ldr	r4, [pc, #204]	; (b0e4 <readAnimationType()+0x10c>)
    b018:	strb	r3, [r6, #0]
    b01a:	vmov	s15, r1
    b01e:	vldr	d8, [pc, #184]	; b0d8 <readAnimationType()+0x100>
    b022:	vcvt.f64.u32	d7, s15
    b026:	vdiv.f64	d6, d7, d8
    b02a:	vcvt.u32.f64	s12, d6
    b02e:	vmov	r3, s12
    b032:	add	r3, r5
    b034:	mov	r5, r3
    b036:	ldr	r0, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b038:	ldr	r1, [r4, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b03a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b03c:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b03e:	cmp	r3, r1
    b040:	it	eq
    b042:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b044:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b046:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b048:	ite	eq
    b04a:	moveq	r7, #1
    b04c:	movne	r7, #0
    b04e:	cmp	r7, #0
    b050:	beq.n	b03a <readAnimationType()+0x62>
  while(rtcMillis()<readStartTime+5000){
    b052:	lsrs	r1, r3, #5
    b054:	orr.w	r1, r1, r2, lsl #27
    b058:	vmov	s15, r1
    b05c:	vcvt.f64.u32	d7, s15
    b060:	vdiv.f64	d6, d7, d8
    b064:	vcvt.u32.f64	s12, d6
    b068:	vmov	r3, s12
    b06c:	cmp	r5, r3
    b06e:	bhi.n	b07a <readAnimationType()+0xa2>
    b070:	b.n	b0c4 <readAnimationType()+0xec>
    b072:	mov	r1, r7
    b074:	mov	r0, sp
    b076:	bl	d908 <String::append(char)>
      while (Serial1.available()){
    b07a:	ldr	r0, [pc, #112]	; (b0ec <readAnimationType()+0x114>)
    b07c:	bl	d1f8 <HardwareSerial::available()>
    b080:	cbz	r0, b09c <readAnimationType()+0xc4>
        char inChar = Serial1.read();
    b082:	ldr	r0, [pc, #104]	; (b0ec <readAnimationType()+0x114>)
    b084:	bl	d24c <HardwareSerial::read()>
    b088:	uxtb	r7, r0
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
    b08a:	sub.w	r3, r7, #114	; 0x72
    b08e:	cmp	r3, #1
    b090:	bhi.n	b072 <readAnimationType()+0x9a>
    b092:	ldr	r1, [pc, #76]	; (b0e0 <readAnimationType()+0x108>)
    b094:	mov	r0, sp
    b096:	bl	d884 <String::operator=(char const*)>
    b09a:	b.n	b072 <readAnimationType()+0x9a>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    b09c:	mov	r1, sp
    b09e:	ldr	r0, [pc, #80]	; (b0f0 <readAnimationType()+0x118>)
    b0a0:	bl	dd5c <Print::print(String const&)>
    b0a4:	ldr	r0, [pc, #72]	; (b0f0 <readAnimationType()+0x118>)
    b0a6:	bl	dda8 <Print::println()>
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
    b0aa:	ldr	r1, [pc, #72]	; (b0f4 <readAnimationType()+0x11c>)
    b0ac:	mov	r0, sp
    b0ae:	bl	d928 <String::equals(char const*) const>
    b0b2:	mov	r7, r0
    b0b4:	cbnz	r0, b0d2 <readAnimationType()+0xfa>
        isRegularAnimation = true;
        break;
      } else if (animReadBuffer.equals("spec")){
    b0b6:	ldr	r1, [pc, #64]	; (b0f8 <readAnimationType()+0x120>)
    b0b8:	mov	r0, sp
    b0ba:	bl	d928 <String::equals(char const*) const>
    b0be:	cmp	r0, #0
    b0c0:	beq.n	b036 <readAnimationType()+0x5e>
        isRegularAnimation = false;
    b0c2:	strb	r7, [r6, #0]
  }
  readBuffer = "";
}

void readAnimationType(){
  String animReadBuffer = "";
    b0c4:	mov	r0, sp
    b0c6:	bl	d7c0 <String::~String()>
      } else if (animReadBuffer.equals("spec")){
        isRegularAnimation = false;
        break;
      }
  }
}
    b0ca:	add	sp, #20
    b0cc:	vpop	{d8}
    b0d0:	pop	{r4, r5, r6, r7, pc}
        if(inChar=='r' || inChar=='s') animReadBuffer = "";
        animReadBuffer += inChar;
      }
      Serial.println(animReadBuffer);
      if (animReadBuffer.equals("reg")){
        isRegularAnimation = true;
    b0d2:	movs	r3, #1
    b0d4:	strb	r3, [r6, #0]
        break;
    b0d6:	b.n	b0c4 <readAnimationType()+0xec>
    b0d8:	.word	0xd2f1a9fc
    b0dc:	.word	0x3ff0624d
    b0e0:	.word	0x200001a8
    b0e4:	.word	0x400d4000
    b0e8:	.word	0x20007a5c
    b0ec:	.word	0x20000ea8
    b0f0:	.word	0x20000f0c
    b0f4:	.word	0x200001b4
    b0f8:	.word	0x200001b8
    b0fc:	.word	0x00000000

0000b100 <setup>:
}




void setup() {
    b100:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial.begin(9600);
  Serial1.begin(9600);
    b104:	movs	r2, #0
}




void setup() {
    b106:	sub.w	sp, sp, #532	; 0x214
  Serial.begin(9600);
  Serial1.begin(9600);
    b10a:	mov.w	r1, #9600	; 0x2580
    b10e:	ldr	r0, [pc, #824]	; (b448 <setup+0x348>)
    b110:	bl	d314 <HardwareSerial::begin(unsigned long, unsigned short)>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b114:	ldr	r4, [pc, #820]	; (b44c <setup+0x34c>)
  delay(SETUP_DELAY);
    b116:	movw	r0, #3500	; 0xdac
    b11a:	add	r5, sp, #28
    b11c:	bl	cfbc <delay>
    b120:	add.w	fp, sp, #388	; 0x184

  updateRandomSeed();
    b124:	bl	10bc <updateRandomSeed()>

  rtc_set(0);
    b128:	movs	r0, #0
    b12a:	bl	cbd0 <rtc_set>
  
  readAnimationType();
    b12e:	bl	afd8 <readAnimationType()>
    b132:	ldmia	r4!, {r0, r1, r2, r3}
    b134:	stmia	r5!, {r0, r1, r2, r3}
    b136:	ldmia.w	r4, {r0, r1}
    b13a:	movs	r2, #168	; 0xa8
    b13c:	stmia.w	r5, {r0, r1}
    b140:	add.w	r1, r4, #8
    b144:	add	r0, sp, #52	; 0x34
    b146:	bl	bbd0 <memcpy>
    b14a:	add.w	r1, r4, #176	; 0xb0
    b14e:	movs	r2, #168	; 0xa8
    b150:	add	r0, sp, #220	; 0xdc
    b152:	bl	bbd0 <memcpy>
    b156:	add.w	r3, r4, #344	; 0x158
    b15a:	ldmia.w	r3, {r0, r1, r2}
    b15e:	stmia.w	fp, {r0, r1, r2}
    b162:	movs	r2, #60	; 0x3c
    b164:	movs	r1, #0
    b166:	add	r0, sp, #400	; 0x190
    b168:	bl	ebac <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b16c:	movs	r1, #3
    b16e:	movs	r0, #2
    b170:	bl	dab8 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    b174:	movs	r1, #4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b176:	str	r0, [sp, #0]
		{CIRCLE, random(2, 4), false},
    b178:	movs	r0, #2
    b17a:	bl	dab8 <random(long, long)>
		{LINE, random(3, 10), false}
    b17e:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    b180:	mov	r9, r0
		{LINE, random(3, 10), false}
    b182:	movs	r0, #3
    b184:	bl	dab8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b188:	ldr	r3, [pc, #708]	; (b450 <setup+0x350>)
    b18a:	mov	r8, r0
    b18c:	ldr	r5, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b18e:	mov	r0, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b190:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b192:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b194:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b196:	ldr	r4, [pc, #696]	; (b450 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b198:	cmp	r3, r1
    b19a:	it	eq
    b19c:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b19e:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b1a0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b1a2:	ite	eq
    b1a4:	moveq	r6, #1
    b1a6:	movne	r6, #0
    b1a8:	cmp	r6, #0
    b1aa:	beq.n	b192 <setup+0x92>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1ac:	mov.w	r0, #1728	; 0x6c0
    b1b0:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1b4:	mov.w	r2, #1728	; 0x6c0
    b1b8:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1ba:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1bc:	bl	ebac <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1c0:	mov.w	r0, #1728	; 0x6c0
    b1c4:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1c8:	mov.w	r2, #1728	; 0x6c0
    b1cc:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1ce:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1d0:	bl	ebac <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1d4:	mov.w	r0, #1728	; 0x6c0
    b1d8:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1dc:	mov.w	r2, #1728	; 0x6c0
    b1e0:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b1e2:	str	r0, [sp, #12]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b1e4:	bl	ebac <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b1e8:	mov.w	r1, #360	; 0x168
    b1ec:	movs	r0, #0
    b1ee:	bl	dab8 <random(long, long)>
		hue_difference = random(60, 260);
    b1f2:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b1f6:	str	r0, [sp, #16]
		hue_difference = random(60, 260);
    b1f8:	movs	r0, #60	; 0x3c
    b1fa:	bl	dab8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b1fe:	ldr	r6, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b200:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b202:	ldr	r5, [r4, #40]	; 0x28
    b204:	str	r0, [sp, #20]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b206:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b208:	ldr	r3, [r1, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b20a:	ldr	r7, [pc, #580]	; (b450 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b20c:	cmp	r3, r5
    b20e:	it	eq
    b210:	cmpeq	r2, r6
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b212:	mov	r6, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b214:	mov	r5, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b216:	ite	eq
    b218:	moveq	r0, #1
    b21a:	movne	r0, #0
    b21c:	cmp	r0, #0
    b21e:	beq.n	b206 <setup+0x106>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b220:	ldr	r4, [pc, #560]	; (b454 <setup+0x354>)
    b222:	add.w	sl, sp, #28
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
    b226:	lsrs	r5, r5, #5
    b228:	mov	lr, r4
    b22a:	ldmia.w	sl!, {r0, r1, r2, r3}
    b22e:	stmia.w	lr!, {r0, r1, r2, r3}
    b232:	ldmia.w	sl, {r0, r1}
    b236:	movs	r2, #168	; 0xa8
    b238:	stmia.w	lr, {r0, r1}
    b23c:	add	r1, sp, #52	; 0x34
    b23e:	add.w	r0, r4, #24
    b242:	bl	bbd0 <memcpy>
    b246:	movs	r2, #168	; 0xa8
    b248:	add	r1, sp, #220	; 0xdc
    b24a:	add.w	r0, r4, #192	; 0xc0
    b24e:	bl	bbd0 <memcpy>
    b252:	ldr	r0, [sp, #0]
    b254:	movs	r2, #1
    b256:	movs	r1, #5
    b258:	str	r0, [sp, #416]	; 0x1a0
    b25a:	orr.w	r0, r5, r6, lsl #27
    b25e:	str	r2, [sp, #404]	; 0x194
    b260:	add.w	r3, r4, #360	; 0x168
    b264:	vmov	s14, r0
    b268:	str	r2, [sp, #436]	; 0x1b4
    b26a:	movs	r2, #2
    b26c:	str	r1, [sp, #400]	; 0x190
    b26e:	vcvt.f64.u32	d7, s14
    b272:	add	r6, sp, #400	; 0x190
    b274:	str	r2, [sp, #412]	; 0x19c
    b276:	movs	r2, #3
    b278:	str.w	r9, [sp, #428]	; 0x1ac
    b27c:	add.w	r5, r4, #372	; 0x174
    b280:	str	r2, [sp, #424]	; 0x1a8
    b282:	mov.w	r9, #0
    b286:	str.w	r8, [sp, #440]	; 0x1b8


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b28a:	add.w	lr, sp, #28
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b28e:	ldr.w	ip, [pc, #488]	; b478 <setup+0x378>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b292:	ldr.w	r8, [pc, #440]	; b44c <setup+0x34c>
    b296:	vldr	d5, [pc, #424]	; b440 <setup+0x340>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b29a:	ldmia.w	fp, {r0, r1, r2}
    b29e:	vdiv.f64	d6, d7, d5
    b2a2:	vldr	s15, [pc, #436]	; b458 <setup+0x358>
    b2a6:	stmia.w	r3, {r0, r1, r2}
    b2aa:	ldmia	r6!, {r0, r1, r2, r3}
    b2ac:	stmia	r5!, {r0, r1, r2, r3}
    b2ae:	ldmia	r6!, {r0, r1, r2, r3}
    b2b0:	stmia	r5!, {r0, r1, r2, r3}
    b2b2:	ldmia	r6!, {r0, r1, r2, r3}
    b2b4:	stmia	r5!, {r0, r1, r2, r3}
    b2b6:	ldr	r3, [sp, #16]
    b2b8:	ldr	r0, [pc, #416]	; (b45c <setup+0x35c>)
    b2ba:	str.w	r3, [r4, #480]	; 0x1e0
    b2be:	ldr	r3, [sp, #20]
    b2c0:	ldr	r1, [pc, #412]	; (b460 <setup+0x360>)
    b2c2:	str.w	r3, [r4, #484]	; 0x1e4
    b2c6:	ldr	r3, [sp, #4]
    b2c8:	ldr	r2, [pc, #408]	; (b464 <setup+0x364>)
    b2ca:	str.w	r3, [r4, #488]	; 0x1e8
    b2ce:	ldr	r3, [sp, #8]
    b2d0:	str.w	r0, [r4, #444]	; 0x1bc
    b2d4:	str.w	r3, [r4, #492]	; 0x1ec
    b2d8:	ldr	r3, [sp, #12]
    b2da:	vcvt.u32.f64	s12, d6
    b2de:	str.w	r1, [r4, #448]	; 0x1c0
    b2e2:	str.w	r3, [r4, #496]	; 0x1f0
    b2e6:	ldr	r3, [pc, #384]	; (b468 <setup+0x368>)
    b2e8:	str.w	r2, [r4, #452]	; 0x1c4
    b2ec:	str.w	r3, [r4, #436]	; 0x1b4
    b2f0:	ldr	r3, [pc, #376]	; (b46c <setup+0x36c>)
    b2f2:	str.w	ip, [r4, #432]	; 0x1b0
    b2f6:	str.w	r3, [r4, #440]	; 0x1b8
    b2fa:	ldr	r3, [pc, #372]	; (b470 <setup+0x370>)
    b2fc:	vstr	s15, [r4, #468]	; 0x1d4
    b300:	str.w	r3, [r4, #456]	; 0x1c8
    b304:	strb.w	r9, [r4, #460]	; 0x1cc
    b308:	str.w	r9, [r4, #464]	; 0x1d0
    b30c:	str.w	r9, [r4, #472]	; 0x1d8
    b310:	ldmia.w	r6, {r0, r1, r2}
    b314:	stmia.w	r5, {r0, r1, r2}


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b318:	ldmia.w	r8!, {r0, r1, r2, r3}
    b31c:	stmia.w	lr!, {r0, r1, r2, r3}
    b320:	ldmia.w	r8, {r0, r1}
    b324:	vstr	s12, [r4, #476]	; 0x1dc
    b328:	movs	r2, #168	; 0xa8
    b32a:	stmia.w	sl, {r0, r1}
    b32e:	add.w	r1, r8, #8
    b332:	add	r0, sp, #52	; 0x34
    b334:	bl	bbd0 <memcpy>
    b338:	add.w	r1, r8, #176	; 0xb0
    b33c:	movs	r2, #168	; 0xa8
    b33e:	add	r0, sp, #220	; 0xdc
    b340:	bl	bbd0 <memcpy>
    b344:	add.w	r3, r8, #344	; 0x158
    b348:	ldmia.w	r3, {r0, r1, r2}
    b34c:	stmia.w	fp, {r0, r1, r2}
    b350:	movs	r2, #60	; 0x3c
    b352:	mov	r1, r9
    b354:	add	r0, sp, #400	; 0x190
    b356:	bl	ebac <memset>
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b35a:	movs	r1, #3
    b35c:	movs	r0, #2
    b35e:	bl	dab8 <random(long, long)>
		{CIRCLE, random(2, 4), false},
    b362:	movs	r1, #4
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
    b364:	mov	r8, r0
		{CIRCLE, random(2, 4), false},
    b366:	movs	r0, #2
    b368:	bl	dab8 <random(long, long)>
		{LINE, random(3, 10), false}
    b36c:	movs	r1, #10
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
    b36e:	mov	r9, r0
		{LINE, random(3, 10), false}
    b370:	movs	r0, #3
    b372:	bl	dab8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b376:	ldr	r5, [r7, #36]	; 0x24
    b378:	mov	sl, r0
  uint32_t lo1 = SNVS_HPRTCLR;
    b37a:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b37c:	mov	r0, r7
    b37e:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b380:	ldr	r3, [r0, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b382:	ldr	r4, [pc, #204]	; (b450 <setup+0x350>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b384:	cmp	r3, r1
    b386:	it	eq
    b388:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b38a:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b38c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b38e:	ite	eq
    b390:	moveq	r6, #1
    b392:	movne	r6, #0
    b394:	cmp	r6, #0
    b396:	beq.n	b37e <setup+0x27e>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b398:	mov.w	r0, #1728	; 0x6c0
    b39c:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3a0:	mov.w	r2, #1728	; 0x6c0
    b3a4:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3a6:	str	r0, [sp, #0]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3a8:	bl	ebac <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3ac:	mov.w	r0, #1728	; 0x6c0
    b3b0:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3b4:	mov.w	r2, #1728	; 0x6c0
    b3b8:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3ba:	str	r0, [sp, #4]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3bc:	bl	ebac <memset>


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3c0:	mov.w	r0, #1728	; 0x6c0
    b3c4:	bl	de60 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3c8:	mov.w	r2, #1728	; 0x6c0
    b3cc:	movs	r1, #0


public:
	int bottom_hue_threshold;
	int hue_difference;
	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
    b3ce:	str	r0, [sp, #8]
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
    b3d0:	bl	ebac <memset>
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b3d4:	mov.w	r1, #360	; 0x168
    b3d8:	movs	r0, #0
    b3da:	bl	dab8 <random(long, long)>
		hue_difference = random(60, 260);
    b3de:	mov.w	r1, #260	; 0x104
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
    b3e2:	str	r0, [sp, #12]
		hue_difference = random(60, 260);
    b3e4:	movs	r0, #60	; 0x3c
    b3e6:	bl	dab8 <random(long, long)>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b3ea:	ldr	r7, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b3ec:	mov	r1, r4

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b3ee:	ldr	r6, [r4, #40]	; 0x28
    b3f0:	str	r0, [sp, #16]
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b3f2:	ldr	r2, [r1, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b3f4:	ldr	r3, [r1, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b3f6:	cmp	r3, r6
    b3f8:	it	eq
    b3fa:	cmpeq	r2, r7
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b3fc:	mov	r7, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b3fe:	mov	r6, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b400:	ite	eq
    b402:	moveq	r0, #1
    b404:	movne	r0, #0
    b406:	cmp	r0, #0
    b408:	beq.n	b3f2 <setup+0x2f2>
#define LINE 1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {
    b40a:	ldr	r5, [pc, #104]	; (b474 <setup+0x374>)
    b40c:	add.w	lr, sp, #28
    b410:	lsrs	r6, r6, #5
    b412:	mov	r4, r5
    b414:	orr.w	r6, r6, r7, lsl #27
    b418:	movs	r7, #0
    b41a:	ldmia.w	lr!, {r0, r1, r2, r3}
    b41e:	stmia	r4!, {r0, r1, r2, r3}
    b420:	ldmia.w	lr, {r0, r1}
    b424:	movs	r2, #168	; 0xa8
    b426:	stmia.w	r4, {r0, r1}
    b42a:	add	r1, sp, #52	; 0x34
    b42c:	add.w	r0, r5, #24
    b430:	bl	bbd0 <memcpy>
    b434:	add	r1, sp, #220	; 0xdc
    b436:	movs	r2, #168	; 0xa8
    b438:	add.w	r0, r5, #192	; 0xc0
    b43c:	b.n	b47c <setup+0x37c>
    b43e:	nop
    b440:	.word	0xd2f1a9fc
    b444:	.word	0x3ff0624d
    b448:	.word	0x20000ea8
    b44c:	.word	0x20000000
    b450:	.word	0x400d4000
    b454:	.word	0x20005074
    b458:	.word	0x00000000
    b45c:	.word	0x20005614
    b460:	.word	0x20003e48
    b464:	.word	0x20009ef0
    b468:	.word	0x20001794
    b46c:	.word	0x20008ccc
    b470:	.word	0x20000bb0
    b474:	.word	0x20005268
    b478:	.word	0x2000b0f0
    b47c:	bl	bbd0 <memcpy>
    b480:	vmov	s15, r6
    b484:	movs	r2, #1
    b486:	mov.w	lr, #5
    b48a:	vcvt.f64.u32	d7, s15
    b48e:	movs	r0, #2
    b490:	movs	r1, #3
    b492:	str.w	lr, [sp, #400]	; 0x190
    b496:	str	r2, [sp, #436]	; 0x1b4
    b498:	add.w	r3, r5, #360	; 0x168
    b49c:	str	r1, [sp, #424]	; 0x1a8
    b49e:	add	r4, sp, #400	; 0x190
    b4a0:	str	r2, [sp, #404]	; 0x194
    b4a2:	add.w	r6, r5, #372	; 0x174
    b4a6:	str	r0, [sp, #412]	; 0x19c
    b4a8:	str.w	r8, [sp, #416]	; 0x1a0
    b4ac:	str.w	r9, [sp, #428]	; 0x1ac
    b4b0:	str.w	sl, [sp, #440]	; 0x1b8
    b4b4:	ldr.w	ip, [pc, #436]	; b66c <setup+0x56c>
    b4b8:	ldr.w	lr, [pc, #436]	; b670 <setup+0x570>
    b4bc:	vldr	s11, [pc, #384]	; b640 <setup+0x540>
    b4c0:	ldr.w	sl, [pc, #432]	; b674 <setup+0x574>
    b4c4:	ldr.w	r9, [pc, #432]	; b678 <setup+0x578>
    b4c8:	ldr.w	r8, [pc, #432]	; b67c <setup+0x57c>
    b4cc:	vldr	d4, [pc, #360]	; b638 <setup+0x538>
    b4d0:	ldmia.w	fp, {r0, r1, r2}
    b4d4:	vdiv.f64	d6, d7, d4
    b4d8:	stmia.w	r3, {r0, r1, r2}
    b4dc:	ldmia	r4!, {r0, r1, r2, r3}
    b4de:	stmia	r6!, {r0, r1, r2, r3}
    b4e0:	ldmia	r4!, {r0, r1, r2, r3}
    b4e2:	stmia	r6!, {r0, r1, r2, r3}
    b4e4:	ldmia	r4!, {r0, r1, r2, r3}
    b4e6:	stmia	r6!, {r0, r1, r2, r3}
    b4e8:	ldr	r3, [sp, #12]
    b4ea:	str.w	ip, [r5, #452]	; 0x1c4
    b4ee:	str.w	r3, [r5, #480]	; 0x1e0
    b4f2:	ldr	r3, [sp, #16]
    b4f4:	str.w	lr, [r5, #456]	; 0x1c8
    b4f8:	str.w	r3, [r5, #484]	; 0x1e4
    b4fc:	ldr	r3, [sp, #0]
    b4fe:	vstr	s11, [r5, #468]	; 0x1d4
    b502:	str.w	r3, [r5, #488]	; 0x1e8
    b506:	ldr	r3, [sp, #4]
    b508:	str.w	sl, [r5, #436]	; 0x1b4
    b50c:	str.w	r3, [r5, #492]	; 0x1ec
    b510:	ldr	r3, [sp, #8]
    b512:	vcvt.u32.f64	s12, d6
    b516:	str.w	r9, [r5, #440]	; 0x1b8
    b51a:	str.w	r3, [r5, #496]	; 0x1f0
    b51e:	ldr	r3, [pc, #292]	; (b644 <setup+0x544>)
    b520:	str.w	r8, [r5, #444]	; 0x1bc
    b524:	str.w	r3, [r5, #432]	; 0x1b0
    b528:	ldr	r3, [pc, #284]	; (b648 <setup+0x548>)
    b52a:	strb.w	r7, [r5, #460]	; 0x1cc
    b52e:	str.w	r3, [r5, #448]	; 0x1c0
    b532:	ldmia.w	r4, {r0, r1, r2}
    b536:	stmia.w	r6, {r0, r1, r2}
  screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
  screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);

  

  synapse_A.begin();
    b53a:	ldr	r0, [pc, #272]	; (b64c <setup+0x54c>)
    b53c:	vstr	s12, [r5, #476]	; 0x1dc
    b540:	str.w	r7, [r5, #464]	; 0x1d0
    b544:	str.w	r7, [r5, #472]	; 0x1d8
    b548:	bl	b708 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    b54c:	ldr	r0, [pc, #256]	; (b650 <setup+0x550>)
    b54e:	bl	b708 <Adafruit_NeoPixel::begin()>

  matrix_A.begin();
    b552:	ldr	r0, [pc, #256]	; (b654 <setup+0x554>)
    b554:	bl	b708 <Adafruit_NeoPixel::begin()>
  matrix_B.begin();
    b558:	ldr	r0, [pc, #236]	; (b648 <setup+0x548>)
    b55a:	bl	b708 <Adafruit_NeoPixel::begin()>
  
 
  if(isRegularAnimation){
    b55e:	ldr	r3, [pc, #248]	; (b658 <setup+0x558>)
    b560:	ldrb	r3, [r3, #0]
    b562:	cmp	r3, #0
    b564:	bne.n	b62e <setup+0x52e>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b566:	ldr	r3, [pc, #244]	; (b65c <setup+0x55c>)
    b568:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b56a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    b56c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b56e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b570:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b572:	ldr	r6, [pc, #232]	; (b65c <setup+0x55c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b574:	cmp	r3, r1
    b576:	it	eq
    b578:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b57a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b57c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b57e:	ite	eq
    b580:	moveq	r5, #1
    b582:	movne	r5, #0
    b584:	cmp	r5, #0
    b586:	beq.n	b56e <setup+0x46e>
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    b588:	lsrs	r1, r3, #5
    b58a:	ldr	r3, [pc, #212]	; (b660 <setup+0x560>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b58c:	mov	r4, r6
    b58e:	orr.w	r1, r1, r2, lsl #27
    b592:	vmov	s15, r1
    b596:	vldr	d5, [pc, #160]	; b638 <setup+0x538>
    b59a:	vcvt.f64.u32	d7, s15
    b59e:	vdiv.f64	d6, d7, d5
    b5a2:	vcvt.u32.f64	s12, d6
    b5a6:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b5aa:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b5ac:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5ae:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b5b0:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5b2:	ldr	r6, [pc, #168]	; (b65c <setup+0x55c>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    b5b4:	cmp	r3, r1
    b5b6:	it	eq
    b5b8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5ba:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b5bc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b5be:	ite	eq
    b5c0:	moveq	r5, #1
    b5c2:	movne	r5, #0
    b5c4:	cmp	r5, #0
    b5c6:	beq.n	b5ae <setup+0x4ae>
    b5c8:	lsrs	r1, r3, #5
    b5ca:	ldr	r3, [pc, #152]	; (b664 <setup+0x564>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5cc:	mov	r4, r6
    b5ce:	orr.w	r1, r1, r2, lsl #27
    b5d2:	vmov	s15, r1
    b5d6:	vldr	d5, [pc, #96]	; b638 <setup+0x538>
    b5da:	vcvt.f64.u32	d7, s15
    b5de:	vdiv.f64	d6, d7, d5
    b5e2:	vcvt.u32.f64	s12, d6
    b5e6:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    b5ea:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    b5ec:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5ee:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    b5f0:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    b5f2:	cmp	r3, r1
    b5f4:	it	eq
    b5f6:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    b5f8:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    b5fa:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    b5fc:	ite	eq
    b5fe:	moveq	r5, #1
    b600:	movne	r5, #0
    b602:	cmp	r5, #0
    b604:	beq.n	b5ee <setup+0x4ee>
    b606:	lsrs	r1, r3, #5
    b608:	ldr	r3, [pc, #92]	; (b668 <setup+0x568>)
    b60a:	orr.w	r1, r1, r2, lsl #27
    b60e:	vmov	s15, r1
    b612:	vldr	d5, [pc, #36]	; b638 <setup+0x538>
    b616:	vcvt.f64.u32	d7, s15
    b61a:	vdiv.f64	d6, d7, d5
    b61e:	vcvt.u32.f64	s12, d6
    b622:	vstr	s12, [r3]


  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceCircleUpdate = 0;
}
    b626:	add.w	sp, sp, #532	; 0x214
    b62a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  matrix_A.begin();
  matrix_B.begin();
  
 
  if(isRegularAnimation){
    regular_setup();
    b62e:	bl	10f8 <regular_setup()>
    b632:	b.n	b566 <setup+0x466>
    b634:	nop.w
    b638:	.word	0xd2f1a9fc
    b63c:	.word	0x3ff0624d
    b640:	.word	0x00000000
    b644:	.word	0x2000c314
    b648:	.word	0x20003e5c
    b64c:	.word	0x20008ca4
    b650:	.word	0x20008cb8
    b654:	.word	0x20003e48
    b658:	.word	0x20007a5c
    b65c:	.word	0x400d4000
    b660:	.word	0x20002c1c
    b664:	.word	0x20002c14
    b668:	.word	0x20001790
    b66c:	.word	0x20003e70
    b670:	.word	0x20000970
    b674:	.word	0x20002c24
    b678:	.word	0x20007a74
    b67c:	.word	0x20006838

0000b680 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    b680:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    b682:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    b684:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    b686:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    b688:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    b68a:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    b68c:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    b690:	cbz	r3, b6aa <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    b692:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    b696:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    b69a:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    b69e:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    b6a2:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    b6a6:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    b6aa:	ldrb	r7, [r0, #15]
    b6ac:	ldrb	r4, [r0, #12]
    b6ae:	cmp	r4, r7
    b6b0:	beq.n	b6dc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    b6b2:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    b6b4:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    b6b6:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6ba:	add	r7, r1
    b6bc:	cbnz	r3, b6d2 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    b6be:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6c0:	strb	r3, [r7, #0]
    b6c2:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    b6c4:	strb	r6, [r1, r7]
    p[gOffset] = g;
    b6c6:	ldrb	r3, [r0, #13]
    b6c8:	strb	r5, [r1, r3]
    p[bOffset] = b;
    b6ca:	ldrb	r3, [r0, #14]
    b6cc:	strb.w	lr, [r1, r3]
    b6d0:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    b6d2:	mul.w	r3, r3, r2
    b6d6:	ubfx	r3, r3, #8, #8
    b6da:	b.n	b6c0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    b6dc:	add.w	r1, r1, r1, lsl #1
    b6e0:	ldr	r3, [r0, #8]
    b6e2:	add	r1, r3
    b6e4:	b.n	b6c4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    b6e6:	nop

0000b6e8 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    b6e8:	push	{r4, lr}
    b6ea:	mov	r4, r0
  if(pixels)   free(pixels);
    b6ec:	ldr	r0, [r0, #8]
    b6ee:	cbz	r0, b6f4 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    b6f0:	bl	e564 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    b6f4:	ldrsb.w	r0, [r4, #6]
    b6f8:	cmp	r0, #0
    b6fa:	blt.n	b704 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    b6fc:	uxtb	r0, r0
    b6fe:	movs	r1, #0
    b700:	bl	d100 <pinMode>
}
    b704:	mov	r0, r4
    b706:	pop	{r4, pc}

0000b708 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    b708:	push	{r4, lr}
    b70a:	mov	r4, r0
  if(pin >= 0) {
    b70c:	ldrsb.w	r0, [r0, #6]
    b710:	cmp	r0, #0
    b712:	blt.n	b724 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    b714:	uxtb	r0, r0
    b716:	movs	r1, #1
    b718:	bl	d100 <pinMode>
    digitalWrite(pin, LOW);
    b71c:	movs	r1, #0
    b71e:	ldrb	r0, [r4, #6]
    b720:	bl	d0f4 <digitalWrite>
  }
  begun = true;
    b724:	movs	r3, #1
    b726:	strb	r3, [r4, #1]
    b728:	pop	{r4, pc}
    b72a:	nop

0000b72c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    b72c:	push	{r3, r4, r5, lr}
    b72e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    b730:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    b732:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    b734:	cbz	r0, b73a <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    b736:	bl	e564 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    b73a:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    b73c:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    b73e:	ldrb	r0, [r4, #12]
    b740:	cmp	r3, r0
    b742:	ite	eq
    b744:	moveq	r0, #3
    b746:	movne	r0, #4
    b748:	smulbb	r0, r0, r5
    b74c:	uxth	r0, r0
    b74e:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    b750:	bl	e47c <calloc>
    b754:	str	r0, [r4, #8]
    b756:	cbz	r0, b75c <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    b758:	strh	r5, [r4, #2]
    b75a:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    b75c:	strh	r0, [r4, #4]
    b75e:	strh	r0, [r4, #2]
    b760:	pop	{r3, r4, r5, pc}
    b762:	nop

0000b764 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    b764:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b766:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    b768:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b76c:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b770:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    b772:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    b776:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b77a:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b77e:	ite	hi
    b780:	movhi	r6, #0
    b782:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    b784:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b788:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    b78c:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    b78e:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    b790:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    b792:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    b794:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    b796:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    b798:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    b79a:	cbz	r5, b7b2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    b79c:	subs	r1, r2, r1
    b79e:	clz	r1, r1
    b7a2:	lsrs	r1, r1, #5
    b7a4:	cmp	r1, r4
    b7a6:	beq.n	b7b2 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    b7a8:	ldrh	r1, [r0, #2]
  }
}
    b7aa:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    b7ae:	b.w	b72c <Adafruit_NeoPixel::updateLength(unsigned short)>
    b7b2:	pop	{r4, r5, r6, r7, pc}

0000b7b4 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    b7b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    b7b8:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    b7ba:	sub	sp, #20
    b7bc:	str	r0, [sp, #12]

  if(!pixels) return;
    b7be:	cmp	r3, #0
    b7c0:	beq.n	b8a6 <Adafruit_NeoPixel::show()+0xf2>
    b7c2:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    b7c4:	bl	d07c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    b7c8:	ldr	r3, [r4, #16]
    b7ca:	subs	r0, r0, r3
    b7cc:	cmp.w	r0, #300	; 0x12c
    b7d0:	bcc.n	b7c4 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    b7d2:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7d4:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7d6:	ldr	r0, [pc, #408]	; (b970 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7d8:	ldrsb.w	r3, [r6, #6]
    b7dc:	ldr	r4, [pc, #404]	; (b974 <Adafruit_NeoPixel::show()+0x1c0>)
    b7de:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7e0:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b7e2:	ldr	r1, [pc, #404]	; (b978 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    b7e4:	ldr.w	ip, [r4, r3]
    b7e8:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    b7ea:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7ec:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    b7f0:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    b7f4:	mov	r5, r6
    b7f6:	mov	r6, r3
    b7f8:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    b7fa:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    b7fc:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b7fe:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b800:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b802:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b804:	ldr	r4, [pc, #372]	; (b97c <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b806:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    b80a:	str	r2, [sp, #8]
    b80c:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    b80e:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    b810:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b812:	ldr	r1, [pc, #364]	; (b980 <Adafruit_NeoPixel::show()+0x1cc>)
    b814:	ldr	r0, [r4, #0]
    b816:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    b818:	cmp	r2, #0
    b81a:	beq.n	b8ac <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b81c:	ldr	r5, [pc, #356]	; (b984 <Adafruit_NeoPixel::show()+0x1d0>)
    b81e:	lsrs	r3, r3, #8
    while(p < end) {
    b820:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    b822:	umull	r2, r3, r5, r3
    b826:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    b82a:	bcs.n	b886 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    b82c:	ldr	r7, [pc, #344]	; (b988 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    b82e:	ldr	r6, [pc, #348]	; (b98c <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    b830:	ldr	r3, [sp, #4]
    b832:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    b836:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    b83a:	ldrb.w	sl, [r3], #1
    b83e:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    b840:	ldr	r2, [r4, #0]
    b842:	ldr	r3, [r1, #0]
    b844:	subs	r2, r2, r0
    b846:	lsrs	r3, r3, #8
    b848:	umull	fp, r3, r5, r3
    b84c:	cmp.w	r2, r3, lsr #4
    b850:	bcc.n	b840 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    b852:	ldr	r3, [pc, #296]	; (b97c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    b854:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    b858:	ldr	r0, [r3, #0]
        *set = msk;
    b85a:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    b85e:	beq.n	b95e <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    b860:	ldr	r3, [r4, #0]
    b862:	ldr	r2, [r1, #0]
    b864:	subs	r3, r3, r0
    b866:	umull	fp, r2, r7, r2
    b86a:	cmp.w	r3, r2, lsr #19
    b86e:	bcc.n	b860 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b870:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    b874:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b878:	mov.w	lr, lr, lsr #1
    b87c:	bne.n	b840 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    b87e:	ldr	r3, [sp, #8]
    b880:	ldr	r2, [sp, #4]
    b882:	cmp	r3, r2
    b884:	bne.n	b830 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    b886:	ldr	r5, [pc, #244]	; (b97c <Adafruit_NeoPixel::show()+0x1c8>)
    b888:	ldr	r4, [pc, #248]	; (b984 <Adafruit_NeoPixel::show()+0x1d0>)
    b88a:	ldr	r2, [r5, #0]
    b88c:	ldr	r3, [r1, #0]
    b88e:	subs	r2, r2, r0
    b890:	lsrs	r3, r3, #8
    b892:	umull	r6, r3, r4, r3
    b896:	cmp.w	r2, r3, lsr #4
    b89a:	bcc.n	b88a <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    b89c:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    b89e:	bl	d07c <micros>
    b8a2:	ldr	r3, [sp, #12]
    b8a4:	str	r0, [r3, #16]
}
    b8a6:	add	sp, #20
    b8a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    b8ac:	ldr	r6, [pc, #212]	; (b984 <Adafruit_NeoPixel::show()+0x1d0>)
    b8ae:	lsrs	r3, r3, #7
    b8b0:	umull	r2, r3, r6, r3
    while(p < end) {
    b8b4:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    b8b6:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    b8ba:	ldr	r3, [sp, #4]
    b8bc:	cmp	r3, r2
    b8be:	bcs.n	b92a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    b8c0:	ldr.w	lr, [pc, #204]	; b990 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    b8c4:	ldr	r7, [pc, #196]	; (b98c <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    b8c6:	ldr	r3, [sp, #4]
    b8c8:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    b8cc:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    b8d0:	ldrb.w	fp, [r3], #1
    b8d4:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    b8d6:	ldr	r2, [r4, #0]
    b8d8:	ldr	r3, [r1, #0]
    b8da:	subs	r2, r2, r0
    b8dc:	lsrs	r3, r3, #7
    b8de:	umull	r5, r3, r6, r3
    b8e2:	cmp.w	r2, r3, lsr #4
    b8e6:	bcc.n	b8d6 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    b8e8:	ldr	r3, [pc, #144]	; (b97c <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    b8ea:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    b8ee:	ldr	r0, [r3, #0]
        *set = msk;
    b8f0:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    b8f4:	beq.n	b94c <Adafruit_NeoPixel::show()+0x198>
    b8f6:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    b8fa:	ldr	r2, [r4, #0]
    b8fc:	ldr	r5, [r1, #0]
    b8fe:	subs	r2, r2, r0
    b900:	umull	ip, r3, lr, r5
    b904:	subs	r5, r5, r3
    b906:	add.w	r3, r3, r5, lsr #1
    b90a:	cmp.w	r2, r3, lsr #19
    b90e:	bcc.n	b8fa <Adafruit_NeoPixel::show()+0x146>
    b910:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b914:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    b918:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    b91c:	mov.w	r9, r9, lsr #1
    b920:	bne.n	b8d6 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    b922:	ldr	r3, [sp, #8]
    b924:	ldr	r2, [sp, #4]
    b926:	cmp	r3, r2
    b928:	bne.n	b8c6 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    b92a:	ldr	r5, [pc, #80]	; (b97c <Adafruit_NeoPixel::show()+0x1c8>)
    b92c:	ldr	r4, [pc, #84]	; (b984 <Adafruit_NeoPixel::show()+0x1d0>)
    b92e:	ldr	r2, [r5, #0]
    b930:	ldr	r3, [r1, #0]
    b932:	subs	r2, r2, r0
    b934:	lsrs	r3, r3, #7
    b936:	umull	r6, r3, r4, r3
    b93a:	cmp.w	r2, r3, lsr #4
    b93e:	bcc.n	b92e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    b940:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    b942:	bl	d07c <micros>
    b946:	ldr	r3, [sp, #12]
    b948:	str	r0, [r3, #16]
    b94a:	b.n	b8a6 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    b94c:	ldr	r3, [r4, #0]
    b94e:	ldr	r2, [r1, #0]
    b950:	subs	r3, r3, r0
    b952:	umull	r5, r2, r7, r2
    b956:	cmp.w	r3, r2, lsr #19
    b95a:	bcc.n	b94c <Adafruit_NeoPixel::show()+0x198>
    b95c:	b.n	b914 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    b95e:	ldr	r3, [r4, #0]
    b960:	ldr	r2, [r1, #0]
    b962:	subs	r3, r3, r0
    b964:	umull	fp, r2, r6, r2
    b968:	cmp.w	r3, r2, lsr #20
    b96c:	bcc.n	b95e <Adafruit_NeoPixel::show()+0x1aa>
    b96e:	b.n	b870 <Adafruit_NeoPixel::show()+0xbc>
    b970:	.word	0xe000edfc
    b974:	.word	0x200005c0
    b978:	.word	0xe0001000
    b97c:	.word	0xe0001004
    b980:	.word	0x20000df4
    b984:	.word	0x014f8b59
    b988:	.word	0x6b5fca6b
    b98c:	.word	0x431bde83
    b990:	.word	0x421f67b3

0000b994 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    b994:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    b996:	ldrb	r3, [r0, #1]
    b998:	cbz	r3, b9b6 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    b99a:	mov	r4, r0
    b99c:	ldrsb.w	r0, [r0, #6]
    b9a0:	mov	r5, r1
    b9a2:	cmp	r0, #0
    b9a4:	blt.n	b9ba <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    b9a6:	uxtb	r0, r0
    b9a8:	movs	r1, #0
    b9aa:	bl	d100 <pinMode>
    b9ae:	ldrb	r3, [r4, #1]
    pin = p;
    b9b0:	strb	r5, [r4, #6]
    if(begun) {
    b9b2:	cbnz	r3, b9bc <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    b9b4:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    b9b6:	strb	r1, [r0, #6]
    b9b8:	pop	{r3, r4, r5, pc}
    b9ba:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    b9bc:	mov	r0, r5
    b9be:	movs	r1, #1
    b9c0:	bl	d100 <pinMode>
      digitalWrite(p, LOW);
    b9c4:	mov	r0, r5
    b9c6:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    b9c8:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    b9cc:	b.w	d0f4 <digitalWrite>

0000b9d0 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    b9d0:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    b9d2:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    b9d4:	mov	r4, r0
    b9d6:	mov	r7, r1
    b9d8:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    b9da:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    b9dc:	strb	r5, [r0, #1]
    b9de:	strb	r5, [r0, #7]
    b9e0:	str	r5, [r0, #8]
    b9e2:	str	r5, [r0, #16]
{
  updateType(t);
    b9e4:	bl	b764 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    b9e8:	mov	r1, r7
    b9ea:	mov	r0, r4
    b9ec:	bl	b72c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    b9f0:	mov	r0, r4
    b9f2:	mov	r1, r6
    b9f4:	bl	b994 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    b9f8:	mov	r0, r4
    b9fa:	pop	{r3, r4, r5, r6, r7, pc}

0000b9fc <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    b9fc:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    b9fe:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    ba00:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    ba04:	cmp	r4, r1
    ba06:	bls.n	ba3c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    ba08:	ldrb	r4, [r0, #7]
    ba0a:	cbz	r4, ba1e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    ba0c:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    ba10:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    ba14:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    ba18:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    ba1a:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    ba1c:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    ba1e:	ldrb	r5, [r0, #15]
    ba20:	ldrb	r4, [r0, #12]
    ba22:	cmp	r4, r5
    ba24:	beq.n	ba40 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ba26:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ba28:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    ba2a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    ba2e:	strb	r7, [r1, r5]
    ba30:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    ba32:	strb	r2, [r1, r5]
    p[gOffset] = g;
    ba34:	ldrb	r2, [r0, #13]
    ba36:	strb	r3, [r1, r2]
    p[bOffset] = b;
    ba38:	ldrb	r3, [r0, #14]
    ba3a:	strb	r6, [r1, r3]
  }
}
    ba3c:	pop	{r4, r5, r6, r7}
    ba3e:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    ba40:	add.w	r1, r1, r1, lsl #1
    ba44:	ldr	r4, [r0, #8]
    ba46:	add	r1, r4
    ba48:	b.n	ba32 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    ba4a:	nop

0000ba4c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    ba4c:	ldrh	r3, [r0, #2]
    ba4e:	cmp	r3, r1
    ba50:	bls.n	ba56 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    ba52:	b.w	b680 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    ba56:	bx	lr

0000ba58 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    ba58:	ldrh	r3, [r0, #2]
    ba5a:	cmp	r3, r1
    ba5c:	bls.n	ba8e <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    ba5e:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    ba60:	ldrb	r2, [r0, #15]
    ba62:	ldrb	r3, [r0, #12]
    ba64:	cmp	r2, r3
    ba66:	beq.n	ba92 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ba68:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    ba6a:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    ba6c:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ba70:	ldrb	r3, [r1, r3]
    ba72:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    ba74:	cbnz	r4, bac4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    ba76:	lsls	r3, r3, #16
    ba78:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    ba7a:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    ba7c:	orr.w	r0, r3, r5, lsl #24
    ba80:	ldrb	r3, [r1, r4]
    ba82:	ldrb	r2, [r1, r2]
    ba84:	orrs	r3, r0
    ba86:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    ba8a:	pop	{r4, r5}
    ba8c:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    ba8e:	movs	r0, #0
    ba90:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    ba92:	add.w	r1, r1, r1, lsl #1
    ba96:	ldr	r3, [r0, #8]
    if(brightness) {
    ba98:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    ba9a:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    ba9c:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    ba9e:	cbz	r4, baf4 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    baa0:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    baa2:	lsls	r2, r2, #8
    baa4:	ldrb	r3, [r0, #14]
    baa6:	ldrb	r0, [r1, r5]
    baa8:	ldrb	r3, [r1, r3]
    baaa:	lsls	r0, r0, #8
    baac:	lsls	r3, r3, #8
    baae:	udiv	r2, r2, r4
    bab2:	udiv	r0, r0, r4
    bab6:	lsls	r2, r2, #16
    bab8:	udiv	r3, r3, r4
    babc:	orr.w	r0, r2, r0, lsl #8
    bac0:	orrs	r0, r3
    bac2:	b.n	ba8a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    bac4:	lsls	r3, r3, #8
    bac6:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    bac8:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    baca:	lsls	r5, r5, #8
    bacc:	ldrb	r2, [r1, r2]
    bace:	ldrb	r0, [r1, r0]
    bad0:	lsls	r2, r2, #8
    bad2:	lsls	r0, r0, #8
    bad4:	udiv	r1, r3, r4
    bad8:	udiv	r5, r5, r4
    badc:	udiv	r2, r2, r4
    bae0:	lsls	r3, r1, #16
    bae2:	udiv	r0, r0, r4
    bae6:	orr.w	r3, r3, r5, lsl #24
    baea:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    baec:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    baee:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    baf2:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    baf4:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    baf6:	lsls	r2, r2, #16
    baf8:	ldrb	r3, [r0, #14]
    bafa:	ldrb	r0, [r1, r4]
    bafc:	ldrb	r3, [r1, r3]
    bafe:	orr.w	r0, r2, r0, lsl #8
    bb02:	orrs	r0, r3
    bb04:	b.n	ba8a <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    bb06:	nop

0000bb08 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    bb08:	ldrh	r0, [r0, #2]
    bb0a:	bx	lr

0000bb0c <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    bb0c:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    bb0e:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    bb10:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    bb12:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    bb14:	cmp	r6, r4
    bb16:	beq.n	bb40 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    bb18:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    bb1a:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    bb1c:	ands.w	r4, r4, #255	; 0xff
    bb20:	bne.n	bb44 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    bb22:	ldrh	r3, [r0, #4]
    bb24:	cbz	r3, bb3e <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    bb26:	mov	r2, r5
      c      = *ptr;
    bb28:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    bb2a:	mul.w	r3, r4, r3
    bb2e:	asrs	r3, r3, #8
    bb30:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    bb34:	subs	r3, r2, r5
    bb36:	ldrh	r1, [r0, #4]
    bb38:	uxth	r3, r3
    bb3a:	cmp	r1, r3
    bb3c:	bhi.n	bb28 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    bb3e:	strb	r6, [r0, #7]
  }
}
    bb40:	pop	{r4, r5, r6}
    bb42:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    bb44:	cmp	r1, #255	; 0xff
    bb46:	beq.n	bb54 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    bb48:	lsls	r3, r6, #8
    bb4a:	subs	r3, #1
    bb4c:	sdiv	r4, r3, r4
    bb50:	uxth	r4, r4
    bb52:	b.n	bb22 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    bb54:	movw	r3, #65535	; 0xffff
    bb58:	sdiv	r4, r3, r4
    bb5c:	b.n	bb22 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    bb5e:	nop

0000bb60 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    bb60:	ldrh	r2, [r0, #4]
    bb62:	movs	r1, #0
    bb64:	ldr	r0, [r0, #8]
    bb66:	b.w	ebac <memset>
    bb6a:	nop

0000bb6c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    bb6c:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    bb6e:	movs	r1, #0
    bb70:	mov	r3, r0
    bb72:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    bb76:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    bb78:	movs	r4, #0
    bb7a:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    bb7c:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    bb80:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    bb82:	bfc	r2, #0, #4
    bb86:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    bb88:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    bb8c:	cmp	r3, r5
    bb8e:	bne.n	bb76 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    bb90:	mov	r2, r4
    bb92:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    bb94:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    bb96:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bb9a:	add.w	r3, r0, r2, lsl #4
    bb9e:	adds	r3, #8
    bba0:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bba2:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bba6:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bbaa:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    bbae:	beq.n	bbb8 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    bbb0:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    bbb2:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    bbb4:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    bbb6:	str	r6, [r1, #8]
    bbb8:	adds	r2, #1
    bbba:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    bbbc:	cmp	r2, #12
    bbbe:	bne.n	bb9a <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    bbc0:	pop	{r4, r5, r6}
    bbc2:	bx	lr

0000bbc4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    bbc4:	ldr	r0, [pc, #4]	; (bbcc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    bbc6:	b.w	bb6c <TimeAlarmsClass::TimeAlarmsClass()>
    bbca:	nop
    bbcc:	.word	0x2000d538

0000bbd0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    bbd0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    bbd2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    bbd6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    bbda:	bne.n	bcb8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bbdc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    bbde:	bcc.n	bc64 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bbe0:	ldr.w	r3, [r1], #4
    bbe4:	str.w	r3, [r0], #4
    bbe8:	ldr.w	r3, [r1], #4
    bbec:	str.w	r3, [r0], #4
    bbf0:	ldr.w	r3, [r1], #4
    bbf4:	str.w	r3, [r0], #4
    bbf8:	ldr.w	r3, [r1], #4
    bbfc:	str.w	r3, [r0], #4
    bc00:	ldr.w	r3, [r1], #4
    bc04:	str.w	r3, [r0], #4
    bc08:	ldr.w	r3, [r1], #4
    bc0c:	str.w	r3, [r0], #4
    bc10:	ldr.w	r3, [r1], #4
    bc14:	str.w	r3, [r0], #4
    bc18:	ldr.w	r3, [r1], #4
    bc1c:	str.w	r3, [r0], #4
    bc20:	ldr.w	r3, [r1], #4
    bc24:	str.w	r3, [r0], #4
    bc28:	ldr.w	r3, [r1], #4
    bc2c:	str.w	r3, [r0], #4
    bc30:	ldr.w	r3, [r1], #4
    bc34:	str.w	r3, [r0], #4
    bc38:	ldr.w	r3, [r1], #4
    bc3c:	str.w	r3, [r0], #4
    bc40:	ldr.w	r3, [r1], #4
    bc44:	str.w	r3, [r0], #4
    bc48:	ldr.w	r3, [r1], #4
    bc4c:	str.w	r3, [r0], #4
    bc50:	ldr.w	r3, [r1], #4
    bc54:	str.w	r3, [r0], #4
    bc58:	ldr.w	r3, [r1], #4
    bc5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    bc60:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    bc62:	bcs.n	bbe0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    bc64:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    bc66:	bcc.n	bc8c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    bc68:	ldr.w	r3, [r1], #4
    bc6c:	str.w	r3, [r0], #4
    bc70:	ldr.w	r3, [r1], #4
    bc74:	str.w	r3, [r0], #4
    bc78:	ldr.w	r3, [r1], #4
    bc7c:	str.w	r3, [r0], #4
    bc80:	ldr.w	r3, [r1], #4
    bc84:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    bc88:	subs	r2, #16
	bhs	.Lmid_block_loop
    bc8a:	bcs.n	bc68 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    bc8c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    bc8e:	bcc.n	bc9c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    bc90:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    bc94:	str.w	r3, [r0], #4
	subs	r2, #4
    bc98:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    bc9a:	bcs.n	bc90 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    bc9c:	adds	r2, #4
	beq	.Ldone
    bc9e:	beq.n	bcb2 <memcpy+0xe2>

	lsls	r2, r2, #31
    bca0:	lsls	r2, r2, #31
	itt ne
    bca2:	itt	ne
	ldrbne  r3, [r1], #1
    bca4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bca8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    bcac:	bcc.n	bcb2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    bcae:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    bcb0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bcb2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bcb4:	bx	lr
    bcb6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    bcb8:	cmp	r2, #8
	blo	.Lbyte_copy
    bcba:	bcc.n	bce4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    bcbc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    bcbe:	beq.n	bbdc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    bcc0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    bcc4:	beq.n	bbdc <memcpy+0xc>

	rsb	r3, #4
    bcc6:	rsb	r3, r3, #4
	subs	r2, r3
    bcca:	subs	r2, r2, r3

	lsls    r3, r3, #31
    bccc:	lsls	r3, r3, #31
	itt ne
    bcce:	itt	ne
	ldrbne  r3, [r1], #1
    bcd0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    bcd4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    bcd8:	bcc.n	bbdc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    bcda:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    bcde:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    bce2:	b.n	bbdc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    bce4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    bce6:	bcc.n	bc9c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    bce8:	subs	r2, #1
	ldrb    r3, [r1], #1
    bcea:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    bcee:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    bcf2:	bcs.n	bce8 <memcpy+0x118>

	ldrb	r3, [r1]
    bcf4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    bcf6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    bcf8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    bcfa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    bcfc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    bcfe:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    bd00:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    bd02:	bx	lr

0000bd04 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    bd04:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    bd06:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd08:	ubfx	r3, r3, #16, #15
    bd0c:	ldr	r1, [pc, #20]	; (bd24 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    bd0e:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd10:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    bd14:	ldr	r4, [pc, #16]	; (bd28 <rx_event+0x24>)
    bd16:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    bd18:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    bd1c:	strh.w	r5, [r4, r2, lsl #1]
}
    bd20:	pop	{r4, r5}
    bd22:	bx	lr
    bd24:	.word	0x2000ddc8
    bd28:	.word	0x2000ddc0

0000bd2c <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    bd2c:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    bd2e:	ldr	r3, [pc, #84]	; (bd84 <usb_serial_flush_callback+0x58>)
    bd30:	ldrb	r3, [r3, #0]
    bd32:	cbnz	r3, bd44 <usb_serial_flush_callback+0x18>
    bd34:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    bd38:	ldr	r3, [pc, #76]	; (bd88 <usb_serial_flush_callback+0x5c>)
    bd3a:	ldrb	r3, [r3, #0]
    bd3c:	cbz	r3, bd44 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    bd3e:	ldr	r5, [pc, #76]	; (bd8c <usb_serial_flush_callback+0x60>)
    bd40:	ldrh	r2, [r5, #0]
    bd42:	cbnz	r2, bd46 <usb_serial_flush_callback+0x1a>
    bd44:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd46:	ldr	r7, [pc, #72]	; (bd90 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd48:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd4a:	ldr	r6, [pc, #72]	; (bd94 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd4c:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd50:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd52:	ldr	r0, [pc, #68]	; (bd98 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    bd54:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    bd58:	add.w	r1, r0, r1, lsl #8
    bd5c:	mov	r0, r6
    bd5e:	bl	cb2c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    bd62:	mov	r1, r6
    bd64:	movs	r0, #4
    bd66:	bl	cb5c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd6a:	ldrb	r3, [r7, #0]
    bd6c:	adds	r3, #1
    bd6e:	uxtb	r3, r3
    bd70:	cmp	r3, #6
    bd72:	it	ls
    bd74:	strbls	r3, [r7, #0]
	tx_available = 0;
    bd76:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    bd7a:	it	hi
    bd7c:	strbhi	r4, [r7, #0]
	tx_available = 0;
    bd7e:	strh	r3, [r5, #0]
    bd80:	pop	{r3, r4, r5, r6, r7, pc}
    bd82:	nop
    bd84:	.word	0x2000dcfc
    bd88:	.word	0x2000df70
    bd8c:	.word	0x2000de40
    bd90:	.word	0x2000dcfd
    bd94:	.word	0x2000de60
    bd98:	.word	0x2000d5fc

0000bd9c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    bd9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bda0:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bda2:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    bda4:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bda6:	cmp	r1, #0
    bda8:	beq.w	bed4 <usb_serial_write.part.1+0x138>
    bdac:	movs	r3, #0
    bdae:	ldr.w	r8, [pc, #320]	; bef0 <usb_serial_write.part.1+0x154>
    bdb2:	ldr.w	r9, [pc, #304]	; bee4 <usb_serial_write.part.1+0x148>
    bdb6:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    bdb8:	ldr	r6, [pc, #284]	; (bed8 <usb_serial_write.part.1+0x13c>)
    bdba:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    bdbe:	ldr.w	sl, [pc, #308]	; bef4 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    bdc2:	ldr	r2, [pc, #280]	; (bedc <usb_serial_write.part.1+0x140>)
    bdc4:	ldrb	r4, [r2, #0]
    bdc6:	ldr	r2, [pc, #280]	; (bee0 <usb_serial_write.part.1+0x144>)
    bdc8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    bdcc:	cmp	r3, #0
    bdce:	bne.n	be8c <usb_serial_write.part.1+0xf0>
    bdd0:	mov	r5, r3
    bdd2:	mov	r4, r3
    bdd4:	b.n	be00 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    bdd6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    bdda:	cbnz	r4, bdde <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    bddc:	ldr	r5, [r6, #0]
    bdde:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    bde0:	cmp	r3, #0
    bde2:	bne.n	be80 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    bde4:	ldr	r3, [r6, #0]
    bde6:	subs	r3, r3, r5
    bde8:	cmp	r3, #120	; 0x78
    bdea:	bhi.n	bec8 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    bdec:	ldrb.w	r3, [sl]
    bdf0:	cmp	r3, #0
    bdf2:	beq.n	be80 <usb_serial_write.part.1+0xe4>
			yield();
    bdf4:	bl	d988 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    bdf8:	ldrh.w	r3, [r8]
    bdfc:	cmp	r3, #0
    bdfe:	bne.n	be88 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    be00:	mov	r0, r7
    be02:	bl	cba8 <usb_transfer_status>
			if (!(status & 0x80)) {
    be06:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    be0a:	ldr	r2, [pc, #216]	; (bee4 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    be0c:	bne.n	bdd6 <usb_serial_write.part.1+0x3a>
    be0e:	ldr	r2, [pc, #204]	; (bedc <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    be10:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    be14:	strb.w	r0, [r9]
    be18:	ldrb	r4, [r2, #0]
    be1a:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be1c:	ldr	r1, [pc, #200]	; (bee8 <usb_serial_write.part.1+0x14c>)
    be1e:	lsls	r4, r4, #8
		if (size >= tx_available) {
    be20:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    be22:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be26:	add	r0, r4
    be28:	add	r0, r1
		if (size >= tx_available) {
    be2a:	bcc.n	be9e <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    be2c:	ldr	r1, [sp, #8]
    be2e:	bl	bbd0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    be32:	ldr	r3, [pc, #180]	; (bee8 <usb_serial_write.part.1+0x14c>)
    be34:	mov.w	r2, #256	; 0x100
    be38:	mov	r0, r7
    be3a:	adds	r1, r3, r4
    be3c:	movs	r3, #0
    be3e:	bl	cb2c <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    be42:	mov	r1, r7
    be44:	movs	r0, #4
    be46:	bl	cb5c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    be4a:	ldr	r3, [pc, #144]	; (bedc <usb_serial_write.part.1+0x140>)
    be4c:	ldr	r2, [pc, #140]	; (bedc <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    be4e:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    be50:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    be52:	ldr	r0, [pc, #152]	; (beec <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    be54:	adds	r3, #1
    be56:	uxtb	r3, r3
    be58:	cmp	r3, #6
    be5a:	it	hi
    be5c:	movhi	r3, #0
    be5e:	strb	r3, [r2, #0]
			size -= tx_available;
    be60:	ldrh.w	r2, [r8]
			sent += tx_available;
    be64:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    be66:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    be6a:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    be6e:	add	r3, r2
    be70:	str	r3, [sp, #4]
			data += tx_available;
    be72:	ldr	r3, [sp, #8]
    be74:	add	r3, r2
    be76:	str	r3, [sp, #8]
    be78:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    be7a:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    be7e:	bne.n	bdc2 <usb_serial_write.part.1+0x26>
    be80:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    be82:	add	sp, #20
    be84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be88:	ldr	r2, [pc, #80]	; (bedc <usb_serial_write.part.1+0x140>)
    be8a:	ldrb	r4, [r2, #0]
    be8c:	mov	r2, r3
    be8e:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be92:	lsls	r4, r4, #8
    be94:	ldr	r1, [pc, #80]	; (bee8 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    be96:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    be98:	add	r0, r4
    be9a:	add	r0, r1
		if (size >= tx_available) {
    be9c:	bcs.n	be2c <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    be9e:	ldr	r1, [sp, #8]
    bea0:	mov	r2, fp
    bea2:	str	r3, [sp, #12]
    bea4:	bl	bbd0 <memcpy>
			tx_available -= size;
    bea8:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    beaa:	mov.w	r1, #3221225472	; 0xc0000000
    beae:	ldr	r2, [pc, #60]	; (beec <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    beb0:	rsb	r3, fp, r3
    beb4:	strh.w	r3, [r8]
    beb8:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    beba:	str.w	r1, [r2, #132]	; 0x84
    bebe:	add	r3, fp
    bec0:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bec2:	add	sp, #20
    bec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    bec8:	movs	r3, #1
				return sent;
    beca:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    becc:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    bece:	add	sp, #20
    bed0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    bed4:	mov	r0, r1
    bed6:	b.n	be82 <usb_serial_write.part.1+0xe6>
    bed8:	.word	0x2000df98
    bedc:	.word	0x2000dcfd
    bee0:	.word	0x2000de60
    bee4:	.word	0x2000df40
    bee8:	.word	0x2000d5fc
    beec:	.word	0x402e0000
    bef0:	.word	0x2000de40
    bef4:	.word	0x2000df70

0000bef8 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    bef8:	bx	lr
    befa:	nop

0000befc <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    befc:	movs	r1, #0
    befe:	movs	r2, #224	; 0xe0
    bf00:	ldr	r0, [pc, #128]	; (bf84 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    bf02:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    bf04:	mov	r4, r1
    bf06:	ldr	r6, [pc, #128]	; (bf88 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf08:	ldr	r5, [pc, #128]	; (bf8c <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf0a:	bl	ebac <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bf0e:	ldr	r7, [pc, #128]	; (bf90 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf10:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    bf12:	ldr	r3, [pc, #128]	; (bf94 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf14:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    bf16:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf18:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    bf1a:	ldr	r6, [pc, #124]	; (bf98 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    bf1c:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf1e:	bl	ebac <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    bf22:	mov	r3, r4
    bf24:	mov	r2, r4
    bf26:	movs	r1, #16
    bf28:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    bf2a:	str	r4, [r7, #0]
    bf2c:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    bf2e:	str	r4, [r6, #0]
    bf30:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    bf32:	bl	cac4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    bf36:	mov	r2, r4
    bf38:	ldr	r3, [pc, #96]	; (bf9c <usb_serial_configure+0xa0>)
    bf3a:	movs	r1, #64	; 0x40
    bf3c:	movs	r0, #3
    bf3e:	bl	ca60 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    bf42:	mov	r3, r4
    bf44:	mov	r2, r4
    bf46:	movs	r1, #64	; 0x40
    bf48:	movs	r0, #4
    bf4a:	bl	cac4 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    bf4e:	mov	r3, r4
    bf50:	movs	r2, #64	; 0x40
    bf52:	mov	r0, r5
    bf54:	ldr	r1, [pc, #72]	; (bfa0 <usb_serial_configure+0xa4>)
    bf56:	bl	cb2c <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    bf5a:	mov	r1, r5
    bf5c:	movs	r0, #3
    bf5e:	bl	cb84 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    bf62:	ldr	r3, [pc, #64]	; (bfa4 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    bf64:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    bf66:	ldr	r1, [pc, #64]	; (bfa8 <usb_serial_configure+0xac>)
    bf68:	ldr	r0, [pc, #64]	; (bfac <usb_serial_configure+0xb0>)
    bf6a:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    bf6c:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    bf70:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    bf74:	ldr.w	r2, [r3, #328]	; 0x148
    bf78:	orr.w	r2, r2, #16777216	; 0x1000000
    bf7c:	str.w	r2, [r3, #328]	; 0x148
    bf80:	pop	{r3, r4, r5, r6, r7, pc}
    bf82:	nop
    bf84:	.word	0x2000de60
    bf88:	.word	0x2000dcfd
    bf8c:	.word	0x2000dde0
    bf90:	.word	0x2000ddc8
    bf94:	.word	0x2000de40
    bf98:	.word	0x2000ddc0
    bf9c:	.word	0x0000bd05
    bfa0:	.word	0x2000dd00
    bfa4:	.word	0x402e0000
    bfa8:	.word	0x2000df44
    bfac:	.word	0x0000bd2d

0000bfb0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    bfb0:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    bfb2:	ldr	r5, [pc, #56]	; (bfec <usb_serial_getchar+0x3c>)
    bfb4:	ldr	r3, [pc, #56]	; (bff0 <usb_serial_getchar+0x40>)
    bfb6:	ldrh	r2, [r5, #0]
    bfb8:	ldrh	r0, [r3, #0]
    bfba:	cmp	r2, r0
    bfbc:	bcs.n	bfe6 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    bfbe:	adds	r3, r2, #1
    bfc0:	ldr	r1, [pc, #48]	; (bff4 <usb_serial_getchar+0x44>)
    bfc2:	uxth	r3, r3
    bfc4:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    bfc6:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    bfc8:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    bfca:	bls.n	bfd0 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    bfcc:	mov	r0, r4
	}
	return -1;
}
    bfce:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    bfd0:	movs	r3, #0
    bfd2:	movs	r2, #64	; 0x40
    bfd4:	ldr	r0, [pc, #32]	; (bff8 <usb_serial_getchar+0x48>)
    bfd6:	bl	cb2c <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    bfda:	ldr	r1, [pc, #28]	; (bff8 <usb_serial_getchar+0x48>)
    bfdc:	movs	r0, #3
    bfde:	bl	cb84 <usb_receive>
		}
		return c;
    bfe2:	mov	r0, r4
    bfe4:	pop	{r3, r4, r5, pc}
	}
	return -1;
    bfe6:	mov.w	r0, #4294967295
    bfea:	pop	{r3, r4, r5, pc}
    bfec:	.word	0x2000ddc0
    bff0:	.word	0x2000ddc8
    bff4:	.word	0x2000dd00
    bff8:	.word	0x2000dde0

0000bffc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    bffc:	ldr	r3, [pc, #20]	; (c014 <usb_serial_peekchar+0x18>)
    bffe:	ldr	r2, [pc, #24]	; (c018 <usb_serial_peekchar+0x1c>)
    c000:	ldrh	r3, [r3, #0]
    c002:	ldrh	r2, [r2, #0]
    c004:	cmp	r2, r3
    c006:	bls.n	c00e <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    c008:	ldr	r2, [pc, #16]	; (c01c <usb_serial_peekchar+0x20>)
    c00a:	ldrb	r0, [r2, r3]
    c00c:	bx	lr
	}

	return -1;
    c00e:	mov.w	r0, #4294967295
}
    c012:	bx	lr
    c014:	.word	0x2000ddc0
    c018:	.word	0x2000ddc8
    c01c:	.word	0x2000dd00

0000c020 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    c020:	ldr	r2, [pc, #8]	; (c02c <usb_serial_available+0xc>)
    c022:	ldr	r3, [pc, #12]	; (c030 <usb_serial_available+0x10>)
    c024:	ldrh	r0, [r2, #0]
    c026:	ldrh	r3, [r3, #0]
}
    c028:	subs	r0, r0, r3
    c02a:	bx	lr
    c02c:	.word	0x2000ddc8
    c030:	.word	0x2000ddc0

0000c034 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    c034:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    c036:	ldr	r3, [pc, #40]	; (c060 <usb_serial_flush_input+0x2c>)
    c038:	ldr	r4, [pc, #40]	; (c064 <usb_serial_flush_input+0x30>)
    c03a:	ldrh	r5, [r3, #0]
    c03c:	ldrh	r3, [r4, #0]
    c03e:	cmp	r3, r5
    c040:	bcc.n	c044 <usb_serial_flush_input+0x10>
    c042:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    c044:	movs	r3, #0
    c046:	ldr	r1, [pc, #32]	; (c068 <usb_serial_flush_input+0x34>)
    c048:	ldr	r0, [pc, #32]	; (c06c <usb_serial_flush_input+0x38>)
    c04a:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    c04c:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    c04e:	bl	cb2c <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    c052:	ldr	r1, [pc, #24]	; (c06c <usb_serial_flush_input+0x38>)
    c054:	movs	r0, #3
	}
}
    c056:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    c05a:	b.w	cb84 <usb_receive>
    c05e:	nop
    c060:	.word	0x2000ddc8
    c064:	.word	0x2000ddc0
    c068:	.word	0x2000dd00
    c06c:	.word	0x2000dde0

0000c070 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c070:	ldr	r3, [pc, #36]	; (c098 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c072:	push	{lr}
    c074:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c076:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    c078:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c07c:	cbnz	r3, c088 <usb_serial_putchar+0x18>
    c07e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    c082:	add	sp, #12
    c084:	ldr.w	pc, [sp], #4
    c088:	movs	r1, #1
    c08a:	add.w	r0, sp, #7
    c08e:	bl	bd9c <usb_serial_write.part.1>
    c092:	add	sp, #12
    c094:	ldr.w	pc, [sp], #4
    c098:	.word	0x2000df70

0000c09c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    c09c:	ldr	r3, [pc, #16]	; (c0b0 <usb_serial_write+0x14>)
    c09e:	ldrb	r3, [r3, #0]
    c0a0:	and.w	r2, r3, #255	; 0xff
    c0a4:	cbz	r3, c0aa <usb_serial_write+0xe>
    c0a6:	b.w	bd9c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    c0aa:	mov	r0, r2
    c0ac:	bx	lr
    c0ae:	nop
    c0b0:	.word	0x2000df70

0000c0b4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c0b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0b8:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    c0ba:	ldr.w	r8, [pc, #64]	; c0fc <usb_serial_write_buffer_free+0x48>
    c0be:	movs	r3, #1
    c0c0:	ldr	r5, [pc, #48]	; (c0f4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    c0c2:	mov	r7, r4
    c0c4:	ldr	r6, [pc, #48]	; (c0f8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    c0c6:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    c0ca:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c0cc:	mov	r0, r5
    c0ce:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    c0d0:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0d2:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    c0d6:	beq.n	c0e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    c0d8:	bl	cba8 <usb_transfer_status>
    c0dc:	lsls	r3, r0, #24
    c0de:	it	pl
    c0e0:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    c0e4:	cmp	r4, #7
    c0e6:	bne.n	c0ca <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    c0e8:	movs	r3, #0
	return sum;
}
    c0ea:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    c0ec:	strb.w	r3, [r8]
	return sum;
}
    c0f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0f4:	.word	0x2000de60
    c0f8:	.word	0x2000dcfd
    c0fc:	.word	0x2000dcfc

0000c100 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c100:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c102:	ldr	r3, [pc, #80]	; (c154 <usb_serial_flush_output+0x54>)
    c104:	ldrb	r3, [r3, #0]
    c106:	cbz	r3, c10e <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    c108:	ldr	r4, [pc, #76]	; (c158 <usb_serial_flush_output+0x58>)
    c10a:	ldrh	r2, [r4, #0]
    c10c:	cbnz	r2, c110 <usb_serial_flush_output+0x10>
    c10e:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c110:	ldr	r6, [pc, #72]	; (c15c <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c112:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    c116:	ldr	r5, [pc, #72]	; (c160 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c118:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c11a:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c11c:	rsb	r2, r2, #256	; 0x100
    c120:	ldr	r0, [pc, #64]	; (c164 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    c122:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c126:	ldr	r7, [pc, #64]	; (c168 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c128:	add.w	r1, r0, r1, lsl #8
    c12c:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    c12e:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    c132:	bl	cb2c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    c136:	mov	r1, r5
    c138:	movs	r0, #4
    c13a:	bl	cb5c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c13e:	ldrb	r3, [r6, #0]
    c140:	adds	r3, #1
    c142:	uxtb	r3, r3
    c144:	cmp	r3, #6
    c146:	it	hi
    c148:	movhi	r3, #0
    c14a:	strb	r3, [r6, #0]
	tx_available = 0;
    c14c:	movs	r3, #0
    c14e:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    c150:	strb	r3, [r7, #0]
    c152:	pop	{r3, r4, r5, r6, r7, pc}
    c154:	.word	0x2000df70
    c158:	.word	0x2000de40
    c15c:	.word	0x2000dcfd
    c160:	.word	0x2000de60
    c164:	.word	0x2000d5fc
    c168:	.word	0x2000dcfc

0000c16c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c16c:	ldr	r2, [pc, #556]	; (c39c <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c16e:	ldr	r3, [pc, #560]	; (c3a0 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c170:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    c172:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    c176:	ldr	r5, [pc, #556]	; (c3a4 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c178:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    c17a:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    c17c:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c17e:	bls.n	c1bc <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    c180:	ldr	r3, [pc, #548]	; (c3a8 <set_arm_clock+0x23c>)
    c182:	cmp	r0, r3
    c184:	bls.w	c388 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    c188:	ldr	r3, [pc, #544]	; (c3ac <set_arm_clock+0x240>)
    c18a:	movw	r6, #1300	; 0x514
    c18e:	ldr.w	lr, [pc, #600]	; c3e8 <set_arm_clock+0x27c>
    c192:	add	r3, r0
    c194:	ldr	r5, [pc, #536]	; (c3b0 <set_arm_clock+0x244>)
    c196:	lsrs	r2, r3, #8
    c198:	umull	r3, r2, lr, r2
    c19c:	lsrs	r3, r2, #7
    c19e:	add.w	r3, r3, r3, lsl #2
    c1a2:	add.w	r2, r3, r3, lsl #2
    c1a6:	addw	r3, r2, #1250	; 0x4e2
    c1aa:	cmp	r3, r6
    c1ac:	it	cs
    c1ae:	movcs	r3, r6
    c1b0:	sub.w	r3, r3, #800	; 0x320
    c1b4:	umull	r3, r6, r5, r3
    c1b8:	lsrs	r6, r6, #3
    c1ba:	b.n	c1c4 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    c1bc:	cmp	r0, #25
    c1be:	ite	cc
    c1c0:	movcc	r6, #6
    c1c2:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1c4:	ldr	r2, [pc, #472]	; (c3a0 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1c6:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1ca:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1ce:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c1d0:	orr.w	r3, r3, #192	; 0xc0
    c1d4:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c1d8:	bcs.n	c1f0 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c1da:	ldr	r3, [pc, #456]	; (c3a4 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c1dc:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c1e0:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c1e2:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    c1e4:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c1e6:	ldr	r3, [r2, #0]
    c1e8:	cmp	r3, #0
    c1ea:	bge.n	c1e6 <set_arm_clock+0x7a>
    c1ec:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    c1f0:	ands.w	r3, r4, #33554432	; 0x2000000
    c1f4:	bne.n	c254 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    c1f6:	ldr	r5, [pc, #444]	; (c3b4 <set_arm_clock+0x248>)
    c1f8:	ldr	r2, [pc, #444]	; (c3b8 <set_arm_clock+0x24c>)
    c1fa:	ldr.w	ip, [r5, #16]
    c1fe:	mov	r5, r2
    c200:	and.w	r2, ip, r2
    c204:	cmp	r2, r5
    c206:	itet	eq
    c208:	moveq.w	r3, #402653184	; 0x18000000
    c20c:	movne.w	r2, #4096	; 0x1000
    c210:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    c212:	eor.w	r5, r4, r3
    c216:	tst.w	r5, #939524096	; 0x38000000
    c21a:	beq.n	c22a <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    c21c:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    c220:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    c224:	ldr	r5, [pc, #376]	; (c3a0 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    c226:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    c228:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    c22a:	eor.w	r3, r1, r2
    c22e:	tst.w	r3, #12288	; 0x3000
    c232:	beq.n	c246 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    c234:	ldr	r3, [pc, #360]	; (c3a0 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    c236:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    c23a:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    c23c:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    c23e:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    c240:	ldr	r3, [r2, #72]	; 0x48
    c242:	lsls	r5, r3, #28
    c244:	bmi.n	c240 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    c246:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    c24a:	ldr	r2, [pc, #340]	; (c3a0 <set_arm_clock+0x234>)
    c24c:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c24e:	ldr	r3, [r2, #72]	; 0x48
    c250:	lsls	r1, r3, #26
    c252:	bmi.n	c24e <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    c254:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c256:	ldr	r5, [pc, #356]	; (c3bc <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    c258:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    c25a:	mul.w	r3, r1, r2
    c25e:	mul.w	r3, r0, r3
    c262:	cmp	r3, r5
    c264:	bhi.n	c27a <set_arm_clock+0x10e>
		if (div_arm < 8) {
    c266:	cmp	r2, #7
    c268:	bhi.w	c374 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    c26c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    c26e:	mul.w	r3, r1, r2
    c272:	mul.w	r3, r0, r3
    c276:	cmp	r3, r5
    c278:	bls.n	c266 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c27a:	ldr	r0, [pc, #324]	; (c3c0 <set_arm_clock+0x254>)
    c27c:	ldr	r5, [pc, #324]	; (c3c4 <set_arm_clock+0x258>)
    c27e:	add	r0, r3
    c280:	umull	r3, r0, r5, r0
    c284:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    c286:	cmp	r3, #108	; 0x6c
    c288:	bhi.n	c37e <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    c28a:	cmp	r3, #53	; 0x35
    c28c:	bhi.n	c38c <set_arm_clock+0x220>
    c28e:	ldr.w	r8, [pc, #348]	; c3ec <set_arm_clock+0x280>
    c292:	movs	r3, #54	; 0x36
    c294:	ldr	r0, [pc, #304]	; (c3c8 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c296:	ldr.w	ip, [pc, #284]	; c3b4 <set_arm_clock+0x248>
    c29a:	ldr	r5, [pc, #304]	; (c3cc <set_arm_clock+0x260>)
    c29c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    c2a0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c2a4:	and.w	r5, r9, r5
    c2a8:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    c2aa:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c2ae:	beq.n	c2c8 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    c2b0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    c2b4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    c2b8:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    c2ba:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    c2be:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    c2c2:	ldr	r3, [r5, #0]
    c2c4:	cmp	r3, #0
    c2c6:	bge.n	c2c2 <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    c2c8:	ldr.w	ip, [pc, #212]	; c3a0 <set_arm_clock+0x234>
    c2cc:	subs	r2, #1
    c2ce:	ldr.w	r3, [ip, #16]
    c2d2:	and.w	r3, r3, #7
    c2d6:	cmp	r3, r2
    c2d8:	beq.n	c2ea <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    c2da:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    c2de:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    c2e0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    c2e4:	ldr	r3, [r5, #72]	; 0x48
    c2e6:	lsls	r3, r3, #15
    c2e8:	bmi.n	c2e4 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c2ea:	subs	r1, #1
    c2ec:	lsls	r1, r1, #10
    c2ee:	eor.w	r3, r4, r1
    c2f2:	tst.w	r3, #7168	; 0x1c00
    c2f6:	beq.n	c30e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    c2f8:	ldr	r3, [pc, #164]	; (c3a0 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    c2fa:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c2fe:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    c302:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c304:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    c306:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    c308:	ldr	r3, [r2, #72]	; 0x48
    c30a:	lsls	r1, r3, #30
    c30c:	bmi.n	c308 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    c30e:	ldr	r3, [pc, #192]	; (c3d0 <set_arm_clock+0x264>)
    c310:	ldr	r1, [pc, #192]	; (c3d4 <set_arm_clock+0x268>)
    c312:	add	r3, r0
    c314:	lsrs	r3, r3, #7
    c316:	umull	r3, r1, r1, r3
    c31a:	lsrs	r1, r1, #12
    c31c:	cmp	r1, #4
    c31e:	it	cs
    c320:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    c322:	subs	r3, r1, #1
    c324:	lsls	r3, r3, #8
    c326:	eor.w	r2, r4, r3
    c32a:	tst.w	r2, #768	; 0x300
    c32e:	beq.n	c33e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    c330:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c334:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    c338:	ldr	r2, [pc, #100]	; (c3a0 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c33a:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    c33c:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    c33e:	ldr	r3, [pc, #96]	; (c3a0 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    c340:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c344:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    c346:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c348:	ldr	r3, [r2, #72]	; 0x48
    c34a:	lsls	r3, r3, #26
    c34c:	bmi.n	c348 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    c34e:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    c352:	ldr	r2, [pc, #132]	; (c3d8 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c354:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    c356:	ldr	r3, [pc, #132]	; (c3dc <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    c358:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    c35a:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c35c:	bcs.n	c370 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c35e:	ldr	r3, [pc, #68]	; (c3a4 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c360:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c364:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c366:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    c368:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c36a:	ldr	r3, [r2, #0]
    c36c:	cmp	r3, #0
    c36e:	bge.n	c36a <set_arm_clock+0x1fe>
	}

	return frequency;
}
    c370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    c374:	cmp	r1, #4
    c376:	bhi.n	c27a <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    c378:	adds	r1, #1
				div_arm = 1;
    c37a:	movs	r2, #1
    c37c:	b.n	c25a <set_arm_clock+0xee>
    c37e:	ldr.w	r8, [pc, #112]	; c3f0 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    c382:	movs	r3, #108	; 0x6c
    c384:	ldr	r0, [pc, #88]	; (c3e0 <set_arm_clock+0x274>)
    c386:	b.n	c296 <set_arm_clock+0x12a>
    c388:	movs	r6, #18
    c38a:	b.n	c1c4 <set_arm_clock+0x58>
    c38c:	ldr	r0, [pc, #84]	; (c3e4 <set_arm_clock+0x278>)
    c38e:	ldr.w	r8, [pc, #100]	; c3f4 <set_arm_clock+0x288>
    c392:	mul.w	r0, r0, r3
    c396:	orr.w	r8, r3, r8
    c39a:	b.n	c296 <set_arm_clock+0x12a>
    c39c:	.word	0x1f78a400
    c3a0:	.word	0x400fc000
    c3a4:	.word	0x40080000
    c3a8:	.word	0x23c34600
    c3ac:	.word	0xdc3cba00
    c3b0:	.word	0x51eb851f
    c3b4:	.word	0x400d8000
    c3b8:	.word	0x80003040
    c3bc:	.word	0x269fb1ff
    c3c0:	.word	0x005b8d80
    c3c4:	.word	0x165e9f81
    c3c8:	.word	0x269fb200
    c3cc:	.word	0x8001307f
    c3d0:	.word	0x08f0d17f
    c3d4:	.word	0x00e5109f
    c3d8:	.word	0x20000df4
    c3dc:	.word	0x20000df0
    c3e0:	.word	0x4d3f6400
    c3e4:	.word	0x00b71b00
    c3e8:	.word	0x004cb223
    c3ec:	.word	0x80002036
    c3f0:	.word	0x8000206c
    c3f4:	.word	0x80002000

0000c3f8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    c3f8:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    c3fa:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    c3fc:	cbz	r3, c406 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    c3fe:	ldr	r3, [r2, #4]
    c400:	orr.w	r3, r3, #32768	; 0x8000
    c404:	str	r3, [r2, #4]
	}
	__disable_irq();
    c406:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    c408:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    c40a:	cbz	r4, c434 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    c40c:	ldr	r3, [pc, #64]	; (c450 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    c40e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    c410:	ldr.w	r4, [r3, #432]	; 0x1b0
    c414:	tst	r4, r1
    c416:	bne.n	c448 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    c418:	ldr.w	r4, [r3, #320]	; 0x140
    c41c:	orr.w	r4, r4, #16384	; 0x4000
    c420:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    c424:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    c428:	ldr.w	r4, [r3, #320]	; 0x140
    c42c:	lsls	r4, r4, #17
    c42e:	bpl.n	c418 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    c430:	tst	r1, r5
    c432:	bne.n	c448 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    c434:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    c436:	ldr	r4, [pc, #24]	; (c450 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    c438:	str	r2, [r0, #8]
	endpoint->status = 0;
    c43a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    c43c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c440:	orrs	r1, r3
    c442:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    c446:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    c448:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    c44a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    c44c:	pop	{r4, r5}
    c44e:	bx	lr
    c450:	.word	0x402e0000

0000c454 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    c454:	push	{r3, r4, r5, lr}
    c456:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    c458:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    c45a:	b.n	c46a <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    c45c:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    c45e:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    c460:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    c462:	ldr	r2, [r5, #52]	; 0x34
    c464:	mov	r3, r4
    c466:	cmp	r4, r2
    c468:	beq.n	c47c <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    c46a:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    c46c:	cbz	r3, c47c <run_callbacks+0x28>
    c46e:	cmp	r3, #1
    c470:	beq.n	c47c <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    c472:	ldr	r2, [r3, #4]
    c474:	lsls	r2, r2, #24
    c476:	bpl.n	c45c <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    c478:	str	r3, [r5, #48]	; 0x30
			return;
    c47a:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    c47c:	movs	r3, #0
    c47e:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    c480:	str	r3, [r5, #52]	; 0x34
    c482:	pop	{r3, r4, r5, pc}

0000c484 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    c484:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    c486:	cbnz	r1, c4ba <endpoint0_transmit.constprop.0+0x36>
    c488:	ldr	r4, [pc, #124]	; (c508 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c48a:	ldr	r3, [pc, #128]	; (c50c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    c48c:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c48e:	ldr	r0, [pc, #128]	; (c510 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c490:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c492:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c494:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c496:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    c498:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c49a:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    c49c:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    c49e:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c4a2:	ldr	r5, [pc, #112]	; (c514 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c4a4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    c4a8:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    c4aa:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c4ae:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    c4b0:	ldr.w	r3, [r2, #432]	; 0x1b0
    c4b4:	cmp	r3, #0
    c4b6:	bne.n	c4b0 <endpoint0_transmit.constprop.0+0x2c>
}
    c4b8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4ba:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4bc:	ldr	r3, [pc, #88]	; (c518 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4be:	ldr	r5, [pc, #80]	; (c510 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4c0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c4c2:	ldr	r4, [pc, #68]	; (c508 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4c4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    c4c8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c4ca:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c4cc:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c4ce:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    c4d2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c4d4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c4d8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c4da:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4de:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c4e2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    c4e6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c4e8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4ea:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c4ee:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c4f2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c4f6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c4f8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    c4fa:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    c4fe:	ldr.w	r3, [r2, #432]	; 0x1b0
    c502:	cmp	r3, #0
    c504:	bne.n	c4fe <endpoint0_transmit.constprop.0+0x7a>
    c506:	b.n	c48a <endpoint0_transmit.constprop.0+0x6>
    c508:	.word	0x20010000
    c50c:	.word	0x2000f020
    c510:	.word	0x402e0000
    c514:	.word	0x2000df50
    c518:	.word	0x2000f000

0000c51c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    c51c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    c520:	ldr	r4, [pc, #696]	; (c7dc <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    c522:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    c524:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    c528:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    c52c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    c530:	beq.n	c5f0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    c532:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c536:	cmp	r3, #0
    c538:	beq.n	c5e6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c53a:	mov.w	r9, #65537	; 0x10001
    c53e:	ldr.w	fp, [pc, #700]	; c7fc <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    c542:	mov	r6, r4
    c544:	ldr	r7, [pc, #664]	; (c7e0 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c546:	mov	sl, r9
    c548:	ldr	r1, [r7, #40]	; 0x28
    c54a:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    c54c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    c550:	ldr.w	r3, [r4, #320]	; 0x140
    c554:	orr.w	r3, r3, #8192	; 0x2000
    c558:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    c55c:	ldr.w	r3, [r4, #320]	; 0x140
    c560:	lsls	r5, r3, #18
    c562:	bpl.n	c550 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    c564:	ldr.w	r3, [r6, #320]	; 0x140
    c568:	bic.w	r3, r3, #8192	; 0x2000
    c56c:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    c570:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    c574:	ldr.w	r3, [r4, #436]	; 0x1b4
    c578:	ands.w	r3, r3, #65537	; 0x10001
    c57c:	bne.n	c574 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c57e:	uxth	r0, r1
    c580:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    c584:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c588:	cmp	r0, r5
    c58a:	bhi.w	c6ae <isr+0x192>
    c58e:	cmp.w	r0, #1664	; 0x680
    c592:	bcs.w	c8f8 <isr+0x3dc>
    c596:	cmp.w	r0, #258	; 0x102
    c59a:	beq.w	c818 <isr+0x2fc>
    c59e:	bhi.w	c734 <isr+0x218>
    c5a2:	cmp	r0, #128	; 0x80
    c5a4:	beq.w	c7c2 <isr+0x2a6>
    c5a8:	cmp	r0, #130	; 0x82
    c5aa:	bne.w	c724 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c5ae:	uxth	r2, r2
    c5b0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c5b4:	cmp	r1, #7
    c5b6:	bhi.w	c724 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c5ba:	lsls	r1, r1, #2
    c5bc:	ldr	r0, [pc, #548]	; (c7e4 <isr+0x2c8>)
		reply_buffer[0] = 0;
    c5be:	ldr	r5, [pc, #552]	; (c7e8 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c5c0:	add	r0, r1
    c5c2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c5c4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    c5c6:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    c5c8:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c5ca:	bpl.w	c94a <isr+0x42e>
    c5ce:	lsls	r2, r1, #15
    c5d0:	bpl.n	c5d6 <isr+0xba>
			reply_buffer[0] = 1;
    c5d2:	movs	r3, #1
    c5d4:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    c5d6:	movs	r1, #2
    c5d8:	ldr	r0, [pc, #524]	; (c7e8 <isr+0x2cc>)
    c5da:	bl	c484 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c5de:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c5e2:	cmp	r3, #0
    c5e4:	bne.n	c548 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    c5e6:	ldr	r2, [pc, #500]	; (c7dc <isr+0x2c0>)
    c5e8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    c5ec:	cmp	r3, #0
    c5ee:	bne.n	c67a <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    c5f0:	tst.w	r8, #64	; 0x40
    c5f4:	beq.n	c628 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    c5f6:	ldr	r3, [pc, #484]	; (c7dc <isr+0x2c0>)
    c5f8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    c5fc:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    c5fe:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    c602:	ldr.w	r1, [r3, #444]	; 0x1bc
    c606:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    c60a:	ldr.w	r4, [r2, #432]	; 0x1b0
    c60e:	ldr	r3, [pc, #460]	; (c7dc <isr+0x2c0>)
    c610:	cmp	r4, #0
    c612:	bne.n	c60a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    c614:	mov.w	r2, #4294967295
    c618:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    c61c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    c620:	bl	bef8 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    c624:	ldr	r3, [pc, #452]	; (c7ec <isr+0x2d0>)
    c626:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    c628:	tst.w	r8, #16777216	; 0x1000000
    c62c:	beq.n	c636 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    c62e:	ldr	r3, [pc, #448]	; (c7f0 <isr+0x2d4>)
    c630:	ldr	r3, [r3, #0]
    c632:	cbz	r3, c636 <isr+0x11a>
    c634:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    c636:	tst.w	r8, #33554432	; 0x2000000
    c63a:	beq.n	c644 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    c63c:	ldr	r3, [pc, #436]	; (c7f4 <isr+0x2d8>)
    c63e:	ldr	r3, [r3, #0]
    c640:	cbz	r3, c644 <isr+0x128>
    c642:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    c644:	tst.w	r8, #4
    c648:	beq.n	c650 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    c64a:	ldr	r3, [pc, #400]	; (c7dc <isr+0x2c0>)
    c64c:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    c650:	ldr	r3, [pc, #392]	; (c7dc <isr+0x2c0>)
    c652:	ldr.w	r2, [r3, #328]	; 0x148
    c656:	lsls	r2, r2, #24
    c658:	bpl.n	c674 <isr+0x158>
    c65a:	tst.w	r8, #128	; 0x80
    c65e:	beq.n	c674 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    c660:	ldr	r1, [pc, #404]	; (c7f8 <isr+0x2dc>)
    c662:	ldrb	r2, [r1, #0]
    c664:	cmp	r2, #0
    c666:	beq.w	c938 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    c66a:	subs	r3, r2, #1
    c66c:	uxtb	r3, r3
    c66e:	strb	r3, [r1, #0]
    c670:	cbnz	r3, c674 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    c672:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    c674:	add	sp, #12
    c676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    c67a:	ldr	r1, [pc, #384]	; (c7fc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    c67c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    c680:	ldr	r0, [r1, #0]
    c682:	tst	r3, r0
    c684:	bne.w	c9c6 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    c688:	ldr	r2, [pc, #352]	; (c7ec <isr+0x2d0>)
    c68a:	ldr	r4, [r2, #0]
			if (completestatus) {
    c68c:	ands	r4, r3
    c68e:	beq.n	c5f0 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    c690:	lsls	r6, r4, #29
    c692:	bmi.w	ca00 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    c696:	lsls	r5, r4, #13
    c698:	bmi.w	ca10 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    c69c:	lsls	r0, r4, #28
    c69e:	bmi.w	ca08 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    c6a2:	lsls	r1, r4, #12
    c6a4:	bpl.n	c5f0 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    c6a6:	ldr	r0, [pc, #344]	; (c800 <isr+0x2e4>)
    c6a8:	bl	c454 <run_callbacks>
    c6ac:	b.n	c5f0 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c6ae:	movw	r5, #8225	; 0x2021
    c6b2:	cmp	r0, r5
    c6b4:	beq.n	c71c <isr+0x200>
    c6b6:	bhi.n	c780 <isr+0x264>
    c6b8:	cmp.w	r0, #2176	; 0x880
    c6bc:	beq.w	c8dc <isr+0x3c0>
    c6c0:	cmp.w	r0, #2304	; 0x900
    c6c4:	bne.n	c724 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    c6c6:	ubfx	r1, r1, #16, #8
    c6ca:	ldr	r2, [pc, #312]	; (c804 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c6cc:	ldr	r0, [pc, #312]	; (c808 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    c6ce:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c6d0:	ldr	r1, [pc, #312]	; (c80c <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c6d2:	ldr	r2, [pc, #316]	; (c810 <isr+0x2f4>)
    c6d4:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c6d6:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c6da:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c6de:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    c6e2:	bl	befc <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c6e6:	ldr	r2, [pc, #300]	; (c814 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c6e8:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c6ea:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c6ec:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    c6ee:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c6f0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c6f2:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c6f4:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c6f8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c6fa:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c6fc:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c700:	ldr	r2, [pc, #248]	; (c7fc <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c702:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c706:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    c708:	ldr.w	r3, [r4, #432]	; 0x1b0
    c70c:	cmp	r3, #0
    c70e:	bne.n	c708 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c710:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c714:	cmp	r3, #0
    c716:	bne.w	c548 <isr+0x2c>
    c71a:	b.n	c5e6 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    c71c:	lsrs	r0, r2, #16
    c71e:	cmp	r0, #7
    c720:	beq.w	c952 <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    c724:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c728:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c72c:	cmp	r3, #0
    c72e:	bne.w	c548 <isr+0x2c>
    c732:	b.n	c5e6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c734:	movw	r5, #770	; 0x302
    c738:	cmp	r0, r5
    c73a:	beq.w	c882 <isr+0x366>
    c73e:	cmp.w	r0, #1280	; 0x500
    c742:	bne.n	c724 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c744:	ldr	r2, [pc, #204]	; (c814 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    c746:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c748:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c74a:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c74c:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c74e:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c750:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c754:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c756:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c75a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c75c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c760:	ldr.w	r3, [r4, #432]	; 0x1b0
    c764:	cmp	r3, #0
    c766:	bne.n	c760 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    c768:	lsrs	r3, r1, #16
    c76a:	lsls	r3, r3, #25
    c76c:	orr.w	r3, r3, #16777216	; 0x1000000
    c770:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c774:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c778:	cmp	r3, #0
    c77a:	bne.w	c548 <isr+0x2c>
    c77e:	b.n	c5e6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    c780:	movw	r3, #8737	; 0x2221
    c784:	cmp	r0, r3
    c786:	beq.n	c870 <isr+0x354>
    c788:	movw	r3, #8993	; 0x2321
    c78c:	cmp	r0, r3
    c78e:	bne.n	c724 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c790:	ldr	r3, [pc, #128]	; (c814 <isr+0x2f8>)
    c792:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    c794:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c796:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c798:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c79a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c79c:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c7a0:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c7a2:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c7a6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c7a8:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c7aa:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c7ae:	ldr.w	r3, [r4, #432]	; 0x1b0
    c7b2:	cmp	r3, #0
    c7b4:	bne.n	c7ae <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c7b6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c7ba:	cmp	r3, #0
    c7bc:	bne.w	c548 <isr+0x2c>
    c7c0:	b.n	c5e6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c7c2:	ldr	r2, [pc, #36]	; (c7e8 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    c7c4:	movs	r1, #2
    c7c6:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c7c8:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    c7ca:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    c7cc:	bl	c484 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c7d0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c7d4:	cmp	r3, #0
    c7d6:	bne.w	c548 <isr+0x2c>
    c7da:	b.n	c5e6 <isr+0xca>
    c7dc:	.word	0x402e0000
    c7e0:	.word	0x20010000
    c7e4:	.word	0x402e01c0
    c7e8:	.word	0x2000df60
    c7ec:	.word	0x2000df48
    c7f0:	.word	0x2000df44
    c7f4:	.word	0x2000df4c
    c7f8:	.word	0x2000df54
    c7fc:	.word	0x2000df50
    c800:	.word	0x200101c0
    c804:	.word	0x2000df70
    c808:	.word	0x00cc0002
    c80c:	.word	0x000200c8
    c810:	.word	0x00c80002
    c814:	.word	0x2000f020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c818:	uxth	r2, r2
    c81a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c81e:	cmp	r3, #7
    c820:	bhi.n	c724 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    c822:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c826:	mov.w	r3, r3, lsl #2
    c82a:	ldr	r2, [pc, #492]	; (ca18 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c82c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c830:	add	r2, r3
    c832:	ldr	r3, [r2, #0]
    c834:	ite	ne
    c836:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c83a:	biceq.w	r3, r3, #1
    c83e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c840:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c842:	ldr	r3, [pc, #472]	; (ca1c <isr+0x500>)
    c844:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c846:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c848:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c84a:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c84e:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c850:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c854:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c856:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c858:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c85c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c860:	cmp	r3, #0
    c862:	bne.n	c85c <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c864:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c868:	cmp	r3, #0
    c86a:	bne.w	c548 <isr+0x2c>
    c86e:	b.n	c5e6 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c870:	ldr	r3, [pc, #428]	; (ca20 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    c872:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c876:	ldr	r2, [pc, #428]	; (ca24 <isr+0x508>)
    c878:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    c87a:	ldr	r3, [pc, #428]	; (ca28 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c87c:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    c87e:	strb	r1, [r3, #0]
    c880:	b.n	c790 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    c882:	uxth	r2, r2
    c884:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    c888:	cmp	r3, #7
    c88a:	bhi.w	c724 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    c88e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c892:	mov.w	r3, r3, lsl #2
    c896:	ldr	r2, [pc, #384]	; (ca18 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c898:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c89c:	add	r2, r3
    c89e:	ldr	r3, [r2, #0]
    c8a0:	ite	ne
    c8a2:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    c8a6:	orreq.w	r3, r3, #1
    c8aa:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c8ac:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c8ae:	ldr	r3, [pc, #364]	; (ca1c <isr+0x500>)
    c8b0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c8b2:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c8b4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c8b6:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c8ba:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c8bc:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c8c0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c8c2:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    c8c4:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    c8c8:	ldr.w	r3, [r4, #432]	; 0x1b0
    c8cc:	cmp	r3, #0
    c8ce:	bne.n	c8c8 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c8d0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c8d4:	cmp	r3, #0
    c8d6:	bne.w	c548 <isr+0x2c>
    c8da:	b.n	c5e6 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8dc:	ldr	r2, [pc, #332]	; (ca2c <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    c8de:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8e0:	ldr	r3, [pc, #332]	; (ca30 <isr+0x514>)
    c8e2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c8e4:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c8e6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    c8e8:	bl	c484 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    c8ec:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    c8f0:	cmp	r3, #0
    c8f2:	bne.w	c548 <isr+0x2c>
    c8f6:	b.n	c5e6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c8f8:	ldr	r3, [pc, #312]	; (ca34 <isr+0x518>)
    c8fa:	ldr	r0, [r3, #4]
    c8fc:	cmp	r0, #0
    c8fe:	beq.w	c724 <isr+0x208>
    c902:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c904:	uxth.w	lr, r2
    c908:	b.n	c914 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c90a:	adds	r3, #12
    c90c:	ldr	r0, [r3, #4]
    c90e:	cmp	r0, #0
    c910:	beq.w	c724 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c914:	ldrh	r5, [r3, #0]
    c916:	cmp	r5, r1
    c918:	bne.n	c90a <isr+0x3ee>
    c91a:	ldrh	r5, [r3, #2]
    c91c:	cmp	r5, lr
    c91e:	bne.n	c90a <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    c920:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    c922:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    c924:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    c926:	ite	eq
    c928:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    c92a:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    c92c:	cmp	r1, r2
    c92e:	it	cs
    c930:	movcs	r1, r2
    c932:	bl	c484 <endpoint0_transmit.constprop.0>
    c936:	b.n	c5de <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    c938:	ldr.w	r2, [r3, #328]	; 0x148
    c93c:	bic.w	r2, r2, #128	; 0x80
    c940:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    c944:	add	sp, #12
    c946:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c94a:	lsls	r3, r1, #31
    c94c:	bpl.w	c5d6 <isr+0xba>
    c950:	b.n	c5d2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c952:	ldr	r5, [pc, #228]	; (ca38 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c954:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    c956:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c958:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c95a:	ldr	r3, [pc, #224]	; (ca3c <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    c95c:	ldr	r1, [pc, #224]	; (ca40 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    c95e:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    c960:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c962:	ldr	r1, [pc, #224]	; (ca44 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c964:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    c968:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c96a:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c96e:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c972:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c976:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    c97a:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c97c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c97e:	sub.w	r0, r1, #4096	; 0x1000
    c982:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    c984:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c988:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c98a:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c98c:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    c990:	ldr.w	r3, [r4, #432]	; 0x1b0
    c994:	cmp	r3, #0
    c996:	bne.n	c990 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    c998:	ldr	r2, [pc, #128]	; (ca1c <isr+0x500>)
    c99a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    c99c:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    c99e:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    c9a0:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c9a2:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    c9a6:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9a8:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    c9ac:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9ae:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c9b2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    c9b4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c9b8:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    c9bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    c9c0:	cmp	r3, #0
    c9c2:	bne.n	c9bc <isr+0x4a0>
    c9c4:	b.n	c5de <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    c9c6:	ldr	r4, [pc, #112]	; (ca38 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9c8:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    c9cc:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9ce:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    c9d0:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    c9d2:	cmp	r4, r0
    c9d4:	bne.w	c688 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c9d8:	ldr	r1, [pc, #108]	; (ca48 <isr+0x52c>)
    c9da:	ldr	r4, [pc, #112]	; (ca4c <isr+0x530>)
    c9dc:	ldmia	r1, {r0, r1}
    c9de:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    c9e0:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c9e2:	str	r0, [r4, #0]
    c9e4:	strh	r1, [r4, #4]
    c9e6:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    c9e8:	bne.w	c688 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    c9ec:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    c9f0:	movs	r4, #80	; 0x50
    c9f2:	ldr	r0, [pc, #92]	; (ca50 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    c9f4:	orr.w	r1, r1, #128	; 0x80
    c9f8:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    c9fc:	strb	r4, [r0, #0]
    c9fe:	b.n	c688 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    ca00:	ldr	r0, [pc, #80]	; (ca54 <isr+0x538>)
    ca02:	bl	c454 <run_callbacks>
    ca06:	b.n	c696 <isr+0x17a>
    ca08:	ldr	r0, [pc, #76]	; (ca58 <isr+0x53c>)
    ca0a:	bl	c454 <run_callbacks>
    ca0e:	b.n	c6a2 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    ca10:	ldr	r0, [pc, #72]	; (ca5c <isr+0x540>)
    ca12:	bl	c454 <run_callbacks>
    ca16:	b.n	c69c <isr+0x180>
    ca18:	.word	0x402e01c0
    ca1c:	.word	0x2000f020
    ca20:	.word	0x2000df98
    ca24:	.word	0x2000e82c
    ca28:	.word	0x2000df41
    ca2c:	.word	0x2000df70
    ca30:	.word	0x2000df60
    ca34:	.word	0x20000840
    ca38:	.word	0x2000df58
    ca3c:	.word	0x2000f000
    ca40:	.word	0x00078080
    ca44:	.word	0x2000ff68
    ca48:	.word	0x2000df68
    ca4c:	.word	0x2000e824
    ca50:	.word	0x2000df54
    ca54:	.word	0x20010100
    ca58:	.word	0x20010180
    ca5c:	.word	0x20010140

0000ca60 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca60:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ca62:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ca66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca6a:	ite	ne
    ca6c:	movne	r7, #0
    ca6e:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ca72:	cmp	r2, #2
    ca74:	bls.n	ca7a <usb_config_rx+0x1a>
    ca76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ca7a:	mov.w	sl, r0, lsl #7
    ca7e:	ldr.w	r9, [pc, #64]	; cac0 <usb_config_rx+0x60>
    ca82:	mov	r5, r1
    ca84:	mov	r4, r0
    ca86:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ca8a:	movs	r1, #0
    ca8c:	movs	r2, #64	; 0x40
    ca8e:	mov	r8, r3
    ca90:	mov	r0, r6
    ca92:	bl	ebac <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ca96:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ca98:	orr.w	r1, r7, r5, lsl #16
    ca9c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    caa0:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    caa4:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    caa6:	cmp.w	r8, #0
    caaa:	beq.n	ca76 <usb_config_rx+0x16>
    caac:	ldr	r3, [pc, #12]	; (cabc <usb_config_rx+0x5c>)
    caae:	lsls	r0, r4
    cab0:	ldr	r4, [r3, #0]
    cab2:	orrs	r0, r4
    cab4:	str	r0, [r3, #0]
    cab6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caba:	nop
    cabc:	.word	0x2000df48
    cac0:	.word	0x20010000

0000cac4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cac4:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cac6:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    caca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    cace:	ite	ne
    cad0:	movne	r7, #0
    cad2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cad6:	cmp	r2, #2
    cad8:	bls.n	cade <usb_config_tx+0x1a>
    cada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    cade:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cae0:	lsls	r5, r0, #7
    cae2:	ldr.w	r9, [pc, #68]	; cb28 <usb_config_tx+0x64>
    cae6:	mov	r8, r1
    cae8:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    caea:	movs	r1, #0
    caec:	mov	r4, r0
    caee:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    caf0:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    caf4:	mov	r0, sl
    caf6:	bl	ebac <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    cafa:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    cafc:	orr.w	r1, r7, r8, lsl #16
    cb00:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    cb04:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    cb08:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    cb0c:	cmp	r6, #0
    cb0e:	beq.n	cada <usb_config_tx+0x16>
    cb10:	add.w	r0, r4, #16
    cb14:	ldr	r3, [pc, #12]	; (cb24 <usb_config_tx+0x60>)
    cb16:	lsls	r2, r0
    cb18:	ldr	r0, [r3, #0]
    cb1a:	orrs	r2, r0
    cb1c:	str	r2, [r3, #0]
    cb1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb22:	nop
    cb24:	.word	0x2000df48
    cb28:	.word	0x20010000

0000cb2c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb2c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    cb2e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    cb30:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb32:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    cb36:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    cb38:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    cb3a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    cb3c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    cb40:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    cb44:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    cb48:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    cb4c:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    cb4e:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    cb50:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    cb52:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    cb54:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    cb56:	pop	{r4, r5, r6, r7}
    cb58:	bx	lr
    cb5a:	nop

0000cb5c <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cb5c:	subs	r3, r0, #2
    cb5e:	cmp	r3, #2
    cb60:	bls.n	cb64 <usb_transmit+0x8>
    cb62:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    cb64:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    cb66:	ldr	r3, [pc, #24]	; (cb80 <usb_transmit+0x24>)
    cb68:	add.w	r4, r0, #16
    cb6c:	movs	r5, #1
    cb6e:	mov	r2, r1
    cb70:	add.w	r0, r3, r0, lsl #7
    cb74:	lsl.w	r1, r5, r4
}
    cb78:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    cb7a:	b.w	c3f8 <schedule_transfer>
    cb7e:	nop
    cb80:	.word	0x20010040

0000cb84 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cb84:	subs	r3, r0, #2
    cb86:	cmp	r3, #2
    cb88:	bls.n	cb8c <usb_receive+0x8>
    cb8a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    cb8c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    cb8e:	ldr	r3, [pc, #20]	; (cba4 <usb_receive+0x20>)
    cb90:	movs	r4, #1
    cb92:	mov	r2, r1
    cb94:	lsl.w	r1, r4, r0
    cb98:	add.w	r0, r3, r0, lsl #7
}
    cb9c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    cba0:	b.w	c3f8 <schedule_transfer>
    cba4:	.word	0x20010000

0000cba8 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    cba8:	ldr	r2, [pc, #32]	; (cbcc <usb_transfer_status+0x24>)
    cbaa:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    cbae:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    cbb0:	orr.w	r3, r3, #16384	; 0x4000
    cbb4:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    cbb8:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    cbba:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    cbbe:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    cbc0:	tst.w	r3, #16384	; 0x4000
    cbc4:	beq.n	cbae <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    cbc6:	mov	r0, r1
    cbc8:	bx	lr
    cbca:	nop
    cbcc:	.word	0x402e0000

0000cbd0 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    cbd0:	ldr	r3, [pc, #36]	; (cbf8 <rtc_set+0x28>)
    cbd2:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    cbd4:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    cbd6:	bic.w	r2, r2, #1
    cbda:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    cbdc:	ldr	r3, [r1, #8]
    cbde:	ldr	r2, [pc, #24]	; (cbf8 <rtc_set+0x28>)
    cbe0:	lsls	r3, r3, #31
    cbe2:	bmi.n	cbdc <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    cbe4:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    cbe6:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    cbe8:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    cbea:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    cbec:	ldr	r3, [r2, #8]
    cbee:	orr.w	r3, r3, #1
    cbf2:	str	r3, [r2, #8]
    cbf4:	bx	lr
    cbf6:	nop
    cbf8:	.word	0x400d4000

0000cbfc <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cbfc:	ldr	r3, [pc, #84]	; (cc54 <flash_wait+0x58>)
	FLEXSPI_LUT61 = 0;
    cbfe:	movs	r0, #0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    cc00:	movs	r1, #1
    cc02:	mov	r2, r3
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    cc04:	push	{r4, r5, r6, r7}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cc06:	ldr	r7, [pc, #80]	; (cc58 <flash_wait+0x5c>)
	FLEXSPI_LUT61 = 0;
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
    cc08:	mov	r6, r0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    cc0a:	ldr	r5, [pc, #80]	; (cc5c <flash_wait+0x60>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    cc0c:	ldr	r4, [pc, #80]	; (cc60 <flash_wait+0x64>)
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    cc0e:	str.w	r7, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    cc12:	str.w	r0, [r3, #756]	; 0x2f4
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    cc16:	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    cc1a:	str.w	r6, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    cc1e:	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cc22:	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    cc26:	ldr	r3, [r2, #20]
    cc28:	lsls	r0, r3, #31
    cc2a:	bmi.n	cc34 <flash_wait+0x38>
			asm("nop");
    cc2c:	nop
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
    cc2e:	ldr	r3, [r2, #20]
    cc30:	lsls	r3, r3, #31
    cc32:	bpl.n	cc2c <flash_wait+0x30>
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc34:	ldrb	r3, [r4, #0]
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cc36:	ldr	r0, [pc, #28]	; (cc54 <flash_wait+0x58>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc38:	lsls	r7, r3, #31
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cc3a:	str	r1, [r2, #20]
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
    cc3c:	bmi.n	cc16 <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    cc3e:	ldr	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    cc40:	mov	r2, r0
			asm("nop");
		}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		status = *(uint8_t *)&FLEXSPI_RFDR0;
	} while (status & 1);
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    cc42:	orr.w	r3, r3, #1
    cc46:	str	r3, [r0, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    cc48:	ldr	r3, [r2, #0]
    cc4a:	lsls	r3, r3, #31
    cc4c:	bmi.n	cc48 <flash_wait+0x4c>
	__enable_irq();
    cc4e:	cpsie	i
}
    cc50:	pop	{r4, r5, r6, r7}
    cc52:	bx	lr
    cc54:	.word	0x402a8000
    cc58:	.word	0x24010405
    cc5c:	.word	0x000f0001
    cc60:	.word	0x402a8100

0000cc64 <flash_write.constprop.0>:

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
    cc64:	push	{r3, r4, r5, r6, r7, lr}
    cc66:	mov	r5, r1
{
	__disable_irq();
    cc68:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc6a:	ldr	r2, [pc, #176]	; (cd1c <flash_write.constprop.0+0xb8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
    cc6c:	movs	r4, #0

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc6e:	ldr	r6, [pc, #176]	; (cd20 <flash_write.constprop.0+0xbc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cc70:	movs	r3, #2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cc72:	movw	r1, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cc76:	mov.w	r7, #983040	; 0xf0000

// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    cc7a:	str	r6, [r2, #24]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cc7c:	movs	r6, #1
// write bytes into flash memory (which is already erased to 0xFF)
static void flash_write(void *addr, const void *data, uint32_t len)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cc7e:	str	r3, [r2, #28]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cc80:	bic.w	r3, r0, #31
	FLEXSPI_IPCR0 = 0;
    cc84:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cc88:	str.w	r1, [r2, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    cc8c:	adds	r1, r0, #2
	FLEXSPI_LUT61 = 0;
    cc8e:	str.w	r4, [r2, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    cc92:	str.w	r4, [r2, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    cc96:	str.w	r4, [r2, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cc9a:	str.w	r7, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cc9e:	str.w	r6, [r2, #176]	; 0xb0
	asm("dsb");
    cca2:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    cca6:	ldr	r2, [pc, #124]	; (cd24 <flash_write.constprop.0+0xc0>)
    cca8:	str	r3, [r2, #0]
		location += 32;
    ccaa:	adds	r3, #32
	} while (location < end_addr);
    ccac:	cmp	r1, r3
    ccae:	bhi.n	cca8 <flash_write.constprop.0+0x44>
	asm("dsb");
    ccb0:	dsb	sy
	asm("isb");
    ccb4:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ccb8:	ldr	r2, [pc, #96]	; (cd1c <flash_write.constprop.0+0xb8>)
    ccba:	ldr	r3, [r2, #20]
    ccbc:	ldr	r1, [pc, #92]	; (cd1c <flash_write.constprop.0+0xb8>)
    ccbe:	lsls	r7, r3, #31
    ccc0:	bpl.n	ccba <flash_write.constprop.0+0x56>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ccc2:	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    ccc4:	ldr	r2, [pc, #96]	; (cd28 <flash_write.constprop.0+0xc4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    ccc6:	ubfx	r0, r0, #0, #21
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    ccca:	movw	r7, #8705	; 0x2201
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    ccce:	ldr	r6, [pc, #92]	; (cd2c <flash_write.constprop.0+0xc8>)
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    ccd0:	mov	r4, r1
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ccd2:	str	r3, [r1, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    ccd4:	str.w	r2, [r1, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ccd8:	movs	r2, #2
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    ccda:	str.w	r7, [r1, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    ccde:	str.w	r3, [r1, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
    cce2:	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    cce6:	str.w	r6, [r1, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ccea:	str.w	r3, [r1, #176]	; 0xb0
    ccee:	b.n	ccf4 <flash_write.constprop.0+0x90>
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
    ccf0:	lsls	r6, r3, #25
    ccf2:	bmi.n	cd08 <flash_write.constprop.0+0xa4>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    ccf4:	ldr	r3, [r4, #20]
    ccf6:	ldr	r1, [pc, #36]	; (cd1c <flash_write.constprop.0+0xb8>)
    ccf8:	lsls	r0, r3, #31
    ccfa:	bpl.n	ccf0 <flash_write.constprop.0+0x8c>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    ccfc:	movs	r3, #65	; 0x41
    ccfe:	str	r3, [r1, #20]
	flash_wait();
}
    cd00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
	flash_wait();
    cd04:	b.w	cbfc <flash_wait>
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
    cd08:	cbz	r2, cd14 <flash_write.constprop.0+0xb0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    cd0a:	mov	r1, r5
    cd0c:	ldr	r0, [pc, #32]	; (cd30 <flash_write.constprop.0+0xcc>)
				src += wrlen;
    cd0e:	add	r5, r2
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    cd10:	bl	bbd0 <memcpy>
				src += wrlen;
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    cd14:	movs	r3, #64	; 0x40
    cd16:	movs	r2, #0
    cd18:	str	r3, [r4, #20]
    cd1a:	b.n	ccf4 <flash_write.constprop.0+0x90>
    cd1c:	.word	0x402a8000
    cd20:	.word	0x5af05af0
    cd24:	.word	0xe000ef5c
    cd28:	.word	0x08180432
    cd2c:	.word	0x000f0002
    cd30:	.word	0x402a8180

0000cd34 <eeprom_initialize>:

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    cd34:	push	{r4, r5, r6, r7}
    cd36:	ldr	r6, [pc, #56]	; (cd70 <eeprom_initialize+0x3c>)
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd38:	movw	r5, #65535	; 0xffff

static uint8_t initialized=0;
static uint16_t sector_index[FLASH_SECTORS];

void eeprom_initialize(void)
{
    cd3c:	ldr	r4, [pc, #52]	; (cd74 <eeprom_initialize+0x40>)
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    cd3e:	ldr	r7, [pc, #56]	; (cd78 <eeprom_initialize+0x44>)
    cd40:	sub.w	r3, r4, #4096	; 0x1000
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
    cd44:	movs	r2, #0
    cd46:	b.n	cd4e <eeprom_initialize+0x1a>
		do {
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
    cd48:	cmp	r4, r3
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
			index++;
    cd4a:	uxth	r2, r0
		} while (p < end);
    cd4c:	bls.n	cd58 <eeprom_initialize+0x24>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd4e:	ldrh.w	r1, [r3], #2
			index++;
    cd52:	adds	r0, r2, #1
	for (sector=0; sector < FLASH_SECTORS; sector++) {
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		const uint16_t *end = (uint16_t *)(FLASH_BASEADDR + (sector + 1) * 4096);
		uint16_t index = 0;
		do {
			if (*p++ == 0xFFFF) break;
    cd54:	cmp	r1, r5
    cd56:	bne.n	cd48 <eeprom_initialize+0x14>
    cd58:	add.w	r4, r4, #4096	; 0x1000
			index++;
		} while (p < end);
		sector_index[sector] = index;
    cd5c:	strh.w	r2, [r6, #2]!

void eeprom_initialize(void)
{
	uint32_t sector;
	//printf("eeprom init\n");
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    cd60:	cmp	r4, r7
    cd62:	bne.n	cd40 <eeprom_initialize+0xc>
			if (*p++ == 0xFFFF) break;
			index++;
		} while (p < end);
		sector_index[sector] = index;
	}
	initialized = 1;
    cd64:	ldr	r3, [pc, #20]	; (cd7c <eeprom_initialize+0x48>)
    cd66:	movs	r2, #1
    cd68:	strb	r2, [r3, #0]
}
    cd6a:	pop	{r4, r5, r6, r7}
    cd6c:	bx	lr
    cd6e:	nop
    cd70:	.word	0x2000df72
    cd74:	.word	0x601f1000
    cd78:	.word	0x60200000
    cd7c:	.word	0x2000df92

0000cd80 <eeprom_read_byte>:
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
    cd80:	cmp.w	r0, #1080	; 0x438
    cd84:	bcc.n	cd8a <eeprom_read_byte+0xa>
    cd86:	movs	r0, #255	; 0xff
	while (p < end) {
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    cd88:	bx	lr
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cd8a:	ldr	r3, [pc, #84]	; (cde0 <eeprom_read_byte+0x60>)
	}
	initialized = 1;
}

uint8_t eeprom_read_byte(const uint8_t *addr_ptr)
{
    cd8c:	push	{r4, r5, r6, lr}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cd8e:	ldrb	r3, [r3, #0]
    cd90:	mov	r4, r0
    cd92:	cbz	r3, cdd6 <eeprom_read_byte+0x56>
	sector = (addr >> 2) % FLASH_SECTORS;
    cd94:	lsrs	r5, r4, #2
    cd96:	ldr	r1, [pc, #76]	; (cde4 <eeprom_read_byte+0x64>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cd98:	ldr	r3, [pc, #76]	; (cde8 <eeprom_read_byte+0x68>)
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    cd9a:	and.w	r0, r4, #3
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    cd9e:	umull	r2, r1, r1, r5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    cda2:	ldr	r4, [pc, #72]	; (cdec <eeprom_read_byte+0x6c>)
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
    cda4:	lsrs	r1, r1, #3
    cda6:	rsb	r6, r1, r1, lsl #4
    cdaa:	mov	r2, r1
    cdac:	subs	r1, r5, r6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    cdae:	orr.w	r2, r0, r2, lsl #2
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    cdb2:	movs	r0, #255	; 0xff
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cdb4:	add	r3, r1
	end = p + sector_index[sector];
    cdb6:	ldrh.w	r5, [r4, r1, lsl #1]
	if (!initialized) eeprom_initialize();
	sector = (addr >> 2) % FLASH_SECTORS;
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    cdba:	lsls	r3, r3, #12
	end = p + sector_index[sector];
    cdbc:	add.w	r5, r3, r5, lsl #1
	while (p < end) {
    cdc0:	cmp	r3, r5
    cdc2:	bcs.n	cddc <eeprom_read_byte+0x5c>
		uint32_t val = *p++;
    cdc4:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    cdc8:	uxtb	r4, r1
    cdca:	cmp	r2, r4
    cdcc:	it	eq
    cdce:	lsreq	r0, r1, #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_rd, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    cdd0:	cmp	r5, r3
    cdd2:	bhi.n	cdc4 <eeprom_read_byte+0x44>
		uint32_t val = *p++;
		if ((val & 255) == offset) data = val >> 8;
	}
	return data;
}
    cdd4:	pop	{r4, r5, r6, pc}
	uint32_t sector, offset;
	const uint16_t *p, *end;
	uint8_t data=0xFF;

	if (addr > E2END) return 0xFF;
	if (!initialized) eeprom_initialize();
    cdd6:	bl	cd34 <eeprom_initialize>
    cdda:	b.n	cd94 <eeprom_read_byte+0x14>
    cddc:	pop	{r4, r5, r6, pc}
    cdde:	nop
    cde0:	.word	0x2000df92
    cde4:	.word	0x88888889
    cde8:	.word	0x000601f0
    cdec:	.word	0x2000df74

0000cdf0 <eeprom_write_byte>:
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
    cdf0:	cmp.w	r0, #1080	; 0x438
    cdf4:	bcs.w	cf50 <eeprom_write_byte+0x160>
	if (!initialized) eeprom_initialize();
    cdf8:	ldr	r3, [pc, #380]	; (cf78 <eeprom_write_byte+0x188>)
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    cdfa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    cdfe:	ldrb	r3, [r3, #0]
	}
	return data;
}

void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
    ce00:	sub	sp, #268	; 0x10c
    ce02:	mov	r9, r1
    ce04:	mov	r8, r0
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    ce06:	cmp	r3, #0
    ce08:	beq.w	cf6c <eeprom_write_byte+0x17c>

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce0c:	mov.w	r3, r8, lsr #2
    ce10:	ldr	r5, [pc, #360]	; (cf7c <eeprom_write_byte+0x18c>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ce12:	and.w	r0, r8, #3
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce16:	ldr	r7, [pc, #360]	; (cf80 <eeprom_write_byte+0x190>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce18:	umull	r2, r5, r5, r3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
    ce1c:	ldr	r6, [pc, #356]	; (cf84 <eeprom_write_byte+0x194>)
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();

	sector = (addr >> 2) % FLASH_SECTORS; 
    ce1e:	lsrs	r5, r5, #3
    ce20:	rsb	r2, r5, r5, lsl #4
    ce24:	mov	r8, r5
    ce26:	subs	r5, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ce28:	orr.w	r8, r0, r8, lsl #2
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce2c:	add	r7, r5
	end = p + sector_index[sector];
    ce2e:	ldrh.w	r4, [r6, r5, lsl #1]

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce32:	lsls	r7, r7, #12
	end = p + sector_index[sector];
    ce34:	add.w	r0, r7, r4, lsl #1
	while (p < end) {
    ce38:	cmp	r7, r0
    ce3a:	bcs.w	cf72 <eeprom_write_byte+0x182>
    ce3e:	mov	r3, r7
    ce40:	mov.w	lr, #255	; 0xff
		uint16_t val = *p++;
    ce44:	ldrh.w	r2, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    ce48:	uxtb	r1, r2
    ce4a:	cmp	r8, r1
    ce4c:	it	eq
    ce4e:	moveq.w	lr, r2, lsr #8
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
	end = p + sector_index[sector];
	while (p < end) {
    ce52:	cmp	r0, r3
    ce54:	bhi.n	ce44 <eeprom_write_byte+0x54>
		uint16_t val = *p++;
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
    ce56:	cmp	r9, lr
    ce58:	beq.n	cf4a <eeprom_write_byte+0x15a>
	if (sector_index[sector] < 2048) {
    ce5a:	cmp.w	r4, #2048	; 0x800
    ce5e:	bcc.n	cf52 <eeprom_write_byte+0x162>
		uint16_t newdata = offset | (data << 8);
		flash_write(end, &newdata, 2);
		sector_index[sector] = sector_index[sector] + 1;
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
    ce60:	add	r4, sp, #8
    ce62:	mov.w	r2, #256	; 0x100
    ce66:	movs	r1, #255	; 0xff
    ce68:	mov	r0, r4
    ce6a:	bl	ebac <memset>
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
    ce6e:	add.w	r1, r7, #4096	; 0x1000

	sector = (addr >> 2) % FLASH_SECTORS; 
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
	//printf("ee_wr, addr=%u, sector=%u, offset=%u, len=%u\n",
		//addr, sector, offset, sector_index[sector]);
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ce72:	mov	r2, r7
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
			uint16_t val = *p++;
    ce74:	ldrh.w	r3, [r2], #2
			buf[val & 255] = val >> 8;
    ce78:	uxtb	r0, r3
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    ce7a:	cmp	r1, r2
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
    ce7c:	mov.w	r3, r3, lsr #8
    ce80:	strb	r3, [r4, r0]
	} else {
		//printf("ee_wr, erase then write\n");
		memset(buf, 0xFF, sizeof(buf));
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		end = p + 2048;
		while (p < end) {
    ce82:	bhi.n	ce74 <eeprom_write_byte+0x84>
			uint16_t val = *p++;
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
    ce84:	strb.w	r9, [r4, r8]
}

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
    ce88:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ce8a:	ldr	r3, [pc, #252]	; (cf88 <eeprom_write_byte+0x198>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    ce8c:	movs	r2, #0

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ce8e:	ldr	r0, [pc, #252]	; (cf8c <eeprom_write_byte+0x19c>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    ce90:	mov.w	ip, #2
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    ce94:	movw	lr, #1030	; 0x406
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ce98:	mov.w	r4, #983040	; 0xf0000

// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    ce9c:	str	r0, [r3, #24]
	FLEXSPI_LUT61 = 0;
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ce9e:	movs	r0, #1
// erase a 4K sector
static void flash_erase_sector(void *addr)
{
	__disable_irq();
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    cea0:	str.w	ip, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    cea4:	str.w	lr, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    cea8:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    ceac:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    ceb0:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    ceb4:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ceb8:	str.w	r4, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cebc:	str.w	r0, [r3, #176]	; 0xb0
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    cec0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    cec4:	ldr	r2, [pc, #200]	; (cf90 <eeprom_write_byte+0x1a0>)
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cec6:	mov	r3, r7
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCIMVAC = location;
    cec8:	str	r3, [r2, #0]
		location += 32;
    ceca:	adds	r3, #32
	} while (location < end_addr);
    cecc:	cmp	r1, r3
    cece:	bhi.n	cec8 <eeprom_write_byte+0xd8>
	asm("dsb");
    ced0:	dsb	sy
	asm("isb");
    ced4:	isb	sy
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    ced8:	ldr	r1, [pc, #172]	; (cf88 <eeprom_write_byte+0x198>)
    ceda:	ldr	r3, [r1, #20]
    cedc:	ldr	r2, [pc, #168]	; (cf88 <eeprom_write_byte+0x198>)
    cede:	lsls	r0, r3, #31
    cee0:	bpl.n	ceda <eeprom_write_byte+0xea>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    cee2:	ldr	r3, [pc, #176]	; (cf94 <eeprom_write_byte+0x1a4>)
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cee4:	movs	r0, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    cee6:	ldr.w	lr, [pc, #176]	; cf98 <eeprom_write_byte+0x1a8>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    ceea:	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    ceee:	ands	r3, r7
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    cef0:	mov	r1, r2
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cef2:	str	r0, [r2, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    cef4:	str.w	lr, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
    cef8:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    cefc:	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    cf00:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    cf04:	ldr	r3, [r1, #20]
    cf06:	ldr	r2, [pc, #128]	; (cf88 <eeprom_write_byte+0x198>)
    cf08:	lsls	r3, r3, #31
    cf0a:	bpl.n	cf04 <eeprom_write_byte+0x114>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cf0c:	movs	r3, #1
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf0e:	movs	r4, #0
    cf10:	add.w	r9, sp, #7
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    cf14:	str	r3, [r2, #20]
			buf[val & 255] = val >> 8;
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
    cf16:	mov	r8, r4
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x001FF000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
    cf18:	bl	cbfc <flash_wait>
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    cf1c:	ldrb.w	r3, [r9, #1]!
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
    cf20:	add.w	r0, r7, r8, lsl #1
    cf24:	add.w	r1, sp, #6
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
    cf28:	cmp	r3, #255	; 0xff
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    cf2a:	orr.w	r3, r4, r3, lsl #8
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf2e:	add.w	r4, r4, #1
			if (buf[i] != 0xFF) {
    cf32:	beq.n	cf40 <eeprom_write_byte+0x150>
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
    cf34:	add.w	r8, r8, #1
		index = 0;
		for (i=0; i < 256; i++) {
			if (buf[i] != 0xFF) {
				// TODO: combining these to larger write
				// would (probably) be more efficient
				uint16_t newval = i | (buf[i] << 8);
    cf38:	strh.w	r3, [sp, #6]
				flash_write(p + index, &newval, 2);
    cf3c:	bl	cc64 <flash_write.constprop.0>
		}
		buf[offset] = data;
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
		flash_erase_sector(p);
		index = 0;
		for (i=0; i < 256; i++) {
    cf40:	cmp.w	r4, #256	; 0x100
    cf44:	bne.n	cf1c <eeprom_write_byte+0x12c>
				uint16_t newval = i | (buf[i] << 8);
				flash_write(p + index, &newval, 2);
				index = index + 1;
			}
		}
		sector_index[sector] = index;
    cf46:	strh.w	r8, [r6, r5, lsl #1]
	}
}
    cf4a:	add	sp, #268	; 0x10c
    cf4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cf50:	bx	lr
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    cf52:	orr.w	r8, r8, r9, lsl #8
		flash_write(end, &newdata, 2);
    cf56:	add	r1, sp, #8
		sector_index[sector] = sector_index[sector] + 1;
    cf58:	adds	r4, #1
		if ((val & 255) == offset) olddata = val >> 8;
	}
	if (data == olddata) return;
	if (sector_index[sector] < 2048) {
		//printf("ee_wr, writing\n");
		uint16_t newdata = offset | (data << 8);
    cf5a:	strh.w	r8, [sp, #8]
		flash_write(end, &newdata, 2);
    cf5e:	bl	cc64 <flash_write.constprop.0>
		sector_index[sector] = sector_index[sector] + 1;
    cf62:	strh.w	r4, [r6, r5, lsl #1]
				index = index + 1;
			}
		}
		sector_index[sector] = index;
	}
}
    cf66:	add	sp, #268	; 0x10c
    cf68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
    cf6c:	bl	cd34 <eeprom_initialize>
    cf70:	b.n	ce0c <eeprom_write_byte+0x1c>
void eeprom_write_byte(uint8_t *addr_ptr, uint8_t data)
{
	uint32_t addr = (uint32_t)addr_ptr;
	uint32_t sector, offset, index, i;
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
    cf72:	mov.w	lr, #255	; 0xff
    cf76:	b.n	ce56 <eeprom_write_byte+0x66>
    cf78:	.word	0x2000df92
    cf7c:	.word	0x88888889
    cf80:	.word	0x000601f0
    cf84:	.word	0x2000df74
    cf88:	.word	0x402a8000
    cf8c:	.word	0x5af05af0
    cf90:	.word	0xe000ef5c
    cf94:	.word	0x001ff000
    cf98:	.word	0x08180420

0000cf9c <eeprom_write_block>:

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cf9c:	cbz	r2, cfb8 <eeprom_write_block+0x1c>
	eeprom_write_byte(p++, value >> 16);
	eeprom_write_byte(p, value >> 24);
}

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
    cf9e:	push	{r4, r5, r6, lr}
    cfa0:	mov	r5, r0
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfa2:	mov	r4, r2
    cfa4:	mov	r0, r1
		eeprom_write_byte(p++, *src++);
    cfa6:	ldrb.w	r1, [r5], #1
    cfaa:	adds	r6, r0, #1
    cfac:	bl	cdf0 <eeprom_write_byte>

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfb0:	subs	r4, #1
		eeprom_write_byte(p++, *src++);
    cfb2:	mov	r0, r6

void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint8_t *p = (uint8_t *)addr;
	const uint8_t *src = (const uint8_t *)buf;
	while (len--) {
    cfb4:	bne.n	cfa6 <eeprom_write_block+0xa>
    cfb6:	pop	{r4, r5, r6, pc}
    cfb8:	bx	lr
    cfba:	nop

0000cfbc <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    cfbc:	cmp	r0, #0
    cfbe:	beq.n	d066 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    cfc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfc4:	mov	r9, r0
    cfc6:	sub	sp, #12
    cfc8:	ldr	r4, [pc, #156]	; (d068 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfca:	movs	r0, #1
    cfcc:	ldr	r5, [pc, #156]	; (d06c <delay+0xb0>)
    cfce:	ldr	r6, [pc, #160]	; (d070 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cfd0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    cfd4:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    cfd6:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfd8:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    cfdc:	cmp	r3, #0
    cfde:	bne.n	cfd0 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    cfe0:	ldr	r7, [pc, #144]	; (d074 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    cfe2:	mov.w	lr, #1000	; 0x3e8
    cfe6:	ldr	r0, [pc, #144]	; (d078 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    cfe8:	ldr.w	ip, [r7]
    cfec:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    cfee:	add.w	r7, r7, #1660944384	; 0x63000000
    cff2:	ldr	r3, [r0, #0]
    cff4:	rsb	r1, r1, ip
    cff8:	add.w	r7, r7, #1818624	; 0x1bc000
    cffc:	addw	r7, r7, #3711	; 0xe7f
    d000:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d004:	mov	sl, r7
    d006:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d008:	lsrs	r3, r3, #18
    d00a:	udiv	r3, r1, r3
    d00e:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d012:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d016:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d018:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d01a:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    d01e:	cmp	r3, #0
    d020:	bne.n	d012 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    d022:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d026:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d02a:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    d02c:	mul.w	r2, lr, r2
    d030:	rsb	r1, r1, ip
    d034:	umull	r3, lr, sl, r3
    d038:	rsb	r3, r8, r2
    d03c:	mov.w	r2, lr, lsr #18
    d040:	udiv	r1, r1, r2
    d044:	adds	r2, r1, r3
    d046:	cmp.w	r2, #1000	; 0x3e8
    d04a:	bcc.n	d05c <delay+0xa0>
			if (--msec == 0) return;
    d04c:	subs.w	r9, r9, #1
			start += 1000;
    d050:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    d054:	bne.n	d012 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    d056:	add	sp, #12
    d058:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d05c:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    d05e:	bl	d988 <yield>
	}
    d062:	ldr	r0, [sp, #4]
    d064:	b.n	d012 <delay+0x56>
    d066:	bx	lr
    d068:	.word	0x20010280
    d06c:	.word	0x2000df98
    d070:	.word	0x2000df94
    d074:	.word	0xe0001004
    d078:	.word	0x20000df4

0000d07c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    d07c:	push	{r4, r5, r6}
    d07e:	ldr	r3, [pc, #56]	; (d0b8 <micros+0x3c>)
    d080:	movs	r6, #1
    d082:	ldr	r5, [pc, #56]	; (d0bc <micros+0x40>)
    d084:	ldr	r0, [pc, #56]	; (d0c0 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d086:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d08a:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    d08c:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d08e:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    d092:	cmp	r2, #0
    d094:	bne.n	d086 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    d096:	ldr	r3, [pc, #44]	; (d0c4 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    d098:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d09c:	ldr	r2, [pc, #40]	; (d0c8 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    d09e:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    d0a0:	ldr	r5, [pc, #40]	; (d0cc <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    d0a2:	ldr	r2, [r2, #0]
	return usec;
    d0a4:	subs	r4, r3, r4
    d0a6:	umull	r2, r3, r5, r2
    d0aa:	lsrs	r3, r3, #18
    d0ac:	udiv	r4, r4, r3
}
    d0b0:	mla	r0, r0, r1, r4
    d0b4:	pop	{r4, r5, r6}
    d0b6:	bx	lr
    d0b8:	.word	0x20010280
    d0bc:	.word	0x2000df98
    d0c0:	.word	0x2000df94
    d0c4:	.word	0xe0001004
    d0c8:	.word	0x20000df4
    d0cc:	.word	0x431bde83

0000d0d0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    d0d0:	lsls	r0, r0, #4
    d0d2:	ldr	r3, [pc, #28]	; (d0f0 <digitalWrite.part.0+0x20>)
    d0d4:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    d0d6:	ldr	r3, [r3, r0]
	mask = p->mask;
    d0d8:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    d0da:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    d0dc:	tst	r0, r2
    d0de:	beq.n	d0e6 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    d0e0:	cbnz	r1, d0e8 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    d0e2:	str.w	r2, [r3, #136]	; 0x88
    d0e6:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    d0e8:	str.w	r2, [r3, #132]	; 0x84
    d0ec:	bx	lr
    d0ee:	nop
    d0f0:	.word	0x200005c0

0000d0f4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d0f4:	cmp	r0, #39	; 0x27
    d0f6:	bhi.n	d0fc <digitalWrite+0x8>
    d0f8:	b.w	d0d0 <digitalWrite.part.0>
    d0fc:	bx	lr
    d0fe:	nop

0000d100 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d100:	cmp	r0, #39	; 0x27
    d102:	bhi.n	d13e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    d104:	lsls	r0, r0, #4
    d106:	ldr	r2, [pc, #104]	; (d170 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d108:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    d10a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d10e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    d110:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d112:	beq.n	d140 <pinMode+0x40>
    d114:	cmp	r1, #4
    d116:	beq.n	d140 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d118:	ldr	r4, [r3, #12]
    d11a:	ldr	r2, [r0, #4]
    d11c:	bic.w	r2, r2, r4
    d120:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d122:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    d124:	cbz	r1, d162 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    d126:	cmp	r1, #2
    d128:	beq.n	d168 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    d12a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d12c:	ldr	r3, [r3, #4]
}
    d12e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d132:	ite	eq
    d134:	ldreq	r1, [pc, #60]	; (d174 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d136:	ldrne	r1, [pc, #64]	; (d178 <pinMode+0x78>)
    d138:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    d13a:	movs	r2, #21
    d13c:	str	r2, [r3, #0]
}
    d13e:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d140:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    d142:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d144:	ldr	r4, [r0, #4]
    d146:	orr.w	r2, r2, r4
    d14a:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d14c:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    d14e:	beq.n	d162 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d150:	movw	r1, #2104	; 0x838
    d154:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d156:	ldr	r3, [r3, #4]
    d158:	movs	r2, #21
}
    d15a:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d15e:	str	r2, [r3, #0]
}
    d160:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d162:	movs	r1, #56	; 0x38
    d164:	str	r1, [r2, #0]
    d166:	b.n	d156 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d168:	ldr	r1, [pc, #16]	; (d17c <pinMode+0x7c>)
    d16a:	str	r1, [r2, #0]
    d16c:	b.n	d156 <pinMode+0x56>
    d16e:	nop
    d170:	.word	0x200005c0
    d174:	.word	0x00013038
    d178:	.word	0x00010038
    d17c:	.word	0x0001f038

0000d180 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d180:	ldr	r2, [pc, #72]	; (d1cc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d182:	ldr	r3, [pc, #76]	; (d1d0 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d184:	ldr.w	r0, [r2, #544]	; 0x220
    d188:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d18c:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    d18e:	push	{r4, lr}
    d190:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d192:	bhi.n	d19a <usb_init_serialnumber+0x1a>
    d194:	add.w	r0, r0, r0, lsl #2
    d198:	lsls	r0, r0, #1
    d19a:	ldr	r4, [pc, #56]	; (d1d4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    d19c:	add	r1, sp, #4
    d19e:	movs	r2, #10
    d1a0:	bl	df38 <ultoa>
    d1a4:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    d1a6:	movs	r3, #0
    d1a8:	mov	r0, r4
		char c = buf[i];
    d1aa:	ldrb.w	r2, [r1], #1
    d1ae:	adds	r3, #1
		if (!c) break;
    d1b0:	cbz	r2, d1c2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d1b2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    d1b4:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d1b8:	bne.n	d1aa <usb_init_serialnumber+0x2a>
    d1ba:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d1bc:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    d1be:	add	sp, #16
    d1c0:	pop	{r4, pc}
    d1c2:	lsls	r3, r3, #1
    d1c4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d1c6:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    d1c8:	add	sp, #16
    d1ca:	pop	{r4, pc}
    d1cc:	.word	0x401f4400
    d1d0:	.word	0x0098967f
    d1d4:	.word	0x20000e90

0000d1d8 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    d1d8:	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    d1dc:	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    d1e0:	uxth	r3, r3
	tail = tx_buffer_tail_;
    d1e2:	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d1e4:	cmp	r3, r2
    d1e6:	bcs.n	d1ee <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    d1e8:	subs	r0, r2, #1
    d1ea:	subs	r0, r0, r3
}
    d1ec:	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    d1ee:	ldr	r0, [r0, #52]	; 0x34
    d1f0:	subs	r0, #1
    d1f2:	add	r0, r2
    d1f4:	subs	r0, r0, r3
    d1f6:	bx	lr

0000d1f8 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d1f8:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d1fc:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d200:	uxth	r2, r2
	tail = rx_buffer_tail_;
    d202:	uxth	r3, r3
	if (head >= tail) return head - tail;
    d204:	cmp	r2, r3
    d206:	bcs.n	d210 <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    d208:	ldr	r0, [r0, #56]	; 0x38
    d20a:	add	r0, r2
    d20c:	subs	r0, r0, r3
}
    d20e:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    d210:	subs	r0, r2, r3
    d212:	bx	lr

0000d214 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d214:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d218:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    d21c:	uxth	r2, r2
	tail = rx_buffer_tail_;
    d21e:	uxth	r3, r3
	if (head == tail) return -1;
    d220:	cmp	r2, r3
    d222:	beq.n	d246 <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d224:	adds	r3, #1
    d226:	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    d228:	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d22a:	cmp	r3, r1
    d22c:	it	cs
    d22e:	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    d230:	cmp	r3, r2
    d232:	bcc.n	d23e <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    d234:	subs	r3, r3, r2
    d236:	ldr	r2, [r0, #36]	; 0x24
    d238:	ldrb	r0, [r2, r3]
    d23a:	uxtb	r0, r0
    d23c:	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    d23e:	ldr	r2, [r0, #32]
    d240:	ldrb	r0, [r2, r3]
    d242:	uxtb	r0, r0
    d244:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    d246:	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    d24a:	bx	lr

0000d24c <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    d24c:	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    d250:	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    d254:	uxth	r1, r1
	tail = rx_buffer_tail_;
    d256:	uxth	r3, r3
	if (head == tail) return -1;
    d258:	cmp	r1, r3
    d25a:	beq.n	d2b0 <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d25c:	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    d25e:	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d260:	ldr	r4, [r0, #56]	; 0x38
    d262:	cmp	r3, r4
    d264:	bcs.n	d296 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    d266:	ldr	r2, [r0, #48]	; 0x30
    d268:	uxth	r6, r3
    d26a:	cmp	r3, r2
    d26c:	bcs.n	d2a0 <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    d26e:	ldr	r2, [r0, #32]
    d270:	ldrb	r2, [r2, r3]
    d272:	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    d274:	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    d276:	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    d27a:	cbz	r5, d2aa <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    d27c:	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    d27e:	it	hi
    d280:	addhi	r1, r1, r4
    d282:	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    d284:	ldr	r1, [r0, #60]	; 0x3c
    d286:	cmp	r3, r1
    d288:	bhi.n	d2aa <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    d28a:	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    d28c:	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    d28e:	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    d292:	pop	{r4, r5, r6}
    d294:	bx	lr
    d296:	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    d298:	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    d29a:	mov	r3, r6
	if (tail < rx_buffer_size_) {
    d29c:	cmp	r3, r2
    d29e:	bcc.n	d26e <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    d2a0:	subs	r2, r3, r2
    d2a2:	ldr	r5, [r0, #36]	; 0x24
    d2a4:	ldrb	r2, [r5, r2]
    d2a6:	uxtb	r2, r2
    d2a8:	b.n	d274 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    d2aa:	mov	r0, r2
}	
    d2ac:	pop	{r4, r5, r6}
    d2ae:	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    d2b0:	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    d2b4:	bx	lr
    d2b6:	nop

0000d2b8 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    d2b8:	ldrb.w	r3, [r0, #68]	; 0x44
    d2bc:	cbz	r3, d2d0 <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    d2be:	push	{r4, lr}
    d2c0:	mov	r4, r0
	while (transmitting_) yield(); // wait
    d2c2:	bl	d988 <yield>
    d2c6:	ldrb.w	r3, [r4, #68]	; 0x44
    d2ca:	cmp	r3, #0
    d2cc:	bne.n	d2c2 <HardwareSerial::flush()+0xa>
    d2ce:	pop	{r4, pc}
    d2d0:	bx	lr
    d2d2:	nop

0000d2d4 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    d2d4:	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    d2d8:	cbnz	r0, d30a <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d2da:	mrs	r3, PRIMASK
	if (primask) return 0;
    d2de:	cbnz	r3, d2f4 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d2e0:	mrs	r2, IPSR
	if (ipsr) {
    d2e4:	cbnz	r2, d2f6 <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    d2e6:	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d2ea:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d2ee:	cbz	r0, d306 <nvic_execution_priority()+0x32>
    d2f0:	cmp	r0, r3
    d2f2:	bcs.n	d306 <nvic_execution_priority()+0x32>
	return priority;
}
    d2f4:	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    d2f6:	cmp	r2, #15
    d2f8:	bls.n	d2ea <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    d2fa:	ldr	r3, [pc, #20]	; (d310 <nvic_execution_priority()+0x3c>)
    d2fc:	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    d2fe:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    d302:	cmp	r0, #0
    d304:	bne.n	d2f0 <nvic_execution_priority()+0x1c>
    d306:	mov	r0, r3
    d308:	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    d30a:	mov.w	r0, #4294967295
    d30e:	b.n	d2f4 <nvic_execution_priority()+0x20>
    d310:	.word	0xe000e3f0

0000d314 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d314:	vmov	s15, r1
    d318:	vldr	s14, [pc, #528]	; d52c <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    d31c:	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    d31e:	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d322:	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    d326:	vldr	s12, [pc, #520]	; d530 <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    d32a:	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    d32c:	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    d330:	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    d332:	movs	r6, #1
    d334:	movw	r5, #8191	; 0x1fff
    d338:	b.n	d376 <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    d33a:	cmp	r3, r5
    d33c:	it	ge
    d33e:	movge	r3, r5
    d340:	vmov	s15, r3
    d344:	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    d348:	vsub.f32	s13, s13, s14
    d34c:	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    d350:	vcmpe.f32	s15, #0.0
    d354:	vmrs	APSR_nzcv, fpscr
    d358:	it	mi
    d35a:	vnegmi.f32	s15, s15
		if (err <= besterr) {
    d35e:	vcmpe.f32	s15, s12
    d362:	vmrs	APSR_nzcv, fpscr
    d366:	bhi.n	d370 <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    d368:	vmov.f32	s12, s15
    d36c:	mov	r4, r1
			bestdiv = divint;
    d36e:	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    d370:	adds	r1, #1
    d372:	cmp	r1, #33	; 0x21
    d374:	beq.n	d39a <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    d376:	vmov	s15, r1
    d37a:	vcvt.f32.s32	s15, s15
    d37e:	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    d382:	vadd.f32	s15, s14, s10
    d386:	vcvt.s32.f32	s15, s15
    d38a:	vmov	r3, s15
		if (divint < 1) divint = 1;
    d38e:	cmp	r3, #0
    d390:	bgt.n	d33a <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    d392:	vmov.f32	s13, #112	; 0x3f800000  1.0
    d396:	movs	r3, #1
    d398:	b.n	d348 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d39a:	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    d39c:	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d39e:	ldr	r5, [r0, #56]	; 0x38
    d3a0:	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3a4:	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    d3a8:	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3ac:	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    d3ae:	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3b2:	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    d3b6:	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    d3ba:	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    d3be:	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    d3c2:	ldr.w	lr, [r1, #12]
    d3c6:	ldr	r3, [r1, #16]
    d3c8:	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    d3cc:	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    d3ce:	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    d3d2:	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d3d4:	ldr	r5, [pc, #348]	; (d534 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    d3d6:	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d3da:	ldrb	r3, [r0, #24]
    d3dc:	ldr	r7, [pc, #344]	; (d538 <HardwareSerial::begin(unsigned long, unsigned short)+0x224>)
    d3de:	add.w	r3, r1, r3, lsl #4
    d3e2:	ldrb	r3, [r3, #20]
    d3e4:	add.w	r3, r5, r3, lsl #4
    d3e8:	ldr	r3, [r3, #8]
    d3ea:	str	r7, [r3, #0]
    d3ec:	ldrb	r3, [r0, #24]
    d3ee:	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    d3f2:	ldrb	r7, [r3, #20]
    d3f4:	ldr.w	lr, [r3, #24]
    d3f8:	add.w	r3, r5, r7, lsl #4
    d3fc:	ldr	r3, [r3, #4]
    d3fe:	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    d402:	ldrb	r3, [r0, #24]
    d404:	add.w	r3, r1, r3, lsl #4
    d408:	ldr	r7, [r3, #28]
    d40a:	cbz	r7, d410 <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    d40c:	ldr	r3, [r3, #32]
    d40e:	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d410:	ldrb.w	lr, [r0, #25]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d414:	subs	r3, r4, #1
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d416:	movs	r7, #217	; 0xd9
    d418:	add.w	r4, r1, lr, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;
    d41c:	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d420:	lsls	r3, r3, #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d422:	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d426:	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d42a:	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d42e:	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d430:	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    d432:	ldr	r4, [r4, #8]
    d434:	adds	r6, #16
    d436:	str	r7, [r4, #0]
    d438:	ldrb	r4, [r0, #25]

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    d43a:	ldr	r7, [r1, #4]
    d43c:	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    d440:	ldrb.w	r1, [r4, #52]	; 0x34
    d444:	ldr.w	ip, [r4, #56]	; 0x38
    d448:	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d44c:	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    d44e:	ldr	r4, [r5, #4]
    d450:	str.w	ip, [r4]
    d454:	ldr	r4, [pc, #228]	; (d53c <HardwareSerial::begin(unsigned long, unsigned short)+0x228>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    d456:	str	r3, [r1, #16]
	port->PINCFG = 0;
    d458:	str.w	lr, [r1, #12]
    d45c:	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d460:	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    d462:	movs	r5, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d464:	ldr	r1, [pc, #216]	; (d540 <HardwareSerial::begin(unsigned long, unsigned short)+0x22c>)
    d466:	ldrb	r4, [r3, #1]
    d468:	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    d46c:	ldr	r6, [pc, #212]	; (d544 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>)
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    d46e:	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    d470:	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    d472:	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    d474:	ldrb	r3, [r4, #1]
    d476:	and.w	r0, r3, #31
    d47a:	asrs	r3, r3, #5
    d47c:	lsl.w	r0, r5, r0
    d480:	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    d484:	ldr	r3, [r1, #40]	; 0x28
    d486:	lsrs	r3, r3, #2
    d488:	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    d48c:	cmp	r3, #15
    d48e:	bhi.n	d512 <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
    d490:	asrs	r3, r5
    d492:	and.w	r3, r3, #3
    d496:	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    d498:	ldr	r3, [r1, #40]	; 0x28
    d49a:	lsls	r3, r3, #2
    d49c:	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    d4a0:	cmp	r3, #15
    d4a2:	bhi.n	d50c <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    d4a4:	lsls	r3, r3, #15
    d4a6:	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d4aa:	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d4ac:	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d4ae:	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    d4b2:	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    d4b4:	ldr	r3, [r1, #40]	; 0x28
    d4b6:	orr.w	r3, r3, #136	; 0x88
    d4ba:	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d4bc:	bmi.n	d516 <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    d4be:	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    d4c2:	and.w	r0, r2, #15
    d4c6:	cmp	r0, #4
    d4c8:	it	eq
    d4ca:	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    d4ce:	lsls	r6, r2, #26
    d4d0:	it	mi
    d4d2:	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d4d6:	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    d4d8:	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    d4da:	bpl.n	d4e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1d0>
    d4dc:	ldr	r3, [r1, #16]
    d4de:	orr.w	r3, r3, #536870912	; 0x20000000
    d4e2:	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d4e4:	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d4e6:	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    d4e8:	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    d4ec:	it	mi
    d4ee:	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    d4f2:	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    d4f4:	lsls	r3, r2, #23
    d4f6:	bpl.n	d500 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ec>
    d4f8:	ldr	r3, [r1, #16]
    d4fa:	orr.w	r3, r3, #8192	; 0x2000
    d4fe:	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    d500:	ldrb	r2, [r4, #0]
    d502:	ldr	r3, [pc, #68]	; (d548 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>)
    d504:	ldr.w	r1, [r3, r2, lsl #2]
    d508:	cbz	r1, d51c <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
    d50a:	pop	{r4, r5, r6, r7, pc}
    d50c:	mov.w	r3, #196608	; 0x30000
    d510:	b.n	d4aa <HardwareSerial::begin(unsigned long, unsigned short)+0x196>
    d512:	movs	r0, #3
    d514:	b.n	d498 <HardwareSerial::begin(unsigned long, unsigned short)+0x184>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    d516:	ldr	r3, [pc, #52]	; (d54c <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
    d518:	orrs	r3, r0
    d51a:	b.n	d4c2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    d51c:	ldr	r0, [pc, #48]	; (d550 <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    d51e:	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    d520:	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    d522:	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    d526:	adds	r3, r1, #1
    d528:	strb	r3, [r0, #0]
    d52a:	pop	{r4, r5, r6, r7, pc}
    d52c:	.word	0x4bb71b00
    d530:	.word	0x60ad78ec
    d534:	.word	0x200005c0
    d538:	.word	0x0001f038
    d53c:	.word	0x20010400
    d540:	.word	0xe000e400
    d544:	.word	0xe000e100
    d548:	.word	0x2000df9c
    d54c:	.word	0x003c0010
    d550:	.word	0x2000dfb8

0000d554 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    d554:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d556:	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    d558:	mov	r4, r0
    d55a:	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d55c:	cbz	r3, d564 <HardwareSerial::write9bit(unsigned long)+0x10>
    d55e:	ldr	r2, [r0, #84]	; 0x54
    d560:	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    d564:	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    d568:	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    d56a:	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    d56c:	adds	r5, #1
    d56e:	cmp	r5, r3
    d570:	bcs.n	d606 <HardwareSerial::write9bit(unsigned long)+0xb2>
    d572:	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    d574:	ldrh.w	r3, [r4, #72]	; 0x48
    d578:	uxth	r3, r3
    d57a:	cmp	r3, r5
    d57c:	bne.n	d5c0 <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    d57e:	bl	d2d4 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    d582:	ldr	r3, [r4, #20]
    d584:	ldrh.w	r3, [r3, #86]	; 0x56
    d588:	cmp	r0, r3
    d58a:	bgt.n	d5e8 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    d58c:	ldr	r1, [r4, #16]
    d58e:	ldr	r3, [r1, #20]
    d590:	lsls	r3, r3, #8
    d592:	bpl.n	d574 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    d594:	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d598:	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    d59a:	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d59c:	adds	r3, #1
    d59e:	cmp	r3, r2
    d5a0:	bcs.n	d5f2 <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    d5a2:	ldr	r2, [r4, #44]	; 0x2c
    d5a4:	uxth	r0, r3
    d5a6:	cmp	r3, r2
    d5a8:	bcs.n	d5fc <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    d5aa:	ldr	r2, [r4, #28]
    d5ac:	ldrb	r3, [r2, r3]
    d5ae:	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    d5b0:	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    d5b2:	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    d5b6:	ldrh.w	r3, [r4, #72]	; 0x48
    d5ba:	uxth	r3, r3
    d5bc:	cmp	r3, r5
    d5be:	beq.n	d57e <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    d5c0:	ldr	r3, [r4, #44]	; 0x2c
    d5c2:	cmp	r5, r3
    d5c4:	bcc.n	d60c <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    d5c6:	subs	r5, r5, r3
    d5c8:	uxtb	r6, r6
    d5ca:	ldr	r3, [r4, #40]	; 0x28
    d5cc:	strb	r6, [r3, r5]
	}
	__disable_irq();
    d5ce:	cpsid	i
	transmitting_ = 1;
    d5d0:	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d5d2:	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    d5d4:	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    d5d8:	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    d5dc:	ldr	r3, [r2, #24]
    d5de:	orr.w	r3, r3, #8388608	; 0x800000
    d5e2:	str	r3, [r2, #24]
	__enable_irq();
    d5e4:	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    d5e6:	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    d5e8:	cmp	r0, #255	; 0xff
    d5ea:	ble.n	d574 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    d5ec:	bl	d988 <yield>
    d5f0:	b.n	d574 <HardwareSerial::write9bit(unsigned long)+0x20>
    d5f2:	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    d5f4:	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    d5f6:	mov	r3, r0
				if (tail < tx_buffer_size_) {
    d5f8:	cmp	r3, r2
    d5fa:	bcc.n	d5aa <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    d5fc:	subs	r3, r3, r2
    d5fe:	ldr	r2, [r4, #40]	; 0x28
    d600:	ldrb	r3, [r2, r3]
    d602:	uxtb	r3, r3
    d604:	b.n	d5b0 <HardwareSerial::write9bit(unsigned long)+0x5c>
    d606:	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    d608:	mov	r5, r7
    d60a:	b.n	d574 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    d60c:	uxtb	r6, r6
    d60e:	ldr	r3, [r4, #28]
    d610:	strb	r6, [r3, r5]
    d612:	b.n	d5ce <HardwareSerial::write9bit(unsigned long)+0x7a>

0000d614 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    d614:	b.w	d554 <HardwareSerial::write9bit(unsigned long)>

0000d618 <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d618:	ldr	r2, [r0, #16]
    d61a:	ldr	r3, [r2, #20]
    d61c:	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    d620:	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    d622:	beq.n	d6aa <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    d624:	ldr	r3, [r2, #44]	; 0x2c
    d626:	ubfx	r5, r3, #24, #3
		if (avail) {
    d62a:	cmp	r5, #0
    d62c:	beq.n	d6a4 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    d62e:	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    d632:	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    d636:	uxth	r7, r7
			tail = rx_buffer_tail_;
    d638:	uxth.w	lr, lr
    d63c:	b.n	d64c <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    d63e:	ldr	r2, [r0, #32]
    d640:	strb	r6, [r2, r3]
    d642:	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    d644:	subs	r3, r5, #1
    d646:	ands.w	r5, r3, #255	; 0xff
    d64a:	beq.n	d682 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d64c:	ldr	r1, [r2, #28]
				newhead = head + 1;
    d64e:	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d650:	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    d652:	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    d656:	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    d65a:	cmp	r3, r6
    d65c:	it	cs
    d65e:	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    d660:	uxth	r4, r4
    d662:	cmp	r3, r4
    d664:	beq.n	d644 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d666:	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d668:	uxtb	r6, r1
    d66a:	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d66c:	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d66e:	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    d672:	bcc.n	d63e <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    d674:	ldr	r3, [r0, #36]	; 0x24
    d676:	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    d678:	subs	r3, r5, #1
    d67a:	ldr	r2, [r0, #16]
    d67c:	ands.w	r5, r3, #255	; 0xff
    d680:	bne.n	d64c <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    d682:	uxth	r3, r7
			if (rts_pin_baseReg_) {
    d684:	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    d686:	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    d68a:	cbz	r1, d6a4 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    d68c:	cmp	r7, lr
    d68e:	bcs.n	d764 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    d690:	ldr	r3, [r0, #56]	; 0x38
    d692:	rsb	r3, lr, r3
    d696:	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    d698:	ldr	r3, [r0, #64]	; 0x40
    d69a:	cmp	r7, r3
    d69c:	bcc.n	d6a4 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    d69e:	ldr	r3, [r0, #92]	; 0x5c
    d6a0:	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    d6a4:	ldr	r3, [r2, #20]
    d6a6:	lsls	r4, r3, #11
    d6a8:	bmi.n	d742 <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    d6aa:	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    d6ae:	tst.w	lr, #8388608	; 0x800000
    d6b2:	beq.n	d6ba <HardwareSerial::IRQHandler()+0xa2>
    d6b4:	ldr	r3, [r2, #20]
    d6b6:	lsls	r1, r3, #8
    d6b8:	bmi.n	d6e0 <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d6ba:	tst.w	lr, #4194304	; 0x400000
    d6be:	beq.n	d73e <HardwareSerial::IRQHandler()+0x126>
    d6c0:	ldr	r3, [r2, #20]
    d6c2:	lsls	r3, r3, #9
    d6c4:	bpl.n	d740 <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    d6c6:	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d6c8:	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    d6ca:	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    d6ce:	cbz	r3, d6d6 <HardwareSerial::IRQHandler()+0xbe>
    d6d0:	ldr	r1, [r0, #84]	; 0x54
    d6d2:	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    d6d6:	ldr	r3, [r2, #24]
    d6d8:	bic.w	r3, r3, #4194304	; 0x400000
    d6dc:	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    d6de:	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    d6e0:	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    d6e4:	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    d6e8:	uxth	r5, r5
		tail = tx_buffer_tail_;
    d6ea:	uxth	r3, r3
		do {
			if (head == tail) break;
    d6ec:	cmp	r5, r3
    d6ee:	beq.n	d74c <HardwareSerial::IRQHandler()+0x134>
    d6f0:	ldr	r6, [r0, #52]	; 0x34
    d6f2:	ldr	r4, [r0, #44]	; 0x2c
    d6f4:	b.n	d70c <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    d6f6:	ldr	r1, [r0, #28]
    d6f8:	ldrb	r1, [r1, r3]
    d6fa:	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    d6fc:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d6fe:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    d700:	ubfx	r1, r1, #8, #3
    d704:	cmp	r1, #3
    d706:	bhi.n	d72e <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    d708:	cmp	r3, r5
    d70a:	beq.n	d74c <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    d70c:	adds	r3, #1
    d70e:	cmp	r6, r3
    d710:	it	ls
    d712:	movls	r3, #0
			if (tail < tx_buffer_size_) {
    d714:	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d716:	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    d71a:	bcc.n	d6f6 <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    d71c:	ldr	r7, [r0, #40]	; 0x28
    d71e:	ldrb	r1, [r7, r1]
    d720:	uxtb	r1, r1
			}
			port->DATA = n;
    d722:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    d724:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    d726:	ubfx	r1, r1, #8, #3
    d72a:	cmp	r1, #3
    d72c:	bls.n	d708 <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d72e:	uxth	r1, r3
		if (head == tail) {
    d730:	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d732:	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    d736:	beq.n	d752 <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    d738:	tst.w	lr, #4194304	; 0x400000
    d73c:	bne.n	d6c0 <HardwareSerial::IRQHandler()+0xa8>
    d73e:	pop	{r4, r5, r6, r7, pc}
    d740:	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    d742:	ldr	r3, [r2, #20]
    d744:	orr.w	r3, r3, #1048576	; 0x100000
    d748:	str	r3, [r2, #20]
    d74a:	b.n	d6aa <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    d74c:	uxth	r5, r5
    d74e:	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    d752:	ldr	r3, [r2, #24]
    d754:	bic.w	r3, r3, #8388608	; 0x800000
    d758:	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    d75a:	ldr	r3, [r2, #24]
    d75c:	orr.w	r3, r3, #4194304	; 0x400000
    d760:	str	r3, [r2, #24]
    d762:	b.n	d6ba <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    d764:	rsb	r7, lr, r7
    d768:	b.n	d698 <HardwareSerial::IRQHandler()+0x80>
    d76a:	nop

0000d76c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    d76c:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    d76e:	ldr	r3, [pc, #28]	; (d78c <HardwareSerial::processSerialEvents()+0x20>)
    d770:	ldrb	r4, [r3, #0]
    d772:	cbz	r4, d788 <HardwareSerial::processSerialEvents()+0x1c>
    d774:	ldr	r5, [pc, #24]	; (d790 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    d776:	ldr.w	r3, [r5, #4]!
    d77a:	cmp	r3, #0
    d77c:	beq.n	d776 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    d77e:	blx	r3
			if (--handlers_still_to_process == 0) return;
    d780:	subs	r3, r4, #1
    d782:	ands.w	r4, r3, #255	; 0xff
    d786:	bne.n	d776 <HardwareSerial::processSerialEvents()+0xa>
    d788:	pop	{r3, r4, r5, pc}
    d78a:	nop
    d78c:	.word	0x2000dfb8
    d790:	.word	0x2000df98

0000d794 <HardwareSerial::disableSerialEvents()>:
	}
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
    d794:	ldr	r3, [r0, #20]
    d796:	ldr	r2, [pc, #32]	; (d7b8 <HardwareSerial::disableSerialEvents()+0x24>)
    d798:	ldrb	r1, [r3, #0]
    d79a:	ldr.w	r3, [r2, r1, lsl #2]
    d79e:	cbz	r3, d7b4 <HardwareSerial::disableSerialEvents()+0x20>
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    d7a0:	ldr	r0, [pc, #24]	; (d7bc <HardwareSerial::disableSerialEvents()+0x28>)
		serial_event_handlers_active++;
	}
}

void HardwareSerial::disableSerialEvents() 
{
    d7a2:	push	{r4}
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    d7a4:	ldrb	r3, [r0, #0]
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    d7a6:	movs	r4, #0
		serial_event_handlers_active--;
    d7a8:	subs	r3, #1
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    d7aa:	str.w	r4, [r2, r1, lsl #2]
		serial_event_handlers_active--;
    d7ae:	strb	r3, [r0, #0]
	}
}
    d7b0:	ldr.w	r4, [sp], #4
    d7b4:	bx	lr
    d7b6:	nop
    d7b8:	.word	0x2000df9c
    d7bc:	.word	0x2000dfb8

0000d7c0 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    d7c0:	push	{r4, lr}
    d7c2:	mov	r4, r0
{
	free(buffer);
    d7c4:	ldr	r0, [r0, #0]
    d7c6:	bl	e564 <free>
}
    d7ca:	mov	r0, r4
    d7cc:	pop	{r4, pc}
    d7ce:	nop

0000d7d0 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    d7d0:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    d7d2:	ldr	r3, [r0, #4]
    d7d4:	cmp	r3, r1
    d7d6:	bcc.n	d7dc <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d7d8:	movs	r0, #1
		return 1;
	}
	return 0;
}
    d7da:	pop	{r3, r4, r5, pc}
    d7dc:	mov	r5, r1
    d7de:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    d7e0:	adds	r1, #1
    d7e2:	ldr	r0, [r0, #0]
    d7e4:	bl	ec50 <realloc>
	if (newbuffer) {
    d7e8:	cmp	r0, #0
    d7ea:	beq.n	d7da <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d7ec:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    d7ee:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d7f2:	cmp	r3, #0
    d7f4:	bne.n	d7d8 <String::reserve(unsigned int)+0x8>
    d7f6:	strb	r3, [r0, #0]
    d7f8:	b.n	d7d8 <String::reserve(unsigned int)+0x8>
    d7fa:	nop

0000d7fc <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    d7fc:	push	{r3, r4, r5, r6, r7, lr}
    d7fe:	mov	r4, r0
	if (length == 0) {
    d800:	mov	r5, r2
    d802:	cbnz	r2, d812 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    d804:	ldr	r3, [r0, #0]
    d806:	cbz	r3, d80a <String::copy(char const*, unsigned int)+0xe>
    d808:	strb	r2, [r3, #0]
		len = 0;
    d80a:	movs	r3, #0
    d80c:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d80e:	mov	r0, r4
    d810:	pop	{r3, r4, r5, r6, r7, pc}
    d812:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    d814:	mov	r1, r2
    d816:	bl	d7d0 <String::reserve(unsigned int)>
    d81a:	mov	r7, r0
    d81c:	cbnz	r0, d832 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    d81e:	ldr	r0, [r4, #0]
    d820:	cbz	r0, d828 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    d822:	bl	e564 <free>
			buffer = NULL;
    d826:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    d828:	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d82a:	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    d82c:	str	r3, [r4, #4]
    d82e:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d830:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    d832:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    d834:	mov	r1, r6
    d836:	ldr	r0, [r4, #0]
    d838:	bl	f35c <strcpy>
	return *this;
    d83c:	b.n	d80e <String::copy(char const*, unsigned int)+0x12>
    d83e:	nop

0000d840 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d840:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d842:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d844:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d846:	str	r3, [r0, #0]
	capacity = 0;
    d848:	str	r3, [r0, #4]
	len = 0;
    d84a:	str	r3, [r0, #8]
	flags = 0;
    d84c:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    d84e:	cbz	r1, d862 <String::String(char const*)+0x22>
    d850:	mov	r5, r1
    d852:	mov	r0, r1
    d854:	bl	f440 <strlen>
    d858:	mov	r2, r0
    d85a:	mov	r1, r5
    d85c:	mov	r0, r4
    d85e:	bl	d7fc <String::copy(char const*, unsigned int)>
}
    d862:	mov	r0, r4
    d864:	pop	{r3, r4, r5, pc}
    d866:	nop

0000d868 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    d868:	push	{r3, r4, r5, lr}
    d86a:	mov	r4, r1
    d86c:	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    d86e:	mov	r0, r1
    d870:	bl	f440 <strlen>
    d874:	mov	r1, r4
    d876:	mov	r2, r0
    d878:	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    d87a:	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    d87e:	b.w	d7fc <String::copy(char const*, unsigned int)>
    d882:	nop

0000d884 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    d884:	push	{r4, lr}
    d886:	mov	r4, r0
	if (cstr) {
    d888:	cbz	r1, d892 <String::operator=(char const*)+0xe>
    d88a:	bl	d868 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    d88e:	mov	r0, r4
    d890:	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    d892:	str	r1, [r4, #8]
	}
	return *this;
}
    d894:	mov	r0, r4
    d896:	pop	{r4, pc}

0000d898 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    d898:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d89c:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d89e:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    d8a0:	mov	r4, r0
    d8a2:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d8a4:	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    d8a6:	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d8a8:	bhi.n	d8c0 <String::append(char const*, unsigned int)+0x28>
    d8aa:	adds	r2, r3, r1
    d8ac:	cmp	r7, r2
    d8ae:	bcs.n	d8c0 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    d8b0:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    d8b4:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8b8:	cbnz	r5, d8c8 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    d8ba:	mov	r0, r4
    d8bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    d8c0:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8c4:	cmp	r5, #0
    d8c6:	beq.n	d8ba <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    d8c8:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d8ca:	mov	r0, r4
    d8cc:	mov	r1, r6
    d8ce:	bl	d7d0 <String::reserve(unsigned int)>
    d8d2:	cmp	r0, #0
    d8d4:	beq.n	d8ba <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    d8d6:	cmp.w	r8, #0
    d8da:	beq.n	d8fa <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    d8dc:	ldr	r3, [r4, #0]
    d8de:	mov	r2, r5
    d8e0:	ldr	r0, [r4, #8]
    d8e2:	add.w	r1, r3, r9
    d8e6:	add	r0, r3
    d8e8:	bl	bbd0 <memcpy>
		buffer[newlen] = 0;
    d8ec:	ldr	r3, [r4, #0]
    d8ee:	movs	r2, #0
    d8f0:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    d8f2:	str	r6, [r4, #8]
	return *this;
}
    d8f4:	mov	r0, r4
    d8f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    d8fa:	ldr	r0, [r4, #0]
    d8fc:	mov	r1, r7
    d8fe:	ldr	r3, [r4, #8]
    d900:	add	r0, r3
    d902:	bl	f35c <strcpy>
    d906:	b.n	d8f2 <String::append(char const*, unsigned int)+0x5a>

0000d908 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    d908:	push	{r4, lr}
    d90a:	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    d90c:	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    d90e:	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    d910:	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    d912:	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    d916:	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    d918:	strb.w	r3, [sp, #5]
	append(buf, 1);
    d91c:	bl	d898 <String::append(char const*, unsigned int)>
	return *this;
}
    d920:	mov	r0, r4
    d922:	add	sp, #8
    d924:	pop	{r4, pc}
    d926:	nop

0000d928 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d928:	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    d92a:	push	{r3, lr}
    d92c:	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d92e:	cbnz	r2, d93c <String::equals(char const*) const+0x14>
    d930:	cbz	r1, d950 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    d932:	ldrb	r0, [r3, #0]
    d934:	clz	r0, r0
    d938:	lsrs	r0, r0, #5
    d93a:	pop	{r3, pc}
    d93c:	cbz	r1, d94c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    d93e:	ldr	r0, [r0, #0]
    d940:	bl	f088 <strcmp>
    d944:	clz	r0, r0
    d948:	lsrs	r0, r0, #5
}
    d94a:	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    d94c:	ldr	r3, [r0, #0]
    d94e:	b.n	d932 <String::equals(char const*) const+0xa>
    d950:	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    d952:	pop	{r3, pc}

0000d954 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    d954:	cbz	r2, d986 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    d956:	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    d958:	clz	r4, r1
    d95c:	lsrs	r4, r4, #5
    d95e:	cbnz	r4, d980 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    d960:	ldr	r6, [r0, #8]
    d962:	cmp	r6, r3
    d964:	bls.n	d982 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    d966:	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    d968:	subs	r2, #1
    d96a:	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    d96c:	ldr	r1, [r0, #0]
    d96e:	cmp	r6, r2
    d970:	mov	r0, r5
    d972:	add	r1, r3
    d974:	it	cs
    d976:	movcs	r6, r2
    d978:	mov	r2, r6
    d97a:	bl	f51c <strncpy>
	buf[n] = 0;
    d97e:	strb	r4, [r5, r6]
    d980:	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    d982:	strb	r4, [r1, #0]
		return;
    d984:	pop	{r4, r5, r6, pc}
    d986:	bx	lr

0000d988 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    d988:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    d98a:	ldr	r4, [pc, #132]	; (da10 <yield+0x88>)
    d98c:	ldrb	r3, [r4, #0]
    d98e:	cbnz	r3, d9b2 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d990:	ldr	r3, [pc, #128]	; (da14 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    d992:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d994:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    d996:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d998:	cbnz	r3, d9e2 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    d99a:	ldr	r3, [pc, #124]	; (da18 <yield+0x90>)
    d99c:	ldrb	r3, [r3, #0]
    d99e:	cmp	r3, #0
    d9a0:	bne.n	d9f6 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    d9a2:	ldr	r3, [pc, #120]	; (da1c <yield+0x94>)

	running = 0;
    d9a4:	movs	r1, #0
    d9a6:	ldr	r2, [r3, #0]
    d9a8:	strb	r1, [r4, #0]
    d9aa:	cbz	r2, d9b2 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d9ac:	mrs	r2, IPSR
		if (ipsr != 0) return;
    d9b0:	cbz	r2, d9b4 <yield+0x2c>
    d9b2:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d9b4:	mrs	r0, PRIMASK
		__disable_irq();
    d9b8:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    d9ba:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    d9bc:	cbz	r2, d9fc <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    d9be:	ldr	r4, [pc, #96]	; (da20 <yield+0x98>)
    d9c0:	ldrb	r1, [r4, #0]
    d9c2:	cbnz	r1, d9fc <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    d9c4:	movs	r6, #1
		firstYield = first->_next;
    d9c6:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    d9c8:	strb	r6, [r4, #0]
		firstYield = first->_next;
    d9ca:	str	r5, [r3, #0]
		if (firstYield) {
    d9cc:	cbz	r5, da04 <yield+0x7c>
			firstYield->_prev = nullptr;
    d9ce:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d9d0:	cbnz	r0, d9d4 <yield+0x4c>
    d9d2:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    d9d4:	movs	r5, #0
		(*(first->_function))(*first);
    d9d6:	ldr	r3, [r2, #8]
    d9d8:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    d9da:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    d9dc:	blx	r3
		runningFromYield = false;
    d9de:	strb	r5, [r4, #0]
    d9e0:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    d9e2:	bl	c020 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    d9e6:	cmp	r0, #0
    d9e8:	beq.n	d99a <yield+0x12>
    d9ea:	bl	dd24 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    d9ee:	ldr	r3, [pc, #40]	; (da18 <yield+0x90>)
    d9f0:	ldrb	r3, [r3, #0]
    d9f2:	cmp	r3, #0
    d9f4:	beq.n	d9a2 <yield+0x1a>
    d9f6:	bl	d76c <HardwareSerial::processSerialEvents()>
    d9fa:	b.n	d9a2 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d9fc:	cmp	r0, #0
    d9fe:	bne.n	d9b2 <yield+0x2a>
    da00:	cpsie	i
    da02:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    da04:	ldr	r3, [pc, #28]	; (da24 <yield+0x9c>)
    da06:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    da08:	cmp	r0, #0
    da0a:	bne.n	d9d4 <yield+0x4c>
    da0c:	b.n	d9d2 <yield+0x4a>
    da0e:	nop
    da10:	.word	0x2000dfb9
    da14:	.word	0x20000f08
    da18:	.word	0x2000dfb8
    da1c:	.word	0x2000e7d0
    da20:	.word	0x2000e7d4
    da24:	.word	0x2000e7cc

0000da28 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    da28:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    da2a:	ldr	r4, [pc, #100]	; (da90 <random(unsigned long) [clone .part.0]+0x68>)
    da2c:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    da2e:	cbz	r3, da74 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    da30:	ldr	r1, [pc, #96]	; (da94 <random(unsigned long) [clone .part.0]+0x6c>)
    da32:	asrs	r5, r3, #31
    da34:	ldr.w	lr, [pc, #104]	; daa0 <random(unsigned long) [clone .part.0]+0x78>
    da38:	smull	r6, r7, r3, r1
    da3c:	ldr	r6, [pc, #88]	; (da98 <random(unsigned long) [clone .part.0]+0x70>)
    da3e:	smull	r2, r1, r1, r3
    da42:	adds	r2, r3, r7
    da44:	add	r1, r3
    da46:	rsb	r2, r5, r2, asr #16
    da4a:	rsb	r1, r5, r1, asr #16
    da4e:	movw	r5, #16807	; 0x41a7
    da52:	mls	r2, lr, r2, r3
    da56:	mul.w	r1, r6, r1
    da5a:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    da5e:	cmp	r3, #0
    da60:	bge.n	da82 <random(unsigned long) [clone .part.0]+0x5a>
    da62:	mvn.w	r2, #2147483648	; 0x80000000
    da66:	add	r2, r3
    da68:	udiv	r3, r2, r0
	seed = x;
    da6c:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da6e:	mls	r0, r0, r3, r2
    da72:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    da74:	ldr	r2, [pc, #36]	; (da9c <random(unsigned long) [clone .part.0]+0x74>)
    da76:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    da7a:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da7c:	mls	r0, r0, r3, r2
    da80:	pop	{r4, r5, r6, r7, pc}
    da82:	mov	r2, r3
    da84:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    da88:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    da8a:	mls	r0, r0, r3, r2
    da8e:	pop	{r4, r5, r6, r7, pc}
    da90:	.word	0x2000dfbc
    da94:	.word	0x834e0b5f
    da98:	.word	0xfffff4ec
    da9c:	.word	0x1f0cce42
    daa0:	.word	0x0001f31d

0000daa4 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    daa4:	cbz	r0, daaa <randomSeed(unsigned long)+0x6>
    daa6:	ldr	r3, [pc, #4]	; (daac <randomSeed(unsigned long)+0x8>)
    daa8:	str	r0, [r3, #0]
    daaa:	bx	lr
    daac:	.word	0x2000dfbc

0000dab0 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    dab0:	cbz	r0, dab6 <random(unsigned long)+0x6>
    dab2:	b.w	da28 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    dab6:	bx	lr

0000dab8 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    dab8:	cmp	r0, r1
    daba:	bge.n	daca <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    dabc:	push	{r4, lr}
    dabe:	mov	r4, r0
    dac0:	subs	r0, r1, r0
    dac2:	bl	da28 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    dac6:	add	r0, r4
}
    dac8:	pop	{r4, pc}
    daca:	bx	lr

0000dacc <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    dacc:	ldr	r0, [pc, #4]	; (dad4 <IRQHandler_Serial1+0x8>)
    dace:	b.w	d618 <HardwareSerial::IRQHandler()>
    dad2:	nop
    dad4:	.word	0x20000ea8

0000dad8 <serialEvent1()>:
};
HardwareSerial Serial1(&IMXRT_LPUART6, &UART6_Hardware, tx_buffer1, SERIAL1_TX_BUFFER_SIZE,
	rx_buffer1,  SERIAL1_RX_BUFFER_SIZE);

void serialEvent1() __attribute__((weak));
void serialEvent1() {Serial1.disableSerialEvents(); }		// No use calling this so disable if called...
    dad8:	ldr	r0, [pc, #4]	; (dae0 <serialEvent1()+0x8>)
    dada:	b.w	d794 <HardwareSerial::disableSerialEvents()>
    dade:	nop
    dae0:	.word	0x20000ea8

0000dae4 <serial_event_check_serial1()>:
{
	Serial1.IRQHandler();
}

void serial_event_check_serial1()
{
    dae4:	push	{r3, lr}
	if (Serial1.available()) serialEvent1();
    dae6:	ldr	r0, [pc, #12]	; (daf4 <serial_event_check_serial1()+0x10>)
    dae8:	bl	d1f8 <HardwareSerial::available()>
    daec:	cbz	r0, daf2 <serial_event_check_serial1()+0xe>
    daee:	bl	dad8 <serialEvent1()>
    daf2:	pop	{r3, pc}
    daf4:	.word	0x20000ea8

0000daf8 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    daf8:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dafa:	mrs	r2, PRIMASK
		__disable_irq();
    dafe:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    db00:	ldrb	r3, [r0, #29]
    db02:	cbnz	r3, db12 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    db04:	ldrb	r1, [r0, #28]
    db06:	cmp	r1, #1
    db08:	beq.n	db1c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    db0a:	cmp	r1, #3
    db0c:	beq.n	db30 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    db0e:	movs	r3, #1
    db10:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    db12:	cbnz	r2, db16 <EventResponder::triggerEventNotImmediate()+0x1e>
    db14:	cpsie	i
	}
	enableInterrupts(irq);
}
    db16:	ldr.w	r4, [sp], #4
    db1a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    db1c:	ldr	r4, [pc, #68]	; (db64 <EventResponder::triggerEventNotImmediate()+0x6c>)
    db1e:	ldr	r1, [r4, #0]
    db20:	cbz	r1, db4c <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    db22:	ldr	r1, [pc, #68]	; (db68 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    db24:	str	r3, [r0, #20]
				_prev = lastYield;
    db26:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    db28:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    db2a:	str	r3, [r0, #24]
				_prev->_next = this;
    db2c:	str	r0, [r3, #20]
    db2e:	b.n	db0e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    db30:	ldr	r4, [pc, #56]	; (db6c <EventResponder::triggerEventNotImmediate()+0x74>)
    db32:	ldr	r1, [r4, #0]
    db34:	cbz	r1, db58 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    db36:	ldr	r1, [pc, #56]	; (db70 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    db38:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    db3a:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    db3c:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    db3e:	str	r3, [r0, #24]
				_prev->_next = this;
    db40:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    db42:	ldr	r3, [pc, #48]	; (db74 <EventResponder::triggerEventNotImmediate()+0x7c>)
    db44:	mov.w	r1, #268435456	; 0x10000000
    db48:	str	r1, [r3, #0]
    db4a:	b.n	db0e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    db4c:	ldr	r3, [pc, #24]	; (db68 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    db4e:	str	r1, [r0, #20]
				_prev = nullptr;
    db50:	str	r1, [r0, #24]
				firstYield = this;
    db52:	str	r0, [r4, #0]
				lastYield = this;
    db54:	str	r0, [r3, #0]
    db56:	b.n	db0e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    db58:	ldr	r3, [pc, #20]	; (db70 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    db5a:	str	r1, [r0, #20]
				_prev = nullptr;
    db5c:	str	r1, [r0, #24]
				firstInterrupt = this;
    db5e:	str	r0, [r4, #0]
				lastInterrupt = this;
    db60:	str	r0, [r3, #0]
    db62:	b.n	db42 <EventResponder::triggerEventNotImmediate()+0x4a>
    db64:	.word	0x2000e7d0
    db68:	.word	0x2000e7cc
    db6c:	.word	0x2000e7c0
    db70:	.word	0x2000e7c4
    db74:	.word	0xe000ed04

0000db78 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    db78:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    db7a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    db7c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    db7e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    db80:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    db82:	beq.n	db8c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    db84:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    db88:	b.w	daf8 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    db8c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    db8e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    db92:	bx	r3

0000db94 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    db94:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    db96:	mrs	r1, PRIMASK
		__disable_irq();
    db9a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    db9c:	ldr	r4, [pc, #48]	; (dbd0 <EventResponder::runFromInterrupt()+0x3c>)
    db9e:	ldr	r3, [r4, #0]
		if (first) {
    dba0:	cbz	r3, dbc6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dba2:	ldr	r6, [pc, #48]	; (dbd4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    dba4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    dba6:	ldr	r2, [r3, #20]
    dba8:	str	r2, [r4, #0]
			if (firstInterrupt) {
    dbaa:	cbz	r2, dbcc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    dbac:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dbae:	cbnz	r1, dbb2 <EventResponder::runFromInterrupt()+0x1e>
    dbb0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    dbb2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    dbb4:	mov	r0, r3
    dbb6:	ldr	r3, [r3, #8]
    dbb8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dbba:	mrs	r1, PRIMASK
		__disable_irq();
    dbbe:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    dbc0:	ldr	r3, [r4, #0]
		if (first) {
    dbc2:	cmp	r3, #0
    dbc4:	bne.n	dba6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dbc6:	cbnz	r1, dbca <EventResponder::runFromInterrupt()+0x36>
    dbc8:	cpsie	i
    dbca:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    dbcc:	str	r2, [r6, #0]
    dbce:	b.n	dbae <EventResponder::runFromInterrupt()+0x1a>
    dbd0:	.word	0x2000e7c0
    dbd4:	.word	0x2000e7c4

0000dbd8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    dbd8:	b.w	db94 <EventResponder::runFromInterrupt()>

0000dbdc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    dbdc:	ldr	r2, [pc, #96]	; (dc40 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    dbde:	push	{r4, r5}
	if (listActive == nullptr) {
    dbe0:	ldr	r4, [r2, #0]
    dbe2:	cmp	r4, #0
    dbe4:	beq.n	dc38 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    dbe6:	ldr	r3, [r0, #0]
    dbe8:	ldr	r1, [r4, #0]
    dbea:	cmp	r3, r1
    dbec:	bcs.n	dc0e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    dbee:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    dbf0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    dbf2:	str	r4, [r0, #8]
		_prev = nullptr;
    dbf4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    dbf6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    dbf8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    dbfa:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    dbfc:	movs	r3, #2
}
    dbfe:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    dc00:	strb	r3, [r0, #20]
}
    dc02:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    dc04:	str	r3, [r0, #0]
    dc06:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    dc08:	ldr	r1, [r2, #0]
    dc0a:	cmp	r3, r1
    dc0c:	bcc.n	dc20 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    dc0e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    dc10:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    dc12:	cmp	r2, #0
    dc14:	bne.n	dc04 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    dc16:	str	r2, [r0, #8]
		_prev = timer;
    dc18:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    dc1a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    dc1c:	str	r0, [r4, #8]
    dc1e:	b.n	dbfc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    dc20:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    dc22:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    dc24:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    dc26:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    dc28:	str	r5, [r0, #12]
				timer->_prev = this;
    dc2a:	str	r0, [r4, #12]
				_prev->_next = this;
    dc2c:	ldr	r1, [r0, #12]
    dc2e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    dc30:	str	r3, [r4, #0]
				_state = TimerActive;
    dc32:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    dc34:	pop	{r4, r5}
    dc36:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    dc38:	str	r4, [r0, #8]
		_prev = nullptr;
    dc3a:	str	r4, [r0, #12]
		listActive = this;
    dc3c:	str	r0, [r2, #0]
    dc3e:	b.n	dbfc <MillisTimer::addToActiveList()+0x20>
    dc40:	.word	0x2000e7c8

0000dc44 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    dc44:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    dc46:	ldr	r6, [pc, #136]	; (dcd0 <MillisTimer::runFromTimer()+0x8c>)
    dc48:	ldr	r4, [r6, #0]
	while (timer) {
    dc4a:	cbz	r4, dc98 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    dc4c:	ldr	r3, [r4, #0]
    dc4e:	cmp	r3, #0
    dc50:	bne.n	dcc8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    dc52:	mov	r5, r3
    dc54:	ldr	r7, [pc, #124]	; (dcd4 <MillisTimer::runFromTimer()+0x90>)
    dc56:	b.n	dc62 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    dc58:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    dc5a:	cbz	r4, dc98 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    dc5c:	ldr	r3, [r4, #0]
    dc5e:	cmp	r3, #0
    dc60:	bne.n	dcc8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    dc62:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    dc64:	cbz	r3, dc68 <MillisTimer::runFromTimer()+0x24>
    dc66:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    dc68:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    dc6a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dc6c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    dc6e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dc70:	ldr	r3, [r3, #0]
    dc72:	cmp	r3, r7
    dc74:	bne.n	dcba <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    dc76:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    dc78:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    dc7a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    dc7c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    dc7e:	beq.n	dcc2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    dc80:	bl	daf8 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    dc84:	ldr	r3, [r4, #4]
    dc86:	cmp	r3, #0
    dc88:	beq.n	dc58 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    dc8a:	str	r3, [r4, #0]
				timer->addToActiveList();
    dc8c:	mov	r0, r4
    dc8e:	bl	dbdc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    dc92:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    dc94:	cmp	r4, #0
    dc96:	bne.n	dc5c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dc98:	mrs	r3, PRIMASK
		__disable_irq();
    dc9c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    dc9e:	ldr	r2, [pc, #56]	; (dcd8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    dca0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    dca2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    dca4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    dca6:	cbnz	r3, dcaa <MillisTimer::runFromTimer()+0x66>
    dca8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    dcaa:	cbz	r0, dcb8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    dcac:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    dcae:	bl	dbdc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    dcb2:	mov	r0, r4
    dcb4:	cmp	r0, #0
    dcb6:	bne.n	dcac <MillisTimer::runFromTimer()+0x68>
    dcb8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    dcba:	mov	r2, r4
    dcbc:	movs	r1, #0
    dcbe:	blx	r3
    dcc0:	b.n	dc84 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    dcc2:	ldr	r3, [r0, #8]
    dcc4:	blx	r3
    dcc6:	b.n	dc84 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    dcc8:	subs	r3, #1
    dcca:	str	r3, [r4, #0]
			break;
    dccc:	b.n	dc98 <MillisTimer::runFromTimer()+0x54>
    dcce:	nop
    dcd0:	.word	0x2000e7c8
    dcd4:	.word	0x0000db79
    dcd8:	.word	0x2000e7d8

0000dcdc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    dcdc:	ldr	r2, [pc, #16]	; (dcf0 <systick_isr+0x14>)
    dcde:	ldr	r3, [pc, #20]	; (dcf4 <systick_isr+0x18>)
    dce0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    dce2:	ldr	r2, [pc, #20]	; (dcf8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    dce4:	str	r1, [r3, #0]
	systick_millis_count++;
    dce6:	ldr	r3, [r2, #0]
    dce8:	adds	r3, #1
    dcea:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    dcec:	b.w	dc44 <MillisTimer::runFromTimer()>
    dcf0:	.word	0xe0001004
    dcf4:	.word	0x2000df94
    dcf8:	.word	0x2000df98

0000dcfc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    dcfc:	b.w	c034 <usb_serial_flush_input>

0000dd00 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    dd00:	b.w	bffc <usb_serial_peekchar>

0000dd04 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    dd04:	b.w	bfb0 <usb_serial_getchar>

0000dd08 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    dd08:	b.w	c020 <usb_serial_available>

0000dd0c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    dd0c:	b.w	c100 <usb_serial_flush_output>

0000dd10 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    dd10:	b.w	c0b4 <usb_serial_write_buffer_free>

0000dd14 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dd14:	mov	r0, r1
    dd16:	mov	r1, r2
    dd18:	b.w	c09c <usb_serial_write>

0000dd1c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    dd1c:	mov	r0, r1
    dd1e:	b.w	c070 <usb_serial_putchar>
    dd22:	nop

0000dd24 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    dd24:	ldr	r3, [pc, #4]	; (dd2c <serialEvent()+0x8>)
    dd26:	movs	r2, #0
    dd28:	strb	r2, [r3, #0]
    dd2a:	bx	lr
    dd2c:	.word	0x20000f08

0000dd30 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    dd30:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    dd32:	mov	r6, r1
    dd34:	cbz	r1, dd54 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    dd36:	cbz	r2, dd58 <Print::write(unsigned char const*, unsigned int)+0x28>
    dd38:	mov	r7, r0
    dd3a:	mov	r4, r2
    dd3c:	movs	r5, #0
    dd3e:	ldr	r3, [r7, #0]
    dd40:	mov	r0, r7
    dd42:	ldrb.w	r1, [r6], #1
    dd46:	ldr	r3, [r3, #0]
    dd48:	blx	r3
    dd4a:	subs	r4, #1
    dd4c:	add	r5, r0
    dd4e:	bne.n	dd3e <Print::write(unsigned char const*, unsigned int)+0xe>
    dd50:	mov	r0, r5
    dd52:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    dd54:	mov	r0, r1
    dd56:	pop	{r3, r4, r5, r6, r7, pc}
    dd58:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    dd5a:	pop	{r3, r4, r5, r6, r7, pc}

0000dd5c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    dd5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd60:	ldr	r4, [r1, #8]
    dd62:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    dd64:	cbz	r4, dda2 <Print::print(String const&)+0x46>
    dd66:	movs	r5, #0
    dd68:	mov	r6, r0
    dd6a:	mov	r9, r1
    dd6c:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    dd6e:	mov	r3, r5
    dd70:	movs	r2, #33	; 0x21
    dd72:	add	r1, sp, #4
    dd74:	mov	r0, r9
    dd76:	bl	d954 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    dd7a:	cmp	r4, #32
    dd7c:	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    dd7e:	ldr	r0, [r6, #0]
    dd80:	it	cs
    dd82:	movcs	r3, #32
    dd84:	add	r1, sp, #4
    dd86:	ldr.w	r8, [r0, #4]
    dd8a:	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    dd8c:	subs	r4, r4, r3
		count += write(buffer, nbytes);
    dd8e:	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    dd90:	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    dd92:	blx	r8
    dd94:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    dd96:	cmp	r4, #0
    dd98:	bne.n	dd6e <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    dd9a:	mov	r0, r7
    dd9c:	add	sp, #44	; 0x2c
    dd9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    dda2:	mov	r7, r4
    dda4:	b.n	dd9a <Print::print(String const&)+0x3e>
    dda6:	nop

0000dda8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    dda8:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    ddaa:	ldr	r4, [pc, #24]	; (ddc4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    ddac:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    ddae:	ldr	r3, [r0, #0]
    ddb0:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ddb2:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    ddb4:	add	r1, sp, #4
    ddb6:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    ddb8:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    ddbc:	blx	r3
}
    ddbe:	add	sp, #8
    ddc0:	pop	{r4, pc}
    ddc2:	nop
    ddc4:	.word	0x20000954

0000ddc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ddc8:	push	{r4, r5, r6, r7, lr}
    ddca:	mov	r6, r0
    ddcc:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ddce:	cmp	r2, #0
    ddd0:	beq.n	de3a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    ddd2:	cmp	r2, #1
    ddd4:	it	eq
    ddd6:	moveq	r2, #10
	}


	if (n == 0) {
    ddd8:	cbz	r1, de30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ddda:	movs	r5, #33	; 0x21
    dddc:	b.n	dde0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ddde:	uxtb	r5, r7
    dde0:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    dde2:	udiv	r4, r1, r2
    dde6:	mls	r1, r2, r4, r1
    ddea:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ddec:	cmp	r1, #9
    ddee:	add.w	r1, r0, #55	; 0x37
    ddf2:	add.w	r0, r0, #48	; 0x30
    ddf6:	it	hi
    ddf8:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    ddfa:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ddfc:	add	r4, sp, #40	; 0x28
    ddfe:	it	ls
    de00:	uxtbls	r0, r0
    de02:	add	r4, r5
    de04:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    de08:	cmp	r1, #0
    de0a:	bne.n	ddde <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    de0c:	cbz	r3, de1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    de0e:	subs	r5, #1
		buf[i] = '-';
    de10:	add	r3, sp, #40	; 0x28
    de12:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    de14:	uxtb	r5, r5
		buf[i] = '-';
    de16:	add	r3, r5
    de18:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    de1c:	ldr	r3, [r6, #0]
    de1e:	add	r1, sp, #4
    de20:	rsb	r2, r5, #34	; 0x22
    de24:	mov	r0, r6
    de26:	add	r1, r5
    de28:	ldr	r3, [r3, #4]
    de2a:	blx	r3
}
    de2c:	add	sp, #44	; 0x2c
    de2e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    de30:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    de32:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    de34:	strb.w	r2, [sp, #37]	; 0x25
    de38:	b.n	de0c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    de3a:	ldr	r3, [r0, #0]
    de3c:	uxtb	r1, r1
    de3e:	ldr	r3, [r3, #0]
    de40:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    de42:	add	sp, #44	; 0x2c
    de44:	pop	{r4, r5, r6, r7, pc}
    de46:	nop

0000de48 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    de48:	cmp	r1, #0
    de4a:	blt.n	de54 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    de4c:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    de4e:	movs	r2, #10
    de50:	b.w	ddc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    de54:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    de56:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    de58:	movs	r2, #10
    de5a:	b.w	ddc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    de5e:	nop

0000de60 <operator new(unsigned int)>:
    de60:	b.w	e554 <malloc>

0000de64 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    de64:	movs	r0, #4
    de66:	mov	r1, lr
    de68:	tst	r0, r1
    de6a:	beq.n	de74 <_MSP>
    de6c:	mrs	r0, PSP
    de70:	b.w	de7c <HardFault_HandlerC>

0000de74 <_MSP>:
    de74:	mrs	r0, MSP
    de78:	b.w	de7c <HardFault_HandlerC>

0000de7c <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    de7c:	ldr	r3, [pc, #108]	; (deec <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    de7e:	movs	r1, #5
    de80:	ldr	r2, [pc, #108]	; (def0 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    de82:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    de84:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    de86:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    de8a:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    de8c:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    de90:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    de92:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    de94:	ldr	r4, [pc, #92]	; (def4 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    de96:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    de98:	ldr	r0, [pc, #92]	; (def8 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    de9a:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    de9c:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    dea0:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    dea4:	ldr	r3, [r4, #0]
    dea6:	cmp	r3, r0
    dea8:	bls.n	deb0 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    deaa:	ldr	r0, [pc, #80]	; (defc <HardFault_HandlerC+0x80>)
    deac:	bl	c16c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    deb0:	ldr	r5, [pc, #56]	; (deec <HardFault_HandlerC+0x70>)
    deb2:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    deb4:	movs	r0, #0
    deb6:	ldr	r2, [pc, #72]	; (df00 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    deb8:	ldr	r1, [pc, #72]	; (df04 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    deba:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    debe:	str	r0, [sp, #4]
    dec0:	ldr	r3, [sp, #4]
    dec2:	cmp	r3, r2
    dec4:	bhi.n	ded2 <HardFault_HandlerC+0x56>
    dec6:	ldr	r3, [sp, #4]
    dec8:	adds	r3, #1
    deca:	str	r3, [sp, #4]
    decc:	ldr	r3, [sp, #4]
    dece:	cmp	r3, r2
    ded0:	bls.n	dec6 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    ded2:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    ded6:	str	r0, [sp, #4]
    ded8:	ldr	r3, [sp, #4]
    deda:	cmp	r3, r1
    dedc:	bhi.n	deba <HardFault_HandlerC+0x3e>
    dede:	ldr	r3, [sp, #4]
    dee0:	adds	r3, #1
    dee2:	str	r3, [sp, #4]
    dee4:	ldr	r3, [sp, #4]
    dee6:	cmp	r3, r1
    dee8:	bls.n	dede <HardFault_HandlerC+0x62>
    deea:	b.n	deba <HardFault_HandlerC+0x3e>
    deec:	.word	0x401bc000
    def0:	.word	0x401f8000
    def4:	.word	0x20000df4
    def8:	.word	0x23c345ff
    defc:	.word	0x11e1a300
    df00:	.word	0x000f423f
    df04:	.word	0x0089543f

0000df08 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    df08:	ldr	r2, [pc, #36]	; (df30 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    df0a:	push	{r3, lr}
        char *prev = __brkval;
    df0c:	ldr	r3, [r2, #0]
        if (incr != 0) {
    df0e:	cbz	r0, df1a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    df10:	add	r0, r3
    df12:	ldr	r1, [pc, #32]	; (df34 <_sbrk+0x2c>)
    df14:	cmp	r0, r1
    df16:	bhi.n	df1e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    df18:	str	r0, [r2, #0]
        }
        return prev;
}
    df1a:	mov	r0, r3
    df1c:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    df1e:	bl	e4f8 <__errno>
    df22:	movs	r2, #12
                        return (void *)-1;
    df24:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    df28:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    df2a:	mov	r0, r3
    df2c:	pop	{r3, pc}
    df2e:	nop
    df30:	.word	0x20000f1c
    df34:	.word	0x20280000

0000df38 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    df38:	push	{r4, r5, r6, r7}
    df3a:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    df3c:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    df3e:	mov	r7, r6
    df40:	b.n	df44 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    df42:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    df44:	udiv	r3, r0, r2
    df48:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    df4c:	add.w	r4, r0, #55	; 0x37
    df50:	cmp	r0, #9
    df52:	add.w	r0, r0, #48	; 0x30
    df56:	uxtb	r4, r4
    df58:	it	ls
    df5a:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    df5c:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    df5e:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    df62:	cmp	r3, #0
    df64:	bne.n	df42 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    df66:	adds	r2, r1, r5
    df68:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    df6a:	cbz	r5, df80 <ultoa+0x48>
    df6c:	adds	r3, #1
		t = buf[j];
    df6e:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    df72:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df74:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    df76:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df78:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    df7a:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    df7e:	blt.n	df6c <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    df80:	mov	r0, r1
    df82:	pop	{r4, r5, r6, r7}
    df84:	bx	lr
    df86:	nop

0000df88 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    df88:	ldr	r0, [pc, #656]	; (e21c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    df8a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    df8e:	ldr	r3, [pc, #656]	; (e220 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    df90:	ldr	r2, [r0, #120]	; 0x78
    df92:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    df96:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    df98:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    df9a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    df9c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dfa0:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfa4:	ldr	r4, [pc, #636]	; (e224 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dfa6:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    dfaa:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dfac:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfb0:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    dfb2:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dfb4:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dfb8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    dfbc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    dfc0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    dfc4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    dfc8:	ldrh.w	r0, [r3, #392]	; 0x188
    dfcc:	uxth	r0, r0
    dfce:	orr.w	r0, r0, #240	; 0xf0
    dfd2:	strh.w	r0, [r3, #392]	; 0x188
    dfd6:	add.w	r0, r1, r1, lsl #1
    dfda:	ldr	r3, [pc, #580]	; (e220 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    dfdc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    dfde:	movs	r5, #0
    dfe0:	lsls	r0, r0, #5
    dfe2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    dfe4:	cmp	r1, #4
    dfe6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dfe8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dfec:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    dfee:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    dff0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    dff2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    dff4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    dff6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    dff8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    dffa:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    dffc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    dffe:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e000:	bne.n	dfd6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e002:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e006:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e00a:	ldr	r3, [pc, #540]	; (e228 <pwm_init+0x2a0>)
    e00c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e010:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e012:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e014:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e018:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e01a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e01e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e022:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e026:	ldrh.w	r0, [r4, #392]	; 0x188
    e02a:	uxth	r0, r0
    e02c:	orr.w	r0, r0, #3840	; 0xf00
    e030:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e034:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e038:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e03c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e040:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e044:	ldrh.w	r0, [r3, #392]	; 0x188
    e048:	uxth	r0, r0
    e04a:	orr.w	r0, r0, #240	; 0xf0
    e04e:	strh.w	r0, [r3, #392]	; 0x188
    e052:	add.w	r0, r1, r1, lsl #1
    e056:	ldr	r3, [pc, #464]	; (e228 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    e058:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e05a:	movs	r5, #0
    e05c:	lsls	r0, r0, #5
    e05e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e060:	cmp	r1, #4
    e062:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e064:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e066:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e06a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e06c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e06e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e070:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e072:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    e074:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e076:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e078:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e07a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e07c:	bne.n	e052 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e07e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e082:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e086:	ldr	r3, [pc, #420]	; (e22c <pwm_init+0x2a4>)
    e088:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e08c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e08e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e090:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e094:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e096:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e09a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e09e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e0a2:	ldrh.w	r0, [r4, #392]	; 0x188
    e0a6:	uxth	r0, r0
    e0a8:	orr.w	r0, r0, #3840	; 0xf00
    e0ac:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e0b0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e0b4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e0b8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e0bc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e0c0:	ldrh.w	r0, [r3, #392]	; 0x188
    e0c4:	uxth	r0, r0
    e0c6:	orr.w	r0, r0, #240	; 0xf0
    e0ca:	strh.w	r0, [r3, #392]	; 0x188
    e0ce:	add.w	r0, r1, r1, lsl #1
    e0d2:	ldr	r3, [pc, #344]	; (e22c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    e0d4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e0d6:	movs	r5, #0
    e0d8:	lsls	r0, r0, #5
    e0da:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e0dc:	cmp	r1, #4
    e0de:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e0e0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e0e2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e0e6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e0e8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e0ea:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e0ec:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e0ee:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    e0f0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e0f2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e0f4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e0f6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e0f8:	bne.n	e0ce <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e0fa:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e0fe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e102:	ldr	r3, [pc, #300]	; (e230 <pwm_init+0x2a8>)
    e104:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e108:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e10a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e10c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    e110:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e112:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e116:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e11a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e11e:	ldrh.w	r0, [r4, #392]	; 0x188
    e122:	uxth	r0, r0
    e124:	orr.w	r0, r0, #3840	; 0xf00
    e128:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e12c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e130:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    e134:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    e138:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e13c:	ldrh.w	r0, [r3, #392]	; 0x188
    e140:	uxth	r0, r0
    e142:	orr.w	r0, r0, #240	; 0xf0
    e146:	strh.w	r0, [r3, #392]	; 0x188
    e14a:	add.w	r0, r1, r1, lsl #1
    e14e:	ldr	r3, [pc, #224]	; (e230 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    e150:	adds	r1, #1
    e152:	lsls	r0, r0, #5
    e154:	mov	r4, r3
    e156:	cmp	r1, #4
    e158:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e15a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e15c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e160:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e162:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e164:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e166:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e168:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    e16a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e16c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e16e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e170:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    e172:	bne.n	e14a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e174:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e178:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e17a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e17c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e180:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e182:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e186:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e188:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e18c:	orrs	r3, r7
    e18e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e192:	ldrh.w	r3, [r4, #392]	; 0x188
    e196:	uxth	r3, r3
    e198:	orr.w	r3, r3, #3840	; 0xf00
    e19c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1a0:	lsls	r0, r2, #5
    e1a2:	ldr	r3, [pc, #144]	; (e234 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1a4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e1a6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1a8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e1aa:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e1ac:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1ae:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1b0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1b2:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e1b6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e1b8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1ba:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1bc:	bne.n	e1a0 <pwm_init+0x218>
    e1be:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1c0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1c2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1c6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1ca:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1cc:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1d0:	lsls	r0, r2, #5
    e1d2:	ldr	r3, [pc, #100]	; (e238 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1d4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e1d6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1d8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e1da:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e1dc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1de:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1e0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1e2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e1e4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e1e6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1e8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e1ea:	bne.n	e1d0 <pwm_init+0x248>
    e1ec:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e1ee:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e1f0:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e1f4:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1f8:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e1fa:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    e1fe:	lsls	r0, r2, #5
    e200:	ldr	r3, [pc, #56]	; (e23c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e202:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e204:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e206:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    e208:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e20a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e20c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e20e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e210:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e212:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    e214:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e216:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    e218:	bne.n	e1fe <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    e21a:	pop	{r4, r5, r6, r7, pc}
    e21c:	.word	0x400fc000
    e220:	.word	0x403dc000
    e224:	.word	0xfc030000
    e228:	.word	0x403e0000
    e22c:	.word	0x403e4000
    e230:	.word	0x403e8000
    e234:	.word	0x401dc000
    e238:	.word	0x401e0000
    e23c:	.word	0x401e4000

0000e240 <sqrt>:
    e240:	push	{lr}
    e242:	vpush	{d8}
    e246:	vmov.f64	d8, d0
    e24a:	sub	sp, #44	; 0x2c
    e24c:	bl	e2e8 <__ieee754_sqrt>
    e250:	ldr	r3, [pc, #140]	; (e2e0 <sqrt+0xa0>)
    e252:	ldrsb.w	r3, [r3]
    e256:	adds	r2, r3, #1
    e258:	beq.n	e272 <sqrt+0x32>
    e25a:	vcmp.f64	d8, d8
    e25e:	vmrs	APSR_nzcv, fpscr
    e262:	bvs.n	e272 <sqrt+0x32>
    e264:	vldr	d7, [pc, #112]	; e2d8 <sqrt+0x98>
    e268:	vcmpe.f64	d8, d7
    e26c:	vmrs	APSR_nzcv, fpscr
    e270:	bmi.n	e27c <sqrt+0x3c>
    e272:	add	sp, #44	; 0x2c
    e274:	vpop	{d8}
    e278:	ldr.w	pc, [sp], #4
    e27c:	movs	r2, #1
    e27e:	ldr	r1, [pc, #100]	; (e2e4 <sqrt+0xa4>)
    e280:	str	r2, [sp, #0]
    e282:	movs	r2, #0
    e284:	vstr	d8, [sp, #16]
    e288:	vstr	d8, [sp, #8]
    e28c:	str	r1, [sp, #4]
    e28e:	str	r2, [sp, #32]
    e290:	cbz	r3, e2b8 <sqrt+0x78>
    e292:	vdiv.f64	d6, d7, d7
    e296:	cmp	r3, #2
    e298:	vstr	d6, [sp, #24]
    e29c:	bne.n	e2bc <sqrt+0x7c>
    e29e:	bl	e4f8 <__errno>
    e2a2:	movs	r3, #33	; 0x21
    e2a4:	str	r3, [r0, #0]
    e2a6:	ldr	r3, [sp, #32]
    e2a8:	cbnz	r3, e2c8 <sqrt+0x88>
    e2aa:	vldr	d0, [sp, #24]
    e2ae:	add	sp, #44	; 0x2c
    e2b0:	vpop	{d8}
    e2b4:	ldr.w	pc, [sp], #4
    e2b8:	vstr	d7, [sp, #24]
    e2bc:	mov	r0, sp
    e2be:	bl	e46c <matherr>
    e2c2:	cmp	r0, #0
    e2c4:	bne.n	e2a6 <sqrt+0x66>
    e2c6:	b.n	e29e <sqrt+0x5e>
    e2c8:	bl	e4f8 <__errno>
    e2cc:	ldr	r3, [sp, #32]
    e2ce:	str	r3, [r0, #0]
    e2d0:	b.n	e2aa <sqrt+0x6a>
    e2d2:	nop
    e2d4:	nop.w
	...
    e2e0:	.word	0x20000f20
    e2e4:	.word	0x20000958

0000e2e8 <__ieee754_sqrt>:
    e2e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2ec:	sub	sp, #8
    e2ee:	vstr	d0, [sp]
    e2f2:	ldr	r1, [pc, #372]	; (e468 <__ieee754_sqrt+0x180>)
    e2f4:	ldr	r3, [sp, #4]
    e2f6:	ldr	r0, [sp, #0]
    e2f8:	mov	r4, r1
    e2fa:	ands	r1, r3
    e2fc:	cmp	r1, r4
    e2fe:	beq.w	e432 <__ieee754_sqrt+0x14a>
    e302:	cmp	r3, #0
    e304:	mov	r2, r0
    e306:	ble.n	e3f8 <__ieee754_sqrt+0x110>
    e308:	asrs	r7, r3, #20
    e30a:	beq.w	e412 <__ieee754_sqrt+0x12a>
    e30e:	subw	r7, r7, #1023	; 0x3ff
    e312:	ubfx	r3, r3, #0, #20
    e316:	lsls	r1, r7, #31
    e318:	orr.w	r3, r3, #1048576	; 0x100000
    e31c:	bmi.n	e3ee <__ieee754_sqrt+0x106>
    e31e:	add.w	r1, r3, r2, lsr #31
    e322:	movs	r6, #0
    e324:	add	r3, r1
    e326:	asrs	r7, r7, #1
    e328:	lsls	r2, r2, #1
    e32a:	mov	lr, r6
    e32c:	movs	r0, #22
    e32e:	mov.w	r1, #2097152	; 0x200000
    e332:	add.w	r4, lr, r1
    e336:	cmp	r4, r3
    e338:	mov.w	r5, r2, lsr #31
    e33c:	mov.w	r2, r2, lsl #1
    e340:	bgt.n	e34a <__ieee754_sqrt+0x62>
    e342:	subs	r3, r3, r4
    e344:	add.w	lr, r4, r1
    e348:	add	r6, r1
    e34a:	subs	r0, #1
    e34c:	add.w	r3, r5, r3, lsl #1
    e350:	mov.w	r1, r1, lsr #1
    e354:	bne.n	e332 <__ieee754_sqrt+0x4a>
    e356:	mov	ip, r0
    e358:	movs	r4, #32
    e35a:	mov.w	r1, #2147483648	; 0x80000000
    e35e:	b.n	e374 <__ieee754_sqrt+0x8c>
    e360:	beq.n	e3a4 <__ieee754_sqrt+0xbc>
    e362:	add.w	r5, r3, r2, lsr #31
    e366:	subs	r4, #1
    e368:	mov.w	r1, r1, lsr #1
    e36c:	add	r3, r5
    e36e:	mov.w	r2, r2, lsl #1
    e372:	beq.n	e3b6 <__ieee754_sqrt+0xce>
    e374:	cmp	lr, r3
    e376:	add.w	r5, r1, ip
    e37a:	bge.n	e360 <__ieee754_sqrt+0x78>
    e37c:	cmp	r5, #0
    e37e:	add.w	ip, r5, r1
    e382:	blt.n	e398 <__ieee754_sqrt+0xb0>
    e384:	mov	r8, lr
    e386:	cmp	r5, r2
    e388:	rsb	r3, lr, r3
    e38c:	bls.n	e390 <__ieee754_sqrt+0xa8>
    e38e:	subs	r3, #1
    e390:	subs	r2, r2, r5
    e392:	add	r0, r1
    e394:	mov	lr, r8
    e396:	b.n	e362 <__ieee754_sqrt+0x7a>
    e398:	cmp.w	ip, #0
    e39c:	blt.n	e384 <__ieee754_sqrt+0x9c>
    e39e:	add.w	r8, lr, #1
    e3a2:	b.n	e386 <__ieee754_sqrt+0x9e>
    e3a4:	cmp	r5, r2
    e3a6:	bhi.n	e3de <__ieee754_sqrt+0xf6>
    e3a8:	cmp	r5, #0
    e3aa:	add.w	ip, r5, r1
    e3ae:	blt.n	e442 <__ieee754_sqrt+0x15a>
    e3b0:	mov	r8, r3
    e3b2:	movs	r3, #0
    e3b4:	b.n	e390 <__ieee754_sqrt+0xa8>
    e3b6:	orrs	r3, r2
    e3b8:	bne.n	e3e2 <__ieee754_sqrt+0xfa>
    e3ba:	lsrs	r0, r0, #1
    e3bc:	asrs	r1, r6, #1
    e3be:	lsls	r3, r6, #31
    e3c0:	add.w	r1, r1, #1069547520	; 0x3fc00000
    e3c4:	add.w	r1, r1, #2097152	; 0x200000
    e3c8:	it	mi
    e3ca:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    e3ce:	add.w	r3, r1, r7, lsl #20
    e3d2:	mov	r2, r0
    e3d4:	vmov	d0, r2, r3
    e3d8:	add	sp, #8
    e3da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3de:	mov	r3, lr
    e3e0:	b.n	e362 <__ieee754_sqrt+0x7a>
    e3e2:	adds	r2, r0, #1
    e3e4:	beq.n	e44a <__ieee754_sqrt+0x162>
    e3e6:	and.w	r3, r0, #1
    e3ea:	add	r0, r3
    e3ec:	b.n	e3ba <__ieee754_sqrt+0xd2>
    e3ee:	lsls	r3, r3, #1
    e3f0:	add.w	r3, r3, r2, lsr #31
    e3f4:	lsls	r2, r2, #1
    e3f6:	b.n	e31e <__ieee754_sqrt+0x36>
    e3f8:	bic.w	r1, r3, #2147483648	; 0x80000000
    e3fc:	orrs	r1, r0
    e3fe:	beq.n	e43c <__ieee754_sqrt+0x154>
    e400:	cbnz	r3, e45a <__ieee754_sqrt+0x172>
    e402:	mov	r7, r3
    e404:	lsrs	r3, r2, #11
    e406:	subs	r7, #21
    e408:	lsls	r2, r2, #21
    e40a:	cmp	r3, #0
    e40c:	beq.n	e404 <__ieee754_sqrt+0x11c>
    e40e:	lsls	r5, r3, #11
    e410:	bmi.n	e450 <__ieee754_sqrt+0x168>
    e412:	movs	r1, #0
    e414:	b.n	e418 <__ieee754_sqrt+0x130>
    e416:	mov	r1, r0
    e418:	lsls	r3, r3, #1
    e41a:	lsls	r4, r3, #11
    e41c:	add.w	r0, r1, #1
    e420:	bpl.n	e416 <__ieee754_sqrt+0x12e>
    e422:	rsb	r4, r0, #32
    e426:	lsr.w	r4, r2, r4
    e42a:	orrs	r3, r4
    e42c:	subs	r7, r7, r1
    e42e:	lsls	r2, r0
    e430:	b.n	e30e <__ieee754_sqrt+0x26>
    e432:	vfma.f64	d0, d0, d0
    e436:	add	sp, #8
    e438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e43c:	vldr	d0, [sp]
    e440:	b.n	e3d8 <__ieee754_sqrt+0xf0>
    e442:	cmp.w	ip, #0
    e446:	bge.n	e39e <__ieee754_sqrt+0xb6>
    e448:	b.n	e3b0 <__ieee754_sqrt+0xc8>
    e44a:	adds	r6, #1
    e44c:	mov	r0, r4
    e44e:	b.n	e3bc <__ieee754_sqrt+0xd4>
    e450:	movs	r4, #32
    e452:	mov.w	r1, #4294967295
    e456:	movs	r0, #0
    e458:	b.n	e426 <__ieee754_sqrt+0x13e>
    e45a:	vldr	d7, [sp]
    e45e:	vsub.f64	d7, d7, d7
    e462:	vdiv.f64	d0, d7, d7
    e466:	b.n	e3d8 <__ieee754_sqrt+0xf0>
    e468:	.word	0x7ff00000

0000e46c <matherr>:
    e46c:	movs	r0, #0
    e46e:	bx	lr

0000e470 <__aeabi_atexit>:
    e470:	mov	r3, r1
    e472:	mov	r1, r0
    e474:	mov	r0, r3
    e476:	b.w	e4ec <__cxa_atexit>
    e47a:	nop

0000e47c <calloc>:
    e47c:	ldr	r3, [pc, #8]	; (e488 <calloc+0xc>)
    e47e:	mov	r2, r1
    e480:	mov	r1, r0
    e482:	ldr	r0, [r3, #0]
    e484:	b.w	e48c <_calloc_r>
    e488:	.word	0x20001350

0000e48c <_calloc_r>:
    e48c:	push	{r4, lr}
    e48e:	mul.w	r1, r2, r1
    e492:	bl	e574 <_malloc_r>
    e496:	mov	r4, r0
    e498:	cbz	r0, e4d2 <_calloc_r+0x46>
    e49a:	ldr.w	r2, [r0, #-4]
    e49e:	bic.w	r2, r2, #3
    e4a2:	subs	r2, #4
    e4a4:	cmp	r2, #36	; 0x24
    e4a6:	bhi.n	e4da <_calloc_r+0x4e>
    e4a8:	cmp	r2, #19
    e4aa:	bls.n	e4d6 <_calloc_r+0x4a>
    e4ac:	movs	r3, #0
    e4ae:	cmp	r2, #27
    e4b0:	str	r3, [r0, #0]
    e4b2:	str	r3, [r0, #4]
    e4b4:	bls.n	e4e4 <_calloc_r+0x58>
    e4b6:	cmp	r2, #36	; 0x24
    e4b8:	str	r3, [r0, #8]
    e4ba:	str	r3, [r0, #12]
    e4bc:	iteee	ne
    e4be:	addne.w	r2, r0, #16
    e4c2:	streq	r3, [r0, #16]
    e4c4:	streq	r3, [r0, #20]
    e4c6:	addeq.w	r2, r0, #24
    e4ca:	movs	r3, #0
    e4cc:	str	r3, [r2, #0]
    e4ce:	str	r3, [r2, #4]
    e4d0:	str	r3, [r2, #8]
    e4d2:	mov	r0, r4
    e4d4:	pop	{r4, pc}
    e4d6:	mov	r2, r0
    e4d8:	b.n	e4ca <_calloc_r+0x3e>
    e4da:	movs	r1, #0
    e4dc:	bl	ebac <memset>
    e4e0:	mov	r0, r4
    e4e2:	pop	{r4, pc}
    e4e4:	add.w	r2, r0, #8
    e4e8:	b.n	e4ca <_calloc_r+0x3e>
    e4ea:	nop

0000e4ec <__cxa_atexit>:
    e4ec:	mov	r3, r2
    e4ee:	mov	r2, r1
    e4f0:	mov	r1, r0
    e4f2:	movs	r0, #2
    e4f4:	b.w	f584 <__register_exitproc>

0000e4f8 <__errno>:
    e4f8:	ldr	r3, [pc, #4]	; (e500 <__errno+0x8>)
    e4fa:	ldr	r0, [r3, #0]
    e4fc:	bx	lr
    e4fe:	nop
    e500:	.word	0x20001350

0000e504 <__libc_init_array>:
    e504:	push	{r4, r5, r6, lr}
    e506:	ldr	r6, [pc, #60]	; (e544 <__libc_init_array+0x40>)
    e508:	ldr	r5, [pc, #60]	; (e548 <__libc_init_array+0x44>)
    e50a:	subs	r6, r6, r5
    e50c:	asrs	r6, r6, #2
    e50e:	it	ne
    e510:	movne	r4, #0
    e512:	beq.n	e520 <__libc_init_array+0x1c>
    e514:	adds	r4, #1
    e516:	ldr.w	r3, [r5], #4
    e51a:	blx	r3
    e51c:	cmp	r6, r4
    e51e:	bne.n	e514 <__libc_init_array+0x10>
    e520:	ldr	r6, [pc, #40]	; (e54c <__libc_init_array+0x48>)
    e522:	ldr	r5, [pc, #44]	; (e550 <__libc_init_array+0x4c>)
    e524:	subs	r6, r6, r5
    e526:	bl	f898 <___init_veneer>
    e52a:	asrs	r6, r6, #2
    e52c:	it	ne
    e52e:	movne	r4, #0
    e530:	beq.n	e540 <__libc_init_array+0x3c>
    e532:	adds	r4, #1
    e534:	ldr.w	r3, [r5], #4
    e538:	blx	r3
    e53a:	cmp	r6, r4
    e53c:	bne.n	e532 <__libc_init_array+0x2e>
    e53e:	pop	{r4, r5, r6, pc}
    e540:	pop	{r4, r5, r6, pc}
    e542:	nop
    e544:	.word	0x60001600
    e548:	.word	0x60001600
    e54c:	.word	0x6000160c
    e550:	.word	0x60001600

0000e554 <malloc>:
    e554:	ldr	r3, [pc, #8]	; (e560 <malloc+0xc>)
    e556:	mov	r1, r0
    e558:	ldr	r0, [r3, #0]
    e55a:	b.w	e574 <_malloc_r>
    e55e:	nop
    e560:	.word	0x20001350

0000e564 <free>:
    e564:	ldr	r3, [pc, #8]	; (e570 <free+0xc>)
    e566:	mov	r1, r0
    e568:	ldr	r0, [r3, #0]
    e56a:	b.w	f6c4 <_free_r>
    e56e:	nop
    e570:	.word	0x20001350

0000e574 <_malloc_r>:
    e574:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e578:	add.w	r5, r1, #11
    e57c:	cmp	r5, #22
    e57e:	sub	sp, #12
    e580:	mov	r6, r0
    e582:	bls.w	e6c4 <_malloc_r+0x150>
    e586:	bics.w	r5, r5, #7
    e58a:	bmi.w	e70c <_malloc_r+0x198>
    e58e:	cmp	r1, r5
    e590:	bhi.w	e70c <_malloc_r+0x198>
    e594:	bl	ec48 <__malloc_lock>
    e598:	cmp.w	r5, #504	; 0x1f8
    e59c:	bcc.w	ead8 <_malloc_r+0x564>
    e5a0:	lsrs	r3, r5, #9
    e5a2:	beq.w	e71a <_malloc_r+0x1a6>
    e5a6:	cmp	r3, #4
    e5a8:	bhi.w	e8b2 <_malloc_r+0x33e>
    e5ac:	lsrs	r0, r5, #6
    e5ae:	add.w	lr, r0, #57	; 0x39
    e5b2:	mov.w	r3, lr, lsl #1
    e5b6:	adds	r0, #56	; 0x38
    e5b8:	ldr	r7, [pc, #784]	; (e8cc <_malloc_r+0x358>)
    e5ba:	add.w	r3, r7, r3, lsl #2
    e5be:	sub.w	r1, r3, #8
    e5c2:	ldr	r4, [r3, #4]
    e5c4:	cmp	r1, r4
    e5c6:	bne.n	e5d8 <_malloc_r+0x64>
    e5c8:	b.n	e724 <_malloc_r+0x1b0>
    e5ca:	cmp	r2, #0
    e5cc:	bge.w	e728 <_malloc_r+0x1b4>
    e5d0:	ldr	r4, [r4, #12]
    e5d2:	cmp	r1, r4
    e5d4:	beq.w	e724 <_malloc_r+0x1b0>
    e5d8:	ldr	r3, [r4, #4]
    e5da:	bic.w	r3, r3, #3
    e5de:	subs	r2, r3, r5
    e5e0:	cmp	r2, #15
    e5e2:	ble.n	e5ca <_malloc_r+0x56>
    e5e4:	ldr	r1, [pc, #740]	; (e8cc <_malloc_r+0x358>)
    e5e6:	ldr	r4, [r7, #16]
    e5e8:	add.w	lr, r1, #8
    e5ec:	cmp	r4, lr
    e5ee:	beq.w	e958 <_malloc_r+0x3e4>
    e5f2:	ldr	r3, [r4, #4]
    e5f4:	bic.w	r3, r3, #3
    e5f8:	subs	r2, r3, r5
    e5fa:	cmp	r2, #15
    e5fc:	bgt.w	e932 <_malloc_r+0x3be>
    e600:	cmp	r2, #0
    e602:	str.w	lr, [r1, #20]
    e606:	str.w	lr, [r1, #16]
    e60a:	bge.w	e74a <_malloc_r+0x1d6>
    e60e:	cmp.w	r3, #512	; 0x200
    e612:	bcs.w	e8e4 <_malloc_r+0x370>
    e616:	lsrs	r3, r3, #3
    e618:	add.w	ip, r3, #1
    e61c:	movs	r2, #1
    e61e:	asrs	r3, r3, #2
    e620:	lsl.w	r3, r2, r3
    e624:	ldr	r2, [r1, #4]
    e626:	ldr.w	r8, [r1, ip, lsl #3]
    e62a:	str.w	r8, [r4, #8]
    e62e:	add.w	r9, r1, ip, lsl #3
    e632:	orrs	r2, r3
    e634:	sub.w	r3, r9, #8
    e638:	str	r3, [r4, #12]
    e63a:	str	r2, [r1, #4]
    e63c:	str.w	r4, [r1, ip, lsl #3]
    e640:	str.w	r4, [r8, #12]
    e644:	asrs	r3, r0, #2
    e646:	movs	r4, #1
    e648:	lsls	r4, r3
    e64a:	cmp	r4, r2
    e64c:	bhi.w	e764 <_malloc_r+0x1f0>
    e650:	tst	r4, r2
    e652:	bne.n	e662 <_malloc_r+0xee>
    e654:	bic.w	r0, r0, #3
    e658:	lsls	r4, r4, #1
    e65a:	tst	r4, r2
    e65c:	add.w	r0, r0, #4
    e660:	beq.n	e658 <_malloc_r+0xe4>
    e662:	add.w	r9, r7, r0, lsl #3
    e666:	mov	ip, r9
    e668:	mov	r8, r0
    e66a:	ldr.w	r1, [ip, #12]
    e66e:	cmp	ip, r1
    e670:	bne.n	e682 <_malloc_r+0x10e>
    e672:	b.n	e95c <_malloc_r+0x3e8>
    e674:	cmp	r2, #0
    e676:	bge.w	e97c <_malloc_r+0x408>
    e67a:	ldr	r1, [r1, #12]
    e67c:	cmp	ip, r1
    e67e:	beq.w	e95c <_malloc_r+0x3e8>
    e682:	ldr	r3, [r1, #4]
    e684:	bic.w	r3, r3, #3
    e688:	subs	r2, r3, r5
    e68a:	cmp	r2, #15
    e68c:	ble.n	e674 <_malloc_r+0x100>
    e68e:	mov	r4, r1
    e690:	ldr.w	ip, [r1, #12]
    e694:	ldr.w	r8, [r4, #8]!
    e698:	adds	r3, r1, r5
    e69a:	orr.w	r5, r5, #1
    e69e:	str	r5, [r1, #4]
    e6a0:	orr.w	r1, r2, #1
    e6a4:	str.w	ip, [r8, #12]
    e6a8:	mov	r0, r6
    e6aa:	str.w	r8, [ip, #8]
    e6ae:	str	r3, [r7, #20]
    e6b0:	str	r3, [r7, #16]
    e6b2:	str.w	lr, [r3, #12]
    e6b6:	str.w	lr, [r3, #8]
    e6ba:	str	r1, [r3, #4]
    e6bc:	str	r2, [r3, r2]
    e6be:	bl	ec4c <__malloc_unlock>
    e6c2:	b.n	e704 <_malloc_r+0x190>
    e6c4:	cmp	r1, #16
    e6c6:	bhi.n	e70c <_malloc_r+0x198>
    e6c8:	bl	ec48 <__malloc_lock>
    e6cc:	movs	r5, #16
    e6ce:	movs	r3, #6
    e6d0:	movs	r0, #2
    e6d2:	ldr	r7, [pc, #504]	; (e8cc <_malloc_r+0x358>)
    e6d4:	add.w	r3, r7, r3, lsl #2
    e6d8:	sub.w	r2, r3, #8
    e6dc:	ldr	r4, [r3, #4]
    e6de:	cmp	r4, r2
    e6e0:	beq.w	e96e <_malloc_r+0x3fa>
    e6e4:	ldr	r3, [r4, #4]
    e6e6:	ldr	r1, [r4, #12]
    e6e8:	ldr	r5, [r4, #8]
    e6ea:	bic.w	r3, r3, #3
    e6ee:	add	r3, r4
    e6f0:	mov	r0, r6
    e6f2:	ldr	r2, [r3, #4]
    e6f4:	str	r1, [r5, #12]
    e6f6:	orr.w	r2, r2, #1
    e6fa:	str	r5, [r1, #8]
    e6fc:	str	r2, [r3, #4]
    e6fe:	bl	ec4c <__malloc_unlock>
    e702:	adds	r4, #8
    e704:	mov	r0, r4
    e706:	add	sp, #12
    e708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e70c:	movs	r4, #0
    e70e:	movs	r3, #12
    e710:	mov	r0, r4
    e712:	str	r3, [r6, #0]
    e714:	add	sp, #12
    e716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e71a:	movs	r3, #128	; 0x80
    e71c:	mov.w	lr, #64	; 0x40
    e720:	movs	r0, #63	; 0x3f
    e722:	b.n	e5b8 <_malloc_r+0x44>
    e724:	mov	r0, lr
    e726:	b.n	e5e4 <_malloc_r+0x70>
    e728:	add	r3, r4
    e72a:	ldr	r1, [r4, #12]
    e72c:	ldr	r2, [r3, #4]
    e72e:	ldr	r5, [r4, #8]
    e730:	orr.w	r2, r2, #1
    e734:	str	r1, [r5, #12]
    e736:	mov	r0, r6
    e738:	str	r5, [r1, #8]
    e73a:	str	r2, [r3, #4]
    e73c:	bl	ec4c <__malloc_unlock>
    e740:	adds	r4, #8
    e742:	mov	r0, r4
    e744:	add	sp, #12
    e746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e74a:	add	r3, r4
    e74c:	mov	r0, r6
    e74e:	ldr	r2, [r3, #4]
    e750:	orr.w	r2, r2, #1
    e754:	str	r2, [r3, #4]
    e756:	bl	ec4c <__malloc_unlock>
    e75a:	adds	r4, #8
    e75c:	mov	r0, r4
    e75e:	add	sp, #12
    e760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e764:	ldr	r4, [r7, #8]
    e766:	ldr	r3, [r4, #4]
    e768:	bic.w	r8, r3, #3
    e76c:	cmp	r8, r5
    e76e:	bcc.n	e77a <_malloc_r+0x206>
    e770:	rsb	r3, r5, r8
    e774:	cmp	r3, #15
    e776:	bgt.w	e892 <_malloc_r+0x31e>
    e77a:	ldr	r3, [pc, #340]	; (e8d0 <_malloc_r+0x35c>)
    e77c:	ldr.w	r9, [pc, #352]	; e8e0 <_malloc_r+0x36c>
    e780:	ldr	r2, [r3, #0]
    e782:	ldr.w	r3, [r9]
    e786:	adds	r3, #1
    e788:	add	r2, r5
    e78a:	add.w	sl, r4, r8
    e78e:	beq.w	ea52 <_malloc_r+0x4de>
    e792:	add.w	r2, r2, #4096	; 0x1000
    e796:	adds	r2, #15
    e798:	bic.w	r2, r2, #4080	; 0xff0
    e79c:	bic.w	r2, r2, #15
    e7a0:	mov	r1, r2
    e7a2:	mov	r0, r6
    e7a4:	str	r2, [sp, #4]
    e7a6:	bl	f040 <_sbrk_r>
    e7aa:	cmp.w	r0, #4294967295
    e7ae:	mov	fp, r0
    e7b0:	ldr	r2, [sp, #4]
    e7b2:	beq.w	ea66 <_malloc_r+0x4f2>
    e7b6:	cmp	sl, r0
    e7b8:	bhi.w	e9b4 <_malloc_r+0x440>
    e7bc:	ldr	r3, [pc, #276]	; (e8d4 <_malloc_r+0x360>)
    e7be:	ldr	r1, [r3, #0]
    e7c0:	cmp	sl, fp
    e7c2:	add	r1, r2
    e7c4:	str	r1, [r3, #0]
    e7c6:	beq.w	ea70 <_malloc_r+0x4fc>
    e7ca:	ldr.w	r0, [r9]
    e7ce:	ldr.w	lr, [pc, #272]	; e8e0 <_malloc_r+0x36c>
    e7d2:	adds	r0, #1
    e7d4:	ittet	ne
    e7d6:	rsbne	sl, sl, fp
    e7da:	addne	r1, sl
    e7dc:	streq.w	fp, [lr]
    e7e0:	strne	r1, [r3, #0]
    e7e2:	ands.w	r1, fp, #7
    e7e6:	beq.w	ea18 <_malloc_r+0x4a4>
    e7ea:	rsb	r0, r1, #8
    e7ee:	rsb	r1, r1, #4096	; 0x1000
    e7f2:	add	fp, r0
    e7f4:	adds	r1, #8
    e7f6:	add	r2, fp
    e7f8:	ubfx	r2, r2, #0, #12
    e7fc:	rsb	r9, r2, r1
    e800:	mov	r1, r9
    e802:	mov	r0, r6
    e804:	str	r3, [sp, #4]
    e806:	bl	f040 <_sbrk_r>
    e80a:	adds	r3, r0, #1
    e80c:	ldr	r3, [sp, #4]
    e80e:	beq.w	ea90 <_malloc_r+0x51c>
    e812:	rsb	r2, fp, r0
    e816:	add	r2, r9
    e818:	orr.w	r2, r2, #1
    e81c:	ldr	r1, [r3, #0]
    e81e:	str.w	fp, [r7, #8]
    e822:	add	r1, r9
    e824:	cmp	r4, r7
    e826:	str.w	r2, [fp, #4]
    e82a:	str	r1, [r3, #0]
    e82c:	ldr.w	r9, [pc, #164]	; e8d4 <_malloc_r+0x360>
    e830:	beq.n	e860 <_malloc_r+0x2ec>
    e832:	cmp.w	r8, #15
    e836:	bls.w	ea34 <_malloc_r+0x4c0>
    e83a:	ldr	r2, [r4, #4]
    e83c:	sub.w	r3, r8, #12
    e840:	bic.w	r3, r3, #7
    e844:	adds	r0, r4, r3
    e846:	and.w	r2, r2, #1
    e84a:	mov.w	lr, #5
    e84e:	orrs	r2, r3
    e850:	cmp	r3, #15
    e852:	str	r2, [r4, #4]
    e854:	str.w	lr, [r0, #4]
    e858:	str.w	lr, [r0, #8]
    e85c:	bhi.w	ea98 <_malloc_r+0x524>
    e860:	ldr	r3, [pc, #116]	; (e8d8 <_malloc_r+0x364>)
    e862:	ldr	r4, [r7, #8]
    e864:	ldr	r2, [r3, #0]
    e866:	cmp	r1, r2
    e868:	it	hi
    e86a:	strhi	r1, [r3, #0]
    e86c:	ldr	r3, [pc, #108]	; (e8dc <_malloc_r+0x368>)
    e86e:	ldr	r2, [r3, #0]
    e870:	cmp	r1, r2
    e872:	ldr	r2, [r4, #4]
    e874:	it	hi
    e876:	strhi	r1, [r3, #0]
    e878:	bic.w	r2, r2, #3
    e87c:	cmp	r5, r2
    e87e:	sub.w	r3, r2, r5
    e882:	bhi.n	e888 <_malloc_r+0x314>
    e884:	cmp	r3, #15
    e886:	bgt.n	e892 <_malloc_r+0x31e>
    e888:	mov	r0, r6
    e88a:	bl	ec4c <__malloc_unlock>
    e88e:	movs	r4, #0
    e890:	b.n	e704 <_malloc_r+0x190>
    e892:	adds	r2, r4, r5
    e894:	orr.w	r3, r3, #1
    e898:	orr.w	r5, r5, #1
    e89c:	str	r5, [r4, #4]
    e89e:	mov	r0, r6
    e8a0:	str	r2, [r7, #8]
    e8a2:	str	r3, [r2, #4]
    e8a4:	bl	ec4c <__malloc_unlock>
    e8a8:	adds	r4, #8
    e8aa:	mov	r0, r4
    e8ac:	add	sp, #12
    e8ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8b2:	cmp	r3, #20
    e8b4:	bls.n	e99a <_malloc_r+0x426>
    e8b6:	cmp	r3, #84	; 0x54
    e8b8:	bhi.w	ea04 <_malloc_r+0x490>
    e8bc:	lsrs	r0, r5, #12
    e8be:	add.w	lr, r0, #111	; 0x6f
    e8c2:	mov.w	r3, lr, lsl #1
    e8c6:	adds	r0, #110	; 0x6e
    e8c8:	b.n	e5b8 <_malloc_r+0x44>
    e8ca:	nop
    e8cc:	.word	0x20001354
    e8d0:	.word	0x2000e7f8
    e8d4:	.word	0x2000e7fc
    e8d8:	.word	0x2000e7f4
    e8dc:	.word	0x2000e7f0
    e8e0:	.word	0x20001760
    e8e4:	lsrs	r2, r3, #9
    e8e6:	cmp	r2, #4
    e8e8:	bls.n	e9a8 <_malloc_r+0x434>
    e8ea:	cmp	r2, #20
    e8ec:	bhi.w	ea56 <_malloc_r+0x4e2>
    e8f0:	add.w	r1, r2, #92	; 0x5c
    e8f4:	lsls	r1, r1, #1
    e8f6:	adds	r2, #91	; 0x5b
    e8f8:	add.w	ip, r7, r1, lsl #2
    e8fc:	ldr.w	r1, [r7, r1, lsl #2]
    e900:	ldr.w	r8, [pc, #476]	; eae0 <_malloc_r+0x56c>
    e904:	sub.w	ip, ip, #8
    e908:	cmp	ip, r1
    e90a:	beq.w	ea1e <_malloc_r+0x4aa>
    e90e:	ldr	r2, [r1, #4]
    e910:	bic.w	r2, r2, #3
    e914:	cmp	r3, r2
    e916:	bcs.n	e91e <_malloc_r+0x3aa>
    e918:	ldr	r1, [r1, #8]
    e91a:	cmp	ip, r1
    e91c:	bne.n	e90e <_malloc_r+0x39a>
    e91e:	ldr.w	ip, [r1, #12]
    e922:	ldr	r2, [r7, #4]
    e924:	str.w	ip, [r4, #12]
    e928:	str	r1, [r4, #8]
    e92a:	str.w	r4, [ip, #8]
    e92e:	str	r4, [r1, #12]
    e930:	b.n	e644 <_malloc_r+0xd0>
    e932:	adds	r3, r4, r5
    e934:	orr.w	r7, r2, #1
    e938:	orr.w	r5, r5, #1
    e93c:	str	r5, [r4, #4]
    e93e:	mov	r0, r6
    e940:	str	r3, [r1, #20]
    e942:	str	r3, [r1, #16]
    e944:	str.w	lr, [r3, #12]
    e948:	str.w	lr, [r3, #8]
    e94c:	str	r7, [r3, #4]
    e94e:	str	r2, [r3, r2]
    e950:	adds	r4, #8
    e952:	bl	ec4c <__malloc_unlock>
    e956:	b.n	e704 <_malloc_r+0x190>
    e958:	ldr	r2, [r1, #4]
    e95a:	b.n	e644 <_malloc_r+0xd0>
    e95c:	add.w	r8, r8, #1
    e960:	tst.w	r8, #3
    e964:	add.w	ip, ip, #8
    e968:	bne.w	e66a <_malloc_r+0xf6>
    e96c:	b.n	e9d0 <_malloc_r+0x45c>
    e96e:	ldr	r4, [r3, #12]
    e970:	cmp	r3, r4
    e972:	it	eq
    e974:	addeq	r0, #2
    e976:	beq.w	e5e4 <_malloc_r+0x70>
    e97a:	b.n	e6e4 <_malloc_r+0x170>
    e97c:	add	r3, r1
    e97e:	mov	r4, r1
    e980:	ldr	r2, [r3, #4]
    e982:	ldr	r1, [r1, #12]
    e984:	ldr.w	r5, [r4, #8]!
    e988:	orr.w	r2, r2, #1
    e98c:	str	r2, [r3, #4]
    e98e:	mov	r0, r6
    e990:	str	r1, [r5, #12]
    e992:	str	r5, [r1, #8]
    e994:	bl	ec4c <__malloc_unlock>
    e998:	b.n	e704 <_malloc_r+0x190>
    e99a:	add.w	lr, r3, #92	; 0x5c
    e99e:	add.w	r0, r3, #91	; 0x5b
    e9a2:	mov.w	r3, lr, lsl #1
    e9a6:	b.n	e5b8 <_malloc_r+0x44>
    e9a8:	lsrs	r2, r3, #6
    e9aa:	add.w	r1, r2, #57	; 0x39
    e9ae:	lsls	r1, r1, #1
    e9b0:	adds	r2, #56	; 0x38
    e9b2:	b.n	e8f8 <_malloc_r+0x384>
    e9b4:	cmp	r4, r7
    e9b6:	ldr	r3, [pc, #296]	; (eae0 <_malloc_r+0x56c>)
    e9b8:	beq.w	e7bc <_malloc_r+0x248>
    e9bc:	ldr	r4, [r3, #8]
    e9be:	ldr	r2, [r4, #4]
    e9c0:	bic.w	r2, r2, #3
    e9c4:	b.n	e87c <_malloc_r+0x308>
    e9c6:	ldr.w	r3, [r9], #-8
    e9ca:	cmp	r9, r3
    e9cc:	bne.w	ead4 <_malloc_r+0x560>
    e9d0:	tst.w	r0, #3
    e9d4:	add.w	r0, r0, #4294967295
    e9d8:	bne.n	e9c6 <_malloc_r+0x452>
    e9da:	ldr	r3, [r7, #4]
    e9dc:	bic.w	r3, r3, r4
    e9e0:	str	r3, [r7, #4]
    e9e2:	lsls	r4, r4, #1
    e9e4:	cmp	r4, r3
    e9e6:	bhi.w	e764 <_malloc_r+0x1f0>
    e9ea:	cmp	r4, #0
    e9ec:	beq.w	e764 <_malloc_r+0x1f0>
    e9f0:	tst	r4, r3
    e9f2:	mov	r0, r8
    e9f4:	bne.w	e662 <_malloc_r+0xee>
    e9f8:	lsls	r4, r4, #1
    e9fa:	tst	r4, r3
    e9fc:	add.w	r0, r0, #4
    ea00:	beq.n	e9f8 <_malloc_r+0x484>
    ea02:	b.n	e662 <_malloc_r+0xee>
    ea04:	cmp.w	r3, #340	; 0x154
    ea08:	bhi.n	ea3c <_malloc_r+0x4c8>
    ea0a:	lsrs	r0, r5, #15
    ea0c:	add.w	lr, r0, #120	; 0x78
    ea10:	mov.w	r3, lr, lsl #1
    ea14:	adds	r0, #119	; 0x77
    ea16:	b.n	e5b8 <_malloc_r+0x44>
    ea18:	mov.w	r1, #4096	; 0x1000
    ea1c:	b.n	e7f6 <_malloc_r+0x282>
    ea1e:	movs	r1, #1
    ea20:	ldr.w	r3, [r8, #4]
    ea24:	asrs	r2, r2, #2
    ea26:	lsl.w	r2, r1, r2
    ea2a:	orrs	r2, r3
    ea2c:	str.w	r2, [r8, #4]
    ea30:	mov	r1, ip
    ea32:	b.n	e924 <_malloc_r+0x3b0>
    ea34:	movs	r3, #1
    ea36:	str.w	r3, [fp, #4]
    ea3a:	b.n	e888 <_malloc_r+0x314>
    ea3c:	movw	r2, #1364	; 0x554
    ea40:	cmp	r3, r2
    ea42:	bhi.n	ea86 <_malloc_r+0x512>
    ea44:	lsrs	r0, r5, #18
    ea46:	add.w	lr, r0, #125	; 0x7d
    ea4a:	mov.w	r3, lr, lsl #1
    ea4e:	adds	r0, #124	; 0x7c
    ea50:	b.n	e5b8 <_malloc_r+0x44>
    ea52:	adds	r2, #16
    ea54:	b.n	e7a0 <_malloc_r+0x22c>
    ea56:	cmp	r2, #84	; 0x54
    ea58:	bhi.n	eaa8 <_malloc_r+0x534>
    ea5a:	lsrs	r2, r3, #12
    ea5c:	add.w	r1, r2, #111	; 0x6f
    ea60:	lsls	r1, r1, #1
    ea62:	adds	r2, #110	; 0x6e
    ea64:	b.n	e8f8 <_malloc_r+0x384>
    ea66:	ldr	r4, [r7, #8]
    ea68:	ldr	r2, [r4, #4]
    ea6a:	bic.w	r2, r2, #3
    ea6e:	b.n	e87c <_malloc_r+0x308>
    ea70:	ubfx	r0, sl, #0, #12
    ea74:	cmp	r0, #0
    ea76:	bne.w	e7ca <_malloc_r+0x256>
    ea7a:	add	r2, r8
    ea7c:	ldr	r3, [r7, #8]
    ea7e:	orr.w	r2, r2, #1
    ea82:	str	r2, [r3, #4]
    ea84:	b.n	e860 <_malloc_r+0x2ec>
    ea86:	movs	r3, #254	; 0xfe
    ea88:	mov.w	lr, #127	; 0x7f
    ea8c:	movs	r0, #126	; 0x7e
    ea8e:	b.n	e5b8 <_malloc_r+0x44>
    ea90:	movs	r2, #1
    ea92:	mov.w	r9, #0
    ea96:	b.n	e81c <_malloc_r+0x2a8>
    ea98:	add.w	r1, r4, #8
    ea9c:	mov	r0, r6
    ea9e:	bl	f6c4 <_free_r>
    eaa2:	ldr.w	r1, [r9]
    eaa6:	b.n	e860 <_malloc_r+0x2ec>
    eaa8:	cmp.w	r2, #340	; 0x154
    eaac:	bhi.n	eaba <_malloc_r+0x546>
    eaae:	lsrs	r2, r3, #15
    eab0:	add.w	r1, r2, #120	; 0x78
    eab4:	lsls	r1, r1, #1
    eab6:	adds	r2, #119	; 0x77
    eab8:	b.n	e8f8 <_malloc_r+0x384>
    eaba:	movw	r1, #1364	; 0x554
    eabe:	cmp	r2, r1
    eac0:	bhi.n	eace <_malloc_r+0x55a>
    eac2:	lsrs	r2, r3, #18
    eac4:	add.w	r1, r2, #125	; 0x7d
    eac8:	lsls	r1, r1, #1
    eaca:	adds	r2, #124	; 0x7c
    eacc:	b.n	e8f8 <_malloc_r+0x384>
    eace:	movs	r1, #254	; 0xfe
    ead0:	movs	r2, #126	; 0x7e
    ead2:	b.n	e8f8 <_malloc_r+0x384>
    ead4:	ldr	r3, [r7, #4]
    ead6:	b.n	e9e2 <_malloc_r+0x46e>
    ead8:	lsrs	r0, r5, #3
    eada:	adds	r3, r0, #1
    eadc:	lsls	r3, r3, #1
    eade:	b.n	e6d2 <_malloc_r+0x15e>
    eae0:	.word	0x20001354

0000eae4 <memmove>:
    eae4:	cmp	r0, r1
    eae6:	push	{r4, r5, r6, r7, lr}
    eae8:	bls.n	eb06 <memmove+0x22>
    eaea:	adds	r3, r1, r2
    eaec:	cmp	r0, r3
    eaee:	bcs.n	eb06 <memmove+0x22>
    eaf0:	adds	r1, r0, r2
    eaf2:	cmp	r2, #0
    eaf4:	beq.n	eb9a <memmove+0xb6>
    eaf6:	subs	r2, r3, r2
    eaf8:	ldrb.w	r4, [r3, #-1]!
    eafc:	strb.w	r4, [r1, #-1]!
    eb00:	cmp	r3, r2
    eb02:	bne.n	eaf8 <memmove+0x14>
    eb04:	pop	{r4, r5, r6, r7, pc}
    eb06:	cmp	r2, #15
    eb08:	bls.n	eb9c <memmove+0xb8>
    eb0a:	orr.w	r3, r1, r0
    eb0e:	lsls	r3, r3, #30
    eb10:	bne.n	eba0 <memmove+0xbc>
    eb12:	add.w	r4, r0, #16
    eb16:	add.w	r3, r1, #16
    eb1a:	mov	r5, r2
    eb1c:	ldr.w	r6, [r3, #-16]
    eb20:	str.w	r6, [r4, #-16]
    eb24:	ldr.w	r6, [r3, #-12]
    eb28:	str.w	r6, [r4, #-12]
    eb2c:	ldr.w	r6, [r3, #-8]
    eb30:	str.w	r6, [r4, #-8]
    eb34:	subs	r5, #16
    eb36:	ldr.w	r6, [r3, #-4]
    eb3a:	str.w	r6, [r4, #-4]
    eb3e:	cmp	r5, #15
    eb40:	add.w	r3, r3, #16
    eb44:	add.w	r4, r4, #16
    eb48:	bhi.n	eb1c <memmove+0x38>
    eb4a:	sub.w	r3, r2, #16
    eb4e:	bic.w	r3, r3, #15
    eb52:	and.w	lr, r2, #15
    eb56:	adds	r3, #16
    eb58:	cmp.w	lr, #3
    eb5c:	add	r1, r3
    eb5e:	add	r3, r0
    eb60:	bls.n	eba6 <memmove+0xc2>
    eb62:	subs	r6, r3, #4
    eb64:	mov	r5, r1
    eb66:	mov	r4, lr
    eb68:	subs	r4, #4
    eb6a:	ldr.w	r7, [r5], #4
    eb6e:	str.w	r7, [r6, #4]!
    eb72:	cmp	r4, #3
    eb74:	bhi.n	eb68 <memmove+0x84>
    eb76:	sub.w	r4, lr, #4
    eb7a:	bic.w	r4, r4, #3
    eb7e:	adds	r4, #4
    eb80:	add	r3, r4
    eb82:	add	r1, r4
    eb84:	and.w	r2, r2, #3
    eb88:	cbz	r2, eba4 <memmove+0xc0>
    eb8a:	subs	r3, #1
    eb8c:	add	r2, r1
    eb8e:	ldrb.w	r4, [r1], #1
    eb92:	strb.w	r4, [r3, #1]!
    eb96:	cmp	r2, r1
    eb98:	bne.n	eb8e <memmove+0xaa>
    eb9a:	pop	{r4, r5, r6, r7, pc}
    eb9c:	mov	r3, r0
    eb9e:	b.n	eb88 <memmove+0xa4>
    eba0:	mov	r3, r0
    eba2:	b.n	eb8a <memmove+0xa6>
    eba4:	pop	{r4, r5, r6, r7, pc}
    eba6:	mov	r2, lr
    eba8:	b.n	eb88 <memmove+0xa4>
    ebaa:	nop

0000ebac <memset>:
    ebac:	push	{r4, r5, r6}
    ebae:	lsls	r4, r0, #30
    ebb0:	beq.n	ec40 <memset+0x94>
    ebb2:	subs	r4, r2, #1
    ebb4:	cmp	r2, #0
    ebb6:	beq.n	ec3c <memset+0x90>
    ebb8:	uxtb	r5, r1
    ebba:	mov	r3, r0
    ebbc:	b.n	ebc4 <memset+0x18>
    ebbe:	subs	r2, r4, #1
    ebc0:	cbz	r4, ec3c <memset+0x90>
    ebc2:	mov	r4, r2
    ebc4:	strb.w	r5, [r3], #1
    ebc8:	lsls	r2, r3, #30
    ebca:	bne.n	ebbe <memset+0x12>
    ebcc:	cmp	r4, #3
    ebce:	bls.n	ec2e <memset+0x82>
    ebd0:	uxtb	r5, r1
    ebd2:	orr.w	r5, r5, r5, lsl #8
    ebd6:	cmp	r4, #15
    ebd8:	orr.w	r5, r5, r5, lsl #16
    ebdc:	bls.n	ec12 <memset+0x66>
    ebde:	add.w	r2, r3, #16
    ebe2:	mov	r6, r4
    ebe4:	subs	r6, #16
    ebe6:	cmp	r6, #15
    ebe8:	str.w	r5, [r2, #-16]
    ebec:	str.w	r5, [r2, #-12]
    ebf0:	str.w	r5, [r2, #-8]
    ebf4:	str.w	r5, [r2, #-4]
    ebf8:	add.w	r2, r2, #16
    ebfc:	bhi.n	ebe4 <memset+0x38>
    ebfe:	sub.w	r2, r4, #16
    ec02:	bic.w	r2, r2, #15
    ec06:	and.w	r4, r4, #15
    ec0a:	adds	r2, #16
    ec0c:	cmp	r4, #3
    ec0e:	add	r3, r2
    ec10:	bls.n	ec2e <memset+0x82>
    ec12:	mov	r6, r3
    ec14:	mov	r2, r4
    ec16:	subs	r2, #4
    ec18:	cmp	r2, #3
    ec1a:	str.w	r5, [r6], #4
    ec1e:	bhi.n	ec16 <memset+0x6a>
    ec20:	subs	r2, r4, #4
    ec22:	bic.w	r2, r2, #3
    ec26:	adds	r2, #4
    ec28:	add	r3, r2
    ec2a:	and.w	r4, r4, #3
    ec2e:	cbz	r4, ec3c <memset+0x90>
    ec30:	uxtb	r1, r1
    ec32:	add	r4, r3
    ec34:	strb.w	r1, [r3], #1
    ec38:	cmp	r3, r4
    ec3a:	bne.n	ec34 <memset+0x88>
    ec3c:	pop	{r4, r5, r6}
    ec3e:	bx	lr
    ec40:	mov	r4, r2
    ec42:	mov	r3, r0
    ec44:	b.n	ebcc <memset+0x20>
    ec46:	nop

0000ec48 <__malloc_lock>:
    ec48:	bx	lr
    ec4a:	nop

0000ec4c <__malloc_unlock>:
    ec4c:	bx	lr
    ec4e:	nop

0000ec50 <realloc>:
    ec50:	ldr	r3, [pc, #8]	; (ec5c <realloc+0xc>)
    ec52:	mov	r2, r1
    ec54:	mov	r1, r0
    ec56:	ldr	r0, [r3, #0]
    ec58:	b.w	ec60 <_realloc_r>
    ec5c:	.word	0x20001350

0000ec60 <_realloc_r>:
    ec60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec64:	mov	r7, r2
    ec66:	sub	sp, #12
    ec68:	cmp	r1, #0
    ec6a:	beq.w	edf0 <_realloc_r+0x190>
    ec6e:	mov	r6, r1
    ec70:	mov	r9, r0
    ec72:	add.w	r5, r7, #11
    ec76:	bl	ec48 <__malloc_lock>
    ec7a:	ldr.w	lr, [r6, #-4]
    ec7e:	cmp	r5, #22
    ec80:	bic.w	r4, lr, #3
    ec84:	sub.w	r8, r6, #8
    ec88:	bhi.n	ed0c <_realloc_r+0xac>
    ec8a:	movs	r2, #16
    ec8c:	mov	r5, r2
    ec8e:	cmp	r7, r5
    ec90:	bhi.n	ed16 <_realloc_r+0xb6>
    ec92:	cmp	r4, r2
    ec94:	bge.n	ed82 <_realloc_r+0x122>
    ec96:	ldr	r3, [pc, #804]	; (efbc <_realloc_r+0x35c>)
    ec98:	ldr	r1, [r3, #8]
    ec9a:	add.w	r0, r8, r4
    ec9e:	cmp	r0, r1
    eca0:	ldr	r1, [r0, #4]
    eca2:	beq.w	ee58 <_realloc_r+0x1f8>
    eca6:	bic.w	r3, r1, #1
    ecaa:	add	r3, r0
    ecac:	ldr	r3, [r3, #4]
    ecae:	lsls	r3, r3, #31
    ecb0:	bpl.n	edae <_realloc_r+0x14e>
    ecb2:	tst.w	lr, #1
    ecb6:	beq.n	ed24 <_realloc_r+0xc4>
    ecb8:	mov	r1, r7
    ecba:	mov	r0, r9
    ecbc:	bl	e574 <_malloc_r>
    ecc0:	mov	r7, r0
    ecc2:	cbz	r0, ecfe <_realloc_r+0x9e>
    ecc4:	ldr.w	r3, [r6, #-4]
    ecc8:	bic.w	r3, r3, #1
    eccc:	add	r3, r8
    ecce:	sub.w	r2, r0, #8
    ecd2:	cmp	r2, r3
    ecd4:	beq.w	ef60 <_realloc_r+0x300>
    ecd8:	subs	r2, r4, #4
    ecda:	cmp	r2, #36	; 0x24
    ecdc:	bhi.w	ef42 <_realloc_r+0x2e2>
    ece0:	cmp	r2, #19
    ece2:	bhi.w	eeee <_realloc_r+0x28e>
    ece6:	mov	r3, r0
    ece8:	mov	r2, r6
    ecea:	ldr	r1, [r2, #0]
    ecec:	str	r1, [r3, #0]
    ecee:	ldr	r1, [r2, #4]
    ecf0:	str	r1, [r3, #4]
    ecf2:	ldr	r2, [r2, #8]
    ecf4:	str	r2, [r3, #8]
    ecf6:	mov	r1, r6
    ecf8:	mov	r0, r9
    ecfa:	bl	f6c4 <_free_r>
    ecfe:	mov	r0, r9
    ed00:	bl	ec4c <__malloc_unlock>
    ed04:	mov	r0, r7
    ed06:	add	sp, #12
    ed08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed0c:	bic.w	r5, r5, #7
    ed10:	cmp	r5, #0
    ed12:	mov	r2, r5
    ed14:	bge.n	ec8e <_realloc_r+0x2e>
    ed16:	movs	r3, #12
    ed18:	movs	r0, #0
    ed1a:	str.w	r3, [r9]
    ed1e:	add	sp, #12
    ed20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed24:	ldr.w	r3, [r6, #-8]
    ed28:	rsb	sl, r3, r8
    ed2c:	ldr.w	r3, [sl, #4]
    ed30:	bic.w	ip, r3, #3
    ed34:	add.w	r3, r4, ip
    ed38:	cmp	r3, r2
    ed3a:	blt.n	ecb8 <_realloc_r+0x58>
    ed3c:	mov	r7, sl
    ed3e:	ldr.w	r1, [sl, #12]
    ed42:	ldr.w	r0, [r7, #8]!
    ed46:	subs	r2, r4, #4
    ed48:	cmp	r2, #36	; 0x24
    ed4a:	str	r1, [r0, #12]
    ed4c:	str	r0, [r1, #8]
    ed4e:	bhi.w	ef80 <_realloc_r+0x320>
    ed52:	cmp	r2, #19
    ed54:	bls.w	ef7c <_realloc_r+0x31c>
    ed58:	ldr	r1, [r6, #0]
    ed5a:	str.w	r1, [sl, #8]
    ed5e:	ldr	r1, [r6, #4]
    ed60:	str.w	r1, [sl, #12]
    ed64:	cmp	r2, #27
    ed66:	bhi.w	efc0 <_realloc_r+0x360>
    ed6a:	adds	r6, #8
    ed6c:	add.w	r2, sl, #16
    ed70:	ldr	r1, [r6, #0]
    ed72:	str	r1, [r2, #0]
    ed74:	ldr	r1, [r6, #4]
    ed76:	str	r1, [r2, #4]
    ed78:	ldr	r1, [r6, #8]
    ed7a:	str	r1, [r2, #8]
    ed7c:	mov	r6, r7
    ed7e:	mov	r4, r3
    ed80:	mov	r8, sl
    ed82:	subs	r3, r4, r5
    ed84:	cmp	r3, #15
    ed86:	bhi.n	edc4 <_realloc_r+0x164>
    ed88:	ldr.w	r3, [r8, #4]
    ed8c:	and.w	r3, r3, #1
    ed90:	orrs	r3, r4
    ed92:	add	r4, r8
    ed94:	str.w	r3, [r8, #4]
    ed98:	ldr	r3, [r4, #4]
    ed9a:	orr.w	r3, r3, #1
    ed9e:	str	r3, [r4, #4]
    eda0:	mov	r0, r9
    eda2:	bl	ec4c <__malloc_unlock>
    eda6:	mov	r0, r6
    eda8:	add	sp, #12
    edaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edae:	bic.w	r1, r1, #3
    edb2:	add	r1, r4
    edb4:	cmp	r1, r2
    edb6:	blt.n	edfc <_realloc_r+0x19c>
    edb8:	ldr	r3, [r0, #12]
    edba:	ldr	r2, [r0, #8]
    edbc:	mov	r4, r1
    edbe:	str	r3, [r2, #12]
    edc0:	str	r2, [r3, #8]
    edc2:	b.n	ed82 <_realloc_r+0x122>
    edc4:	ldr.w	r2, [r8, #4]
    edc8:	add.w	r1, r8, r5
    edcc:	and.w	r2, r2, #1
    edd0:	orrs	r5, r2
    edd2:	orr.w	r2, r3, #1
    edd6:	add	r3, r1
    edd8:	str.w	r5, [r8, #4]
    eddc:	str	r2, [r1, #4]
    edde:	ldr	r2, [r3, #4]
    ede0:	orr.w	r2, r2, #1
    ede4:	adds	r1, #8
    ede6:	str	r2, [r3, #4]
    ede8:	mov	r0, r9
    edea:	bl	f6c4 <_free_r>
    edee:	b.n	eda0 <_realloc_r+0x140>
    edf0:	mov	r1, r2
    edf2:	add	sp, #12
    edf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edf8:	b.w	e574 <_malloc_r>
    edfc:	tst.w	lr, #1
    ee00:	bne.w	ecb8 <_realloc_r+0x58>
    ee04:	ldr.w	r3, [r6, #-8]
    ee08:	rsb	sl, r3, r8
    ee0c:	ldr.w	r3, [sl, #4]
    ee10:	bic.w	ip, r3, #3
    ee14:	add.w	lr, r1, ip
    ee18:	cmp	lr, r2
    ee1a:	blt.n	ed34 <_realloc_r+0xd4>
    ee1c:	ldr	r3, [r0, #12]
    ee1e:	ldr	r2, [r0, #8]
    ee20:	mov	r7, sl
    ee22:	str	r3, [r2, #12]
    ee24:	str	r2, [r3, #8]
    ee26:	ldr.w	r1, [r7, #8]!
    ee2a:	ldr.w	r3, [sl, #12]
    ee2e:	str	r3, [r1, #12]
    ee30:	subs	r2, r4, #4
    ee32:	cmp	r2, #36	; 0x24
    ee34:	str	r1, [r3, #8]
    ee36:	bhi.w	ef6c <_realloc_r+0x30c>
    ee3a:	cmp	r2, #19
    ee3c:	bls.n	ef04 <_realloc_r+0x2a4>
    ee3e:	ldr	r3, [r6, #0]
    ee40:	str.w	r3, [sl, #8]
    ee44:	ldr	r3, [r6, #4]
    ee46:	str.w	r3, [sl, #12]
    ee4a:	cmp	r2, #27
    ee4c:	bhi.w	ef90 <_realloc_r+0x330>
    ee50:	adds	r6, #8
    ee52:	add.w	r3, sl, #16
    ee56:	b.n	ef06 <_realloc_r+0x2a6>
    ee58:	bic.w	fp, r1, #3
    ee5c:	add	fp, r4
    ee5e:	add.w	r0, r5, #16
    ee62:	cmp	fp, r0
    ee64:	bge.n	ef1a <_realloc_r+0x2ba>
    ee66:	tst.w	lr, #1
    ee6a:	bne.w	ecb8 <_realloc_r+0x58>
    ee6e:	ldr.w	r1, [r6, #-8]
    ee72:	rsb	sl, r1, r8
    ee76:	ldr.w	r1, [sl, #4]
    ee7a:	bic.w	ip, r1, #3
    ee7e:	add	fp, ip
    ee80:	cmp	r0, fp
    ee82:	bgt.w	ed34 <_realloc_r+0xd4>
    ee86:	mov	r7, sl
    ee88:	ldr.w	r1, [sl, #12]
    ee8c:	ldr.w	r0, [r7, #8]!
    ee90:	subs	r2, r4, #4
    ee92:	cmp	r2, #36	; 0x24
    ee94:	str	r1, [r0, #12]
    ee96:	str	r0, [r1, #8]
    ee98:	bhi.w	f004 <_realloc_r+0x3a4>
    ee9c:	cmp	r2, #19
    ee9e:	bls.w	efec <_realloc_r+0x38c>
    eea2:	ldr	r1, [r6, #0]
    eea4:	str.w	r1, [sl, #8]
    eea8:	ldr	r1, [r6, #4]
    eeaa:	str.w	r1, [sl, #12]
    eeae:	cmp	r2, #27
    eeb0:	bhi.w	f012 <_realloc_r+0x3b2>
    eeb4:	adds	r6, #8
    eeb6:	add.w	r2, sl, #16
    eeba:	ldr	r1, [r6, #0]
    eebc:	str	r1, [r2, #0]
    eebe:	ldr	r1, [r6, #4]
    eec0:	str	r1, [r2, #4]
    eec2:	ldr	r1, [r6, #8]
    eec4:	str	r1, [r2, #8]
    eec6:	add.w	r1, sl, r5
    eeca:	rsb	r2, r5, fp
    eece:	orr.w	r2, r2, #1
    eed2:	str	r1, [r3, #8]
    eed4:	str	r2, [r1, #4]
    eed6:	ldr.w	r3, [sl, #4]
    eeda:	and.w	r3, r3, #1
    eede:	orrs	r5, r3
    eee0:	mov	r0, r9
    eee2:	str.w	r5, [sl, #4]
    eee6:	bl	ec4c <__malloc_unlock>
    eeea:	mov	r0, r7
    eeec:	b.n	eda8 <_realloc_r+0x148>
    eeee:	ldr	r3, [r6, #0]
    eef0:	str	r3, [r0, #0]
    eef2:	ldr	r3, [r6, #4]
    eef4:	str	r3, [r0, #4]
    eef6:	cmp	r2, #27
    eef8:	bhi.n	ef4a <_realloc_r+0x2ea>
    eefa:	add.w	r3, r0, #8
    eefe:	add.w	r2, r6, #8
    ef02:	b.n	ecea <_realloc_r+0x8a>
    ef04:	mov	r3, r7
    ef06:	ldr	r2, [r6, #0]
    ef08:	str	r2, [r3, #0]
    ef0a:	ldr	r2, [r6, #4]
    ef0c:	str	r2, [r3, #4]
    ef0e:	ldr	r2, [r6, #8]
    ef10:	str	r2, [r3, #8]
    ef12:	mov	r6, r7
    ef14:	mov	r4, lr
    ef16:	mov	r8, sl
    ef18:	b.n	ed82 <_realloc_r+0x122>
    ef1a:	add.w	r1, r8, r5
    ef1e:	rsb	fp, r5, fp
    ef22:	orr.w	r2, fp, #1
    ef26:	str	r1, [r3, #8]
    ef28:	str	r2, [r1, #4]
    ef2a:	ldr.w	r3, [r6, #-4]
    ef2e:	and.w	r3, r3, #1
    ef32:	orrs	r5, r3
    ef34:	mov	r0, r9
    ef36:	str.w	r5, [r6, #-4]
    ef3a:	bl	ec4c <__malloc_unlock>
    ef3e:	mov	r0, r6
    ef40:	b.n	eda8 <_realloc_r+0x148>
    ef42:	mov	r1, r6
    ef44:	bl	eae4 <memmove>
    ef48:	b.n	ecf6 <_realloc_r+0x96>
    ef4a:	ldr	r3, [r6, #8]
    ef4c:	str	r3, [r0, #8]
    ef4e:	ldr	r3, [r6, #12]
    ef50:	str	r3, [r0, #12]
    ef52:	cmp	r2, #36	; 0x24
    ef54:	beq.n	efa8 <_realloc_r+0x348>
    ef56:	add.w	r3, r0, #16
    ef5a:	add.w	r2, r6, #16
    ef5e:	b.n	ecea <_realloc_r+0x8a>
    ef60:	ldr.w	r3, [r0, #-4]
    ef64:	bic.w	r3, r3, #3
    ef68:	add	r4, r3
    ef6a:	b.n	ed82 <_realloc_r+0x122>
    ef6c:	mov	r1, r6
    ef6e:	mov	r0, r7
    ef70:	mov	r4, lr
    ef72:	mov	r8, sl
    ef74:	bl	eae4 <memmove>
    ef78:	mov	r6, r7
    ef7a:	b.n	ed82 <_realloc_r+0x122>
    ef7c:	mov	r2, r7
    ef7e:	b.n	ed70 <_realloc_r+0x110>
    ef80:	mov	r1, r6
    ef82:	mov	r0, r7
    ef84:	mov	r4, r3
    ef86:	mov	r8, sl
    ef88:	bl	eae4 <memmove>
    ef8c:	mov	r6, r7
    ef8e:	b.n	ed82 <_realloc_r+0x122>
    ef90:	ldr	r3, [r6, #8]
    ef92:	str.w	r3, [sl, #16]
    ef96:	ldr	r3, [r6, #12]
    ef98:	str.w	r3, [sl, #20]
    ef9c:	cmp	r2, #36	; 0x24
    ef9e:	beq.n	efd8 <_realloc_r+0x378>
    efa0:	adds	r6, #16
    efa2:	add.w	r3, sl, #24
    efa6:	b.n	ef06 <_realloc_r+0x2a6>
    efa8:	ldr	r3, [r6, #16]
    efaa:	str	r3, [r0, #16]
    efac:	ldr	r3, [r6, #20]
    efae:	str	r3, [r0, #20]
    efb0:	add.w	r2, r6, #24
    efb4:	add.w	r3, r0, #24
    efb8:	b.n	ecea <_realloc_r+0x8a>
    efba:	nop
    efbc:	.word	0x20001354
    efc0:	ldr	r1, [r6, #8]
    efc2:	str.w	r1, [sl, #16]
    efc6:	ldr	r1, [r6, #12]
    efc8:	str.w	r1, [sl, #20]
    efcc:	cmp	r2, #36	; 0x24
    efce:	beq.n	eff0 <_realloc_r+0x390>
    efd0:	adds	r6, #16
    efd2:	add.w	r2, sl, #24
    efd6:	b.n	ed70 <_realloc_r+0x110>
    efd8:	ldr	r3, [r6, #16]
    efda:	str.w	r3, [sl, #24]
    efde:	ldr	r3, [r6, #20]
    efe0:	str.w	r3, [sl, #28]
    efe4:	adds	r6, #24
    efe6:	add.w	r3, sl, #32
    efea:	b.n	ef06 <_realloc_r+0x2a6>
    efec:	mov	r2, r7
    efee:	b.n	eeba <_realloc_r+0x25a>
    eff0:	ldr	r2, [r6, #16]
    eff2:	str.w	r2, [sl, #24]
    eff6:	ldr	r2, [r6, #20]
    eff8:	str.w	r2, [sl, #28]
    effc:	adds	r6, #24
    effe:	add.w	r2, sl, #32
    f002:	b.n	ed70 <_realloc_r+0x110>
    f004:	mov	r1, r6
    f006:	mov	r0, r7
    f008:	str	r3, [sp, #4]
    f00a:	bl	eae4 <memmove>
    f00e:	ldr	r3, [sp, #4]
    f010:	b.n	eec6 <_realloc_r+0x266>
    f012:	ldr	r1, [r6, #8]
    f014:	str.w	r1, [sl, #16]
    f018:	ldr	r1, [r6, #12]
    f01a:	str.w	r1, [sl, #20]
    f01e:	cmp	r2, #36	; 0x24
    f020:	beq.n	f02a <_realloc_r+0x3ca>
    f022:	adds	r6, #16
    f024:	add.w	r2, sl, #24
    f028:	b.n	eeba <_realloc_r+0x25a>
    f02a:	ldr	r2, [r6, #16]
    f02c:	str.w	r2, [sl, #24]
    f030:	ldr	r2, [r6, #20]
    f032:	str.w	r2, [sl, #28]
    f036:	adds	r6, #24
    f038:	add.w	r2, sl, #32
    f03c:	b.n	eeba <_realloc_r+0x25a>
    f03e:	nop

0000f040 <_sbrk_r>:
    f040:	push	{r3, r4, r5, lr}
    f042:	ldr	r4, [pc, #28]	; (f060 <_sbrk_r+0x20>)
    f044:	movs	r3, #0
    f046:	mov	r5, r0
    f048:	mov	r0, r1
    f04a:	str	r3, [r4, #0]
    f04c:	bl	df08 <_sbrk>
    f050:	adds	r3, r0, #1
    f052:	beq.n	f056 <_sbrk_r+0x16>
    f054:	pop	{r3, r4, r5, pc}
    f056:	ldr	r3, [r4, #0]
    f058:	cmp	r3, #0
    f05a:	beq.n	f054 <_sbrk_r+0x14>
    f05c:	str	r3, [r5, #0]
    f05e:	pop	{r3, r4, r5, pc}
    f060:	.word	0x200106c0
	...
    f080:	sub.w	r0, r2, r3
    f084:	bx	lr
    f086:	nop

0000f088 <strcmp>:
    f088:	ldrb	r2, [r0, #0]
    f08a:	ldrb	r3, [r1, #0]
    f08c:	cmp	r2, #1
    f08e:	it	cs
    f090:	cmpcs	r2, r3
    f092:	bne.n	f080 <_sbrk_r+0x40>
    f094:	strd	r4, r5, [sp, #-16]!
    f098:	orr.w	r4, r0, r1
    f09c:	strd	r6, r7, [sp, #8]
    f0a0:	mvn.w	ip, #0
    f0a4:	mov.w	r2, r4, lsl #29
    f0a8:	cbz	r2, f0f0 <strcmp+0x68>
    f0aa:	eor.w	r4, r0, r1
    f0ae:	tst.w	r4, #7
    f0b2:	bne.n	f18a <strcmp+0x102>
    f0b4:	and.w	r4, r0, #7
    f0b8:	bic.w	r0, r0, #7
    f0bc:	and.w	r5, r4, #3
    f0c0:	bic.w	r1, r1, #7
    f0c4:	mov.w	r5, r5, lsl #3
    f0c8:	ldrd	r2, r3, [r0], #16
    f0cc:	tst.w	r4, #4
    f0d0:	ldrd	r6, r7, [r1], #16
    f0d4:	lsl.w	r4, ip, r5
    f0d8:	orn	r2, r2, r4
    f0dc:	orn	r6, r6, r4
    f0e0:	beq.n	f0f8 <strcmp+0x70>
    f0e2:	orn	r3, r3, r4
    f0e6:	mov	r2, ip
    f0e8:	orn	r7, r7, r4
    f0ec:	mov	r6, ip
    f0ee:	b.n	f0f8 <strcmp+0x70>
    f0f0:	ldrd	r2, r3, [r0], #16
    f0f4:	ldrd	r6, r7, [r1], #16
    f0f8:	uadd8	r5, r2, ip
    f0fc:	eor.w	r4, r2, r6
    f100:	sel	r4, r4, ip
    f104:	cbnz	r4, f162 <strcmp+0xda>
    f106:	uadd8	r5, r3, ip
    f10a:	eor.w	r5, r3, r7
    f10e:	sel	r5, r5, ip
    f112:	cbnz	r5, f13a <strcmp+0xb2>
    f114:	ldrd	r2, r3, [r0, #-8]
    f118:	ldrd	r6, r7, [r1, #-8]
    f11c:	uadd8	r5, r2, ip
    f120:	eor.w	r4, r2, r6
    f124:	sel	r4, r4, ip
    f128:	uadd8	r5, r3, ip
    f12c:	eor.w	r5, r3, r7
    f130:	sel	r5, r5, ip
    f134:	orrs	r5, r4
    f136:	beq.n	f0f0 <strcmp+0x68>
    f138:	cbnz	r4, f162 <strcmp+0xda>
    f13a:	rev	r5, r5
    f13c:	clz	r4, r5
    f140:	bic.w	r4, r4, #7
    f144:	lsr.w	r1, r7, r4
    f148:	ldrd	r6, r7, [sp, #8]
    f14c:	lsr.w	r3, r3, r4
    f150:	and.w	r0, r3, #255	; 0xff
    f154:	and.w	r1, r1, #255	; 0xff
    f158:	ldrd	r4, r5, [sp], #16
    f15c:	sub.w	r0, r0, r1
    f160:	bx	lr
    f162:	rev	r4, r4
    f164:	clz	r4, r4
    f168:	bic.w	r4, r4, #7
    f16c:	lsr.w	r1, r6, r4
    f170:	ldrd	r6, r7, [sp, #8]
    f174:	lsr.w	r2, r2, r4
    f178:	and.w	r0, r2, #255	; 0xff
    f17c:	and.w	r1, r1, #255	; 0xff
    f180:	ldrd	r4, r5, [sp], #16
    f184:	sub.w	r0, r0, r1
    f188:	bx	lr
    f18a:	tst.w	r4, #3
    f18e:	bne.n	f20a <strcmp+0x182>
    f190:	ands.w	r4, r0, #3
    f194:	bne.n	f1e8 <strcmp+0x160>
    f196:	ldr.w	r2, [r0], #8
    f19a:	ldr.w	r3, [r1], #8
    f19e:	uadd8	r5, r2, ip
    f1a2:	eor.w	r5, r2, r3
    f1a6:	sel	r5, r5, ip
    f1aa:	cbnz	r5, f1c4 <strcmp+0x13c>
    f1ac:	ldr.w	r2, [r0, #-4]
    f1b0:	ldr.w	r3, [r1, #-4]
    f1b4:	uadd8	r5, r2, ip
    f1b8:	eor.w	r5, r2, r3
    f1bc:	sel	r5, r5, ip
    f1c0:	cmp	r5, #0
    f1c2:	beq.n	f196 <strcmp+0x10e>
    f1c4:	rev	r5, r5
    f1c6:	clz	r4, r5
    f1ca:	bic.w	r4, r4, #7
    f1ce:	lsr.w	r1, r3, r4
    f1d2:	lsr.w	r2, r2, r4
    f1d6:	and.w	r0, r2, #255	; 0xff
    f1da:	and.w	r1, r1, #255	; 0xff
    f1de:	ldrd	r4, r5, [sp], #16
    f1e2:	sub.w	r0, r0, r1
    f1e6:	bx	lr
    f1e8:	mov.w	r4, r4, lsl #3
    f1ec:	bic.w	r0, r0, #3
    f1f0:	ldr.w	r2, [r0], #8
    f1f4:	bic.w	r1, r1, #3
    f1f8:	ldr.w	r3, [r1], #8
    f1fc:	lsl.w	r4, ip, r4
    f200:	orn	r2, r2, r4
    f204:	orn	r3, r3, r4
    f208:	b.n	f19e <strcmp+0x116>
    f20a:	ands.w	r4, r0, #3
    f20e:	beq.n	f246 <strcmp+0x1be>
    f210:	sub.w	r1, r1, r4
    f214:	bic.w	r0, r0, #3
    f218:	lsls	r4, r4, #31
    f21a:	ldr.w	r2, [r0], #4
    f21e:	beq.n	f22e <strcmp+0x1a6>
    f220:	bcs.n	f242 <strcmp+0x1ba>
    f222:	ldrb	r3, [r1, #2]
    f224:	uxtb.w	r4, r2, ror #16
    f228:	subs	r4, r4, r3
    f22a:	bne.n	f23a <strcmp+0x1b2>
    f22c:	cbz	r3, f23a <strcmp+0x1b2>
    f22e:	ldrb	r3, [r1, #3]
    f230:	uxtb.w	r4, r2, ror #24
    f234:	subs	r4, r4, r3
    f236:	bne.n	f23a <strcmp+0x1b2>
    f238:	cbnz	r3, f242 <strcmp+0x1ba>
    f23a:	mov	r0, r4
    f23c:	ldr.w	r4, [sp], #16
    f240:	bx	lr
    f242:	add.w	r1, r1, #4
    f246:	ldr.w	r2, [r0], #4
    f24a:	lsls	r4, r1, #31
    f24c:	bic.w	r1, r1, #3
    f250:	ldr.w	r3, [r1], #4
    f254:	bhi.n	f2e8 <strcmp+0x260>
    f256:	bcs.n	f2a2 <strcmp+0x21a>
    f258:	bic.w	r4, r2, #4278190080	; 0xff000000
    f25c:	uadd8	r5, r2, ip
    f260:	eors.w	r5, r4, r3, lsr #8
    f264:	sel	r5, r5, ip
    f268:	bne.n	f280 <strcmp+0x1f8>
    f26a:	cbnz	r5, f286 <strcmp+0x1fe>
    f26c:	ldr.w	r3, [r1], #4
    f270:	eor.w	r4, r4, r2
    f274:	cmp.w	r4, r3, lsl #24
    f278:	bne.n	f298 <strcmp+0x210>
    f27a:	ldr.w	r2, [r0], #4
    f27e:	b.n	f258 <strcmp+0x1d0>
    f280:	mov.w	r3, r3, lsr #8
    f284:	b.n	f332 <strcmp+0x2aa>
    f286:	bics.w	r5, r5, #4278190080	; 0xff000000
    f28a:	bne.n	f328 <strcmp+0x2a0>
    f28c:	ldrb	r0, [r1, #0]
    f28e:	ldrd	r4, r5, [sp], #16
    f292:	rsb	r0, r0, #0
    f296:	bx	lr
    f298:	mov.w	r2, r2, lsr #24
    f29c:	and.w	r3, r3, #255	; 0xff
    f2a0:	b.n	f332 <strcmp+0x2aa>
    f2a2:	and.w	r4, r2, ip, lsr #16
    f2a6:	uadd8	r5, r2, ip
    f2aa:	eors.w	r5, r4, r3, lsr #16
    f2ae:	sel	r5, r5, ip
    f2b2:	bne.n	f2ca <strcmp+0x242>
    f2b4:	cbnz	r5, f2d0 <strcmp+0x248>
    f2b6:	ldr.w	r3, [r1], #4
    f2ba:	eor.w	r4, r4, r2
    f2be:	cmp.w	r4, r3, lsl #16
    f2c2:	bne.n	f2de <strcmp+0x256>
    f2c4:	ldr.w	r2, [r0], #4
    f2c8:	b.n	f2a2 <strcmp+0x21a>
    f2ca:	mov.w	r3, r3, lsr #16
    f2ce:	b.n	f332 <strcmp+0x2aa>
    f2d0:	ands.w	r5, r5, ip, lsr #16
    f2d4:	bne.n	f328 <strcmp+0x2a0>
    f2d6:	ldrh	r3, [r1, #0]
    f2d8:	mov.w	r2, r2, lsr #16
    f2dc:	b.n	f332 <strcmp+0x2aa>
    f2de:	mov.w	r2, r2, lsr #16
    f2e2:	and.w	r3, r3, ip, lsr #16
    f2e6:	b.n	f332 <strcmp+0x2aa>
    f2e8:	and.w	r4, r2, #255	; 0xff
    f2ec:	uadd8	r5, r2, ip
    f2f0:	eors.w	r5, r4, r3, lsr #24
    f2f4:	sel	r5, r5, ip
    f2f8:	bne.n	f310 <strcmp+0x288>
    f2fa:	cbnz	r5, f316 <strcmp+0x28e>
    f2fc:	ldr.w	r3, [r1], #4
    f300:	eor.w	r4, r4, r2
    f304:	cmp.w	r4, r3, lsl #8
    f308:	bne.n	f31e <strcmp+0x296>
    f30a:	ldr.w	r2, [r0], #4
    f30e:	b.n	f2e8 <strcmp+0x260>
    f310:	mov.w	r3, r3, lsr #24
    f314:	b.n	f332 <strcmp+0x2aa>
    f316:	tst.w	r5, #255	; 0xff
    f31a:	bne.n	f328 <strcmp+0x2a0>
    f31c:	ldr	r3, [r1, #0]
    f31e:	mov.w	r2, r2, lsr #8
    f322:	bic.w	r3, r3, #4278190080	; 0xff000000
    f326:	b.n	f332 <strcmp+0x2aa>
    f328:	mov.w	r0, #0
    f32c:	ldrd	r4, r5, [sp], #16
    f330:	bx	lr
    f332:	rev	r2, r2
    f334:	rev	r3, r3
    f336:	uadd8	r4, r2, ip
    f33a:	eor.w	r4, r2, r3
    f33e:	sel	r5, r4, ip
    f342:	clz	r4, r5
    f346:	lsl.w	r2, r2, r4
    f34a:	lsl.w	r3, r3, r4
    f34e:	mov.w	r0, r2, lsr #24
    f352:	ldrd	r4, r5, [sp], #16
    f356:	sub.w	r0, r0, r3, lsr #24
    f35a:	bx	lr

0000f35c <strcpy>:
    f35c:	eor.w	r2, r0, r1
    f360:	mov	ip, r0
    f362:	tst.w	r2, #3
    f366:	bne.n	f408 <strcpy+0xac>
    f368:	tst.w	r1, #3
    f36c:	bne.n	f3d4 <strcpy+0x78>
    f36e:	str.w	r4, [sp, #-4]!
    f372:	tst.w	r1, #4
    f376:	ldr.w	r3, [r1], #4
    f37a:	beq.n	f394 <strcpy+0x38>
    f37c:	sub.w	r2, r3, #16843009	; 0x1010101
    f380:	bics	r2, r3
    f382:	tst.w	r2, #2155905152	; 0x80808080
    f386:	itt	eq
    f388:	streq.w	r3, [ip], #4
    f38c:	ldreq.w	r3, [r1], #4
    f390:	bne.n	f3c0 <strcpy+0x64>
    f392:	nop
    f394:	ldr.w	r4, [r1], #4
    f398:	sub.w	r2, r3, #16843009	; 0x1010101
    f39c:	bics	r2, r3
    f39e:	tst.w	r2, #2155905152	; 0x80808080
    f3a2:	sub.w	r2, r4, #16843009	; 0x1010101
    f3a6:	bne.n	f3c0 <strcpy+0x64>
    f3a8:	str.w	r3, [ip], #4
    f3ac:	bics	r2, r4
    f3ae:	tst.w	r2, #2155905152	; 0x80808080
    f3b2:	itt	eq
    f3b4:	ldreq.w	r3, [r1], #4
    f3b8:	streq.w	r4, [ip], #4
    f3bc:	beq.n	f394 <strcpy+0x38>
    f3be:	mov	r3, r4
    f3c0:	strb.w	r3, [ip], #1
    f3c4:	tst.w	r3, #255	; 0xff
    f3c8:	mov.w	r3, r3, ror #8
    f3cc:	bne.n	f3c0 <strcpy+0x64>
    f3ce:	ldr.w	r4, [sp], #4
    f3d2:	bx	lr
    f3d4:	tst.w	r1, #1
    f3d8:	beq.n	f3e8 <strcpy+0x8c>
    f3da:	ldrb.w	r2, [r1], #1
    f3de:	strb.w	r2, [ip], #1
    f3e2:	cmp	r2, #0
    f3e4:	it	eq
    f3e6:	bxeq	lr
    f3e8:	tst.w	r1, #2
    f3ec:	beq.n	f36e <strcpy+0x12>
    f3ee:	ldrh.w	r2, [r1], #2
    f3f2:	tst.w	r2, #255	; 0xff
    f3f6:	itet	ne
    f3f8:	strhne.w	r2, [ip], #2
    f3fc:	strbeq.w	r2, [ip]
    f400:	tstne.w	r2, #65280	; 0xff00
    f404:	bne.n	f36e <strcpy+0x12>
    f406:	bx	lr
    f408:	ldrb.w	r2, [r1], #1
    f40c:	strb.w	r2, [ip], #1
    f410:	cmp	r2, #0
    f412:	bne.n	f408 <strcpy+0xac>
    f414:	bx	lr
    f416:	nop
	...

0000f440 <strlen>:
    f440:	pld	[r0]
    f444:	strd	r4, r5, [sp, #-8]!
    f448:	bic.w	r1, r0, #7
    f44c:	mvn.w	ip, #0
    f450:	ands.w	r4, r0, #7
    f454:	pld	[r1, #32]
    f458:	bne.w	f4ee <strlen+0xae>
    f45c:	mov.w	r4, #0
    f460:	mvn.w	r0, #7
    f464:	ldrd	r2, r3, [r1]
    f468:	pld	[r1, #64]	; 0x40
    f46c:	add.w	r0, r0, #8
    f470:	uadd8	r2, r2, ip
    f474:	sel	r2, r4, ip
    f478:	uadd8	r3, r3, ip
    f47c:	sel	r3, r2, ip
    f480:	cbnz	r3, f4d6 <strlen+0x96>
    f482:	ldrd	r2, r3, [r1, #8]
    f486:	uadd8	r2, r2, ip
    f48a:	add.w	r0, r0, #8
    f48e:	sel	r2, r4, ip
    f492:	uadd8	r3, r3, ip
    f496:	sel	r3, r2, ip
    f49a:	cbnz	r3, f4d6 <strlen+0x96>
    f49c:	ldrd	r2, r3, [r1, #16]
    f4a0:	uadd8	r2, r2, ip
    f4a4:	add.w	r0, r0, #8
    f4a8:	sel	r2, r4, ip
    f4ac:	uadd8	r3, r3, ip
    f4b0:	sel	r3, r2, ip
    f4b4:	cbnz	r3, f4d6 <strlen+0x96>
    f4b6:	ldrd	r2, r3, [r1, #24]
    f4ba:	add.w	r1, r1, #32
    f4be:	uadd8	r2, r2, ip
    f4c2:	add.w	r0, r0, #8
    f4c6:	sel	r2, r4, ip
    f4ca:	uadd8	r3, r3, ip
    f4ce:	sel	r3, r2, ip
    f4d2:	cmp	r3, #0
    f4d4:	beq.n	f464 <strlen+0x24>
    f4d6:	cmp	r2, #0
    f4d8:	itt	eq
    f4da:	addeq	r0, #4
    f4dc:	moveq	r2, r3
    f4de:	rev	r2, r2
    f4e0:	clz	r2, r2
    f4e4:	ldrd	r4, r5, [sp], #8
    f4e8:	add.w	r0, r0, r2, lsr #3
    f4ec:	bx	lr
    f4ee:	ldrd	r2, r3, [r1]
    f4f2:	and.w	r5, r4, #3
    f4f6:	rsb	r0, r4, #0
    f4fa:	mov.w	r5, r5, lsl #3
    f4fe:	tst.w	r4, #4
    f502:	pld	[r1, #64]	; 0x40
    f506:	lsl.w	r5, ip, r5
    f50a:	orn	r2, r2, r5
    f50e:	itt	ne
    f510:	ornne	r3, r3, r5
    f514:	movne	r2, ip
    f516:	mov.w	r4, #0
    f51a:	b.n	f470 <strlen+0x30>

0000f51c <strncpy>:
    f51c:	orr.w	r3, r0, r1
    f520:	lsls	r3, r3, #30
    f522:	push	{r4, r5, r6}
    f524:	bne.n	f57e <strncpy+0x62>
    f526:	cmp	r2, #3
    f528:	bls.n	f57e <strncpy+0x62>
    f52a:	mov	r4, r1
    f52c:	mov	r3, r0
    f52e:	mov	r1, r4
    f530:	ldr.w	r6, [r4], #4
    f534:	sub.w	r5, r6, #16843009	; 0x1010101
    f538:	bic.w	r5, r5, r6
    f53c:	tst.w	r5, #2155905152	; 0x80808080
    f540:	bne.n	f550 <strncpy+0x34>
    f542:	subs	r2, #4
    f544:	cmp	r2, #3
    f546:	str.w	r6, [r3], #4
    f54a:	mov	r1, r4
    f54c:	bhi.n	f52e <strncpy+0x12>
    f54e:	cbz	r2, f57a <strncpy+0x5e>
    f550:	ldrb	r4, [r1, #0]
    f552:	strb	r4, [r3, #0]
    f554:	subs	r2, #1
    f556:	adds	r3, #1
    f558:	adds	r1, #1
    f55a:	cbz	r4, f56c <strncpy+0x50>
    f55c:	cbz	r2, f57a <strncpy+0x5e>
    f55e:	ldrb.w	r4, [r1], #1
    f562:	strb.w	r4, [r3], #1
    f566:	subs	r2, #1
    f568:	cmp	r4, #0
    f56a:	bne.n	f55c <strncpy+0x40>
    f56c:	cbz	r2, f57a <strncpy+0x5e>
    f56e:	add	r2, r3
    f570:	movs	r1, #0
    f572:	strb.w	r1, [r3], #1
    f576:	cmp	r2, r3
    f578:	bne.n	f572 <strncpy+0x56>
    f57a:	pop	{r4, r5, r6}
    f57c:	bx	lr
    f57e:	mov	r3, r0
    f580:	b.n	f54e <strncpy+0x32>
    f582:	nop

0000f584 <__register_exitproc>:
    f584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f588:	ldr	r4, [pc, #148]	; (f620 <__register_exitproc+0x9c>)
    f58a:	ldr	r5, [r4, #0]
    f58c:	ldr.w	r4, [r5, #328]	; 0x148
    f590:	mov	r6, r0
    f592:	mov	r8, r1
    f594:	mov	sl, r2
    f596:	mov	r9, r3
    f598:	cbz	r4, f60c <__register_exitproc+0x88>
    f59a:	ldr	r0, [r4, #4]
    f59c:	cmp	r0, #31
    f59e:	bgt.n	f5d0 <__register_exitproc+0x4c>
    f5a0:	adds	r3, r0, #1
    f5a2:	cbz	r6, f5c2 <__register_exitproc+0x3e>
    f5a4:	add.w	r5, r4, r0, lsl #2
    f5a8:	movs	r2, #1
    f5aa:	str.w	sl, [r5, #136]	; 0x88
    f5ae:	ldr.w	r1, [r4, #392]	; 0x188
    f5b2:	lsls	r2, r0
    f5b4:	orrs	r1, r2
    f5b6:	cmp	r6, #2
    f5b8:	str.w	r1, [r4, #392]	; 0x188
    f5bc:	str.w	r9, [r5, #264]	; 0x108
    f5c0:	beq.n	f600 <__register_exitproc+0x7c>
    f5c2:	adds	r0, #2
    f5c4:	str	r3, [r4, #4]
    f5c6:	str.w	r8, [r4, r0, lsl #2]
    f5ca:	movs	r0, #0
    f5cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5d0:	ldr	r3, [pc, #80]	; (f624 <__register_exitproc+0xa0>)
    f5d2:	cbz	r3, f616 <__register_exitproc+0x92>
    f5d4:	mov.w	r0, #400	; 0x190
    f5d8:	bl	e554 <malloc>
    f5dc:	mov	r4, r0
    f5de:	cbz	r0, f616 <__register_exitproc+0x92>
    f5e0:	ldr.w	r3, [r5, #328]	; 0x148
    f5e4:	movs	r7, #0
    f5e6:	stmia.w	r0, {r3, r7}
    f5ea:	str.w	r4, [r5, #328]	; 0x148
    f5ee:	mov	r0, r7
    f5f0:	movs	r3, #1
    f5f2:	str.w	r7, [r4, #392]	; 0x188
    f5f6:	str.w	r7, [r4, #396]	; 0x18c
    f5fa:	cmp	r6, #0
    f5fc:	beq.n	f5c2 <__register_exitproc+0x3e>
    f5fe:	b.n	f5a4 <__register_exitproc+0x20>
    f600:	ldr.w	r1, [r4, #396]	; 0x18c
    f604:	orrs	r2, r1
    f606:	str.w	r2, [r4, #396]	; 0x18c
    f60a:	b.n	f5c2 <__register_exitproc+0x3e>
    f60c:	add.w	r4, r5, #332	; 0x14c
    f610:	str.w	r4, [r5, #328]	; 0x148
    f614:	b.n	f59a <__register_exitproc+0x16>
    f616:	mov.w	r0, #4294967295
    f61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f61e:	nop
    f620:	.word	0x20000960
    f624:	.word	0x0000e555

0000f628 <_malloc_trim_r>:
    f628:	push	{r3, r4, r5, r6, r7, lr}
    f62a:	ldr	r7, [pc, #140]	; (f6b8 <_malloc_trim_r+0x90>)
    f62c:	mov	r4, r1
    f62e:	mov	r6, r0
    f630:	bl	ec48 <__malloc_lock>
    f634:	ldr	r3, [r7, #8]
    f636:	ldr	r5, [r3, #4]
    f638:	bic.w	r5, r5, #3
    f63c:	subs	r1, r5, r4
    f63e:	addw	r1, r1, #4079	; 0xfef
    f642:	bic.w	r1, r1, #4080	; 0xff0
    f646:	bic.w	r1, r1, #15
    f64a:	sub.w	r4, r1, #4096	; 0x1000
    f64e:	cmp.w	r4, #4096	; 0x1000
    f652:	blt.n	f664 <_malloc_trim_r+0x3c>
    f654:	movs	r1, #0
    f656:	mov	r0, r6
    f658:	bl	f040 <_sbrk_r>
    f65c:	ldr	r3, [r7, #8]
    f65e:	add	r3, r5
    f660:	cmp	r0, r3
    f662:	beq.n	f66e <_malloc_trim_r+0x46>
    f664:	mov	r0, r6
    f666:	bl	ec4c <__malloc_unlock>
    f66a:	movs	r0, #0
    f66c:	pop	{r3, r4, r5, r6, r7, pc}
    f66e:	negs	r1, r4
    f670:	mov	r0, r6
    f672:	bl	f040 <_sbrk_r>
    f676:	adds	r0, #1
    f678:	beq.n	f696 <_malloc_trim_r+0x6e>
    f67a:	ldr	r3, [pc, #64]	; (f6bc <_malloc_trim_r+0x94>)
    f67c:	ldr	r2, [r7, #8]
    f67e:	ldr	r1, [r3, #0]
    f680:	subs	r5, r5, r4
    f682:	orr.w	r5, r5, #1
    f686:	mov	r0, r6
    f688:	subs	r1, r1, r4
    f68a:	str	r5, [r2, #4]
    f68c:	str	r1, [r3, #0]
    f68e:	bl	ec4c <__malloc_unlock>
    f692:	movs	r0, #1
    f694:	pop	{r3, r4, r5, r6, r7, pc}
    f696:	movs	r1, #0
    f698:	mov	r0, r6
    f69a:	bl	f040 <_sbrk_r>
    f69e:	ldr	r2, [r7, #8]
    f6a0:	subs	r3, r0, r2
    f6a2:	cmp	r3, #15
    f6a4:	ble.n	f664 <_malloc_trim_r+0x3c>
    f6a6:	ldr	r4, [pc, #24]	; (f6c0 <_malloc_trim_r+0x98>)
    f6a8:	ldr	r1, [pc, #16]	; (f6bc <_malloc_trim_r+0x94>)
    f6aa:	ldr	r4, [r4, #0]
    f6ac:	orr.w	r3, r3, #1
    f6b0:	subs	r0, r0, r4
    f6b2:	str	r3, [r2, #4]
    f6b4:	str	r0, [r1, #0]
    f6b6:	b.n	f664 <_malloc_trim_r+0x3c>
    f6b8:	.word	0x20001354
    f6bc:	.word	0x2000e7fc
    f6c0:	.word	0x20001760

0000f6c4 <_free_r>:
    f6c4:	cmp	r1, #0
    f6c6:	beq.n	f754 <_free_r+0x90>
    f6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6cc:	mov	r5, r1
    f6ce:	mov	r8, r0
    f6d0:	bl	ec48 <__malloc_lock>
    f6d4:	ldr.w	r7, [r5, #-4]
    f6d8:	ldr	r1, [pc, #424]	; (f884 <_free_r+0x1c0>)
    f6da:	bic.w	r3, r7, #1
    f6de:	sub.w	r4, r5, #8
    f6e2:	adds	r2, r4, r3
    f6e4:	ldr	r6, [r1, #8]
    f6e6:	ldr	r0, [r2, #4]
    f6e8:	cmp	r2, r6
    f6ea:	bic.w	r0, r0, #3
    f6ee:	beq.n	f7b6 <_free_r+0xf2>
    f6f0:	lsls	r6, r7, #31
    f6f2:	str	r0, [r2, #4]
    f6f4:	bmi.n	f70e <_free_r+0x4a>
    f6f6:	ldr.w	r7, [r5, #-8]
    f6fa:	subs	r4, r4, r7
    f6fc:	add.w	lr, r1, #8
    f700:	ldr	r5, [r4, #8]
    f702:	cmp	r5, lr
    f704:	add	r3, r7
    f706:	beq.n	f7e8 <_free_r+0x124>
    f708:	ldr	r7, [r4, #12]
    f70a:	str	r7, [r5, #12]
    f70c:	str	r5, [r7, #8]
    f70e:	adds	r5, r2, r0
    f710:	ldr	r5, [r5, #4]
    f712:	lsls	r5, r5, #31
    f714:	bpl.n	f79c <_free_r+0xd8>
    f716:	orr.w	r2, r3, #1
    f71a:	str	r2, [r4, #4]
    f71c:	str	r3, [r4, r3]
    f71e:	cmp.w	r3, #512	; 0x200
    f722:	bcs.n	f756 <_free_r+0x92>
    f724:	lsrs	r3, r3, #3
    f726:	adds	r2, r3, #1
    f728:	ldr	r5, [r1, #4]
    f72a:	ldr.w	r7, [r1, r2, lsl #3]
    f72e:	str	r7, [r4, #8]
    f730:	movs	r0, #1
    f732:	asrs	r3, r3, #2
    f734:	lsl.w	r3, r0, r3
    f738:	add.w	r0, r1, r2, lsl #3
    f73c:	orrs	r5, r3
    f73e:	subs	r0, #8
    f740:	str	r0, [r4, #12]
    f742:	str	r5, [r1, #4]
    f744:	str.w	r4, [r1, r2, lsl #3]
    f748:	str	r4, [r7, #12]
    f74a:	mov	r0, r8
    f74c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f750:	b.w	ec4c <__malloc_unlock>
    f754:	bx	lr
    f756:	lsrs	r2, r3, #9
    f758:	cmp	r2, #4
    f75a:	bhi.n	f804 <_free_r+0x140>
    f75c:	lsrs	r2, r3, #6
    f75e:	add.w	r7, r2, #57	; 0x39
    f762:	lsls	r7, r7, #1
    f764:	add.w	r5, r2, #56	; 0x38
    f768:	add.w	r0, r1, r7, lsl #2
    f76c:	ldr.w	r2, [r1, r7, lsl #2]
    f770:	ldr	r1, [pc, #272]	; (f884 <_free_r+0x1c0>)
    f772:	subs	r0, #8
    f774:	cmp	r0, r2
    f776:	beq.n	f814 <_free_r+0x150>
    f778:	ldr	r1, [r2, #4]
    f77a:	bic.w	r1, r1, #3
    f77e:	cmp	r3, r1
    f780:	bcs.n	f788 <_free_r+0xc4>
    f782:	ldr	r2, [r2, #8]
    f784:	cmp	r0, r2
    f786:	bne.n	f778 <_free_r+0xb4>
    f788:	ldr	r0, [r2, #12]
    f78a:	str	r0, [r4, #12]
    f78c:	str	r2, [r4, #8]
    f78e:	str	r4, [r0, #8]
    f790:	str	r4, [r2, #12]
    f792:	mov	r0, r8
    f794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f798:	b.w	ec4c <__malloc_unlock>
    f79c:	ldr	r5, [r2, #8]
    f79e:	ldr	r7, [pc, #232]	; (f888 <_free_r+0x1c4>)
    f7a0:	cmp	r5, r7
    f7a2:	add	r3, r0
    f7a4:	beq.n	f826 <_free_r+0x162>
    f7a6:	ldr	r0, [r2, #12]
    f7a8:	str	r0, [r5, #12]
    f7aa:	orr.w	r2, r3, #1
    f7ae:	str	r5, [r0, #8]
    f7b0:	str	r2, [r4, #4]
    f7b2:	str	r3, [r4, r3]
    f7b4:	b.n	f71e <_free_r+0x5a>
    f7b6:	lsls	r7, r7, #31
    f7b8:	add	r3, r0
    f7ba:	bmi.n	f7cc <_free_r+0x108>
    f7bc:	ldr.w	r2, [r5, #-8]
    f7c0:	subs	r4, r4, r2
    f7c2:	add	r3, r2
    f7c4:	ldr	r0, [r4, #8]
    f7c6:	ldr	r2, [r4, #12]
    f7c8:	str	r2, [r0, #12]
    f7ca:	str	r0, [r2, #8]
    f7cc:	ldr	r2, [pc, #188]	; (f88c <_free_r+0x1c8>)
    f7ce:	ldr	r2, [r2, #0]
    f7d0:	orr.w	r0, r3, #1
    f7d4:	cmp	r3, r2
    f7d6:	str	r0, [r4, #4]
    f7d8:	str	r4, [r1, #8]
    f7da:	bcc.n	f74a <_free_r+0x86>
    f7dc:	ldr	r3, [pc, #176]	; (f890 <_free_r+0x1cc>)
    f7de:	mov	r0, r8
    f7e0:	ldr	r1, [r3, #0]
    f7e2:	bl	f628 <_malloc_trim_r>
    f7e6:	b.n	f74a <_free_r+0x86>
    f7e8:	adds	r1, r2, r0
    f7ea:	ldr	r1, [r1, #4]
    f7ec:	lsls	r1, r1, #31
    f7ee:	bmi.n	f87a <_free_r+0x1b6>
    f7f0:	ldr	r1, [r2, #8]
    f7f2:	ldr	r2, [r2, #12]
    f7f4:	str	r2, [r1, #12]
    f7f6:	add	r3, r0
    f7f8:	orr.w	r0, r3, #1
    f7fc:	str	r1, [r2, #8]
    f7fe:	str	r0, [r4, #4]
    f800:	str	r3, [r4, r3]
    f802:	b.n	f74a <_free_r+0x86>
    f804:	cmp	r2, #20
    f806:	bhi.n	f838 <_free_r+0x174>
    f808:	add.w	r7, r2, #92	; 0x5c
    f80c:	lsls	r7, r7, #1
    f80e:	add.w	r5, r2, #91	; 0x5b
    f812:	b.n	f768 <_free_r+0xa4>
    f814:	asrs	r2, r5, #2
    f816:	ldr	r3, [r1, #4]
    f818:	movs	r5, #1
    f81a:	lsl.w	r2, r5, r2
    f81e:	orrs	r3, r2
    f820:	str	r3, [r1, #4]
    f822:	mov	r2, r0
    f824:	b.n	f78a <_free_r+0xc6>
    f826:	orr.w	r2, r3, #1
    f82a:	str	r4, [r1, #20]
    f82c:	str	r4, [r1, #16]
    f82e:	str	r5, [r4, #12]
    f830:	str	r5, [r4, #8]
    f832:	str	r2, [r4, #4]
    f834:	str	r3, [r4, r3]
    f836:	b.n	f74a <_free_r+0x86>
    f838:	cmp	r2, #84	; 0x54
    f83a:	bhi.n	f84a <_free_r+0x186>
    f83c:	lsrs	r2, r3, #12
    f83e:	add.w	r7, r2, #111	; 0x6f
    f842:	lsls	r7, r7, #1
    f844:	add.w	r5, r2, #110	; 0x6e
    f848:	b.n	f768 <_free_r+0xa4>
    f84a:	cmp.w	r2, #340	; 0x154
    f84e:	bhi.n	f85e <_free_r+0x19a>
    f850:	lsrs	r2, r3, #15
    f852:	add.w	r7, r2, #120	; 0x78
    f856:	lsls	r7, r7, #1
    f858:	add.w	r5, r2, #119	; 0x77
    f85c:	b.n	f768 <_free_r+0xa4>
    f85e:	movw	r0, #1364	; 0x554
    f862:	cmp	r2, r0
    f864:	bhi.n	f874 <_free_r+0x1b0>
    f866:	lsrs	r2, r3, #18
    f868:	add.w	r7, r2, #125	; 0x7d
    f86c:	lsls	r7, r7, #1
    f86e:	add.w	r5, r2, #124	; 0x7c
    f872:	b.n	f768 <_free_r+0xa4>
    f874:	movs	r7, #254	; 0xfe
    f876:	movs	r5, #126	; 0x7e
    f878:	b.n	f768 <_free_r+0xa4>
    f87a:	orr.w	r2, r3, #1
    f87e:	str	r2, [r4, #4]
    f880:	str	r3, [r4, r3]
    f882:	b.n	f74a <_free_r+0x86>
    f884:	.word	0x20001354
    f888:	.word	0x2000135c
    f88c:	.word	0x2000175c
    f890:	.word	0x2000e7f8
    f894:	.word	0x00000000

0000f898 <___init_veneer>:
    f898:	ldr.w	pc, [pc]	; f89c <___init_veneer+0x4>
    f89c:	.word	0x600015a9

Disassembly of section .fini:

0000f8a0 <_fini>:
    f8a0:	push	{r3, r4, r5, r6, r7, lr}
    f8a2:	nop
