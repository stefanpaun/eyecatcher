
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000c510 l    d  .fini	00000000 .fini
0000c514 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001560 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000b48c l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000a660 l     F .text.itcm	0000005c schedule_transfer
0000a6bc l     F .text.itcm	00000030 run_callbacks
0000a6ec l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000a784 l     F .text.itcm	00000544 isr
2000d828 l     O .bss	00000004 endpointN_notify_mask
2000d830 l     O .bss	00000004 endpoint0_notify_mask
2000d834 l     O .bss	00000001 usb_reboot_timer
2000d838 l     O .bss	00000008 endpoint0_setupdata
2000d840 l     O .bss	00000008 reply_buffer
2000d848 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000d85c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000d880 l     O .bss	00000004 s_hotTemp
2000d884 l     O .bss	00000004 s_hot_ROOM
2000d888 l     O .bss	00000004 s_roomC_hotC
2000d88c l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001560 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001564 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00003848 l     F .text.itcm	000060a0 _GLOBAL__sub_I_low_threshold
20000060 l     O .data	00000400 dim_curve
200007d0 l     O .data	00000240 background_B
20000a10 l     O .data	00000240 background_A
20006158 l     O .bss	00001200 mask_A
20007358 l     O .bss	00001200 mask_B
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
00009e2c l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
000098e8 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009f6c l     F .text.itcm	00000028 rx_event
00009f94 l     F .text.itcm	00000070 usb_serial_flush_callback
0000a004 l     F .text.itcm	0000015c usb_serial_write.part.1
2000ced4 l     O .bss	00000700 txbuffer
2000d5d4 l     O .bss	00000001 tx_noautoflush
2000d5d5 l     O .bss	00000001 tx_head
2000d5d8 l     O .bss	000000c0 rx_buffer
2000d698 l     O .bss	00000006 rx_index
2000d6a0 l     O .bss	00000006 rx_count
2000d6c0 l     O .bss	00000060 rx_transfer
2000d720 l     O .bss	00000002 tx_available
2000d740 l     O .bss	000000e0 tx_transfer
2000d820 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000afd4 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000c58 l     O .data	0000000a qualifier_descriptor
20000c7c l     O .data	00000043 config_descriptor
20000cc0 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 yield.cpp
2000d85d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000b17c l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000d860 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000d20 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __pwm_init_veneer
600015c0 l     F .text.progmem	00000008 __delay_veneer
600015c8 l     F .text.progmem	00000008 __yield_veneer
600015d0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015d8 l     F .text.progmem	00000008 __loop_veneer
600015e0 l     F .text.progmem	00000008 __setup_veneer
600015e8 l     F .text.progmem	00000008 __memset_veneer
600015f0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015f8 l     F .text.progmem	00000008 ____libc_init_array_veneer
0000c500 l     F .text.itcm	00000008 ___init_veneer
0000a288 g     F .text.itcm	00000014 usb_serial_available
0000b0dc  w    F .text.itcm	000000a0 yield
0000b880 g     F .text.itcm	000000a8 sqrt
2000d82c g     O .bss	00000004 usb_timer1_callback
20000c64 g     O .data	00000018 usb_string_manufacturer_name_default
2000d890 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00009d74 g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
2000157c g     O .bss	00000004 sinceBeam
0000b458 g     F .text.itcm	00000020 Print::println()
0000b20c g     F .text.itcm	00000014 random(long, long)
00009dd4 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000c1c4 g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
20000c54 g     O .data	00000004 F_CPU_ACTUAL
0000b858 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000b36c g     F .text.itcm	00000098 MillisTimer::runFromTimer()
20003d0c g     O .bss	00000004 sinceFadeUpdate
2000d878 g     O .bss	00000001 EventResponder::runningFromYield
2000ce10 g     O .bss	000000c4 Alarm
0000bb38 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000d864 g     O .bss	00000004 EventResponder::firstInterrupt
0000ae10 g     F .text.itcm	00000028 usb_transfer_status
20000d06 g     O .data	00000001 usb_enable_serial_event_processing
0000b43c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200004a8 g     O .data	00000280 digital_pin_to_info_PGM
2000f6c0 g     O .bss	00000004 errno
0000c510 g       .text.itcm	00000000 _etext
00009c64 g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001560 g       .bss	00000000 _sbss
00009970 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
60001610 g       *ABS*	00000000 _stextload
00002660 g     F .text.itcm	000011e8 loop
20003d10 g     O .bss	00001224 sat_automaton_B
20008558 g     O .bss	00000014 synapse_A
0000acc8 g     F .text.itcm	00000064 usb_config_rx
0000b304 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00009a1c g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
2000d868 g     O .bss	00000004 EventResponder::lastInterrupt
00009e38 g     F .text.itcm	00000134 memcpy
2000d858 g     O .bss	00000004 systick_millis_count
2000d850 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000c64  w    O .data	00000018 usb_string_manufacturer_name
0000bb94 g     F .text.itcm	00000010 malloc
2000856c g     O .bss	00000014 synapse_B
0000b2a0  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
00000448 g     F .text.itcm	00000594 updateBeams()
2000d8b8 g     O .bss	00000004 __malloc_top_pad
0000ae38 g     F .text.itcm	0000002c rtc_set
2000f280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
200007cc g     O .data	00000000 .hidden __dso_handle
00009994 g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000c1c8 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000a218 g     F .text.itcm	0000004c usb_serial_getchar
2000d8e4 g     O .bss	00000008 usb_cdc_line_coding
0000aff8 g     F .text.itcm	0000000a digitalWrite
2000d870 g     O .bss	00000004 EventResponder::lastYield
2000d8b4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b004 g     F .text.itcm	00000080 pinMode
20280000 g       .bss	00000000 _heap_end
20000d1c g     O .data	00000001 __fdlib_version
2000d874 g     O .bss	00000004 EventResponder::firstYield
200007c8 g     O .data	00000004 _global_impure_ptr
0000bb44 g     F .text.itcm	00000050 __libc_init_array
0000b494  w    F .text.itcm	0000008c HardFault_HandlerC
0000b424  w    F .text.itcm	00000004 usb_serial_class::clear()
0000b520 g     F .text.itcm	00000030 _sbrk
6000db2c g       *ABS*	00000000 _sdataload
2000d87c g     O .bss	00000004 MillisTimer::listWaiting
20000d18 g     O .data	00000004 __brkval
2000d821 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000007c  w    F .text.itcm	000000b4 Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
600015a8 g     F .text.progmem	00000000 _init
0000a160 g     F .text.itcm	00000002 usb_serial_reset
2000f700 g       .bss	00000000 _ebss
0000babc g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000a9c8 g     O .bss	00001224 bg_automaton_A
000099cc g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
2000e000 g     O .bss	00000020 endpoint0_transfer_data
0000b5a0 g     F .text.itcm	000002b8 pwm_init
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00009cc0 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000e020 g     O .bss	00000020 endpoint0_transfer_ack
2000d8ec g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000adc4 g     F .text.itcm	00000028 usb_transmit
0000b404 g     F .text.itcm	00000020 systick_isr
20000d08 g     O .data	00000010 Serial
2000d8ac g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
0000b444  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000a264 g     F .text.itcm	00000024 usb_serial_peekchar
0000a3d4 g     F .text.itcm	0000028c set_arm_clock
2000d854 g     O .bss	00000004 systick_cycle_count
20000cf0 g     O .data	00000016 usb_string_serial_number_default
0000c32c g     F .text.itcm	000001d0 _free_r
0000b434  w    F .text.itcm	00000004 usb_serial_class::flush()
20001558 g     O .data	00000004 __malloc_sbrk_base
0000b42c  w    F .text.itcm	00000004 usb_serial_class::read()
0000ad94 g     F .text.itcm	0000002e usb_prepare_transfer
0000b47c g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000d824 g     O .bss	00000004 usb_timer0_callback
0000b44c  w    F .text.itcm	0000000c serialEvent()
0000c1ec g     F .text.itcm	000000a4 __register_exitproc
00009dd4 g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000a29c g     F .text.itcm	0000003c usb_serial_flush_input
0000a2d8 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
2000d8bc g     O .bss	00000028 __malloc_current_mallinfo
20008580 g     O .bss	00001224 grow_automaton_A
00000200 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000bb2c g     F .text.itcm	0000000c __cxa_atexit
20004f34 g     O .bss	00001224 sat_automaton_A
0000b204 g     F .text.itcm	00000008 random(unsigned long)
20000794  w    O .data	00000028 vtable for usb_serial_class
200039e0 g     O .bss	00000014 matrix_B
2000d86c g     O .bss	00000004 MillisTimer::listActive
2000114c g     O .data	00000408 __malloc_av_
0000a368 g     F .text.itcm	0000006c usb_serial_flush_output
0000c1c0 g     F .text.itcm	00000002 __malloc_lock
2000f400 g     O .bss	000002c0 _VectorsRam
0000bacc g     F .text.itcm	0000005e _calloc_r
00009d70 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
0000c124 g     F .text.itcm	0000009a memset
2000d8b0 g     O .bss	00000004 __malloc_max_total_mem
00000130 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
0000007c  w    F .text.itcm	000000b4 Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
000009e0 g     F .text.itcm	000004f8 updateScreensFade()
0000baac g     F .text.itcm	00000004 matherr
0000b084 g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000bbb4 g     F .text.itcm	00000570 _malloc_r
0000b220 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
200039cc g     O .bss	00000014 matrix_A
0000af24 g     F .text.itcm	00000054 micros
0000c290 g     F .text.itcm	0000009c _malloc_trim_r
20001584 g     O .bss	00001224 fg_automaton_A
20000cec g     O .data	00000004 string0
0000a304 g     F .text.itcm	00000018 usb_serial_write
0000b430  w    F .text.itcm	00000004 usb_serial_class::available()
00009dc8 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
2000f000 g     O .bss	00000280 endpoint_queue_head
20000cd4  w    O .data	00000016 usb_string_product_name
0000ae64 g     F .text.itcm	000000c0 delay
0000c510 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
2000bbec g     O .bss	00001224 bg_automaton_B
20001148 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
00009bfc g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000b1f8 g     F .text.itcm	0000000c randomSeed(unsigned long)
00000ed8 g     F .text.itcm	00001788 setup
20000728 g     O .data	0000006c usb_descriptor_list
20003aa4 g     O .bss	000000b0 screen_B
200097a4 g     O .bss	00001224 grow_automaton_B
0000b928 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
0000a31c g     F .text.itcm	0000004c usb_serial_write_buffer_free
200027a8 g     O .bss	00001224 fg_automaton_B
200039f4 g     O .bss	000000b0 screen_A
0000a164 g     F .text.itcm	000000b4 usb_serial_configure
20001560 g       .data	00000000 _edata
00009c38 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000b438  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00009cb4 g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000b550 g     F .text.itcm	0000004e ultoa
20001580 g     O .bss	00000004 sinceBeamUpdate
20003b54 g     O .bss	000001b8 beams
0000b478 g     F .text.itcm	00000004 operator new(unsigned int)
0000b2bc g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001554 g     O .data	00000004 __malloc_trim_threshold
0000b428  w    F .text.itcm	00000004 usb_serial_class::peek()
60001600 g       .text.progmem	00000000 __init_array_start
0000af78 g     F .text.itcm	0000005c analogRead
20000c50 g     O .data	00000004 F_BUS_ACTUAL
2000048c g     O .data	0000001c pin_to_channel
00009c38 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
20000cd4 g     O .data	00000016 usb_string_product_name_default
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
60001600 g       .text.progmem	00000000 __preinit_array_start
0000adec g     F .text.itcm	00000024 usb_receive
00009950 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00009950 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000f080 g       *ABS*	00000000 _flashimagelen
0000bab0 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000b300 g     F .text.itcm	00000004 pendablesrvreq_isr
0000ad2c g     F .text.itcm	00000068 usb_config_tx
0000bba4 g     F .text.itcm	00000010 free
20000cf0  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015d0 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015b8 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015f8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015e0 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015d8 <__loop_veneer>
		yield();
600011da:	bl	600015c8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000c510
600011f8:	.word	0x20000000
600011fc:	.word	0x6000db2c
60001200:	.word	0x20001560
60001204:	.word	0x20001560
60001208:	.word	0x2000f700
6000120c:	.word	0xe000ed88
60001210:	.word	0x2000f3fc
60001214:	.word	0x0000b47d
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000b301
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000b405
6000124c:	.word	0xe0001004
60001250:	.word	0x2000d854
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000d858
60001264:	.word	0x2000f400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015f0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015c0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x2000f000
60001348:	.word	0x2000f400
6000134c:	.word	0x0000a785
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x2000d85c

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000d888
60001598:	.word	0x2000d884
6000159c:	.word	0x2000d88c
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000d880

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__pwm_init_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__pwm_init_veneer+0x4>
600015bc:	.word	0x0000b5a1

600015c0 <__delay_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__delay_veneer+0x4>
600015c4:	.word	0x0000ae65

600015c8 <__yield_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__yield_veneer+0x4>
600015cc:	.word	0x0000b0dd

600015d0 <__set_arm_clock_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <__set_arm_clock_veneer+0x4>
600015d4:	.word	0x0000a3d5

600015d8 <__loop_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__loop_veneer+0x4>
600015dc:	.word	0x00002661

600015e0 <__setup_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__setup_veneer+0x4>
600015e4:	.word	0x00000ed9

600015e8 <__memset_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__memset_veneer+0x4>
600015ec:	.word	0x0000c125

600015f0 <__usb_init_serialnumber_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__usb_init_serialnumber_veneer+0x4>
600015f4:	.word	0x0000b085

600015f8 <____libc_init_array_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <____libc_init_array_veneer+0x4>
600015fc:	.word	0x0000bb45

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x00003849
60001608:	.word	0x00009e2d

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r4, #21
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	stmia	r5!, {r2, r4}
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	nop
      68:	.word	0x00000000
      6c:	asrs	r4, r4, #21
      6e:	.short	0x2000
      70:	stmia	r5!, {r2, r4}
      72:	.short	0x0000
      74:	asrs	r0, r4, #21
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>:
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      80:	.word	0x4693460f
      84:	ldr	r1, [pc, #164]	; (12c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])+0xb0>)
      86:	.short	0x2260
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r4, r0
      8a:	mov	r6, r3
      8c:	movs	r5, #0
  
  if(num >= 4){
      8e:	.short	0xf009
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	cdp2	0, 13, cr15, cr3, cr15, {2}
      94:	.word	0x22020901
      98:	movs	r1, #6
      9a:	str	r5, [r4, #96]	; 0x60
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      9c:	str.w	r9, [r4, #100]	; 0x64
		{1, 1, 1, 0, 0, 1}
	};

	Seed possible_seeds[2] = {
		{ALL, 1, true},
		{SQUARE, random(2, 6), true},
      a0:	mov	r0, r2
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      a2:	strb.w	r9, [r4, #104]	; 0x68
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      a6:	mov.w	r8, #1728	; 0x6c0
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      aa:	str	r2, [r4, #108]	; 0x6c
		{1, 1, 1, 0, 0, 1}
	};

	Seed possible_seeds[2] = {
		{ALL, 1, true},
		{SQUARE, random(2, 6), true},
      ac:	bl	b20c <random(long, long)>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      b0:	movs	r2, #0
      b2:	.short	0x6720
      b4:	mov	r0, r8
      b6:	.short	0xf884
      b8:	str	r0, [sp, #464]	; 0x1d0
      ba:	.short	0xf8c4
      bc:	movs	r0, #156	; 0x9c
      be:	str.w	r5, [r4, #152]	; 0x98
      c2:	.short	0xf8c4
      c4:	str	r0, [r4, r2]
      c6:	bl	b478 <operator new(unsigned int)>
      ca:	.short	0x4681
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      cc:	mov	r1, r5
      ce:	mov	r2, r8
      d0:	bl	c124 <memset>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      d4:	.word	0x90a4f8c4
      d8:	mov	r0, r8
      da:	.short	0xf00b
      dc:	vst3.16	{d20[2],d21[2],d22[2]}, [sp], r1
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      e0:	.word	0x46294642
      e4:	bl	c124 <memset>
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      e8:	.word	0x90a8f8c4
      ec:	mov	r0, r8
      ee:	.short	0xf00b
      f0:	vst3.16	{d20[1],d21[1],d22[1]}, [r3], r2
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      f4:	mov	r1, r5
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      f6:	.short	0x4681
#define SQUARE 2
#define CIRCLE 3
#define MULTIPLE 4
class Screen {

	typedef struct {
      f8:	bl	c124 <memset>

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
      fc:	.word	0xf8c49b08
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
     100:	add	sp, #480	; 0x1e0
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		
	}
     102:	.short	0x4620

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     104:	str.w	r3, [r4, #132]	; 0x84
		_screen = screen;
     108:	.word	0xf8c49b09
	float fadeFactor = 0;
	unsigned long fadeStart = 0;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     10c:	str	r0, [sp, #688]	; 0x2b0
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
     10e:	.short	0xf8c4
     110:	adds	r0, #136	; 0x88
		_mask = mask;
     112:	.short	0x9b0a

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
     114:	str	r7, [r4, #124]	; 0x7c
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
     116:	.short	0xf8c4
     118:	adds	r0, #140	; 0x8c
		_bg_mask = bg_mask;
     11a:	.short	0x9b0b
public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
     11c:	str.w	r6, [r4, #128]	; 0x80
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
     120:	str.w	r3, [r4, #144]	; 0x90
		newFrameReady = false;
     124:	.word	0x5094f884
		
	}
     128:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
     12c:	.word	0x20000000

00000130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     130:	sub	sp, #8
     132:	.short	0x4684
     134:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     138:	.word	0xb0852400
     13c:	mov	lr, r1
     13e:	.short	0x4e2e
     140:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     142:	mov	r5, r4

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     144:	.word	0x000ce881
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     148:	ldrb	r3, [r6, r4]
     14a:	.short	0x342c
     14c:	ldr	r2, [pc, #168]	; (1f8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     14e:	.short	0xb143
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     150:	adds	r5, #1
     152:	.short	0x2d0a
     154:	bne.n	148 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     156:	.short	0x2000
}
     158:	add	sp, #20
     15a:	.short	0xe8bd
     15c:	mvns	r0, r6
     15e:	.short	0xb002
     160:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     162:	.short	0x232c
     164:	movs	r1, #1
     166:	.short	0x466f
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     168:	ldr.w	r8, [pc, #144]	; 1fc <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xcc>
     16c:	.word	0xf305fb03
     170:	add.w	r9, r2, r3
     174:	.word	0xab0c54d1
	strip = _strip;
     178:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     17c:	add.w	r4, r9, #12

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     180:	.word	0xe008f889
     184:	ldmia	r3, {r0, r1, r2, r3}
     186:	.short	0xc707
     188:	strh	r3, [r7, #0]
	color = _color;
     18a:	.short	0xab04
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     18c:	mov	r7, r8
     18e:	ldmdb	r3, {r0, r1, r2, r3}
     192:	.short	0xc407
     194:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     196:	ldr	r3, [sp, #64]	; 0x40
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     198:	vstr	s0, [r9, #28]
	duration = _duration;
     19c:	str.w	r3, [r9, #32]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     1a0:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     1a4:	ldr.w	r1, [r8, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     1a8:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     1aa:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     1ac:	cmp	r3, r1
     1ae:	it	eq
     1b0:	.word	0x461442a2
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    uint32_t lo2 = SNVS_HPRTCLR;
     1b4:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     1b6:	ite	eq	; unpredictable <IT:eq>
     1b8:	moveq	r0, #1
     1ba:	movne	r0, #0
     1bc:	cmp	r0, #0
     1be:	beq.n	1a8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x78>
	startTime = rtcMillis();
     1c0:	.word	0x232c0959
     1c4:	orr.w	r1, r1, r2, lsl #27
     1c8:	.word	0x6505fb03
     1cc:	vmov	s15, r1
     1d0:	.word	0x5b07ed9f
     1d4:	vcvt.f64.u32	d7, s15
     1d8:	.word	0x6b05ee87
     1dc:	vcvt.u32.f64	s12, d6
     1e0:	.word	0x6a09ed85
     1e4:	add	sp, #20
     1e6:	.short	0xe8bd
     1e8:	mvns	r0, r6
     1ea:	.short	0xb002
     1ec:	bx	lr
     1ee:	.short	0xbf00
     1f0:	add	r1, sp, #1008	; 0x3f0
     1f2:	.short	0xd2f1
     1f4:	str	r5, [r1, #36]	; 0x24
     1f6:	.short	0x3ff0
     1f8:	subs	r3, #84	; 0x54
     1fa:	movs	r0, #0
     1fc:	.word	0x400d4000

00000200 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     200:	sub	sp, #8
     202:	.short	0xe92d
     204:	ldr	r7, [pc, #960]	; (5c8 <updateBeams()+0x180>)
     206:	.short	0xb085
  int colInt = strip->getPixelColor(pixel);
     208:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     20a:	.short	0x4680
     20c:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     210:	.word	0xf89d4631
     214:	str	r0, [sp, #272]	; 0x110
     216:	.short	0x9401
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     218:	add	r4, sp, #56	; 0x38
     21a:	.short	0xf89d
     21c:	str	r0, [r0, r1]
     21e:	.short	0xe884
     220:	movs	r4, r1
     222:	.short	0xf89d
     224:	add	r0, pc, #224	; (adr r0, 308 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x108>)
     226:	.short	0xf89d
     228:	ands	r1, r7
     22a:	.short	0xf89d
     22c:	add	sp, #232	; 0xe8
     22e:	.short	0x9f0f
  int colInt = strip->getPixelColor(pixel);
     230:	bl	9cc0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     234:	.word	0xf3c09003
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     238:	ands	r7, r0
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     23a:	.short	0xf1b9
     23c:	lsrs	r0, r0, #28
     23e:	.short	0xd021
     240:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     242:	.short	0xf89d
     244:	movs	r0, #13
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     246:	.short	0xf89d
     248:	str	r4, [r1, r0]

  strip->setPixelColor(pixel, *(int*)getCol);
     24a:	.short	0x4631

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     24c:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     24e:	.short	0xf1ba
     250:	lsrs	r7, r7, #31
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     252:	.short	0xeb05
     254:	lsls	r3, r1, #12

  strip->setPixelColor(pixel, *(int*)getCol);
     256:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     258:	it	ge
     25a:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     25e:	cmp	r4, #255	; 0xff
     260:	it	ge
     262:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     264:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     266:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     26a:	it	ge
     26c:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     26e:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     272:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     276:	ldr	r2, [sp, #12]
}
     278:	add	sp, #20
     27a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     27e:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     280:	b.w	9cb4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     284:	ldr	r3, [sp, #4]
     286:	cmp	r3, #99	; 0x63
     288:	bgt.n	306 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     28a:	vmov	s15, r3
     28e:	vldr	d6, [pc, #424]	; 438 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     292:	vcvt.f64.s32	d7, s15
     296:	vmul.f64	d7, d7, d6
     29a:	vcvt.u32.f64	s15, d7
     29e:	vstr	s15, [sp, #4]
     2a2:	ldrb.w	sl, [sp, #4]
     2a6:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     2a8:	cbz	r5, 310 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     2aa:	cmp	r5, #99	; 0x63
     2ac:	bgt.n	314 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     2ae:	vmov	s15, r5
     2b2:	vldr	d6, [pc, #388]	; 438 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     2b6:	vcvt.f64.s32	d7, s15
     2ba:	vmul.f64	d7, d7, d6
     2be:	vcvt.s32.f64	s15, d7
     2c2:	vmov	r2, s15
     2c6:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2ca:	ldr	r4, [pc, #372]	; (440 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     2cc:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2ce:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2d2:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     2d6:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2da:	adds	r4, r7, r5
     2dc:	mov.w	r5, #360	; 0x168
     2e0:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2e4:	ldr	r4, [pc, #348]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     2e6:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     2ea:	smull	r3, r4, r4, r1
     2ee:	asrs	r5, r1, #31
     2f0:	add	r4, r1
     2f2:	rsb	r4, r5, r4, asr #5
     2f6:	cmp	r4, #5
     2f8:	bhi.w	42e <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     2fc:	tbb	[pc, r4]
     300:	.word	0x415b7588
     304:	.short	0x0c27
     306:	mov.w	sl, #254	; 0xfe
     30a:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     30c:	cmp	r5, #0
     30e:	bne.n	2aa <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     310:	mov	r4, sl
     312:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     314:	movs	r2, #1
     316:	b.n	2ca <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     318:	ldr	r7, [pc, #296]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     31a:	rsb	r3, r2, sl
     31e:	smull	r4, lr, r7, r1
     322:	mov	r4, r2
     324:	add	lr, r1
     326:	rsb	r5, r5, lr, asr #5
     32a:	rsb	r5, r5, r5, lsl #4
     32e:	sub.w	r1, r1, r5, lsl #2
     332:	rsb	r1, r1, #60	; 0x3c
     336:	mul.w	r3, r1, r3
     33a:	smull	r1, r7, r7, r3
     33e:	asrs	r1, r3, #31
     340:	add	r3, r7
     342:	rsb	r3, r1, r3, asr #5
     346:	add	r3, r2
     348:	uxtb.w	fp, r3
     34c:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     34e:	ldr	r7, [pc, #244]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     350:	rsb	sl, r2, sl
     354:	mov	r4, r2
     356:	smull	r3, lr, r7, r1
     35a:	add	lr, r1
     35c:	rsb	r5, r5, lr, asr #5
     360:	rsb	r5, r5, r5, lsl #4
     364:	sub.w	r1, r1, r5, lsl #2
     368:	mul.w	r1, r1, sl
     36c:	smull	r3, r7, r7, r1
     370:	mov.w	sl, r1, asr #31
     374:	add	r1, r7
     376:	rsb	r1, sl, r1, asr #5
     37a:	add	r2, r1
     37c:	uxtb.w	sl, r2
     380:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     382:	ldr	r7, [pc, #192]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     384:	rsb	lr, r2, sl
     388:	mov	sl, r2
     38a:	smull	r3, r4, r7, r1
     38e:	add	r4, r1
     390:	rsb	r5, r5, r4, asr #5
     394:	rsb	r5, r5, r5, lsl #4
     398:	sub.w	r1, r1, r5, lsl #2
     39c:	rsb	r4, r1, #60	; 0x3c
     3a0:	mul.w	r1, r4, lr
     3a4:	smull	r3, r7, r7, r1
     3a8:	asrs	r4, r1, #31
     3aa:	add	r1, r7
     3ac:	rsb	r4, r4, r1, asr #5
     3b0:	add	r4, r2
     3b2:	uxtb	r4, r4
     3b4:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     3b6:	ldr	r7, [pc, #140]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3b8:	rsb	lr, r2, sl
     3bc:	mov	r4, sl
     3be:	mov	sl, r2
     3c0:	smull	ip, r3, r7, r1
     3c4:	add	r3, r1
     3c6:	rsb	r5, r5, r3, asr #5
     3ca:	rsb	r5, r5, r5, lsl #4
     3ce:	sub.w	r1, r1, r5, lsl #2
     3d2:	mul.w	r1, r1, lr
     3d6:	smull	r3, r7, r7, r1
     3da:	asrs	r3, r1, #31
     3dc:	add	r1, r7
     3de:	rsb	r3, r3, r1, asr #5
     3e2:	add	r3, r2
     3e4:	uxtb.w	fp, r3
     3e8:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     3ea:	ldr	r7, [pc, #88]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3ec:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     3f0:	mov	r4, sl
      output.g = bri;
      output.b = base;
     3f2:	mov	fp, r2
     3f4:	smull	r3, ip, r7, r1
     3f8:	add	ip, r1
     3fa:	rsb	r5, r5, ip, asr #5
     3fe:	rsb	r5, r5, r5, lsl #4
     402:	sub.w	r5, r1, r5, lsl #2
     406:	rsb	r5, r5, #60	; 0x3c
     40a:	mul.w	r1, r5, lr
     40e:	b.n	36c <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     410:	rsb	r3, r2, sl
     414:	ldr	r5, [pc, #44]	; (444 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     416:	mov	fp, r2
     418:	mul.w	r1, r1, r3
     41c:	smull	r3, r5, r5, r1
     420:	asrs	r4, r1, #31
     422:	add	r1, r5
     424:	rsb	r1, r4, r1, asr #5
     428:	adds	r4, r2, r1
     42a:	uxtb	r4, r4
     42c:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     42e:	mov.w	sl, #0
     432:	mov	r4, sl
     434:	b.n	240 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     436:	nop
     438:	.word	0x66666666
     43c:	.word	0x40046666
     440:	.word	0xb60b60b7
     444:	.word	0x88888889

00000448 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     448:	ldr	r3, [pc, #772]	; (750 <updateBeams()+0x308>)
    }
  }
  return false;
}

void updateBeams() {
     44a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     44e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     450:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     452:	ldr	r1, [r3, #40]	; 0x28
     454:	vpush	{d8-d10}
     458:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     45a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     45c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     45e:	ldr	r6, [pc, #752]	; (750 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     460:	cmp	r3, r1
     462:	it	eq
     464:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     466:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     468:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     46a:	ite	eq
     46c:	moveq	r5, #1
     46e:	movne	r5, #0
     470:	cmp	r5, #0
     472:	beq.n	45a <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     474:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     476:	ldr	r4, [pc, #732]	; (754 <updateBeams()+0x30c>)
     478:	orr.w	r1, r1, r2, lsl #27
     47c:	ldr	r3, [r4, #0]
     47e:	vmov	s15, r1
     482:	vldr	d5, [pc, #700]	; 740 <updateBeams()+0x2f8>
     486:	vcvt.f64.u32	d7, s15
     48a:	vdiv.f64	d6, d7, d5
     48e:	vcvt.u32.f64	s12, d6
     492:	vmov	r2, s12
     496:	subs	r3, r2, r3
     498:	cmp	r3, #15
     49a:	ble.w	83a <updateBeams()+0x3f2>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     49e:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4a0:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     4a2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4a4:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     4a6:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     4a8:	cmp	r3, r1
     4aa:	it	eq
     4ac:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4ae:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     4b0:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     4b2:	ite	eq
     4b4:	moveq	r6, #1
     4b6:	movne	r6, #0
     4b8:	cmp	r6, #0
     4ba:	beq.n	4a4 <updateBeams()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     4bc:	lsrs	r1, r3, #5
     4be:	ldr	r7, [pc, #664]	; (758 <updateBeams()+0x310>)
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4c0:	ldr	r0, [pc, #664]	; (75c <updateBeams()+0x314>)
     4c2:	orr.w	r1, r1, r2, lsl #27
     4c6:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     4ca:	ldr.w	fp, [pc, #644]	; 750 <updateBeams()+0x308>
  synapse_B.clear();
     4ce:	mov	sl, r7
     4d0:	vmov	s15, r1
     4d4:	vldr	d8, [pc, #616]	; 740 <updateBeams()+0x2f8>
     4d8:	vcvt.f64.u32	d7, s15
     4dc:	vldr	d9, [pc, #616]	; 748 <updateBeams()+0x300>
     4e0:	vdiv.f64	d6, d7, d8
     4e4:	vcvt.u32.f64	s12, d6
     4e8:	vstr	s12, [r4]

void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     4ec:	bl	9dc8 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     4f0:	ldr	r0, [pc, #620]	; (760 <updateBeams()+0x318>)
     4f2:	bl	9dc8 <Adafruit_NeoPixel::clear()>
     4f6:	b.n	502 <updateBeams()+0xba>
     4f8:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     4fc:	cmp	sl, r9
     4fe:	beq.w	7e8 <updateBeams()+0x3a0>
    if (beams[i].active) {
     502:	ldrb.w	r3, [sl, #-36]
     506:	cmp	r3, #0
     508:	beq.n	4f8 <updateBeams()+0xb0>
     50a:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     50e:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     512:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     516:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     51a:	ldr	r7, [pc, #564]	; (750 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     51c:	cmp	r3, r1
     51e:	it	eq
     520:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     522:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     524:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     526:	ite	eq
     528:	moveq	r4, #1
     52a:	movne	r4, #0
     52c:	cmp	r4, #0
     52e:	beq.n	512 <updateBeams()+0xca>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     530:	lsrs	r1, r3, #5
     532:	ldr.w	r5, [sl]
     536:	ldr.w	r6, [sl, #-4]
     53a:	orr.w	r1, r1, r2, lsl #27
     53e:	adds	r3, r6, r5
     540:	vmov	s15, r1
     544:	vcvt.f64.u32	d7, s15
     548:	vdiv.f64	d6, d7, d8
     54c:	vcvt.u32.f64	s12, d6
     550:	vmov	r2, s12
     554:	cmp	r2, r3
     556:	bhi.w	832 <updateBeams()+0x3ea>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     55a:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     55c:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     55e:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     562:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     566:	cmp	r3, r1
     568:	it	eq
     56a:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     56c:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     56e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     570:	ite	eq
     572:	moveq	r4, #1
     574:	movne	r4, #0
     576:	cmp	r4, #0
     578:	beq.n	55e <updateBeams()+0x116>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     57a:	lsrs	r1, r3, #5
     57c:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     580:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     584:	orr.w	r1, r1, r2, lsl #27
     588:	vcvt.f32.s32	s11, s15
     58c:	vmov	s15, r1
     590:	vcvt.f64.u32	d7, s15
     594:	vdiv.f64	d6, d7, d8
     598:	vcvt.u32.f64	s12, d6
     59c:	vmov	r2, s12
     5a0:	subs	r5, r2, r5
     5a2:	vmov	s15, r5
     5a6:	vcvt.f32.u32	s15, s15
     5aa:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     5ae:	cmp	r3, #0
     5b0:	bne.w	828 <updateBeams()+0x3e0>
	position = (strip->numPixels() + length) * posFac - length / 2;
     5b4:	ldr.w	r0, [sl, #-32]
     5b8:	bl	9d70 <Adafruit_NeoPixel::numPixels() const>
     5bc:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     5c0:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     5c4:	vmov.f32	s14, #96	; 0x3f000000  0.5
     5c8:	vcvt.f32.s32	s13, s15
     5cc:	vldr	s15, [sl, #-8]
     5d0:	vmul.f32	s14, s15, s14
     5d4:	vadd.f32	s15, s13, s15
     5d8:	vmov.f32	s13, s14
     5dc:	vfnms.f32	s13, s15, s20
     5e0:	vmov.f32	s15, s13
     5e4:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     5e8:	cmp	r3, #0
     5ea:	beq.n	4f8 <updateBeams()+0xb0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     5ec:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     5f0:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     5f4:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     5f8:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     5fc:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     600:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     604:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     608:	cmp	r7, r3
     60a:	ble.n	706 <updateBeams()+0x2be>
     60c:	b.n	4f8 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     60e:	vldr	s11, [sl, #-8]
     612:	vmov.f32	s14, #112	; 0x3f800000  1.0
     616:	vmov.f32	s13, #0	; 0x40000000  2.0
     61a:	vdiv.f32	s12, s15, s11
     61e:	vmov.f32	s15, s14
     622:	vfms.f32	s15, s12, s13
     626:	vcmpe.f32	s15, #0.0
     62a:	vmrs	APSR_nzcv, fpscr
     62e:	bmi.w	738 <updateBeams()+0x2f0>
     632:	vcmp.f32	s15, s14
     636:	vmrs	APSR_nzcv, fpscr
     63a:	it	gt
     63c:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     640:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     644:	sub.w	r3, sl, #24
     648:	add	r4, sp, #24
     64a:	ldrb.w	ip, [sl, #-24]
     64e:	ldrb.w	lr, [sl, #-23]
     652:	vcmp.f32	s15, s14
     656:	ldrb.w	r6, [sl, #-22]
     65a:	ldr.w	r8, [sl, #-20]
     65e:	vmrs	APSR_nzcv, fpscr
     662:	ldmia	r3, {r0, r1, r2, r3}
     664:	stmia.w	r4, {r0, r1, r2, r3}
     668:	ldrb.w	r3, [sl, #-16]
     66c:	ldrb.w	r2, [sl, #-15]
     670:	ldrb.w	r1, [sl, #-12]
     674:	beq.n	6ca <updateBeams()+0x282>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     676:	cmp	r1, #0
     678:	beq.n	768 <updateBeams()+0x320>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     67a:	vmov	s14, ip
     67e:	vmov	s13, lr
     682:	vcvt.f32.s32	s14, s14
     686:	vmul.f32	s14, s14, s15
     68a:	vcvt.u32.f32	s14, s14
     68e:	vstr	s14, [sp, #12]
     692:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     696:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     69a:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     69e:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     6a0:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6a2:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6a6:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     6aa:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     6ae:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6b2:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     6b6:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     6ba:	vstr	s14, [sp, #12]
     6be:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     6c2:	vstr	s15, [sp, #16]
     6c6:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     6ca:	strb.w	r3, [sp, #32]
     6ce:	add	r3, sp, #40	; 0x28
     6d0:	strb.w	r2, [sp, #33]	; 0x21
     6d4:	strb.w	r1, [sp, #36]	; 0x24
     6d8:	strb.w	ip, [sp, #24]
     6dc:	strb.w	lr, [sp, #25]
     6e0:	strb.w	r6, [sp, #26]
     6e4:	str.w	r8, [sp, #28]
     6e8:	ldmdb	r3, {r0, r1}
     6ec:	ldmia.w	r4, {r2, r3}
     6f0:	stmia.w	sp, {r0, r1}
     6f4:	mov	r1, r7
     6f6:	ldr.w	r0, [sl, #-32]
     6fa:	bl	200 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     6fe:	adds	r7, #1
     700:	cmp	r5, r7
     702:	blt.w	4f8 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
     706:	cmp	r7, #0
     708:	blt.n	6fe <updateBeams()+0x2b6>
     70a:	ldr.w	r0, [sl, #-32]
     70e:	bl	9d70 <Adafruit_NeoPixel::numPixels() const>
     712:	cmp	r0, r7
     714:	ble.n	6fe <updateBeams()+0x2b6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     716:	vmov	s14, r7
     71a:	vldr	s15, [sl, #4]
     71e:	vcvt.f32.s32	s14, s14
     722:	vsub.f32	s15, s14, s15
     726:	vcmpe.f32	s15, #0.0
     72a:	vmrs	APSR_nzcv, fpscr
     72e:	bgt.w	60e <updateBeams()+0x1c6>
     732:	vneg.f32	s15, s15
     736:	b.n	60e <updateBeams()+0x1c6>
     738:	vldr	s15, [pc, #40]	; 764 <updateBeams()+0x31c>
     73c:	b.n	640 <updateBeams()+0x1f8>
     73e:	nop
     740:	.word	0xd2f1a9fc
     744:	.word	0x3ff0624d
     748:	.word	0x66666666
     74c:	.word	0x40046666
     750:	.word	0x400d4000
     754:	.word	0x20001580
     758:	.word	0x20003b78
     75c:	.word	0x20008558
     760:	.word	0x2000856c
     764:	.word	0x00000000
     768:	cmp	r2, #99	; 0x63
     76a:	bgt.n	7fe <updateBeams()+0x3b6>
     76c:	vmov	s14, r2
     770:	vcvt.f64.s32	d6, s14
     774:	vmul.f64	d6, d6, d9
     778:	vcvt.u32.f64	s14, d6
     77c:	vstr	s14, [sp, #12]
     780:	ldrb.w	ip, [sp, #12]
     784:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     786:	cmp	r3, #0
     788:	beq.n	808 <updateBeams()+0x3c0>
     78a:	cmp	r3, #99	; 0x63
     78c:	bgt.n	844 <updateBeams()+0x3fc>
     78e:	vmov	s14, r3
     792:	vcvt.f64.s32	d6, s14
     796:	vmul.f64	d6, d6, d9
     79a:	vcvt.s32.f64	s14, d6
     79e:	vmov	r6, s14
     7a2:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7a6:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7aa:	ldr	r1, [pc, #544]	; (9cc <updateBeams()+0x584>)
     7ac:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7b0:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7b4:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     7b6:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     7b8:	mov.w	r0, r8, asr #31
     7bc:	rsb	r1, r0, r1, asr #8
     7c0:	mov.w	r0, #360	; 0x168
     7c4:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     7c8:	ldr	r0, [pc, #516]	; (9d0 <updateBeams()+0x588>)
     7ca:	smull	r6, r0, r0, r1
     7ce:	asrs	r6, r1, #31
     7d0:	add	r0, r1
     7d2:	str	r6, [sp, #16]
     7d4:	rsb	r0, r6, r0, asr #5
     7d8:	cmp	r0, #5
     7da:	bhi.w	9c2 <updateBeams()+0x57a>
     7de:	tbb	[pc, r0]
     7e2:	.short	0xbadc
     7e4:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     7e8:	ldr	r0, [pc, #488]	; (9d4 <updateBeams()+0x58c>)
     7ea:	bl	9a1c <Adafruit_NeoPixel::show()>
  synapse_B.show();
     7ee:	ldr	r0, [pc, #488]	; (9d8 <updateBeams()+0x590>)
}
     7f0:	add	sp, #44	; 0x2c
     7f2:	vpop	{d8-d10}
     7f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     7fa:	b.w	9a1c <Adafruit_NeoPixel::show()>
     7fe:	mov.w	ip, #254	; 0xfe
     802:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     804:	cmp	r3, #0
     806:	bne.n	78a <updateBeams()+0x342>
     808:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     80c:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     810:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     812:	vcvt.f32.s32	s14, s14
     816:	vmul.f32	s14, s14, s15
     81a:	vcvt.u32.f32	s14, s14
     81e:	vstr	s14, [sp, #12]
     822:	ldrb.w	ip, [sp, #12]
     826:	b.n	696 <updateBeams()+0x24e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     828:	vmov.f32	s15, #112	; 0x3f800000  1.0
     82c:	vsub.f32	s20, s15, s20
     830:	b.n	5b4 <updateBeams()+0x16c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     832:	movs	r3, #0
     834:	strb.w	r3, [sl, #-36]
     838:	b.n	4f8 <updateBeams()+0xb0>
}
     83a:	add	sp, #44	; 0x2c
     83c:	vpop	{d8-d10}
     840:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     844:	movs	r6, #1
     846:	b.n	7a6 <updateBeams()+0x35e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     848:	ldr	r0, [pc, #388]	; (9d0 <updateBeams()+0x588>)
     84a:	smull	r6, r0, r0, r1
     84e:	ldr	r6, [sp, #12]
     850:	add	r0, r1
     852:	vmov	s13, r6
     856:	rsb	lr, r6, ip
     85a:	ldr	r6, [sp, #16]
     85c:	rsb	r0, r6, r0, asr #5
     860:	rsb	r0, r0, r0, lsl #4
     864:	sub.w	r1, r1, r0, lsl #2
     868:	rsb	r1, r1, #60	; 0x3c
     86c:	mul.w	lr, r1, lr
     870:	ldr	r1, [pc, #348]	; (9d0 <updateBeams()+0x588>)
     872:	smull	r1, r0, r1, lr
     876:	mov.w	r1, lr, asr #31
     87a:	add	lr, r0
     87c:	rsb	lr, r1, lr, asr #5
     880:	vmov	r1, s13
     884:	add	r1, lr
     886:	uxtb.w	lr, r1
     88a:	b.n	80c <updateBeams()+0x3c4>
     88c:	ldr	r0, [pc, #320]	; (9d0 <updateBeams()+0x588>)
     88e:	smull	r6, r0, r0, r1
     892:	ldr	r6, [sp, #12]
     894:	add	r0, r1
     896:	rsb	ip, r6, ip
     89a:	vmov	s13, r6
     89e:	ldr	r6, [sp, #16]
     8a0:	rsb	r0, r6, r0, asr #5
     8a4:	vmov	r6, s13
     8a8:	rsb	r0, r0, r0, lsl #4
     8ac:	sub.w	r1, r1, r0, lsl #2
     8b0:	mul.w	ip, r1, ip
     8b4:	ldr	r1, [pc, #280]	; (9d0 <updateBeams()+0x588>)
     8b6:	smull	r1, r0, r1, ip
     8ba:	mov.w	r1, ip, asr #31
     8be:	add	ip, r0
     8c0:	rsb	ip, r1, ip, asr #5
     8c4:	add	r6, ip
     8c6:	uxtb.w	ip, r6
     8ca:	b.n	80c <updateBeams()+0x3c4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     8cc:	ldr	r0, [pc, #256]	; (9d0 <updateBeams()+0x588>)
     8ce:	smull	r6, r0, r0, r1
     8d2:	ldr	r6, [sp, #12]
     8d4:	add	r0, r1
     8d6:	rsb	r6, r6, ip
     8da:	ldr.w	ip, [sp, #12]
     8de:	str	r6, [sp, #20]
     8e0:	mov	r6, r0
     8e2:	ldr	r0, [sp, #16]
     8e4:	rsb	r0, r0, r6, asr #5
     8e8:	ldr	r6, [sp, #20]
     8ea:	rsb	r0, r0, r0, lsl #4
     8ee:	sub.w	r1, r1, r0, lsl #2
     8f2:	ldr	r0, [pc, #220]	; (9d0 <updateBeams()+0x588>)
     8f4:	rsb	r1, r1, #60	; 0x3c
     8f8:	mul.w	r1, r1, r6
     8fc:	smull	r6, r0, r0, r1
     900:	mov	r6, r0
     902:	asrs	r0, r1, #31
     904:	add	r1, r6
     906:	mov	r6, ip
     908:	rsb	r0, r0, r1, asr #5
     90c:	add	r6, r0
     90e:	uxtb	r1, r6
     910:	vmov	s13, r1
     914:	b.n	80c <updateBeams()+0x3c4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     916:	ldr	r0, [pc, #184]	; (9d0 <updateBeams()+0x588>)
     918:	vmov	s13, ip
     91c:	smull	r6, r0, r0, r1
     920:	ldr	r6, [sp, #12]
     922:	add	r0, r1
     924:	rsb	lr, r6, ip
     928:	mov	ip, r6
     92a:	ldr	r6, [sp, #16]
     92c:	rsb	r0, r6, r0, asr #5
     930:	mov	r6, ip
     932:	rsb	r0, r0, r0, lsl #4
     936:	sub.w	r1, r1, r0, lsl #2
     93a:	mul.w	lr, r1, lr
     93e:	ldr	r1, [pc, #144]	; (9d0 <updateBeams()+0x588>)
     940:	smull	r1, r0, r1, lr
     944:	mov.w	r1, lr, asr #31
     948:	add	lr, r0
     94a:	rsb	lr, r1, lr, asr #5
     94e:	add	r6, lr
     950:	uxtb.w	lr, r6
     954:	b.n	80c <updateBeams()+0x3c4>
     956:	ldr	r0, [pc, #120]	; (9d0 <updateBeams()+0x588>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     958:	vmov	s13, ip
     95c:	smull	r6, r0, r0, r1
     960:	ldr	r6, [sp, #12]
     962:	add	r0, r1
     964:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     968:	mov	lr, r6
     96a:	ldr	r6, [sp, #16]
     96c:	rsb	r0, r6, r0, asr #5
     970:	mov	r6, lr
     972:	rsb	r0, r0, r0, lsl #4
     976:	sub.w	r1, r1, r0, lsl #2
     97a:	rsb	r1, r1, #60	; 0x3c
     97e:	mul.w	ip, r1, ip
     982:	ldr	r1, [pc, #76]	; (9d0 <updateBeams()+0x588>)
     984:	smull	r1, r0, r1, ip
     988:	mov.w	r1, ip, asr #31
     98c:	add	ip, r0
     98e:	rsb	ip, r1, ip, asr #5
     992:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     994:	uxtb.w	ip, r6
     998:	b.n	80c <updateBeams()+0x3c4>
     99a:	ldr	r6, [sp, #12]
     99c:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     9a0:	mov	lr, r6
     9a2:	mul.w	r1, r1, r0
     9a6:	ldr	r0, [pc, #40]	; (9d0 <updateBeams()+0x588>)
     9a8:	smull	r6, r0, r0, r1
     9ac:	mov	r6, r0
     9ae:	asrs	r0, r1, #31
     9b0:	add	r1, r6
     9b2:	mov	r6, lr
     9b4:	rsb	r0, r0, r1, asr #5
     9b8:	add	r6, r0
     9ba:	uxtb	r1, r6
     9bc:	vmov	s13, r1
     9c0:	b.n	80c <updateBeams()+0x3c4>
     9c2:	mov.w	ip, #0
     9c6:	vmov	s13, ip
     9ca:	b.n	80c <updateBeams()+0x3c4>
     9cc:	.word	0xb60b60b7
     9d0:	.word	0x88888889
     9d4:	.word	0x20008558
     9d8:	.word	0x2000856c
     9dc:	.word	0x00000000

000009e0 <updateScreensFade()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     9e0:	ldr	r3, [pc, #748]	; (cd0 <updateScreensFade()+0x2f0>)





void updateScreensFade() {
     9e2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9e6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9e8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     9ea:	ldr	r1, [r3, #40]	; 0x28
     9ec:	vpush	{d8}
     9f0:	sub	sp, #28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9f2:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     9f4:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9f6:	ldr	r6, [pc, #728]	; (cd0 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     9f8:	cmp	r3, r1
     9fa:	it	eq
     9fc:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     9fe:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     a00:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     a02:	ite	eq
     a04:	moveq	r5, #1
     a06:	movne	r5, #0
     a08:	cmp	r5, #0
     a0a:	beq.n	9f2 <updateScreensFade()+0x12>
  if (sinceFadeUpdate < FADE_INTERVAL) return;
     a0c:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     a0e:	ldr	r7, [pc, #708]	; (cd4 <updateScreensFade()+0x2f4>)
     a10:	orr.w	r1, r1, r2, lsl #27
     a14:	ldr	r3, [r7, #0]
     a16:	vmov	s15, r1
     a1a:	vldr	d5, [pc, #684]	; cc8 <updateScreensFade()+0x2e8>
     a1e:	vcvt.f64.u32	d7, s15
     a22:	vdiv.f64	d6, d7, d5
     a26:	vcvt.u32.f64	s12, d6
     a2a:	vmov	r2, s12
     a2e:	subs	r3, r2, r3
     a30:	cmp	r3, #15
     a32:	bls.w	c36 <updateScreensFade()+0x256>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     a36:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a38:	mov	r5, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     a3a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a3c:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     a3e:	ldr	r3, [r5, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a40:	ldr	r4, [pc, #652]	; (cd0 <updateScreensFade()+0x2f0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     a42:	cmp	r3, r1
     a44:	it	eq
     a46:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a48:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     a4a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     a4c:	ite	eq
     a4e:	moveq	r6, #1
     a50:	movne	r6, #0
     a52:	cmp	r6, #0
     a54:	beq.n	a3c <updateScreensFade()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     a56:	lsrs	r1, r3, #5
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     a58:	ldr.w	r8, [pc, #652]	; ce8 <updateScreensFade()+0x308>
     a5c:	vmov.f32	s11, #112	; 0x3f800000  1.0
     a60:	orr.w	r1, r1, r2, lsl #27
     a64:	vldr	s10, [r8, #156]	; 0x9c
     a68:	vmov	s15, r1
     a6c:	vcmpe.f32	s10, s11
     a70:	vcvt.f64.u32	d7, s15
     a74:	vmrs	APSR_nzcv, fpscr
     a78:	vldr	d4, [pc, #588]	; cc8 <updateScreensFade()+0x2e8>
     a7c:	vdiv.f64	d6, d7, d4
     a80:	vcvt.u32.f64	s12, d6
     a84:	vstr	s12, [r7]
     a88:	blt.w	c40 <updateScreensFade()+0x260>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     a8c:	movs	r1, #11
     a8e:	ldr	r0, [pc, #584]	; (cd8 <updateScreensFade()+0x2f8>)
     a90:	bl	a304 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a94:	ldr	r0, [pc, #580]	; (cdc <updateScreensFade()+0x2fc>)
     a96:	bl	b458 <Print::println()>
      Serial.println("end of fade");
			if (newFrameReady) {
     a9a:	ldrb.w	r3, [r8, #148]	; 0x94
     a9e:	cmp	r3, #0
     aa0:	bne.w	e50 <updateScreensFade()+0x470>
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     aa4:	ldr.w	r8, [pc, #572]	; ce4 <updateScreensFade()+0x304>
     aa8:	vmov.f32	s15, #112	; 0x3f800000  1.0
     aac:	vldr	s14, [r8, #156]	; 0x9c
     ab0:	vcmpe.f32	s14, s15
     ab4:	vmrs	APSR_nzcv, fpscr
     ab8:	bge.w	c1e <updateScreensFade()+0x23e>
     abc:	ldr.w	r6, [r8, #160]	; 0xa0
     ac0:	ldr.w	r2, [r8, #164]	; 0xa4
     ac4:	ldr.w	ip, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     ac8:	ldr	r3, [pc, #516]	; (cd0 <updateScreensFade()+0x2f0>)
     aca:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     acc:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     ace:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ad0:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     ad2:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     ad4:	cmp	r3, r0
     ad6:	it	eq
     ad8:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ada:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     adc:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     ade:	ite	eq
     ae0:	moveq	r7, #1
     ae2:	movne	r7, #0
     ae4:	cmp	r7, #0
     ae6:	beq.n	ad0 <updateScreensFade()+0xf0>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     ae8:	lsrs	r0, r3, #5
     aea:	vldr	s10, [pc, #500]	; ce0 <updateScreensFade()+0x300>
     aee:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     af2:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     af4:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     af8:	ldr	r5, [pc, #488]	; (ce4 <updateScreensFade()+0x304>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     afa:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     afc:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     b00:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b04:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     b06:	vcvt.f64.u32	d7, s15
     b0a:	vldr	d4, [pc, #444]	; cc8 <updateScreensFade()+0x2e8>
     b0e:	vdiv.f64	d6, d7, d4
     b12:	vcvt.u32.f64	s14, d6
     b16:	vmov	r3, s14
     b1a:	subs	r6, r3, r6
     b1c:	vmov	s15, r6
     b20:	vcvt.f32.u32	s14, s15
     b24:	vdiv.f32	s15, s14, s10
     b28:	vcmpe.f32	s15, s11
     b2c:	vmrs	APSR_nzcv, fpscr
     b30:	it	pl
     b32:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     b36:	vstr	s15, [r8, #156]	; 0x9c
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b3a:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     b3e:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b40:	lsls	r6, r6, #3
     b42:	b.n	b50 <updateScreensFade()+0x170>
     b44:	ldr.w	r2, [r5, #164]	; 0xa4
     b48:	vldr	s15, [r5, #156]	; 0x9c
     b4c:	ldr.w	ip, [r5, #168]	; 0xa8
     b50:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     b54:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b58:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     b5a:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b5c:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b5e:	ldr.w	r0, [r8, #136]	; 0x88
     b62:	uxth	r1, r1
     b64:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b68:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b6c:	vmov	s14, lr
     b70:	ldrb.w	ip, [fp, #1]
     b74:	ldrb.w	lr, [fp, #2]
     b78:	vmov	s13, ip
     b7c:	vcvt.f32.s32	s14, s14
     b80:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     b84:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     b88:	vcvt.f32.s32	s13, s13
     b8c:	ldrb	r3, [r2, r3]
     b8e:	ldrb.w	ip, [lr, #2]
     b92:	vcvt.f32.s32	s12, s12
     b96:	vmov	s10, r3
     b9a:	ldrb.w	r3, [lr, #1]
     b9e:	vmov	s8, ip
     ba2:	vmul.f32	s13, s13, s15
     ba6:	vmov	s9, r3
     baa:	vmul.f32	s12, s12, s15
     bae:	vcvt.f32.s32	s8, s8
     bb2:	ldr.w	fp, [pc, #304]	; ce4 <updateScreensFade()+0x304>
     bb6:	vcvt.f32.s32	s9, s9
     bba:	vmul.f32	s15, s14, s15
     bbe:	vcvt.f32.s32	s10, s10
     bc2:	vmov.f32	s14, s13
     bc6:	vfma.f32	s12, s11, s8
     bca:	vfma.f32	s15, s10, s11
     bce:	vfma.f32	s14, s11, s9
     bd2:	vcvt.s32.f32	s13, s12
     bd6:	vcvt.s32.f32	s15, s15
     bda:	vcvt.s32.f32	s14, s14
     bde:	vstr	s13, [sp, #20]
     be2:	ldrb.w	r2, [sp, #20]
     be6:	vstr	s14, [sp, #12]
     bea:	vstr	s15, [sp, #16]
     bee:	str	r2, [sp, #0]
     bf0:	ldrb.w	r3, [sp, #12]
     bf4:	ldrb.w	r2, [sp, #16]
     bf8:	bl	9c64 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     bfc:	cmp	r4, #24
     bfe:	bne.n	b44 <updateScreensFade()+0x164>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     c00:	add.w	r9, r9, #1
     c04:	adds	r7, #24
     c06:	cmp.w	r9, #24
     c0a:	uxth	r7, r7
     c0c:	beq.w	dc4 <updateScreensFade()+0x3e4>
     c10:	ldr.w	r2, [sl, #164]	; 0xa4
     c14:	vldr	s15, [sl, #156]	; 0x9c
     c18:	ldr.w	ip, [sl, #168]	; 0xa8
     c1c:	b.n	b3a <updateScreensFade()+0x15a>
     c1e:	movs	r1, #11
     c20:	ldr	r0, [pc, #180]	; (cd8 <updateScreensFade()+0x2f8>)
     c22:	bl	a304 <usb_serial_write>
     c26:	ldr	r0, [pc, #180]	; (cdc <updateScreensFade()+0x2fc>)
     c28:	bl	b458 <Print::println()>
	}

	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
     c2c:	ldrb.w	r3, [r8, #148]	; 0x94
     c30:	cmp	r3, #0
     c32:	bne.w	de0 <updateScreensFade()+0x400>
  sinceFadeUpdate = 0;

  screen_A.updateFade();
  screen_B.updateFade();
}
     c36:	add	sp, #28
     c38:	vpop	{d8}
     c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c40:	ldr.w	r6, [r8, #160]	; 0xa0
     c44:	ldr.w	r2, [r8, #164]	; 0xa4
     c48:	ldr.w	ip, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     c4c:	ldr	r3, [pc, #128]	; (cd0 <updateScreensFade()+0x2f0>)
     c4e:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c50:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     c52:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c54:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     c56:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     c58:	cmp	r3, r0
     c5a:	it	eq
     c5c:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     c5e:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     c60:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     c62:	ite	eq
     c64:	moveq	r7, #1
     c66:	movne	r7, #0
     c68:	cmp	r7, #0
     c6a:	beq.n	c54 <updateScreensFade()+0x274>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c6c:	lsrs	r0, r3, #5
     c6e:	vldr	s10, [pc, #112]	; ce0 <updateScreensFade()+0x300>
     c72:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     c76:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c78:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c7c:	ldr	r5, [pc, #104]	; (ce8 <updateScreensFade()+0x308>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     c7e:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c80:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     c84:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c88:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     c8a:	vcvt.f64.u32	d7, s15
     c8e:	vldr	d4, [pc, #56]	; cc8 <updateScreensFade()+0x2e8>
     c92:	vdiv.f64	d6, d7, d4
     c96:	vcvt.u32.f64	s14, d6
     c9a:	vmov	r3, s14
     c9e:	subs	r6, r3, r6
     ca0:	vmov	s15, r6
     ca4:	vcvt.f32.u32	s14, s15
     ca8:	vdiv.f32	s15, s14, s10
     cac:	vcmpe.f32	s15, s11
     cb0:	vmrs	APSR_nzcv, fpscr
     cb4:	it	pl
     cb6:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     cba:	vstr	s15, [r8, #156]	; 0x9c
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     cbe:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     cc2:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     cc4:	lsls	r6, r6, #3
     cc6:	b.n	cf8 <updateScreensFade()+0x318>
     cc8:	.word	0xd2f1a9fc
     ccc:	.word	0x3ff0624d
     cd0:	.word	0x400d4000
     cd4:	.word	0x20003d0c
     cd8:	.word	0x20000460
     cdc:	.word	0x20000d08
     ce0:	.word	0x43c80000
     ce4:	.word	0x20003aa4
     ce8:	.word	0x200039f4
     cec:	ldr.w	r2, [r5, #164]	; 0xa4
     cf0:	vldr	s15, [r5, #156]	; 0x9c
     cf4:	ldr.w	ip, [r5, #168]	; 0xa8
     cf8:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     cfc:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d00:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     d02:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d04:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d06:	ldr.w	r0, [r8, #136]	; 0x88
     d0a:	uxth	r1, r1
     d0c:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d10:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d14:	vmov	s14, lr
     d18:	ldrb.w	ip, [fp, #1]
     d1c:	ldrb.w	lr, [fp, #2]
     d20:	vmov	s13, ip
     d24:	vcvt.f32.s32	s14, s14
     d28:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     d2c:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     d30:	vcvt.f32.s32	s13, s13
     d34:	ldrb	r3, [r2, r3]
     d36:	ldrb.w	ip, [lr, #2]
     d3a:	vcvt.f32.s32	s12, s12
     d3e:	vmov	s10, r3
     d42:	ldrb.w	r3, [lr, #1]
     d46:	vmov	s8, ip
     d4a:	vmul.f32	s13, s13, s15
     d4e:	vmov	s9, r3
     d52:	vmul.f32	s12, s12, s15
     d56:	vcvt.f32.s32	s8, s8
     d5a:	ldr.w	fp, [pc, #376]	; ed4 <updateScreensFade()+0x4f4>
     d5e:	vcvt.f32.s32	s9, s9
     d62:	vmul.f32	s15, s14, s15
     d66:	vcvt.f32.s32	s10, s10
     d6a:	vmov.f32	s14, s13
     d6e:	vfma.f32	s12, s11, s8
     d72:	vfma.f32	s15, s10, s11
     d76:	vfma.f32	s14, s11, s9
     d7a:	vcvt.s32.f32	s13, s12
     d7e:	vcvt.s32.f32	s15, s15
     d82:	vcvt.s32.f32	s14, s14
     d86:	vstr	s13, [sp, #20]
     d8a:	ldrb.w	r2, [sp, #20]
     d8e:	vstr	s14, [sp, #12]
     d92:	vstr	s15, [sp, #16]
     d96:	str	r2, [sp, #0]
     d98:	ldrb.w	r3, [sp, #12]
     d9c:	ldrb.w	r2, [sp, #16]
     da0:	bl	9c64 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     da4:	cmp	r4, #24
     da6:	bne.n	cec <updateScreensFade()+0x30c>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     da8:	add.w	r9, r9, #1
     dac:	adds	r7, #24
     dae:	cmp.w	r9, #24
     db2:	uxth	r7, r7
     db4:	beq.n	dd6 <updateScreensFade()+0x3f6>
     db6:	ldr.w	r2, [sl, #164]	; 0xa4
     dba:	vldr	s15, [sl, #156]	; 0x9c
     dbe:	ldr.w	ip, [sl, #168]	; 0xa8
     dc2:	b.n	cbe <updateScreensFade()+0x2de>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     dc4:	ldr.w	r0, [fp, #136]	; 0x88
     dc8:	add	sp, #28
     dca:	vpop	{d8}
     dce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd2:	b.w	9a1c <Adafruit_NeoPixel::show()>
     dd6:	ldr.w	r0, [fp, #136]	; 0x88
     dda:	bl	9a1c <Adafruit_NeoPixel::show()>
     dde:	b.n	aa4 <updateScreensFade()+0xc4>
     de0:	movs	r1, #15
     de2:	ldr	r0, [pc, #228]	; (ec8 <updateScreensFade()+0x4e8>)
     de4:	bl	a304 <usb_serial_write>
     de8:	ldr	r0, [pc, #224]	; (ecc <updateScreensFade()+0x4ec>)
     dea:	bl	b458 <Print::println()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     dee:	ldr	r3, [pc, #224]	; (ed0 <updateScreensFade()+0x4f0>)
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     df0:	ldr.w	r1, [r8, #164]	; 0xa4
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     df4:	ldr.w	ip, [r8, #172]	; 0xac
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     df8:	mov	r5, r3
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     dfa:	ldr.w	r2, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     dfe:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     e00:	ldr	r3, [r3, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     e02:	str.w	r1, [r8, #172]	; 0xac
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e06:	str.w	ip, [r8, #168]	; 0xa8
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e0a:	str.w	r2, [r8, #164]	; 0xa4
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e0e:	ldr	r0, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     e10:	ldr	r1, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     e12:	cmp	r1, r3
     e14:	it	eq
     e16:	cmpeq	r0, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e18:	mov	r4, r0
    uint32_t lo2 = SNVS_HPRTCLR;
     e1a:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
     e1c:	ite	eq
     e1e:	moveq	r6, #1
     e20:	movne	r6, #0
     e22:	cmp	r6, #0
     e24:	beq.n	e0e <updateScreensFade()+0x42e>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     e26:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     e28:	movs	r1, #0
     e2a:	orr.w	r3, r3, r0, lsl #27
     e2e:	strb.w	r1, [r8, #148]	; 0x94
     e32:	vmov	s15, r3
     e36:	vldr	d5, [pc, #136]	; ec0 <updateScreensFade()+0x4e0>
     e3a:	vcvt.f64.u32	d7, s15
     e3e:	vdiv.f64	d6, d7, d5
     e42:	vcvt.u32.f64	s15, d6
     e46:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     e4a:	vstr	s15, [r8, #160]	; 0xa0
     e4e:	b.n	ac8 <updateScreensFade()+0xe8>
     e50:	movs	r1, #15
     e52:	ldr	r0, [pc, #116]	; (ec8 <updateScreensFade()+0x4e8>)
     e54:	bl	a304 <usb_serial_write>
     e58:	ldr	r0, [pc, #112]	; (ecc <updateScreensFade()+0x4ec>)
     e5a:	bl	b458 <Print::println()>
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e5e:	mov	r6, r4
	void updateFade() {
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     e60:	ldr.w	r1, [r8, #164]	; 0xa4
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e64:	ldr.w	ip, [r8, #172]	; 0xac
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e68:	ldr.w	r2, [r8, #168]	; 0xa8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     e6c:	ldr	r5, [r4, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     e6e:	ldr	r3, [r4, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     e70:	str.w	r1, [r8, #172]	; 0xac
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     e74:	str.w	ip, [r8, #168]	; 0xa8
		if (fadeFactor >= 1) {
      Serial.println("end of fade");
			if (newFrameReady) {
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     e78:	str.w	r2, [r8, #164]	; 0xa4
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e7c:	ldr	r0, [r6, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     e7e:	ldr	r1, [r6, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     e80:	cmp	r1, r3
     e82:	it	eq
     e84:	cmpeq	r0, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     e86:	mov	r5, r0
    uint32_t lo2 = SNVS_HPRTCLR;
     e88:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
     e8a:	ite	eq
     e8c:	moveq	r4, #1
     e8e:	movne	r4, #0
     e90:	cmp	r4, #0
     e92:	beq.n	e7c <updateScreensFade()+0x49c>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     e94:	lsrs	r3, r1, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     e96:	movs	r1, #0
     e98:	orr.w	r3, r3, r0, lsl #27
     e9c:	strb.w	r1, [r8, #148]	; 0x94
     ea0:	vmov	s15, r3
     ea4:	vldr	d5, [pc, #24]	; ec0 <updateScreensFade()+0x4e0>
     ea8:	vcvt.f64.u32	d7, s15
     eac:	vdiv.f64	d6, d7, d5
     eb0:	vcvt.u32.f64	s15, d6
     eb4:	vmov	r6, s15
        Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     eb8:	vstr	s15, [r8, #160]	; 0xa0
     ebc:	b.n	c4c <updateScreensFade()+0x26c>
     ebe:	nop
     ec0:	.word	0xd2f1a9fc
     ec4:	.word	0x3ff0624d
     ec8:	.word	0x2000046c
     ecc:	.word	0x20000d08
     ed0:	.word	0x400d4000
     ed4:	.word	0x200039f4

00000ed8 <setup>:
}




void setup() {
     ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rtc_set(0);
     edc:	movs	r0, #0
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     ede:	mov.w	sl, #0
     ee2:	ldr	r7, [pc, #700]	; (11a0 <setup+0x2c8>)
}




void setup() {
     ee4:	vpush	{d8-d9}
     ee8:	sub	sp, #12
  rtc_set(0);
     eea:	bl	ae38 <rtc_set>
  randomSeed(analogRead(17));
     eee:	movs	r0, #17
     ef0:	bl	af78 <analogRead>
     ef4:	bl	b1f8 <randomSeed(unsigned long)>
			
		}
	}

	void init_screen() {	
		_screen->begin();
     ef8:	ldr	r3, [pc, #676]	; (11a0 <setup+0x2c8>)
     efa:	ldr.w	r0, [r3, #136]	; 0x88
     efe:	bl	9970 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
     f02:	ldr	r3, [pc, #668]	; (11a0 <setup+0x2c8>)
     f04:	movs	r1, #255	; 0xff
     f06:	ldr.w	r0, [r3, #136]	; 0x88
     f0a:	bl	9d74 <Adafruit_NeoPixel::setBrightness(unsigned char)>
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
     f0e:	ldr	r3, [pc, #656]	; (11a0 <setup+0x2c8>)
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
     f10:	ldr	r1, [pc, #652]	; (11a0 <setup+0x2c8>)
     f12:	ldr.w	r6, [r3, #140]	; 0x8c
     f16:	ldr.w	r0, [r3, #144]	; 0x90
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
     f1a:	ldr	r5, [r3, #124]	; 0x7c
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     f1c:	ldr	r2, [r3, #4]
     f1e:	ldr	r3, [r3, #8]
     f20:	add.w	r8, r5, #4640	; 0x1220
     f24:	ldr.w	r9, [r1, #28]
     f28:	str	r3, [r5, #8]
     f2a:	ldr	r3, [pc, #628]	; (11a0 <setup+0x2c8>)
     f2c:	ldr.w	lr, [r1, #32]
     f30:	ldr	r3, [r3, #12]
     f32:	ldr.w	ip, [r1, #36]	; 0x24
     f36:	str	r3, [r5, #12]
     f38:	ldr	r3, [pc, #612]	; (11a0 <setup+0x2c8>)
     f3a:	ldr	r7, [r7, #24]
     f3c:	ldr	r3, [r3, #16]
     f3e:	str	r3, [r5, #16]
     f40:	ldr	r3, [pc, #604]	; (11a0 <setup+0x2c8>)
     f42:	ldr	r3, [r3, #20]
     f44:	str	r3, [r5, #20]
     f46:	ldr	r3, [pc, #600]	; (11a0 <setup+0x2c8>)
     f48:	ldr	r3, [r3, #0]
     f4a:	mov	r4, r3
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
     f4c:	ldr	r3, [r1, #120]	; 0x78
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     f4e:	str	r2, [r5, #4]
     f50:	ldr	r2, [pc, #588]	; (11a0 <setup+0x2c8>)
     f52:	add.w	fp, r3, #4640	; 0x1220
     f56:	ldr	r1, [r1, #40]	; 0x28
     f58:	ldr	r2, [r2, #44]	; 0x2c
     f5a:	str	r4, [r5, #0]
     f5c:	movw	r4, #4636	; 0x121c
     f60:	strb.w	sl, [r5, #24]
     f64:	str	r6, [r5, r4]
     f66:	str.w	r0, [r8]
     f6a:	str	r2, [r3, #20]
     f6c:	mov.w	r2, #1
     f70:	str.w	ip, [r3, #12]
     f74:	str	r1, [r3, #16]
     f76:	strb	r2, [r3, #24]
     f78:	ldr	r1, [pc, #548]	; (11a0 <setup+0x2c8>)
     f7a:	stmia.w	r3, {r7, r9, lr}
     f7e:	str	r6, [r3, r4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
     f80:	ldr	r3, [pc, #540]	; (11a0 <setup+0x2c8>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     f82:	ldr	r4, [pc, #540]	; (11a0 <setup+0x2c8>)
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
     f84:	ldr.w	r2, [r3, #128]	; 0x80
		initialize_automaton(_sat_automaton, &possible_automatons[3], true);
     f88:	ldr.w	r3, [r3, #132]	; 0x84
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
     f8c:	ldr.w	ip, [r4, #64]	; 0x40
     f90:	ldr.w	lr, [r4, #68]	; 0x44
     f94:	add.w	r4, r3, #4640	; 0x1220
     f98:	ldr.w	sl, [r1, #52]	; 0x34
     f9c:	add.w	r1, r2, #4640	; 0x1220
     fa0:	str	r4, [sp, #4]
     fa2:	ldr	r4, [pc, #508]	; (11a0 <setup+0x2c8>)
     fa4:	mov	r7, r1
     fa6:	str.w	r0, [fp]
     faa:	movw	fp, #4636	; 0x121c
     fae:	ldr	r4, [r4, #48]	; 0x30
     fb0:	ldr	r1, [pc, #492]	; (11a0 <setup+0x2c8>)
     fb2:	str.w	r6, [r2, fp]
     fb6:	ldr.w	r9, [r1, #56]	; 0x38
     fba:	ldr	r1, [r1, #60]	; 0x3c
     fbc:	str.w	r9, [r2, #8]
     fc0:	stmia.w	r2, {r4, sl}
     fc4:	ldr	r4, [pc, #472]	; (11a0 <setup+0x2c8>)
     fc6:	ldr.w	r9, [r4, #76]	; 0x4c
     fca:	str	r1, [r2, #12]
     fcc:	mov.w	r1, #1
     fd0:	ldr.w	sl, [r4, #80]	; 0x50
     fd4:	str.w	ip, [r2, #16]
     fd8:	ldr.w	ip, [r4, #84]	; 0x54
     fdc:	str.w	lr, [r2, #20]
     fe0:	ldr.w	lr, [r4, #88]	; 0x58
     fe4:	strb	r1, [r2, #24]
     fe6:	ldr	r2, [r4, #92]	; 0x5c
     fe8:	str	r0, [r7, #0]
     fea:	ldr	r1, [r4, #72]	; 0x48
     fec:	str.w	r6, [r3, fp]
     ff0:	str	r2, [r3, #20]
     ff2:	mov.w	r2, #1
     ff6:	str.w	lr, [r3, #16]
     ffa:	stmia.w	r3, {r1, r9, sl, ip}
     ffe:	strb	r2, [r3, #24]
    1000:	ldr	r3, [sp, #4]
    1002:	ldr	r6, [r4, #100]	; 0x64
    1004:	str	r0, [r3, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1006:	ldr	r3, [r4, #96]	; 0x60
    1008:	ldrb.w	fp, [r4, #104]	; 0x68
    100c:	subs	r3, #1
    100e:	cmp	r3, #3
    1010:	bhi.w	205e <setup+0x1186>
    1014:	tbb	[pc, r3]
    1018:	.word	0x0248c69b
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    101c:	cmp	r6, #0
    101e:	ble.w	1254 <setup+0x37c>
    1022:	mov	r9, r5
    1024:	movs	r7, #0
    1026:	mov	r5, fp
    1028:	b.n	103e <setup+0x166>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    102a:	add.w	r3, r4, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    102e:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1030:	ldr.w	r2, [r9]
    1034:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1038:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    103a:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    103c:	beq.n	1086 <setup+0x1ae>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    103e:	movs	r0, #14
    1040:	bl	b204 <random(unsigned long)>
    1044:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1048:	movs	r0, #14
    104a:	bl	b204 <random(unsigned long)>
    104e:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1050:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1054:	cmp	r5, #0
    1056:	beq.n	102a <setup+0x152>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1058:	ldr.w	r3, [r9, #20]
    105c:	add.w	r8, r8, r8, lsl #1
    1060:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1064:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1066:	add.w	r4, r4, r8, lsl #3
    106a:	subs	r0, r3, r2
    106c:	add.w	r4, r9, r4, lsl #2
    1070:	adds	r0, #2
    1072:	bl	b204 <random(unsigned long)>
    1076:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    107a:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    107c:	add.w	r3, r3, #4294967295
    1080:	add	r0, r3
    1082:	str	r0, [r4, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1084:	bne.n	103e <setup+0x166>
    1086:	ldr	r3, [pc, #280]	; (11a0 <setup+0x2c8>)
    1088:	ldr	r2, [pc, #276]	; (11a0 <setup+0x2c8>)
    108a:	ldr	r5, [r3, #120]	; 0x78
    108c:	ldr	r3, [r3, #96]	; 0x60
    108e:	ldrb.w	fp, [r2, #104]	; 0x68
    1092:	subs	r3, #1
    1094:	ldr	r6, [r2, #100]	; 0x64
    1096:	cmp	r3, #3
    1098:	bhi.w	2136 <setup+0x125e>
    109c:	tbh	[pc, r3, lsl #1]
    10a0:	.word	0x063e00bd
    10a4:	.word	0x09b605ea
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    10a8:	movs	r0, #14
    10aa:	mov	r7, r5
    10ac:	bl	b204 <random(unsigned long)>
    10b0:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    10b2:	movs	r0, #14
    10b4:	add.w	r9, r5, #96	; 0x60
    10b8:	bl	b204 <random(unsigned long)>
    10bc:	vmov	s15, r6
    10c0:	adds	r4, #5
    10c2:	adds	r3, r0, #5
    10c4:	vcvt.f64.s32	d9, s15
    10c8:	rsb	sl, r0, #19
    10cc:	negs	r3, r3
    10ce:	rsb	r8, r4, #0
    10d2:	str	r3, [sp, #4]
    10d4:	vmov	s15, r8
    10d8:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    10da:	mov	r6, r7
    10dc:	vcvt.f64.s32	d8, s15
    10e0:	vmul.f64	d8, d8, d8
    10e4:	b.n	10f2 <setup+0x21a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    10e6:	ldr	r3, [r5, #0]
    10e8:	str	r3, [r6, #28]
    10ea:	adds	r4, #1
    10ec:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    10ee:	cmp	r4, sl
    10f0:	beq.n	1142 <setup+0x26a>
      double xx = x-midPoint_y;
    10f2:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    10f6:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    10fa:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    10fe:	vfma.f64	d0, d7, d7
    1102:	vsqrt.f64	d7, d0
    1106:	vcmp.f64	d7, d7
    110a:	vmrs	APSR_nzcv, fpscr
    110e:	bne.w	2624 <setup+0x174c>
    1112:	vcmpe.f64	d7, d9
    1116:	vmrs	APSR_nzcv, fpscr
    111a:	bhi.n	10ea <setup+0x212>
        if (rand){
    111c:	cmp.w	fp, #0
    1120:	beq.n	10e6 <setup+0x20e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1122:	ldr	r3, [r5, #20]
    1124:	adds	r4, #1
    1126:	ldr	r0, [r5, #16]
    1128:	adds	r6, #96	; 0x60
    112a:	subs	r0, r3, r0
    112c:	adds	r0, #2
    112e:	bl	b204 <random(unsigned long)>
    1132:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1134:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1136:	add.w	r3, r3, #4294967295
    113a:	add	r0, r3
    113c:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1140:	bne.n	10f2 <setup+0x21a>
    1142:	adds	r7, #4
    1144:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1148:	cmp	r7, r9
    114a:	bne.n	10d4 <setup+0x1fc>
    114c:	b.n	1086 <setup+0x1ae>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    114e:	movs	r0, #14
    1150:	bl	b204 <random(unsigned long)>
    1154:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1156:	movs	r0, #14
    1158:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    115c:	cmp	r6, #0
    115e:	ble.n	1086 <setup+0x1ae>
    1160:	add.w	r4, r4, r4, lsl #1
    1164:	add.w	r3, r0, #12
    1168:	movs	r7, #0
    116a:	add.w	r4, r3, r4, lsl #3
    116e:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1172:	cmp.w	fp, #0
    1176:	bne.n	118a <setup+0x2b2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1178:	ldr	r3, [r5, #0]
    117a:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    117c:	adds	r7, #1
    117e:	adds	r4, #4
    1180:	cmp	r7, r6
    1182:	beq.n	1086 <setup+0x1ae>
      if (rand){
    1184:	cmp.w	fp, #0
    1188:	beq.n	1178 <setup+0x2a0>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    118a:	ldr	r3, [r5, #20]
    118c:	ldr	r2, [r5, #16]
    118e:	subs	r0, r3, r2
    1190:	adds	r0, #2
    1192:	bl	b204 <random(unsigned long)>
    1196:	ldr	r3, [r5, #16]
    1198:	subs	r3, #1
    119a:	add	r0, r3
    119c:	str	r0, [r4, #0]
    119e:	b.n	117c <setup+0x2a4>
    11a0:	.word	0x200039f4
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    11a4:	movs	r0, #14
    11a6:	bl	b204 <random(unsigned long)>
    11aa:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    11ac:	movs	r0, #14
    11ae:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    11b2:	cmp	r6, #0
    11b4:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    11b6:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    11ba:	it	lt
    11bc:	addlt	r3, r6, #1
    11be:	cmp	r6, #0
    11c0:	mov.w	r8, r3, asr #1
    11c4:	it	lt
    11c6:	addlt	r6, #1
    11c8:	rsb	r8, r8, #0
    11cc:	asrs	r6, r6, #1
    11ce:	add.w	r7, r0, r8
    11d2:	adds	r3, r0, r6
    11d4:	cmp	r7, r3
    11d6:	str	r3, [sp, #4]
    11d8:	bge.w	1086 <setup+0x1ae>
    11dc:	add	r8, r4
    11de:	add	r4, r6
    11e0:	add.w	r6, r8, r8, lsl #1
    11e4:	add.w	r6, r7, r6, lsl #3
    11e8:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    11ec:	cmp	r8, r4
    11ee:	bge.n	120e <setup+0x336>
    11f0:	mov	sl, r6
    11f2:	mov	r9, r8
        if (rand){
    11f4:	cmp.w	fp, #0
    11f8:	bne.w	24f2 <setup+0x161a>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    11fc:	ldr	r3, [r5, #0]
    11fe:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1202:	add.w	r9, r9, #1
    1206:	add.w	sl, sl, #96	; 0x60
    120a:	cmp	r9, r4
    120c:	bne.n	11f4 <setup+0x31c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    120e:	adds	r7, #1
    1210:	ldr	r3, [sp, #4]
    1212:	adds	r6, #4
    1214:	cmp	r7, r3
    1216:	bne.n	11ec <setup+0x314>
    1218:	b.n	1086 <setup+0x1ae>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    121a:	movs	r0, #14
    121c:	bl	b204 <random(unsigned long)>
    1220:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1222:	movs	r0, #14
    1224:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1228:	cmp	r6, #0
    122a:	ble.n	1254 <setup+0x37c>
    122c:	add.w	r4, r4, r4, lsl #1
    1230:	add.w	r3, r0, #12
    1234:	mov	r8, r6
    1236:	movs	r7, #0
    1238:	add.w	r4, r3, r4, lsl #3
    123c:	mov	r6, fp
    123e:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1242:	cmp	r6, #0
    1244:	bne.w	25a4 <setup+0x16cc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1248:	ldr	r3, [r5, #0]
    124a:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    124c:	adds	r7, #1
    124e:	adds	r4, #4
    1250:	cmp	r7, r8
    1252:	bne.n	1242 <setup+0x36a>
    1254:	ldr	r3, [pc, #544]	; (1478 <setup+0x5a0>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    1256:	ldr	r2, [pc, #544]	; (1478 <setup+0x5a0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1258:	ldr	r3, [r3, #108]	; 0x6c
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    125a:	ldr.w	r5, [r2, #128]	; 0x80
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    125e:	subs	r3, #1
    1260:	ldr	r6, [r2, #112]	; 0x70
    1262:	ldrb.w	fp, [r2, #116]	; 0x74
    1266:	cmp	r3, #3
    1268:	bhi.w	1ff4 <setup+0x111c>
    126c:	tbb	[pc, r3]
    1270:	.word	0x024a9dd8
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1274:	cmp	r6, #0
    1276:	ble.w	14b4 <setup+0x5dc>
    127a:	mov	r9, r5
    127c:	movs	r7, #0
    127e:	mov	r5, fp
    1280:	b.n	1296 <setup+0x3be>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1282:	add.w	r3, r4, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1286:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1288:	ldr.w	r2, [r9]
    128c:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1290:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1292:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1294:	beq.n	12de <setup+0x406>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1296:	movs	r0, #14
    1298:	bl	b204 <random(unsigned long)>
    129c:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    12a0:	movs	r0, #14
    12a2:	bl	b204 <random(unsigned long)>
    12a6:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    12a8:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    12ac:	cmp	r5, #0
    12ae:	beq.n	1282 <setup+0x3aa>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    12b0:	ldr.w	r3, [r9, #20]
    12b4:	add.w	r8, r8, r8, lsl #1
    12b8:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    12bc:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    12be:	add.w	r4, r4, r8, lsl #3
    12c2:	subs	r0, r3, r2
    12c4:	add.w	r4, r9, r4, lsl #2
    12c8:	adds	r0, #2
    12ca:	bl	b204 <random(unsigned long)>
    12ce:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    12d2:	cmp	r7, r6
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    12d4:	add.w	r3, r3, #4294967295
    12d8:	add	r0, r3
    12da:	str	r0, [r4, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    12dc:	bne.n	1296 <setup+0x3be>
    12de:	ldr	r3, [pc, #408]	; (1478 <setup+0x5a0>)
    12e0:	ldr	r2, [pc, #404]	; (1478 <setup+0x5a0>)
    12e2:	ldr	r3, [r3, #108]	; 0x6c
    12e4:	ldr	r4, [r2, #112]	; 0x70
    12e6:	ldrb.w	fp, [r2, #116]	; 0x74
    12ea:	subs	r3, #1

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
    12ec:	ldr	r2, [pc, #392]	; (1478 <setup+0x5a0>)
    12ee:	ldr.w	r5, [r2, #132]	; 0x84
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    12f2:	cmp	r3, #3
    12f4:	bhi.w	22dc <setup+0x1404>
    12f8:	tbh	[pc, r3, lsl #1]
    12fc:	.word	0x05b200c0
    1300:	.word	0x0854055e
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1304:	movs	r0, #14
    1306:	mov	r7, r5
    1308:	bl	b204 <random(unsigned long)>
    130c:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    130e:	movs	r0, #14
    1310:	add.w	r9, r5, #96	; 0x60
    1314:	bl	b204 <random(unsigned long)>
    1318:	vmov	s15, r6
    131c:	adds	r4, #5
    131e:	adds	r3, r0, #5
    1320:	vcvt.f64.s32	d9, s15
    1324:	rsb	sl, r0, #19
    1328:	negs	r3, r3
    132a:	rsb	r8, r4, #0
    132e:	str	r3, [sp, #4]
    1330:	vmov	s15, r8
    1334:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1336:	mov	r6, r7
    1338:	vcvt.f64.s32	d8, s15
    133c:	vmul.f64	d8, d8, d8
    1340:	b.n	134e <setup+0x476>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1342:	ldr	r3, [r5, #0]
    1344:	str	r3, [r6, #28]
    1346:	adds	r4, #1
    1348:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    134a:	cmp	r4, sl
    134c:	beq.n	139e <setup+0x4c6>
      double xx = x-midPoint_y;
    134e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1352:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1356:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    135a:	vfma.f64	d0, d7, d7
    135e:	vsqrt.f64	d7, d0
    1362:	vcmp.f64	d7, d7
    1366:	vmrs	APSR_nzcv, fpscr
    136a:	bne.w	263c <setup+0x1764>
    136e:	vcmpe.f64	d7, d9
    1372:	vmrs	APSR_nzcv, fpscr
    1376:	bhi.n	1346 <setup+0x46e>
        if (rand){
    1378:	cmp.w	fp, #0
    137c:	beq.n	1342 <setup+0x46a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    137e:	ldr	r3, [r5, #20]
    1380:	adds	r4, #1
    1382:	ldr	r0, [r5, #16]
    1384:	adds	r6, #96	; 0x60
    1386:	subs	r0, r3, r0
    1388:	adds	r0, #2
    138a:	bl	b204 <random(unsigned long)>
    138e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1390:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1392:	add.w	r3, r3, #4294967295
    1396:	add	r0, r3
    1398:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    139c:	bne.n	134e <setup+0x476>
    139e:	adds	r7, #4
    13a0:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    13a4:	cmp	r7, r9
    13a6:	bne.n	1330 <setup+0x458>
    13a8:	b.n	12de <setup+0x406>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    13aa:	movs	r0, #14
    13ac:	bl	b204 <random(unsigned long)>
    13b0:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    13b2:	movs	r0, #14
    13b4:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    13b8:	cmp	r6, #0
    13ba:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    13bc:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    13c0:	it	lt
    13c2:	addlt	r3, r6, #1
    13c4:	cmp	r6, #0
    13c6:	mov.w	r8, r3, asr #1
    13ca:	it	lt
    13cc:	addlt	r6, #1
    13ce:	rsb	r8, r8, #0
    13d2:	asrs	r6, r6, #1
    13d4:	add.w	r7, r0, r8
    13d8:	adds	r3, r0, r6
    13da:	cmp	r7, r3
    13dc:	str	r3, [sp, #4]
    13de:	bge.w	12de <setup+0x406>
    13e2:	add	r8, r4
    13e4:	add	r4, r6
    13e6:	add.w	r6, r8, r8, lsl #1
    13ea:	add.w	r6, r7, r6, lsl #3
    13ee:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    13f2:	cmp	r8, r4
    13f4:	bge.n	1414 <setup+0x53c>
    13f6:	mov	sl, r6
    13f8:	mov	r9, r8
        if (rand){
    13fa:	cmp.w	fp, #0
    13fe:	bne.w	250c <setup+0x1634>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1402:	ldr	r3, [r5, #0]
    1404:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1408:	add.w	r9, r9, #1
    140c:	add.w	sl, sl, #96	; 0x60
    1410:	cmp	r9, r4
    1412:	bne.n	13fa <setup+0x522>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1414:	adds	r7, #1
    1416:	ldr	r3, [sp, #4]
    1418:	adds	r6, #4
    141a:	cmp	r7, r3
    141c:	bne.n	13f2 <setup+0x51a>
    141e:	b.n	12de <setup+0x406>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1420:	movs	r0, #14
    1422:	bl	b204 <random(unsigned long)>
    1426:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1428:	movs	r0, #14
    142a:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    142e:	cmp	r6, #0
    1430:	ble.w	12de <setup+0x406>
    1434:	add.w	r3, r0, #12
    1438:	add.w	r4, r4, r4, lsl #1
    143c:	movs	r7, #0
    143e:	add.w	r4, r3, r4, lsl #3
    1442:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1446:	cmp.w	fp, #0
    144a:	bne.n	1460 <setup+0x588>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    144c:	ldr	r3, [r5, #0]
    144e:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1450:	adds	r7, #1
    1452:	adds	r4, #4
    1454:	cmp	r7, r6
    1456:	beq.w	12de <setup+0x406>
      if (rand){
    145a:	cmp.w	fp, #0
    145e:	beq.n	144c <setup+0x574>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1460:	ldr	r3, [r5, #20]
    1462:	ldr	r2, [r5, #16]
    1464:	subs	r0, r3, r2
    1466:	adds	r0, #2
    1468:	bl	b204 <random(unsigned long)>
    146c:	ldr	r3, [r5, #16]
    146e:	subs	r3, #1
    1470:	add	r0, r3
    1472:	str	r0, [r4, #0]
    1474:	b.n	1450 <setup+0x578>
    1476:	nop
    1478:	.word	0x200039f4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    147c:	movs	r0, #14
    147e:	bl	b204 <random(unsigned long)>
    1482:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1484:	movs	r0, #14
    1486:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    148a:	cmp	r4, #0
    148c:	ble.n	14b4 <setup+0x5dc>
    148e:	add.w	r6, r6, r6, lsl #1
    1492:	add.w	r3, r0, #12
    1496:	movs	r7, #0
    1498:	add.w	r6, r3, r6, lsl #3
    149c:	add.w	r6, r5, r6, lsl #2
      if (rand){
    14a0:	cmp.w	fp, #0
    14a4:	bne.w	25bc <setup+0x16e4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    14a8:	ldr	r3, [r5, #0]
    14aa:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    14ac:	adds	r7, #1
    14ae:	adds	r6, #4
    14b0:	cmp	r7, r4
    14b2:	bne.n	14a0 <setup+0x5c8>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    14b4:	ldr	r3, [pc, #716]	; (1784 <setup+0x8ac>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    14b6:	mov.w	sl, #0
    14ba:	ldr	r7, [pc, #712]	; (1784 <setup+0x8ac>)
			
		}
	}

	void init_screen() {	
		_screen->begin();
    14bc:	ldr.w	r0, [r3, #136]	; 0x88
    14c0:	bl	9970 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    14c4:	ldr	r3, [pc, #700]	; (1784 <setup+0x8ac>)
    14c6:	movs	r1, #255	; 0xff
    14c8:	ldr.w	r0, [r3, #136]	; 0x88
    14cc:	bl	9d74 <Adafruit_NeoPixel::setBrightness(unsigned char)>
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    14d0:	ldr	r3, [pc, #688]	; (1784 <setup+0x8ac>)
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    14d2:	ldr	r1, [pc, #688]	; (1784 <setup+0x8ac>)
    14d4:	ldr.w	r0, [r3, #144]	; 0x90
    14d8:	ldr.w	r6, [r3, #140]	; 0x8c
		newFrameReady = false;
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
    14dc:	ldr	r5, [r3, #124]	; 0x7c
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    14de:	ldr	r2, [r3, #4]
    14e0:	ldr	r3, [r3, #8]
    14e2:	add.w	r8, r5, #4640	; 0x1220
    14e6:	ldr.w	r9, [r1, #28]
    14ea:	str	r3, [r5, #8]
    14ec:	ldr	r3, [pc, #660]	; (1784 <setup+0x8ac>)
    14ee:	ldr.w	lr, [r1, #32]
    14f2:	ldr	r3, [r3, #12]
    14f4:	ldr.w	ip, [r1, #36]	; 0x24
    14f8:	str	r3, [r5, #12]
    14fa:	ldr	r3, [pc, #648]	; (1784 <setup+0x8ac>)
    14fc:	ldr	r7, [r7, #24]
    14fe:	ldr	r3, [r3, #16]
    1500:	str	r3, [r5, #16]
    1502:	ldr	r3, [pc, #640]	; (1784 <setup+0x8ac>)
    1504:	ldr	r3, [r3, #20]
    1506:	str	r3, [r5, #20]
    1508:	ldr	r3, [pc, #632]	; (1784 <setup+0x8ac>)
    150a:	ldr	r3, [r3, #0]
    150c:	mov	r4, r3
		
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
    150e:	ldr	r3, [r1, #120]	; 0x78
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1510:	str	r2, [r5, #4]
    1512:	ldr	r2, [pc, #624]	; (1784 <setup+0x8ac>)
    1514:	add.w	fp, r3, #4640	; 0x1220
    1518:	ldr	r1, [r1, #40]	; 0x28
    151a:	ldr	r2, [r2, #44]	; 0x2c
    151c:	str	r4, [r5, #0]
    151e:	movw	r4, #4636	; 0x121c
    1522:	strb.w	sl, [r5, #24]
    1526:	str	r6, [r5, r4]
    1528:	str.w	r0, [r8]
    152c:	str	r2, [r3, #20]
    152e:	mov.w	r2, #1
    1532:	str.w	ip, [r3, #12]
    1536:	str	r1, [r3, #16]
    1538:	strb	r2, [r3, #24]
    153a:	ldr	r1, [pc, #584]	; (1784 <setup+0x8ac>)
    153c:	stmia.w	r3, {r7, r9, lr}
    1540:	str	r6, [r3, r4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    1542:	ldr	r3, [pc, #576]	; (1784 <setup+0x8ac>)
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1544:	ldr	r4, [pc, #572]	; (1784 <setup+0x8ac>)
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &possible_automatons[0], false);
		initialize_automaton(_bg_automaton, &possible_automatons[1], true);
		initialize_automaton(_grow_automaton, &possible_automatons[2], true);
    1546:	ldr.w	r2, [r3, #128]	; 0x80
		initialize_automaton(_sat_automaton, &possible_automatons[3], true);
    154a:	ldr.w	r3, [r3, #132]	; 0x84
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    154e:	ldr.w	ip, [r4, #64]	; 0x40
    1552:	ldr.w	lr, [r4, #68]	; 0x44
    1556:	add.w	r4, r3, #4640	; 0x1220
    155a:	ldr.w	sl, [r1, #52]	; 0x34
    155e:	add.w	r1, r2, #4640	; 0x1220
    1562:	str	r4, [sp, #4]
    1564:	ldr	r4, [pc, #540]	; (1784 <setup+0x8ac>)
    1566:	mov	r7, r1
    1568:	str.w	r0, [fp]
    156c:	movw	fp, #4636	; 0x121c
    1570:	ldr	r4, [r4, #48]	; 0x30
    1572:	ldr	r1, [pc, #528]	; (1784 <setup+0x8ac>)
    1574:	str.w	r6, [r2, fp]
    1578:	ldr.w	r9, [r1, #56]	; 0x38
    157c:	ldr	r1, [r1, #60]	; 0x3c
    157e:	str.w	r9, [r2, #8]
    1582:	stmia.w	r2, {r4, sl}
    1586:	ldr	r4, [pc, #508]	; (1784 <setup+0x8ac>)
    1588:	ldr.w	r9, [r4, #76]	; 0x4c
    158c:	str	r1, [r2, #12]
    158e:	mov.w	r1, #1
    1592:	ldr.w	sl, [r4, #80]	; 0x50
    1596:	str.w	ip, [r2, #16]
    159a:	ldr.w	ip, [r4, #84]	; 0x54
    159e:	str.w	lr, [r2, #20]
    15a2:	ldr.w	lr, [r4, #88]	; 0x58
    15a6:	strb	r1, [r2, #24]
    15a8:	ldr	r2, [r4, #92]	; 0x5c
    15aa:	str	r0, [r7, #0]
    15ac:	ldr	r1, [r4, #72]	; 0x48
    15ae:	str.w	r6, [r3, fp]
    15b2:	str	r2, [r3, #20]
    15b4:	mov.w	r2, #1
    15b8:	str.w	lr, [r3, #16]
    15bc:	stmia.w	r3, {r1, r9, sl, ip}
    15c0:	strb	r2, [r3, #24]
    15c2:	mov	r2, r4
    15c4:	ldr	r3, [sp, #4]
    15c6:	ldrb.w	fp, [r2, #104]	; 0x68
    15ca:	str	r0, [r3, #0]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    15cc:	ldr	r3, [r4, #96]	; 0x60
    15ce:	ldr	r4, [r4, #100]	; 0x64
    15d0:	subs	r3, #1
    15d2:	cmp	r3, #3
    15d4:	bhi.w	20ca <setup+0x11f2>
    15d8:	tbb	[pc, r3]
    15dc:	.word	0x02479ad6
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    15e0:	cmp	r4, #0
    15e2:	ble.w	1818 <setup+0x940>
    15e6:	mov	r9, r5
    15e8:	movs	r7, #0
    15ea:	mov	r5, fp
    15ec:	b.n	1602 <setup+0x72a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    15ee:	add.w	r3, r6, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    15f2:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    15f4:	ldr.w	r2, [r9]
    15f8:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    15fc:	cmp	r7, r4
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    15fe:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1600:	beq.n	164a <setup+0x772>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1602:	movs	r0, #14
    1604:	bl	b204 <random(unsigned long)>
    1608:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    160c:	movs	r0, #14
    160e:	bl	b204 <random(unsigned long)>
    1612:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1614:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1618:	cmp	r5, #0
    161a:	beq.n	15ee <setup+0x716>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    161c:	ldr.w	r3, [r9, #20]
    1620:	add.w	r8, r8, r8, lsl #1
    1624:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1628:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    162a:	add.w	r6, r6, r8, lsl #3
    162e:	subs	r0, r3, r2
    1630:	add.w	r6, r9, r6, lsl #2
    1634:	adds	r0, #2
    1636:	bl	b204 <random(unsigned long)>
    163a:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    163e:	cmp	r7, r4
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1640:	add.w	r3, r3, #4294967295
    1644:	add	r0, r3
    1646:	str	r0, [r6, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1648:	bne.n	1602 <setup+0x72a>
    164a:	ldr	r3, [pc, #312]	; (1784 <setup+0x8ac>)
    164c:	ldr	r5, [r3, #120]	; 0x78
    164e:	ldrb.w	fp, [r3, #104]	; 0x68
    1652:	ldr	r4, [r3, #100]	; 0x64
    1654:	ldr	r3, [r3, #96]	; 0x60
    1656:	subs	r3, #1
    1658:	cmp	r3, #3
    165a:	bhi.w	2272 <setup+0x139a>
    165e:	tbh	[pc, r3, lsl #1]
    1662:	.short	0x00be
    1664:	.word	0x043b048e
    1668:	.short	0x0672
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    166a:	movs	r0, #14
    166c:	mov	r7, r5
    166e:	bl	b204 <random(unsigned long)>
    1672:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1674:	movs	r0, #14
    1676:	add.w	r9, r5, #96	; 0x60
    167a:	bl	b204 <random(unsigned long)>
    167e:	vmov	s15, r4
    1682:	adds	r6, #5
    1684:	adds	r3, r0, #5
    1686:	vcvt.f64.s32	d9, s15
    168a:	rsb	sl, r0, #19
    168e:	negs	r3, r3
    1690:	rsb	r8, r6, #0
    1694:	str	r3, [sp, #4]
    1696:	vmov	s15, r8
    169a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    169c:	mov	r6, r7
    169e:	vcvt.f64.s32	d8, s15
    16a2:	vmul.f64	d8, d8, d8
    16a6:	b.n	16b4 <setup+0x7dc>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    16a8:	ldr	r3, [r5, #0]
    16aa:	str	r3, [r6, #28]
    16ac:	adds	r4, #1
    16ae:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    16b0:	cmp	sl, r4
    16b2:	beq.n	1704 <setup+0x82c>
      double xx = x-midPoint_y;
    16b4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    16b8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    16bc:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    16c0:	vfma.f64	d0, d7, d7
    16c4:	vsqrt.f64	d7, d0
    16c8:	vcmp.f64	d7, d7
    16cc:	vmrs	APSR_nzcv, fpscr
    16d0:	bne.w	2630 <setup+0x1758>
    16d4:	vcmpe.f64	d7, d9
    16d8:	vmrs	APSR_nzcv, fpscr
    16dc:	bhi.n	16ac <setup+0x7d4>
        if (rand){
    16de:	cmp.w	fp, #0
    16e2:	beq.n	16a8 <setup+0x7d0>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    16e4:	ldr	r3, [r5, #20]
    16e6:	adds	r4, #1
    16e8:	ldr	r0, [r5, #16]
    16ea:	adds	r6, #96	; 0x60
    16ec:	subs	r0, r3, r0
    16ee:	adds	r0, #2
    16f0:	bl	b204 <random(unsigned long)>
    16f4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    16f6:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    16f8:	add.w	r3, r3, #4294967295
    16fc:	add	r0, r3
    16fe:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1702:	bne.n	16b4 <setup+0x7dc>
    1704:	adds	r7, #4
    1706:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    170a:	cmp	r9, r7
    170c:	bne.n	1696 <setup+0x7be>
    170e:	b.n	164a <setup+0x772>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1710:	movs	r0, #14
    1712:	bl	b204 <random(unsigned long)>
    1716:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1718:	movs	r0, #14
    171a:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    171e:	cmp	r4, #0
    1720:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1722:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1726:	it	lt
    1728:	addlt	r3, r4, #1
    172a:	cmp	r4, #0
    172c:	mov.w	r8, r3, asr #1
    1730:	it	lt
    1732:	addlt	r4, #1
    1734:	rsb	r8, r8, #0
    1738:	asrs	r4, r4, #1
    173a:	add.w	r7, r0, r8
    173e:	adds	r3, r4, r0
    1740:	cmp	r7, r3
    1742:	str	r3, [sp, #4]
    1744:	bge.n	164a <setup+0x772>
    1746:	add	r8, r6
    1748:	add.w	sl, r4, r6
    174c:	add.w	r6, r8, r8, lsl #1
    1750:	add.w	r6, r7, r6, lsl #3
    1754:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1758:	cmp	sl, r8
    175a:	ble.n	1778 <setup+0x8a0>
    175c:	mov	r9, r6
    175e:	mov	r4, r8
        if (rand){
    1760:	cmp.w	fp, #0
    1764:	bne.w	2526 <setup+0x164e>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1768:	ldr	r3, [r5, #0]
    176a:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    176e:	adds	r4, #1
    1770:	add.w	r9, r9, #96	; 0x60
    1774:	cmp	r4, sl
    1776:	bne.n	1760 <setup+0x888>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1778:	adds	r7, #1
    177a:	ldr	r3, [sp, #4]
    177c:	adds	r6, #4
    177e:	cmp	r7, r3
    1780:	bne.n	1758 <setup+0x880>
    1782:	b.n	164a <setup+0x772>
    1784:	.word	0x20003aa4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1788:	movs	r0, #14
    178a:	bl	b204 <random(unsigned long)>
    178e:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1790:	movs	r0, #14
    1792:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1796:	cmp	r4, #0
    1798:	ble.w	164a <setup+0x772>
    179c:	add.w	r3, r0, #12
    17a0:	add.w	r6, r6, r6, lsl #1
    17a4:	movs	r7, #0
    17a6:	add.w	r6, r3, r6, lsl #3
    17aa:	add.w	r6, r5, r6, lsl #2
      if (rand){
    17ae:	cmp.w	fp, #0
    17b2:	bne.n	17c8 <setup+0x8f0>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    17b4:	ldr	r3, [r5, #0]
    17b6:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    17b8:	adds	r7, #1
    17ba:	adds	r6, #4
    17bc:	cmp	r7, r4
    17be:	beq.w	164a <setup+0x772>
      if (rand){
    17c2:	cmp.w	fp, #0
    17c6:	beq.n	17b4 <setup+0x8dc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    17c8:	ldr	r3, [r5, #20]
    17ca:	ldr	r2, [r5, #16]
    17cc:	subs	r0, r3, r2
    17ce:	adds	r0, #2
    17d0:	bl	b204 <random(unsigned long)>
    17d4:	ldr	r3, [r5, #16]
    17d6:	subs	r3, #1
    17d8:	add	r0, r3
    17da:	str	r0, [r6, #0]
    17dc:	b.n	17b8 <setup+0x8e0>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17de:	movs	r0, #14
    17e0:	bl	b204 <random(unsigned long)>
    17e4:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    17e6:	movs	r0, #14
    17e8:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    17ec:	cmp	r4, #0
    17ee:	ble.n	1818 <setup+0x940>
    17f0:	add.w	r3, r0, #12
    17f4:	add.w	r6, r6, r6, lsl #1
    17f8:	mov	r8, r4
    17fa:	movs	r7, #0
    17fc:	add.w	r6, r3, r6, lsl #3
    1800:	mov	r4, fp
    1802:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1806:	cmp	r4, #0
    1808:	bne.w	25d4 <setup+0x16fc>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    180c:	ldr	r3, [r5, #0]
    180e:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1810:	adds	r7, #1
    1812:	adds	r6, #4
    1814:	cmp	r7, r8
    1816:	bne.n	1806 <setup+0x92e>
    1818:	ldr	r3, [pc, #544]	; (1a3c <setup+0xb64>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    181a:	ldr	r2, [pc, #544]	; (1a3c <setup+0xb64>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    181c:	ldr	r3, [r3, #108]	; 0x6c
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
    181e:	ldr.w	r5, [r2, #128]	; 0x80
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1822:	subs	r3, #1
    1824:	ldr	r4, [r2, #112]	; 0x70
    1826:	ldrb.w	fp, [r2, #116]	; 0x74
    182a:	cmp	r3, #3
    182c:	bhi.w	2208 <setup+0x1330>
    1830:	tbb	[pc, r3]
    1834:	.word	0x024a9dd8
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1838:	cmp	r4, #0
    183a:	ble.w	1a7a <setup+0xba2>
    183e:	mov	r9, r5
    1840:	movs	r7, #0
    1842:	mov	r5, fp
    1844:	b.n	185a <setup+0x982>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1846:	add.w	r3, r6, r3, lsl #3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    184a:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    184c:	ldr.w	r2, [r9]
    1850:	add.w	r3, r9, r3, lsl #2
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1854:	cmp	r4, r7
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1856:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1858:	beq.n	18a2 <setup+0x9ca>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    185a:	movs	r0, #14
    185c:	bl	b204 <random(unsigned long)>
    1860:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1864:	movs	r0, #14
    1866:	bl	b204 <random(unsigned long)>
    186a:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    186c:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1870:	cmp	r5, #0
    1872:	beq.n	1846 <setup+0x96e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1874:	ldr.w	r3, [r9, #20]
    1878:	add.w	r8, r8, r8, lsl #1
    187c:	ldr.w	r2, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1880:	adds	r7, #1
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1882:	add.w	r6, r6, r8, lsl #3
    1886:	subs	r0, r3, r2
    1888:	add.w	r6, r9, r6, lsl #2
    188c:	adds	r0, #2
    188e:	bl	b204 <random(unsigned long)>
    1892:	ldr.w	r3, [r9, #16]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1896:	cmp	r4, r7
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1898:	add.w	r3, r3, #4294967295
    189c:	add	r0, r3
    189e:	str	r0, [r6, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    18a0:	bne.n	185a <setup+0x982>
    18a2:	ldr	r3, [pc, #408]	; (1a3c <setup+0xb64>)
    18a4:	ldr	r2, [pc, #404]	; (1a3c <setup+0xb64>)
    18a6:	ldr	r3, [r3, #108]	; 0x6c
    18a8:	ldrb.w	fp, [r2, #116]	; 0x74
    18ac:	ldr	r6, [r2, #112]	; 0x70
    18ae:	subs	r3, #1

	void define_seeds(){
		initialize_seed(_fg_automaton, possible_seeds[0]);
		initialize_seed(_bg_automaton, possible_seeds[0]);
		initialize_seed(_grow_automaton, possible_seeds[1]);
		initialize_seed(_sat_automaton, possible_seeds[1]);
    18b0:	ldr	r2, [pc, #392]	; (1a3c <setup+0xb64>)
    18b2:	ldr.w	r5, [r2, #132]	; 0x84
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    18b6:	cmp	r3, #3
    18b8:	bhi.w	21a0 <setup+0x12c8>
    18bc:	tbh	[pc, r3, lsl #1]
    18c0:	.word	0x019f00c0
    18c4:	.word	0x05d9014c
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18c8:	movs	r0, #14
    18ca:	mov	r7, r5
    18cc:	bl	b204 <random(unsigned long)>
    18d0:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    18d2:	movs	r0, #14
    18d4:	add.w	r9, r5, #96	; 0x60
    18d8:	bl	b204 <random(unsigned long)>
    18dc:	vmov	s15, r4
    18e0:	adds	r6, #5
    18e2:	adds	r3, r0, #5
    18e4:	vcvt.f64.s32	d9, s15
    18e8:	rsb	sl, r0, #19
    18ec:	negs	r3, r3
    18ee:	rsb	r8, r6, #0
    18f2:	str	r3, [sp, #4]
    18f4:	vmov	s15, r8
    18f8:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    18fa:	mov	r6, r7
    18fc:	vcvt.f64.s32	d8, s15
    1900:	vmul.f64	d8, d8, d8
    1904:	b.n	1912 <setup+0xa3a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1906:	ldr	r3, [r5, #0]
    1908:	str	r3, [r6, #28]
    190a:	adds	r4, #1
    190c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    190e:	cmp	r4, sl
    1910:	beq.n	1962 <setup+0xa8a>
      double xx = x-midPoint_y;
    1912:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1916:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    191a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    191e:	vfma.f64	d0, d7, d7
    1922:	vsqrt.f64	d7, d0
    1926:	vcmp.f64	d7, d7
    192a:	vmrs	APSR_nzcv, fpscr
    192e:	bne.w	2648 <setup+0x1770>
    1932:	vcmpe.f64	d7, d9
    1936:	vmrs	APSR_nzcv, fpscr
    193a:	bhi.n	190a <setup+0xa32>
        if (rand){
    193c:	cmp.w	fp, #0
    1940:	beq.n	1906 <setup+0xa2e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1942:	ldr	r3, [r5, #20]
    1944:	adds	r4, #1
    1946:	ldr	r0, [r5, #16]
    1948:	adds	r6, #96	; 0x60
    194a:	subs	r0, r3, r0
    194c:	adds	r0, #2
    194e:	bl	b204 <random(unsigned long)>
    1952:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1954:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1956:	add.w	r3, r3, #4294967295
    195a:	add	r0, r3
    195c:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1960:	bne.n	1912 <setup+0xa3a>
    1962:	adds	r7, #4
    1964:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1968:	cmp	r9, r7
    196a:	bne.n	18f4 <setup+0xa1c>
    196c:	b.n	18a2 <setup+0x9ca>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    196e:	movs	r0, #14
    1970:	bl	b204 <random(unsigned long)>
    1974:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1976:	movs	r0, #14
    1978:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    197c:	cmp	r4, #0
    197e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1980:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1984:	it	lt
    1986:	addlt	r3, r4, #1
    1988:	cmp	r4, #0
    198a:	mov.w	r8, r3, asr #1
    198e:	it	lt
    1990:	addlt	r4, #1
    1992:	rsb	r8, r8, #0
    1996:	asrs	r4, r4, #1
    1998:	add.w	r7, r0, r8
    199c:	adds	r3, r4, r0
    199e:	cmp	r3, r7
    19a0:	str	r3, [sp, #4]
    19a2:	ble.w	18a2 <setup+0x9ca>
    19a6:	add	r8, r6
    19a8:	add.w	sl, r4, r6
    19ac:	add.w	r6, r8, r8, lsl #1
    19b0:	add.w	r6, r7, r6, lsl #3
    19b4:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    19b8:	cmp	sl, r8
    19ba:	ble.n	19d8 <setup+0xb00>
    19bc:	mov	r9, r6
    19be:	mov	r4, r8
        if (rand){
    19c0:	cmp.w	fp, #0
    19c4:	bne.w	258a <setup+0x16b2>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    19c8:	ldr	r3, [r5, #0]
    19ca:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    19ce:	adds	r4, #1
    19d0:	add.w	r9, r9, #96	; 0x60
    19d4:	cmp	r4, sl
    19d6:	bne.n	19c0 <setup+0xae8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    19d8:	adds	r7, #1
    19da:	ldr	r3, [sp, #4]
    19dc:	adds	r6, #4
    19de:	cmp	r3, r7
    19e0:	bne.n	19b8 <setup+0xae0>
    19e2:	b.n	18a2 <setup+0x9ca>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    19e4:	movs	r0, #14
    19e6:	bl	b204 <random(unsigned long)>
    19ea:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    19ec:	movs	r0, #14
    19ee:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    19f2:	cmp	r4, #0
    19f4:	ble.w	18a2 <setup+0x9ca>
    19f8:	add.w	r6, r6, r6, lsl #1
    19fc:	add.w	r3, r0, #12
    1a00:	movs	r7, #0
    1a02:	add.w	r6, r3, r6, lsl #3
    1a06:	add.w	r6, r5, r6, lsl #2
      if (rand){
    1a0a:	cmp.w	fp, #0
    1a0e:	bne.n	1a24 <setup+0xb4c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1a10:	ldr	r3, [r5, #0]
    1a12:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1a14:	adds	r7, #1
    1a16:	adds	r6, #4
    1a18:	cmp	r4, r7
    1a1a:	beq.w	18a2 <setup+0x9ca>
      if (rand){
    1a1e:	cmp.w	fp, #0
    1a22:	beq.n	1a10 <setup+0xb38>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1a24:	ldr	r3, [r5, #20]
    1a26:	ldr	r2, [r5, #16]
    1a28:	subs	r0, r3, r2
    1a2a:	adds	r0, #2
    1a2c:	bl	b204 <random(unsigned long)>
    1a30:	ldr	r3, [r5, #16]
    1a32:	subs	r3, #1
    1a34:	add	r0, r3
    1a36:	str	r0, [r6, #0]
    1a38:	b.n	1a14 <setup+0xb3c>
    1a3a:	nop
    1a3c:	.word	0x20003aa4
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a40:	movs	r0, #14
    1a42:	bl	b204 <random(unsigned long)>
    1a46:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a48:	movs	r0, #14
    1a4a:	bl	b204 <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1a4e:	cmp	r6, #0
    1a50:	ble.n	1a7a <setup+0xba2>
    1a52:	add.w	r4, r4, r4, lsl #1
    1a56:	add.w	r3, r0, #12
    1a5a:	mov	r8, r6
    1a5c:	movs	r7, #0
    1a5e:	add.w	r4, r3, r4, lsl #3
    1a62:	mov	r6, fp
    1a64:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1a68:	cmp	r6, #0
    1a6a:	bne.w	25ec <setup+0x1714>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1a6e:	ldr	r3, [r5, #0]
    1a70:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1a72:	adds	r7, #1
    1a74:	adds	r4, #4
    1a76:	cmp	r7, r8
    1a78:	bne.n	1a68 <setup+0xb90>

  screen_A.init_screen();
  screen_B.init_screen();

  synapse_A.begin();
    1a7a:	ldr	r0, [pc, #804]	; (1da0 <setup+0xec8>)
    1a7c:	bl	9970 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    1a80:	ldr	r0, [pc, #800]	; (1da4 <setup+0xecc>)
    1a82:	bl	9970 <Adafruit_NeoPixel::begin()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1a86:	ldr	r3, [pc, #800]	; (1da8 <setup+0xed0>)
    1a88:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1a8a:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    1a8c:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1a8e:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1a90:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1a92:	ldr	r6, [pc, #788]	; (1da8 <setup+0xed0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    1a94:	cmp	r3, r1
    1a96:	it	eq
    1a98:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1a9a:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1a9c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1a9e:	ite	eq
    1aa0:	moveq	r5, #1
    1aa2:	movne	r5, #0
    1aa4:	cmp	r5, #0
    1aa6:	beq.n	1a8e <setup+0xbb6>
    1aa8:	lsrs	r1, r3, #5
    1aaa:	ldr	r3, [pc, #768]	; (1dac <setup+0xed4>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1aac:	mov	r4, r6
    1aae:	orr.w	r1, r1, r2, lsl #27
    1ab2:	vmov	s15, r1
    1ab6:	vldr	d5, [pc, #736]	; 1d98 <setup+0xec0>
    1aba:	vcvt.f64.u32	d7, s15
    1abe:	vdiv.f64	d6, d7, d5
    1ac2:	vcvt.u32.f64	s12, d6
    1ac6:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1aca:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    1acc:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1ace:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1ad0:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1ad2:	ldr	r6, [pc, #724]	; (1da8 <setup+0xed0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    1ad4:	cmp	r3, r1
    1ad6:	it	eq
    1ad8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1ada:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1adc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1ade:	ite	eq
    1ae0:	moveq	r5, #1
    1ae2:	movne	r5, #0
    1ae4:	cmp	r5, #0
    1ae6:	beq.n	1ace <setup+0xbf6>
    1ae8:	lsrs	r1, r3, #5
    1aea:	ldr	r3, [pc, #708]	; (1db0 <setup+0xed8>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1aec:	mov	r5, r6
    1aee:	orr.w	r1, r1, r2, lsl #27
    1af2:	vmov	s15, r1
    1af6:	vldr	d5, [pc, #672]	; 1d98 <setup+0xec0>
    1afa:	vcvt.f64.u32	d7, s15
    1afe:	vdiv.f64	d6, d7, d5
    1b02:	vcvt.u32.f64	s12, d6
    1b06:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    1b0a:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    1b0c:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1b0e:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    1b10:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    1b12:	cmp	r3, r1
    1b14:	it	eq
    1b16:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    1b18:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    1b1a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    1b1c:	ite	eq
    1b1e:	moveq	r0, #1
    1b20:	movne	r0, #0
    1b22:	cmp	r0, #0
    1b24:	beq.n	1b0e <setup+0xc36>
    1b26:	lsrs	r1, r3, #5
  
  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceFadeUpdate = 0;

  delay(SETUP_DELAY);
    1b28:	mov.w	r0, #1000	; 0x3e8
    1b2c:	ldr	r3, [pc, #644]	; (1db4 <setup+0xedc>)
    1b2e:	orr.w	r1, r1, r2, lsl #27
    1b32:	vmov	s15, r1
    1b36:	vldr	d5, [pc, #608]	; 1d98 <setup+0xec0>
    1b3a:	vcvt.f64.u32	d7, s15
    1b3e:	vdiv.f64	d6, d7, d5
    1b42:	vcvt.u32.f64	s12, d6
    1b46:	vstr	s12, [r3]
}
    1b4a:	add	sp, #12
    1b4c:	vpop	{d8-d9}
    1b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceFadeUpdate = 0;

  delay(SETUP_DELAY);
    1b54:	b.w	ae64 <delay>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b58:	movs	r0, #14
    1b5a:	mov	r7, r5
    1b5c:	bl	b204 <random(unsigned long)>
    1b60:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b62:	movs	r0, #14
    1b64:	add.w	r9, r5, #96	; 0x60
    1b68:	bl	b204 <random(unsigned long)>
    1b6c:	vmov	s15, r6
    1b70:	adds	r4, #5
    1b72:	adds	r3, r0, #5
    1b74:	vcvt.f64.s32	d9, s15
    1b78:	rsb	sl, r0, #19
    1b7c:	negs	r3, r3
    1b7e:	rsb	r8, r4, #0
    1b82:	str	r3, [sp, #4]
    1b84:	vmov	s15, r8
    1b88:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1b8a:	mov	r6, r7
    1b8c:	vcvt.f64.s32	d8, s15
    1b90:	vmul.f64	d8, d8, d8
    1b94:	b.n	1ba2 <setup+0xcca>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1b96:	ldr	r3, [r5, #0]
    1b98:	str	r3, [r6, #28]
    1b9a:	adds	r4, #1
    1b9c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1b9e:	cmp	sl, r4
    1ba0:	beq.n	1bf2 <setup+0xd1a>
      double xx = x-midPoint_y;
    1ba2:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1ba6:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1baa:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1bae:	vfma.f64	d0, d7, d7
    1bb2:	vsqrt.f64	d7, d0
    1bb6:	vcmp.f64	d7, d7
    1bba:	vmrs	APSR_nzcv, fpscr
    1bbe:	bne.w	260e <setup+0x1736>
    1bc2:	vcmpe.f64	d7, d9
    1bc6:	vmrs	APSR_nzcv, fpscr
    1bca:	bhi.n	1b9a <setup+0xcc2>
        if (rand){
    1bcc:	cmp.w	fp, #0
    1bd0:	beq.n	1b96 <setup+0xcbe>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1bd2:	ldr	r3, [r5, #20]
    1bd4:	adds	r4, #1
    1bd6:	ldr	r0, [r5, #16]
    1bd8:	adds	r6, #96	; 0x60
    1bda:	subs	r0, r3, r0
    1bdc:	adds	r0, #2
    1bde:	bl	b204 <random(unsigned long)>
    1be2:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1be4:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1be6:	add.w	r3, r3, #4294967295
    1bea:	add	r0, r3
    1bec:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bf0:	bne.n	1ba2 <setup+0xcca>
    1bf2:	adds	r7, #4
    1bf4:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1bf8:	cmp	r9, r7
    1bfa:	bne.n	1b84 <setup+0xcac>
    1bfc:	b.n	1a7a <setup+0xba2>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1bfe:	movs	r0, #14
    1c00:	bl	b204 <random(unsigned long)>
    1c04:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c06:	movs	r0, #14
    1c08:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c0c:	cmp	r6, #0
    1c0e:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c10:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c14:	it	lt
    1c16:	addlt	r3, r6, #1
    1c18:	cmp	r6, #0
    1c1a:	mov.w	r8, r3, asr #1
    1c1e:	it	lt
    1c20:	addlt	r6, #1
    1c22:	rsb	r8, r8, #0
    1c26:	asrs	r6, r6, #1
    1c28:	add.w	r7, r0, r8
    1c2c:	adds	r3, r0, r6
    1c2e:	cmp	r3, r7
    1c30:	str	r3, [sp, #4]
    1c32:	ble.w	1a7a <setup+0xba2>
    1c36:	add	r8, r4
    1c38:	add	r4, r6
    1c3a:	add.w	r6, r8, r8, lsl #1
    1c3e:	add.w	r6, r7, r6, lsl #3
    1c42:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c46:	cmp	r4, r8
    1c48:	ble.n	1c68 <setup+0xd90>
    1c4a:	mov	sl, r6
    1c4c:	mov	r9, r8
        if (rand){
    1c4e:	cmp.w	fp, #0
    1c52:	bne.w	2570 <setup+0x1698>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1c56:	ldr	r3, [r5, #0]
    1c58:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1c5c:	add.w	r9, r9, #1
    1c60:	add.w	sl, sl, #96	; 0x60
    1c64:	cmp	r9, r4
    1c66:	bne.n	1c4e <setup+0xd76>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1c68:	adds	r7, #1
    1c6a:	ldr	r3, [sp, #4]
    1c6c:	adds	r6, #4
    1c6e:	cmp	r3, r7
    1c70:	bne.n	1c46 <setup+0xd6e>
    1c72:	b.n	1a7a <setup+0xba2>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c74:	movs	r0, #14
    1c76:	mov	r7, r5
    1c78:	bl	b204 <random(unsigned long)>
    1c7c:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c7e:	movs	r0, #14
    1c80:	add.w	r9, r5, #96	; 0x60
    1c84:	bl	b204 <random(unsigned long)>
    1c88:	vmov	s15, r6
    1c8c:	adds	r4, #5
    1c8e:	adds	r3, r0, #5
    1c90:	vcvt.f64.s32	d9, s15
    1c94:	rsb	sl, r0, #19
    1c98:	negs	r3, r3
    1c9a:	rsb	r8, r4, #0
    1c9e:	str	r3, [sp, #4]
    1ca0:	vmov	s15, r8
    1ca4:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1ca6:	mov	r6, r7
    1ca8:	vcvt.f64.s32	d8, s15
    1cac:	vmul.f64	d8, d8, d8
    1cb0:	b.n	1cbe <setup+0xde6>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1cb2:	ldr	r3, [r5, #0]
    1cb4:	str	r3, [r6, #28]
    1cb6:	adds	r4, #1
    1cb8:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1cba:	cmp	r4, sl
    1cbc:	beq.n	1d0e <setup+0xe36>
      double xx = x-midPoint_y;
    1cbe:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1cc2:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1cc6:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1cca:	vfma.f64	d0, d7, d7
    1cce:	vsqrt.f64	d7, d0
    1cd2:	vcmp.f64	d7, d7
    1cd6:	vmrs	APSR_nzcv, fpscr
    1cda:	bne.w	2654 <setup+0x177c>
    1cde:	vcmpe.f64	d7, d9
    1ce2:	vmrs	APSR_nzcv, fpscr
    1ce6:	bhi.n	1cb6 <setup+0xdde>
        if (rand){
    1ce8:	cmp.w	fp, #0
    1cec:	beq.n	1cb2 <setup+0xdda>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1cee:	ldr	r3, [r5, #20]
    1cf0:	adds	r4, #1
    1cf2:	ldr	r0, [r5, #16]
    1cf4:	adds	r6, #96	; 0x60
    1cf6:	subs	r0, r3, r0
    1cf8:	adds	r0, #2
    1cfa:	bl	b204 <random(unsigned long)>
    1cfe:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d00:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1d02:	add.w	r3, r3, #4294967295
    1d06:	add	r0, r3
    1d08:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d0c:	bne.n	1cbe <setup+0xde6>
    1d0e:	adds	r7, #4
    1d10:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1d14:	cmp	r7, r9
    1d16:	bne.n	1ca0 <setup+0xdc8>
    1d18:	b.w	1254 <setup+0x37c>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d1c:	movs	r0, #14
    1d1e:	bl	b204 <random(unsigned long)>
    1d22:	adds	r4, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d24:	movs	r0, #14
    1d26:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d2a:	cmp	r6, #0
    1d2c:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d2e:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d32:	it	lt
    1d34:	addlt	r3, r6, #1
    1d36:	cmp	r6, #0
    1d38:	mov.w	r8, r3, asr #1
    1d3c:	it	lt
    1d3e:	addlt	r6, #1
    1d40:	rsb	r8, r8, #0
    1d44:	asrs	r6, r6, #1
    1d46:	add.w	r7, r0, r8
    1d4a:	adds	r3, r0, r6
    1d4c:	cmp	r7, r3
    1d4e:	str	r3, [sp, #4]
    1d50:	bge.w	1254 <setup+0x37c>
    1d54:	add	r8, r4
    1d56:	add	r4, r6
    1d58:	add.w	r6, r8, r8, lsl #1
    1d5c:	add.w	r6, r7, r6, lsl #3
    1d60:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1d64:	cmp	r8, r4
    1d66:	bge.n	1d86 <setup+0xeae>
    1d68:	mov	sl, r6
    1d6a:	mov	r9, r8
        if (rand){
    1d6c:	cmp.w	fp, #0
    1d70:	bne.w	2558 <setup+0x1680>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1d74:	ldr	r3, [r5, #0]
    1d76:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1d7a:	add.w	r9, r9, #1
    1d7e:	add.w	sl, sl, #96	; 0x60
    1d82:	cmp	r9, r4
    1d84:	bne.n	1d6c <setup+0xe94>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d86:	adds	r7, #1
    1d88:	ldr	r3, [sp, #4]
    1d8a:	adds	r6, #4
    1d8c:	cmp	r7, r3
    1d8e:	bne.n	1d64 <setup+0xe8c>
    1d90:	b.w	1254 <setup+0x37c>
    1d94:	nop.w
    1d98:	.word	0xd2f1a9fc
    1d9c:	.word	0x3ff0624d
    1da0:	.word	0x20008558
    1da4:	.word	0x2000856c
    1da8:	.word	0x400d4000
    1dac:	.word	0x2000157c
    1db0:	.word	0x20001580
    1db4:	.word	0x20003d0c
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1db8:	movs	r0, #14
    1dba:	mov	r7, r5
    1dbc:	bl	b204 <random(unsigned long)>
    1dc0:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1dc2:	movs	r0, #14
    1dc4:	add.w	r9, r5, #96	; 0x60
    1dc8:	bl	b204 <random(unsigned long)>
    1dcc:	vmov	s15, r4
    1dd0:	adds	r6, #5
    1dd2:	adds	r3, r0, #5
    1dd4:	vcvt.f64.s32	d9, s15
    1dd8:	rsb	sl, r0, #19
    1ddc:	negs	r3, r3
    1dde:	rsb	r8, r6, #0
    1de2:	str	r3, [sp, #4]
    1de4:	vmov	s15, r8
    1de8:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1dea:	mov	r6, r7
    1dec:	vcvt.f64.s32	d8, s15
    1df0:	vmul.f64	d8, d8, d8
    1df4:	b.n	1e02 <setup+0xf2a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1df6:	ldr	r3, [r5, #0]
    1df8:	str	r3, [r6, #28]
    1dfa:	adds	r4, #1
    1dfc:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1dfe:	cmp	r4, sl
    1e00:	beq.n	1e52 <setup+0xf7a>
      double xx = x-midPoint_y;
    1e02:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1e06:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1e0a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1e0e:	vfma.f64	d0, d7, d7
    1e12:	vsqrt.f64	d7, d0
    1e16:	vcmp.f64	d7, d7
    1e1a:	vmrs	APSR_nzcv, fpscr
    1e1e:	bne.w	2604 <setup+0x172c>
    1e22:	vcmpe.f64	d7, d9
    1e26:	vmrs	APSR_nzcv, fpscr
    1e2a:	bhi.n	1dfa <setup+0xf22>
        if (rand){
    1e2c:	cmp.w	fp, #0
    1e30:	beq.n	1df6 <setup+0xf1e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1e32:	ldr	r3, [r5, #20]
    1e34:	adds	r4, #1
    1e36:	ldr	r0, [r5, #16]
    1e38:	adds	r6, #96	; 0x60
    1e3a:	subs	r0, r3, r0
    1e3c:	adds	r0, #2
    1e3e:	bl	b204 <random(unsigned long)>
    1e42:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1e44:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1e46:	add.w	r3, r3, #4294967295
    1e4a:	add	r0, r3
    1e4c:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1e50:	bne.n	1e02 <setup+0xf2a>
    1e52:	adds	r7, #4
    1e54:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1e58:	cmp	r7, r9
    1e5a:	bne.n	1de4 <setup+0xf0c>
    1e5c:	b.w	14b4 <setup+0x5dc>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e60:	movs	r0, #14
    1e62:	bl	b204 <random(unsigned long)>
    1e66:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e68:	movs	r0, #14
    1e6a:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e6e:	cmp	r4, #0
    1e70:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e72:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1e76:	it	lt
    1e78:	addlt	r3, r4, #1
    1e7a:	cmp	r4, #0
    1e7c:	mov.w	r8, r3, asr #1
    1e80:	it	lt
    1e82:	addlt	r4, #1
    1e84:	rsb	r8, r8, #0
    1e88:	asrs	r4, r4, #1
    1e8a:	add.w	r7, r0, r8
    1e8e:	adds	r3, r4, r0
    1e90:	cmp	r7, r3
    1e92:	str	r3, [sp, #4]
    1e94:	bge.w	14b4 <setup+0x5dc>
    1e98:	add	r8, r6
    1e9a:	add.w	sl, r4, r6
    1e9e:	add.w	r6, r8, r8, lsl #1
    1ea2:	add.w	r6, r7, r6, lsl #3
    1ea6:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1eaa:	cmp	r8, sl
    1eac:	bge.n	1eca <setup+0xff2>
    1eae:	mov	r9, r6
    1eb0:	mov	r4, r8
        if (rand){
    1eb2:	cmp.w	fp, #0
    1eb6:	bne.w	2540 <setup+0x1668>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1eba:	ldr	r3, [r5, #0]
    1ebc:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1ec0:	adds	r4, #1
    1ec2:	add.w	r9, r9, #96	; 0x60
    1ec6:	cmp	r4, sl
    1ec8:	bne.n	1eb2 <setup+0xfda>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1eca:	adds	r7, #1
    1ecc:	ldr	r3, [sp, #4]
    1ece:	adds	r6, #4
    1ed0:	cmp	r7, r3
    1ed2:	bne.n	1eaa <setup+0xfd2>
    1ed4:	b.w	14b4 <setup+0x5dc>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ed8:	movs	r0, #14
    1eda:	mov	r7, r5
    1edc:	bl	b204 <random(unsigned long)>
    1ee0:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1ee2:	movs	r0, #14
    1ee4:	add.w	r9, r5, #96	; 0x60
    1ee8:	bl	b204 <random(unsigned long)>
    1eec:	vmov	s15, r4
    1ef0:	adds	r6, #5
    1ef2:	adds	r3, r0, #5
    1ef4:	vcvt.f64.s32	d9, s15
    1ef8:	rsb	sl, r0, #19
    1efc:	negs	r3, r3
    1efe:	rsb	r8, r6, #0
    1f02:	str	r3, [sp, #4]
    1f04:	vmov	s15, r8
    1f08:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1f0a:	mov	r6, r7
    1f0c:	vcvt.f64.s32	d8, s15
    1f10:	vmul.f64	d8, d8, d8
    1f14:	b.n	1f22 <setup+0x104a>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1f16:	ldr	r3, [r5, #0]
    1f18:	str	r3, [r6, #28]
    1f1a:	adds	r4, #1
    1f1c:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f1e:	cmp	sl, r4
    1f20:	beq.n	1f72 <setup+0x109a>
      double xx = x-midPoint_y;
    1f22:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1f26:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1f2a:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1f2e:	vfma.f64	d0, d7, d7
    1f32:	vsqrt.f64	d7, d0
    1f36:	vcmp.f64	d7, d7
    1f3a:	vmrs	APSR_nzcv, fpscr
    1f3e:	bne.w	261a <setup+0x1742>
    1f42:	vcmpe.f64	d7, d9
    1f46:	vmrs	APSR_nzcv, fpscr
    1f4a:	bhi.n	1f1a <setup+0x1042>
        if (rand){
    1f4c:	cmp.w	fp, #0
    1f50:	beq.n	1f16 <setup+0x103e>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1f52:	ldr	r3, [r5, #20]
    1f54:	adds	r4, #1
    1f56:	ldr	r0, [r5, #16]
    1f58:	adds	r6, #96	; 0x60
    1f5a:	subs	r0, r3, r0
    1f5c:	adds	r0, #2
    1f5e:	bl	b204 <random(unsigned long)>
    1f62:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f64:	cmp	sl, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1f66:	add.w	r3, r3, #4294967295
    1f6a:	add	r0, r3
    1f6c:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1f70:	bne.n	1f22 <setup+0x104a>
    1f72:	adds	r7, #4
    1f74:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1f78:	cmp	r9, r7
    1f7a:	bne.n	1f04 <setup+0x102c>
    1f7c:	b.n	1818 <setup+0x940>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f7e:	movs	r0, #14
    1f80:	bl	b204 <random(unsigned long)>
    1f84:	adds	r6, r0, #5
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f86:	movs	r0, #14
    1f88:	bl	b204 <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1f8c:	cmp	r4, #0
    1f8e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f90:	add.w	r0, r0, #5
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1f94:	it	lt
    1f96:	addlt	r3, r4, #1
    1f98:	cmp	r4, #0
    1f9a:	mov.w	r8, r3, asr #1
    1f9e:	it	lt
    1fa0:	addlt	r4, #1
    1fa2:	rsb	r8, r8, #0
    1fa6:	asrs	r4, r4, #1
    1fa8:	add.w	r7, r0, r8
    1fac:	adds	r3, r4, r0
    1fae:	cmp	r3, r7
    1fb0:	str	r3, [sp, #4]
    1fb2:	ble.w	1818 <setup+0x940>
    1fb6:	add	r8, r6
    1fb8:	add.w	sl, r4, r6
    1fbc:	add.w	r6, r8, r8, lsl #1
    1fc0:	add.w	r6, r7, r6, lsl #3
    1fc4:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1fc8:	cmp	sl, r8
    1fca:	ble.n	1fe8 <setup+0x1110>
    1fcc:	mov	r9, r6
    1fce:	mov	r4, r8
        if (rand){
    1fd0:	cmp.w	fp, #0
    1fd4:	bne.w	24da <setup+0x1602>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1fd8:	ldr	r3, [r5, #0]
    1fda:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1fde:	adds	r4, #1
    1fe0:	add.w	r9, r9, #96	; 0x60
    1fe4:	cmp	r4, sl
    1fe6:	bne.n	1fd0 <setup+0x10f8>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1fe8:	adds	r7, #1
    1fea:	ldr	r3, [sp, #4]
    1fec:	adds	r6, #4
    1fee:	cmp	r3, r7
    1ff0:	bne.n	1fc8 <setup+0x10f0>
    1ff2:	b.n	1818 <setup+0x940>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    1ff4:	movw	sl, #4636	; 0x121c
    1ff8:	add.w	r3, r5, #28
    1ffc:	movs	r7, #0
    1ffe:	add.w	r9, r5, #4640	; 0x1220
    2002:	add	sl, r5
    2004:	str	r3, [sp, #4]
    2006:	mov.w	r8, r7, lsl #3
    200a:	ldr	r6, [sp, #4]
    200c:	movs	r4, #0
    200e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2012:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2014:	add	r3, r4
    2016:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2018:	cbnz	r2, 201e <setup+0x1146>
      return _background[x][y];
    } else {
      return !_background[x][y];
    201a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    201e:	cbnz	r3, 203a <setup+0x1162>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2020:	adds	r4, #1
    2022:	adds	r6, #4
    2024:	cmp	r4, #24
    2026:	bne.n	200e <setup+0x1136>
    2028:	ldr	r3, [sp, #4]
    202a:	adds	r7, #24
    202c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    202e:	cmp.w	r7, #576	; 0x240
    2032:	str	r3, [sp, #4]
    2034:	bne.n	2006 <setup+0x112e>
    2036:	b.w	12de <setup+0x406>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    203a:	ldr	r2, [r5, #20]
    203c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    203e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2042:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2044:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2046:	adds	r0, #2
    2048:	ldr.w	fp, [r3, r4, lsl #3]
    204c:	bl	b204 <random(unsigned long)>
    2050:	ldr	r3, [r5, #16]
    2052:	rsb	r3, r3, fp
    2056:	adds	r3, #1
    2058:	subs	r0, r3, r0
    205a:	str	r0, [r6, #0]
    205c:	b.n	2020 <setup+0x1148>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    205e:	movw	sl, #4636	; 0x121c
    2062:	add.w	r3, r5, #28
    2066:	mov.w	r9, #0
    206a:	add	sl, r5
    206c:	str	r3, [sp, #4]
    206e:	mov.w	r7, r9, lsl #3
    2072:	ldr	r6, [sp, #4]
    2074:	movs	r4, #0
    2076:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    207a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    207c:	add	r3, r4
    207e:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2082:	cbnz	r2, 2088 <setup+0x11b0>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2084:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2088:	cbnz	r3, 20a6 <setup+0x11ce>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    208a:	adds	r4, #1
    208c:	adds	r6, #4
    208e:	cmp	r4, #24
    2090:	bne.n	2076 <setup+0x119e>
    2092:	ldr	r3, [sp, #4]
    2094:	add.w	r9, r9, #24
    2098:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    209a:	cmp.w	r9, #576	; 0x240
    209e:	str	r3, [sp, #4]
    20a0:	bne.n	206e <setup+0x1196>
    20a2:	b.w	1086 <setup+0x1ae>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20a6:	ldr	r2, [r5, #20]
    20a8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    20aa:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20ae:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    20b0:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    20b2:	adds	r0, #2
    20b4:	ldr.w	fp, [r3, r4, lsl #3]
    20b8:	bl	b204 <random(unsigned long)>
    20bc:	ldr	r3, [r5, #16]
    20be:	rsb	r3, r3, fp
    20c2:	adds	r3, #1
    20c4:	subs	r0, r3, r0
    20c6:	str	r0, [r6, #0]
    20c8:	b.n	208a <setup+0x11b2>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    20ca:	movw	sl, #4636	; 0x121c
    20ce:	add.w	r3, r5, #28
    20d2:	mov.w	r9, #0
    20d6:	add	sl, r5
    20d8:	str	r3, [sp, #4]
    20da:	mov.w	r7, r9, lsl #3
    20de:	ldr	r6, [sp, #4]
    20e0:	movs	r4, #0
    20e2:	ldr.w	r3, [r8]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    20e6:	ldrb	r2, [r5, #24]
      return _background[x][y];
    20e8:	add	r3, r4
    20ea:	ldrb.w	r3, [r3, r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    20ee:	cbnz	r2, 20f4 <setup+0x121c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    20f0:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    20f4:	cbnz	r3, 2112 <setup+0x123a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    20f6:	adds	r4, #1
    20f8:	adds	r6, #4
    20fa:	cmp	r4, #24
    20fc:	bne.n	20e2 <setup+0x120a>
    20fe:	ldr	r3, [sp, #4]
    2100:	add.w	r9, r9, #24
    2104:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2106:	cmp.w	r9, #576	; 0x240
    210a:	str	r3, [sp, #4]
    210c:	bne.n	20da <setup+0x1202>
    210e:	b.w	164a <setup+0x772>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2112:	ldr	r2, [r5, #20]
    2114:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2116:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    211a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    211c:	add	r3, r7
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    211e:	adds	r0, #2
    2120:	ldr.w	fp, [r3, r4, lsl #3]
    2124:	bl	b204 <random(unsigned long)>
    2128:	ldr	r3, [r5, #16]
    212a:	rsb	r3, r3, fp
    212e:	adds	r3, #1
    2130:	subs	r0, r3, r0
    2132:	str	r0, [r6, #0]
    2134:	b.n	20f6 <setup+0x121e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2136:	movw	sl, #4636	; 0x121c
    213a:	add.w	r3, r5, #28
    213e:	movs	r7, #0
    2140:	add.w	r9, r5, #4640	; 0x1220
    2144:	add	sl, r5
    2146:	str	r3, [sp, #4]
    2148:	mov.w	r8, r7, lsl #3
    214c:	ldr	r6, [sp, #4]
    214e:	movs	r4, #0
    2150:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2154:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2156:	add	r3, r4
    2158:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    215a:	cbnz	r2, 2160 <setup+0x1288>
      return _background[x][y];
    } else {
      return !_background[x][y];
    215c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2160:	cbnz	r3, 217c <setup+0x12a4>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2162:	adds	r4, #1
    2164:	adds	r6, #4
    2166:	cmp	r4, #24
    2168:	bne.n	2150 <setup+0x1278>
    216a:	ldr	r3, [sp, #4]
    216c:	adds	r7, #24
    216e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2170:	cmp.w	r7, #576	; 0x240
    2174:	str	r3, [sp, #4]
    2176:	bne.n	2148 <setup+0x1270>
    2178:	b.w	1254 <setup+0x37c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    217c:	ldr	r2, [r5, #20]
    217e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2180:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2184:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2186:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2188:	adds	r0, #2
    218a:	ldr.w	fp, [r3, r4, lsl #3]
    218e:	bl	b204 <random(unsigned long)>
    2192:	ldr	r3, [r5, #16]
    2194:	rsb	r3, r3, fp
    2198:	adds	r3, #1
    219a:	subs	r0, r3, r0
    219c:	str	r0, [r6, #0]
    219e:	b.n	2162 <setup+0x128a>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    21a0:	movw	sl, #4636	; 0x121c
    21a4:	add.w	r3, r5, #28
    21a8:	movs	r7, #0
    21aa:	add.w	r9, r5, #4640	; 0x1220
    21ae:	add	sl, r5
    21b0:	str	r3, [sp, #4]
    21b2:	mov.w	r8, r7, lsl #3
    21b6:	ldr	r6, [sp, #4]
    21b8:	movs	r4, #0
    21ba:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    21be:	ldrb	r2, [r5, #24]
      return _background[x][y];
    21c0:	add	r3, r4
    21c2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    21c4:	cbnz	r2, 21ca <setup+0x12f2>
      return _background[x][y];
    } else {
      return !_background[x][y];
    21c6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    21ca:	cbnz	r3, 21e4 <setup+0x130c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    21cc:	adds	r4, #1
    21ce:	adds	r6, #4
    21d0:	cmp	r4, #24
    21d2:	bne.n	21ba <setup+0x12e2>
    21d4:	ldr	r3, [sp, #4]
    21d6:	adds	r7, #24
    21d8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    21da:	cmp.w	r7, #576	; 0x240
    21de:	str	r3, [sp, #4]
    21e0:	bne.n	21b2 <setup+0x12da>
    21e2:	b.n	1a7a <setup+0xba2>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21e4:	ldr	r2, [r5, #20]
    21e6:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    21e8:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21ec:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    21ee:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    21f0:	adds	r0, #2
    21f2:	ldr.w	fp, [r3, r4, lsl #3]
    21f6:	bl	b204 <random(unsigned long)>
    21fa:	ldr	r3, [r5, #16]
    21fc:	rsb	r3, r3, fp
    2200:	adds	r3, #1
    2202:	subs	r0, r3, r0
    2204:	str	r0, [r6, #0]
    2206:	b.n	21cc <setup+0x12f4>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2208:	movw	sl, #4636	; 0x121c
    220c:	add.w	r3, r5, #28
    2210:	movs	r7, #0
    2212:	add.w	r9, r5, #4640	; 0x1220
    2216:	add	sl, r5
    2218:	str	r3, [sp, #4]
    221a:	mov.w	r8, r7, lsl #3
    221e:	ldr	r6, [sp, #4]
    2220:	movs	r4, #0
    2222:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2226:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2228:	add	r3, r4
    222a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    222c:	cbnz	r2, 2232 <setup+0x135a>
      return _background[x][y];
    } else {
      return !_background[x][y];
    222e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2232:	cbnz	r3, 224e <setup+0x1376>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2234:	adds	r4, #1
    2236:	adds	r6, #4
    2238:	cmp	r4, #24
    223a:	bne.n	2222 <setup+0x134a>
    223c:	ldr	r3, [sp, #4]
    223e:	adds	r7, #24
    2240:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2242:	cmp.w	r7, #576	; 0x240
    2246:	str	r3, [sp, #4]
    2248:	bne.n	221a <setup+0x1342>
    224a:	b.w	18a2 <setup+0x9ca>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    224e:	ldr	r2, [r5, #20]
    2250:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2252:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2256:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2258:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    225a:	adds	r0, #2
    225c:	ldr.w	fp, [r3, r4, lsl #3]
    2260:	bl	b204 <random(unsigned long)>
    2264:	ldr	r3, [r5, #16]
    2266:	rsb	r3, r3, fp
    226a:	adds	r3, #1
    226c:	subs	r0, r3, r0
    226e:	str	r0, [r6, #0]
    2270:	b.n	2234 <setup+0x135c>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2272:	movw	sl, #4636	; 0x121c
    2276:	add.w	r3, r5, #28
    227a:	movs	r7, #0
    227c:	add.w	r9, r5, #4640	; 0x1220
    2280:	add	sl, r5
    2282:	str	r3, [sp, #4]
    2284:	mov.w	r8, r7, lsl #3
    2288:	ldr	r6, [sp, #4]
    228a:	movs	r4, #0
    228c:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2290:	ldrb	r2, [r5, #24]
      return _background[x][y];
    2292:	add	r3, r4
    2294:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2296:	cbnz	r2, 229c <setup+0x13c4>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2298:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    229c:	cbnz	r3, 22b8 <setup+0x13e0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    229e:	adds	r4, #1
    22a0:	adds	r6, #4
    22a2:	cmp	r4, #24
    22a4:	bne.n	228c <setup+0x13b4>
    22a6:	ldr	r3, [sp, #4]
    22a8:	adds	r7, #24
    22aa:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    22ac:	cmp.w	r7, #576	; 0x240
    22b0:	str	r3, [sp, #4]
    22b2:	bne.n	2284 <setup+0x13ac>
    22b4:	b.w	1818 <setup+0x940>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    22b8:	ldr	r2, [r5, #20]
    22ba:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    22bc:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    22c0:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    22c2:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    22c4:	adds	r0, #2
    22c6:	ldr.w	fp, [r3, r4, lsl #3]
    22ca:	bl	b204 <random(unsigned long)>
    22ce:	ldr	r3, [r5, #16]
    22d0:	rsb	r3, r3, fp
    22d4:	adds	r3, #1
    22d6:	subs	r0, r3, r0
    22d8:	str	r0, [r6, #0]
    22da:	b.n	229e <setup+0x13c6>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    22dc:	movw	sl, #4636	; 0x121c
    22e0:	add.w	r3, r5, #28
    22e4:	movs	r7, #0
    22e6:	add.w	r9, r5, #4640	; 0x1220
    22ea:	add	sl, r5
    22ec:	str	r3, [sp, #4]
    22ee:	mov.w	r8, r7, lsl #3
    22f2:	ldr	r6, [sp, #4]
    22f4:	movs	r4, #0
    22f6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    22fa:	ldrb	r2, [r5, #24]
      return _background[x][y];
    22fc:	add	r3, r4
    22fe:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2300:	cbnz	r2, 2306 <setup+0x142e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    2302:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    2306:	cbnz	r3, 2322 <setup+0x144a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2308:	adds	r4, #1
    230a:	adds	r6, #4
    230c:	cmp	r4, #24
    230e:	bne.n	22f6 <setup+0x141e>
    2310:	ldr	r3, [sp, #4]
    2312:	adds	r7, #24
    2314:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    2316:	cmp.w	r7, #576	; 0x240
    231a:	str	r3, [sp, #4]
    231c:	bne.n	22ee <setup+0x1416>
    231e:	b.w	14b4 <setup+0x5dc>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2322:	ldr	r2, [r5, #20]
    2324:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    2326:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    232a:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    232c:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    232e:	adds	r0, #2
    2330:	ldr.w	fp, [r3, r4, lsl #3]
    2334:	bl	b204 <random(unsigned long)>
    2338:	ldr	r3, [r5, #16]
    233a:	rsb	r3, r3, fp
    233e:	adds	r3, #1
    2340:	subs	r0, r3, r0
    2342:	str	r0, [r6, #0]
    2344:	b.n	2308 <setup+0x1430>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2346:	cmp	r4, #0
    2348:	ble.w	1818 <setup+0x940>
    234c:	mov	r9, r4
    234e:	movs	r7, #0
    2350:	mov	r4, fp
    2352:	b.n	2368 <setup+0x1490>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2354:	add.w	r3, r6, r3, lsl #3
    2358:	ldr	r2, [r5, #0]
    235a:	add.w	r3, r5, r3, lsl #2
    235e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2360:	adds	r7, #1
    2362:	cmp	r7, r9
    2364:	beq.w	1818 <setup+0x940>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2368:	movs	r0, #14
    236a:	bl	b204 <random(unsigned long)>
    236e:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2372:	movs	r0, #14
    2374:	bl	b204 <random(unsigned long)>
    2378:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    237a:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    237e:	cmp	r4, #0
    2380:	beq.n	2354 <setup+0x147c>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2382:	ldr	r3, [r5, #20]
    2384:	add.w	r8, r8, r8, lsl #1
    2388:	ldr	r2, [r5, #16]
    238a:	add.w	r6, r6, r8, lsl #3
    238e:	subs	r0, r3, r2
    2390:	add.w	r6, r5, r6, lsl #2
    2394:	adds	r0, #2
    2396:	bl	b204 <random(unsigned long)>
    239a:	ldr	r3, [r5, #16]
    239c:	subs	r3, #1
    239e:	add	r0, r3
    23a0:	str	r0, [r6, #28]
    23a2:	b.n	2360 <setup+0x1488>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23a4:	cmp	r4, #0
    23a6:	ble.w	14b4 <setup+0x5dc>
    23aa:	mov	r9, r5
    23ac:	mov.w	r8, #0
    23b0:	mov	r5, fp
    23b2:	b.n	23cc <setup+0x14f4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23b4:	add.w	r3, r6, r3, lsl #3
    23b8:	ldr.w	r2, [r9]
    23bc:	add.w	r3, r9, r3, lsl #2
    23c0:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    23c2:	add.w	r8, r8, #1
    23c6:	cmp	r8, r4
    23c8:	beq.w	14b4 <setup+0x5dc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23cc:	movs	r0, #14
    23ce:	bl	b204 <random(unsigned long)>
    23d2:	adds	r7, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23d4:	movs	r0, #14
    23d6:	bl	b204 <random(unsigned long)>
    23da:	adds	r6, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    23dc:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    23e0:	cmp	r5, #0
    23e2:	beq.n	23b4 <setup+0x14dc>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    23e4:	ldr.w	r3, [r9, #20]
    23e8:	add.w	r7, r7, r7, lsl #1
    23ec:	ldr.w	r2, [r9, #16]
    23f0:	add.w	r6, r6, r7, lsl #3
    23f4:	subs	r0, r3, r2
    23f6:	add.w	r6, r9, r6, lsl #2
    23fa:	adds	r0, #2
    23fc:	bl	b204 <random(unsigned long)>
    2400:	ldr.w	r3, [r9, #16]
    2404:	subs	r3, #1
    2406:	add	r0, r3
    2408:	str	r0, [r6, #28]
    240a:	b.n	23c2 <setup+0x14ea>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    240c:	cmp	r6, #0
    240e:	ble.w	1254 <setup+0x37c>
    2412:	mov	r9, r5
    2414:	movs	r7, #0
    2416:	mov	r5, fp
    2418:	b.n	2430 <setup+0x1558>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    241a:	add.w	r3, r4, r3, lsl #3
    241e:	ldr.w	r2, [r9]
    2422:	add.w	r3, r9, r3, lsl #2
    2426:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2428:	adds	r7, #1
    242a:	cmp	r7, r6
    242c:	beq.w	1254 <setup+0x37c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2430:	movs	r0, #14
    2432:	bl	b204 <random(unsigned long)>
    2436:	add.w	r8, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    243a:	movs	r0, #14
    243c:	bl	b204 <random(unsigned long)>
    2440:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2442:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2446:	cmp	r5, #0
    2448:	beq.n	241a <setup+0x1542>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    244a:	ldr.w	r3, [r9, #20]
    244e:	add.w	r8, r8, r8, lsl #1
    2452:	ldr.w	r2, [r9, #16]
    2456:	add.w	r4, r4, r8, lsl #3
    245a:	subs	r0, r3, r2
    245c:	add.w	r4, r9, r4, lsl #2
    2460:	adds	r0, #2
    2462:	bl	b204 <random(unsigned long)>
    2466:	ldr.w	r3, [r9, #16]
    246a:	subs	r3, #1
    246c:	add	r0, r3
    246e:	str	r0, [r4, #28]
    2470:	b.n	2428 <setup+0x1550>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2472:	cmp	r6, #0
    2474:	ble.w	1a7a <setup+0xba2>
    2478:	mov	r9, r5
    247a:	mov.w	r8, #0
    247e:	mov	r5, fp
    2480:	b.n	249a <setup+0x15c2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2482:	add.w	r3, r4, r3, lsl #3
    2486:	ldr.w	r2, [r9]
    248a:	add.w	r3, r9, r3, lsl #2
    248e:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2490:	add.w	r8, r8, #1
    2494:	cmp	r8, r6
    2496:	beq.w	1a7a <setup+0xba2>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    249a:	movs	r0, #14
    249c:	bl	b204 <random(unsigned long)>
    24a0:	adds	r7, r0, #5
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24a2:	movs	r0, #14
    24a4:	bl	b204 <random(unsigned long)>
    24a8:	adds	r4, r0, #5
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    24aa:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    24ae:	cmp	r5, #0
    24b0:	beq.n	2482 <setup+0x15aa>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    24b2:	ldr.w	r3, [r9, #20]
    24b6:	add.w	r7, r7, r7, lsl #1
    24ba:	ldr.w	r2, [r9, #16]
    24be:	add.w	r4, r4, r7, lsl #3
    24c2:	subs	r0, r3, r2
    24c4:	add.w	r4, r9, r4, lsl #2
    24c8:	adds	r0, #2
    24ca:	bl	b204 <random(unsigned long)>
    24ce:	ldr.w	r3, [r9, #16]
    24d2:	subs	r3, #1
    24d4:	add	r0, r3
    24d6:	str	r0, [r4, #28]
    24d8:	b.n	2490 <setup+0x15b8>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    24da:	ldr	r3, [r5, #20]
    24dc:	ldr	r0, [r5, #16]
    24de:	subs	r0, r3, r0
    24e0:	adds	r0, #2
    24e2:	bl	b204 <random(unsigned long)>
    24e6:	ldr	r3, [r5, #16]
    24e8:	subs	r3, #1
    24ea:	add	r0, r3
    24ec:	str.w	r0, [r9, #28]
    24f0:	b.n	1fde <setup+0x1106>
    24f2:	ldr	r3, [r5, #20]
    24f4:	ldr	r0, [r5, #16]
    24f6:	subs	r0, r3, r0
    24f8:	adds	r0, #2
    24fa:	bl	b204 <random(unsigned long)>
    24fe:	ldr	r3, [r5, #16]
    2500:	subs	r3, #1
    2502:	add	r0, r3
    2504:	str.w	r0, [sl, #28]
    2508:	b.w	1202 <setup+0x32a>
    250c:	ldr	r3, [r5, #20]
    250e:	ldr	r0, [r5, #16]
    2510:	subs	r0, r3, r0
    2512:	adds	r0, #2
    2514:	bl	b204 <random(unsigned long)>
    2518:	ldr	r3, [r5, #16]
    251a:	subs	r3, #1
    251c:	add	r0, r3
    251e:	str.w	r0, [sl, #28]
    2522:	b.w	1408 <setup+0x530>
    2526:	ldr	r3, [r5, #20]
    2528:	ldr	r0, [r5, #16]
    252a:	subs	r0, r3, r0
    252c:	adds	r0, #2
    252e:	bl	b204 <random(unsigned long)>
    2532:	ldr	r3, [r5, #16]
    2534:	subs	r3, #1
    2536:	add	r0, r3
    2538:	str.w	r0, [r9, #28]
    253c:	b.w	176e <setup+0x896>
    2540:	ldr	r3, [r5, #20]
    2542:	ldr	r0, [r5, #16]
    2544:	subs	r0, r3, r0
    2546:	adds	r0, #2
    2548:	bl	b204 <random(unsigned long)>
    254c:	ldr	r3, [r5, #16]
    254e:	subs	r3, #1
    2550:	add	r0, r3
    2552:	str.w	r0, [r9, #28]
    2556:	b.n	1ec0 <setup+0xfe8>
    2558:	ldr	r3, [r5, #20]
    255a:	ldr	r0, [r5, #16]
    255c:	subs	r0, r3, r0
    255e:	adds	r0, #2
    2560:	bl	b204 <random(unsigned long)>
    2564:	ldr	r3, [r5, #16]
    2566:	subs	r3, #1
    2568:	add	r0, r3
    256a:	str.w	r0, [sl, #28]
    256e:	b.n	1d7a <setup+0xea2>
    2570:	ldr	r3, [r5, #20]
    2572:	ldr	r0, [r5, #16]
    2574:	subs	r0, r3, r0
    2576:	adds	r0, #2
    2578:	bl	b204 <random(unsigned long)>
    257c:	ldr	r3, [r5, #16]
    257e:	subs	r3, #1
    2580:	add	r0, r3
    2582:	str.w	r0, [sl, #28]
    2586:	b.w	1c5c <setup+0xd84>
    258a:	ldr	r3, [r5, #20]
    258c:	ldr	r0, [r5, #16]
    258e:	subs	r0, r3, r0
    2590:	adds	r0, #2
    2592:	bl	b204 <random(unsigned long)>
    2596:	ldr	r3, [r5, #16]
    2598:	subs	r3, #1
    259a:	add	r0, r3
    259c:	str.w	r0, [r9, #28]
    25a0:	b.w	19ce <setup+0xaf6>
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
      if (rand){
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25a4:	ldr	r3, [r5, #20]
    25a6:	ldr	r2, [r5, #16]
    25a8:	subs	r0, r3, r2
    25aa:	adds	r0, #2
    25ac:	bl	b204 <random(unsigned long)>
    25b0:	ldr	r3, [r5, #16]
    25b2:	subs	r3, #1
    25b4:	add	r0, r3
    25b6:	str	r0, [r4, #0]
    25b8:	b.w	124c <setup+0x374>
    25bc:	ldr	r3, [r5, #20]
    25be:	ldr	r2, [r5, #16]
    25c0:	subs	r0, r3, r2
    25c2:	adds	r0, #2
    25c4:	bl	b204 <random(unsigned long)>
    25c8:	ldr	r3, [r5, #16]
    25ca:	subs	r3, #1
    25cc:	add	r0, r3
    25ce:	str	r0, [r6, #0]
    25d0:	b.w	14ac <setup+0x5d4>
    25d4:	ldr	r3, [r5, #20]
    25d6:	ldr	r2, [r5, #16]
    25d8:	subs	r0, r3, r2
    25da:	adds	r0, #2
    25dc:	bl	b204 <random(unsigned long)>
    25e0:	ldr	r3, [r5, #16]
    25e2:	subs	r3, #1
    25e4:	add	r0, r3
    25e6:	str	r0, [r6, #0]
    25e8:	b.w	1810 <setup+0x938>
    25ec:	ldr	r3, [r5, #20]
    25ee:	ldr	r2, [r5, #16]
    25f0:	subs	r0, r3, r2
    25f2:	adds	r0, #2
    25f4:	bl	b204 <random(unsigned long)>
    25f8:	ldr	r3, [r5, #16]
    25fa:	subs	r3, #1
    25fc:	add	r0, r3
    25fe:	str	r0, [r4, #0]
    2600:	b.w	1a72 <setup+0xb9a>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    2604:	bl	b880 <sqrt>
    2608:	vmov.f64	d7, d0
    260c:	b.n	1e22 <setup+0xf4a>
    260e:	bl	b880 <sqrt>
    2612:	vmov.f64	d7, d0
    2616:	b.w	1bc2 <setup+0xcea>
    261a:	bl	b880 <sqrt>
    261e:	vmov.f64	d7, d0
    2622:	b.n	1f42 <setup+0x106a>
    2624:	bl	b880 <sqrt>
    2628:	vmov.f64	d7, d0
    262c:	b.w	1112 <setup+0x23a>
    2630:	bl	b880 <sqrt>
    2634:	vmov.f64	d7, d0
    2638:	b.w	16d4 <setup+0x7fc>
    263c:	bl	b880 <sqrt>
    2640:	vmov.f64	d7, d0
    2644:	b.w	136e <setup+0x496>
    2648:	bl	b880 <sqrt>
    264c:	vmov.f64	d7, d0
    2650:	b.w	1932 <setup+0xa5a>
    2654:	bl	b880 <sqrt>
    2658:	vmov.f64	d7, d0
    265c:	b.w	1cde <setup+0xe06>

00002660 <loop>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2660:	ldr	r3, [pc, #700]	; (2920 <loop+0x2c0>)
}



void loop() {
    2662:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2666:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2668:	mov	r2, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    266a:	ldr	r3, [r3, #40]	; 0x28
    266c:	vpush	{d8}
    2670:	sub	sp, #84	; 0x54
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2672:	ldr	r5, [r2, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2674:	ldr	r4, [r2, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2676:	ldr	r1, [pc, #680]	; (2920 <loop+0x2c0>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2678:	cmp	r4, r3
    267a:	it	eq
    267c:	cmpeq	r5, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    267e:	mov	r0, r5
    uint32_t lo2 = SNVS_HPRTCLR;
    2680:	mov	r3, r4
    if (lo1 == lo2 && hi1 == hi2) {
    2682:	ite	eq
    2684:	moveq	r6, #1
    2686:	movne	r6, #0
    2688:	cmp	r6, #0
    268a:	beq.n	2672 <loop+0x12>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    268c:	lsrs	r3, r4, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    268e:	ldr	r2, [pc, #660]	; (2924 <loop+0x2c4>)
    2690:	orr.w	r3, r3, r5, lsl #27
    2694:	ldr	r0, [r2, #0]
    2696:	vmov	s15, r3
    269a:	vldr	d5, [pc, #636]	; 2918 <loop+0x2b8>
    269e:	vcvt.f64.u32	d7, s15
    26a2:	vdiv.f64	d6, d7, d5
    26a6:	vcvt.u32.f64	s12, d6
    26aa:	vmov	r3, s12
    26ae:	subs	r3, r3, r0
    26b0:	cmp.w	r3, #800	; 0x320
    26b4:	bls.w	27fa <loop+0x19a>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    26b8:	ldr	r4, [r1, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    26ba:	mov	r0, r1

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    26bc:	ldr	r3, [r1, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    26be:	ldr	r5, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    26c0:	ldr	r1, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    26c2:	cmp	r1, r3
    26c4:	it	eq
    26c6:	cmpeq	r5, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    26c8:	mov	r4, r5
    uint32_t lo2 = SNVS_HPRTCLR;
    26ca:	mov	r3, r1
    if (lo1 == lo2 && hi1 == hi2) {
    26cc:	ite	eq
    26ce:	moveq	r6, #1
    26d0:	movne	r6, #0
    26d2:	cmp	r6, #0
    26d4:	beq.n	26be <loop+0x5e>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    26d6:	lsrs	r3, r1, #5
    sinceBeam = 0;
    newBeam(&synapse_B, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    26d8:	movs	r0, #0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    26da:	mov.w	r7, #360	; 0x168
    26de:	movs	r1, #2
    26e0:	orr.w	r3, r3, r5, lsl #27
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    26e4:	mov	r6, r0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    26e6:	ldr.w	r8, [pc, #592]	; 2938 <loop+0x2d8>
	HSB_color.s = s;
	HSB_color.b = b;
    26ea:	mov.w	r9, #100	; 0x64
    26ee:	vmov	s15, r3
	RGB_updated = false;
	HSB_updated = true;
    26f2:	mov.w	sl, #1
    26f6:	add	r5, sp, #56	; 0x38
    26f8:	add	r4, sp, #48	; 0x30
    26fa:	vcvt.f64.u32	d7, s15
    26fe:	vldr	d5, [pc, #536]	; 2918 <loop+0x2b8>
    2702:	vdiv.f64	d6, d7, d5
    2706:	vcvt.u32.f64	s12, d6
    270a:	vstr	s12, [r2]
    270e:	bl	b20c <random(long, long)>
    2712:	mov	r1, r7
    2714:	mov	fp, r0
    2716:	mov	r0, r6
    2718:	bl	b20c <random(long, long)>
    271c:	movs	r1, #101	; 0x65
    271e:	str	r0, [sp, #16]
    2720:	movs	r0, #80	; 0x50
    2722:	bl	b20c <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    2726:	ldr	r3, [sp, #16]
	HSB_color.s = s;
    2728:	strb.w	r0, [sp, #56]	; 0x38
    272c:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    272e:	add.w	r2, r3, #720	; 0x2d0
    2732:	movs	r0, #8
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    2734:	strb.w	r6, [sp, #60]	; 0x3c
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    2738:	lsrs	r3, r2, #3
	HSB_color.s = s;
	HSB_color.b = b;
    273a:	strb.w	r9, [sp, #57]	; 0x39
	RGB_updated = false;
	HSB_updated = true;
    273e:	strb.w	sl, [sp, #61]	; 0x3d
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    2742:	umull	lr, r3, r8, r3
    2746:	lsrs	r3, r3, #2
    2748:	mls	r3, r7, r3, r2
    274c:	str	r3, [sp, #52]	; 0x34
    274e:	bl	b20c <random(long, long)>
    2752:	movw	r1, #6000	; 0x1770
    2756:	vmov	s16, r0
    275a:	mov.w	r0, #2000	; 0x7d0
    275e:	bl	b20c <random(long, long)>
    2762:	str	r0, [sp, #8]
    2764:	vcvt.f32.s32	s0, s16
    2768:	ldmia.w	r5, {r0, r1}
    276c:	ldmia.w	r4, {r2, r3}
    2770:	stmia.w	sp, {r0, r1}
    2774:	subs.w	r1, fp, r6
    2778:	ldr	r0, [pc, #428]	; (2928 <loop+0x2c8>)
    277a:	it	ne
    277c:	movne	r1, #1
    277e:	bl	130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_A, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    2782:	mov	r0, r6
    2784:	movs	r1, #2
    2786:	bl	b20c <random(long, long)>
    278a:	mov	r1, r7
    278c:	mov	fp, r0
    278e:	mov	r0, r6
    2790:	bl	b20c <random(long, long)>
    2794:	movs	r1, #101	; 0x65
    2796:	str	r0, [sp, #16]
    2798:	movs	r0, #80	; 0x50
    279a:	bl	b20c <random(long, long)>
    279e:	ldr	r2, [sp, #16]
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    27a0:	strb.w	r6, [sp, #60]	; 0x3c
    27a4:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    27a6:	add.w	r2, r2, #720	; 0x2d0
	HSB_color.s = s;
    27aa:	strb.w	r0, [sp, #56]	; 0x38
    27ae:	movs	r0, #8
	HSB_color.b = b;
    27b0:	strb.w	r9, [sp, #57]	; 0x39
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    27b4:	lsrs	r3, r2, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
	HSB_updated = true;
    27b6:	strb.w	sl, [sp, #61]	; 0x3d
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    27ba:	umull	r6, r3, r8, r3
    27be:	lsrs	r3, r3, #2
    27c0:	mls	r7, r7, r3, r2
    27c4:	str	r7, [sp, #52]	; 0x34
    27c6:	bl	b20c <random(long, long)>
    27ca:	movw	r1, #6000	; 0x1770
    27ce:	vmov	s16, r0
    27d2:	mov.w	r0, #2000	; 0x7d0
    27d6:	bl	b20c <random(long, long)>
    27da:	str	r0, [sp, #8]
    27dc:	vcvt.f32.s32	s0, s16
    27e0:	ldmia.w	r5, {r0, r1}
    27e4:	ldmia.w	r4, {r2, r3}
    27e8:	stmia.w	sp, {r0, r1}
    27ec:	adds.w	r1, fp, #0
    27f0:	ldr	r0, [pc, #312]	; (292c <loop+0x2cc>)
    27f2:	it	ne
    27f4:	movne	r1, #1
    27f6:	bl	130 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
	}


	
	void iterate_animation() {
		if (newFrameReady) return;
    27fa:	ldr	r3, [pc, #308]	; (2930 <loop+0x2d0>)
    27fc:	ldrb.w	r1, [r3, #148]	; 0x94
    2800:	cmp	r1, #0
    2802:	beq.w	2c04 <loop+0x5a4>
    2806:	ldr	r3, [pc, #300]	; (2934 <loop+0x2d4>)
    2808:	ldrb.w	r1, [r3, #148]	; 0x94
    280c:	cbz	r1, 2820 <loop+0x1c0>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    280e:	bl	448 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    2812:	add	sp, #84	; 0x54
    2814:	vpop	{d8}
    2818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
  updateScreensFade();
    281c:	b.w	9e0 <updateScreensFade()>
		(*_fg_automaton).iterate();
    2820:	ldr.w	r9, [r3, #124]	; 0x7c
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    2824:	movs	r3, #2
    2826:	add.w	fp, sp, #48	; 0x30
    282a:	movs	r2, #32
    282c:	str	r3, [sp, #24]
    282e:	addw	r3, r9, #2428	; 0x97c
    2832:	mov	r0, fp
    2834:	str	r1, [sp, #40]	; 0x28
    2836:	str	r3, [sp, #32]
    2838:	bl	c124 <memset>
    283c:	ldr.w	sl, [pc, #252]	; 293c <loop+0x2dc>
    2840:	add.w	r3, r9, #4640	; 0x1220
    2844:	str	r3, [sp, #44]	; 0x2c
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    2846:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    284a:	movs	r7, #2
  updateScreensFade();
    284c:	bl	9e0 <updateScreensFade()>
    2850:	ldrb.w	r2, [r9, #24]
    2854:	ldr	r3, [sp, #44]	; 0x2c
    2856:	ldr	r1, [sp, #32]
    2858:	ldr	r3, [r3, #0]
    285a:	str	r2, [sp, #36]	; 0x24
    285c:	sub.w	ip, r1, #96	; 0x60
    2860:	ldr	r2, [sp, #40]	; 0x28
    2862:	add.w	r8, r3, r2
    2866:	sub.w	r3, r1, #2400	; 0x960
    286a:	str.w	r8, [sp, #16]
    286e:	str	r3, [sp, #20]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2870:	ldr	r3, [sp, #36]	; 0x24
    2872:	cmp	r3, #0
    2874:	beq.w	2bee <loop+0x58e>
      return _background[x][y];
    2878:	ldr	r3, [sp, #16]
    287a:	ldrb	r3, [r3, #0]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    287c:	cmp	r3, #0
    287e:	beq.n	297e <loop+0x31e>
    2880:	ldr	r3, [sp, #24]
    2882:	mov	lr, fp
    2884:	subs	r6, r3, #3
    2886:	subs	r3, r7, #3
    2888:	str	r3, [sp, #28]
    288a:	smull	r3, r2, sl, r6
    288e:	asrs	r3, r6, #31
    2890:	ldr	r0, [sp, #28]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2892:	mov	r5, lr
    2894:	rsb	r3, r3, r2, asr #2
    2898:	add.w	r3, r3, r3, lsl #1
    289c:	sub.w	r3, r6, r3, lsl #3
    28a0:	adds	r3, #24
    28a2:	smull	r2, r1, sl, r3
    28a6:	asrs	r2, r3, #31
    28a8:	rsb	r2, r2, r1, asr #2
    28ac:	add.w	r2, r2, r2, lsl #1
    28b0:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    28b4:	add.w	r2, r2, r2, lsl #1
    28b8:	lsls	r4, r2, #3
    28ba:	smull	r3, r2, sl, r0
    28be:	asrs	r3, r0, #31
    28c0:	rsb	r3, r3, r2, asr #2
    28c4:	add.w	r3, r3, r3, lsl #1
    28c8:	sub.w	r3, r0, r3, lsl #3
    28cc:	adds	r0, #1
    28ce:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    28d0:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    28d2:	smull	r2, r1, sl, r3
    28d6:	mov.w	r2, r3, asr #31
    28da:	rsb	r2, r2, r1, asr #2
    28de:	add.w	r2, r2, r2, lsl #1
    28e2:	sub.w	r3, r3, r2, lsl #3
    28e6:	add	r3, r4
    28e8:	add.w	r3, r9, r3, lsl #2
    28ec:	ldr	r3, [r3, #28]
    28ee:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    28f2:	bne.n	28ba <loop+0x25a>
    28f4:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    28f6:	ldr	r3, [sp, #24]
    28f8:	add.w	lr, lr, #12
    28fc:	cmp	r3, r6
    28fe:	bne.n	288a <loop+0x22a>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2900:	ldr	r3, [sp, #20]
    2902:	movs	r0, #1
    2904:	ldr	r1, [r3, #0]
    2906:	ldr.w	r3, [r9]
    290a:	adds	r5, r1, r3
    290c:	movs	r4, #0
    290e:	mov	r3, r4
    2910:	b.n	2946 <loop+0x2e6>
    2912:	nop
    2914:	nop.w
    2918:	.word	0xd2f1a9fc
    291c:	.word	0x3ff0624d
    2920:	.word	0x400d4000
    2924:	.word	0x2000157c
    2928:	.word	0x2000856c
    292c:	.word	0x20008558
    2930:	.word	0x200039f4
    2934:	.word	0x20003aa4
    2938:	.word	0x16c16c17
    293c:	.word	0x2aaaaaab
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2940:	adds	r3, #1
    2942:	cmp	r3, #8
    2944:	beq.n	295a <loop+0x2fa>
          if ((i >> j) % 2 == 1){
    2946:	asr.w	r2, r0, r3
    294a:	lsls	r6, r2, #31
    294c:	bpl.n	2940 <loop+0x2e0>
            sum += neighbours[j];
    294e:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2952:	adds	r3, #1
    2954:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    2956:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2958:	bne.n	2946 <loop+0x2e6>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    295a:	cmp	r5, r4
    295c:	beq.w	2bf8 <loop+0x598>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    2960:	adds	r0, #1
    2962:	cmp.w	r0, #256	; 0x100
    2966:	bne.n	290c <loop+0x2ac>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    2968:	ldr.w	r3, [r9, #8]
    296c:	subs	r1, r1, r3
    296e:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    2972:	ldr.w	r3, [r9, #12]
    2976:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    2978:	it	gt
    297a:	strgt.w	r3, [ip]
    297e:	ldr	r3, [sp, #20]
    2980:	add.w	ip, ip, #4
    2984:	adds	r7, #1
    2986:	add.w	r8, r8, #1
    298a:	adds	r3, #4
    298c:	str	r3, [sp, #20]
    298e:	ldr	r3, [sp, #16]
    2990:	adds	r3, #1
    2992:	str	r3, [sp, #16]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    2994:	ldr	r3, [sp, #32]
    2996:	cmp	r3, ip
    2998:	bne.w	2870 <loop+0x210>
    299c:	ldr	r2, [sp, #32]
    299e:	ldr	r3, [sp, #40]	; 0x28
    29a0:	adds	r2, #96	; 0x60
    29a2:	adds	r3, #24
    29a4:	str	r2, [sp, #32]
    29a6:	ldr	r2, [sp, #24]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    29a8:	cmp.w	r3, #576	; 0x240
    29ac:	str	r3, [sp, #40]	; 0x28
    29ae:	add.w	r2, r2, #1
    29b2:	str	r2, [sp, #24]
    29b4:	bne.w	2846 <loop+0x1e6>
    29b8:	movw	r5, #4632	; 0x1218
    29bc:	addw	r4, r9, #2328	; 0x918
    29c0:	add	r5, r9
    29c2:	sub.w	r3, r4, #2304	; 0x900
    29c6:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    29ca:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    29cc:	ldr.w	r1, [r2, #4]!
    29d0:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    29d4:	cmp	r0, r3
    29d6:	bne.n	29cc <loop+0x36c>
    29d8:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    29da:	cmp	r5, r4
    29dc:	bne.n	29c2 <loop+0x362>
		(*_bg_automaton).iterate();
    29de:	ldr	r3, [pc, #792]	; (2cf8 <loop+0x698>)
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    29e0:	movs	r1, #0
    29e2:	ldr.w	sl, [pc, #796]	; 2d00 <loop+0x6a0>
    29e6:	movs	r2, #32
    29e8:	ldr.w	r9, [r3, #120]	; 0x78
    29ec:	movs	r3, #2
    29ee:	mov	r0, fp
    29f0:	str	r1, [sp, #40]	; 0x28
    29f2:	str	r3, [sp, #24]
    29f4:	addw	r3, r9, #2428	; 0x97c
    29f8:	str	r3, [sp, #32]
    29fa:	add.w	r3, r9, #4640	; 0x1220
    29fe:	str	r3, [sp, #44]	; 0x2c
    2a00:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    2a04:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2a08:	movs	r7, #2
  updateScreensFade();
    2a0a:	bl	9e0 <updateScreensFade()>
    2a0e:	ldrb.w	r2, [r9, #24]
    2a12:	ldr	r3, [sp, #44]	; 0x2c
    2a14:	ldr	r1, [sp, #32]
    2a16:	ldr	r3, [r3, #0]
    2a18:	str	r2, [sp, #36]	; 0x24
    2a1a:	sub.w	ip, r1, #96	; 0x60
    2a1e:	ldr	r2, [sp, #40]	; 0x28
    2a20:	add.w	r8, r3, r2
    2a24:	sub.w	r3, r1, #2400	; 0x960
    2a28:	str.w	r8, [sp, #20]
    2a2c:	str	r3, [sp, #16]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2a2e:	ldr	r3, [sp, #36]	; 0x24
    2a30:	cmp	r3, #0
    2a32:	beq.w	2fcc <loop+0x96c>
      return _background[x][y];
    2a36:	ldr	r3, [sp, #20]
    2a38:	ldrb	r3, [r3, #0]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    2a3a:	cmp	r3, #0
    2a3c:	beq.n	2b0e <loop+0x4ae>
    2a3e:	ldr	r3, [sp, #24]
    2a40:	mov	lr, fp
    2a42:	subs	r6, r3, #3
    2a44:	subs	r3, r7, #3
    2a46:	str	r3, [sp, #28]
    2a48:	smull	r3, r2, sl, r6
    2a4c:	asrs	r3, r6, #31
    2a4e:	ldr	r0, [sp, #28]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2a50:	mov	r5, lr
    2a52:	rsb	r3, r3, r2, asr #2
    2a56:	add.w	r3, r3, r3, lsl #1
    2a5a:	sub.w	r3, r6, r3, lsl #3
    2a5e:	adds	r3, #24
    2a60:	smull	r2, r1, sl, r3
    2a64:	asrs	r2, r3, #31
    2a66:	rsb	r2, r2, r1, asr #2
    2a6a:	add.w	r2, r2, r2, lsl #1
    2a6e:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2a72:	add.w	r2, r2, r2, lsl #1
    2a76:	lsls	r4, r2, #3
    2a78:	smull	r3, r2, sl, r0
    2a7c:	asrs	r3, r0, #31
    2a7e:	rsb	r3, r3, r2, asr #2
    2a82:	add.w	r3, r3, r3, lsl #1
    2a86:	sub.w	r3, r0, r3, lsl #3
    2a8a:	adds	r0, #1
    2a8c:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2a8e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2a90:	smull	r2, r1, sl, r3
    2a94:	mov.w	r2, r3, asr #31
    2a98:	rsb	r2, r2, r1, asr #2
    2a9c:	add.w	r2, r2, r2, lsl #1
    2aa0:	sub.w	r3, r3, r2, lsl #3
    2aa4:	add	r3, r4
    2aa6:	add.w	r3, r9, r3, lsl #2
    2aaa:	ldr	r3, [r3, #28]
    2aac:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2ab0:	bne.n	2a78 <loop+0x418>
    2ab2:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    2ab4:	ldr	r3, [sp, #24]
    2ab6:	add.w	lr, lr, #12
    2aba:	cmp	r3, r6
    2abc:	bne.n	2a48 <loop+0x3e8>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2abe:	ldr	r3, [sp, #16]
    2ac0:	movs	r0, #1
    2ac2:	ldr	r1, [r3, #0]
    2ac4:	ldr.w	r3, [r9]
    2ac8:	adds	r5, r1, r3
    2aca:	movs	r4, #0
    2acc:	mov	r3, r4
    2ace:	b.n	2ad6 <loop+0x476>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2ad0:	adds	r3, #1
    2ad2:	cmp	r3, #8
    2ad4:	beq.n	2aea <loop+0x48a>
          if ((i >> j) % 2 == 1){
    2ad6:	asr.w	r2, r0, r3
    2ada:	lsls	r2, r2, #31
    2adc:	bpl.n	2ad0 <loop+0x470>
            sum += neighbours[j];
    2ade:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2ae2:	adds	r3, #1
    2ae4:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    2ae6:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2ae8:	bne.n	2ad6 <loop+0x476>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    2aea:	cmp	r5, r4
    2aec:	beq.w	2fd6 <loop+0x976>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    2af0:	adds	r0, #1
    2af2:	cmp.w	r0, #256	; 0x100
    2af6:	bne.n	2aca <loop+0x46a>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    2af8:	ldr.w	r3, [r9, #8]
    2afc:	subs	r1, r1, r3
    2afe:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    2b02:	ldr.w	r3, [r9, #12]
    2b06:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    2b08:	it	gt
    2b0a:	strgt.w	r3, [ip]
    2b0e:	ldr	r3, [sp, #16]
    2b10:	add.w	ip, ip, #4
    2b14:	adds	r7, #1
    2b16:	add.w	r8, r8, #1
    2b1a:	adds	r3, #4
    2b1c:	str	r3, [sp, #16]
    2b1e:	ldr	r3, [sp, #20]
    2b20:	adds	r3, #1
    2b22:	str	r3, [sp, #20]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b24:	ldr	r3, [sp, #32]
    2b26:	cmp	r3, ip
    2b28:	bne.n	2a2e <loop+0x3ce>
    2b2a:	ldr	r2, [sp, #32]
    2b2c:	ldr	r3, [sp, #40]	; 0x28
    2b2e:	adds	r2, #96	; 0x60
    2b30:	adds	r3, #24
    2b32:	str	r2, [sp, #32]
    2b34:	ldr	r2, [sp, #24]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b36:	cmp.w	r3, #576	; 0x240
    2b3a:	str	r3, [sp, #40]	; 0x28
    2b3c:	add.w	r2, r2, #1
    2b40:	str	r2, [sp, #24]
    2b42:	bne.w	2a04 <loop+0x3a4>
    2b46:	movw	r5, #4632	; 0x1218
    2b4a:	addw	r4, r9, #2328	; 0x918
    2b4e:	add	r5, r9
    2b50:	sub.w	r3, r4, #2304	; 0x900
    2b54:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2b58:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    2b5a:	ldr.w	r1, [r2, #4]!
    2b5e:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2b62:	cmp	r0, r3
    2b64:	bne.n	2b5a <loop+0x4fa>
    2b66:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    2b68:	cmp	r5, r4
    2b6a:	bne.n	2b50 <loop+0x4f0>
		ratio++;
    2b6c:	ldr	r3, [pc, #392]	; (2cf8 <loop+0x698>)
    2b6e:	ldr	r2, [pc, #392]	; (2cf8 <loop+0x698>)
    2b70:	ldr.w	r3, [r3, #152]	; 0x98
    2b74:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    2b76:	cmp	r3, #1
	
	void iterate_animation() {
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    2b78:	str.w	r3, [r2, #152]	; 0x98
		if (ratio == RATIO_GROWTH){
    2b7c:	beq.w	3146 <loop+0xae6>
    2b80:	ldr	r7, [pc, #376]	; (2cfc <loop+0x69c>)
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2b82:	mov.w	sl, #0
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    2b86:	ldr.w	lr, [pc, #380]	; 2d04 <loop+0x6a4>
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
    2b8a:	mov	r9, r7
				// 	hue = (*_bg_automaton).colorMap(x, y);
				// }
				// bri = (*_grow_automaton).brightnessMap(x, y);
				// sat = (*_sat_automaton).saturationMap(x, y);
				
				hue = (*_mask)[x][y].getHue();
    2b8c:	add.w	ip, sl, sl, lsl #1
    2b90:	movs	r6, #0
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    2b92:	add.w	r8, sl, sl, lsl #3
    2b96:	mov.w	ip, ip, lsl #3
    2b9a:	mov.w	r8, r8, lsl #3
    2b9e:	ldr	r3, [pc, #344]	; (2cf8 <loop+0x698>)
    2ba0:	add.w	r0, ip, r6
    2ba4:	ldr.w	r1, [r3, #140]	; 0x8c
    2ba8:	add.w	r2, r1, r0, lsl #3
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
    2bac:	ldrb	r3, [r2, #4]
    2bae:	rsb	r3, r3, #255	; 0xff
    2bb2:	ldr.w	r3, [r7, r3, lsl #2]
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    2bb6:	cmp	r3, #255	; 0xff
    2bb8:	beq.w	303c <loop+0x9dc>
    2bbc:	ldr.w	r4, [r1, r0, lsl #3]
static void getRGB(int hue, int sat, int val, byte* r, byte* g, byte* b) {
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
    2bc0:	ldrb	r2, [r2, #5]
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    2bc2:	smull	r1, fp, lr, r4
    2bc6:	asrs	r5, r4, #31
static void getRGB(int hue, int sat, int val, byte* r, byte* g, byte* b) {
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
    2bc8:	ldr.w	r1, [r9, r2, lsl #2]
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    2bcc:	add	fp, r4
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    2bce:	mul.w	r3, r3, r1
    switch(hue/60) {
    2bd2:	rsb	r2, r5, fp, asr #5
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    2bd6:	asrs	r3, r3, #8
    switch(hue/60) {
    2bd8:	cmp	r2, #5
    2bda:	bhi.w	313e <loop+0xade>
    2bde:	tbh	[pc, r2, lsl #1]
    2be2:	.short	0x0293
    2be4:	.word	0x02a10275
    2be8:	.word	0x025e0244
    2bec:	.short	0x020b

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    2bee:	ldrb.w	r3, [r8]
    2bf2:	eor.w	r3, r3, #1
    2bf6:	b.n	287c <loop+0x21c>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    2bf8:	ldr.w	r2, [r9, #4]
    2bfc:	add	r1, r2
    2bfe:	str.w	r1, [ip]
    2c02:	b.n	2972 <loop+0x312>


	
	void iterate_animation() {
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
    2c04:	ldr.w	r9, [r3, #124]	; 0x7c
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    2c08:	movs	r3, #2
    2c0a:	add.w	fp, sp, #48	; 0x30
    2c0e:	movs	r2, #32
    2c10:	str	r3, [sp, #24]
    2c12:	addw	r3, r9, #2428	; 0x97c
    2c16:	mov	r0, fp
    2c18:	str	r1, [sp, #40]	; 0x28
    2c1a:	str	r3, [sp, #32]
    2c1c:	bl	c124 <memset>
    2c20:	ldr.w	sl, [pc, #220]	; 2d00 <loop+0x6a0>
    2c24:	add.w	r3, r9, #4640	; 0x1220
    2c28:	str	r3, [sp, #44]	; 0x2c
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    2c2a:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2c2e:	movs	r7, #2
  updateScreensFade();
    2c30:	bl	9e0 <updateScreensFade()>
    2c34:	ldrb.w	r2, [r9, #24]
    2c38:	ldr	r3, [sp, #44]	; 0x2c
    2c3a:	ldr	r1, [sp, #32]
    2c3c:	ldr	r3, [r3, #0]
    2c3e:	str	r2, [sp, #36]	; 0x24
    2c40:	sub.w	ip, r1, #96	; 0x60
    2c44:	ldr	r2, [sp, #40]	; 0x28
    2c46:	add.w	r8, r3, r2
    2c4a:	sub.w	r3, r1, #2400	; 0x960
    2c4e:	str.w	r8, [sp, #20]
    2c52:	str	r3, [sp, #16]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2c54:	ldr	r3, [sp, #36]	; 0x24
    2c56:	cmp	r3, #0
    2c58:	beq.w	2fb6 <loop+0x956>
      return _background[x][y];
    2c5c:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    2c60:	cmp	r3, #0
    2c62:	beq.n	2d46 <loop+0x6e6>
    2c64:	ldr	r3, [sp, #24]
    2c66:	mov	lr, fp
    2c68:	subs	r6, r3, #3
    2c6a:	subs	r3, r7, #3
    2c6c:	str	r3, [sp, #28]
    2c6e:	smull	r3, r2, sl, r6
    2c72:	asrs	r3, r6, #31
    2c74:	ldr	r0, [sp, #28]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2c76:	mov	r5, lr
    2c78:	rsb	r3, r3, r2, asr #2
    2c7c:	add.w	r3, r3, r3, lsl #1
    2c80:	sub.w	r3, r6, r3, lsl #3
    2c84:	adds	r3, #24
    2c86:	smull	r2, r1, sl, r3
    2c8a:	asrs	r2, r3, #31
    2c8c:	rsb	r2, r2, r1, asr #2
    2c90:	add.w	r2, r2, r2, lsl #1
    2c94:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2c98:	add.w	r2, r2, r2, lsl #1
    2c9c:	lsls	r4, r2, #3
    2c9e:	smull	r3, r2, sl, r0
    2ca2:	asrs	r3, r0, #31
    2ca4:	rsb	r3, r3, r2, asr #2
    2ca8:	add.w	r3, r3, r3, lsl #1
    2cac:	sub.w	r3, r0, r3, lsl #3
    2cb0:	adds	r0, #1
    2cb2:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2cb4:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2cb6:	smull	r2, r1, sl, r3
    2cba:	mov.w	r2, r3, asr #31
    2cbe:	rsb	r2, r2, r1, asr #2
    2cc2:	add.w	r2, r2, r2, lsl #1
    2cc6:	sub.w	r3, r3, r2, lsl #3
    2cca:	add	r3, r4
    2ccc:	add.w	r3, r9, r3, lsl #2
    2cd0:	ldr	r3, [r3, #28]
    2cd2:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2cd6:	bne.n	2c9e <loop+0x63e>
    2cd8:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    2cda:	ldr	r3, [sp, #24]
    2cdc:	add.w	lr, lr, #12
    2ce0:	cmp	r6, r3
    2ce2:	bne.n	2c6e <loop+0x60e>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2ce4:	ldr	r3, [sp, #16]
    2ce6:	movs	r0, #1
    2ce8:	ldr	r1, [r3, #0]
    2cea:	ldr.w	r3, [r9]
    2cee:	adds	r5, r1, r3
    2cf0:	movs	r4, #0
    2cf2:	mov	r3, r4
    2cf4:	b.n	2d0e <loop+0x6ae>
    2cf6:	nop
    2cf8:	.word	0x20003aa4
    2cfc:	.word	0x20000060
    2d00:	.word	0x2aaaaaab
    2d04:	.word	0x88888889
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2d08:	adds	r3, #1
    2d0a:	cmp	r3, #8
    2d0c:	beq.n	2d22 <loop+0x6c2>
          if ((i >> j) % 2 == 1){
    2d0e:	asr.w	r2, r0, r3
    2d12:	lsls	r2, r2, #31
    2d14:	bpl.n	2d08 <loop+0x6a8>
            sum += neighbours[j];
    2d16:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2d1a:	adds	r3, #1
    2d1c:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    2d1e:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2d20:	bne.n	2d0e <loop+0x6ae>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    2d22:	cmp	r5, r4
    2d24:	beq.w	2fc0 <loop+0x960>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    2d28:	adds	r0, #1
    2d2a:	cmp.w	r0, #256	; 0x100
    2d2e:	bne.n	2cf0 <loop+0x690>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    2d30:	ldr.w	r3, [r9, #8]
    2d34:	subs	r1, r1, r3
    2d36:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    2d3a:	ldr.w	r3, [r9, #12]
    2d3e:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    2d40:	it	gt
    2d42:	strgt.w	r3, [ip]
    2d46:	ldr	r3, [sp, #16]
    2d48:	add.w	ip, ip, #4
    2d4c:	adds	r7, #1
    2d4e:	add.w	r8, r8, #1
    2d52:	adds	r3, #4
    2d54:	str	r3, [sp, #16]
    2d56:	ldr	r3, [sp, #20]
    2d58:	adds	r3, #1
    2d5a:	str	r3, [sp, #20]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    2d5c:	ldr	r3, [sp, #32]
    2d5e:	cmp	ip, r3
    2d60:	bne.w	2c54 <loop+0x5f4>
    2d64:	ldr	r3, [sp, #40]	; 0x28
    2d66:	add.w	r2, ip, #96	; 0x60
    2d6a:	adds	r3, #24
    2d6c:	str	r2, [sp, #32]
    2d6e:	ldr	r2, [sp, #24]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    2d70:	cmp.w	r3, #576	; 0x240
    2d74:	str	r3, [sp, #40]	; 0x28
    2d76:	add.w	r2, r2, #1
    2d7a:	str	r2, [sp, #24]
    2d7c:	bne.w	2c2a <loop+0x5ca>
    2d80:	movw	r5, #4632	; 0x1218
    2d84:	addw	r4, r9, #2328	; 0x918
    2d88:	add	r5, r9
    2d8a:	sub.w	r3, r4, #2304	; 0x900
    2d8e:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2d92:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    2d94:	ldr.w	r1, [r2, #4]!
    2d98:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2d9c:	cmp	r3, r0
    2d9e:	bne.n	2d94 <loop+0x734>
    2da0:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    2da2:	cmp	r4, r5
    2da4:	bne.n	2d8a <loop+0x72a>
		(*_bg_automaton).iterate();
    2da6:	ldr	r3, [pc, #836]	; (30ec <loop+0xa8c>)
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    2da8:	movs	r1, #0
    2daa:	ldr.w	sl, [pc, #852]	; 3100 <loop+0xaa0>
    2dae:	movs	r2, #32
    2db0:	ldr.w	r9, [r3, #120]	; 0x78
    2db4:	movs	r3, #2
    2db6:	mov	r0, fp
    2db8:	str	r1, [sp, #40]	; 0x28
    2dba:	str	r3, [sp, #24]
    2dbc:	addw	r3, r9, #2428	; 0x97c
    2dc0:	str	r3, [sp, #32]
    2dc2:	add.w	r3, r9, #4640	; 0x1220
    2dc6:	str	r3, [sp, #44]	; 0x2c
    2dc8:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    2dcc:	bl	448 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2dd0:	movs	r7, #2
  updateScreensFade();
    2dd2:	bl	9e0 <updateScreensFade()>
    2dd6:	ldrb.w	r2, [r9, #24]
    2dda:	ldr	r3, [sp, #44]	; 0x2c
    2ddc:	ldr	r1, [sp, #32]
    2dde:	ldr	r3, [r3, #0]
    2de0:	str	r2, [sp, #36]	; 0x24
    2de2:	sub.w	ip, r1, #96	; 0x60
    2de6:	ldr	r2, [sp, #40]	; 0x28
    2de8:	add.w	r8, r3, r2
    2dec:	sub.w	r3, r1, #2400	; 0x960
    2df0:	str.w	r8, [sp, #20]
    2df4:	str	r3, [sp, #16]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    2df6:	ldr	r3, [sp, #36]	; 0x24
    2df8:	cmp	r3, #0
    2dfa:	beq.w	2fe2 <loop+0x982>
      return _background[x][y];
    2dfe:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    2e02:	cmp	r3, #0
    2e04:	beq.n	2ed6 <loop+0x876>
    2e06:	ldr	r3, [sp, #24]
    2e08:	mov	lr, fp
    2e0a:	subs	r6, r3, #3
    2e0c:	subs	r3, r7, #3
    2e0e:	str	r3, [sp, #28]
    2e10:	smull	r3, r2, sl, r6
    2e14:	asrs	r3, r6, #31
    2e16:	ldr	r0, [sp, #28]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    2e18:	mov	r5, lr
    2e1a:	rsb	r3, r3, r2, asr #2
    2e1e:	add.w	r3, r3, r3, lsl #1
    2e22:	sub.w	r3, r6, r3, lsl #3
    2e26:	adds	r3, #24
    2e28:	smull	r2, r1, sl, r3
    2e2c:	asrs	r2, r3, #31
    2e2e:	rsb	r2, r2, r1, asr #2
    2e32:	add.w	r2, r2, r2, lsl #1
    2e36:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2e3a:	add.w	r2, r2, r2, lsl #1
    2e3e:	lsls	r4, r2, #3
    2e40:	smull	r3, r2, sl, r0
    2e44:	asrs	r3, r0, #31
    2e46:	rsb	r3, r3, r2, asr #2
    2e4a:	add.w	r3, r3, r3, lsl #1
    2e4e:	sub.w	r3, r0, r3, lsl #3
    2e52:	adds	r0, #1
    2e54:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2e56:	cmp	r0, r7
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    2e58:	smull	r2, r1, sl, r3
    2e5c:	mov.w	r2, r3, asr #31
    2e60:	rsb	r2, r2, r1, asr #2
    2e64:	add.w	r2, r2, r2, lsl #1
    2e68:	sub.w	r3, r3, r2, lsl #3
    2e6c:	add	r3, r4
    2e6e:	add.w	r3, r9, r3, lsl #2
    2e72:	ldr	r3, [r3, #28]
    2e74:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    2e78:	bne.n	2e40 <loop+0x7e0>
    2e7a:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    2e7c:	ldr	r3, [sp, #24]
    2e7e:	add.w	lr, lr, #12
    2e82:	cmp	r6, r3
    2e84:	bne.n	2e10 <loop+0x7b0>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2e86:	ldr	r3, [sp, #16]
    2e88:	movs	r0, #1
    2e8a:	ldr	r1, [r3, #0]
    2e8c:	ldr.w	r3, [r9]
    2e90:	adds	r5, r1, r3
    2e92:	movs	r4, #0
    2e94:	mov	r3, r4
    2e96:	b.n	2e9e <loop+0x83e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2e98:	adds	r3, #1
    2e9a:	cmp	r3, #8
    2e9c:	beq.n	2eb2 <loop+0x852>
          if ((i >> j) % 2 == 1){
    2e9e:	asr.w	r2, r0, r3
    2ea2:	lsls	r6, r2, #31
    2ea4:	bpl.n	2e98 <loop+0x838>
            sum += neighbours[j];
    2ea6:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2eaa:	adds	r3, #1
    2eac:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    2eae:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    2eb0:	bne.n	2e9e <loop+0x83e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    2eb2:	cmp	r5, r4
    2eb4:	beq.w	2fec <loop+0x98c>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    2eb8:	adds	r0, #1
    2eba:	cmp.w	r0, #256	; 0x100
    2ebe:	bne.n	2e92 <loop+0x832>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    2ec0:	ldr.w	r3, [r9, #8]
    2ec4:	subs	r1, r1, r3
    2ec6:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    2eca:	ldr.w	r3, [r9, #12]
    2ece:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    2ed0:	it	gt
    2ed2:	strgt.w	r3, [ip]
    2ed6:	ldr	r3, [sp, #16]
    2ed8:	add.w	ip, ip, #4
    2edc:	adds	r7, #1
    2ede:	add.w	r8, r8, #1
    2ee2:	adds	r3, #4
    2ee4:	str	r3, [sp, #16]
    2ee6:	ldr	r3, [sp, #20]
    2ee8:	adds	r3, #1
    2eea:	str	r3, [sp, #20]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    2eec:	ldr	r3, [sp, #32]
    2eee:	cmp	r3, ip
    2ef0:	bne.n	2df6 <loop+0x796>
    2ef2:	ldr	r2, [sp, #32]
    2ef4:	ldr	r3, [sp, #40]	; 0x28
    2ef6:	adds	r2, #96	; 0x60
    2ef8:	adds	r3, #24
    2efa:	str	r2, [sp, #32]
    2efc:	ldr	r2, [sp, #24]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    2efe:	cmp.w	r3, #576	; 0x240
    2f02:	str	r3, [sp, #40]	; 0x28
    2f04:	add.w	r2, r2, #1
    2f08:	str	r2, [sp, #24]
    2f0a:	bne.w	2dcc <loop+0x76c>
    2f0e:	movw	r5, #4632	; 0x1218
    2f12:	addw	r4, r9, #2328	; 0x918
    2f16:	add	r5, r9
    2f18:	sub.w	r3, r4, #2304	; 0x900
    2f1c:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2f20:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    2f22:	ldr.w	r1, [r2, #4]!
    2f26:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    2f2a:	cmp	r3, r0
    2f2c:	bne.n	2f22 <loop+0x8c2>
    2f2e:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    2f30:	cmp	r4, r5
    2f32:	bne.n	2f18 <loop+0x8b8>
		ratio++;
    2f34:	ldr	r3, [pc, #436]	; (30ec <loop+0xa8c>)
    2f36:	ldr	r2, [pc, #436]	; (30ec <loop+0xa8c>)
    2f38:	ldr.w	r3, [r3, #152]	; 0x98
    2f3c:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    2f3e:	cmp	r3, #1
	
	void iterate_animation() {
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    2f40:	str.w	r3, [r2, #152]	; 0x98
		if (ratio == RATIO_GROWTH){
    2f44:	beq.w	355c <loop+0xefc>
    2f48:	ldr	r7, [pc, #420]	; (30f0 <loop+0xa90>)
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    2f4a:	mov.w	fp, #0
    2f4e:	ldr.w	ip, [pc, #436]	; 3104 <loop+0xaa4>
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
    2f52:	mov	sl, r7
				// 	hue = (*_bg_automaton).colorMap(x, y);
				// }
				// bri = (*_grow_automaton).brightnessMap(x, y);
				// sat = (*_sat_automaton).saturationMap(x, y);
				
				hue = (*_mask)[x][y].getHue();
    2f54:	add.w	lr, fp, fp, lsl #1
    2f58:	movs	r6, #0
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    2f5a:	add.w	r8, fp, fp, lsl #3
    2f5e:	mov.w	lr, lr, lsl #3
    2f62:	mov.w	r8, r8, lsl #3
    2f66:	ldr	r3, [pc, #388]	; (30ec <loop+0xa8c>)
    2f68:	add.w	r0, lr, r6
    2f6c:	ldr.w	r1, [r3, #140]	; 0x8c
    2f70:	add.w	r2, r1, r0, lsl #3
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
    2f74:	ldrb	r3, [r2, #4]
    2f76:	rsb	r3, r3, #255	; 0xff
    2f7a:	ldr.w	r3, [r7, r3, lsl #2]
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    2f7e:	cmp	r3, #255	; 0xff
    2f80:	beq.w	345a <loop+0xdfa>
    2f84:	ldr.w	r4, [r1, r0, lsl #3]
static void getRGB(int hue, int sat, int val, byte* r, byte* g, byte* b) {
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
    2f88:	ldrb	r2, [r2, #5]
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    2f8a:	smull	r1, r9, ip, r4
    2f8e:	asrs	r5, r4, #31
static void getRGB(int hue, int sat, int val, byte* r, byte* g, byte* b) {
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
  val = dim_curve[val];
    2f90:	ldr.w	r2, [sl, r2, lsl #2]
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    2f94:	add	r9, r4
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    2f96:	mul.w	r3, r3, r2
    switch(hue/60) {
    2f9a:	rsb	r1, r5, r9, asr #5
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    2f9e:	asrs	r3, r3, #8
    switch(hue/60) {
    2fa0:	cmp	r1, #5
    2fa2:	bhi.w	353e <loop+0xede>
    2fa6:	tbh	[pc, r1, lsl #1]
    2faa:	.short	0x02ae
    2fac:	.word	0x02bc029f
    2fb0:	.word	0x0288026f
    2fb4:	.short	0x0235

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    2fb6:	ldr	r3, [sp, #20]
    2fb8:	ldrb	r3, [r3, #0]
    2fba:	eor.w	r3, r3, #1
    2fbe:	b.n	2c60 <loop+0x600>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    2fc0:	ldr.w	r2, [r9, #4]
    2fc4:	add	r1, r2
    2fc6:	str.w	r1, [ip]
    2fca:	b.n	2d3a <loop+0x6da>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    2fcc:	ldrb.w	r3, [r8]
    2fd0:	eor.w	r3, r3, #1
    2fd4:	b.n	2a3a <loop+0x3da>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    2fd6:	ldr.w	r2, [r9, #4]
    2fda:	add	r1, r2
    2fdc:	str.w	r1, [ip]
    2fe0:	b.n	2b02 <loop+0x4a2>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    2fe2:	ldr	r3, [sp, #20]
    2fe4:	ldrb	r3, [r3, #0]
    2fe6:	eor.w	r3, r3, #1
    2fea:	b.n	2e02 <loop+0x7a2>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    2fec:	ldr.w	r2, [r9, #4]
    2ff0:	add	r1, r2
    2ff2:	str.w	r1, [ip]
    2ff6:	b.n	2eca <loop+0x86a>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    2ff8:	smull	r2, fp, lr, r4
    2ffc:	uxtb	r0, r1
    2ffe:	subs	r2, r1, r3
    3000:	uxtb	r1, r3
    3002:	add	fp, r4
    3004:	rsb	r5, r5, fp, asr #5
    3008:	rsb	r5, r5, r5, lsl #4
    300c:	sub.w	r4, r4, r5, lsl #2
    3010:	rsb	r4, r4, #60	; 0x3c
    3014:	mul.w	r2, r2, r4
    3018:	smull	r4, r5, lr, r2
    301c:	asrs	r4, r2, #31
    301e:	add	r2, r5
    3020:	rsb	r2, r4, r2, asr #5
    3024:	add	r3, r2
    3026:	uxtb	r2, r3
    break;
    }
    *r = colors[0];
    3028:	add.w	r3, r6, r6, lsl #1

				//hue = (hue + 100)%360;
				//hue = filter_hue(hue);
				//bri = shift_bri(bri);

				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    302c:	ldr	r4, [pc, #196]	; (30f4 <loop+0xa94>)
    302e:	add	r3, r8
    3030:	ldr.w	r4, [r4, #172]	; 0xac
    3034:	adds	r5, r4, r3
    3036:	strb	r0, [r4, r3]
    *g = colors[1];
    3038:	strb	r1, [r5, #1]
    *b = colors[2]; 
    303a:	strb	r2, [r5, #2]


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    303c:	adds	r6, #1
    303e:	cmp	r6, #24
    3040:	bne.w	2b9e <loop+0x53e>
	}


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    3044:	add.w	sl, sl, #1
    3048:	cmp.w	sl, #24
    304c:	bne.w	2b8c <loop+0x52c>
			ratio = 0;
		}

		gen_color_matrix();

		newFrameReady = true;
    3050:	movs	r3, #1
    3052:	ldr	r2, [pc, #160]	; (30f4 <loop+0xa94>)
    3054:	movs	r1, #13
    3056:	ldr	r0, [pc, #160]	; (30f8 <loop+0xa98>)
    3058:	strb.w	r3, [r2, #148]	; 0x94
    305c:	bl	a304 <usb_serial_write>
    3060:	ldr	r0, [pc, #152]	; (30fc <loop+0xa9c>)
    3062:	bl	b458 <Print::println()>
    3066:	b.w	280e <loop+0x1ae>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    306a:	smull	r2, r0, lr, r4
    306e:	rsb	fp, r3, r1
    3072:	uxtb	r2, r1
    3074:	adds	r1, r0, r4
    3076:	uxtb	r0, r3
    3078:	rsb	r5, r5, r1, asr #5
    307c:	rsb	r5, r5, r5, lsl #4
    3080:	sub.w	r1, r4, r5, lsl #2
    3084:	rsb	r1, r1, #60	; 0x3c
    3088:	mul.w	r1, fp, r1
    308c:	smull	r4, r5, lr, r1
    3090:	asrs	r4, r1, #31
    3092:	add	r1, r5
    3094:	rsb	r1, r4, r1, asr #5
    3098:	add	r3, r1
    309a:	uxtb	r1, r3
    309c:	b.n	3028 <loop+0x9c8>
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    309e:	smull	r2, fp, lr, r4
    30a2:	subs	r0, r1, r3
    30a4:	uxtb	r2, r1
    30a6:	add	fp, r4
    30a8:	uxtb	r1, r3
    30aa:	rsb	r5, r5, fp, asr #5
    30ae:	rsb	r5, r5, r5, lsl #4
    30b2:	sub.w	r4, r4, r5, lsl #2
    30b6:	mul.w	r0, r4, r0
    30ba:	smull	r4, r5, lr, r0
    30be:	asrs	r4, r0, #31
    30c0:	add	r0, r5
    30c2:	rsb	r0, r4, r0, asr #5
    30c6:	add	r3, r0
    30c8:	uxtb	r0, r3
    30ca:	b.n	3028 <loop+0x9c8>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    30cc:	smull	r2, fp, lr, r4
    30d0:	subs	r0, r1, r3
    30d2:	uxtb	r2, r3
    30d4:	add	fp, r4
    30d6:	uxtb	r1, r1
    30d8:	rsb	r5, r5, fp, asr #5
    30dc:	rsb	r5, r5, r5, lsl #4
    30e0:	sub.w	r4, r4, r5, lsl #2
    30e4:	rsb	r4, r4, #60	; 0x3c
    30e8:	b.n	30b6 <loop+0xa56>
    30ea:	nop
    30ec:	.word	0x200039f4
    30f0:	.word	0x20000060
    30f4:	.word	0x20003aa4
    30f8:	.word	0x2000047c
    30fc:	.word	0x20000d08
    3100:	.word	0x2aaaaaab
    3104:	.word	0x88888889
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    3108:	subs	r5, r1, r3
    310a:	uxtb	r0, r1
    310c:	uxtb	r2, r3
    310e:	mul.w	r4, r4, r5
    3112:	smull	r1, r5, lr, r4
    3116:	asrs	r1, r4, #31
    3118:	add	r4, r5
    311a:	rsb	r4, r1, r4, asr #5
    311e:	add	r3, r4
    3120:	uxtb	r1, r3
    3122:	b.n	3028 <loop+0x9c8>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    3124:	smull	r2, fp, lr, r4
    3128:	uxtb	r0, r3
    312a:	subs	r2, r1, r3
    312c:	uxtb	r1, r1
    312e:	add	fp, r4
    3130:	rsb	r5, r5, fp, asr #5
    3134:	rsb	r5, r5, r5, lsl #4
    3138:	sub.w	r4, r4, r5, lsl #2
    313c:	b.n	3014 <loop+0x9b4>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    313e:	movs	r2, #0
    3140:	mov	r1, r2
    3142:	mov	r0, r2
    3144:	b.n	3028 <loop+0x9c8>
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    3146:	ldr.w	sl, [r2, #128]	; 0x80
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    314a:	mov.w	r8, #2
    314e:	ldr.w	r9, [pc, #1032]	; 3558 <loop+0xef8>
    3152:	movs	r2, #32
    3154:	addw	r3, sl, #2332	; 0x91c
    3158:	movs	r1, #0
    315a:	mov	r0, fp
    315c:	str	r3, [sp, #24]
    315e:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    3162:	bl	448 <updateBeams()>
  updateScreensFade();
    3166:	bl	9e0 <updateScreensFade()>
    316a:	ldr.w	r3, [sl]
    316e:	ldr	r2, [sp, #24]
    3170:	mov.w	ip, #4294967295
    3174:	str	r3, [sp, #28]
    3176:	ldr.w	r3, [sl, #12]
    317a:	str	r2, [sp, #16]
    317c:	str	r3, [sp, #32]
    317e:	subw	r3, r2, #2308	; 0x904
    3182:	str	r3, [sp, #20]
    3184:	sub.w	r3, r8, #3
    3188:	str	r3, [sp, #36]	; 0x24
    318a:	ldr	r6, [sp, #36]	; 0x24
    318c:	mov	lr, fp
    318e:	add.w	r7, ip, #3
    3192:	smull	r3, r2, r9, r6
    3196:	asrs	r3, r6, #31
    3198:	mov	r4, lr
    319a:	mov	r1, ip
    319c:	rsb	r3, r3, r2, asr #2
    31a0:	add.w	r3, r3, r3, lsl #1
    31a4:	sub.w	r3, r6, r3, lsl #3
    31a8:	adds	r3, #24
    31aa:	smull	r2, r0, r9, r3
    31ae:	asrs	r2, r3, #31
    31b0:	rsb	r0, r2, r0, asr #2
    31b4:	add.w	r0, r0, r0, lsl #1
    31b8:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    31bc:	add.w	r0, r0, r0, lsl #1
    31c0:	lsls	r0, r0, #3
    31c2:	smull	r3, r2, r9, r1
    31c6:	asrs	r3, r1, #31
    31c8:	rsb	r3, r3, r2, asr #2
    31cc:	add.w	r3, r3, r3, lsl #1
    31d0:	sub.w	r3, r1, r3, lsl #3
    31d4:	adds	r1, #1
    31d6:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    31d8:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    31da:	smull	r2, r5, r9, r3
    31de:	mov.w	r2, r3, asr #31
    31e2:	rsb	r2, r2, r5, asr #2
    31e6:	add.w	r2, r2, r2, lsl #1
    31ea:	sub.w	r3, r3, r2, lsl #3
    31ee:	add	r3, r0
    31f0:	add.w	r3, sl, r3, lsl #2
    31f4:	ldr	r3, [r3, #28]
    31f6:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    31fa:	bne.n	31c2 <loop+0xb62>
    31fc:	adds	r6, #1
    31fe:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3202:	cmp	r8, r6
    3204:	bne.n	3192 <loop+0xb32>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3206:	ldr	r3, [sp, #20]
    3208:	movs	r1, #1
    320a:	ldr.w	r0, [r3, #4]!
    320e:	str	r3, [sp, #20]
    3210:	ldr	r3, [sp, #28]
    3212:	adds	r5, r3, r0
    3214:	movs	r4, #0
    3216:	mov	r3, r4
    3218:	b.n	3220 <loop+0xbc0>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    321a:	adds	r3, #1
    321c:	cmp	r3, #8
    321e:	beq.n	3234 <loop+0xbd4>
          if ((i >> j) % 2 == 1){
    3220:	asr.w	r2, r1, r3
    3224:	lsls	r6, r2, #31
    3226:	bpl.n	321a <loop+0xbba>
            sum += neighbours[j];
    3228:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    322c:	adds	r3, #1
    322e:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3230:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3232:	bne.n	3220 <loop+0xbc0>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3234:	cmp	r5, r4
    3236:	beq.w	3408 <loop+0xda8>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    323a:	adds	r1, #1
    323c:	cmp.w	r1, #256	; 0x100
    3240:	bne.n	3214 <loop+0xbb4>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3242:	ldr.w	r2, [sl, #8]
    3246:	ldr	r3, [sp, #16]
    3248:	subs	r0, r0, r2
    324a:	str	r0, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    324c:	ldr	r2, [sp, #32]
    324e:	cmp	r0, r2
    3250:	bge.n	3258 <loop+0xbf8>
            nextCells[x][y] = _floorInit;
    3252:	ldr	r3, [sp, #16]
    3254:	mov	r1, r3
    3256:	str	r2, [r1, #0]
    3258:	ldr	r3, [sp, #16]
    325a:	add.w	ip, ip, #1
    325e:	adds	r3, #4

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3260:	cmp.w	ip, #23
    3264:	str	r3, [sp, #16]
    3266:	bne.n	318a <loop+0xb2a>
    3268:	ldr	r3, [sp, #24]
    326a:	add.w	r8, r8, #1
    326e:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3270:	cmp.w	r8, #26
    3274:	str	r3, [sp, #24]
    3276:	bne.w	3162 <loop+0xb02>
    327a:	movw	r0, #4632	; 0x1218
    327e:	addw	r3, sl, #2328	; 0x918
    3282:	add	r0, sl
    3284:	sub.w	r2, r3, #2304	; 0x900
    3288:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    328c:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    328e:	ldr.w	r4, [r1, #4]!
    3292:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3296:	cmp	r5, r2
    3298:	bne.n	328e <loop+0xc2e>
    329a:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    329c:	cmp	r0, r3
    329e:	bne.n	3284 <loop+0xc24>
			(*_sat_automaton).iterate_growth();
    32a0:	ldr	r3, [pc, #676]	; (3548 <loop+0xee8>)
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    32a2:	mov.w	r9, #2
    32a6:	ldr.w	sl, [pc, #688]	; 3558 <loop+0xef8>
    32aa:	movs	r2, #32
    32ac:	ldr.w	r3, [r3, #132]	; 0x84
    32b0:	movs	r1, #0
    32b2:	mov	r0, fp
    32b4:	str	r3, [sp, #40]	; 0x28
    32b6:	mov	r7, r3
    32b8:	addw	r3, r3, #2332	; 0x91c
    32bc:	str	r3, [sp, #24]
    32be:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    32c2:	bl	448 <updateBeams()>
  updateScreensFade();
    32c6:	mov.w	r8, #4294967295
    32ca:	bl	9e0 <updateScreensFade()>
    32ce:	ldr	r3, [r7, #0]
    32d0:	ldr	r2, [sp, #24]
    32d2:	str	r3, [sp, #32]
    32d4:	ldr	r3, [r7, #12]
    32d6:	str	r2, [sp, #16]
    32d8:	str	r3, [sp, #28]
    32da:	subw	r3, r2, #2308	; 0x904
    32de:	str	r3, [sp, #20]
    32e0:	sub.w	r3, r9, #3
    32e4:	str	r3, [sp, #36]	; 0x24
    32e6:	ldr	r6, [sp, #36]	; 0x24
    32e8:	mov	ip, fp
    32ea:	add.w	lr, r8, #3
    32ee:	smull	r3, r2, sl, r6
    32f2:	asrs	r3, r6, #31
    32f4:	mov	r4, ip
    32f6:	mov	r1, r8
    32f8:	rsb	r3, r3, r2, asr #2
    32fc:	add.w	r3, r3, r3, lsl #1
    3300:	sub.w	r3, r6, r3, lsl #3
    3304:	adds	r3, #24
    3306:	smull	r2, r0, sl, r3
    330a:	asrs	r2, r3, #31
    330c:	rsb	r0, r2, r0, asr #2
    3310:	add.w	r0, r0, r0, lsl #1
    3314:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3318:	add.w	r0, r0, r0, lsl #1
    331c:	lsls	r0, r0, #3
    331e:	smull	r3, r2, sl, r1
    3322:	asrs	r3, r1, #31
    3324:	rsb	r3, r3, r2, asr #2
    3328:	add.w	r3, r3, r3, lsl #1
    332c:	sub.w	r3, r1, r3, lsl #3
    3330:	adds	r1, #1
    3332:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3334:	cmp	r1, lr
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    3336:	smull	r2, r5, sl, r3
    333a:	mov.w	r2, r3, asr #31
    333e:	rsb	r2, r2, r5, asr #2
    3342:	add.w	r2, r2, r2, lsl #1
    3346:	sub.w	r3, r3, r2, lsl #3
    334a:	add	r3, r0
    334c:	add.w	r3, r7, r3, lsl #2
    3350:	ldr	r3, [r3, #28]
    3352:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3356:	bne.n	331e <loop+0xcbe>
    3358:	adds	r6, #1
    335a:	add.w	ip, ip, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    335e:	cmp	r9, r6
    3360:	bne.n	32ee <loop+0xc8e>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3362:	ldr	r3, [sp, #20]
    3364:	movs	r1, #1
    3366:	ldr.w	r0, [r3, #4]!
    336a:	str	r3, [sp, #20]
    336c:	ldr	r3, [sp, #32]
    336e:	adds	r5, r0, r3
    3370:	movs	r4, #0
    3372:	mov	r3, r4
    3374:	b.n	337c <loop+0xd1c>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3376:	adds	r3, #1
    3378:	cmp	r3, #8
    337a:	beq.n	3390 <loop+0xd30>
          if ((i >> j) % 2 == 1){
    337c:	asr.w	r2, r1, r3
    3380:	lsls	r2, r2, #31
    3382:	bpl.n	3376 <loop+0xd16>
            sum += neighbours[j];
    3384:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3388:	adds	r3, #1
    338a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    338c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    338e:	bne.n	337c <loop+0xd1c>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    3390:	cmp	r5, r4
    3392:	beq.w	3828 <loop+0x11c8>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3396:	adds	r1, #1
    3398:	cmp.w	r1, #256	; 0x100
    339c:	bne.n	3370 <loop+0xd10>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    339e:	ldr	r3, [r7, #8]
    33a0:	subs	r0, r0, r3
    33a2:	ldr	r3, [sp, #16]
    33a4:	str	r0, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    33a6:	ldr	r2, [sp, #28]
    33a8:	cmp	r0, r2
    33aa:	bge.n	33b2 <loop+0xd52>
            nextCells[x][y] = _floorInit;
    33ac:	ldr	r3, [sp, #16]
    33ae:	mov	r1, r3
    33b0:	str	r2, [r1, #0]
    33b2:	ldr	r3, [sp, #16]
    33b4:	add.w	r8, r8, #1
    33b8:	adds	r3, #4

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    33ba:	cmp.w	r8, #23
    33be:	str	r3, [sp, #16]
    33c0:	bne.n	32e6 <loop+0xc86>
    33c2:	ldr	r3, [sp, #24]
    33c4:	add.w	r9, r9, #1
    33c8:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    33ca:	cmp.w	r9, #26
    33ce:	str	r3, [sp, #24]
    33d0:	bne.w	32c2 <loop+0xc62>
    33d4:	ldr	r2, [sp, #40]	; 0x28
    33d6:	movw	r0, #4632	; 0x1218
    33da:	addw	r3, r2, #2328	; 0x918
    33de:	add	r0, r2
    33e0:	sub.w	r2, r3, #2304	; 0x900
    33e4:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    33e8:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    33ea:	ldr.w	r4, [r1, #4]!
    33ee:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    33f2:	cmp	r5, r2
    33f4:	bne.n	33ea <loop+0xd8a>
    33f6:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    33f8:	cmp	r0, r3
    33fa:	bne.n	33e0 <loop+0xd80>
			ratio = 0;
    33fc:	movs	r3, #0
    33fe:	ldr	r2, [pc, #328]	; (3548 <loop+0xee8>)
    3400:	str.w	r3, [r2, #152]	; 0x98
    3404:	b.w	2b80 <loop+0x520>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    3408:	ldr.w	r3, [sl, #4]
    340c:	add	r0, r3
    340e:	ldr	r3, [sp, #16]
    3410:	str	r0, [r3, #0]
    3412:	b.n	324c <loop+0xbec>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    3414:	smull	r0, r1, ip, r4
    3418:	rsb	r9, r3, r2
    341c:	uxtb	r0, r2
    341e:	adds	r2, r1, r4
    3420:	uxtb	r1, r3
    3422:	rsb	r2, r5, r2, asr #5
    3426:	rsb	r2, r2, r2, lsl #4
    342a:	sub.w	r2, r4, r2, lsl #2
    342e:	rsb	r2, r2, #60	; 0x3c
    3432:	mul.w	r2, r9, r2
    3436:	smull	r4, r5, ip, r2
    343a:	asrs	r4, r2, #31
    343c:	add	r2, r5
    343e:	rsb	r2, r4, r2, asr #5
    3442:	add	r3, r2
    3444:	uxtb	r2, r3
    break;
    }
    *r = colors[0];
    3446:	add.w	r3, r6, r6, lsl #1

				//hue = (hue + 100)%360;
				//hue = filter_hue(hue);
				//bri = shift_bri(bri);

				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    344a:	ldr	r4, [pc, #256]	; (354c <loop+0xeec>)
    344c:	add	r3, r8
    344e:	ldr.w	r4, [r4, #172]	; 0xac
    3452:	adds	r5, r4, r3
    3454:	strb	r0, [r4, r3]
    *g = colors[1];
    3456:	strb	r1, [r5, #1]
    *b = colors[2]; 
    3458:	strb	r2, [r5, #2]


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    345a:	adds	r6, #1
    345c:	cmp	r6, #24
    345e:	bne.w	2f66 <loop+0x906>
	}


	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    3462:	add.w	fp, fp, #1
    3466:	cmp.w	fp, #24
    346a:	bne.w	2f54 <loop+0x8f4>
			ratio = 0;
		}

		gen_color_matrix();

		newFrameReady = true;
    346e:	movs	r3, #1
    3470:	ldr	r2, [pc, #216]	; (354c <loop+0xeec>)
    3472:	movs	r1, #13
    3474:	ldr	r0, [pc, #216]	; (3550 <loop+0xef0>)
    3476:	strb.w	r3, [r2, #148]	; 0x94
    347a:	bl	a304 <usb_serial_write>
    347e:	ldr	r0, [pc, #212]	; (3554 <loop+0xef4>)
    3480:	bl	b458 <Print::println()>
    3484:	b.w	2806 <loop+0x1a6>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    3488:	smull	r1, r9, ip, r4
    348c:	subs	r1, r2, r3
    348e:	uxtb	r0, r3
    3490:	add	r9, r4
    3492:	uxtb	r2, r2
    3494:	rsb	r5, r5, r9, asr #5
    3498:	rsb	r5, r5, r5, lsl #4
    349c:	sub.w	r4, r4, r5, lsl #2
    34a0:	rsb	r4, r4, #60	; 0x3c
    34a4:	mul.w	r1, r1, r4
    34a8:	smull	r4, r5, ip, r1
    34ac:	asrs	r4, r1, #31
    34ae:	add	r1, r5
    34b0:	rsb	r1, r4, r1, asr #5
    34b4:	add	r3, r1
    34b6:	uxtb	r1, r3
    34b8:	b.n	3446 <loop+0xde6>
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    34ba:	smull	r1, r9, ip, r4
    34be:	subs	r0, r2, r3
    34c0:	uxtb	r1, r3
    34c2:	add	r9, r4
    34c4:	uxtb	r2, r2
    34c6:	rsb	r5, r5, r9, asr #5
    34ca:	rsb	r5, r5, r5, lsl #4
    34ce:	sub.w	r4, r4, r5, lsl #2
    34d2:	mul.w	r0, r4, r0
    34d6:	smull	r4, r5, ip, r0
    34da:	asrs	r4, r0, #31
    34dc:	add	r0, r5
    34de:	rsb	r0, r4, r0, asr #5
    34e2:	add	r3, r0
    34e4:	uxtb	r0, r3
    34e6:	b.n	3446 <loop+0xde6>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    34e8:	smull	r1, r9, ip, r4
    34ec:	subs	r0, r2, r3
    34ee:	uxtb	r1, r2
    34f0:	add	r9, r4
    34f2:	uxtb	r2, r3
    34f4:	rsb	r5, r5, r9, asr #5
    34f8:	rsb	r5, r5, r5, lsl #4
    34fc:	sub.w	r4, r4, r5, lsl #2
    3500:	rsb	r4, r4, #60	; 0x3c
    3504:	b.n	34d2 <loop+0xe72>
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    3506:	subs	r1, r2, r3
    3508:	uxtb	r0, r2
    350a:	uxtb	r2, r3
    350c:	mul.w	r4, r4, r1
    3510:	smull	r1, r5, ip, r4
    3514:	asrs	r1, r4, #31
    3516:	add	r4, r5
    3518:	rsb	r4, r1, r4, asr #5
    351c:	add	r3, r4
    351e:	uxtb	r1, r3
    3520:	b.n	3446 <loop+0xde6>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    3522:	smull	r1, r0, ip, r4
    3526:	rsb	r9, r3, r2
    352a:	uxtb	r1, r2
    352c:	adds	r2, r0, r4
    352e:	uxtb	r0, r3
    3530:	rsb	r5, r5, r2, asr #5
    3534:	rsb	r5, r5, r5, lsl #4
    3538:	sub.w	r2, r4, r5, lsl #2
    353c:	b.n	3432 <loop+0xdd2>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    353e:	movs	r2, #0
    3540:	mov	r1, r2
    3542:	mov	r0, r2
    3544:	b.n	3446 <loop+0xde6>
    3546:	nop
    3548:	.word	0x20003aa4
    354c:	.word	0x200039f4
    3550:	.word	0x2000047c
    3554:	.word	0x20000d08
    3558:	.word	0x2aaaaaab
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    355c:	ldr.w	sl, [r2, #128]	; 0x80
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3560:	mov.w	r8, #2
    3564:	ldr.w	r9, [pc, #732]	; 3844 <loop+0x11e4>
    3568:	movs	r2, #32
    356a:	addw	r3, sl, #2332	; 0x91c
    356e:	movs	r1, #0
    3570:	mov	r0, fp
    3572:	str	r3, [sp, #20]
    3574:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    3578:	bl	448 <updateBeams()>
  updateScreensFade();
    357c:	bl	9e0 <updateScreensFade()>
    3580:	ldr.w	r3, [sl]
    3584:	ldr	r2, [sp, #20]
    3586:	mov.w	ip, #4294967295
    358a:	str	r3, [sp, #28]
    358c:	ldr.w	r3, [sl, #12]
    3590:	str	r2, [sp, #16]
    3592:	str	r3, [sp, #32]
    3594:	subw	r3, r2, #2308	; 0x904
    3598:	str	r3, [sp, #24]
    359a:	sub.w	r3, r8, #3
    359e:	str	r3, [sp, #36]	; 0x24
    35a0:	ldr	r6, [sp, #36]	; 0x24
    35a2:	mov	lr, fp
    35a4:	add.w	r7, ip, #3
    35a8:	smull	r3, r2, r9, r6
    35ac:	asrs	r3, r6, #31
    35ae:	mov	r4, lr
    35b0:	mov	r1, ip
    35b2:	rsb	r3, r3, r2, asr #2
    35b6:	add.w	r3, r3, r3, lsl #1
    35ba:	sub.w	r3, r6, r3, lsl #3
    35be:	adds	r3, #24
    35c0:	smull	r2, r0, r9, r3
    35c4:	asrs	r2, r3, #31
    35c6:	rsb	r0, r2, r0, asr #2
    35ca:	add.w	r0, r0, r0, lsl #1
    35ce:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    35d2:	add.w	r0, r0, r0, lsl #1
    35d6:	lsls	r0, r0, #3
    35d8:	smull	r3, r2, r9, r1
    35dc:	asrs	r3, r1, #31
    35de:	rsb	r3, r3, r2, asr #2
    35e2:	add.w	r3, r3, r3, lsl #1
    35e6:	sub.w	r3, r1, r3, lsl #3
    35ea:	adds	r1, #1
    35ec:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    35ee:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    35f0:	smull	r2, r5, r9, r3
    35f4:	mov.w	r2, r3, asr #31
    35f8:	rsb	r2, r2, r5, asr #2
    35fc:	add.w	r2, r2, r2, lsl #1
    3600:	sub.w	r3, r3, r2, lsl #3
    3604:	add	r3, r0
    3606:	add.w	r3, sl, r3, lsl #2
    360a:	ldr	r3, [r3, #28]
    360c:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    3610:	bne.n	35d8 <loop+0xf78>
    3612:	adds	r6, #1
    3614:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3618:	cmp	r8, r6
    361a:	bne.n	35a8 <loop+0xf48>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    361c:	ldr	r3, [sp, #24]
    361e:	movs	r1, #1
    3620:	ldr.w	r0, [r3, #4]!
    3624:	str	r3, [sp, #24]
    3626:	ldr	r3, [sp, #28]
    3628:	adds	r5, r0, r3
    362a:	movs	r4, #0
    362c:	mov	r3, r4
    362e:	b.n	3636 <loop+0xfd6>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3630:	adds	r3, #1
    3632:	cmp	r3, #8
    3634:	beq.n	364a <loop+0xfea>
          if ((i >> j) % 2 == 1){
    3636:	asr.w	r2, r1, r3
    363a:	lsls	r2, r2, #31
    363c:	bpl.n	3630 <loop+0xfd0>
            sum += neighbours[j];
    363e:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3642:	adds	r3, #1
    3644:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    3646:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    3648:	bne.n	3636 <loop+0xfd6>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    364a:	cmp	r5, r4
    364c:	beq.w	381c <loop+0x11bc>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    3650:	adds	r1, #1
    3652:	cmp.w	r1, #256	; 0x100
    3656:	bne.n	362a <loop+0xfca>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    3658:	ldr.w	r3, [sl, #8]
    365c:	subs	r0, r0, r3
    365e:	ldr	r3, [sp, #16]
    3660:	str	r0, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    3662:	ldr	r2, [sp, #32]
    3664:	cmp	r2, r0
    3666:	ble.n	366e <loop+0x100e>
            nextCells[x][y] = _floorInit;
    3668:	ldr	r3, [sp, #16]
    366a:	mov	r1, r3
    366c:	str	r2, [r1, #0]
    366e:	ldr	r3, [sp, #16]
    3670:	add.w	ip, ip, #1
    3674:	adds	r3, #4

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    3676:	cmp.w	ip, #23
    367a:	str	r3, [sp, #16]
    367c:	bne.n	35a0 <loop+0xf40>
    367e:	ldr	r3, [sp, #20]
    3680:	add.w	r8, r8, #1
    3684:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    3686:	cmp.w	r8, #26
    368a:	str	r3, [sp, #20]
    368c:	bne.w	3578 <loop+0xf18>
    3690:	movw	r2, #4632	; 0x1218
    3694:	addw	r3, sl, #2328	; 0x918
    3698:	add	r2, sl
    369a:	sub.w	r1, r3, #2304	; 0x900
    369e:	sub.w	r4, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    36a2:	mov	r0, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    36a4:	ldr.w	r5, [r0, #4]!
    36a8:	str.w	r5, [r1, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    36ac:	cmp	r1, r4
    36ae:	bne.n	36a4 <loop+0x1044>
    36b0:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    36b2:	cmp	r3, r2
    36b4:	bne.n	369a <loop+0x103a>
			(*_sat_automaton).iterate_growth();
    36b6:	ldr	r3, [pc, #392]	; (3840 <loop+0x11e0>)
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    36b8:	mov.w	r8, #2
    36bc:	ldr.w	r9, [pc, #388]	; 3844 <loop+0x11e4>
    36c0:	movs	r2, #32
    36c2:	ldr.w	sl, [r3, #132]	; 0x84
    36c6:	movs	r1, #0
    36c8:	mov	r0, fp
    36ca:	addw	r3, sl, #2332	; 0x91c
    36ce:	str	r3, [sp, #20]
    36d0:	bl	c124 <memset>
  screen_A.updateFade();
  screen_B.updateFade();
}

void renderInterrupt() {
  updateBeams();
    36d4:	bl	448 <updateBeams()>
  updateScreensFade();
    36d8:	bl	9e0 <updateScreensFade()>
    36dc:	ldr.w	r3, [sl]
    36e0:	ldr	r2, [sp, #20]
    36e2:	mov.w	ip, #4294967295
    36e6:	str	r3, [sp, #28]
    36e8:	ldr.w	r3, [sl, #12]
    36ec:	str	r2, [sp, #16]
    36ee:	str	r3, [sp, #32]
    36f0:	subw	r3, r2, #2308	; 0x904
    36f4:	str	r3, [sp, #24]
    36f6:	sub.w	r3, r8, #3
    36fa:	str	r3, [sp, #36]	; 0x24
    36fc:	ldr	r6, [sp, #36]	; 0x24
    36fe:	mov	lr, fp
    3700:	add.w	r7, ip, #3
    3704:	smull	r3, r2, r9, r6
    3708:	asrs	r3, r6, #31
    370a:	mov	r4, lr
    370c:	mov	r1, ip
    370e:	rsb	r3, r3, r2, asr #2
    3712:	add.w	r3, r3, r3, lsl #1
    3716:	sub.w	r3, r6, r3, lsl #3
    371a:	adds	r3, #24
    371c:	smull	r2, r0, r9, r3
    3720:	asrs	r2, r3, #31
    3722:	rsb	r0, r2, r0, asr #2
    3726:	add.w	r0, r0, r0, lsl #1
    372a:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    372e:	add.w	r0, r0, r0, lsl #1
    3732:	lsls	r0, r0, #3
    3734:	smull	r3, r2, r9, r1
    3738:	asrs	r3, r1, #31
    373a:	rsb	r3, r3, r2, asr #2
    373e:	add.w	r3, r3, r3, lsl #1
    3742:	sub.w	r3, r1, r3, lsl #3
    3746:	adds	r1, #1
    3748:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    374a:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    374c:	smull	r2, r5, r9, r3
    3750:	mov.w	r2, r3, asr #31
    3754:	rsb	r2, r2, r5, asr #2
    3758:	add.w	r2, r2, r2, lsl #1
    375c:	sub.w	r3, r3, r2, lsl #3
    3760:	add	r3, r0
    3762:	add.w	r3, sl, r3, lsl #2
    3766:	ldr	r3, [r3, #28]
    3768:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    376c:	bne.n	3734 <loop+0x10d4>
    376e:	adds	r6, #1
    3770:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    3774:	cmp	r8, r6
    3776:	bne.n	3704 <loop+0x10a4>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    3778:	ldr	r3, [sp, #24]
    377a:	movs	r1, #1
    377c:	ldr.w	r0, [r3, #4]!
    3780:	str	r3, [sp, #24]
    3782:	ldr	r3, [sp, #28]
    3784:	adds	r5, r0, r3
    3786:	movs	r4, #0
    3788:	mov	r3, r4
    378a:	b.n	3792 <loop+0x1132>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    378c:	adds	r3, #1
    378e:	cmp	r3, #8
    3790:	beq.n	37a6 <loop+0x1146>
          if ((i >> j) % 2 == 1){
    3792:	asr.w	r2, r1, r3
    3796:	lsls	r7, r2, #31
    3798:	bpl.n	378c <loop+0x112c>
            sum += neighbours[j];
    379a:	ldr.w	r2, [fp, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    379e:	adds	r3, #1
    37a0:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    37a2:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    37a4:	bne.n	3792 <loop+0x1132>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    37a6:	cmp	r5, r4
    37a8:	beq.n	3832 <loop+0x11d2>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    37aa:	adds	r1, #1
    37ac:	cmp.w	r1, #256	; 0x100
    37b0:	bne.n	3786 <loop+0x1126>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    37b2:	ldr.w	r3, [sl, #8]
    37b6:	subs	r0, r0, r3
    37b8:	ldr	r3, [sp, #16]
    37ba:	str	r0, [r3, #0]
          }
          if (nextCells[x][y] < _floorInit){
    37bc:	ldr	r2, [sp, #32]
    37be:	cmp	r2, r0
    37c0:	ble.n	37c8 <loop+0x1168>
            nextCells[x][y] = _floorInit;
    37c2:	ldr	r3, [sp, #16]
    37c4:	mov	r1, r3
    37c6:	str	r2, [r1, #0]
    37c8:	ldr	r3, [sp, #16]
    37ca:	add.w	ip, ip, #1
    37ce:	adds	r3, #4

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    37d0:	cmp.w	ip, #23
    37d4:	str	r3, [sp, #16]
    37d6:	bne.n	36fc <loop+0x109c>
    37d8:	ldr	r3, [sp, #20]
    37da:	add.w	r8, r8, #1
    37de:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    37e0:	cmp.w	r8, #26
    37e4:	str	r3, [sp, #20]
    37e6:	bne.w	36d4 <loop+0x1074>
    37ea:	movw	r2, #4632	; 0x1218
    37ee:	addw	r3, sl, #2328	; 0x918
    37f2:	add	r2, sl
    37f4:	sub.w	r1, r3, #2304	; 0x900
    37f8:	sub.w	r4, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    37fc:	mov	r0, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    37fe:	ldr.w	r5, [r0, #4]!
    3802:	str.w	r5, [r1, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3806:	cmp	r4, r1
    3808:	bne.n	37fe <loop+0x119e>
    380a:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    380c:	cmp	r2, r3
    380e:	bne.n	37f4 <loop+0x1194>
			ratio = 0;
    3810:	movs	r3, #0
    3812:	ldr	r2, [pc, #44]	; (3840 <loop+0x11e0>)
    3814:	str.w	r3, [r2, #152]	; 0x98
    3818:	b.w	2f48 <loop+0x8e8>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    381c:	ldr.w	r2, [sl, #4]
    3820:	ldr	r3, [sp, #16]
    3822:	add	r0, r2
    3824:	str	r0, [r3, #0]
    3826:	b.n	3662 <loop+0x1002>
    3828:	ldr	r2, [r7, #4]
    382a:	ldr	r3, [sp, #16]
    382c:	add	r0, r2
    382e:	str	r0, [r3, #0]
    3830:	b.n	33a6 <loop+0xd46>
    3832:	ldr.w	r2, [sl, #4]
    3836:	ldr	r3, [sp, #16]
    3838:	add	r0, r2
    383a:	str	r0, [r3, #0]
    383c:	b.n	37bc <loop+0x115c>
    383e:	nop
    3840:	.word	0x200039f4
    3844:	.word	0x2aaaaaab

00003848 <_GLOBAL__sub_I_low_threshold>:

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    3848:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    384c:	ldr	r5, [pc, #972]	; (3c1c <_GLOBAL__sub_I_low_threshold+0x3d4>)
      _s = s;
      _b = b;
    384e:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3852:	movs	r1, #0
    3854:	movs	r3, #187	; 0xbb
      _s = s;
      _b = b;
    3856:	strb.w	r6, [r5, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    385a:	movs	r6, #194	; 0xc2
    385c:	str	r1, [r5, #0]
      _s = s;
      _b = b;
    385e:	movs	r2, #186	; 0xba
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3860:	str	r6, [r5, #56]	; 0x38
    3862:	movs	r6, #135	; 0x87
      _s = s;
    3864:	strb	r1, [r5, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3866:	mov.w	r9, #185	; 0xb9
    386a:	str	r6, [r5, #16]
      _s = s;
    386c:	mov.w	r6, #28
      _b = b;
    3870:	strb	r1, [r5, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3872:	movs	r1, #0
      _s = s;
    3874:	strb	r6, [r5, #20]
      _b = b;
    3876:	mov.w	r6, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    387a:	mov.w	ip, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    387e:	str	r1, [r5, #8]
      _s = s;
      _b = b;
    3880:	strb	r6, [r5, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3882:	movs	r6, #142	; 0x8e
      _s = s;
    3884:	strb	r1, [r5, #12]
      _b = b;
    3886:	mov.w	sl, #195	; 0xc3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    388a:	str	r6, [r5, #24]
      _s = s;
    388c:	mov.w	r6, #24
      _b = b;
    3890:	strb	r1, [r5, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3892:	movs	r1, #0
      _s = s;
    3894:	strb	r6, [r5, #28]
      _b = b;
    3896:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    389a:	strb.w	ip, [r5, #36]	; 0x24
      _b = b;
    389e:	mov.w	r8, #213	; 0xd5
    38a2:	strb	r6, [r5, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38a4:	movs	r6, #163	; 0xa3
    38a6:	str	r3, [r5, #48]	; 0x30
      _s = s;
    38a8:	mov.w	lr, #253	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38ac:	str	r6, [r5, #32]
      _s = s;
    38ae:	mov.w	r6, #56	; 0x38
      _b = b;
    38b2:	strb.w	r2, [r5, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38b6:	movw	r7, #359	; 0x167
      _s = s;
    38ba:	strb.w	r6, [r5, #44]	; 0x2c
      _b = b;
    38be:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38c2:	str.w	r9, [r5, #40]	; 0x28
    38c6:	mov.w	fp, #189	; 0xbd
      _s = s;
      _b = b;
    38ca:	strb.w	r6, [r5, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    38ce:	mvn.w	r6, #101	; 0x65
      _b = b;
    38d2:	mov.w	ip, #211	; 0xd3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38d6:	ldr	r4, [pc, #840]	; (3c20 <_GLOBAL__sub_I_low_threshold+0x3d8>)
      _s = s;
    38d8:	strb.w	r6, [r5, #52]	; 0x34
      _b = b;
    38dc:	mvn.w	r6, #62	; 0x3e
    38e0:	sub	sp, #20
    38e2:	strb.w	r6, [r5, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    38e6:	mov.w	r6, #107	; 0x6b
    38ea:	strb.w	r6, [r5, #60]	; 0x3c
      _b = b;
    38ee:	mvn.w	r6, #63	; 0x3f
    38f2:	strb.w	r6, [r5, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38f6:	movs	r6, #190	; 0xbe
    38f8:	str	r6, [r5, #64]	; 0x40
    38fa:	str	r6, [r5, #72]	; 0x48
    38fc:	str	r6, [r5, #80]	; 0x50
      _s = s;
    38fe:	mov.w	r6, #103	; 0x67
    3902:	strb.w	r6, [r5, #68]	; 0x44
      _b = b;
    3906:	mvn.w	r6, #58	; 0x3a
    390a:	strb.w	r6, [r5, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    390e:	mov.w	r6, #60	; 0x3c
    3912:	strb.w	r6, [r5, #76]	; 0x4c
    3916:	mov.w	r6, #55	; 0x37
    391a:	strb.w	r6, [r5, #84]	; 0x54
      _b = b;
    391e:	mvn.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3922:	str	r1, [r5, #96]	; 0x60
      _s = s;
    3924:	strb.w	r1, [r5, #100]	; 0x64
      _b = b;
    3928:	strb.w	r1, [r5, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    392c:	movs	r1, #0
      _s = s;
      _b = b;
    392e:	strb.w	r6, [r5, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3932:	movs	r6, #184	; 0xb8
    3934:	str	r1, [r5, #104]	; 0x68
      _s = s;
    3936:	strb.w	r1, [r5, #108]	; 0x6c
      _b = b;
    393a:	strb.w	r1, [r5, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    393e:	movs	r1, #0
    3940:	str	r6, [r5, #88]	; 0x58
      _s = s;
    3942:	mov.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3946:	str	r1, [r5, #112]	; 0x70
      _s = s;
    3948:	strb.w	r1, [r5, #116]	; 0x74
      _b = b;
    394c:	strb.w	r1, [r5, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3950:	movs	r1, #0
      _s = s;
    3952:	strb.w	r6, [r5, #92]	; 0x5c
      _b = b;
    3956:	mov.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    395a:	str	r1, [r5, #120]	; 0x78
      _s = s;
    395c:	strb.w	r1, [r5, #124]	; 0x7c
      _b = b;
    3960:	strb.w	r1, [r5, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3964:	movs	r1, #0
    3966:	str.w	r1, [r5, #128]	; 0x80
      _s = s;
    396a:	strb.w	r1, [r5, #132]	; 0x84
      _b = b;
    396e:	strb.w	r1, [r5, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3972:	movs	r1, #0
    3974:	str.w	r1, [r5, #136]	; 0x88
      _s = s;
    3978:	strb.w	r1, [r5, #140]	; 0x8c
      _b = b;
    397c:	strb.w	r1, [r5, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3980:	movs	r1, #0
    3982:	str.w	r1, [r5, #144]	; 0x90
      _s = s;
    3986:	strb.w	r1, [r5, #148]	; 0x94
      _b = b;
    398a:	strb.w	r1, [r5, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    398e:	movs	r1, #0
    3990:	str.w	r1, [r5, #152]	; 0x98
      _s = s;
    3994:	strb.w	r1, [r5, #156]	; 0x9c
      _b = b;
    3998:	strb.w	r1, [r5, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    399c:	movs	r1, #0
    399e:	str.w	r1, [r5, #160]	; 0xa0
      _s = s;
    39a2:	strb.w	r1, [r5, #164]	; 0xa4
      _b = b;
    39a6:	strb.w	r1, [r5, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39aa:	movs	r1, #0
    39ac:	str.w	r1, [r5, #168]	; 0xa8
      _s = s;
    39b0:	strb.w	r1, [r5, #172]	; 0xac
      _b = b;
    39b4:	strb.w	r6, [r5, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39b8:	movs	r6, #136	; 0x88
      _s = s;
      _b = b;
    39ba:	strb.w	r1, [r5, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39be:	movs	r1, #0
    39c0:	str.w	r6, [r5, #208]	; 0xd0
      _s = s;
      _b = b;
    39c4:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39c8:	str.w	r1, [r5, #176]	; 0xb0
      _s = s;
      _b = b;
    39cc:	strb.w	r6, [r5, #213]	; 0xd5
    39d0:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39d4:	strb.w	r1, [r5, #180]	; 0xb4
      _b = b;
    39d8:	strb.w	r6, [r5, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39dc:	movs	r6, #184	; 0xb8
      _s = s;
      _b = b;
    39de:	strb.w	r1, [r5, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39e2:	movs	r1, #0
    39e4:	str.w	r6, [r5, #232]	; 0xe8
      _s = s;
      _b = b;
    39e8:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39ec:	str.w	r1, [r5, #184]	; 0xb8
      _s = s;
      _b = b;
    39f0:	strb.w	r6, [r5, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39f4:	mov.w	r6, #26
    39f8:	strb.w	r1, [r5, #188]	; 0xbc
    39fc:	strb.w	r6, [r5, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a00:	movs	r6, #138	; 0x8a
      _s = s;
      _b = b;
    3a02:	strb.w	r1, [r5, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a06:	movs	r1, #0
    3a08:	str.w	r6, [r5, #216]	; 0xd8
      _s = s;
    3a0c:	mov.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a10:	str.w	r1, [r5, #192]	; 0xc0
      _s = s;
    3a14:	strb.w	r6, [r5, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a18:	movs	r6, #166	; 0xa6
      _s = s;
    3a1a:	strb.w	r1, [r5, #196]	; 0xc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a1e:	str.w	r6, [r5, #224]	; 0xe0
      _s = s;
    3a22:	mov.w	r6, #35	; 0x23
      _b = b;
    3a26:	strb.w	r1, [r5, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a2a:	movs	r1, #0
      _s = s;
    3a2c:	strb.w	r6, [r5, #228]	; 0xe4
      _b = b;
    3a30:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a34:	str.w	r1, [r5, #200]	; 0xc8
      _s = s;
      _b = b;
    3a38:	strb.w	r6, [r5, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a3c:	mov.w	r6, #117	; 0x75
    3a40:	strb.w	r1, [r5, #204]	; 0xcc
    3a44:	strb.w	r6, [r5, #236]	; 0xec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a48:	movs	r6, #183	; 0xb7
      _s = s;
      _b = b;
    3a4a:	strb.w	r1, [r5, #205]	; 0xcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a4e:	movs	r1, #0
    3a50:	str.w	r6, [r5, #240]	; 0xf0
      _s = s;
    3a54:	mvn.w	r6, #122	; 0x7a
      _b = b;
    3a58:	strb.w	r3, [r5, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a5c:	strb.w	r6, [r5, #244]	; 0xf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a60:	movs	r6, #178	; 0xb2
      _s = s;
      _b = b;
    3a62:	strb.w	sl, [r5, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a66:	str.w	r6, [r5, #248]	; 0xf8
      _s = s;
    3a6a:	mov.w	r6, #95	; 0x5f
    3a6e:	strb.w	r6, [r5, #252]	; 0xfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a72:	movs	r6, #182	; 0xb6
    3a74:	str.w	r6, [r5, #256]	; 0x100
      _s = s;
    3a78:	mov.w	r6, #125	; 0x7d
    3a7c:	strb.w	r6, [r5, #260]	; 0x104
      _b = b;
    3a80:	mvn.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a84:	str.w	r1, [r5, #312]	; 0x138
      _s = s;
      _b = b;
    3a88:	strb.w	r6, [r5, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a8c:	mov.w	r6, #103	; 0x67
    3a90:	strb.w	r1, [r5, #316]	; 0x13c
    3a94:	strb.w	r6, [r5, #268]	; 0x10c
      _b = b;
    3a98:	mvn.w	r6, #78	; 0x4e
    3a9c:	strb.w	r1, [r5, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3aa0:	movs	r1, #0
      _s = s;
      _b = b;
    3aa2:	strb.w	r6, [r5, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3aa6:	movs	r6, #180	; 0xb4
    3aa8:	str.w	r1, [r5, #320]	; 0x140
    3aac:	str.w	r6, [r5, #264]	; 0x108
    3ab0:	movs	r6, #162	; 0xa2
      _s = s;
    3ab2:	strb.w	r1, [r5, #324]	; 0x144
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ab6:	str.w	r6, [r5, #272]	; 0x110
      _s = s;
    3aba:	mov.w	r6, #45	; 0x2d
      _b = b;
    3abe:	strb.w	r1, [r5, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ac2:	movs	r1, #0
      _s = s;
    3ac4:	strb.w	r6, [r5, #276]	; 0x114
      _b = b;
    3ac8:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3acc:	str.w	r1, [r5, #328]	; 0x148
      _s = s;
      _b = b;
    3ad0:	strb.w	r6, [r5, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ad4:	movs	r6, #169	; 0xa9
      _s = s;
    3ad6:	strb.w	r1, [r5, #332]	; 0x14c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ada:	str.w	r6, [r5, #280]	; 0x118
      _s = s;
    3ade:	mov.w	r6, #37	; 0x25
      _b = b;
    3ae2:	strb.w	r1, [r5, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ae6:	movs	r1, #0
      _s = s;
    3ae8:	strb.w	r6, [r5, #284]	; 0x11c
    3aec:	mov.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3af0:	str.w	r1, [r5, #336]	; 0x150
      _s = s;
    3af4:	strb.w	r6, [r5, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3af8:	movs	r6, #183	; 0xb7
      _s = s;
    3afa:	strb.w	r1, [r5, #340]	; 0x154
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3afe:	str.w	r6, [r5, #296]	; 0x128
      _s = s;
    3b02:	mvn.w	r6, #72	; 0x48
      _b = b;
    3b06:	strb.w	r1, [r5, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b0a:	movs	r1, #0
      _s = s;
    3b0c:	strb.w	r6, [r5, #300]	; 0x12c
      _b = b;
    3b10:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b14:	str.w	r1, [r5, #344]	; 0x158
      _s = s;
      _b = b;
    3b18:	strb.w	r6, [r5, #293]	; 0x125
    3b1c:	mvn.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b20:	strb.w	r1, [r5, #348]	; 0x15c
    3b24:	mov.w	r1, #4294967295
      _b = b;
    3b28:	strb.w	r6, [r5, #301]	; 0x12d
    3b2c:	mov.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b30:	str.w	r3, [r5, #288]	; 0x120
      _s = s;
    3b34:	strb.w	r1, [r5, #308]	; 0x134
      _b = b;
    3b38:	mov.w	r1, #0
    3b3c:	strb.w	sl, [r5, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b40:	str.w	r9, [r5, #304]	; 0x130
      _s = s;
      _b = b;
    3b44:	strb.w	r6, [r5, #309]	; 0x135
    3b48:	mvn.w	r6, #37	; 0x25
    3b4c:	strb.w	r1, [r5, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b50:	movs	r1, #0
      _s = s;
      _b = b;
    3b52:	strb.w	r6, [r5, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b56:	movs	r6, #60	; 0x3c
    3b58:	str.w	r1, [r5, #352]	; 0x160
    3b5c:	str.w	r6, [r5, #408]	; 0x198
    3b60:	movs	r6, #183	; 0xb7
      _s = s;
    3b62:	strb.w	r1, [r5, #356]	; 0x164
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b66:	str.w	r6, [r5, #424]	; 0x1a8
      _s = s;
    3b6a:	mvn.w	r6, #88	; 0x58
      _b = b;
    3b6e:	strb.w	r1, [r5, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b72:	movs	r1, #0
      _s = s;
    3b74:	strb.w	r6, [r5, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b78:	movs	r6, #1
    3b7a:	str.w	r1, [r5, #360]	; 0x168
    3b7e:	str.w	r6, [r5, #400]	; 0x190
      _s = s;
    3b82:	mov.w	r6, #51	; 0x33
    3b86:	strb.w	r1, [r5, #364]	; 0x16c
    3b8a:	strb.w	r6, [r5, #404]	; 0x194
    3b8e:	mov.w	r6, #14
      _b = b;
    3b92:	strb.w	r1, [r5, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b96:	movs	r1, #0
      _s = s;
    3b98:	strb.w	r6, [r5, #412]	; 0x19c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b9c:	movs	r6, #172	; 0xac
    3b9e:	str.w	r1, [r5, #368]	; 0x170
    3ba2:	str.w	r6, [r5, #416]	; 0x1a0
      _s = s;
    3ba6:	mov.w	r6, #47	; 0x2f
    3baa:	strb.w	r1, [r5, #372]	; 0x174
      _b = b;
    3bae:	strb.w	r1, [r5, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bb2:	movs	r1, #0
      _s = s;
    3bb4:	strb.w	r6, [r5, #420]	; 0x1a4
      _b = b;
    3bb8:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bbc:	str.w	r1, [r5, #376]	; 0x178
      _s = s;
    3bc0:	strb.w	r1, [r5, #380]	; 0x17c
      _b = b;
    3bc4:	strb.w	r1, [r5, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bc8:	movs	r1, #0
      _s = s;
      _b = b;
    3bca:	strb.w	r6, [r5, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bce:	movs	r6, #181	; 0xb5
    3bd0:	str.w	r1, [r5, #384]	; 0x180
      _s = s;
    3bd4:	strb.w	r1, [r5, #388]	; 0x184
      _b = b;
    3bd8:	strb.w	r1, [r5, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bdc:	movs	r1, #0
    3bde:	str.w	r6, [r5, #432]	; 0x1b0
      _s = s;
    3be2:	mov.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3be6:	str.w	r1, [r5, #392]	; 0x188
      _s = s;
    3bea:	strb.w	r1, [r5, #396]	; 0x18c
      _b = b;
    3bee:	strb.w	r1, [r5, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3bf2:	mov.w	r1, #4294967295
      _b = b;
    3bf6:	strb.w	r8, [r5, #413]	; 0x19d
    3bfa:	strb.w	r8, [r5, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3bfe:	strb.w	r6, [r5, #436]	; 0x1b4
      _b = b;
    3c02:	mov.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c06:	strb.w	r1, [r5, #516]	; 0x204
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c0a:	movs	r1, #0
      _s = s;
      _b = b;
    3c0c:	strb.w	r6, [r5, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c10:	movs	r6, #180	; 0xb4
    3c12:	str.w	r1, [r5, #520]	; 0x208
    3c16:	str.w	r6, [r5, #440]	; 0x1b8
    3c1a:	b.n	3c24 <_GLOBAL__sub_I_low_threshold+0x3dc>
    3c1c:	.word	0x20006158
    3c20:	.word	0x20007358
      _s = s;
      _b = b;
    3c24:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c28:	strb.w	r1, [r5, #524]	; 0x20c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c2c:	movs	r1, #191	; 0xbf
      _s = s;
      _b = b;
    3c2e:	strb.w	r6, [r5, #445]	; 0x1bd
    3c32:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c36:	str.w	r1, [r5, #448]	; 0x1c0
      _s = s;
      _b = b;
    3c3a:	mov.w	r1, #0
    3c3e:	strb.w	r6, [r5, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c42:	movs	r6, #183	; 0xb7
    3c44:	str.w	r7, [r5, #472]	; 0x1d8
    3c48:	str.w	r6, [r5, #456]	; 0x1c8
      _s = s;
    3c4c:	mvn.w	r6, #40	; 0x28
    3c50:	strb.w	lr, [r5, #476]	; 0x1dc
    3c54:	strb.w	r6, [r5, #460]	; 0x1cc
      _b = b;
    3c58:	mvn.w	r6, #99	; 0x63
    3c5c:	strb.w	r6, [r5, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c60:	mov.w	r6, #28
    3c64:	strb.w	r6, [r5, #468]	; 0x1d4
      _b = b;
    3c68:	mvn.w	r6, #78	; 0x4e
    3c6c:	strb.w	r6, [r5, #469]	; 0x1d5
    3c70:	mvn.w	r6, #56	; 0x38
    3c74:	strb.w	r6, [r5, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c78:	movs	r6, #181	; 0xb5
    3c7a:	mov	r0, r6
    3c7c:	str.w	r6, [r5, #488]	; 0x1e8
      _s = s;
    3c80:	mvn.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c84:	str.w	r0, [r5, #496]	; 0x1f0
      _s = s;
    3c88:	strb.w	r6, [r5, #492]	; 0x1ec
      _b = b;
    3c8c:	mvn.w	r6, #92	; 0x5c
    3c90:	strb.w	r6, [r5, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c94:	mvn.w	r6, #92	; 0x5c
    3c98:	strb.w	r6, [r5, #500]	; 0x1f4
      _b = b;
    3c9c:	mvn.w	r6, #93	; 0x5d
    3ca0:	strb.w	r6, [r5, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ca4:	movs	r6, #177	; 0xb1
    3ca6:	str.w	r6, [r5, #512]	; 0x200
      _s = s;
    3caa:	mov.w	r6, #62	; 0x3e
    3cae:	strb.w	r6, [r5, #444]	; 0x1bc
    3cb2:	mvn.w	r6, #4
    3cb6:	strb.w	r6, [r5, #452]	; 0x1c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cba:	movs	r6, #3
    3cbc:	str.w	r6, [r5, #464]	; 0x1d0
      _s = s;
      _b = b;
    3cc0:	mvn.w	r6, #35	; 0x23
    3cc4:	strb.w	r6, [r5, #477]	; 0x1dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cc8:	movw	r6, #355	; 0x163
    3ccc:	str.w	r6, [r5, #480]	; 0x1e0
      _s = s;
    3cd0:	mov.w	r6, #126	; 0x7e
    3cd4:	strb.w	r6, [r5, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cd8:	movs	r6, #179	; 0xb3
    3cda:	str.w	r6, [r5, #504]	; 0x1f8
      _s = s;
    3cde:	mov.w	r6, #119	; 0x77
    3ce2:	strb.w	r6, [r5, #508]	; 0x1fc
      _b = b;
    3ce6:	mvn.w	r6, #121	; 0x79
    3cea:	strb.w	r6, [r5, #509]	; 0x1fd
    3cee:	mov.w	r6, #40	; 0x28
    3cf2:	strb.w	r6, [r5, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cf6:	movw	r6, #357	; 0x165
      _s = s;
      _b = b;
    3cfa:	strb.w	r1, [r5, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cfe:	movs	r1, #0
    3d00:	str.w	r6, [r5, #600]	; 0x258
      _s = s;
    3d04:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d08:	str.w	r1, [r5, #528]	; 0x210
      _s = s;
    3d0c:	strb.w	r1, [r5, #532]	; 0x214
      _b = b;
    3d10:	strb.w	r1, [r5, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d14:	movs	r1, #0
      _s = s;
    3d16:	strb.w	r6, [r5, #604]	; 0x25c
    3d1a:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d1e:	str.w	r1, [r5, #536]	; 0x218
      _s = s;
    3d22:	strb.w	r1, [r5, #540]	; 0x21c
      _b = b;
    3d26:	strb.w	r1, [r5, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d2a:	movs	r1, #0
      _s = s;
    3d2c:	strb.w	r6, [r5, #612]	; 0x264
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d30:	mov.w	r6, #356	; 0x164
    3d34:	str.w	r1, [r5, #544]	; 0x220
      _s = s;
    3d38:	strb.w	r1, [r5, #548]	; 0x224
      _b = b;
    3d3c:	strb.w	r1, [r5, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d40:	movs	r1, #0
    3d42:	str.w	r6, [r5, #592]	; 0x250
      _s = s;
    3d46:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d4a:	str.w	r1, [r5, #552]	; 0x228
      _s = s;
    3d4e:	strb.w	r1, [r5, #556]	; 0x22c
      _b = b;
    3d52:	strb.w	r1, [r5, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d56:	movs	r1, #0
      _s = s;
    3d58:	strb.w	r6, [r5, #596]	; 0x254
      _b = b;
    3d5c:	mvn.w	r6, #30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d60:	str.w	r1, [r5, #560]	; 0x230
      _s = s;
    3d64:	strb.w	r1, [r5, #564]	; 0x234
      _b = b;
    3d68:	strb.w	r1, [r5, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d6c:	movs	r1, #0
      _s = s;
      _b = b;
    3d6e:	strb.w	r6, [r5, #597]	; 0x255
    3d72:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d76:	str.w	r1, [r5, #568]	; 0x238
      _s = s;
    3d7a:	strb.w	r1, [r5, #572]	; 0x23c
      _b = b;
    3d7e:	strb.w	r1, [r5, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d82:	movs	r1, #0
      _s = s;
      _b = b;
    3d84:	strb.w	r6, [r5, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d88:	mov.w	r6, #354	; 0x162
    3d8c:	str.w	r1, [r5, #576]	; 0x240
      _s = s;
    3d90:	strb.w	r1, [r5, #580]	; 0x244
      _b = b;
    3d94:	strb.w	r1, [r5, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d98:	movs	r1, #0
    3d9a:	str.w	r1, [r5, #584]	; 0x248
      _s = s;
    3d9e:	strb.w	r1, [r5, #588]	; 0x24c
      _b = b;
    3da2:	strb.w	r1, [r5, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3da6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3daa:	str.w	r6, [r5, #608]	; 0x260
      _s = s;
      _b = b;
    3dae:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3db2:	strb.w	r1, [r5, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3db6:	movs	r1, #0
      _s = s;
      _b = b;
    3db8:	strb.w	r6, [r5, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3dbc:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3dc0:	str.w	r1, [r5, #656]	; 0x290
      _s = s;
    3dc4:	mov.w	r1, #4294967295
    3dc8:	strb.w	r6, [r5, #628]	; 0x274
      _b = b;
    3dcc:	mvn.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3dd0:	str.w	r3, [r5, #616]	; 0x268
      _s = s;
      _b = b;
    3dd4:	strb.w	r6, [r5, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3dd8:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ddc:	str.w	r7, [r5, #664]	; 0x298
      _s = s;
    3de0:	strb.w	r6, [r5, #636]	; 0x27c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3de4:	movs	r6, #181	; 0xb5
      _s = s;
    3de6:	strb.w	r1, [r5, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3dea:	str.w	r6, [r5, #648]	; 0x288
      _s = s;
    3dee:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3df2:	str.w	r2, [r5, #696]	; 0x2b8
      _s = s;
    3df6:	strb.w	r6, [r5, #652]	; 0x28c
      _b = b;
    3dfa:	mvn.w	r6, #63	; 0x3f
    3dfe:	strb.w	ip, [r5, #661]	; 0x295
    3e02:	strb.w	r6, [r5, #653]	; 0x28d
    3e06:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e0a:	str.w	fp, [r5, #640]	; 0x280
      _s = s;
      _b = b;
    3e0e:	strb.w	r6, [r5, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e12:	mvn.w	r6, #43	; 0x2b
    3e16:	strb.w	r6, [r5, #676]	; 0x2a4
      _b = b;
    3e1a:	mvn.w	r6, #61	; 0x3d
    3e1e:	strb.w	r6, [r5, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e22:	mov.w	r6, #354	; 0x162
    3e26:	str.w	r6, [r5, #680]	; 0x2a8
      _s = s;
    3e2a:	mvn.w	r6, #55	; 0x37
    3e2e:	strb.w	r6, [r5, #684]	; 0x2ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e32:	movs	r6, #188	; 0xbc
    3e34:	str.w	r6, [r5, #688]	; 0x2b0
      _s = s;
    3e38:	mvn.w	r6, #4
    3e3c:	strb.w	r6, [r5, #692]	; 0x2b4
      _b = b;
    3e40:	mov.w	r6, #80	; 0x50
    3e44:	strb.w	r6, [r5, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e48:	mov.w	r6, #98	; 0x62
    3e4c:	strb.w	r6, [r5, #620]	; 0x26c
      _b = b;
    3e50:	mvn.w	r6, #79	; 0x4f
    3e54:	strb.w	r6, [r5, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e58:	movs	r6, #206	; 0xce
    3e5a:	str.w	r6, [r5, #624]	; 0x270
    3e5e:	movs	r6, #205	; 0xcd
    3e60:	str.w	r6, [r5, #632]	; 0x278
      _s = s;
      _b = b;
    3e64:	mov.w	r6, #79	; 0x4f
    3e68:	strb.w	r6, [r5, #637]	; 0x27d
    3e6c:	mov.w	r6, #109	; 0x6d
    3e70:	strb.w	r6, [r5, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e74:	mvn.w	r6, #90	; 0x5a
    3e78:	strb.w	r6, [r5, #660]	; 0x294
      _b = b;
    3e7c:	strb.w	r6, [r5, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e80:	movw	r6, #351	; 0x15f
    3e84:	str.w	r6, [r5, #672]	; 0x2a0
      _s = s;
    3e88:	mvn.w	r6, #8
    3e8c:	strb.w	r6, [r5, #700]	; 0x2bc
      _b = b;
    3e90:	mov.w	r6, #70	; 0x46
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e94:	strb.w	r1, [r5, #716]	; 0x2cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e98:	movs	r1, #0
      _s = s;
      _b = b;
    3e9a:	strb.w	r6, [r5, #701]	; 0x2bd
    3e9e:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ea2:	str.w	r1, [r5, #720]	; 0x2d0
      _s = s;
    3ea6:	strb.w	r1, [r5, #724]	; 0x2d4
      _b = b;
    3eaa:	strb.w	r1, [r5, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eae:	movs	r1, #0
      _s = s;
      _b = b;
    3eb0:	strb.w	r6, [r5, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eb4:	mov.w	r6, #330	; 0x14a
    3eb8:	str.w	r1, [r5, #728]	; 0x2d8
      _s = s;
    3ebc:	strb.w	r1, [r5, #732]	; 0x2dc
      _b = b;
    3ec0:	strb.w	r1, [r5, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ec4:	movs	r1, #0
    3ec6:	str.w	r6, [r5, #784]	; 0x310
      _s = s;
    3eca:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ece:	str.w	r1, [r5, #736]	; 0x2e0
      _s = s;
    3ed2:	strb.w	r1, [r5, #740]	; 0x2e4
      _b = b;
    3ed6:	strb.w	r1, [r5, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eda:	movs	r1, #0
      _s = s;
    3edc:	strb.w	r6, [r5, #708]	; 0x2c4
      _b = b;
    3ee0:	mov.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ee4:	str.w	r1, [r5, #744]	; 0x2e8
      _s = s;
    3ee8:	strb.w	r1, [r5, #748]	; 0x2ec
      _b = b;
    3eec:	strb.w	r1, [r5, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ef0:	movs	r1, #0
      _s = s;
      _b = b;
    3ef2:	strb.w	r6, [r5, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ef6:	mov.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3efa:	str.w	r1, [r5, #752]	; 0x2f0
      _s = s;
    3efe:	strb.w	r1, [r5, #756]	; 0x2f4
      _b = b;
    3f02:	strb.w	r1, [r5, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f06:	movs	r1, #0
    3f08:	str.w	r3, [r5, #704]	; 0x2c0
    3f0c:	str.w	r1, [r5, #760]	; 0x2f8
      _s = s;
    3f10:	strb.w	r1, [r5, #764]	; 0x2fc
      _b = b;
    3f14:	strb.w	r1, [r5, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f18:	movs	r1, #0
    3f1a:	str.w	r3, [r5, #712]	; 0x2c8
    3f1e:	str.w	r1, [r5, #768]	; 0x300
      _s = s;
    3f22:	strb.w	r1, [r5, #772]	; 0x304
      _b = b;
    3f26:	strb.w	r1, [r5, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f2a:	movs	r1, #0
    3f2c:	str.w	r1, [r5, #776]	; 0x308
      _s = s;
    3f30:	strb.w	r1, [r5, #780]	; 0x30c
      _b = b;
    3f34:	strb.w	r1, [r5, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f38:	mov.w	r1, #4294967295
    3f3c:	strb.w	r6, [r5, #788]	; 0x314
      _b = b;
    3f40:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f44:	str.w	ip, [r5, #824]	; 0x338
      _s = s;
      _b = b;
    3f48:	strb.w	r6, [r5, #789]	; 0x315
    3f4c:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f50:	str.w	r7, [r5, #856]	; 0x358
      _s = s;
      _b = b;
    3f54:	strb.w	r6, [r5, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f58:	movw	r6, #355	; 0x163
      _s = s;
    3f5c:	strb.w	r1, [r5, #860]	; 0x35c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f60:	str.w	r6, [r5, #800]	; 0x320
      _s = s;
      _b = b;
    3f64:	mvn.w	r6, #76	; 0x4c
    3f68:	strb.w	ip, [r5, #869]	; 0x365
    3f6c:	strb.w	r6, [r5, #813]	; 0x32d
    3f70:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f74:	strb.w	fp, [r5, #804]	; 0x324
      _b = b;
    3f78:	strb.w	r6, [r5, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f7c:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f80:	str.w	r9, [r5, #832]	; 0x340
      _s = s;
    3f84:	strb.w	r6, [r5, #828]	; 0x33c
      _b = b;
    3f88:	mvn.w	r6, #91	; 0x5b
    3f8c:	strb.w	r6, [r5, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f90:	mvn.w	r6, #83	; 0x53
    3f94:	strb.w	r6, [r5, #836]	; 0x344
      _b = b;
    3f98:	mvn.w	r6, #79	; 0x4f
    3f9c:	strb.w	r6, [r5, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fa0:	movs	r6, #184	; 0xb8
    3fa2:	str.w	r6, [r5, #840]	; 0x348
      _s = s;
      _b = b;
    3fa6:	mvn.w	r6, #62	; 0x3e
    3faa:	strb.w	r6, [r5, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3fae:	mvn.w	r6, #33	; 0x21
    3fb2:	strb.w	r6, [r5, #868]	; 0x364
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fb6:	movw	r6, #355	; 0x163
    3fba:	str.w	r6, [r5, #872]	; 0x368
      _s = s;
    3fbe:	mvn.w	r6, #20
    3fc2:	strb.w	r6, [r5, #876]	; 0x36c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fc6:	movw	r6, #347	; 0x15b
    3fca:	str.w	r6, [r5, #848]	; 0x350
    3fce:	mov.w	r6, #358	; 0x166
    3fd2:	str.w	r6, [r5, #792]	; 0x318
      _s = s;
    3fd6:	mvn.w	r6, #82	; 0x52
    3fda:	strb.w	r6, [r5, #796]	; 0x31c
      _b = b;
    3fde:	mvn.w	r6, #26
    3fe2:	strb.w	r6, [r5, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fe6:	movw	r6, #277	; 0x115
    3fea:	str.w	r6, [r5, #808]	; 0x328
      _s = s;
    3fee:	mov.w	r6, #99	; 0x63
    3ff2:	strb.w	r6, [r5, #812]	; 0x32c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ff6:	movs	r6, #233	; 0xe9
    3ff8:	str.w	r6, [r5, #816]	; 0x330
      _s = s;
    3ffc:	mov.w	r6, #108	; 0x6c
    4000:	strb.w	r6, [r5, #820]	; 0x334
    4004:	mov.w	r6, #101	; 0x65
    4008:	strb.w	r6, [r5, #844]	; 0x34c
      _b = b;
    400c:	mvn.w	r6, #54	; 0x36
    4010:	strb.w	r6, [r5, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4014:	mov.w	r6, #75	; 0x4b
    4018:	strb.w	r6, [r5, #852]	; 0x354
      _b = b;
    401c:	mvn.w	r6, #25
    4020:	strb.w	r6, [r5, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4024:	movw	r6, #353	; 0x161
    4028:	str.w	r6, [r5, #864]	; 0x360
      _s = s;
      _b = b;
    402c:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4030:	strb.w	r1, [r5, #924]	; 0x39c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4034:	movs	r1, #0
      _s = s;
      _b = b;
    4036:	strb.w	r6, [r5, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    403a:	movs	r6, #188	; 0xbc
    403c:	str.w	r1, [r5, #928]	; 0x3a0
    4040:	str.w	r6, [r5, #880]	; 0x370
      _s = s;
    4044:	mvn.w	r6, #55	; 0x37
    4048:	strb.w	r1, [r5, #932]	; 0x3a4
    404c:	strb.w	r6, [r5, #908]	; 0x38c
      _b = b;
    4050:	mov.w	r6, #47	; 0x2f
    4054:	strb.w	r1, [r5, #933]	; 0x3a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4058:	movs	r1, #0
      _s = s;
      _b = b;
    405a:	strb.w	r6, [r5, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    405e:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4062:	str.w	r1, [r5, #936]	; 0x3a8
      _s = s;
    4066:	strb.w	r6, [r5, #916]	; 0x394
      _b = b;
    406a:	strb.w	r6, [r5, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    406e:	movs	r6, #178	; 0xb2
      _s = s;
    4070:	strb.w	r1, [r5, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4074:	str.w	r6, [r5, #920]	; 0x398
      _s = s;
      _b = b;
    4078:	mov.w	r6, #45	; 0x2d
    407c:	strb.w	r1, [r5, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4080:	movs	r1, #0
      _s = s;
      _b = b;
    4082:	strb.w	r6, [r5, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4086:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    408a:	str.w	r1, [r5, #944]	; 0x3b0
      _s = s;
    408e:	strb.w	r6, [r5, #884]	; 0x374
      _b = b;
    4092:	mov.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4096:	strb.w	r1, [r5, #948]	; 0x3b4
      _b = b;
    409a:	strb.w	r6, [r5, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    409e:	mvn.w	r6, #13
      _b = b;
    40a2:	strb.w	r1, [r5, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40a6:	movs	r1, #0
      _s = s;
    40a8:	strb.w	r6, [r5, #892]	; 0x37c
      _b = b;
    40ac:	mov.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40b0:	str.w	r1, [r5, #952]	; 0x3b8
      _s = s;
      _b = b;
    40b4:	strb.w	r6, [r5, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40b8:	movs	r6, #210	; 0xd2
      _s = s;
    40ba:	strb.w	r1, [r5, #956]	; 0x3bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40be:	str.w	r6, [r5, #896]	; 0x380
      _s = s;
    40c2:	mvn.w	r6, #85	; 0x55
      _b = b;
    40c6:	strb.w	r1, [r5, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40ca:	movs	r1, #0
      _s = s;
    40cc:	strb.w	r6, [r5, #900]	; 0x384
      _b = b;
    40d0:	mov.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40d4:	str.w	r1, [r5, #960]	; 0x3c0
      _s = s;
      _b = b;
    40d8:	strb.w	r6, [r5, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40dc:	movs	r6, #207	; 0xcf
      _s = s;
    40de:	strb.w	r1, [r5, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40e2:	str.w	sl, [r5, #888]	; 0x378
    40e6:	str.w	sl, [r5, #912]	; 0x390
    40ea:	str.w	r6, [r5, #904]	; 0x388
    40ee:	movs	r6, #224	; 0xe0
      _s = s;
      _b = b;
    40f0:	strb.w	r1, [r5, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40f4:	movs	r1, #0
    40f6:	str.w	r6, [r5, #976]	; 0x3d0
      _s = s;
      _b = b;
    40fa:	mvn.w	r6, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40fe:	str.w	r1, [r5, #968]	; 0x3c8
      _s = s;
      _b = b;
    4102:	strb.w	r6, [r5, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4106:	movs	r6, #228	; 0xe4
      _s = s;
    4108:	strb.w	r1, [r5, #972]	; 0x3cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    410c:	str.w	r6, [r5, #992]	; 0x3e0
      _s = s;
      _b = b;
    4110:	mvn.w	r6, #67	; 0x43
    4114:	strb.w	r1, [r5, #973]	; 0x3cd
    4118:	mvn.w	r1, #64	; 0x40
    411c:	strb.w	r6, [r5, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4120:	movw	r6, #313	; 0x139
      _s = s;
      _b = b;
    4124:	strb.w	r1, [r5, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4128:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    412c:	str.w	r6, [r5, #1008]	; 0x3f0
      _s = s;
      _b = b;
    4130:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4134:	str.w	ip, [r5, #984]	; 0x3d8
      _s = s;
      _b = b;
    4138:	strb.w	r6, [r5, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    413c:	movs	r6, #243	; 0xf3
      _s = s;
    413e:	strb.w	r1, [r5, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4142:	str.w	r6, [r5, #1016]	; 0x3f8
      _s = s;
      _b = b;
    4146:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    414a:	strb.w	r1, [r5, #1012]	; 0x3f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    414e:	movs	r1, #0
      _s = s;
      _b = b;
    4150:	strb.w	r6, [r5, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4154:	movs	r6, #194	; 0xc2
    4156:	str.w	r8, [r5, #1040]	; 0x410
    415a:	str.w	r6, [r5, #1024]	; 0x400
      _s = s;
    415e:	mov.w	r6, #109	; 0x6d
      _b = b;
    4162:	strb.w	r9, [r5, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4166:	strb.w	r6, [r5, #1028]	; 0x404
      _b = b;
    416a:	mvn.w	r6, #73	; 0x49
    416e:	strb.w	r6, [r5, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4172:	movs	r6, #200	; 0xc8
    4174:	str.w	r6, [r5, #1032]	; 0x408
      _s = s;
      _b = b;
    4178:	mvn.w	r6, #63	; 0x3f
    417c:	strb.w	r6, [r5, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4180:	mov.w	r6, #37	; 0x25
    4184:	strb.w	r6, [r5, #1044]	; 0x414
    4188:	mvn.w	r6, #78	; 0x4e
    418c:	strb.w	r6, [r5, #1052]	; 0x41c
      _b = b;
    4190:	mvn.w	r6, #52	; 0x34
    4194:	strb.w	r6, [r5, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4198:	mov.w	r6, #38	; 0x26
    419c:	strb.w	r6, [r5, #980]	; 0x3d4
    41a0:	mov.w	r6, #36	; 0x24
    41a4:	strb.w	r6, [r5, #988]	; 0x3dc
    41a8:	mov.w	r6, #54	; 0x36
    41ac:	strb.w	r6, [r5, #996]	; 0x3e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41b0:	mov.w	r6, #312	; 0x138
    41b4:	str.w	r6, [r5, #1000]	; 0x3e8
      _s = s;
    41b8:	mov.w	r6, #64	; 0x40
    41bc:	strb.w	r6, [r5, #1020]	; 0x3fc
    41c0:	mov.w	r6, #65	; 0x41
    41c4:	strb.w	r6, [r5, #1036]	; 0x40c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41c8:	mov.w	r6, #352	; 0x160
    41cc:	str.w	r6, [r5, #1048]	; 0x418
      _s = s;
      _b = b;
    41d0:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41d4:	str.w	r1, [r5, #1128]	; 0x468
      _s = s;
      _b = b;
    41d8:	strb.w	r6, [r5, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41dc:	mov.w	r6, #356	; 0x164
      _s = s;
    41e0:	strb.w	r1, [r5, #1132]	; 0x46c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41e4:	mov	r0, r6
    41e6:	str.w	r6, [r5, #1056]	; 0x420
      _s = s;
      _b = b;
    41ea:	mvn.w	r6, #26
    41ee:	strb.w	r1, [r5, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41f2:	str.w	r0, [r5, #1064]	; 0x428
    41f6:	movs	r1, #0
      _s = s;
      _b = b;
    41f8:	strb.w	r6, [r5, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    41fc:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4200:	str.w	r7, [r5, #1096]	; 0x448
      _s = s;
    4204:	strb.w	r6, [r5, #1068]	; 0x42c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4208:	movs	r6, #180	; 0xb4
      _s = s;
    420a:	strb.w	lr, [r5, #1100]	; 0x44c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    420e:	mov	r0, r6
    4210:	str.w	r6, [r5, #1072]	; 0x430
      _s = s;
      _b = b;
    4214:	mov.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4218:	str.w	r3, [r5, #1104]	; 0x450
    421c:	str.w	r0, [r5, #1112]	; 0x458
      _s = s;
      _b = b;
    4220:	strb.w	r6, [r5, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4224:	mvn.w	r6, #35	; 0x23
    4228:	strb.w	lr, [r5, #1116]	; 0x45c
    422c:	strb.w	r6, [r5, #1084]	; 0x43c
      _b = b;
    4230:	mov.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4234:	str.w	r0, [r5, #1120]	; 0x460
      _s = s;
      _b = b;
    4238:	strb.w	r6, [r5, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    423c:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4240:	str.w	r1, [r5, #1136]	; 0x470
      _s = s;
    4244:	strb.w	r6, [r5, #1092]	; 0x444
      _b = b;
    4248:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    424c:	strb.w	r1, [r5, #1140]	; 0x474
      _b = b;
    4250:	strb.w	r6, [r5, #1093]	; 0x445
    4254:	mvn.w	r6, #34	; 0x22
    4258:	strb.w	r9, [r5, #1069]	; 0x42d
    425c:	strb.w	r6, [r5, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4260:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4264:	str.w	sl, [r5, #1080]	; 0x438
      _s = s;
    4268:	strb.w	r6, [r5, #1108]	; 0x454
      _b = b;
    426c:	mvn.w	r6, #126	; 0x7e
    4270:	strb.w	r6, [r5, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4274:	mvn.w	r6, #120	; 0x78
    4278:	strb.w	r6, [r5, #1124]	; 0x464
    427c:	mvn.w	r6, #6
    4280:	strb.w	r6, [r5, #1060]	; 0x424
    4284:	mvn.w	r6, #24
    4288:	strb.w	r6, [r5, #1076]	; 0x434
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    428c:	mov.w	r6, #336	; 0x150
    4290:	str.w	r6, [r5, #1088]	; 0x440
      _s = s;
      _b = b;
    4294:	mvn.w	r6, #84	; 0x54
    4298:	strb.w	r6, [r5, #1109]	; 0x455
    429c:	mov.w	r6, #81	; 0x51
    42a0:	strb.w	r6, [r5, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42a4:	movs	r6, #184	; 0xb8
      _s = s;
      _b = b;
    42a6:	strb.w	r1, [r5, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42aa:	movs	r1, #0
    42ac:	str.w	r6, [r5, #1168]	; 0x490
      _s = s;
    42b0:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42b4:	str.w	r1, [r5, #1144]	; 0x478
      _s = s;
    42b8:	strb.w	r6, [r5, #1172]	; 0x494
    42bc:	mov.w	r6, #107	; 0x6b
    42c0:	strb.w	r1, [r5, #1148]	; 0x47c
    42c4:	strb.w	r6, [r5, #1188]	; 0x4a4
      _b = b;
    42c8:	mvn.w	r6, #89	; 0x59
    42cc:	strb.w	r1, [r5, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42d0:	movs	r1, #0
      _s = s;
      _b = b;
    42d2:	strb.w	r6, [r5, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42d6:	movw	r6, #313	; 0x139
    42da:	str.w	r1, [r5, #1152]	; 0x480
    42de:	str.w	r6, [r5, #1192]	; 0x4a8
      _s = s;
      _b = b;
    42e2:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    42e6:	strb.w	r1, [r5, #1156]	; 0x484
      _b = b;
    42ea:	strb.w	r6, [r5, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    42ee:	mvn.w	r6, #91	; 0x5b
      _b = b;
    42f2:	strb.w	r1, [r5, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42f6:	movs	r1, #0
      _s = s;
    42f8:	strb.w	r6, [r5, #1204]	; 0x4b4
    42fc:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4300:	str.w	r1, [r5, #1160]	; 0x488
      _s = s;
    4304:	strb.w	r6, [r5, #1212]	; 0x4bc
      _b = b;
    4308:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    430c:	strb.w	r1, [r5, #1164]	; 0x48c
      _b = b;
    4310:	strb.w	r6, [r5, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4314:	mov.w	r6, #95	; 0x5f
      _b = b;
    4318:	strb.w	r1, [r5, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    431c:	mov.w	r1, #4294967295
    4320:	strb.w	r6, [r5, #1220]	; 0x4c4
      _b = b;
    4324:	mvn.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4328:	str.w	r2, [r5, #1176]	; 0x498
      _s = s;
      _b = b;
    432c:	strb.w	r6, [r5, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4330:	movs	r6, #204	; 0xcc
      _s = s;
      _b = b;
    4332:	strb.w	r2, [r5, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4336:	str.w	r6, [r5, #1224]	; 0x4c8
      _s = s;
      _b = b;
    433a:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    433e:	strb.w	r1, [r5, #1196]	; 0x4ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4342:	movs	r1, #0
      _s = s;
      _b = b;
    4344:	strb.w	r6, [r5, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4348:	movw	r6, #257	; 0x101
      _s = s;
    434c:	strb.w	r8, [r5, #1180]	; 0x49c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4350:	str.w	r6, [r5, #1184]	; 0x4a0
    4354:	mov.w	r6, #332	; 0x14c
    4358:	str.w	r6, [r5, #1200]	; 0x4b0
      _s = s;
      _b = b;
    435c:	mvn.w	r6, #97	; 0x61
    4360:	strb.w	r6, [r5, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4364:	mov.w	r6, #308	; 0x134
    4368:	str.w	r6, [r5, #1208]	; 0x4b8
    436c:	movs	r6, #198	; 0xc6
    436e:	str.w	r6, [r5, #1216]	; 0x4c0
      _s = s;
    4372:	mov.w	r6, #61	; 0x3d
    4376:	strb.w	r6, [r5, #1228]	; 0x4cc
      _b = b;
    437a:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    437e:	strb.w	lr, [r5, #1308]	; 0x51c
      _b = b;
    4382:	strb.w	r6, [r5, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4386:	mov.w	r6, #28
    438a:	strb.w	r6, [r5, #1236]	; 0x4d4
      _b = b;
    438e:	mvn.w	r6, #58	; 0x3a
    4392:	strb.w	r6, [r5, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4396:	mov.w	r6, #54	; 0x36
    439a:	strb.w	r6, [r5, #1244]	; 0x4dc
      _b = b;
    439e:	mvn.w	r6, #74	; 0x4a
    43a2:	strb.w	r6, [r5, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    43a6:	mov.w	r6, #109	; 0x6d
    43aa:	strb.w	r6, [r5, #1252]	; 0x4e4
      _b = b;
    43ae:	mvn.w	r6, #101	; 0x65
    43b2:	strb.w	r6, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43b6:	movs	r6, #221	; 0xdd
    43b8:	str.w	r6, [r5, #1256]	; 0x4e8
      _s = s;
    43bc:	mov.w	r6, #81	; 0x51
    43c0:	strb.w	r6, [r5, #1260]	; 0x4ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43c4:	movs	r6, #181	; 0xb5
    43c6:	str.w	r6, [r5, #1264]	; 0x4f0
    43ca:	str.w	r6, [r5, #1272]	; 0x4f8
      _s = s;
    43ce:	mvn.w	r6, #61	; 0x3d
    43d2:	strb.w	r6, [r5, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43d6:	mov.w	r6, #354	; 0x162
    43da:	str.w	r6, [r5, #1288]	; 0x508
      _s = s;
    43de:	mvn.w	r6, #20
    43e2:	strb.w	r6, [r5, #1292]	; 0x50c
      _b = b;
    43e6:	mvn.w	r6, #82	; 0x52
    43ea:	strb.w	r6, [r5, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43ee:	movs	r6, #180	; 0xb4
    43f0:	mov	r0, r6
    43f2:	str.w	r6, [r5, #1296]	; 0x510
      _s = s;
      _b = b;
    43f6:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43fa:	str.w	r0, [r5, #1304]	; 0x518
      _s = s;
      _b = b;
    43fe:	strb.w	r6, [r5, #1301]	; 0x515
    4402:	mvn.w	r6, #122	; 0x7a
    4406:	strb.w	r6, [r5, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    440a:	movs	r6, #177	; 0xb1
    440c:	str.w	r6, [r5, #1312]	; 0x520
      _s = s;
    4410:	mvn.w	r6, #54	; 0x36
    4414:	strb.w	r6, [r5, #1316]	; 0x524
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4418:	mov.w	r6, #334	; 0x14e
    441c:	str.w	r6, [r5, #1280]	; 0x500
    4420:	mov.w	r6, #300	; 0x12c
    4424:	str.w	r6, [r5, #1232]	; 0x4d0
    4428:	mov.w	r6, #258	; 0x102
    442c:	str.w	r6, [r5, #1240]	; 0x4d8
    4430:	mov.w	r6, #306	; 0x132
    4434:	str.w	r6, [r5, #1248]	; 0x4e0
      _s = s;
      _b = b;
    4438:	mvn.w	r6, #87	; 0x57
    443c:	strb.w	r6, [r5, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4440:	mov.w	r6, #111	; 0x6f
    4444:	strb.w	r6, [r5, #1268]	; 0x4f4
      _b = b;
    4448:	mvn.w	r6, #127	; 0x7f
    444c:	strb.w	r6, [r5, #1269]	; 0x4f5
    4450:	mov.w	r6, #93	; 0x5d
    4454:	strb.w	r6, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4458:	mov.w	r6, #68	; 0x44
    445c:	strb.w	r6, [r5, #1284]	; 0x504
      _b = b;
    4460:	mov.w	r6, #71	; 0x47
    4464:	strb.w	r6, [r5, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4468:	mvn.w	r6, #107	; 0x6b
    446c:	strb.w	r6, [r5, #1300]	; 0x514
    4470:	mvn.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4474:	str.w	r1, [r5, #1328]	; 0x530
      _s = s;
    4478:	strb.w	r6, [r5, #1324]	; 0x52c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    447c:	movs	r6, #197	; 0xc5
      _s = s;
    447e:	strb.w	r1, [r5, #1332]	; 0x534
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4482:	str.w	r6, [r5, #1360]	; 0x550
    4486:	movs	r6, #196	; 0xc4
      _s = s;
      _b = b;
    4488:	strb.w	r1, [r5, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    448c:	movs	r1, #0
    448e:	str.w	r6, [r5, #1368]	; 0x558
      _s = s;
    4492:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4496:	str.w	r1, [r5, #1336]	; 0x538
      _s = s;
    449a:	strb.w	r6, [r5, #1372]	; 0x55c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    449e:	movs	r6, #222	; 0xde
      _s = s;
    44a0:	strb.w	r1, [r5, #1340]	; 0x53c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44a4:	str.w	r6, [r5, #1376]	; 0x560
      _s = s;
    44a8:	mvn.w	r6, #74	; 0x4a
      _b = b;
    44ac:	strb.w	r1, [r5, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44b0:	movs	r1, #0
      _s = s;
    44b2:	strb.w	r6, [r5, #1380]	; 0x564
      _b = b;
    44b6:	mvn.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44ba:	str.w	r1, [r5, #1344]	; 0x540
      _s = s;
      _b = b;
    44be:	strb.w	r6, [r5, #1389]	; 0x56d
    44c2:	mvn.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44c6:	strb.w	r1, [r5, #1348]	; 0x544
      _b = b;
    44ca:	strb.w	r6, [r5, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44ce:	mvn.w	r6, #74	; 0x4a
      _b = b;
    44d2:	strb.w	r1, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44d6:	movs	r1, #0
      _s = s;
    44d8:	strb.w	r6, [r5, #1404]	; 0x57c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44dc:	movs	r6, #174	; 0xae
    44de:	str.w	r1, [r5, #1352]	; 0x548
    44e2:	str.w	r6, [r5, #1320]	; 0x528
      _s = s;
      _b = b;
    44e6:	mov.w	r6, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44ea:	strb.w	r1, [r5, #1356]	; 0x54c
      _b = b;
    44ee:	strb.w	r6, [r5, #1325]	; 0x52d
    44f2:	mov.w	r6, #34	; 0x22
    44f6:	strb.w	r1, [r5, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44fa:	mov.w	r1, #4294967295
      _b = b;
    44fe:	strb.w	r6, [r5, #1365]	; 0x555
    4502:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4506:	strb.w	r1, [r5, #1364]	; 0x554
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    450a:	movs	r1, #255	; 0xff
      _s = s;
      _b = b;
    450c:	strb.w	r6, [r5, #1373]	; 0x55d
    4510:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4514:	str.w	r1, [r5, #1384]	; 0x568
      _s = s;
      _b = b;
    4518:	mov.w	r1, #4294967295
    451c:	strb.w	r6, [r5, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4520:	mov.w	r6, #114	; 0x72
    4524:	strb.w	lr, [r5, #1396]	; 0x574
    4528:	strb.w	r6, [r5, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    452c:	movw	r6, #283	; 0x11b
      _s = s;
      _b = b;
    4530:	strb.w	r9, [r5, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4534:	str.w	r6, [r5, #1392]	; 0x570
    4538:	movw	r6, #275	; 0x113
    453c:	str.w	r6, [r5, #1400]	; 0x578
      _s = s;
      _b = b;
    4540:	mvn.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4544:	str.w	r2, [r5, #1408]	; 0x580
      _s = s;
      _b = b;
    4548:	strb.w	r6, [r5, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    454c:	movs	r6, #206	; 0xce
      _s = s;
      _b = b;
    454e:	strb.w	r3, [r5, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4552:	str.w	r6, [r5, #1416]	; 0x588
      _s = s;
      _b = b;
    4556:	mvn.w	r6, #54	; 0x36
    455a:	strb.w	r1, [r5, #1437]	; 0x59d
    455e:	strb.w	r6, [r5, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4562:	mov.w	r6, #121	; 0x79
    4566:	strb.w	fp, [r5, #1444]	; 0x5a4
    456a:	strb.w	r6, [r5, #1428]	; 0x594
      _b = b;
    456e:	mvn.w	r6, #6
    4572:	strb.w	r6, [r5, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4576:	mvn.w	r6, #47	; 0x2f
    457a:	strb.w	r6, [r5, #1436]	; 0x59c
    457e:	mvn.w	r6, #126	; 0x7e
    4582:	strb.w	r6, [r5, #1452]	; 0x5ac
      _b = b;
    4586:	mvn.w	r6, #89	; 0x59
    458a:	strb.w	r6, [r5, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    458e:	movs	r6, #202	; 0xca
    4590:	str.w	r6, [r5, #1456]	; 0x5b0
    4594:	movs	r6, #192	; 0xc0
    4596:	str.w	r6, [r5, #1464]	; 0x5b8
      _s = s;
    459a:	mvn.w	r6, #86	; 0x56
    459e:	strb.w	r6, [r5, #1468]	; 0x5bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45a2:	mov.w	r6, #356	; 0x164
    45a6:	str.w	r6, [r5, #1472]	; 0x5c0
      _s = s;
    45aa:	mvn.w	r6, #87	; 0x57
    45ae:	strb.w	r6, [r5, #1476]	; 0x5c4
      _b = b;
    45b2:	mov.w	r6, #85	; 0x55
    45b6:	strb.w	r6, [r5, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45ba:	movw	r6, #353	; 0x161
    45be:	str.w	r6, [r5, #1480]	; 0x5c8
      _s = s;
    45c2:	mvn.w	r6, #65	; 0x41
    45c6:	strb.w	r6, [r5, #1484]	; 0x5cc
      _b = b;
    45ca:	mvn.w	r6, #80	; 0x50
    45ce:	strb.w	r6, [r5, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45d2:	movs	r6, #178	; 0xb2
    45d4:	str.w	r6, [r5, #1488]	; 0x5d0
      _s = s;
    45d8:	mvn.w	r6, #105	; 0x69
    45dc:	strb.w	r6, [r5, #1412]	; 0x584
    45e0:	mov.w	r6, #20
    45e4:	strb.w	r6, [r5, #1420]	; 0x58c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45e8:	movw	r6, #323	; 0x143
    45ec:	str.w	r6, [r5, #1424]	; 0x590
    45f0:	mov.w	r6, #316	; 0x13c
    45f4:	str.w	r6, [r5, #1432]	; 0x598
    45f8:	movw	r6, #321	; 0x141
    45fc:	str.w	r6, [r5, #1440]	; 0x5a0
      _s = s;
      _b = b;
    4600:	mvn.w	r6, #10
    4604:	strb.w	r6, [r5, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4608:	movw	r6, #295	; 0x127
    460c:	str.w	r6, [r5, #1448]	; 0x5a8
      _s = s;
    4610:	mvn.w	r6, #19
    4614:	strb.w	r6, [r5, #1460]	; 0x5b4
      _b = b;
    4618:	mov.w	r6, #94	; 0x5e
    461c:	strb.w	r6, [r5, #1461]	; 0x5b5
    4620:	mvn.w	r6, #106	; 0x6a
    4624:	strb.w	r6, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4628:	strb.w	r6, [r5, #1492]	; 0x5d4
      _b = b;
    462c:	mvn.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4630:	strb.w	r1, [r5, #1508]	; 0x5e4
      _b = b;
    4634:	strb.w	r6, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4638:	movs	r6, #183	; 0xb7
      _s = s;
    463a:	strb.w	r1, [r5, #1516]	; 0x5ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    463e:	str.w	r6, [r5, #1496]	; 0x5d8
      _s = s;
    4642:	mvn.w	r6, #6
    4646:	strb.w	r1, [r5, #1524]	; 0x5f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    464a:	movs	r1, #0
      _s = s;
    464c:	strb.w	r6, [r5, #1500]	; 0x5dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4650:	movs	r6, #184	; 0xb8
    4652:	str.w	r1, [r5, #1528]	; 0x5f8
    4656:	str.w	r6, [r5, #1504]	; 0x5e0
    465a:	movs	r6, #182	; 0xb6
      _s = s;
    465c:	strb.w	r1, [r5, #1532]	; 0x5fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4660:	str.w	r6, [r5, #1512]	; 0x5e8
      _s = s;
      _b = b;
    4664:	mvn.w	r6, #107	; 0x6b
    4668:	strb.w	r1, [r5, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    466c:	movs	r1, #0
      _s = s;
      _b = b;
    466e:	strb.w	r6, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4672:	movs	r6, #190	; 0xbe
    4674:	str.w	r1, [r5, #1536]	; 0x600
    4678:	str.w	r6, [r5, #1520]	; 0x5f0
      _s = s;
      _b = b;
    467c:	mvn.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4680:	strb.w	r1, [r5, #1540]	; 0x604
      _b = b;
    4684:	strb.w	r6, [r5, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4688:	movs	r6, #188	; 0xbc
      _s = s;
      _b = b;
    468a:	strb.w	r1, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    468e:	movs	r1, #0
    4690:	str.w	r6, [r5, #1568]	; 0x620
      _s = s;
    4694:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4698:	str.w	r1, [r5, #1544]	; 0x608
      _s = s;
    469c:	strb.w	r6, [r5, #1580]	; 0x62c
      _b = b;
    46a0:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46a4:	strb.w	r1, [r5, #1548]	; 0x60c
      _b = b;
    46a8:	strb.w	r6, [r5, #1501]	; 0x5dd
    46ac:	mvn.w	r6, #95	; 0x5f
    46b0:	strb.w	r1, [r5, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46b4:	movs	r1, #0
      _s = s;
      _b = b;
    46b6:	strb.w	r6, [r5, #1509]	; 0x5e5
    46ba:	mov.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46be:	str.w	r1, [r5, #1552]	; 0x610
      _s = s;
      _b = b;
    46c2:	strb.w	r6, [r5, #1525]	; 0x5f5
    46c6:	mvn.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46ca:	strb.w	r1, [r5, #1556]	; 0x614
      _b = b;
    46ce:	strb.w	r6, [r5, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46d2:	movs	r6, #216	; 0xd8
      _s = s;
      _b = b;
    46d4:	strb.w	r1, [r5, #1557]	; 0x615
    46d8:	mvn.w	r1, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46dc:	str.w	r3, [r5, #1560]	; 0x618
      _s = s;
    46e0:	strb.w	lr, [r5, #1564]	; 0x61c
    46e4:	strb.w	lr, [r5, #1572]	; 0x624
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46e8:	str.w	r6, [r5, #1576]	; 0x628
      _s = s;
      _b = b;
    46ec:	mvn.w	r6, #114	; 0x72
    46f0:	strb.w	r1, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46f4:	mov.w	r1, #4294967295
      _b = b;
    46f8:	strb.w	r6, [r5, #1581]	; 0x62d
    46fc:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4700:	strb.w	lr, [r5, #1588]	; 0x634
      _b = b;
    4704:	strb.w	r6, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4708:	mvn.w	r6, #19
    470c:	strb.w	r1, [r5, #1628]	; 0x65c
    4710:	strb.w	r6, [r5, #1596]	; 0x63c
      _b = b;
    4714:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4718:	strb.w	r1, [r5, #1636]	; 0x664
      _b = b;
    471c:	strb.w	r6, [r5, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4720:	movs	r6, #182	; 0xb6
      _s = s;
    4722:	strb.w	lr, [r5, #1668]	; 0x684
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4726:	str.w	r6, [r5, #1600]	; 0x640
      _s = s;
    472a:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    472e:	str.w	fp, [r5, #1584]	; 0x630
      _s = s;
    4732:	strb.w	r6, [r5, #1604]	; 0x644
      _b = b;
    4736:	mvn.w	r6, #102	; 0x66
    473a:	strb.w	r6, [r5, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    473e:	movs	r6, #245	; 0xf5
    4740:	str.w	r6, [r5, #1608]	; 0x648
      _s = s;
    4744:	mov.w	r6, #45	; 0x2d
    4748:	strb.w	r6, [r5, #1612]	; 0x64c
      _b = b;
    474c:	mvn.w	r6, #40	; 0x28
    4750:	strb.w	r6, [r5, #1621]	; 0x655
    4754:	mvn.w	r6, #7
    4758:	strb.w	r6, [r5, #1629]	; 0x65d
    475c:	mvn.w	r6, #4
    4760:	strb.w	r6, [r5, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4764:	mvn.w	r6, #120	; 0x78
    4768:	strb.w	r6, [r5, #1644]	; 0x66c
      _b = b;
    476c:	mvn.w	r6, #71	; 0x47
    4770:	strb.w	r6, [r5, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4774:	mvn.w	r6, #95	; 0x5f
    4778:	strb.w	r6, [r5, #1652]	; 0x674
      _b = b;
    477c:	mvn.w	r6, #63	; 0x3f
    4780:	strb.w	r6, [r5, #1653]	; 0x675
    4784:	mvn.w	r6, #75	; 0x4b
    4788:	strb.w	r6, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    478c:	movs	r6, #178	; 0xb2
    478e:	str.w	r6, [r5, #1664]	; 0x680
    4792:	movw	r6, #271	; 0x10f
    4796:	str.w	r6, [r5, #1592]	; 0x638
    479a:	mov.w	r6, #318	; 0x13e
    479e:	str.w	r6, [r5, #1616]	; 0x650
      _s = s;
    47a2:	mov.w	r6, #118	; 0x76
    47a6:	strb.w	r6, [r5, #1620]	; 0x654
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47aa:	mov.w	r6, #314	; 0x13a
    47ae:	str.w	r6, [r5, #1624]	; 0x658
    47b2:	mov.w	r6, #322	; 0x142
    47b6:	str.w	r6, [r5, #1632]	; 0x660
    47ba:	movw	r6, #303	; 0x12f
    47be:	str.w	r6, [r5, #1640]	; 0x668
    47c2:	movw	r6, #305	; 0x131
    47c6:	str.w	r6, [r5, #1648]	; 0x670
    47ca:	movw	r6, #301	; 0x12d
    47ce:	str.w	r6, [r5, #1656]	; 0x678
      _s = s;
    47d2:	mvn.w	r6, #125	; 0x7d
    47d6:	strb.w	r6, [r5, #1660]	; 0x67c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47da:	movs	r6, #182	; 0xb6
      _s = s;
    47dc:	strb.w	r1, [r5, #1708]	; 0x6ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47e0:	movs	r1, #0
    47e2:	str.w	r6, [r5, #1672]	; 0x688
      _s = s;
    47e6:	mvn.w	r6, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47ea:	str.w	r1, [r5, #1720]	; 0x6b8
      _s = s;
    47ee:	strb.w	r6, [r5, #1676]	; 0x68c
      _b = b;
    47f2:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    47f6:	strb.w	r1, [r5, #1724]	; 0x6bc
      _b = b;
    47fa:	strb.w	r6, [r5, #1677]	; 0x68d
    47fe:	mvn.w	r6, #107	; 0x6b
    4802:	strb.w	r1, [r5, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4806:	movs	r1, #0
      _s = s;
      _b = b;
    4808:	strb.w	r6, [r5, #1685]	; 0x695
    480c:	mvn.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4810:	str.w	r1, [r5, #1728]	; 0x6c0
      _s = s;
      _b = b;
    4814:	strb.w	r6, [r5, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4818:	movs	r6, #196	; 0xc4
      _s = s;
    481a:	strb.w	r1, [r5, #1732]	; 0x6c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    481e:	str.w	r6, [r5, #1704]	; 0x6a8
      _s = s;
      _b = b;
    4822:	mov.w	r6, #119	; 0x77
    4826:	strb.w	r1, [r5, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    482a:	movs	r1, #0
      _s = s;
      _b = b;
    482c:	strb.w	r6, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4830:	mov.w	r6, #356	; 0x164
    4834:	str.w	r1, [r5, #1736]	; 0x6c8
    4838:	str.w	r6, [r5, #1712]	; 0x6b0
      _s = s;
      _b = b;
    483c:	mov.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4840:	strb.w	r1, [r5, #1740]	; 0x6cc
      _b = b;
    4844:	strb.w	r6, [r5, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4848:	movs	r6, #193	; 0xc1
      _s = s;
      _b = b;
    484a:	strb.w	r1, [r5, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    484e:	movs	r1, #0
    4850:	str.w	r6, [r5, #1752]	; 0x6d8
      _s = s;
      _b = b;
    4854:	mvn.w	r6, #104	; 0x68
    4858:	strb.w	r2, [r5, #1669]	; 0x685
    485c:	strb.w	r6, [r5, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4860:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4864:	str.w	r2, [r5, #1680]	; 0x690
      _s = s;
    4868:	strb.w	lr, [r5, #1684]	; 0x694
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    486c:	str.w	r2, [r5, #1688]	; 0x698
      _s = s;
    4870:	strb.w	lr, [r5, #1692]	; 0x69c
    4874:	strb.w	lr, [r5, #1700]	; 0x6a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4878:	str.w	r1, [r5, #1744]	; 0x6d0
      _s = s;
    487c:	strb.w	r1, [r5, #1748]	; 0x6d4
      _b = b;
    4880:	strb.w	r1, [r5, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4884:	movs	r1, #191	; 0xbf
      _s = s;
    4886:	strb.w	lr, [r5, #1756]	; 0x6dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    488a:	str.w	r9, [r5, #1696]	; 0x6a0
      _s = s;
    488e:	strb.w	r6, [r5, #1716]	; 0x6b4
      _b = b;
    4892:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4896:	str.w	r1, [r5, #1760]	; 0x6e0
      _s = s;
    489a:	mvn.w	r1, #64	; 0x40
      _b = b;
    489e:	strb.w	r6, [r5, #1757]	; 0x6dd
    48a2:	mvn.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48a6:	strb.w	lr, [r5, #1764]	; 0x6e4
      _b = b;
    48aa:	strb.w	r6, [r5, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48ae:	mvn.w	r6, #3
      _b = b;
    48b2:	strb.w	ip, [r5, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48b6:	strb.w	r6, [r5, #1772]	; 0x6ec
    48ba:	mvn.w	r6, #72	; 0x48
    48be:	strb.w	r1, [r5, #1844]	; 0x734
    48c2:	mov.w	r1, #4294967295
    48c6:	strb.w	r6, [r5, #1780]	; 0x6f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48ca:	movs	r6, #190	; 0xbe
    48cc:	str.w	sl, [r5, #1768]	; 0x6e8
    48d0:	str.w	r6, [r5, #1784]	; 0x6f8
      _s = s;
    48d4:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48d8:	str.w	r9, [r5, #1776]	; 0x6f0
      _s = s;
    48dc:	strb.w	r6, [r5, #1788]	; 0x6fc
      _b = b;
    48e0:	mvn.w	r6, #122	; 0x7a
    48e4:	strb.w	r9, [r5, #1781]	; 0x6f5
    48e8:	strb.w	r6, [r5, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48ec:	movs	r6, #232	; 0xe8
      _s = s;
      _b = b;
    48ee:	strb.w	sl, [r5, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48f2:	str.w	r6, [r5, #1792]	; 0x700
      _s = s;
    48f6:	mov.w	r6, #69	; 0x45
    48fa:	strb.w	r6, [r5, #1796]	; 0x704
      _b = b;
    48fe:	mvn.w	r6, #91	; 0x5b
    4902:	strb.w	r6, [r5, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4906:	mov.w	r6, #111	; 0x6f
    490a:	strb.w	r6, [r5, #1804]	; 0x70c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    490e:	mov.w	r6, #318	; 0x13e
    4912:	str.w	r6, [r5, #1808]	; 0x710
      _s = s;
    4916:	mov.w	r6, #92	; 0x5c
    491a:	strb.w	r6, [r5, #1812]	; 0x714
      _b = b;
    491e:	mvn.w	r6, #40	; 0x28
    4922:	strb.w	r6, [r5, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4926:	mvn.w	r6, #87	; 0x57
    492a:	strb.w	r6, [r5, #1820]	; 0x71c
      _b = b;
    492e:	mvn.w	r6, #32
    4932:	strb.w	r6, [r5, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4936:	mov.w	r6, #332	; 0x14c
    493a:	str.w	r6, [r5, #1824]	; 0x720
      _s = s;
    493e:	mvn.w	r6, #107	; 0x6b
    4942:	strb.w	r6, [r5, #1828]	; 0x724
      _b = b;
    4946:	mvn.w	r6, #45	; 0x2d
    494a:	strb.w	r6, [r5, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    494e:	mov.w	r6, #312	; 0x138
    4952:	str.w	r6, [r5, #1840]	; 0x730
      _s = s;
      _b = b;
    4956:	mov.w	r6, #112	; 0x70
    495a:	strb.w	r6, [r5, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    495e:	movw	r6, #311	; 0x137
    4962:	str.w	r6, [r5, #1800]	; 0x708
    4966:	mov.w	r6, #324	; 0x144
    496a:	str.w	r6, [r5, #1816]	; 0x718
    496e:	mov.w	r6, #310	; 0x136
    4972:	str.w	r6, [r5, #1832]	; 0x728
      _s = s;
    4976:	mvn.w	r6, #103	; 0x67
    497a:	strb.w	r6, [r5, #1836]	; 0x72c
      _b = b;
    497e:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4982:	strb.w	r1, [r5, #1868]	; 0x74c
      _b = b;
    4986:	strb.w	r6, [r5, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    498a:	mvn.w	r6, #111	; 0x6f
    498e:	strb.w	r1, [r5, #1884]	; 0x75c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4992:	movs	r1, #191	; 0xbf
      _s = s;
    4994:	strb.w	r6, [r5, #1852]	; 0x73c
      _b = b;
    4998:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    499c:	str.w	r1, [r5, #1888]	; 0x760
      _s = s;
    49a0:	mov.w	r1, #4294967295
      _b = b;
    49a4:	strb.w	r6, [r5, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49a8:	movs	r6, #184	; 0xb8
      _s = s;
    49aa:	strb.w	r1, [r5, #1908]	; 0x774
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49ae:	movs	r1, #0
    49b0:	str.w	r6, [r5, #1856]	; 0x740
      _s = s;
      _b = b;
    49b4:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49b8:	str.w	r1, [r5, #1920]	; 0x780
      _s = s;
      _b = b;
    49bc:	strb.w	r6, [r5, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49c0:	movs	r6, #188	; 0xbc
      _s = s;
    49c2:	strb.w	r1, [r5, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49c6:	str.w	r6, [r5, #1864]	; 0x748
      _s = s;
      _b = b;
    49ca:	mvn.w	r6, #111	; 0x6f
    49ce:	strb.w	r1, [r5, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49d2:	movs	r1, #0
      _s = s;
      _b = b;
    49d4:	strb.w	r6, [r5, #1877]	; 0x755
    49d8:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49dc:	strb.w	lr, [r5, #1860]	; 0x744
      _b = b;
    49e0:	strb.w	r6, [r5, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49e4:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49e8:	str.w	r3, [r5, #1872]	; 0x750
      _s = s;
    49ec:	strb.w	r6, [r5, #1892]	; 0x764
      _b = b;
    49f0:	mov.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49f4:	strb.w	lr, [r5, #1876]	; 0x754
      _b = b;
    49f8:	strb.w	r6, [r5, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49fc:	mov.w	r6, #332	; 0x14c
    4a00:	str.w	r3, [r5, #1880]	; 0x758
    4a04:	str.w	r6, [r5, #1896]	; 0x768
      _s = s;
      _b = b;
    4a08:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a0c:	str.w	r7, [r5, #1904]	; 0x770
      _s = s;
      _b = b;
    4a10:	strb.w	r6, [r5, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a14:	mov.w	r6, #356	; 0x164
    4a18:	str.w	r1, [r5, #1928]	; 0x788
    4a1c:	str.w	r6, [r5, #1912]	; 0x778
    4a20:	movw	r6, #317	; 0x13d
      _s = s;
    4a24:	strb.w	r1, [r5, #1932]	; 0x78c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a28:	str.w	r6, [r5, #1848]	; 0x738
      _s = s;
      _b = b;
    4a2c:	mov.w	r6, #127	; 0x7f
    4a30:	strb.w	r8, [r5, #1909]	; 0x775
    4a34:	strb.w	r6, [r5, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a38:	mov.w	r6, #120	; 0x78
    4a3c:	strb.w	r6, [r5, #1900]	; 0x76c
    4a40:	mvn.w	r6, #5
    4a44:	strb.w	r6, [r5, #1916]	; 0x77c
      _b = b;
    4a48:	mov.w	r6, #123	; 0x7b
    4a4c:	strb.w	r6, [r5, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a50:	movs	r6, #183	; 0xb7
      _s = s;
      _b = b;
    4a52:	strb.w	r1, [r5, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a56:	movs	r1, #0
    4a58:	str.w	r6, [r5, #1944]	; 0x798
      _s = s;
    4a5c:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a60:	str.w	r1, [r5, #1936]	; 0x790
      _s = s;
    4a64:	strb.w	r6, [r5, #1948]	; 0x79c
      _b = b;
    4a68:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a6c:	strb.w	r1, [r5, #1940]	; 0x794
      _b = b;
    4a70:	strb.w	r6, [r5, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a74:	movs	r6, #184	; 0xb8
      _s = s;
      _b = b;
    4a76:	strb.w	r1, [r5, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a7a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a7e:	str.w	r6, [r5, #1952]	; 0x7a0
      _s = s;
    4a82:	mvn.w	r6, #40	; 0x28
    4a86:	strb.w	r1, [r5, #1996]	; 0x7cc
    4a8a:	strb.w	r6, [r5, #1956]	; 0x7a4
      _b = b;
    4a8e:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a92:	strb.w	r1, [r5, #2004]	; 0x7d4
      _b = b;
    4a96:	strb.w	r6, [r5, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a9a:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a9e:	str.w	sl, [r5, #1960]	; 0x7a8
      _s = s;
    4aa2:	strb.w	r6, [r5, #1964]	; 0x7ac
      _b = b;
    4aa6:	mvn.w	r6, #87	; 0x57
    4aaa:	strb.w	r6, [r5, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4aae:	movw	r6, #257	; 0x101
    4ab2:	str.w	r6, [r5, #1968]	; 0x7b0
      _s = s;
    4ab6:	mvn.w	r6, #126	; 0x7e
    4aba:	strb.w	r6, [r5, #1972]	; 0x7b4
      _b = b;
    4abe:	mvn.w	r6, #91	; 0x5b
    4ac2:	strb.w	r6, [r5, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ac6:	mov.w	r6, #64	; 0x40
    4aca:	strb.w	r6, [r5, #1980]	; 0x7bc
      _b = b;
    4ace:	mvn.w	r6, #65	; 0x41
    4ad2:	strb.w	r6, [r5, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ad6:	movw	r6, #303	; 0x12f
    4ada:	str.w	r6, [r5, #1984]	; 0x7c0
      _s = s;
    4ade:	mov.w	r6, #47	; 0x2f
    4ae2:	strb.w	r6, [r5, #1988]	; 0x7c4
      _b = b;
    4ae6:	mvn.w	r6, #63	; 0x3f
    4aea:	strb.w	r6, [r5, #1989]	; 0x7c5
    4aee:	mvn.w	r6, #6
    4af2:	strb.w	r6, [r5, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4af6:	mov.w	r6, #316	; 0x13c
    4afa:	str.w	r6, [r5, #2008]	; 0x7d8
      _s = s;
    4afe:	mov.w	r6, #114	; 0x72
    4b02:	strb.w	r6, [r5, #2012]	; 0x7dc
      _b = b;
    4b06:	mvn.w	r6, #36	; 0x24
    4b0a:	strb.w	r6, [r5, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b0e:	mov.w	r6, #110	; 0x6e
    4b12:	strb.w	r6, [r5, #2020]	; 0x7e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b16:	movw	r6, #267	; 0x10b
    4b1a:	str.w	r6, [r5, #1976]	; 0x7b8
    4b1e:	movw	r6, #329	; 0x149
    4b22:	str.w	r6, [r5, #1992]	; 0x7c8
    4b26:	movw	r6, #325	; 0x145
    4b2a:	str.w	r6, [r5, #2000]	; 0x7d0
      _s = s;
      _b = b;
    4b2e:	mvn.w	r6, #1
    4b32:	strb.w	r6, [r5, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b36:	mov.w	r6, #304	; 0x130
    4b3a:	str.w	r6, [r5, #2016]	; 0x7e0
      _s = s;
      _b = b;
    4b3e:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b42:	strb.w	r1, [r5, #2028]	; 0x7ec
      _b = b;
    4b46:	strb.w	r6, [r5, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b4a:	movw	r6, #313	; 0x139
      _s = s;
    4b4e:	strb.w	lr, [r5, #2044]	; 0x7fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b52:	str.w	r6, [r5, #2024]	; 0x7e8
      _s = s;
      _b = b;
    4b56:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b5a:	str.w	r2, [r5, #2048]	; 0x800
      _s = s;
      _b = b;
    4b5e:	strb.w	r6, [r5, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b62:	mvn.w	r6, #57	; 0x39
    4b66:	strb.w	r1, [r5, #2052]	; 0x804
    4b6a:	strb.w	r6, [r5, #2036]	; 0x7f4
      _b = b;
    4b6e:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b72:	strb.w	lr, [r5, #2060]	; 0x80c
      _b = b;
    4b76:	strb.w	r6, [r5, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b7a:	movw	r6, #317	; 0x13d
      _s = s;
    4b7e:	strb.w	r1, [r5, #2100]	; 0x834
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b82:	movs	r1, #0
    4b84:	str.w	r6, [r5, #2040]	; 0x7f8
      _s = s;
      _b = b;
    4b88:	mvn.w	r6, #46	; 0x2e
    4b8c:	strb.w	sl, [r5, #2093]	; 0x82d
    4b90:	strb.w	r6, [r5, #2045]	; 0x7fd
    4b94:	mvn.w	r6, #111	; 0x6f
    4b98:	strb.w	r6, [r5, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b9c:	movs	r6, #181	; 0xb5
    4b9e:	str.w	r6, [r5, #2056]	; 0x808
      _s = s;
      _b = b;
    4ba2:	mvn.w	r6, #99	; 0x63
    4ba6:	strb.w	r6, [r5, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4baa:	movs	r6, #177	; 0xb1
    4bac:	str.w	r6, [r5, #2064]	; 0x810
      _s = s;
    4bb0:	mvn.w	r6, #30
    4bb4:	strb.w	r6, [r5, #2068]	; 0x814
      _b = b;
    4bb8:	mvn.w	r6, #92	; 0x5c
    4bbc:	strb.w	r6, [r5, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bc0:	movs	r6, #188	; 0xbc
    4bc2:	str.w	r6, [r5, #2072]	; 0x818
      _s = s;
    4bc6:	mvn.w	r6, #122	; 0x7a
    4bca:	strb.w	r6, [r5, #2076]	; 0x81c
      _b = b;
    4bce:	mvn.w	r6, #83	; 0x53
    4bd2:	strb.w	r6, [r5, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4bd6:	mvn.w	r6, #40	; 0x28
    4bda:	strb.w	r6, [r5, #2084]	; 0x824
      _b = b;
    4bde:	mvn.w	r6, #47	; 0x2f
    4be2:	strb.w	r6, [r5, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4be6:	mov.w	r6, #316	; 0x13c
    4bea:	str.w	r6, [r5, #2088]	; 0x828
      _s = s;
    4bee:	mvn.w	r6, #48	; 0x30
    4bf2:	strb.w	r6, [r5, #2092]	; 0x82c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bf6:	mov.w	r6, #332	; 0x14c
    4bfa:	str.w	r6, [r5, #2096]	; 0x830
      _s = s;
      _b = b;
    4bfe:	mvn.w	r6, #81	; 0x51
    4c02:	strb.w	r6, [r5, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c06:	movw	r6, #311	; 0x137
    4c0a:	str.w	r6, [r5, #2104]	; 0x838
      _s = s;
    4c0e:	mov.w	r6, #96	; 0x60
    4c12:	strb.w	r6, [r5, #2108]	; 0x83c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c16:	movw	r6, #319	; 0x13f
    4c1a:	str.w	r6, [r5, #2032]	; 0x7f0
    4c1e:	str.w	r6, [r5, #2080]	; 0x820
      _s = s;
      _b = b;
    4c22:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c26:	str.w	r1, [r5, #2112]	; 0x840
      _s = s;
      _b = b;
    4c2a:	strb.w	r6, [r5, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c2e:	movs	r6, #183	; 0xb7
      _s = s;
    4c30:	strb.w	r1, [r5, #2116]	; 0x844
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c34:	str.w	r6, [r5, #2128]	; 0x850
      _s = s;
      _b = b;
    4c38:	mvn.w	r6, #67	; 0x43
    4c3c:	strb.w	r1, [r5, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c40:	movs	r1, #0
      _s = s;
      _b = b;
    4c42:	strb.w	r6, [r5, #2141]	; 0x85d
    4c46:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c4a:	str.w	r1, [r5, #2120]	; 0x848
      _s = s;
      _b = b;
    4c4e:	strb.w	r6, [r5, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c52:	movs	r6, #205	; 0xcd
      _s = s;
    4c54:	strb.w	r1, [r5, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c58:	str.w	r6, [r5, #2152]	; 0x868
      _s = s;
    4c5c:	mov.w	r6, #122	; 0x7a
      _b = b;
    4c60:	strb.w	r1, [r5, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c64:	mov.w	r1, #4294967295
    4c68:	strb.w	r6, [r5, #2156]	; 0x86c
      _b = b;
    4c6c:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c70:	strb.w	r1, [r5, #2132]	; 0x854
      _b = b;
    4c74:	strb.w	r6, [r5, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c78:	movw	r6, #317	; 0x13d
      _s = s;
    4c7c:	strb.w	r1, [r5, #2140]	; 0x85c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c80:	str.w	r6, [r5, #2160]	; 0x870
      _s = s;
    4c84:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c88:	str.w	r2, [r5, #2144]	; 0x860
      _s = s;
    4c8c:	strb.w	r6, [r5, #2164]	; 0x874
      _b = b;
    4c90:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c94:	strb.w	lr, [r5, #2148]	; 0x864
      _b = b;
    4c98:	strb.w	r6, [r5, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c9c:	movw	r6, #321	; 0x141
      _s = s;
    4ca0:	strb.w	r1, [r5, #2188]	; 0x88c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ca4:	str.w	r6, [r5, #2168]	; 0x878
      _s = s;
    4ca8:	mvn.w	r6, #105	; 0x69
    4cac:	strb.w	r1, [r5, #2196]	; 0x894
    4cb0:	strb.w	r6, [r5, #2172]	; 0x87c
      _b = b;
    4cb4:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cb8:	str.w	r9, [r5, #2136]	; 0x858
      _s = s;
      _b = b;
    4cbc:	strb.w	r6, [r5, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cc0:	movw	r6, #317	; 0x13d
    4cc4:	str.w	r6, [r5, #2176]	; 0x880
      _s = s;
      _b = b;
    4cc8:	mvn.w	r6, #45	; 0x2d
    4ccc:	strb.w	r6, [r5, #2181]	; 0x885
    4cd0:	mvn.w	r6, #48	; 0x30
    4cd4:	strb.w	r6, [r5, #2189]	; 0x88d
    4cd8:	mov.w	r6, #78	; 0x4e
    4cdc:	strb.w	r6, [r5, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ce0:	mov.w	r6, #102	; 0x66
    4ce4:	strb.w	r6, [r5, #2180]	; 0x884
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ce8:	movw	r6, #333	; 0x14d
    4cec:	str.w	r6, [r5, #2184]	; 0x888
    4cf0:	mov.w	r6, #342	; 0x156
    4cf4:	str.w	r6, [r5, #2192]	; 0x890
      _s = s;
      _b = b;
    4cf8:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4cfc:	strb.w	r1, [r5, #2228]	; 0x8b4
      _b = b;
    4d00:	strb.w	r6, [r5, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d04:	movw	r6, #323	; 0x143
      _s = s;
    4d08:	strb.w	r1, [r5, #2236]	; 0x8bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d0c:	movs	r1, #191	; 0xbf
    4d0e:	str.w	r6, [r5, #2200]	; 0x898
      _s = s;
    4d12:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d16:	str.w	r1, [r5, #2248]	; 0x8c8
    4d1a:	movs	r1, #0
      _s = s;
    4d1c:	strb.w	r6, [r5, #2204]	; 0x89c
      _b = b;
    4d20:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4d24:	strb.w	lr, [r5, #2252]	; 0x8cc
      _b = b;
    4d28:	strb.w	r6, [r5, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d2c:	mov.w	r6, #308	; 0x134
      _s = s;
      _b = b;
    4d30:	strb.w	fp, [r5, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d34:	str.w	r6, [r5, #2208]	; 0x8a0
      _s = s;
      _b = b;
    4d38:	mvn.w	r6, #79	; 0x4f
    4d3c:	strb.w	r8, [r5, #2277]	; 0x8e5
    4d40:	strb.w	r6, [r5, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d44:	movw	r6, #323	; 0x143
    4d48:	str.w	r6, [r5, #2216]	; 0x8a8
      _s = s;
    4d4c:	mvn.w	r6, #88	; 0x58
    4d50:	strb.w	r6, [r5, #2220]	; 0x8ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d54:	movw	r6, #325	; 0x145
    4d58:	str.w	r6, [r5, #2224]	; 0x8b0
      _s = s;
      _b = b;
    4d5c:	mvn.w	r6, #13
    4d60:	strb.w	r6, [r5, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d64:	mov.w	r6, #324	; 0x144
    4d68:	str.w	r6, [r5, #2232]	; 0x8b8
      _s = s;
      _b = b;
    4d6c:	mvn.w	r6, #30
    4d70:	strb.w	r6, [r5, #2237]	; 0x8bd
    4d74:	mvn.w	r6, #106	; 0x6a
    4d78:	strb.w	r6, [r5, #2245]	; 0x8c5
    4d7c:	mvn.w	r6, #117	; 0x75
    4d80:	strb.w	r6, [r5, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d84:	movs	r6, #175	; 0xaf
    4d86:	str.w	r6, [r5, #2256]	; 0x8d0
      _s = s;
    4d8a:	mvn.w	r6, #49	; 0x31
    4d8e:	strb.w	r6, [r5, #2260]	; 0x8d4
      _b = b;
    4d92:	mvn.w	r6, #67	; 0x43
    4d96:	strb.w	r6, [r5, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d9a:	movw	r6, #305	; 0x131
    4d9e:	str.w	r6, [r5, #2264]	; 0x8d8
      _s = s;
      _b = b;
    4da2:	mvn.w	r6, #63	; 0x3f
    4da6:	strb.w	r6, [r5, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4daa:	movw	r6, #311	; 0x137
    4dae:	str.w	r6, [r5, #2272]	; 0x8e0
      _s = s;
    4db2:	mvn.w	r6, #35	; 0x23
    4db6:	strb.w	r6, [r5, #2276]	; 0x8e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4dba:	mov.w	r6, #310	; 0x136
    4dbe:	str.w	r6, [r5, #2280]	; 0x8e8
      _s = s;
    4dc2:	mvn.w	r6, #31
    4dc6:	strb.w	r6, [r5, #2284]	; 0x8ec
    4dca:	mvn.w	r6, #109	; 0x6d
    4dce:	strb.w	r6, [r5, #2212]	; 0x8a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4dd2:	mov.w	r6, #260	; 0x104
    4dd6:	str.w	r6, [r5, #2240]	; 0x8c0
      _s = s;
    4dda:	mvn.w	r6, #28
    4dde:	strb.w	r6, [r5, #2244]	; 0x8c4
    4de2:	mvn.w	r6, #96	; 0x60
    4de6:	strb.w	r6, [r5, #2268]	; 0x8dc
      _b = b;
    4dea:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4dee:	str.w	r1, [r5, #2304]	; 0x900
      _s = s;
      _b = b;
    4df2:	strb.w	r6, [r5, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4df6:	movw	r6, #305	; 0x131
      _s = s;
    4dfa:	strb.w	r1, [r5, #2308]	; 0x904
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4dfe:	str.w	r6, [r5, #2288]	; 0x8f0
      _s = s;
    4e02:	mvn.w	r6, #81	; 0x51
      _b = b;
    4e06:	strb.w	r1, [r5, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e0a:	movs	r1, #0
      _s = s;
    4e0c:	strb.w	r6, [r5, #2292]	; 0x8f4
      _b = b;
    4e10:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e14:	str.w	r1, [r5, #2312]	; 0x908
      _s = s;
      _b = b;
    4e18:	strb.w	r6, [r5, #2293]	; 0x8f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e1c:	mvn.w	r6, #111	; 0x6f
    4e20:	strb.w	r1, [r5, #2316]	; 0x90c
    4e24:	strb.w	r6, [r5, #2300]	; 0x8fc
      _b = b;
    4e28:	mvn.w	r6, #101	; 0x65
    4e2c:	strb.w	r1, [r5, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e30:	mov.w	r1, #4294967295
      _b = b;
    4e34:	strb.w	r6, [r5, #2301]	; 0x8fd
    4e38:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e3c:	strb.w	r1, [r5, #2324]	; 0x914
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e40:	movs	r1, #191	; 0xbf
      _s = s;
      _b = b;
    4e42:	strb.w	r6, [r5, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e46:	movs	r6, #190	; 0xbe
    4e48:	str.w	r1, [r5, #2336]	; 0x920
      _s = s;
    4e4c:	mvn.w	r1, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e50:	str.w	r6, [r5, #2328]	; 0x918
      _s = s;
      _b = b;
    4e54:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e58:	strb.w	r1, [r5, #2348]	; 0x92c
    4e5c:	mov.w	r1, #4294967295
      _b = b;
    4e60:	strb.w	r6, [r5, #2333]	; 0x91d
    4e64:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e68:	strb.w	lr, [r5, #2332]	; 0x91c
      _b = b;
    4e6c:	strb.w	r6, [r5, #2341]	; 0x925
    4e70:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e74:	strb.w	lr, [r5, #2340]	; 0x924
      _b = b;
    4e78:	strb.w	r6, [r5, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e7c:	mvn.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e80:	str.w	r2, [r5, #2344]	; 0x928
      _s = s;
    4e84:	strb.w	r6, [r5, #2356]	; 0x934
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e88:	movw	r6, #317	; 0x13d
      _s = s;
      _b = b;
    4e8c:	strb.w	r2, [r5, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e90:	str.w	r6, [r5, #2360]	; 0x938
      _s = s;
      _b = b;
    4e94:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e98:	strb.w	r1, [r5, #2364]	; 0x93c
      _b = b;
    4e9c:	strb.w	r6, [r5, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ea0:	mov.w	r6, #314	; 0x13a
    4ea4:	str.w	r9, [r5, #2320]	; 0x910
    4ea8:	str.w	r6, [r5, #2368]	; 0x940
      _s = s;
    4eac:	mov.w	r6, #123	; 0x7b
    4eb0:	strb.w	r6, [r5, #2372]	; 0x944
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4eb4:	mov.w	r6, #262	; 0x106
    4eb8:	str.w	r6, [r5, #2296]	; 0x8f8
    4ebc:	movw	r6, #307	; 0x133
    4ec0:	str.w	r6, [r5, #2352]	; 0x930
      _s = s;
      _b = b;
    4ec4:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ec8:	strb.w	r1, [r5, #2428]	; 0x97c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ecc:	movs	r1, #0
      _s = s;
      _b = b;
    4ece:	strb.w	r6, [r5, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ed2:	movw	r6, #319	; 0x13f
      _s = s;
    4ed6:	strb.w	lr, [r5, #2444]	; 0x98c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4eda:	str.w	r6, [r5, #2376]	; 0x948
      _s = s;
    4ede:	mov.w	r6, #85	; 0x55
    4ee2:	strb.w	fp, [r5, #2388]	; 0x954
    4ee6:	strb.w	r6, [r5, #2380]	; 0x94c
      _b = b;
    4eea:	mvn.w	r6, #72	; 0x48
    4eee:	strb.w	r6, [r5, #2381]	; 0x94d
    4ef2:	mvn.w	r6, #71	; 0x47
    4ef6:	strb.w	r6, [r5, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4efa:	mvn.w	r6, #48	; 0x30
    4efe:	strb.w	r6, [r5, #2396]	; 0x95c
      _b = b;
    4f02:	mvn.w	r6, #122	; 0x7a
    4f06:	strb.w	r6, [r5, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f0a:	mvn.w	r6, #78	; 0x4e
    4f0e:	strb.w	r6, [r5, #2404]	; 0x964
      _b = b;
    4f12:	mvn.w	r6, #84	; 0x54
    4f16:	strb.w	r6, [r5, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f1a:	mov.w	r6, #332	; 0x14c
    4f1e:	str.w	r6, [r5, #2408]	; 0x968
      _s = s;
    4f22:	mvn.w	r6, #86	; 0x56
    4f26:	strb.w	r6, [r5, #2412]	; 0x96c
      _b = b;
    4f2a:	mvn.w	r6, #28
    4f2e:	strb.w	r6, [r5, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f32:	mov.w	r6, #117	; 0x75
    4f36:	strb.w	r6, [r5, #2420]	; 0x974
      _b = b;
    4f3a:	mvn.w	r6, #24
    4f3e:	strb.w	r6, [r5, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f42:	movw	r6, #323	; 0x143
    4f46:	str.w	r6, [r5, #2424]	; 0x978
      _s = s;
      _b = b;
    4f4a:	mvn.w	r6, #28
    4f4e:	strb.w	r6, [r5, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f52:	mvn.w	r6, #27
    4f56:	strb.w	r6, [r5, #2436]	; 0x984
      _b = b;
    4f5a:	mov.w	r6, #96	; 0x60
    4f5e:	strb.w	r6, [r5, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f62:	movs	r6, #194	; 0xc2
    4f64:	str.w	r6, [r5, #2440]	; 0x988
    4f68:	movs	r6, #214	; 0xd6
    4f6a:	str.w	r6, [r5, #2448]	; 0x990
      _s = s;
      _b = b;
    4f6e:	mov.w	r6, #110	; 0x6e
    4f72:	strb.w	r6, [r5, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f76:	mov.w	r6, #318	; 0x13e
    4f7a:	str.w	r6, [r5, #2456]	; 0x998
      _s = s;
    4f7e:	mvn.w	r6, #3
    4f82:	strb.w	r6, [r5, #2460]	; 0x99c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f86:	mov.w	r6, #346	; 0x15a
    4f8a:	str.w	r6, [r5, #2384]	; 0x950
    4f8e:	mov.w	r6, #326	; 0x146
    4f92:	str.w	r6, [r5, #2392]	; 0x958
    4f96:	movw	r6, #327	; 0x147
    4f9a:	str.w	r6, [r5, #2400]	; 0x960
    4f9e:	movw	r6, #331	; 0x14b
    4fa2:	str.w	r6, [r5, #2416]	; 0x970
    4fa6:	mov.w	r6, #284	; 0x11c
    4faa:	str.w	r6, [r5, #2432]	; 0x980
      _s = s;
      _b = b;
    4fae:	mvn.w	r6, #118	; 0x76
    4fb2:	strb.w	r6, [r5, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4fb6:	mov.w	r6, #48	; 0x30
    4fba:	strb.w	r6, [r5, #2452]	; 0x994
      _b = b;
    4fbe:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fc2:	str.w	r1, [r5, #2496]	; 0x9c0
      _s = s;
      _b = b;
    4fc6:	strb.w	r6, [r5, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4fca:	mvn.w	r6, #35	; 0x23
    4fce:	strb.w	r1, [r5, #2500]	; 0x9c4
    4fd2:	strb.w	r6, [r5, #2468]	; 0x9a4
      _b = b;
    4fd6:	mvn.w	r6, #109	; 0x6d
    4fda:	strb.w	r1, [r5, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fde:	movs	r1, #255	; 0xff
      _s = s;
      _b = b;
    4fe0:	strb.w	r6, [r5, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fe4:	mov.w	r6, #306	; 0x132
      _s = s;
      _b = b;
    4fe8:	strb.w	r3, [r5, #2517]	; 0x9d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fec:	str.w	r6, [r5, #2472]	; 0x9a8
      _s = s;
    4ff0:	mvn.w	r6, #36	; 0x24
    4ff4:	strb.w	lr, [r5, #2524]	; 0x9dc
    4ff8:	strb.w	r6, [r5, #2476]	; 0x9ac
      _b = b;
    4ffc:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5000:	str.w	r2, [r5, #2536]	; 0x9e8
      _s = s;
      _b = b;
    5004:	strb.w	r6, [r5, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5008:	movw	r6, #303	; 0x12f
    500c:	str.w	r1, [r5, #2544]	; 0x9f0
      _s = s;
    5010:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5014:	str.w	r6, [r5, #2480]	; 0x9b0
      _s = s;
    5018:	mvn.w	r6, #76	; 0x4c
    501c:	strb.w	sl, [r5, #2508]	; 0x9cc
    5020:	strb.w	r6, [r5, #2484]	; 0x9b4
      _b = b;
    5024:	mvn.w	r6, #57	; 0x39
    5028:	strb.w	r9, [r5, #2525]	; 0x9dd
    502c:	strb.w	r6, [r5, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5030:	movs	r6, #232	; 0xe8
    5032:	str.w	r9, [r5, #2528]	; 0x9e0
    5036:	str.w	r6, [r5, #2488]	; 0x9b8
      _s = s;
      _b = b;
    503a:	mov.w	r6, #105	; 0x69
    503e:	strb.w	r6, [r5, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5042:	movs	r6, #180	; 0xb4
    5044:	str.w	r6, [r5, #2504]	; 0x9c8
    5048:	movs	r6, #183	; 0xb7
    504a:	str.w	r6, [r5, #2512]	; 0x9d0
      _s = s;
    504e:	mvn.w	r6, #50	; 0x32
    5052:	strb.w	r6, [r5, #2516]	; 0x9d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5056:	movs	r6, #184	; 0xb8
    5058:	str.w	r6, [r5, #2520]	; 0x9d8
      _s = s;
    505c:	mvn.w	r6, #85	; 0x55
    5060:	strb.w	r6, [r5, #2532]	; 0x9e4
      _b = b;
    5064:	mvn.w	r6, #77	; 0x4d
    5068:	strb.w	r6, [r5, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    506c:	mvn.w	r6, #63	; 0x3f
    5070:	strb.w	r6, [r5, #2540]	; 0x9ec
      _b = b;
    5074:	mvn.w	r6, #91	; 0x5b
    5078:	strb.w	r6, [r5, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    507c:	mov.w	r6, #62	; 0x3e
    5080:	strb.w	r6, [r5, #2548]	; 0x9f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5084:	mov.w	r6, #286	; 0x11e
    5088:	str.w	r6, [r5, #2464]	; 0x9a0
      _s = s;
    508c:	mvn.w	r6, #15
    5090:	strb.w	r6, [r5, #2492]	; 0x9bc
      _b = b;
    5094:	mov.w	r6, #115	; 0x73
    5098:	strb.w	r6, [r5, #2509]	; 0x9cd
    509c:	mvn.w	r6, #67	; 0x43
    50a0:	strb.w	r9, [r5, #2557]	; 0x9fd
    50a4:	strb.w	r6, [r5, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50a8:	movw	r6, #295	; 0x127
      _s = s;
      _b = b;
    50ac:	strb.w	fp, [r5, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50b0:	str.w	r6, [r5, #2552]	; 0x9f8
      _s = s;
    50b4:	mov.w	r6, #108	; 0x6c
    50b8:	strb.w	r6, [r5, #2556]	; 0x9fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50bc:	mov.w	r6, #324	; 0x144
    50c0:	str.w	r6, [r5, #2560]	; 0xa00
      _s = s;
    50c4:	mvn.w	r6, #100	; 0x64
    50c8:	strb.w	r6, [r5, #2564]	; 0xa04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50cc:	movw	r6, #357	; 0x165
    50d0:	str.w	r6, [r5, #2568]	; 0xa08
      _s = s;
    50d4:	mvn.w	r6, #99	; 0x63
    50d8:	strb.w	r6, [r5, #2572]	; 0xa0c
    50dc:	mvn.w	r6, #112	; 0x70
    50e0:	strb.w	r6, [r5, #2580]	; 0xa14
    50e4:	mvn.w	r6, #120	; 0x78
    50e8:	strb.w	r6, [r5, #2588]	; 0xa1c
      _b = b;
    50ec:	mvn.w	r6, #53	; 0x35
    50f0:	strb.w	r6, [r5, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    50f4:	strb.w	r6, [r5, #2596]	; 0xa24
      _b = b;
    50f8:	mvn.w	r6, #81	; 0x51
    50fc:	strb.w	r6, [r5, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5100:	mov.w	r6, #324	; 0x144
    5104:	str.w	r6, [r5, #2600]	; 0xa28
      _s = s;
    5108:	mvn.w	r6, #56	; 0x38
    510c:	strb.w	r6, [r5, #2604]	; 0xa2c
      _b = b;
    5110:	mvn.w	r6, #28
    5114:	strb.w	r6, [r5, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5118:	mvn.w	r6, #110	; 0x6e
    511c:	strb.w	r6, [r5, #2612]	; 0xa34
      _b = b;
    5120:	mvn.w	r6, #74	; 0x4a
    5124:	strb.w	r6, [r5, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5128:	movw	r6, #313	; 0x139
    512c:	str.w	r6, [r5, #2616]	; 0xa38
      _s = s;
    5130:	mvn.w	r6, #61	; 0x3d
    5134:	strb.w	r6, [r5, #2620]	; 0xa3c
      _b = b;
    5138:	mvn.w	r6, #100	; 0x64
    513c:	strb.w	r6, [r5, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5140:	movw	r6, #257	; 0x101
    5144:	str.w	r6, [r5, #2624]	; 0xa40
      _s = s;
    5148:	mvn.w	r6, #78	; 0x4e
    514c:	strb.w	r6, [r5, #2628]	; 0xa44
      _b = b;
    5150:	mvn.w	r6, #101	; 0x65
    5154:	strb.w	r6, [r5, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5158:	movs	r6, #216	; 0xd8
    515a:	str.w	r6, [r5, #2632]	; 0xa48
      _s = s;
    515e:	mvn.w	r6, #43	; 0x2b
    5162:	strb.w	r6, [r5, #2636]	; 0xa4c
      _b = b;
    5166:	mvn.w	r6, #21
    516a:	strb.w	r6, [r5, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    516e:	mov.w	r6, #344	; 0x158
    5172:	str.w	r6, [r5, #2576]	; 0xa10
      _s = s;
      _b = b;
    5176:	mvn.w	r6, #29
    517a:	strb.w	r6, [r5, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    517e:	movw	r6, #343	; 0x157
    5182:	str.w	r6, [r5, #2584]	; 0xa18
    5186:	movw	r6, #345	; 0x159
    518a:	str.w	r6, [r5, #2592]	; 0xa20
    518e:	mov.w	r6, #288	; 0x120
    5192:	str.w	r6, [r5, #2608]	; 0xa30
      _s = s;
      _b = b;
    5196:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    519a:	strb.w	r1, [r5, #2652]	; 0xa5c
      _b = b;
    519e:	strb.w	r6, [r5, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51a2:	movw	r6, #351	; 0x15f
      _s = s;
    51a6:	strb.w	r1, [r5, #2660]	; 0xa64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51aa:	str.w	r6, [r5, #2640]	; 0xa50
      _s = s;
    51ae:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51b2:	str.w	r2, [r5, #2696]	; 0xa88
      _s = s;
    51b6:	strb.w	r6, [r5, #2644]	; 0xa54
      _b = b;
    51ba:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    51be:	strb.w	r1, [r5, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51c2:	movs	r1, #0
      _s = s;
      _b = b;
    51c4:	strb.w	r6, [r5, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51c8:	mov.w	r6, #356	; 0x164
    51cc:	str.w	r9, [r5, #2720]	; 0xaa0
    51d0:	str.w	r6, [r5, #2648]	; 0xa58
      _s = s;
      _b = b;
    51d4:	mvn.w	r6, #88	; 0x58
    51d8:	strb.w	r6, [r5, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51dc:	movw	r6, #343	; 0x157
    51e0:	str.w	r6, [r5, #2656]	; 0xa60
    51e4:	mov.w	r6, #326	; 0x146
    51e8:	str.w	r6, [r5, #2664]	; 0xa68
      _s = s;
    51ec:	mvn.w	r6, #84	; 0x54
    51f0:	strb.w	r6, [r5, #2668]	; 0xa6c
      _b = b;
    51f4:	mvn.w	r6, #63	; 0x3f
    51f8:	strb.w	r6, [r5, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51fc:	movw	r6, #319	; 0x13f
    5200:	str.w	r6, [r5, #2672]	; 0xa70
      _s = s;
    5204:	mvn.w	r6, #75	; 0x4b
    5208:	strb.w	r6, [r5, #2676]	; 0xa74
      _b = b;
    520c:	mvn.w	r6, #97	; 0x61
    5210:	strb.w	r6, [r5, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5214:	movw	r6, #277	; 0x115
    5218:	str.w	r6, [r5, #2680]	; 0xa78
      _s = s;
    521c:	mvn.w	r6, #65	; 0x41
    5220:	strb.w	r6, [r5, #2684]	; 0xa7c
      _b = b;
    5224:	mov.w	r6, #126	; 0x7e
    5228:	strb.w	r6, [r5, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    522c:	movs	r6, #165	; 0xa5
    522e:	str.w	r6, [r5, #2688]	; 0xa80
      _s = s;
      _b = b;
    5232:	mov.w	r6, #87	; 0x57
    5236:	strb.w	r6, [r5, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    523a:	mvn.w	r6, #78	; 0x4e
    523e:	strb.w	r6, [r5, #2700]	; 0xa8c
      _b = b;
    5242:	mvn.w	r6, #61	; 0x3d
    5246:	strb.w	r6, [r5, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    524a:	movs	r6, #192	; 0xc0
    524c:	str.w	r6, [r5, #2704]	; 0xa90
      _s = s;
      _b = b;
    5250:	mvn.w	r6, #120	; 0x78
    5254:	strb.w	r6, [r5, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5258:	movs	r6, #184	; 0xb8
    525a:	str.w	r6, [r5, #2712]	; 0xa98
      _s = s;
    525e:	mvn.w	r6, #37	; 0x25
    5262:	strb.w	r6, [r5, #2716]	; 0xa9c
      _b = b;
    5266:	mvn.w	r6, #100	; 0x64
    526a:	strb.w	r6, [r5, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    526e:	mvn.w	r6, #109	; 0x6d
    5272:	strb.w	r6, [r5, #2724]	; 0xaa4
    5276:	mov.w	r6, #11
    527a:	strb.w	r6, [r5, #2692]	; 0xa84
      _b = b;
    527e:	mvn.w	r6, #124	; 0x7c
    5282:	strb.w	r6, [r5, #2661]	; 0xa65
    5286:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    528a:	strb.w	lr, [r5, #2732]	; 0xaac
      _b = b;
    528e:	strb.w	r6, [r5, #2725]	; 0xaa5
    5292:	mvn.w	r6, #118	; 0x76
    5296:	strb.w	r3, [r5, #2749]	; 0xabd
    529a:	strb.w	r6, [r5, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    529e:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52a2:	str.w	r1, [r5, #2760]	; 0xac8
      _s = s;
    52a6:	mov.w	r1, #4294967295
    52aa:	strb.w	r6, [r5, #2740]	; 0xab4
      _b = b;
    52ae:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52b2:	strb.w	lr, [r5, #2764]	; 0xacc
      _b = b;
    52b6:	strb.w	r6, [r5, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52ba:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52be:	str.w	ip, [r5, #2776]	; 0xad8
      _s = s;
    52c2:	strb.w	r6, [r5, #2748]	; 0xabc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52c6:	movw	r6, #333	; 0x14d
    52ca:	str.w	r7, [r5, #2792]	; 0xae8
    52ce:	str.w	r6, [r5, #2752]	; 0xac0
      _s = s;
    52d2:	mvn.w	r6, #41	; 0x29
    52d6:	strb.w	lr, [r5, #2796]	; 0xaec
    52da:	strb.w	r6, [r5, #2756]	; 0xac4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52de:	mov.w	r6, #356	; 0x164
    52e2:	str.w	r9, [r5, #2728]	; 0xaa8
    52e6:	str.w	r6, [r5, #2768]	; 0xad0
      _s = s;
    52ea:	mvn.w	r6, #58	; 0x3a
      _b = b;
    52ee:	strb.w	fp, [r5, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52f2:	strb.w	r6, [r5, #2772]	; 0xad4
      _b = b;
    52f6:	mvn.w	r6, #63	; 0x3f
    52fa:	strb.w	r6, [r5, #2773]	; 0xad5
    52fe:	mvn.w	r6, #80	; 0x50
    5302:	strb.w	r6, [r5, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5306:	mov.w	r6, #110	; 0x6e
    530a:	strb.w	r6, [r5, #2788]	; 0xae4
      _b = b;
    530e:	mvn.w	r6, #50	; 0x32
    5312:	strb.w	r6, [r5, #2789]	; 0xae5
    5316:	mvn.w	r6, #48	; 0x30
    531a:	strb.w	r6, [r5, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    531e:	movw	r6, #327	; 0x147
    5322:	str.w	r6, [r5, #2800]	; 0xaf0
      _s = s;
    5326:	mvn.w	r6, #89	; 0x59
    532a:	strb.w	r6, [r5, #2804]	; 0xaf4
      _b = b;
    532e:	mvn.w	r6, #29
    5332:	strb.w	r6, [r5, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5336:	mov.w	r6, #322	; 0x142
    533a:	str.w	r6, [r5, #2808]	; 0xaf8
      _s = s;
    533e:	mvn.w	r6, #118	; 0x76
    5342:	strb.w	r6, [r5, #2812]	; 0xafc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5346:	movw	r6, #349	; 0x15d
    534a:	str.w	r6, [r5, #2784]	; 0xae0
    534e:	movs	r6, #239	; 0xef
    5350:	str.w	r6, [r5, #2736]	; 0xab0
    5354:	movw	r6, #273	; 0x111
    5358:	str.w	r6, [r5, #2744]	; 0xab8
      _s = s;
      _b = b;
    535c:	mvn.w	r6, #14
    5360:	strb.w	r6, [r5, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5364:	mov.w	r6, #39	; 0x27
    5368:	strb.w	r6, [r5, #2780]	; 0xadc
      _b = b;
    536c:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5370:	strb.w	r1, [r5, #2852]	; 0xb24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5374:	movs	r1, #191	; 0xbf
      _s = s;
      _b = b;
    5376:	strb.w	r6, [r5, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    537a:	mov.w	r6, #318	; 0x13e
    537e:	str.w	r7, [r5, #2840]	; 0xb18
    5382:	str.w	r6, [r5, #2816]	; 0xb00
      _s = s;
    5386:	mov.w	r6, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    538a:	str.w	r7, [r5, #2848]	; 0xb20
      _s = s;
    538e:	strb.w	r6, [r5, #2820]	; 0xb04
      _b = b;
    5392:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5396:	str.w	r1, [r5, #2888]	; 0xb48
      _s = s;
      _b = b;
    539a:	mvn.w	r1, #64	; 0x40
    539e:	strb.w	r6, [r5, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53a2:	mov.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53a6:	str.w	r2, [r5, #2896]	; 0xb50
      _s = s;
    53aa:	strb.w	r6, [r5, #2828]	; 0xb0c
      _b = b;
    53ae:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53b2:	strb.w	lr, [r5, #2900]	; 0xb54
      _b = b;
    53b6:	strb.w	r6, [r5, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53ba:	mov.w	r6, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53be:	str.w	r9, [r5, #2824]	; 0xb08
      _s = s;
    53c2:	strb.w	r6, [r5, #2836]	; 0xb14
      _b = b;
    53c6:	mvn.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53ca:	strb.w	fp, [r5, #2876]	; 0xb3c
      _b = b;
    53ce:	strb.w	r6, [r5, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53d2:	mvn.w	r6, #3
      _b = b;
    53d6:	strb.w	fp, [r5, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53da:	strb.w	r6, [r5, #2844]	; 0xb1c
      _b = b;
    53de:	mov.w	r6, #117	; 0x75
    53e2:	strb.w	r6, [r5, #2845]	; 0xb1d
    53e6:	mvn.w	r6, #61	; 0x3d
    53ea:	strb.w	r6, [r5, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ee:	mov.w	r6, #332	; 0x14c
    53f2:	str.w	r6, [r5, #2856]	; 0xb28
      _s = s;
    53f6:	mvn.w	r6, #24
    53fa:	strb.w	r6, [r5, #2860]	; 0xb2c
      _b = b;
    53fe:	mvn.w	r6, #62	; 0x3e
    5402:	strb.w	r6, [r5, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5406:	mov.w	r6, #306	; 0x132
    540a:	str.w	r6, [r5, #2864]	; 0xb30
      _s = s;
    540e:	mvn.w	r6, #121	; 0x79
    5412:	strb.w	r6, [r5, #2868]	; 0xb34
      _b = b;
    5416:	mvn.w	r6, #75	; 0x4b
    541a:	strb.w	r6, [r5, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    541e:	movw	r6, #295	; 0x127
    5422:	str.w	r6, [r5, #2872]	; 0xb38
    5426:	movs	r6, #44	; 0x2c
    5428:	str.w	r6, [r5, #2880]	; 0xb40
      _s = s;
      _b = b;
    542c:	mvn.w	r6, #43	; 0x2b
    5430:	strb.w	r6, [r5, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5434:	mov.w	r6, #120	; 0x78
    5438:	strb.w	r6, [r5, #2892]	; 0xb4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    543c:	mov.w	r6, #340	; 0x154
    5440:	str.w	r6, [r5, #2832]	; 0xb10
      _s = s;
      _b = b;
    5444:	mov.w	r6, #116	; 0x74
    5448:	strb.w	r6, [r5, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    544c:	mov.w	r6, #18
    5450:	strb.w	r6, [r5, #2884]	; 0xb44
      _b = b;
    5454:	mvn.w	r6, #99	; 0x63
    5458:	strb.w	r1, [r5, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    545c:	movs	r1, #0
      _s = s;
      _b = b;
    545e:	strb.w	r6, [r5, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5462:	mov.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5466:	str.w	r3, [r5, #2912]	; 0xb60
      _s = s;
    546a:	strb.w	r6, [r5, #2980]	; 0xba4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    546e:	movs	r6, #192	; 0xc0
      _s = s;
    5470:	strb.w	r2, [r5, #2948]	; 0xb84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5474:	str.w	r6, [r5, #2904]	; 0xb58
      _s = s;
    5478:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    547c:	str.w	r1, [r5, #2960]	; 0xb90
      _s = s;
    5480:	mov.w	r1, #4294967295
    5484:	strb.w	r6, [r5, #2908]	; 0xb5c
    5488:	mvn.w	r6, #20
    548c:	strb.w	lr, [r5, #2964]	; 0xb94
    5490:	strb.w	r6, [r5, #2916]	; 0xb64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5494:	movs	r6, #190	; 0xbe
      _s = s;
      _b = b;
    5496:	strb.w	sl, [r5, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    549a:	str.w	r6, [r5, #2920]	; 0xb68
      _s = s;
    549e:	mvn.w	r6, #45	; 0x2d
      _b = b;
    54a2:	strb.w	sl, [r5, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    54a6:	strb.w	r6, [r5, #2924]	; 0xb6c
      _b = b;
    54aa:	mvn.w	r6, #71	; 0x47
    54ae:	strb.w	r8, [r5, #2949]	; 0xb85
    54b2:	strb.w	r6, [r5, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54b6:	movs	r6, #245	; 0xf5
      _s = s;
    54b8:	strb.w	r8, [r5, #2956]	; 0xb8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54bc:	str.w	r6, [r5, #2928]	; 0xb70
      _s = s;
    54c0:	mov.w	r6, #54	; 0x36
    54c4:	strb.w	r6, [r5, #2932]	; 0xb74
      _b = b;
    54c8:	mvn.w	r6, #86	; 0x56
    54cc:	strb.w	r6, [r5, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    54d0:	mov.w	r6, #102	; 0x66
    54d4:	strb.w	r6, [r5, #2940]	; 0xb7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54d8:	mov.w	r6, #352	; 0x160
    54dc:	str.w	r6, [r5, #2952]	; 0xb88
      _s = s;
      _b = b;
    54e0:	mvn.w	r6, #101	; 0x65
    54e4:	strb.w	r6, [r5, #2957]	; 0xb8d
    54e8:	mvn.w	r6, #52	; 0x34
    54ec:	strb.w	r6, [r5, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54f0:	mov.w	r6, #316	; 0x13c
    54f4:	str.w	r6, [r5, #2968]	; 0xb98
      _s = s;
    54f8:	mov.w	r6, #45	; 0x2d
    54fc:	strb.w	r6, [r5, #2972]	; 0xb9c
      _b = b;
    5500:	mov.w	r6, #123	; 0x7b
    5504:	strb.w	r6, [r5, #2973]	; 0xb9d
    5508:	mvn.w	r6, #76	; 0x4c
    550c:	strb.w	r6, [r5, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5510:	movs	r6, #3
    5512:	str.w	r6, [r5, #2984]	; 0xba8
      _s = s;
    5516:	mvn.w	r6, #28
    551a:	strb.w	r6, [r5, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    551e:	mov.w	r6, #328	; 0x148
    5522:	str.w	r6, [r5, #2936]	; 0xb78
    5526:	mov.w	r6, #350	; 0x15e
    552a:	str.w	r6, [r5, #2944]	; 0xb80
    552e:	movw	r6, #341	; 0x155
    5532:	str.w	r6, [r5, #2976]	; 0xba0
      _s = s;
      _b = b;
    5536:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    553a:	str.w	r7, [r5, #3032]	; 0xbd8
      _s = s;
      _b = b;
    553e:	strb.w	r6, [r5, #2989]	; 0xbad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5542:	movw	r6, #345	; 0x159
      _s = s;
    5546:	strb.w	r1, [r5, #3036]	; 0xbdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    554a:	movs	r1, #0
    554c:	str.w	r6, [r5, #2992]	; 0xbb0
      _s = s;
    5550:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5554:	str.w	r7, [r5, #3040]	; 0xbe0
      _s = s;
    5558:	strb.w	r6, [r5, #2996]	; 0xbb4
      _b = b;
    555c:	mvn.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5560:	str.w	r7, [r5, #3048]	; 0xbe8
      _s = s;
      _b = b;
    5564:	strb.w	r6, [r5, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5568:	movw	r6, #329	; 0x149
      _s = s;
    556c:	strb.w	lr, [r5, #3052]	; 0xbec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5570:	str.w	r6, [r5, #3000]	; 0xbb8
      _s = s;
    5574:	mov.w	r6, #127	; 0x7f
    5578:	strb.w	r8, [r5, #3012]	; 0xbc4
    557c:	strb.w	r6, [r5, #3004]	; 0xbbc
      _b = b;
    5580:	mvn.w	r6, #65	; 0x41
    5584:	strb.w	r9, [r5, #3037]	; 0xbdd
    5588:	strb.w	r6, [r5, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    558c:	mov.w	r6, #350	; 0x15e
    5590:	str.w	r8, [r5, #3072]	; 0xc00
    5594:	str.w	r6, [r5, #3008]	; 0xbc0
      _s = s;
      _b = b;
    5598:	mvn.w	r6, #35	; 0x23
    559c:	strb.w	r6, [r5, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55a0:	movw	r6, #355	; 0x163
    55a4:	str.w	r6, [r5, #3016]	; 0xbc8
      _s = s;
    55a8:	mvn.w	r6, #91	; 0x5b
    55ac:	strb.w	r6, [r5, #3020]	; 0xbcc
      _b = b;
    55b0:	mvn.w	r6, #80	; 0x50
    55b4:	strb.w	r6, [r5, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55b8:	mov.w	r6, #350	; 0x15e
    55bc:	str.w	r6, [r5, #3024]	; 0xbd0
      _s = s;
    55c0:	mvn.w	r6, #34	; 0x22
    55c4:	strb.w	r6, [r5, #3028]	; 0xbd4
      _b = b;
    55c8:	mvn.w	r6, #90	; 0x5a
    55cc:	strb.w	r6, [r5, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55d0:	mvn.w	r6, #3
    55d4:	strb.w	r6, [r5, #3044]	; 0xbe4
      _b = b;
    55d8:	mov.w	r6, #117	; 0x75
    55dc:	strb.w	r6, [r5, #3045]	; 0xbe5
    55e0:	mvn.w	r6, #93	; 0x5d
    55e4:	strb.w	r6, [r5, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55e8:	mov.w	r6, #342	; 0x156
    55ec:	str.w	r6, [r5, #3056]	; 0xbf0
      _s = s;
    55f0:	mvn.w	r6, #12
    55f4:	strb.w	r6, [r5, #3060]	; 0xbf4
      _b = b;
    55f8:	mvn.w	r6, #97	; 0x61
    55fc:	strb.w	r6, [r5, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5600:	movw	r6, #323	; 0x143
    5604:	str.w	r6, [r5, #3064]	; 0xbf8
      _s = s;
    5608:	mvn.w	r6, #73	; 0x49
    560c:	strb.w	r6, [r5, #3068]	; 0xbfc
    5610:	mov.w	r6, #20
    5614:	strb.w	r6, [r5, #3076]	; 0xc04
      _b = b;
    5618:	mvn.w	r6, #108	; 0x6c
    561c:	strb.w	r6, [r5, #3069]	; 0xbfd
    5620:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5624:	str.w	r2, [r5, #3120]	; 0xc30
      _s = s;
      _b = b;
    5628:	strb.w	r6, [r5, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    562c:	movs	r6, #234	; 0xea
    562e:	str.w	r3, [r5, #3128]	; 0xc38
    5632:	str.w	r6, [r5, #3080]	; 0xc08
      _s = s;
      _b = b;
    5636:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    563a:	strb.w	lr, [r5, #3132]	; 0xc3c
      _b = b;
    563e:	strb.w	r6, [r5, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5642:	movs	r6, #212	; 0xd4
    5644:	str.w	r1, [r5, #3152]	; 0xc50
    5648:	str.w	r6, [r5, #3088]	; 0xc10
    564c:	movs	r6, #233	; 0xe9
      _s = s;
    564e:	strb.w	lr, [r5, #3156]	; 0xc54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5652:	str.w	r6, [r5, #3096]	; 0xc18
      _s = s;
    5656:	mov.w	r6, #64	; 0x40
      _b = b;
    565a:	strb.w	sl, [r5, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    565e:	strb.w	r6, [r5, #3100]	; 0xc1c
      _b = b;
    5662:	mvn.w	r6, #61	; 0x3d
    5666:	strb.w	fp, [r5, #3125]	; 0xc35
    566a:	strb.w	r6, [r5, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    566e:	movs	r6, #221	; 0xdd
    5670:	str.w	r6, [r5, #3104]	; 0xc20
      _s = s;
      _b = b;
    5674:	mvn.w	r6, #78	; 0x4e
    5678:	strb.w	r6, [r5, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    567c:	movs	r6, #218	; 0xda
    567e:	str.w	r6, [r5, #3112]	; 0xc28
      _s = s;
    5682:	mov.w	r6, #94	; 0x5e
    5686:	strb.w	r6, [r5, #3116]	; 0xc2c
      _b = b;
    568a:	mvn.w	r6, #96	; 0x60
    568e:	strb.w	r6, [r5, #3117]	; 0xc2d
    5692:	mvn.w	r6, #119	; 0x77
    5696:	strb.w	r6, [r5, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    569a:	movs	r6, #193	; 0xc1
    569c:	str.w	r6, [r5, #3136]	; 0xc40
      _s = s;
    56a0:	mvn.w	r6, #3
    56a4:	strb.w	r6, [r5, #3140]	; 0xc44
      _b = b;
    56a8:	mov.w	r6, #111	; 0x6f
    56ac:	strb.w	r6, [r5, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56b0:	mov.w	r6, #352	; 0x160
    56b4:	str.w	r6, [r5, #3144]	; 0xc48
      _s = s;
    56b8:	mvn.w	r6, #103	; 0x67
    56bc:	strb.w	r6, [r5, #3148]	; 0xc4c
      _b = b;
    56c0:	mvn.w	r6, #79	; 0x4f
    56c4:	strb.w	r6, [r5, #3149]	; 0xc4d
    56c8:	mvn.w	r6, #25
    56cc:	strb.w	r6, [r5, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56d0:	mov.w	r6, #356	; 0x164
    56d4:	str.w	r6, [r5, #3160]	; 0xc58
      _s = s;
    56d8:	mvn.w	r6, #127	; 0x7f
    56dc:	strb.w	r6, [r5, #3164]	; 0xc5c
    56e0:	mov.w	r6, #25
    56e4:	strb.w	r6, [r5, #3084]	; 0xc0c
    56e8:	mov.w	r6, #66	; 0x42
    56ec:	strb.w	r6, [r5, #3092]	; 0xc14
    56f0:	mov.w	r6, #72	; 0x48
    56f4:	strb.w	r6, [r5, #3108]	; 0xc24
    56f8:	mov.w	r6, #82	; 0x52
    56fc:	strb.w	r6, [r5, #3124]	; 0xc34
      _b = b;
    5700:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5704:	str.w	r1, [r5, #3168]	; 0xc60
      _s = s;
    5708:	mov.w	r1, #4294967295
      _b = b;
    570c:	strb.w	r6, [r5, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5710:	mvn.w	r6, #93	; 0x5d
    5714:	strb.w	r1, [r5, #3188]	; 0xc74
      _b = b;
    5718:	mvn.w	r1, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    571c:	strb.w	r6, [r5, #3172]	; 0xc64
      _b = b;
    5720:	mvn.w	r6, #14
    5724:	strb.w	r1, [r5, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5728:	movs	r1, #0
      _s = s;
      _b = b;
    572a:	strb.w	r6, [r5, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    572e:	movw	r6, #357	; 0x165
    5732:	str.w	r7, [r5, #3184]	; 0xc70
    5736:	str.w	r6, [r5, #3176]	; 0xc68
      _s = s;
    573a:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    573e:	str.w	r7, [r5, #3200]	; 0xc80
      _s = s;
    5742:	strb.w	r6, [r5, #3180]	; 0xc6c
      _b = b;
    5746:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    574a:	strb.w	lr, [r5, #3204]	; 0xc84
      _b = b;
    574e:	strb.w	r6, [r5, #3181]	; 0xc6d
    5752:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5756:	str.w	r7, [r5, #3232]	; 0xca0
      _s = s;
      _b = b;
    575a:	strb.w	r6, [r5, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    575e:	mov.w	r6, #354	; 0x162
      _s = s;
    5762:	strb.w	lr, [r5, #3236]	; 0xca4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5766:	str.w	r6, [r5, #3192]	; 0xc78
      _s = s;
    576a:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    576e:	str.w	r1, [r5, #3248]	; 0xcb0
      _s = s;
    5772:	mov.w	r1, #4294967295
    5776:	strb.w	r6, [r5, #3196]	; 0xc7c
      _b = b;
    577a:	mvn.w	r6, #56	; 0x38
    577e:	strb.w	r6, [r5, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5782:	movw	r6, #353	; 0x161
    5786:	str.w	r6, [r5, #3208]	; 0xc88
      _s = s;
    578a:	mvn.w	r6, #36	; 0x24
    578e:	strb.w	r6, [r5, #3212]	; 0xc8c
      _b = b;
    5792:	mvn.w	r6, #24
    5796:	strb.w	r6, [r5, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    579a:	mov.w	r6, #346	; 0x15a
    579e:	str.w	r6, [r5, #3216]	; 0xc90
      _s = s;
    57a2:	mov.w	r6, #66	; 0x42
    57a6:	strb.w	r6, [r5, #3220]	; 0xc94
      _b = b;
    57aa:	mvn.w	r6, #72	; 0x48
    57ae:	strb.w	r6, [r5, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57b2:	mov.w	r6, #358	; 0x166
    57b6:	mov	r0, r6
    57b8:	str.w	r6, [r5, #3224]	; 0xc98
      _s = s;
    57bc:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57c0:	str.w	r0, [r5, #3240]	; 0xca8
      _s = s;
    57c4:	strb.w	r6, [r5, #3228]	; 0xc9c
      _b = b;
    57c8:	mvn.w	r6, #58	; 0x3a
    57cc:	strb.w	r6, [r5, #3229]	; 0xc9d
    57d0:	mvn.w	r6, #117	; 0x75
    57d4:	strb.w	r6, [r5, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57d8:	mvn.w	r6, #7
    57dc:	strb.w	r6, [r5, #3244]	; 0xcac
      _b = b;
    57e0:	mov.w	r6, #40	; 0x28
    57e4:	strb.w	r6, [r5, #3245]	; 0xcad
    57e8:	mvn.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57ec:	strb.w	lr, [r5, #3252]	; 0xcb4
      _b = b;
    57f0:	strb.w	r6, [r5, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57f4:	mov.w	r6, #356	; 0x164
      _s = s;
    57f8:	strb.w	r1, [r5, #3260]	; 0xcbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57fc:	movs	r1, #0
    57fe:	str.w	r6, [r5, #3256]	; 0xcb8
    5802:	movs	r6, #233	; 0xe9
    5804:	str.w	r2, [r5, #3312]	; 0xcf0
    5808:	str.w	r6, [r5, #3264]	; 0xcc0
      _s = s;
      _b = b;
    580c:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5810:	strb.w	ip, [r5, #3324]	; 0xcfc
      _b = b;
    5814:	strb.w	r6, [r5, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5818:	movw	r6, #273	; 0x111
    581c:	str.w	r2, [r5, #3336]	; 0xd08
    5820:	str.w	r6, [r5, #3272]	; 0xcc8
      _s = s;
    5824:	mov.w	r6, #99	; 0x63
      _b = b;
    5828:	strb.w	fp, [r5, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    582c:	strb.w	r6, [r5, #3276]	; 0xccc
      _b = b;
    5830:	mvn.w	r6, #83	; 0x53
    5834:	strb.w	r6, [r5, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5838:	movw	r6, #301	; 0x12d
    583c:	str.w	r6, [r5, #3280]	; 0xcd0
      _s = s;
    5840:	mvn.w	r6, #86	; 0x56
    5844:	strb.w	r6, [r5, #3284]	; 0xcd4
      _b = b;
    5848:	mvn.w	r6, #74	; 0x4a
    584c:	strb.w	r6, [r5, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5850:	mov.w	r6, #300	; 0x12c
    5854:	mov	r0, r6
    5856:	str.w	r6, [r5, #3288]	; 0xcd8
      _s = s;
    585a:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    585e:	str.w	r0, [r5, #3296]	; 0xce0
    5862:	mov.w	r0, #320	; 0x140
      _s = s;
    5866:	strb.w	r6, [r5, #3292]	; 0xcdc
      _b = b;
    586a:	mvn.w	r6, #76	; 0x4c
    586e:	strb.w	r6, [r5, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5872:	mvn.w	r6, #7
    5876:	strb.w	r6, [r5, #3300]	; 0xce4
      _b = b;
    587a:	mvn.w	r6, #93	; 0x5d
    587e:	strb.w	r6, [r5, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5882:	mvn.w	r6, #89	; 0x59
    5886:	strb.w	r6, [r5, #3308]	; 0xcec
      _b = b;
    588a:	mvn.w	r6, #71	; 0x47
    588e:	strb.w	r6, [r5, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5892:	mvn.w	r6, #98	; 0x62
    5896:	strb.w	r6, [r5, #3316]	; 0xcf4
      _b = b;
    589a:	mvn.w	r6, #54	; 0x36
    589e:	strb.w	r6, [r5, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58a2:	movs	r6, #183	; 0xb7
    58a4:	str.w	r6, [r5, #3320]	; 0xcf8
    58a8:	movs	r6, #181	; 0xb5
    58aa:	str.w	r6, [r5, #3328]	; 0xd00
      _s = s;
    58ae:	mvn.w	r6, #114	; 0x72
    58b2:	strb.w	r6, [r5, #3332]	; 0xd04
      _b = b;
    58b6:	mvn.w	r6, #82	; 0x52
    58ba:	strb.w	r6, [r5, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58be:	mvn.w	r6, #36	; 0x24
    58c2:	strb.w	r6, [r5, #3340]	; 0xd0c
      _b = b;
    58c6:	mvn.w	r6, #116	; 0x74
    58ca:	strb.w	r6, [r5, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    58ce:	mov.w	r6, #83	; 0x53
    58d2:	strb.w	r6, [r5, #3268]	; 0xcc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58d6:	movw	r6, #289	; 0x121
    58da:	str.w	r6, [r5, #3304]	; 0xce8
      _s = s;
      _b = b;
    58de:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58e2:	str.w	r1, [r5, #3376]	; 0xd30
      _s = s;
    58e6:	mov.w	r1, #4294967295
      _b = b;
    58ea:	strb.w	r6, [r5, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58ee:	movs	r6, #1
      _s = s;
    58f0:	strb.w	r1, [r5, #3380]	; 0xd34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58f4:	str.w	r6, [r5, #3344]	; 0xd10
      _s = s;
    58f8:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58fc:	str.w	r7, [r5, #3384]	; 0xd38
      _s = s;
    5900:	strb.w	r6, [r5, #3348]	; 0xd14
      _b = b;
    5904:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5908:	strb.w	r1, [r5, #3388]	; 0xd3c
      _b = b;
    590c:	strb.w	r6, [r5, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5910:	movs	r6, #3
      _s = s;
      _b = b;
    5912:	strb.w	ip, [r5, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5916:	str.w	r6, [r5, #3352]	; 0xd18
      _s = s;
    591a:	mvn.w	r6, #53	; 0x35
    591e:	strb.w	r1, [r5, #3428]	; 0xd64
    5922:	strb.w	r6, [r5, #3356]	; 0xd1c
      _b = b;
    5926:	mvn.w	r6, #16
    592a:	strb.w	r6, [r5, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    592e:	mvn.w	r6, #54	; 0x36
    5932:	strb.w	r6, [r5, #3364]	; 0xd24
      _b = b;
    5936:	mvn.w	r6, #10
    593a:	strb.w	r6, [r5, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    593e:	mov.w	r6, #358	; 0x166
    5942:	str.w	r6, [r5, #3368]	; 0xd28
      _s = s;
    5946:	mvn.w	r6, #8
    594a:	strb.w	r6, [r5, #3372]	; 0xd2c
      _b = b;
    594e:	mvn.w	r6, #5
    5952:	strb.w	r6, [r5, #3381]	; 0xd35
    5956:	mvn.w	r6, #27
    595a:	strb.w	r6, [r5, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    595e:	movw	r6, #353	; 0x161
    5962:	str.w	r6, [r5, #3392]	; 0xd40
      _s = s;
    5966:	mvn.w	r6, #45	; 0x2d
    596a:	strb.w	r6, [r5, #3396]	; 0xd44
      _b = b;
    596e:	mvn.w	r6, #15
    5972:	strb.w	r6, [r5, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5976:	mov.w	r6, #352	; 0x160
    597a:	str.w	r6, [r5, #3400]	; 0xd48
      _s = s;
    597e:	mov.w	r6, #105	; 0x69
    5982:	strb.w	r6, [r5, #3404]	; 0xd4c
      _b = b;
    5986:	mvn.w	r6, #25
    598a:	strb.w	r6, [r5, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    598e:	movs	r6, #15
    5990:	str.w	r6, [r5, #3408]	; 0xd50
      _s = s;
      _b = b;
    5994:	mvn.w	r6, #91	; 0x5b
    5998:	strb.w	r6, [r5, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    599c:	movw	r6, #357	; 0x165
    59a0:	str.w	r6, [r5, #3424]	; 0xd60
    59a4:	movs	r6, #4
    59a6:	str.w	r6, [r5, #3360]	; 0xd20
      _s = s;
      _b = b;
    59aa:	mov.w	r6, #100	; 0x64
    59ae:	strb.w	r6, [r5, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59b2:	mov.w	r6, #9
    59b6:	strb.w	r6, [r5, #3412]	; 0xd54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ba:	movw	r6, #259	; 0x103
    59be:	str.w	r6, [r5, #3416]	; 0xd58
      _s = s;
    59c2:	mov.w	r6, #52	; 0x34
    59c6:	strb.w	r6, [r5, #3420]	; 0xd5c
      _b = b;
    59ca:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ce:	str.w	r7, [r5, #3432]	; 0xd68
      _s = s;
      _b = b;
    59d2:	strb.w	r6, [r5, #3429]	; 0xd65
    59d6:	mvn.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59da:	strb.w	r1, [r5, #3436]	; 0xd6c
      _b = b;
    59de:	strb.w	r6, [r5, #3437]	; 0xd6d
    59e2:	mvn.w	r6, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59e6:	str.w	r7, [r5, #3440]	; 0xd70
      _s = s;
      _b = b;
    59ea:	strb.w	r6, [r5, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ee:	movw	r6, #357	; 0x165
      _s = s;
    59f2:	strb.w	r1, [r5, #3444]	; 0xd74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59f6:	str.w	r6, [r5, #3448]	; 0xd78
      _s = s;
      _b = b;
    59fa:	mvn.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59fe:	strb.w	r1, [r5, #3452]	; 0xd7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a02:	movs	r1, #0
      _s = s;
      _b = b;
    5a04:	strb.w	r6, [r5, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a08:	movs	r6, #215	; 0xd7
      _s = s;
      _b = b;
    5a0a:	strb.w	ip, [r5, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a0e:	str.w	r6, [r5, #3456]	; 0xd80
      _s = s;
      _b = b;
    5a12:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a16:	strb.w	lr, [r5, #3516]	; 0xdbc
      _b = b;
    5a1a:	strb.w	r6, [r5, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a1e:	mov.w	r6, #316	; 0x13c
    5a22:	str.w	r6, [r5, #3464]	; 0xd88
      _s = s;
    5a26:	mov.w	r6, #62	; 0x3e
    5a2a:	strb.w	r6, [r5, #3468]	; 0xd8c
      _b = b;
    5a2e:	mvn.w	r6, #33	; 0x21
    5a32:	strb.w	r6, [r5, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a36:	mov.w	r6, #314	; 0x13a
    5a3a:	str.w	r6, [r5, #3472]	; 0xd90
      _s = s;
    5a3e:	mvn.w	r6, #118	; 0x76
    5a42:	strb.w	r6, [r5, #3476]	; 0xd94
      _b = b;
    5a46:	mvn.w	r6, #38	; 0x26
    5a4a:	strb.w	r6, [r5, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a4e:	movw	r6, #321	; 0x141
    5a52:	str.w	r6, [r5, #3480]	; 0xd98
      _s = s;
    5a56:	mvn.w	r6, #120	; 0x78
    5a5a:	strb.w	r6, [r5, #3484]	; 0xd9c
      _b = b;
    5a5e:	mvn.w	r6, #11
    5a62:	strb.w	r6, [r5, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a66:	movw	r6, #317	; 0x13d
    5a6a:	str.w	r6, [r5, #3488]	; 0xda0
      _s = s;
    5a6e:	mvn.w	r6, #73	; 0x49
    5a72:	strb.w	r6, [r5, #3492]	; 0xda4
      _b = b;
    5a76:	mvn.w	r6, #43	; 0x2b
    5a7a:	strb.w	r6, [r5, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a7e:	mvn.w	r6, #125	; 0x7d
    5a82:	strb.w	r6, [r5, #3500]	; 0xdac
      _b = b;
    5a86:	mvn.w	r6, #57	; 0x39
    5a8a:	strb.w	r6, [r5, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a8e:	movs	r6, #178	; 0xb2
    5a90:	str.w	r6, [r5, #3504]	; 0xdb0
      _s = s;
    5a94:	mvn.w	r6, #79	; 0x4f
    5a98:	strb.w	r6, [r5, #3508]	; 0xdb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a9c:	movs	r6, #181	; 0xb5
    5a9e:	str.w	r6, [r5, #3512]	; 0xdb8
      _s = s;
    5aa2:	mov.w	r6, #53	; 0x35
    5aa6:	strb.w	r6, [r5, #3460]	; 0xd84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aaa:	mov.w	r6, #298	; 0x12a
    5aae:	str.w	r6, [r5, #3496]	; 0xda8
      _s = s;
      _b = b;
    5ab2:	mvn.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ab6:	str.w	r1, [r5, #3544]	; 0xdd8
      _s = s;
    5aba:	mov.w	r1, #4294967295
      _b = b;
    5abe:	strb.w	r6, [r5, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ac2:	movs	r6, #182	; 0xb6
      _s = s;
    5ac4:	strb.w	r1, [r5, #3548]	; 0xddc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ac8:	movs	r1, #0
    5aca:	str.w	r6, [r5, #3520]	; 0xdc0
      _s = s;
    5ace:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ad2:	str.w	r1, [r5, #3568]	; 0xdf0
      _s = s;
    5ad6:	mov.w	r1, #4294967295
    5ada:	strb.w	r6, [r5, #3524]	; 0xdc4
      _b = b;
    5ade:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ae2:	str.w	r7, [r5, #3536]	; 0xdd0
      _s = s;
      _b = b;
    5ae6:	strb.w	r6, [r5, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aea:	movs	r6, #247	; 0xf7
      _s = s;
    5aec:	strb.w	r1, [r5, #3572]	; 0xdf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5af0:	str.w	r6, [r5, #3528]	; 0xdc8
      _s = s;
    5af4:	mov.w	r6, #34	; 0x22
    5af8:	strb.w	r8, [r5, #3556]	; 0xde4
    5afc:	strb.w	r6, [r5, #3532]	; 0xdcc
      _b = b;
    5b00:	mov.w	r6, #126	; 0x7e
    5b04:	strb.w	r6, [r5, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b08:	mvn.w	r6, #5
    5b0c:	strb.w	r6, [r5, #3540]	; 0xdd4
      _b = b;
    5b10:	mvn.w	r6, #101	; 0x65
    5b14:	strb.w	r6, [r5, #3541]	; 0xdd5
    5b18:	mvn.w	r6, #19
    5b1c:	strb.w	r6, [r5, #3549]	; 0xddd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b20:	movs	r6, #4
    5b22:	str.w	r6, [r5, #3552]	; 0xde0
      _s = s;
      _b = b;
    5b26:	mvn.w	r6, #54	; 0x36
    5b2a:	strb.w	r6, [r5, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b2e:	movs	r6, #3
    5b30:	str.w	r6, [r5, #3560]	; 0xde8
      _s = s;
    5b34:	mvn.w	r6, #41	; 0x29
    5b38:	strb.w	r6, [r5, #3564]	; 0xdec
      _b = b;
    5b3c:	mvn.w	r6, #34	; 0x22
    5b40:	strb.w	r6, [r5, #3565]	; 0xded
    5b44:	mvn.w	r6, #20
    5b48:	strb.w	r6, [r5, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b4c:	movw	r6, #355	; 0x163
    5b50:	str.w	r6, [r5, #3576]	; 0xdf8
      _s = s;
    5b54:	mvn.w	r6, #76	; 0x4c
    5b58:	strb.w	r6, [r5, #3580]	; 0xdfc
      _b = b;
    5b5c:	mvn.w	r6, #25
    5b60:	strb.w	r6, [r5, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b64:	mov.w	r6, #322	; 0x142
    5b68:	str.w	r6, [r5, #3584]	; 0xe00
      _s = s;
    5b6c:	mov.w	r6, #85	; 0x55
    5b70:	strb.w	r6, [r5, #3588]	; 0xe04
      _b = b;
    5b74:	mvn.w	r6, #90	; 0x5a
    5b78:	strb.w	r6, [r5, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b7c:	movs	r6, #207	; 0xcf
    5b7e:	str.w	r6, [r5, #3592]	; 0xe08
      _s = s;
      _b = b;
    5b82:	mvn.w	r6, #84	; 0x54
    5b86:	strb.w	r6, [r5, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b8a:	mov.w	r6, #318	; 0x13e
    5b8e:	str.w	r6, [r5, #3600]	; 0xe10
      _s = s;
    5b92:	mov.w	r6, #13
    5b96:	strb.w	r6, [r5, #3604]	; 0xe14
    5b9a:	mov.w	r6, #77	; 0x4d
    5b9e:	strb.w	r6, [r5, #3596]	; 0xe0c
    5ba2:	mov.w	r6, #47	; 0x2f
      _b = b;
    5ba6:	strb.w	r3, [r5, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5baa:	strb.w	r6, [r5, #3612]	; 0xe1c
      _b = b;
    5bae:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bb2:	str.w	ip, [r5, #3608]	; 0xe18
      _s = s;
      _b = b;
    5bb6:	strb.w	r6, [r5, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bba:	mov.w	r6, #346	; 0x15a
    5bbe:	str.w	r7, [r5, #3624]	; 0xe28
    5bc2:	str.w	r6, [r5, #3616]	; 0xe20
      _s = s;
      _b = b;
    5bc6:	mvn.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bca:	strb.w	lr, [r5, #3628]	; 0xe2c
      _b = b;
    5bce:	strb.w	r6, [r5, #3621]	; 0xe25
    5bd2:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bd6:	strb.w	sl, [r5, #3620]	; 0xe24
      _b = b;
    5bda:	strb.w	r6, [r5, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bde:	movw	r6, #357	; 0x165
      _s = s;
      _b = b;
    5be2:	strb.w	fp, [r5, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be6:	str.w	r6, [r5, #3632]	; 0xe30
      _s = s;
    5bea:	mvn.w	r6, #3
    5bee:	strb.w	r6, [r5, #3636]	; 0xe34
      _b = b;
    5bf2:	mov.w	r6, #96	; 0x60
    5bf6:	strb.w	r6, [r5, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bfa:	mov.w	r6, #352	; 0x160
    5bfe:	str.w	r6, [r5, #3640]	; 0xe38
      _s = s;
    5c02:	mvn.w	r6, #13
    5c06:	strb.w	r6, [r5, #3644]	; 0xe3c
      _b = b;
    5c0a:	mvn.w	r6, #65	; 0x41
    5c0e:	strb.w	r6, [r5, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c12:	movs	r6, #247	; 0xf7
    5c14:	str.w	r6, [r5, #3648]	; 0xe40
      _s = s;
    5c18:	mov.w	r6, #18
    5c1c:	strb.w	r6, [r5, #3652]	; 0xe44
      _b = b;
    5c20:	mvn.w	r6, #53	; 0x35
    5c24:	strb.w	r6, [r5, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c28:	mov.w	r6, #332	; 0x14c
    5c2c:	str.w	r6, [r5, #3656]	; 0xe48
      _s = s;
    5c30:	mvn.w	r6, #108	; 0x6c
    5c34:	strb.w	r6, [r5, #3660]	; 0xe4c
      _b = b;
    5c38:	mvn.w	r6, #5
    5c3c:	strb.w	r6, [r5, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c40:	movw	r6, #325	; 0x145
    5c44:	str.w	r6, [r5, #3664]	; 0xe50
      _s = s;
      _b = b;
    5c48:	mvn.w	r6, #5
    5c4c:	strb.w	r6, [r5, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c50:	mov.w	r6, #304	; 0x130
    5c54:	str.w	r6, [r5, #3672]	; 0xe58
      _s = s;
    5c58:	mov.w	r6, #101	; 0x65
    5c5c:	strb.w	r6, [r5, #3676]	; 0xe5c
      _b = b;
    5c60:	mvn.w	r6, #39	; 0x27
    5c64:	strb.w	r6, [r5, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c68:	movw	r6, #295	; 0x127
    5c6c:	str.w	r6, [r5, #3680]	; 0xe60
      _s = s;
    5c70:	mvn.w	r6, #112	; 0x70
    5c74:	strb.w	r6, [r5, #3684]	; 0xe64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c78:	movs	r6, #218	; 0xda
    5c7a:	str.w	r6, [r5, #3688]	; 0xe68
      _s = s;
    5c7e:	mov.w	r6, #95	; 0x5f
    5c82:	strb.w	r6, [r5, #3692]	; 0xe6c
    5c86:	mvn.w	r6, #9
    5c8a:	strb.w	r6, [r5, #3668]	; 0xe54
      _b = b;
    5c8e:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c92:	strb.w	r1, [r5, #3732]	; 0xe94
      _b = b;
    5c96:	strb.w	r6, [r5, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c9a:	movs	r6, #181	; 0xb5
      _s = s;
    5c9c:	strb.w	r1, [r5, #3740]	; 0xe9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ca0:	movs	r1, #0
    5ca2:	str.w	r6, [r5, #3696]	; 0xe70
      _s = s;
    5ca6:	mov.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5caa:	str.w	r1, [r5, #3744]	; 0xea0
      _s = s;
    5cae:	mov.w	r1, #4294967295
    5cb2:	strb.w	r6, [r5, #3700]	; 0xe74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cb6:	movs	r6, #180	; 0xb4
    5cb8:	str.w	r7, [r5, #3728]	; 0xe90
    5cbc:	str.w	r6, [r5, #3704]	; 0xe78
      _s = s;
    5cc0:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cc4:	str.w	r7, [r5, #3736]	; 0xe98
      _s = s;
      _b = b;
    5cc8:	mov.w	r7, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ccc:	strb.w	r6, [r5, #3708]	; 0xe7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cd0:	movs	r6, #179	; 0xb3
      _s = s;
    5cd2:	strb.w	r1, [r5, #3748]	; 0xea4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cd6:	movs	r1, #181	; 0xb5
    5cd8:	str.w	r6, [r5, #3712]	; 0xe80
      _s = s;
    5cdc:	mvn.w	r6, #107	; 0x6b
      _b = b;
    5ce0:	strb.w	sl, [r5, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ce4:	strb.w	r6, [r5, #3716]	; 0xe84
      _b = b;
    5ce8:	mvn.w	r6, #61	; 0x3d
    5cec:	strb.w	sl, [r5, #3709]	; 0xe7d
    5cf0:	strb.w	r6, [r5, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cf4:	mov.w	r6, #356	; 0x164
    5cf8:	str.w	r6, [r5, #3720]	; 0xe88
      _s = s;
    5cfc:	mvn.w	r6, #53	; 0x35
    5d00:	strb.w	r6, [r5, #3724]	; 0xe8c
      _b = b;
    5d04:	mvn.w	r6, #35	; 0x23
    5d08:	strb.w	r6, [r5, #3725]	; 0xe8d
    5d0c:	mvn.w	r6, #25
    5d10:	strb.w	r6, [r5, #3733]	; 0xe95
    5d14:	mvn.w	r6, #13
    5d18:	strb.w	r6, [r5, #3741]	; 0xe9d
    5d1c:	mvn.w	r6, #9
    5d20:	strb.w	r6, [r5, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d24:	movw	r6, #355	; 0x163
    5d28:	str.w	r6, [r5, #3752]	; 0xea8
      _s = s;
    5d2c:	mvn.w	r6, #88	; 0x58
    5d30:	strb.w	r6, [r5, #3756]	; 0xeac
      _b = b;
    5d34:	mvn.w	r6, #30
    5d38:	strb.w	r6, [r5, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d3c:	movs	r6, #1
    5d3e:	str.w	r6, [r5, #3760]	; 0xeb0
      _s = s;
    5d42:	mvn.w	r6, #81	; 0x51
    5d46:	strb.w	r6, [r5, #3764]	; 0xeb4
      _b = b;
    5d4a:	mvn.w	r6, #27
    5d4e:	strb.w	r6, [r5, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d52:	movs	r6, #232	; 0xe8
    5d54:	str.w	r6, [r5, #3768]	; 0xeb8
      _s = s;
      _b = b;
    5d58:	mvn.w	r6, #62	; 0x3e
    5d5c:	strb.w	r6, [r5, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d60:	movs	r6, #210	; 0xd2
    5d62:	str.w	r6, [r5, #3776]	; 0xec0
      _s = s;
    5d66:	mov.w	r6, #103	; 0x67
    5d6a:	strb.w	r6, [r5, #3780]	; 0xec4
    5d6e:	mov.w	r6, #30
    5d72:	strb.w	r6, [r5, #3772]	; 0xebc
      _b = b;
    5d76:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d7a:	str.w	r1, [r5, #3792]	; 0xed0
    5d7e:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    5d80:	strb.w	r6, [r5, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d84:	movs	r6, #188	; 0xbc
    5d86:	str.w	r1, [r5, #3800]	; 0xed8
    5d8a:	movs	r1, #207	; 0xcf
    5d8c:	str.w	r6, [r5, #3784]	; 0xec8
      _s = s;
    5d90:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d94:	str.w	r1, [r5, #3808]	; 0xee0
    5d98:	mov.w	r1, #354	; 0x162
      _s = s;
    5d9c:	strb.w	r6, [r5, #3788]	; 0xecc
      _b = b;
    5da0:	mvn.w	r6, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5da4:	str.w	r1, [r5, #3816]	; 0xee8
    5da8:	mov.w	r1, #358	; 0x166
      _s = s;
      _b = b;
    5dac:	strb.w	r6, [r5, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5db0:	mov.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5db4:	str.w	r1, [r5, #3824]	; 0xef0
      _s = s;
    5db8:	mov.w	r1, #4294967295
    5dbc:	strb.w	r6, [r5, #3796]	; 0xed4
      _b = b;
    5dc0:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dc4:	strb.w	r1, [r5, #3828]	; 0xef4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dc8:	movs	r1, #209	; 0xd1
      _s = s;
      _b = b;
    5dca:	strb.w	r6, [r5, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dce:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dd2:	str.w	r1, [r5, #3832]	; 0xef8
    5dd6:	mov.w	r1, #336	; 0x150
      _s = s;
    5dda:	strb.w	r6, [r5, #3804]	; 0xedc
      _b = b;
    5dde:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5de2:	str.w	r1, [r5, #3840]	; 0xf00
    5de6:	movw	r1, #311	; 0x137
      _s = s;
      _b = b;
    5dea:	strb.w	r6, [r5, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dee:	mov.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5df2:	str.w	r1, [r5, #3856]	; 0xf10
    5df6:	mov.w	r1, #258	; 0x102
      _s = s;
    5dfa:	strb.w	r6, [r5, #3812]	; 0xee4
      _b = b;
    5dfe:	mvn.w	r6, #86	; 0x56
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e02:	str.w	r1, [r5, #3864]	; 0xf18
    5e06:	movw	r1, #315	; 0x13b
      _s = s;
      _b = b;
    5e0a:	strb.w	r6, [r5, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e0e:	mvn.w	r6, #7
    5e12:	strb.w	r6, [r5, #3820]	; 0xeec
      _b = b;
    5e16:	mvn.w	r6, #72	; 0x48
    5e1a:	strb.w	r6, [r5, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e1e:	mvn.w	r6, #85	; 0x55
    5e22:	strb.w	r6, [r5, #3836]	; 0xefc
    5e26:	mov.w	r6, #65	; 0x41
    5e2a:	strb.w	r6, [r5, #3844]	; 0xf04
      _b = b;
    5e2e:	mvn.w	r6, #20
    5e32:	strb.w	r6, [r5, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e36:	mov.w	r6, #126	; 0x7e
    5e3a:	strb.w	r6, [r5, #3852]	; 0xf0c
      _b = b;
    5e3e:	mvn.w	r6, #32
    5e42:	strb.w	r6, [r5, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e46:	mov.w	r6, #122	; 0x7a
    5e4a:	strb.w	r6, [r5, #3860]	; 0xf14
      _b = b;
    5e4e:	mvn.w	r6, #40	; 0x28
    5e52:	strb.w	r6, [r5, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e56:	mvn.w	r6, #110	; 0x6e
    5e5a:	strb.w	r6, [r5, #3868]	; 0xf1c
      _b = b;
    5e5e:	mov.w	r6, #104	; 0x68
    5e62:	strb.w	r6, [r5, #3829]	; 0xef5
    5e66:	mov.w	r6, #124	; 0x7c
    5e6a:	strb.w	r6, [r5, #3837]	; 0xefd
    5e6e:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e72:	str.w	r1, [r5, #3848]	; 0xf08
    5e76:	movs	r1, #190	; 0xbe
      _s = s;
      _b = b;
    5e78:	strb.w	r6, [r5, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e7c:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e80:	str.w	r1, [r5, #3880]	; 0xf28
    5e84:	movs	r1, #171	; 0xab
      _s = s;
    5e86:	strb.w	r6, [r5, #3876]	; 0xf24
      _b = b;
    5e8a:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e8e:	str.w	r1, [r5, #3888]	; 0xf30
    5e92:	movs	r1, #167	; 0xa7
      _s = s;
      _b = b;
    5e94:	strb.w	r6, [r5, #3877]	; 0xf25
    5e98:	mvn.w	r6, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e9c:	str.w	r1, [r5, #3896]	; 0xf38
    5ea0:	movs	r1, #184	; 0xb8
      _s = s;
      _b = b;
    5ea2:	strb.w	r6, [r5, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ea6:	mov.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eaa:	str.w	r1, [r5, #3904]	; 0xf40
    5eae:	mov.w	r1, #354	; 0x162
      _s = s;
    5eb2:	strb.w	r6, [r5, #3892]	; 0xf34
      _b = b;
    5eb6:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eba:	str.w	r1, [r5, #3912]	; 0xf48
    5ebe:	movw	r1, #357	; 0x165
      _s = s;
      _b = b;
    5ec2:	strb.w	r6, [r5, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ec6:	mov.w	r6, #66	; 0x42
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eca:	str.w	r1, [r5, #3920]	; 0xf50
    5ece:	movw	r1, #351	; 0x15f
      _s = s;
    5ed2:	strb.w	r6, [r5, #3900]	; 0xf3c
      _b = b;
    5ed6:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eda:	str.w	r1, [r5, #3928]	; 0xf58
    5ede:	movs	r1, #0
      _s = s;
      _b = b;
    5ee0:	strb.w	r6, [r5, #3901]	; 0xf3d
    5ee4:	mov.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ee8:	str.w	r1, [r5, #3936]	; 0xf60
    5eec:	movw	r1, #325	; 0x145
      _s = s;
      _b = b;
    5ef0:	strb.w	r6, [r5, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ef4:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ef8:	str.w	r1, [r5, #3952]	; 0xf70
    5efc:	mov.w	r1, #268	; 0x10c
      _s = s;
    5f00:	strb.w	r6, [r5, #3916]	; 0xf4c
      _b = b;
    5f04:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f08:	str.w	r1, [r5, #3872]	; 0xf20
    5f0c:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    5f10:	strb.w	r6, [r5, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f14:	mvn.w	r6, #45	; 0x2d
    5f18:	strb.w	fp, [r5, #3884]	; 0xf2c
    5f1c:	strb.w	r6, [r5, #3924]	; 0xf54
      _b = b;
    5f20:	mvn.w	r6, #5
    5f24:	strb.w	r6, [r5, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f28:	mvn.w	r6, #55	; 0x37
    5f2c:	strb.w	r6, [r5, #3932]	; 0xf5c
      _b = b;
    5f30:	mvn.w	r6, #32
    5f34:	strb.w	r6, [r5, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f38:	mvn.w	r6, #89	; 0x59
    5f3c:	strb.w	r6, [r5, #3940]	; 0xf64
      _b = b;
    5f40:	mvn.w	r6, #15
    5f44:	strb.w	r6, [r5, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f48:	mov.w	r6, #39	; 0x27
    5f4c:	strb.w	r6, [r5, #3948]	; 0xf6c
      _b = b;
    5f50:	mvn.w	r6, #113	; 0x71
    5f54:	strb.w	r6, [r5, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f58:	mov.w	r6, #38	; 0x26
    5f5c:	strb.w	r6, [r5, #3956]	; 0xf74
    5f60:	mov.w	r6, #58	; 0x3a
    5f64:	strb.w	r6, [r5, #3908]	; 0xf44
      _b = b;
    5f68:	mov.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f6c:	str.w	r1, [r5, #3944]	; 0xf68
    5f70:	movs	r1, #221	; 0xdd
      _s = s;
      _b = b;
    5f72:	strb.w	r6, [r5, #4029]	; 0xfbd
    5f76:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f7a:	str.w	r1, [r5, #3960]	; 0xf78
    5f7e:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    5f80:	strb.w	r6, [r5, #3965]	; 0xf7d
    5f84:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f88:	str.w	r1, [r5, #3968]	; 0xf80
    5f8c:	movs	r1, #194	; 0xc2
      _s = s;
      _b = b;
    5f8e:	strb.w	r6, [r5, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f92:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f96:	str.w	r1, [r5, #4000]	; 0xfa0
    5f9a:	movw	r1, #275	; 0x113
      _s = s;
    5f9e:	strb.w	r6, [r5, #3980]	; 0xf8c
      _b = b;
    5fa2:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fa6:	str.w	r1, [r5, #4008]	; 0xfa8
    5faa:	movw	r1, #345	; 0x159
      _s = s;
      _b = b;
    5fae:	strb.w	r6, [r5, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fb2:	mvn.w	r6, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fb6:	str.w	r1, [r5, #4016]	; 0xfb0
    5fba:	mov.w	r1, #330	; 0x14a
      _s = s;
    5fbe:	strb.w	r6, [r5, #3988]	; 0xf94
      _b = b;
    5fc2:	mvn.w	r6, #115	; 0x73
    5fc6:	strb.w	r3, [r5, #3957]	; 0xf75
    5fca:	strb.w	r6, [r5, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fce:	mvn.w	r6, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fd2:	str.w	r2, [r5, #3992]	; 0xf98
      _s = s;
    5fd6:	strb.w	r6, [r5, #3996]	; 0xf9c
      _b = b;
    5fda:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fde:	strb.w	r3, [r5, #4004]	; 0xfa4
      _b = b;
    5fe2:	strb.w	r6, [r5, #3997]	; 0xf9d
    5fe6:	mvn.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fea:	str.w	ip, [r5, #4024]	; 0xfb8
      _s = s;
      _b = b;
    5fee:	strb.w	r6, [r5, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ff2:	mov.w	r6, #77	; 0x4d
      _b = b;
    5ff6:	strb.w	ip, [r5, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ffa:	strb.w	r6, [r5, #4012]	; 0xfac
      _b = b;
    5ffe:	mov.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6002:	str.w	r1, [r5, #4040]	; 0xfc8
      _s = s;
      _b = b;
    6006:	strb.w	r6, [r5, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    600a:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    600e:	str.w	r0, [r5, #4032]	; 0xfc0
    6012:	add.w	r0, r5, #4096	; 0x1000
      _s = s;
    6016:	strb.w	r6, [r5, #4020]	; 0xfb4
      _b = b;
    601a:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    601e:	str.w	sl, [r5, #3976]	; 0xf88
      _s = s;
      _b = b;
    6022:	strb.w	r6, [r5, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6026:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    602a:	str.w	sl, [r5, #3984]	; 0xf90
      _s = s;
    602e:	strb.w	r6, [r5, #4028]	; 0xfbc
    6032:	mvn.w	r6, #33	; 0x21
    6036:	strb.w	r6, [r5, #4036]	; 0xfc4
    603a:	mvn.w	r6, #105	; 0x69
    603e:	strb.w	r6, [r5, #4044]	; 0xfcc
    6042:	mov.w	r6, #16
    6046:	strb.w	r6, [r5, #3964]	; 0xf7c
    604a:	mov.w	r6, #73	; 0x49
    604e:	strb.w	r6, [r5, #3972]	; 0xf84
      _b = b;
    6052:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6056:	str.w	ip, [r5, #4072]	; 0xfe8
      _s = s;
      _b = b;
    605a:	strb.w	r6, [r5, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    605e:	mov	r6, r0
    6060:	str.w	fp, [r5, #4080]	; 0xff0
    6064:	add.w	r0, r5, #4320	; 0x10e0
    6068:	str.w	r1, [r6], #32
    606c:	mov	r1, r6
      _s = s;
    606e:	mov.w	r6, #122	; 0x7a
    6072:	strb.w	r6, [r5, #4052]	; 0xfd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6076:	movw	r6, #357	; 0x165
    607a:	str	r6, [r1, #0]
      _s = s;
      _b = b;
    607c:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6080:	movs	r1, #244	; 0xf4
      _s = s;
      _b = b;
    6082:	strb.w	r6, [r5, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6086:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    608a:	str.w	r1, [r5, #4056]	; 0xfd8
    608e:	movs	r1, #235	; 0xeb
      _s = s;
    6090:	strb.w	r6, [r5, #4060]	; 0xfdc
      _b = b;
    6094:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6098:	str.w	r1, [r5, #4064]	; 0xfe0
      _s = s;
    609c:	mvn.w	r1, #64	; 0x40
      _b = b;
    60a0:	strb.w	r6, [r5, #4061]	; 0xfdd
    60a4:	mvn.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60a8:	strb.w	r1, [r5, #4068]	; 0xfe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60ac:	movs	r1, #191	; 0xbf
      _s = s;
      _b = b;
    60ae:	strb.w	r6, [r5, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60b2:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60b6:	str.w	r1, [r5, #4088]	; 0xff8
    60ba:	mov.w	r1, #354	; 0x162
      _s = s;
    60be:	strb.w	r6, [r5, #4076]	; 0xfec
      _b = b;
    60c2:	mov.w	r6, #127	; 0x7f
    60c6:	strb.w	r6, [r5, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60ca:	mvn.w	r6, #100	; 0x64
    60ce:	strb.w	r6, [r5, #4084]	; 0xff4
      _b = b;
    60d2:	mov.w	r6, #115	; 0x73
    60d6:	strb.w	r6, [r5, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60da:	mvn.w	r6, #94	; 0x5e
    60de:	strb.w	r6, [r5, #4092]	; 0xffc
      _b = b;
    60e2:	mvn.w	r6, #127	; 0x7f
    60e6:	strb.w	r6, [r5, #4093]	; 0xffd
    60ea:	movw	r6, #4101	; 0x1005
    60ee:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f0:	movw	r6, #4104	; 0x1008
      _s = s;
    60f4:	mvn.w	r7, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f8:	str	r1, [r5, r6]
    60fa:	movw	r6, #4120	; 0x1018
    60fe:	mov.w	r1, #332	; 0x14c
    6102:	str	r1, [r5, r6]
      _s = s;
    6104:	movw	r6, #4100	; 0x1004
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6108:	movw	r1, #287	; 0x11f
      _s = s;
    610c:	strb	r7, [r5, r6]
    610e:	movw	r6, #4108	; 0x100c
    6112:	mvn.w	r7, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6116:	str.w	r1, [r5, #4048]	; 0xfd0
    611a:	mov.w	r1, #346	; 0x15a
      _s = s;
    611e:	strb	r7, [r5, r6]
      _b = b;
    6120:	movw	r6, #4109	; 0x100d
    6124:	mvn.w	r7, #47	; 0x2f
    6128:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    612a:	movw	r6, #4112	; 0x1010
      _s = s;
    612e:	mov.w	r7, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6132:	str	r1, [r5, r6]
      _s = s;
    6134:	movw	r6, #4116	; 0x1014
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6138:	add.w	r1, r5, #4096	; 0x1000
      _s = s;
    613c:	strb	r7, [r5, r6]
      _b = b;
    613e:	movw	r6, #4117	; 0x1015
    6142:	mvn.w	r7, #55	; 0x37
    6146:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6148:	movw	r6, #4124	; 0x101c
    614c:	mov.w	r7, #97	; 0x61
    6150:	strb	r7, [r5, r6]
      _b = b;
    6152:	movw	r6, #4125	; 0x101d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6156:	mvn.w	r7, #24
      _b = b;
    615a:	strb	r2, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    615c:	movw	r6, #4132	; 0x1024
    6160:	strb	r7, [r5, r6]
      _b = b;
    6162:	movw	r6, #4133	; 0x1025
    6166:	mvn.w	r7, #31
    616a:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    616c:	movs	r6, #183	; 0xb7
      _s = s;
    616e:	mov.w	r7, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6172:	str	r6, [r1, #64]	; 0x40
    6174:	str	r6, [r1, #96]	; 0x60
    6176:	movw	r6, #4136	; 0x1028
    617a:	movs	r1, #251	; 0xfb
    617c:	str	r1, [r5, r6]
      _s = s;
    617e:	movw	r6, #4140	; 0x102c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6182:	movs	r1, #201	; 0xc9
      _s = s;
    6184:	strb	r7, [r5, r6]
      _b = b;
    6186:	movw	r6, #4141	; 0x102d
    618a:	mvn.w	r7, #85	; 0x55
    618e:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6190:	movw	r6, #4144	; 0x1030
      _s = s;
    6194:	mov.w	r7, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6198:	str	r1, [r5, r6]
      _s = s;
    619a:	movw	r6, #4148	; 0x1034
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    619e:	movs	r1, #162	; 0xa2
      _s = s;
    61a0:	strb	r7, [r5, r6]
      _b = b;
    61a2:	movw	r6, #4149	; 0x1035
    61a6:	mvn.w	r7, #48	; 0x30
    61aa:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61ac:	movw	r6, #4152	; 0x1038
      _s = s;
    61b0:	mov.w	r7, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61b4:	str	r1, [r5, r6]
      _s = s;
    61b6:	movw	r6, #4156	; 0x103c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61ba:	movs	r1, #200	; 0xc8
      _s = s;
    61bc:	strb	r7, [r5, r6]
      _b = b;
    61be:	movw	r6, #4157	; 0x103d
    61c2:	mvn.w	r7, #98	; 0x62
    61c6:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61c8:	movw	r6, #4164	; 0x1044
    61cc:	mvn.w	r7, #58	; 0x3a
    61d0:	strb	r7, [r5, r6]
      _b = b;
    61d2:	movw	r6, #4165	; 0x1045
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61d6:	mvn.w	r7, #110	; 0x6e
      _b = b;
    61da:	strb.w	r9, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61de:	movw	r6, #4168	; 0x1048
    61e2:	str	r1, [r5, r6]
      _s = s;
    61e4:	movw	r6, #4172	; 0x104c
    61e8:	mov.w	r1, #4294967295
    61ec:	strb	r7, [r5, r6]
      _b = b;
    61ee:	movw	r6, #4173	; 0x104d
    61f2:	mvn.w	r7, #102	; 0x66
    61f6:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61f8:	movw	r6, #4176	; 0x1050
      _s = s;
      _b = b;
    61fc:	mvn.w	r7, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6200:	str.w	sl, [r5, r6]
      _s = s;
    6204:	movw	r6, #4180	; 0x1054
    6208:	strb.w	lr, [r5, r6]
      _b = b;
    620c:	movw	r6, #4181	; 0x1055
    6210:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6212:	movw	r6, #4184	; 0x1058
      _s = s;
    6216:	mvn.w	r7, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    621a:	str	r2, [r5, r6]
      _s = s;
    621c:	movw	r6, #4188	; 0x105c
    6220:	strb	r7, [r5, r6]
      _b = b;
    6222:	movw	r6, #4189	; 0x105d
    6226:	mov.w	r7, #125	; 0x7d
    622a:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    622c:	movw	r6, #4196	; 0x1064
      _b = b;
    6230:	mvn.w	r7, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6234:	strb	r1, [r5, r6]
      _b = b;
    6236:	movw	r6, #4197	; 0x1065
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    623a:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    623c:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    623e:	movw	r6, #4200	; 0x1068
      _s = s;
      _b = b;
    6242:	mvn.w	r7, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6246:	str	r2, [r5, r6]
      _s = s;
    6248:	movw	r6, #4204	; 0x106c
    624c:	strb.w	lr, [r5, r6]
      _b = b;
    6250:	movw	r6, #4205	; 0x106d
    6254:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6256:	movw	r6, #4208	; 0x1070
      _s = s;
      _b = b;
    625a:	mov.w	r7, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    625e:	str	r1, [r5, r6]
      _s = s;
    6260:	movw	r6, #4212	; 0x1074
    6264:	mov.w	r1, #4294967295
    6268:	strb	r1, [r5, r6]
      _b = b;
    626a:	movw	r6, #4213	; 0x1075
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    626e:	movs	r1, #0
      _s = s;
      _b = b;
    6270:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6272:	movw	r6, #4216	; 0x1078
      _s = s;
    6276:	mvn.w	r7, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    627a:	str	r1, [r5, r6]
      _s = s;
    627c:	movw	r6, #4220	; 0x107c
    6280:	strb	r1, [r5, r6]
      _b = b;
    6282:	movw	r6, #4221	; 0x107d
    6286:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6288:	add.w	r1, r5, #4096	; 0x1000
    628c:	movw	r6, #313	; 0x139
    6290:	str.w	r8, [r1, #160]	; 0xa0
    6294:	str.w	r6, [r1, #128]	; 0x80
    6298:	movs	r6, #244	; 0xf4
    629a:	str.w	r6, [r1, #192]	; 0xc0
    629e:	movw	r6, #4296	; 0x10c8
    62a2:	mov.w	r1, #346	; 0x15a
    62a6:	str	r1, [r5, r6]
      _s = s;
    62a8:	movw	r6, #4228	; 0x1084
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ac:	movw	r1, #317	; 0x13d
      _s = s;
    62b0:	strb	r7, [r5, r6]
      _b = b;
    62b2:	movw	r6, #4229	; 0x1085
    62b6:	mov.w	r7, #57	; 0x39
    62ba:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62bc:	movw	r6, #4232	; 0x1088
      _s = s;
    62c0:	mvn.w	r7, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62c4:	str	r1, [r5, r6]
      _s = s;
    62c6:	movw	r6, #4236	; 0x108c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62ca:	movw	r1, #309	; 0x135
      _s = s;
    62ce:	strb	r7, [r5, r6]
      _b = b;
    62d0:	movw	r6, #4237	; 0x108d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62d4:	mvn.w	r7, #82	; 0x52
      _b = b;
    62d8:	strb.w	r9, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62dc:	movw	r6, #4240	; 0x1090
    62e0:	str	r1, [r5, r6]
      _s = s;
    62e2:	movw	r6, #4244	; 0x1094
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62e6:	movs	r1, #240	; 0xf0
      _s = s;
    62e8:	strb	r7, [r5, r6]
      _b = b;
    62ea:	movw	r6, #4245	; 0x1095
    62ee:	mvn.w	r7, #34	; 0x22
    62f2:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62f4:	movw	r6, #4248	; 0x1098
      _s = s;
    62f8:	mov.w	r7, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62fc:	str	r1, [r5, r6]
      _s = s;
    62fe:	movw	r6, #4252	; 0x109c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6302:	movs	r1, #197	; 0xc5
      _s = s;
    6304:	strb	r7, [r5, r6]
      _b = b;
    6306:	movw	r6, #4253	; 0x109d
    630a:	mvn.w	r7, #79	; 0x4f
    630e:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6310:	movw	r6, #4260	; 0x10a4
      _b = b;
    6314:	mvn.w	r7, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6318:	strb.w	lr, [r5, r6]
      _b = b;
    631c:	movw	r6, #4261	; 0x10a5
    6320:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6322:	movw	r6, #4264	; 0x10a8
      _s = s;
      _b = b;
    6326:	mvn.w	r7, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    632a:	str	r1, [r5, r6]
      _s = s;
    632c:	movw	r6, #4268	; 0x10ac
    6330:	mov.w	r1, #4294967295
    6334:	strb	r1, [r5, r6]
      _b = b;
    6336:	movw	r6, #4269	; 0x10ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    633a:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    633c:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    633e:	movw	r6, #4272	; 0x10b0
      _s = s;
    6342:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6346:	str	r1, [r5, r6]
      _s = s;
    6348:	movw	r6, #4276	; 0x10b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    634c:	movs	r1, #242	; 0xf2
      _s = s;
    634e:	strb	r7, [r5, r6]
      _b = b;
    6350:	movw	r6, #4277	; 0x10b5
    6354:	mov.w	r7, #110	; 0x6e
    6358:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    635a:	movw	r6, #4280	; 0x10b8
      _s = s;
    635e:	mvn.w	r7, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6362:	str.w	fp, [r5, r6]
      _s = s;
    6366:	movw	r6, #4284	; 0x10bc
    636a:	strb	r7, [r5, r6]
      _b = b;
    636c:	movw	r6, #4285	; 0x10bd
    6370:	mov.w	r7, #123	; 0x7b
    6374:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6376:	movw	r6, #4292	; 0x10c4
    637a:	mov.w	r7, #85	; 0x55
    637e:	strb	r7, [r5, r6]
      _b = b;
    6380:	movw	r6, #4293	; 0x10c5
    6384:	mov.w	r7, #75	; 0x4b
    6388:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    638a:	movw	r6, #4300	; 0x10cc
    638e:	mov.w	r7, #42	; 0x2a
    6392:	strb	r7, [r5, r6]
      _b = b;
    6394:	movw	r6, #4301	; 0x10cd
    6398:	mvn.w	r7, #76	; 0x4c
    639c:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    639e:	movw	r6, #4304	; 0x10d0
      _s = s;
    63a2:	mov.w	r7, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63a6:	str	r1, [r5, r6]
      _s = s;
    63a8:	movw	r6, #4308	; 0x10d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63ac:	movs	r1, #0
      _s = s;
    63ae:	strb	r7, [r5, r6]
      _b = b;
    63b0:	movw	r6, #4309	; 0x10d5
    63b4:	mvn.w	r7, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63b8:	str.w	r1, [r0], #32
    63bc:	add.w	r1, r5, #4320	; 0x10e0
      _s = s;
      _b = b;
    63c0:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63c2:	movs	r6, #180	; 0xb4
    63c4:	mov	r7, r0
    63c6:	movs	r0, #0
    63c8:	str	r6, [r1, #64]	; 0x40
    63ca:	movw	r6, #4312	; 0x10d8
    63ce:	movw	r1, #331	; 0x14b
    63d2:	str.w	r9, [r7]
      _s = s;
    63d6:	mov.w	r7, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63da:	str	r1, [r5, r6]
      _s = s;
    63dc:	movw	r6, #4316	; 0x10dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63e0:	movs	r1, #0
      _s = s;
    63e2:	strb	r7, [r5, r6]
      _b = b;
    63e4:	movw	r6, #4317	; 0x10dd
    63e8:	mvn.w	r7, #91	; 0x5b
    63ec:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    63ee:	movw	r6, #4324	; 0x10e4
      _b = b;
    63f2:	mvn.w	r7, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    63f6:	strb.w	lr, [r5, r6]
      _b = b;
    63fa:	movw	r6, #4325	; 0x10e5
    63fe:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6400:	movw	r6, #4328	; 0x10e8
      _s = s;
    6404:	mov.w	r7, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6408:	str	r1, [r5, r6]
      _s = s;
    640a:	movw	r6, #4332	; 0x10ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    640e:	movs	r1, #3
      _s = s;
    6410:	strb	r7, [r5, r6]
      _b = b;
    6412:	movw	r6, #4333	; 0x10ed
    6416:	mvn.w	r7, #39	; 0x27
    641a:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    641c:	movw	r6, #4336	; 0x10f0
      _s = s;
    6420:	mov.w	r7, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6424:	str	r1, [r5, r6]
      _s = s;
    6426:	movw	r6, #4340	; 0x10f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    642a:	movs	r1, #196	; 0xc4
      _s = s;
    642c:	strb	r7, [r5, r6]
      _b = b;
    642e:	movw	r6, #4341	; 0x10f5
    6432:	mvn.w	r7, #73	; 0x49
    6436:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6438:	movw	r6, #4344	; 0x10f8
      _s = s;
    643c:	mvn.w	r7, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6440:	str	r1, [r5, r6]
      _s = s;
    6442:	movw	r6, #4348	; 0x10fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6446:	movs	r1, #190	; 0xbe
      _s = s;
    6448:	strb	r7, [r5, r6]
      _b = b;
    644a:	movw	r6, #4349	; 0x10fd
    644e:	mov.w	r7, #53	; 0x35
    6452:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6454:	movw	r6, #4356	; 0x1104
    6458:	mvn.w	r7, #106	; 0x6a
    645c:	strb	r7, [r5, r6]
      _b = b;
    645e:	movw	r6, #4357	; 0x1105
    6462:	mvn.w	r7, #122	; 0x7a
    6466:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6468:	movw	r6, #4360	; 0x1108
      _s = s;
    646c:	mvn.w	r7, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6470:	str	r1, [r5, r6]
      _s = s;
    6472:	movw	r6, #4364	; 0x110c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6476:	movs	r1, #188	; 0xbc
      _s = s;
    6478:	strb	r7, [r5, r6]
      _b = b;
    647a:	movw	r6, #4365	; 0x110d
    647e:	mvn.w	r7, #54	; 0x36
    6482:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6484:	movw	r6, #4368	; 0x1110
      _s = s;
    6488:	mvn.w	r7, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    648c:	str.w	fp, [r5, r6]
      _s = s;
    6490:	movw	r6, #4372	; 0x1114
    6494:	strb	r7, [r5, r6]
      _b = b;
    6496:	movw	r6, #4373	; 0x1115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    649a:	mvn.w	r7, #84	; 0x54
      _b = b;
    649e:	strb.w	sl, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64a2:	movw	r6, #4376	; 0x1118
    64a6:	str	r1, [r5, r6]
      _s = s;
    64a8:	movw	r6, #4380	; 0x111c
    64ac:	mov.w	r1, #4294967295
    64b0:	strb	r7, [r5, r6]
      _b = b;
    64b2:	movw	r6, #4381	; 0x111d
    64b6:	mvn.w	r7, #72	; 0x48
    64ba:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64bc:	movw	r6, #4388	; 0x1124
      _b = b;
    64c0:	mov.w	r7, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64c4:	strb	r1, [r5, r6]
      _b = b;
    64c6:	movw	r6, #4389	; 0x1125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ca:	movs	r1, #184	; 0xb8
      _s = s;
      _b = b;
    64cc:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ce:	movw	r6, #4392	; 0x1128
      _s = s;
      _b = b;
    64d2:	mov.w	r7, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64d6:	str	r1, [r5, r6]
      _s = s;
    64d8:	movw	r6, #4396	; 0x112c
    64dc:	mov.w	r1, #4294967295
    64e0:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64e2:	add.w	r1, r5, #4416	; 0x1140
      _s = s;
      _b = b;
    64e6:	movw	r6, #4397	; 0x112d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ea:	str	r0, [r1, #0]
    64ec:	movs	r0, #215	; 0xd7
      _s = s;
      _b = b;
    64ee:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64f0:	movw	r6, #4400	; 0x1130
    64f4:	str	r0, [r1, #32]
    64f6:	add.w	r1, r5, #4320	; 0x10e0
    64fa:	mov.w	r0, #318	; 0x13e
      _s = s;
      _b = b;
    64fe:	mov.w	r7, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6502:	str.w	r0, [r1, #160]	; 0xa0
    6506:	movs	r1, #0
    6508:	movs	r0, #0
    650a:	str	r1, [r5, r6]
      _s = s;
    650c:	movw	r6, #4404	; 0x1134
    6510:	strb	r1, [r5, r6]
      _b = b;
    6512:	movw	r6, #4405	; 0x1135
    6516:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6518:	movs	r1, #0
    651a:	movw	r6, #4408	; 0x1138
    651e:	str	r1, [r5, r6]
      _s = s;
    6520:	movw	r6, #4412	; 0x113c
    6524:	strb	r1, [r5, r6]
      _b = b;
    6526:	movw	r6, #4413	; 0x113d
    652a:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    652c:	movw	r6, #4420	; 0x1144
    6530:	strb	r1, [r5, r6]
      _b = b;
    6532:	movw	r6, #4421	; 0x1145
    6536:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6538:	movs	r1, #0
    653a:	movw	r6, #4424	; 0x1148
    653e:	str	r1, [r5, r6]
      _s = s;
    6540:	movw	r6, #4428	; 0x114c
    6544:	strb	r1, [r5, r6]
      _b = b;
    6546:	movw	r6, #4429	; 0x114d
    654a:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    654c:	movw	r6, #4432	; 0x1150
    6550:	movs	r1, #246	; 0xf6
    6552:	str	r1, [r5, r6]
      _s = s;
    6554:	movw	r6, #4436	; 0x1154
    6558:	mov.w	r1, #4294967295
    655c:	strb	r1, [r5, r6]
      _b = b;
    655e:	movw	r6, #4437	; 0x1155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6562:	movs	r1, #245	; 0xf5
      _s = s;
      _b = b;
    6564:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6566:	movw	r6, #4440	; 0x1158
      _s = s;
      _b = b;
    656a:	mov.w	r7, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    656e:	str	r1, [r5, r6]
      _s = s;
    6570:	movw	r6, #4444	; 0x115c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6574:	movs	r1, #191	; 0xbf
      _s = s;
    6576:	strb.w	ip, [r5, r6]
      _b = b;
    657a:	movw	r6, #4445	; 0x115d
    657e:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6580:	movw	r6, #4452	; 0x1164
    6584:	mvn.w	r7, #48	; 0x30
    6588:	strb	r7, [r5, r6]
      _b = b;
    658a:	movw	r6, #4453	; 0x1165
    658e:	mvn.w	r7, #121	; 0x79
    6592:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6594:	movw	r6, #4456	; 0x1168
      _s = s;
    6598:	mvn.w	r7, #4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    659c:	str	r1, [r5, r6]
      _s = s;
    659e:	movw	r6, #4460	; 0x116c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65a2:	movs	r1, #181	; 0xb5
      _s = s;
    65a4:	strb	r7, [r5, r6]
      _b = b;
    65a6:	movw	r6, #4461	; 0x116d
    65aa:	mvn.w	r7, #121	; 0x79
    65ae:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65b0:	movw	r6, #4464	; 0x1170
      _s = s;
    65b4:	mvn.w	r7, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65b8:	str	r1, [r5, r6]
      _s = s;
    65ba:	movw	r6, #4468	; 0x1174
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65be:	movw	r1, #307	; 0x133
      _s = s;
    65c2:	strb	r7, [r5, r6]
      _b = b;
    65c4:	movw	r6, #4469	; 0x1175
    65c8:	mvn.w	r7, #122	; 0x7a
    65cc:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65ce:	movw	r6, #4472	; 0x1178
      _s = s;
    65d2:	mov.w	r7, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65d6:	str	r1, [r5, r6]
      _s = s;
    65d8:	movw	r6, #4476	; 0x117c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65dc:	add.w	r1, r5, #4512	; 0x11a0
      _s = s;
    65e0:	strb	r7, [r5, r6]
      _b = b;
    65e2:	movw	r6, #4477	; 0x117d
    65e6:	mov.w	r7, #68	; 0x44
    65ea:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65ec:	movw	r6, #4484	; 0x1184
    65f0:	mov.w	r7, #88	; 0x58
    65f4:	strb	r7, [r5, r6]
      _b = b;
    65f6:	movw	r6, #4485	; 0x1185
    65fa:	mov.w	r7, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65fe:	str	r0, [r1, #0]
    6600:	str	r3, [r1, #32]
    6602:	mov.w	r1, #344	; 0x158
      _s = s;
      _b = b;
    6606:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6608:	movw	r6, #4500	; 0x1194
    660c:	mov.w	r7, #20
    6610:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6612:	movw	r6, #4528	; 0x11b0
      _s = s;
    6616:	mov.w	r7, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    661a:	str	r1, [r5, r6]
    661c:	movw	r6, #4488	; 0x1188
    6620:	movs	r1, #200	; 0xc8
    6622:	str	r1, [r5, r6]
      _s = s;
    6624:	movw	r6, #4492	; 0x118c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6628:	movs	r1, #222	; 0xde
      _s = s;
    662a:	strb	r7, [r5, r6]
      _b = b;
    662c:	movw	r6, #4493	; 0x118d
    6630:	mvn.w	r7, #97	; 0x61
    6634:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6636:	movw	r6, #4496	; 0x1190
      _s = s;
      _b = b;
    663a:	mvn.w	r7, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    663e:	str	r1, [r5, r6]
      _s = s;
      _b = b;
    6640:	movw	r6, #4501	; 0x1195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6644:	movw	r1, #351	; 0x15f
      _s = s;
      _b = b;
    6648:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    664a:	movw	r6, #4504	; 0x1198
      _s = s;
    664e:	mov.w	r7, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6652:	str	r1, [r5, r6]
      _s = s;
    6654:	movw	r6, #4508	; 0x119c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6658:	movw	r1, #353	; 0x161
      _s = s;
    665c:	strb	r7, [r5, r6]
      _b = b;
    665e:	movw	r6, #4509	; 0x119d
    6662:	mvn.w	r7, #46	; 0x2e
    6666:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6668:	movw	r6, #4516	; 0x11a4
    666c:	mvn.w	r7, #51	; 0x33
    6670:	strb	r7, [r5, r6]
      _b = b;
    6672:	movw	r6, #4517	; 0x11a5
    6676:	mvn.w	r7, #11
    667a:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    667c:	movw	r6, #4520	; 0x11a8
      _s = s;
    6680:	mov.w	r7, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6684:	str	r1, [r5, r6]
      _s = s;
    6686:	movw	r6, #4524	; 0x11ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    668a:	mov.w	r1, #352	; 0x160
      _s = s;
    668e:	strb	r7, [r5, r6]
      _b = b;
    6690:	movw	r6, #4525	; 0x11ad
    6694:	mvn.w	r7, #23
    6698:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    669a:	movw	r6, #4532	; 0x11b4
    669e:	mvn.w	r7, #115	; 0x73
    66a2:	strb	r7, [r5, r6]
      _b = b;
    66a4:	movw	r6, #4533	; 0x11b5
    66a8:	mvn.w	r7, #37	; 0x25
    66ac:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ae:	movw	r6, #4536	; 0x11b8
      _s = s;
    66b2:	mvn.w	r7, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66b6:	str	r1, [r5, r6]
      _s = s;
    66b8:	movw	r6, #4540	; 0x11bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66bc:	movs	r1, #184	; 0xb8
      _s = s;
    66be:	strb	r7, [r5, r6]
      _b = b;
    66c0:	movw	r6, #4541	; 0x11bd
    66c4:	mvn.w	r7, #97	; 0x61
    66c8:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66ca:	movw	r6, #4548	; 0x11c4
    66ce:	mov.w	r7, #31
    66d2:	strb	r7, [r5, r6]
      _b = b;
    66d4:	movw	r6, #4549	; 0x11c5
    66d8:	mov.w	r7, #65	; 0x41
    66dc:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66de:	movw	r6, #4552	; 0x11c8
      _s = s;
    66e2:	mvn.w	r7, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66e6:	str	r1, [r5, r6]
      _s = s;
    66e8:	movw	r6, #4556	; 0x11cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ec:	movs	r1, #215	; 0xd7
      _s = s;
    66ee:	strb	r7, [r5, r6]
      _b = b;
    66f0:	movw	r6, #4557	; 0x11cd
    66f4:	mvn.w	r7, #126	; 0x7e
    66f8:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66fa:	movw	r6, #4560	; 0x11d0
      _s = s;
    66fe:	mvn.w	r7, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6702:	str.w	r9, [r5, r6]
      _s = s;
    6706:	movw	r6, #4564	; 0x11d4
    670a:	strb	r7, [r5, r6]
      _b = b;
    670c:	movw	r6, #4565	; 0x11d5
    6710:	mov.w	r7, #125	; 0x7d
    6714:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6716:	movw	r6, #4568	; 0x11d8
      _s = s;
      _b = b;
    671a:	mov.w	r7, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    671e:	str	r1, [r5, r6]
      _s = s;
    6720:	movw	r6, #4572	; 0x11dc
    6724:	mov.w	r1, #4294967295
    6728:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    672a:	add.w	r1, r5, #4576	; 0x11e0
      _s = s;
      _b = b;
    672e:	movw	r6, #4573	; 0x11dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6732:	str	r0, [r4, #0]
    6734:	str	r0, [r1, #0]
    6736:	mov	r1, r0
      _s = s;
      _b = b;
    6738:	strb	r7, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    673a:	movw	r6, #4580	; 0x11e4
    673e:	strb	r1, [r4, #20]
      _b = b;
    6740:	strb	r1, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6742:	movs	r1, #0
      _s = s;
    6744:	strb	r0, [r4, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6746:	str	r1, [r4, #24]
      _s = s;
    6748:	strb	r1, [r4, #28]
      _b = b;
    674a:	strb	r1, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    674c:	movs	r1, #0
      _s = s;
      _b = b;
    674e:	strb	r0, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6750:	str	r1, [r4, #32]
      _s = s;
    6752:	strb.w	r1, [r4, #36]	; 0x24
      _b = b;
    6756:	strb.w	r1, [r4, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    675a:	movs	r1, #0
    675c:	str	r0, [r4, #8]
    675e:	str	r1, [r4, #40]	; 0x28
      _s = s;
    6760:	strb.w	r1, [r4, #44]	; 0x2c
      _b = b;
    6764:	strb.w	r1, [r4, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6768:	movs	r1, #0
      _s = s;
    676a:	strb	r0, [r4, #12]
    676c:	strb	r1, [r5, r6]
      _b = b;
    676e:	movw	r6, #4581	; 0x11e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6772:	str	r1, [r4, #48]	; 0x30
      _s = s;
      _b = b;
    6774:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6776:	movw	r6, #4584	; 0x11e8
      _s = s;
    677a:	strb.w	r1, [r4, #52]	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    677e:	movs	r1, #0
      _s = s;
      _b = b;
    6780:	strb	r0, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6782:	str	r1, [r5, r6]
      _s = s;
    6784:	movw	r6, #4588	; 0x11ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6788:	str	r0, [r4, #16]
      _s = s;
    678a:	movs	r0, #23
    678c:	strb	r1, [r5, r6]
      _b = b;
    678e:	movw	r6, #4589	; 0x11ed
    6792:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6794:	movs	r1, #0
    6796:	movw	r6, #4592	; 0x11f0
    679a:	str	r1, [r5, r6]
      _s = s;
    679c:	movw	r6, #4596	; 0x11f4
    67a0:	strb	r1, [r5, r6]
      _b = b;
    67a2:	movw	r6, #4597	; 0x11f5
    67a6:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67a8:	movs	r1, #0
    67aa:	movw	r6, #4600	; 0x11f8
    67ae:	str	r1, [r5, r6]
      _s = s;
    67b0:	movw	r6, #4604	; 0x11fc
    67b4:	strb	r1, [r5, r6]
      _b = b;
    67b6:	movw	r6, #4605	; 0x11fd
    67ba:	strb	r1, [r5, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67bc:	mvn.w	r6, #28
      _b = b;
    67c0:	strb.w	r1, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67c4:	movs	r1, #0
      _s = s;
    67c6:	strb.w	r6, [r4, #84]	; 0x54
      _b = b;
    67ca:	mov.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67ce:	str	r1, [r4, #56]	; 0x38
      _s = s;
      _b = b;
    67d0:	strb.w	r6, [r4, #85]	; 0x55
    67d4:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67d8:	strb.w	r1, [r4, #60]	; 0x3c
      _b = b;
    67dc:	strb.w	r6, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67e0:	mvn.w	r6, #13
      _b = b;
    67e4:	strb.w	r1, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67e8:	movs	r1, #0
      _s = s;
    67ea:	strb.w	r6, [r4, #108]	; 0x6c
      _b = b;
    67ee:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67f2:	str	r1, [r4, #64]	; 0x40
      _s = s;
    67f4:	strb.w	r1, [r4, #68]	; 0x44
      _b = b;
    67f8:	strb.w	r1, [r4, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67fc:	movs	r1, #252	; 0xfc
      _s = s;
      _b = b;
    67fe:	strb.w	r6, [r4, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6802:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6806:	str	r1, [r4, #72]	; 0x48
      _s = s;
    6808:	mov.w	r1, #4294967295
    680c:	strb.w	r6, [r4, #116]	; 0x74
      _b = b;
    6810:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6814:	strb.w	r1, [r4, #76]	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6818:	movs	r1, #201	; 0xc9
      _s = s;
      _b = b;
    681a:	strb.w	r6, [r4, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    681e:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6822:	str	r1, [r4, #88]	; 0x58
    6824:	movs	r1, #190	; 0xbe
      _s = s;
    6826:	strb.w	r6, [r4, #124]	; 0x7c
      _b = b;
    682a:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    682e:	str	r1, [r4, #96]	; 0x60
    6830:	movs	r1, #183	; 0xb7
      _s = s;
      _b = b;
    6832:	strb.w	r6, [r4, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6836:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    683a:	str	r1, [r4, #120]	; 0x78
    683c:	movs	r1, #174	; 0xae
      _s = s;
    683e:	strb.w	r6, [r4, #132]	; 0x84
      _b = b;
    6842:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6846:	str.w	r1, [r4, #128]	; 0x80
    684a:	movs	r1, #224	; 0xe0
      _s = s;
      _b = b;
    684c:	strb.w	r6, [r4, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6850:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6854:	str.w	r1, [r4, #136]	; 0x88
    6858:	mov.w	r1, #276	; 0x114
      _s = s;
    685c:	strb.w	r6, [r4, #140]	; 0x8c
      _b = b;
    6860:	mov.w	r6, #113	; 0x71
    6864:	strb.w	r7, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6868:	str	r1, [r4, #80]	; 0x50
    686a:	movs	r1, #237	; 0xed
      _s = s;
    686c:	strb.w	fp, [r4, #92]	; 0x5c
    6870:	strb.w	r8, [r4, #100]	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6874:	str.w	fp, [r4, #104]	; 0x68
    6878:	str.w	r9, [r4, #112]	; 0x70
      _s = s;
      _b = b;
    687c:	strb.w	r6, [r4, #93]	; 0x5d
    6880:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6884:	str.w	r1, [r4, #152]	; 0x98
    6888:	movs	r1, #188	; 0xbc
      _s = s;
      _b = b;
    688a:	strb.w	r6, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    688e:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6892:	str.w	r1, [r4, #176]	; 0xb0
    6896:	movs	r1, #0
      _s = s;
    6898:	strb.w	r6, [r4, #148]	; 0x94
      _b = b;
    689c:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68a0:	str.w	r1, [r4, #184]	; 0xb8
      _s = s;
      _b = b;
    68a4:	strb.w	r6, [r4, #149]	; 0x95
    68a8:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68ac:	strb.w	r1, [r4, #188]	; 0xbc
      _b = b;
    68b0:	strb.w	r6, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68b4:	mov.w	r6, #45	; 0x2d
      _b = b;
    68b8:	strb.w	r1, [r4, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68bc:	movs	r1, #0
      _s = s;
    68be:	strb.w	r6, [r4, #164]	; 0xa4
      _b = b;
    68c2:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68c6:	str.w	r1, [r4, #192]	; 0xc0
      _s = s;
    68ca:	strb.w	r1, [r4, #196]	; 0xc4
      _b = b;
    68ce:	strb.w	r1, [r4, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68d2:	movs	r1, #0
      _s = s;
      _b = b;
    68d4:	strb.w	r6, [r4, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68d8:	mov.w	r6, #42	; 0x2a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68dc:	str.w	r1, [r4, #200]	; 0xc8
      _s = s;
    68e0:	strb.w	r1, [r4, #204]	; 0xcc
      _b = b;
    68e4:	strb.w	r1, [r4, #205]	; 0xcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68e8:	movs	r1, #0
      _s = s;
    68ea:	strb.w	r6, [r4, #172]	; 0xac
      _b = b;
    68ee:	mvn.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68f2:	str.w	r1, [r4, #208]	; 0xd0
      _s = s;
    68f6:	strb.w	r1, [r4, #212]	; 0xd4
      _b = b;
    68fa:	strb.w	r1, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68fe:	movs	r1, #0
      _s = s;
      _b = b;
    6900:	strb.w	r6, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6904:	mov.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6908:	str.w	r1, [r4, #216]	; 0xd8
      _s = s;
    690c:	strb.w	r1, [r4, #220]	; 0xdc
      _b = b;
    6910:	strb.w	r1, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6914:	movs	r1, #0
      _s = s;
    6916:	strb.w	r6, [r4, #180]	; 0xb4
      _b = b;
    691a:	mov.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    691e:	str.w	r1, [r4, #224]	; 0xe0
      _s = s;
    6922:	strb.w	r1, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6926:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    692a:	strb.w	r6, [r4, #181]	; 0xb5
    692e:	mov.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6932:	str.w	r1, [r4, #144]	; 0x90
    6936:	mov.w	r1, #274	; 0x112
    693a:	str.w	ip, [r4, #168]	; 0xa8
      _s = s;
    693e:	strb.w	r0, [r4, #156]	; 0x9c
    6942:	movs	r0, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6944:	str.w	r1, [r4, #160]	; 0xa0
      _s = s;
      _b = b;
    6948:	mov.w	r1, #0
    694c:	strb.w	r6, [r4, #253]	; 0xfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6950:	mvn.w	r6, #3
      _b = b;
    6954:	strb.w	r1, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6958:	movs	r1, #0
      _s = s;
    695a:	strb.w	r6, [r4, #260]	; 0x104
      _b = b;
    695e:	mov.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6962:	str.w	r1, [r4, #232]	; 0xe8
      _s = s;
      _b = b;
    6966:	strb.w	r6, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    696a:	mvn.w	r6, #38	; 0x26
    696e:	strb.w	r1, [r4, #236]	; 0xec
      _b = b;
    6972:	strb.w	r1, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6976:	movs	r1, #0
      _s = s;
    6978:	strb.w	r6, [r4, #268]	; 0x10c
      _b = b;
    697c:	mvn.w	r6, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6980:	str.w	r1, [r4, #240]	; 0xf0
      _s = s;
    6984:	strb.w	r1, [r4, #244]	; 0xf4
      _b = b;
    6988:	strb.w	r1, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    698c:	movw	r1, #301	; 0x12d
      _s = s;
      _b = b;
    6990:	strb.w	r6, [r4, #269]	; 0x10d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6994:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6998:	str.w	r1, [r4, #248]	; 0xf8
      _s = s;
    699c:	mov.w	r1, #4294967295
    69a0:	strb.w	r6, [r4, #276]	; 0x114
      _b = b;
    69a4:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69a8:	strb.w	r1, [r4, #252]	; 0xfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ac:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    69b0:	strb.w	r6, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69b4:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69b8:	str.w	r1, [r4, #256]	; 0x100
    69bc:	movs	r1, #193	; 0xc1
      _s = s;
    69be:	strb.w	r6, [r4, #284]	; 0x11c
      _b = b;
    69c2:	strb.w	r6, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69c6:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ca:	str.w	r1, [r4, #280]	; 0x118
    69ce:	movs	r1, #192	; 0xc0
      _s = s;
    69d0:	strb.w	r6, [r4, #292]	; 0x124
    69d4:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69d8:	str.w	r1, [r4, #288]	; 0x120
    69dc:	movs	r1, #191	; 0xbf
      _s = s;
    69de:	strb.w	r6, [r4, #300]	; 0x12c
      _b = b;
    69e2:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69e6:	str.w	r1, [r4, #296]	; 0x128
      _s = s;
      _b = b;
    69ea:	mvn.w	r1, #64	; 0x40
    69ee:	strb.w	r6, [r4, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69f2:	mvn.w	r6, #120	; 0x78
      _b = b;
    69f6:	strb.w	r1, [r4, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69fa:	movw	r1, #285	; 0x11d
      _s = s;
    69fe:	strb.w	r6, [r4, #316]	; 0x13c
      _b = b;
    6a02:	mvn.w	r6, #35	; 0x23
    6a06:	strb.w	r2, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a0a:	str.w	r2, [r4, #304]	; 0x130
      _s = s;
    6a0e:	strb.w	lr, [r4, #308]	; 0x134
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a12:	str.w	r1, [r4, #264]	; 0x108
    6a16:	str.w	r9, [r4, #312]	; 0x138
    6a1a:	str.w	r1, [r4, #272]	; 0x110
    6a1e:	movs	r1, #210	; 0xd2
      _s = s;
      _b = b;
    6a20:	strb.w	r6, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a24:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a28:	str.w	r1, [r4, #320]	; 0x140
    6a2c:	movw	r1, #273	; 0x111
      _s = s;
    6a30:	strb.w	r6, [r4, #324]	; 0x144
      _b = b;
    6a34:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a38:	str.w	r1, [r4, #328]	; 0x148
    6a3c:	mov.w	r1, #318	; 0x13e
      _s = s;
      _b = b;
    6a40:	strb.w	r6, [r4, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a44:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a48:	str.w	r1, [r4, #336]	; 0x150
    6a4c:	mov.w	r1, #316	; 0x13c
      _s = s;
    6a50:	strb.w	r6, [r4, #332]	; 0x14c
      _b = b;
    6a54:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a58:	str.w	r1, [r4, #344]	; 0x158
    6a5c:	movw	r1, #311	; 0x137
      _s = s;
      _b = b;
    6a60:	strb.w	r6, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a64:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a68:	str.w	r1, [r4, #352]	; 0x160
    6a6c:	movs	r1, #190	; 0xbe
      _s = s;
    6a6e:	strb.w	r6, [r4, #340]	; 0x154
      _b = b;
    6a72:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a76:	str.w	r1, [r4, #368]	; 0x170
      _s = s;
      _b = b;
    6a7a:	mvn.w	r1, #64	; 0x40
    6a7e:	strb.w	r6, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a82:	mvn.w	r6, #25
      _b = b;
    6a86:	strb.w	r1, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a8a:	movs	r1, #171	; 0xab
      _s = s;
    6a8c:	strb.w	r6, [r4, #348]	; 0x15c
      _b = b;
    6a90:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a94:	str.w	r1, [r4, #376]	; 0x178
    6a98:	movs	r1, #0
      _s = s;
      _b = b;
    6a9a:	strb.w	r6, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a9e:	mov.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aa2:	str.w	r1, [r4, #384]	; 0x180
      _s = s;
    6aa6:	strb.w	r6, [r4, #356]	; 0x164
      _b = b;
    6aaa:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6aae:	strb.w	r1, [r4, #388]	; 0x184
      _b = b;
    6ab2:	strb.w	r6, [r4, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ab6:	mov.w	r6, #45	; 0x2d
      _b = b;
    6aba:	strb.w	r1, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6abe:	movs	r1, #0
      _s = s;
    6ac0:	strb.w	r6, [r4, #364]	; 0x16c
      _b = b;
    6ac4:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ac8:	str.w	r1, [r4, #392]	; 0x188
      _s = s;
      _b = b;
    6acc:	strb.w	r6, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ad0:	mvn.w	r6, #101	; 0x65
    6ad4:	strb.w	r1, [r4, #396]	; 0x18c
    6ad8:	strb.w	r6, [r4, #372]	; 0x174
    6adc:	mov.w	r6, #81	; 0x51
      _b = b;
    6ae0:	strb.w	r1, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ae4:	movs	r1, #0
      _s = s;
    6ae6:	strb.w	r6, [r4, #380]	; 0x17c
      _b = b;
    6aea:	mov.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aee:	str.w	r1, [r4, #400]	; 0x190
      _s = s;
      _b = b;
    6af2:	strb.w	r6, [r4, #381]	; 0x17d
    6af6:	mov.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6afa:	str.w	fp, [r4, #360]	; 0x168
      _s = s;
    6afe:	strb.w	r1, [r4, #404]	; 0x194
      _b = b;
    6b02:	strb.w	r1, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b06:	movs	r1, #0
      _s = s;
      _b = b;
    6b08:	strb.w	r6, [r4, #429]	; 0x1ad
    6b0c:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b10:	str.w	r1, [r4, #408]	; 0x198
      _s = s;
    6b14:	strb.w	r1, [r4, #412]	; 0x19c
      _b = b;
    6b18:	strb.w	r1, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b1c:	movs	r1, #0
      _s = s;
      _b = b;
    6b1e:	strb.w	r6, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b22:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b26:	str.w	r1, [r4, #416]	; 0x1a0
      _s = s;
    6b2a:	strb.w	r1, [r4, #420]	; 0x1a4
      _b = b;
    6b2e:	strb.w	r1, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b32:	movw	r1, #355	; 0x163
      _s = s;
    6b36:	strb.w	r6, [r4, #444]	; 0x1bc
      _b = b;
    6b3a:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b3e:	str.w	r1, [r4, #424]	; 0x1a8
      _s = s;
    6b42:	mov.w	r1, #4294967295
      _b = b;
    6b46:	strb.w	r6, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b4a:	mvn.w	r6, #67	; 0x43
    6b4e:	strb.w	r1, [r4, #428]	; 0x1ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b52:	movw	r1, #325	; 0x145
      _s = s;
    6b56:	strb.w	r6, [r4, #452]	; 0x1c4
      _b = b;
    6b5a:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b5e:	str.w	r1, [r4, #432]	; 0x1b0
      _s = s;
    6b62:	mov.w	r1, #4294967295
      _b = b;
    6b66:	strb.w	r6, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b6a:	mvn.w	r6, #119	; 0x77
    6b6e:	strb.w	r1, [r4, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b72:	mov.w	r1, #300	; 0x12c
      _s = s;
    6b76:	strb.w	r6, [r4, #460]	; 0x1cc
    6b7a:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b7e:	str.w	r1, [r4, #440]	; 0x1b8
    6b82:	mov.w	r1, #276	; 0x114
      _s = s;
    6b86:	strb.w	r6, [r4, #468]	; 0x1d4
      _b = b;
    6b8a:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b8e:	str.w	r1, [r4, #456]	; 0x1c8
    6b92:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    6b96:	strb.w	r6, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b9a:	mov.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b9e:	str.w	r1, [r4, #464]	; 0x1d0
    6ba2:	movs	r1, #210	; 0xd2
      _s = s;
    6ba4:	strb.w	r6, [r4, #476]	; 0x1dc
      _b = b;
    6ba8:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bac:	str.w	r1, [r4, #472]	; 0x1d8
    6bb0:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    6bb2:	strb.w	r6, [r4, #477]	; 0x1dd
    6bb6:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bba:	str.w	r1, [r4, #480]	; 0x1e0
    6bbe:	movs	r1, #190	; 0xbe
      _s = s;
      _b = b;
    6bc0:	strb.w	r6, [r4, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bc4:	mvn.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bc8:	str.w	r1, [r4, #488]	; 0x1e8
    6bcc:	movw	r1, #279	; 0x117
      _s = s;
    6bd0:	strb.w	r6, [r4, #492]	; 0x1ec
      _b = b;
    6bd4:	mvn.w	r6, #59	; 0x3b
    6bd8:	strb.w	r8, [r4, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bdc:	strb.w	sl, [r4, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6be0:	str.w	r1, [r4, #448]	; 0x1c0
    6be4:	movs	r1, #191	; 0xbf
      _s = s;
      _b = b;
    6be6:	strb.w	r6, [r4, #493]	; 0x1ed
    6bea:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bee:	str.w	r1, [r4, #496]	; 0x1f0
    6bf2:	movs	r1, #229	; 0xe5
      _s = s;
      _b = b;
    6bf4:	strb.w	r6, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bf8:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bfc:	str.w	r1, [r4, #512]	; 0x200
    6c00:	mov.w	r1, #288	; 0x120
      _s = s;
    6c04:	strb.w	r6, [r4, #508]	; 0x1fc
      _b = b;
    6c08:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c0c:	str.w	r1, [r4, #520]	; 0x208
    6c10:	mov.w	r1, #328	; 0x148
      _s = s;
      _b = b;
    6c14:	strb.w	r6, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c18:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c1c:	str.w	r1, [r4, #528]	; 0x210
      _s = s;
    6c20:	mov.w	r1, #4294967295
    6c24:	strb.w	r6, [r4, #516]	; 0x204
      _b = b;
    6c28:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c2c:	strb.w	r1, [r4, #532]	; 0x214
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c30:	mov.w	r1, #318	; 0x13e
      _s = s;
      _b = b;
    6c34:	strb.w	r6, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c38:	mvn.w	r6, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c3c:	str.w	r1, [r4, #536]	; 0x218
    6c40:	movw	r1, #307	; 0x133
      _s = s;
    6c44:	strb.w	r6, [r4, #524]	; 0x20c
      _b = b;
    6c48:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c4c:	str.w	r1, [r4, #544]	; 0x220
    6c50:	movs	r1, #212	; 0xd4
      _s = s;
      _b = b;
    6c52:	strb.w	r6, [r4, #525]	; 0x20d
    6c56:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c5a:	str.w	r1, [r4, #552]	; 0x228
    6c5e:	movs	r1, #173	; 0xad
      _s = s;
      _b = b;
    6c60:	strb.w	r6, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c64:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c68:	str.w	r1, [r4, #568]	; 0x238
    6c6c:	movs	r1, #0
      _s = s;
    6c6e:	strb.w	r6, [r4, #540]	; 0x21c
      _b = b;
    6c72:	mov.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c76:	strb.w	lr, [r4, #500]	; 0x1f4
      _b = b;
    6c7a:	strb.w	r6, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c7e:	mov.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c82:	str.w	r3, [r4, #560]	; 0x230
      _s = s;
    6c86:	strb.w	r6, [r4, #548]	; 0x224
      _b = b;
    6c8a:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c8e:	str.w	r1, [r4, #576]	; 0x240
      _s = s;
      _b = b;
    6c92:	strb.w	r6, [r4, #549]	; 0x225
    6c96:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c9a:	strb.w	r1, [r4, #580]	; 0x244
      _b = b;
    6c9e:	strb.w	r6, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ca2:	mov.w	r6, #92	; 0x5c
    6ca6:	strb.w	r0, [r4, #556]	; 0x22c
    6caa:	strb.w	r6, [r4, #564]	; 0x234
      _b = b;
    6cae:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cb2:	str.w	sl, [r4, #504]	; 0x1f8
      _s = s;
      _b = b;
    6cb6:	strb.w	r6, [r4, #565]	; 0x235
    6cba:	mov.w	r6, #121	; 0x79
    6cbe:	strb.w	r6, [r4, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cc2:	mov.w	r6, #59	; 0x3b
    6cc6:	strb.w	r6, [r4, #572]	; 0x23c
      _b = b;
    6cca:	mov.w	r6, #49	; 0x31
    6cce:	strb.w	r1, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cd2:	movs	r1, #0
      _s = s;
      _b = b;
    6cd4:	strb.w	r6, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cd8:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cdc:	str.w	r1, [r4, #584]	; 0x248
      _s = s;
    6ce0:	strb.w	r6, [r4, #612]	; 0x264
      _b = b;
    6ce4:	mvn.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ce8:	strb.w	r1, [r4, #588]	; 0x24c
      _b = b;
    6cec:	strb.w	r6, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cf0:	mvn.w	r6, #22
      _b = b;
    6cf4:	strb.w	r1, [r4, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cf8:	movs	r1, #0
      _s = s;
    6cfa:	strb.w	r6, [r4, #620]	; 0x26c
      _b = b;
    6cfe:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d02:	str.w	r1, [r4, #592]	; 0x250
      _s = s;
      _b = b;
    6d06:	strb.w	r6, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d0a:	mvn.w	r6, #82	; 0x52
    6d0e:	strb.w	r1, [r4, #596]	; 0x254
      _b = b;
    6d12:	strb.w	r1, [r4, #597]	; 0x255
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d16:	movw	r1, #313	; 0x139
      _s = s;
    6d1a:	strb.w	r6, [r4, #628]	; 0x274
    6d1e:	mov.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d22:	str.w	r1, [r4, #600]	; 0x258
      _s = s;
    6d26:	mov.w	r1, #4294967295
    6d2a:	strb.w	r6, [r4, #636]	; 0x27c
      _b = b;
    6d2e:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d32:	strb.w	r1, [r4, #604]	; 0x25c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d36:	movw	r1, #327	; 0x147
      _s = s;
      _b = b;
    6d3a:	strb.w	r6, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d3e:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d42:	str.w	r1, [r4, #608]	; 0x260
    6d46:	str.w	r1, [r4, #616]	; 0x268
    6d4a:	movw	r1, #305	; 0x131
      _s = s;
    6d4e:	strb.w	r6, [r4, #652]	; 0x28c
      _b = b;
    6d52:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d56:	str.w	r1, [r4, #624]	; 0x270
    6d5a:	str.w	r1, [r4, #632]	; 0x278
    6d5e:	mov.w	r1, #262	; 0x106
      _s = s;
      _b = b;
    6d62:	strb.w	r6, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d66:	mov.w	r6, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d6a:	str.w	r1, [r4, #648]	; 0x288
    6d6e:	movs	r1, #228	; 0xe4
      _s = s;
    6d70:	strb.w	r6, [r4, #660]	; 0x294
    6d74:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d78:	str.w	r1, [r4, #656]	; 0x290
    6d7c:	movs	r1, #191	; 0xbf
      _s = s;
    6d7e:	strb.w	r6, [r4, #668]	; 0x29c
      _b = b;
    6d82:	mvn.w	r6, #17
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d86:	str.w	r1, [r4, #664]	; 0x298
    6d8a:	movw	r1, #269	; 0x10d
      _s = s;
      _b = b;
    6d8e:	strb.w	r6, [r4, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d92:	mov.w	r6, #76	; 0x4c
      _b = b;
    6d96:	strb.w	r2, [r4, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d9a:	str.w	r1, [r4, #640]	; 0x280
    6d9e:	movs	r1, #201	; 0xc9
      _s = s;
      _b = b;
    6da0:	strb.w	r8, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6da4:	strb.w	r6, [r4, #644]	; 0x284
    6da8:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dac:	str.w	r1, [r4, #672]	; 0x2a0
    6db0:	movs	r1, #188	; 0xbc
      _s = s;
    6db2:	strb.w	r6, [r4, #676]	; 0x2a4
      _b = b;
    6db6:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dba:	str.w	r1, [r4, #696]	; 0x2b8
    6dbe:	movs	r1, #197	; 0xc5
      _s = s;
      _b = b;
    6dc0:	strb.w	r6, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dc4:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dc8:	str.w	r1, [r4, #704]	; 0x2c0
    6dcc:	mov.w	r1, #298	; 0x12a
      _s = s;
    6dd0:	strb.w	r6, [r4, #684]	; 0x2ac
      _b = b;
    6dd4:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dd8:	str.w	r1, [r4, #712]	; 0x2c8
    6ddc:	mov.w	r1, #330	; 0x14a
      _s = s;
      _b = b;
    6de0:	strb.w	r6, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6de4:	mov.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6de8:	str.w	r1, [r4, #720]	; 0x2d0
      _s = s;
    6dec:	mov.w	r1, #4294967295
    6df0:	strb.w	r6, [r4, #692]	; 0x2b4
      _b = b;
    6df4:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6df8:	strb.w	r1, [r4, #724]	; 0x2d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dfc:	mov.w	r1, #322	; 0x142
      _s = s;
      _b = b;
    6e00:	strb.w	r6, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e04:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e08:	str.w	r1, [r4, #728]	; 0x2d8
      _s = s;
    6e0c:	mov.w	r1, #4294967295
    6e10:	strb.w	r6, [r4, #700]	; 0x2bc
      _b = b;
    6e14:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e18:	strb.w	r1, [r4, #732]	; 0x2dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e1c:	movw	r1, #293	; 0x125
      _s = s;
      _b = b;
    6e20:	strb.w	r6, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e24:	mov.w	r6, #42	; 0x2a
      _b = b;
    6e28:	strb.w	ip, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e2c:	strb.w	r6, [r4, #708]	; 0x2c4
      _b = b;
    6e30:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e34:	str.w	r2, [r4, #688]	; 0x2b0
      _s = s;
      _b = b;
    6e38:	strb.w	r6, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e3c:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e40:	str.w	r2, [r4, #744]	; 0x2e8
      _s = s;
    6e44:	strb.w	r6, [r4, #716]	; 0x2cc
      _b = b;
    6e48:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e4c:	str.w	r3, [r4, #752]	; 0x2f0
      _s = s;
      _b = b;
    6e50:	strb.w	r6, [r4, #717]	; 0x2cd
    6e54:	mvn.w	r6, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e58:	str.w	r9, [r4, #680]	; 0x2a8
      _s = s;
      _b = b;
    6e5c:	strb.w	r6, [r4, #725]	; 0x2d5
    6e60:	mvn.w	r6, #89	; 0x59
    6e64:	strb.w	r6, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e68:	mov.w	r6, #76	; 0x4c
    6e6c:	strb.w	r6, [r4, #740]	; 0x2e4
      _b = b;
    6e70:	mvn.w	r6, #45	; 0x2d
    6e74:	strb.w	r6, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e78:	mov.w	r6, #56	; 0x38
    6e7c:	strb.w	r6, [r4, #748]	; 0x2ec
      _b = b;
    6e80:	mvn.w	r6, #34	; 0x22
    6e84:	strb.w	r6, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e88:	mov.w	r6, #101	; 0x65
    6e8c:	strb.w	r6, [r4, #756]	; 0x2f4
      _b = b;
    6e90:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e94:	str.w	r1, [r4, #736]	; 0x2e0
    6e98:	movs	r1, #190	; 0xbe
      _s = s;
      _b = b;
    6e9a:	strb.w	r6, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e9e:	mvn.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ea2:	str.w	r1, [r4, #760]	; 0x2f8
    6ea6:	movs	r1, #0
      _s = s;
    6ea8:	strb.w	r6, [r4, #764]	; 0x2fc
      _b = b;
    6eac:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eb0:	str.w	r1, [r4, #768]	; 0x300
      _s = s;
      _b = b;
    6eb4:	strb.w	r6, [r4, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6eb8:	mov.w	r6, #27
    6ebc:	strb.w	r1, [r4, #772]	; 0x304
    6ec0:	strb.w	r6, [r4, #788]	; 0x314
      _b = b;
    6ec4:	mov.w	r6, #65	; 0x41
    6ec8:	strb.w	r1, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ecc:	movs	r1, #0
      _s = s;
      _b = b;
    6ece:	strb.w	r6, [r4, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ed2:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ed6:	str.w	r1, [r4, #776]	; 0x308
      _s = s;
    6eda:	strb.w	r6, [r4, #796]	; 0x31c
      _b = b;
    6ede:	mvn.w	r6, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ee2:	strb.w	r1, [r4, #780]	; 0x30c
      _b = b;
    6ee6:	strb.w	r6, [r4, #797]	; 0x31d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6eea:	mov.w	r6, #103	; 0x67
      _b = b;
    6eee:	strb.w	r1, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ef2:	movs	r1, #77	; 0x4d
      _s = s;
    6ef4:	strb.w	r6, [r4, #804]	; 0x324
      _b = b;
    6ef8:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6efc:	str.w	r1, [r4, #784]	; 0x310
    6f00:	movw	r1, #313	; 0x139
      _s = s;
      _b = b;
    6f04:	strb.w	r6, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f08:	mov.w	r6, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f0c:	str.w	r1, [r4, #792]	; 0x318
    6f10:	mov.w	r1, #316	; 0x13c
      _s = s;
    6f14:	strb.w	r6, [r4, #812]	; 0x32c
      _b = b;
    6f18:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f1c:	str.w	r1, [r4, #800]	; 0x320
    6f20:	mov.w	r1, #312	; 0x138
      _s = s;
      _b = b;
    6f24:	strb.w	r6, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f28:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f2c:	str.w	r1, [r4, #808]	; 0x328
    6f30:	mov.w	r1, #258	; 0x102
      _s = s;
    6f34:	strb.w	r6, [r4, #820]	; 0x334
      _b = b;
    6f38:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f3c:	str.w	r1, [r4, #832]	; 0x340
    6f40:	mov.w	r1, #268	; 0x10c
      _s = s;
      _b = b;
    6f44:	strb.w	r6, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f48:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f4c:	str.w	r1, [r4, #840]	; 0x348
    6f50:	mov.w	r1, #292	; 0x124
      _s = s;
    6f54:	strb.w	r6, [r4, #828]	; 0x33c
      _b = b;
    6f58:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f5c:	str.w	r1, [r4, #816]	; 0x330
    6f60:	movw	r1, #263	; 0x107
      _s = s;
      _b = b;
    6f64:	strb.w	r6, [r4, #829]	; 0x33d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f68:	mov.w	r6, #45	; 0x2d
    6f6c:	strb.w	r6, [r4, #836]	; 0x344
      _b = b;
    6f70:	mvn.w	r6, #32
    6f74:	strb.w	r6, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f78:	mov.w	r6, #57	; 0x39
    6f7c:	strb.w	r6, [r4, #844]	; 0x34c
      _b = b;
    6f80:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f84:	str.w	r1, [r4, #824]	; 0x338
    6f88:	movs	r1, #209	; 0xd1
      _s = s;
      _b = b;
    6f8a:	strb.w	r6, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f8e:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f92:	str.w	r1, [r4, #848]	; 0x350
    6f96:	movs	r1, #196	; 0xc4
      _s = s;
    6f98:	strb.w	r6, [r4, #852]	; 0x354
      _b = b;
    6f9c:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fa0:	str.w	r1, [r4, #864]	; 0x360
    6fa4:	movs	r1, #208	; 0xd0
      _s = s;
      _b = b;
    6fa6:	strb.w	r6, [r4, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6faa:	mov.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fae:	str.w	r1, [r4, #896]	; 0x380
    6fb2:	movw	r1, #323	; 0x143
      _s = s;
    6fb6:	strb.w	r6, [r4, #860]	; 0x35c
      _b = b;
    6fba:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fbe:	str.w	r1, [r4, #912]	; 0x390
      _s = s;
    6fc2:	mov.w	r1, #4294967295
      _b = b;
    6fc6:	strb.w	r6, [r4, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fca:	mov.w	r6, #87	; 0x57
    6fce:	strb.w	r1, [r4, #916]	; 0x394
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fd2:	mov.w	r1, #306	; 0x132
      _s = s;
    6fd6:	strb.w	r6, [r4, #868]	; 0x364
      _b = b;
    6fda:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fde:	str.w	r1, [r4, #920]	; 0x398
    6fe2:	movs	r1, #215	; 0xd7
      _s = s;
      _b = b;
    6fe4:	strb.w	r6, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fe8:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fec:	str.w	r1, [r4, #928]	; 0x3a0
    6ff0:	mov.w	r1, #302	; 0x12e
      _s = s;
    6ff4:	strb.w	r6, [r4, #876]	; 0x36c
      _b = b;
    6ff8:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ffc:	str.w	r3, [r4, #872]	; 0x368
      _s = s;
      _b = b;
    7000:	strb.w	r6, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7004:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7008:	str.w	fp, [r4, #856]	; 0x358
      _s = s;
    700c:	strb.w	r6, [r4, #884]	; 0x374
      _b = b;
    7010:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7014:	str.w	r9, [r4, #880]	; 0x370
      _s = s;
      _b = b;
    7018:	strb.w	r6, [r4, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    701c:	mvn.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7020:	str.w	fp, [r4, #888]	; 0x378
      _s = s;
    7024:	strb.w	r6, [r4, #892]	; 0x37c
      _b = b;
    7028:	mvn.w	r6, #52	; 0x34
    702c:	strb.w	r6, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7030:	mov.w	r6, #31
    7034:	strb.w	r6, [r4, #900]	; 0x384
      _b = b;
    7038:	mvn.w	r6, #23
    703c:	strb.w	r6, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7040:	mvn.w	r6, #112	; 0x70
    7044:	strb.w	r6, [r4, #908]	; 0x38c
      _b = b;
    7048:	mvn.w	r6, #40	; 0x28
    704c:	strb.w	r6, [r4, #909]	; 0x38d
    7050:	mvn.w	r6, #36	; 0x24
    7054:	strb.w	r6, [r4, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7058:	mvn.w	r6, #80	; 0x50
    705c:	strb.w	r6, [r4, #924]	; 0x39c
      _b = b;
    7060:	mvn.w	r6, #56	; 0x38
    7064:	strb.w	r6, [r4, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7068:	mov.w	r6, #59	; 0x3b
    706c:	strb.w	r6, [r4, #932]	; 0x3a4
      _b = b;
    7070:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7074:	str.w	r1, [r4, #904]	; 0x388
    7078:	movs	r1, #174	; 0xae
      _s = s;
      _b = b;
    707a:	strb.w	r6, [r4, #933]	; 0x3a5
    707e:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7082:	str.w	r1, [r4, #936]	; 0x3a8
    7086:	movs	r1, #208	; 0xd0
      _s = s;
      _b = b;
    7088:	strb.w	r6, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    708c:	mvn.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7090:	str.w	r1, [r4, #944]	; 0x3b0
    7094:	movs	r1, #214	; 0xd6
      _s = s;
    7096:	strb.w	r6, [r4, #948]	; 0x3b4
      _b = b;
    709a:	mvn.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    709e:	str.w	r1, [r4, #952]	; 0x3b8
    70a2:	movs	r1, #0
      _s = s;
      _b = b;
    70a4:	strb.w	r6, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70a8:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ac:	str.w	r1, [r4, #960]	; 0x3c0
      _s = s;
    70b0:	strb.w	r6, [r4, #956]	; 0x3bc
      _b = b;
    70b4:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70b8:	strb.w	r1, [r4, #964]	; 0x3c4
      _b = b;
    70bc:	strb.w	r6, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70c0:	mvn.w	r6, #77	; 0x4d
      _b = b;
    70c4:	strb.w	r1, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70c8:	movs	r1, #222	; 0xde
      _s = s;
    70ca:	strb.w	r6, [r4, #972]	; 0x3cc
    70ce:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70d2:	str.w	r1, [r4, #984]	; 0x3d8
    70d6:	mov.w	r1, #304	; 0x130
      _s = s;
    70da:	strb.w	r6, [r4, #980]	; 0x3d4
      _b = b;
    70de:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70e2:	str.w	r1, [r4, #992]	; 0x3e0
      _s = s;
      _b = b;
    70e6:	strb.w	r6, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    70ea:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ee:	str.w	r1, [r4, #1000]	; 0x3e8
    70f2:	mov.w	r1, #276	; 0x114
      _s = s;
    70f6:	strb.w	r6, [r4, #988]	; 0x3dc
      _b = b;
    70fa:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70fe:	str.w	r1, [r4, #1008]	; 0x3f0
    7102:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    7104:	strb.w	r6, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7108:	mov.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    710c:	str.w	r1, [r4, #1016]	; 0x3f8
    7110:	mov.w	r1, #282	; 0x11a
      _s = s;
    7114:	strb.w	r6, [r4, #996]	; 0x3e4
    7118:	mov.w	r6, #116	; 0x74
      _b = b;
    711c:	strb.w	r7, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7120:	strb.w	r6, [r4, #1004]	; 0x3ec
      _b = b;
    7124:	mvn.w	r6, #75	; 0x4b
    7128:	strb.w	r2, [r4, #997]	; 0x3e5
    712c:	strb.w	r6, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7130:	mov.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7134:	str.w	r8, [r4, #976]	; 0x3d0
      _s = s;
    7138:	strb.w	r6, [r4, #1012]	; 0x3f4
      _b = b;
    713c:	mvn.w	r6, #50	; 0x32
    7140:	strb.w	r6, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7144:	mov.w	r6, #25
    7148:	strb.w	r6, [r4, #1020]	; 0x3fc
    714c:	mov.w	r6, #50	; 0x32
    7150:	strb.w	r6, [r4, #940]	; 0x3ac
      _b = b;
    7154:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7158:	str.w	r1, [r4, #968]	; 0x3c8
    715c:	movs	r1, #210	; 0xd2
      _s = s;
      _b = b;
    715e:	strb.w	r6, [r4, #1021]	; 0x3fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7162:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7166:	str.w	r1, [r4, #1024]	; 0x400
    716a:	movs	r1, #225	; 0xe1
      _s = s;
    716c:	strb.w	r6, [r4, #1028]	; 0x404
      _b = b;
    7170:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7174:	str.w	r1, [r4, #1032]	; 0x408
    7178:	movs	r1, #205	; 0xcd
      _s = s;
      _b = b;
    717a:	strb.w	r6, [r4, #1029]	; 0x405
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    717e:	mov.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7182:	str.w	r1, [r4, #1040]	; 0x410
    7186:	movs	r1, #201	; 0xc9
      _s = s;
    7188:	strb.w	r6, [r4, #1036]	; 0x40c
    718c:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7190:	str.w	r1, [r4, #1048]	; 0x418
    7194:	movs	r1, #225	; 0xe1
      _s = s;
    7196:	strb.w	r6, [r4, #1044]	; 0x414
      _b = b;
    719a:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    719e:	str.w	r1, [r4, #1056]	; 0x420
    71a2:	movs	r1, #205	; 0xcd
      _s = s;
      _b = b;
    71a4:	strb.w	r6, [r4, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71a8:	mov.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71ac:	str.w	r1, [r4, #1064]	; 0x428
    71b0:	movs	r1, #183	; 0xb7
      _s = s;
    71b2:	strb.w	r6, [r4, #1052]	; 0x41c
      _b = b;
    71b6:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71ba:	str.w	r1, [r4, #1080]	; 0x438
    71be:	movs	r1, #166	; 0xa6
      _s = s;
      _b = b;
    71c0:	strb.w	r6, [r4, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71c4:	mov.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71c8:	str.w	r1, [r4, #1088]	; 0x440
    71cc:	mov.w	r1, #302	; 0x12e
      _s = s;
    71d0:	strb.w	r6, [r4, #1060]	; 0x424
      _b = b;
    71d4:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71d8:	str.w	r1, [r4, #1096]	; 0x448
    71dc:	mov.w	r1, #308	; 0x134
      _s = s;
      _b = b;
    71e0:	strb.w	r6, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71e4:	mov.w	r6, #118	; 0x76
      _b = b;
    71e8:	strb.w	ip, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71ec:	strb.w	r6, [r4, #1068]	; 0x42c
    71f0:	mov.w	r6, #126	; 0x7e
      _b = b;
    71f4:	strb.w	ip, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71f8:	strb.w	r6, [r4, #1076]	; 0x434
      _b = b;
    71fc:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7200:	str.w	r3, [r4, #1072]	; 0x430
      _s = s;
      _b = b;
    7204:	strb.w	r6, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7208:	mov.w	r6, #101	; 0x65
    720c:	strb.w	r0, [r4, #1092]	; 0x444
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7210:	mov.w	r0, #256	; 0x100
      _s = s;
    7214:	strb.w	r6, [r4, #1084]	; 0x43c
      _b = b;
    7218:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    721c:	str.w	r1, [r4, #1104]	; 0x450
    7220:	movw	r1, #267	; 0x10b
      _s = s;
      _b = b;
    7224:	strb.w	r6, [r4, #1085]	; 0x43d
    7228:	mvn.w	r6, #18
    722c:	strb.w	r6, [r4, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7230:	mvn.w	r6, #97	; 0x61
    7234:	strb.w	r6, [r4, #1100]	; 0x44c
      _b = b;
    7238:	mvn.w	r6, #43	; 0x2b
    723c:	strb.w	r6, [r4, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7240:	mvn.w	r6, #90	; 0x5a
    7244:	strb.w	r6, [r4, #1108]	; 0x454
      _b = b;
    7248:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    724c:	str.w	r1, [r4, #1112]	; 0x458
    7250:	movs	r1, #173	; 0xad
      _s = s;
      _b = b;
    7252:	strb.w	r6, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7256:	mov.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    725a:	str.w	r1, [r4, #1120]	; 0x460
    725e:	movs	r1, #188	; 0xbc
      _s = s;
    7260:	strb.w	r6, [r4, #1116]	; 0x45c
      _b = b;
    7264:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7268:	str.w	r1, [r4, #1128]	; 0x468
    726c:	movs	r1, #34	; 0x22
      _s = s;
      _b = b;
    726e:	strb.w	r6, [r4, #1117]	; 0x45d
    7272:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7276:	str.w	r1, [r4, #1136]	; 0x470
      _s = s;
      _b = b;
    727a:	mvn.w	r1, #64	; 0x40
    727e:	strb.w	r6, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7282:	mov.w	r6, #60	; 0x3c
      _b = b;
    7286:	strb.w	r1, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    728a:	movs	r1, #0
      _s = s;
    728c:	strb.w	r6, [r4, #1132]	; 0x46c
      _b = b;
    7290:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7294:	str.w	r1, [r4, #1144]	; 0x478
      _s = s;
      _b = b;
    7298:	strb.w	r6, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    729c:	mov.w	r6, #102	; 0x66
    72a0:	strb.w	r1, [r4, #1148]	; 0x47c
    72a4:	strb.w	r6, [r4, #1140]	; 0x474
      _b = b;
    72a8:	mov.w	r6, #125	; 0x7d
    72ac:	strb.w	r1, [r4, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72b0:	movs	r1, #0
      _s = s;
      _b = b;
    72b2:	strb.w	r6, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72b6:	mov.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72ba:	str.w	r1, [r4, #1152]	; 0x480
      _s = s;
    72be:	strb.w	r6, [r4, #1172]	; 0x494
      _b = b;
    72c2:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72c6:	strb.w	r1, [r4, #1156]	; 0x484
      _b = b;
    72ca:	strb.w	r6, [r4, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72ce:	mvn.w	r6, #76	; 0x4c
      _b = b;
    72d2:	strb.w	r1, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72d6:	movs	r1, #0
      _s = s;
    72d8:	strb.w	r6, [r4, #1180]	; 0x49c
      _b = b;
    72dc:	mvn.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72e0:	str.w	r1, [r4, #1160]	; 0x488
    72e4:	movs	r1, #196	; 0xc4
      _s = s;
      _b = b;
    72e6:	strb.w	r6, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72ea:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72ee:	str.w	r1, [r4, #1176]	; 0x498
    72f2:	movs	r1, #204	; 0xcc
      _s = s;
    72f4:	strb.w	r6, [r4, #1188]	; 0x4a4
      _b = b;
    72f8:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72fc:	str.w	r1, [r4, #1184]	; 0x4a0
    7300:	movs	r1, #226	; 0xe2
      _s = s;
      _b = b;
    7302:	strb.w	r6, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7306:	mov.w	r6, #60	; 0x3c
    730a:	strb.w	r7, [r4, #1164]	; 0x48c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    730e:	mov.w	r7, #266	; 0x10a
      _s = s;
    7312:	strb.w	r6, [r4, #1196]	; 0x4ac
    7316:	mov.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    731a:	str.w	r1, [r4, #1192]	; 0x4a8
      _s = s;
      _b = b;
    731e:	mvn.w	r1, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7322:	str.w	sl, [r4, #1168]	; 0x490
      _s = s;
    7326:	strb.w	r6, [r4, #1124]	; 0x464
    732a:	mov.w	r6, #45	; 0x2d
      _b = b;
    732e:	strb.w	r1, [r4, #1197]	; 0x4ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7332:	movw	r1, #257	; 0x101
      _s = s;
    7336:	strb.w	r6, [r4, #1204]	; 0x4b4
      _b = b;
    733a:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    733e:	str.w	r1, [r4, #1200]	; 0x4b0
    7342:	movs	r1, #180	; 0xb4
      _s = s;
      _b = b;
    7344:	strb.w	r6, [r4, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7348:	mov.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    734c:	str.w	r1, [r4, #1208]	; 0x4b8
    7350:	movs	r1, #210	; 0xd2
      _s = s;
    7352:	strb.w	r6, [r4, #1212]	; 0x4bc
      _b = b;
    7356:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    735a:	str.w	r1, [r4, #1216]	; 0x4c0
    735e:	movs	r1, #243	; 0xf3
      _s = s;
      _b = b;
    7360:	strb.w	r6, [r4, #1213]	; 0x4bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7364:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7368:	str.w	r1, [r4, #1224]	; 0x4c8
    736c:	movs	r1, #244	; 0xf4
      _s = s;
    736e:	strb.w	r6, [r4, #1220]	; 0x4c4
      _b = b;
    7372:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7376:	str.w	r1, [r4, #1232]	; 0x4d0
    737a:	movs	r1, #220	; 0xdc
      _s = s;
      _b = b;
    737c:	strb.w	r6, [r4, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7380:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7384:	str.w	r1, [r4, #1240]	; 0x4d8
    7388:	movs	r1, #173	; 0xad
      _s = s;
    738a:	strb.w	r6, [r4, #1228]	; 0x4cc
    738e:	mvn.w	r6, #127	; 0x7f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7392:	str.w	r1, [r4, #1248]	; 0x4e0
    7396:	movs	r1, #190	; 0xbe
      _s = s;
    7398:	strb.w	r6, [r4, #1236]	; 0x4d4
      _b = b;
    739c:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73a0:	str.w	r1, [r4, #1256]	; 0x4e8
    73a4:	movs	r1, #183	; 0xb7
      _s = s;
      _b = b;
    73a6:	strb.w	r6, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73aa:	mov.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73ae:	str.w	r1, [r4, #1264]	; 0x4f0
      _s = s;
    73b2:	strb.w	r6, [r4, #1244]	; 0x4dc
      _b = b;
    73b6:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73ba:	str.w	r1, [r4, #1272]	; 0x4f8
    73be:	movs	r1, #174	; 0xae
      _s = s;
      _b = b;
    73c0:	strb.w	r6, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73c4:	mov.w	r6, #49	; 0x31
      _b = b;
    73c8:	strb.w	r2, [r4, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73cc:	strb.w	r6, [r4, #1252]	; 0x4e4
      _b = b;
    73d0:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d4:	str.w	r1, [r4, #1280]	; 0x500
    73d8:	movw	r1, #283	; 0x11b
      _s = s;
      _b = b;
    73dc:	strb.w	r6, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73e0:	mvn.w	r6, #120	; 0x78
    73e4:	strb.w	r6, [r4, #1260]	; 0x4ec
      _b = b;
    73e8:	mvn.w	r6, #52	; 0x34
    73ec:	strb.w	r6, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73f0:	mov.w	r6, #107	; 0x6b
    73f4:	strb.w	r6, [r4, #1268]	; 0x4f4
      _b = b;
    73f8:	mvn.w	r6, #40	; 0x28
    73fc:	strb.w	r6, [r4, #1269]	; 0x4f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7400:	mov.w	r6, #94	; 0x5e
    7404:	strb.w	r6, [r4, #1276]	; 0x4fc
      _b = b;
    7408:	mvn.w	r6, #38	; 0x26
    740c:	strb.w	r6, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7410:	mov.w	r6, #59	; 0x3b
    7414:	strb.w	r6, [r4, #1284]	; 0x504
      _b = b;
    7418:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    741c:	str.w	r1, [r4, #1288]	; 0x508
    7420:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    7422:	strb.w	r6, [r4, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7426:	mov.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    742a:	str.w	r1, [r4, #1296]	; 0x510
    742e:	movs	r1, #166	; 0xa6
      _s = s;
    7430:	strb.w	r6, [r4, #1292]	; 0x50c
      _b = b;
    7434:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7438:	str.w	r1, [r4, #1304]	; 0x518
    743c:	movs	r1, #178	; 0xb2
      _s = s;
      _b = b;
    743e:	strb.w	r6, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7442:	mov.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7446:	str.w	r1, [r4, #1312]	; 0x520
    744a:	movs	r1, #34	; 0x22
      _s = s;
    744c:	strb.w	r6, [r4, #1300]	; 0x514
      _b = b;
    7450:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7454:	str.w	r1, [r4, #1320]	; 0x528
    7458:	movs	r1, #48	; 0x30
      _s = s;
      _b = b;
    745a:	strb.w	r6, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    745e:	mov.w	r6, #44	; 0x2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7462:	str.w	r1, [r4, #1328]	; 0x530
    7466:	movs	r1, #0
      _s = s;
    7468:	strb.w	r6, [r4, #1308]	; 0x51c
      _b = b;
    746c:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7470:	str.w	r1, [r4, #1336]	; 0x538
      _s = s;
      _b = b;
    7474:	strb.w	r6, [r4, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7478:	mov.w	r6, #62	; 0x3e
    747c:	strb.w	r1, [r4, #1340]	; 0x53c
    7480:	strb.w	r6, [r4, #1316]	; 0x524
      _b = b;
    7484:	mvn.w	r6, #36	; 0x24
    7488:	strb.w	r1, [r4, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    748c:	movw	r1, #351	; 0x15f
      _s = s;
      _b = b;
    7490:	strb.w	r6, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7494:	mov.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7498:	str.w	r1, [r4, #1344]	; 0x540
    749c:	movw	r1, #327	; 0x147
      _s = s;
    74a0:	strb.w	r6, [r4, #1324]	; 0x52c
      _b = b;
    74a4:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74a8:	str.w	r1, [r4, #1352]	; 0x548
    74ac:	mov.w	r1, #308	; 0x134
      _s = s;
      _b = b;
    74b0:	strb.w	r6, [r4, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74b4:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74b8:	str.w	r1, [r4, #1360]	; 0x550
    74bc:	movs	r1, #205	; 0xcd
      _s = s;
    74be:	strb.w	r6, [r4, #1332]	; 0x534
    74c2:	mov.w	r6, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74c6:	str.w	r1, [r4, #1368]	; 0x558
    74ca:	movs	r1, #227	; 0xe3
      _s = s;
    74cc:	strb.w	r6, [r4, #1348]	; 0x544
      _b = b;
    74d0:	mov.w	r6, #68	; 0x44
    74d4:	strb.w	r9, [r4, #1333]	; 0x535
    74d8:	strb.w	r6, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74dc:	mvn.w	r6, #114	; 0x72
      _b = b;
    74e0:	strb.w	r8, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74e4:	strb.w	r6, [r4, #1356]	; 0x54c
      _b = b;
    74e8:	mvn.w	r6, #33	; 0x21
    74ec:	strb.w	r6, [r4, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74f0:	mov.w	r6, #95	; 0x5f
    74f4:	strb.w	r6, [r4, #1364]	; 0x554
    74f8:	mov.w	r6, #33	; 0x21
    74fc:	strb.w	r6, [r4, #1372]	; 0x55c
      _b = b;
    7500:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7504:	str.w	r1, [r4, #1376]	; 0x560
    7508:	movs	r1, #212	; 0xd4
      _s = s;
      _b = b;
    750a:	strb.w	r6, [r4, #1373]	; 0x55d
    750e:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7512:	str.w	r1, [r4, #1384]	; 0x568
    7516:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    751a:	strb.w	r6, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    751e:	mov.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7522:	str.w	r1, [r4, #1400]	; 0x578
    7526:	movw	r1, #257	; 0x101
      _s = s;
    752a:	strb.w	r6, [r4, #1388]	; 0x56c
      _b = b;
    752e:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7532:	str.w	r1, [r4, #1408]	; 0x580
    7536:	mov.w	r1, #268	; 0x10c
      _s = s;
      _b = b;
    753a:	strb.w	r6, [r4, #1389]	; 0x56d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    753e:	mov.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7542:	str.w	r1, [r4, #1416]	; 0x588
    7546:	movw	r1, #271	; 0x10f
      _s = s;
    754a:	strb.w	r6, [r4, #1396]	; 0x574
      _b = b;
    754e:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7552:	str.w	r1, [r4, #1424]	; 0x590
    7556:	movs	r1, #251	; 0xfb
      _s = s;
      _b = b;
    7558:	strb.w	r6, [r4, #1397]	; 0x575
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    755c:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7560:	str.w	r1, [r4, #1432]	; 0x598
    7564:	movs	r1, #198	; 0xc6
      _s = s;
    7566:	strb.w	r6, [r4, #1404]	; 0x57c
      _b = b;
    756a:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    756e:	str.w	r1, [r4, #1440]	; 0x5a0
    7572:	movs	r1, #179	; 0xb3
      _s = s;
      _b = b;
    7574:	strb.w	r6, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7578:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    757c:	str.w	r3, [r4, #1448]	; 0x5a8
      _s = s;
    7580:	strb.w	r6, [r4, #1412]	; 0x584
      _b = b;
    7584:	mvn.w	r6, #73	; 0x49
    7588:	strb.w	r2, [r4, #1453]	; 0x5ad
    758c:	strb.w	r6, [r4, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7590:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7594:	str.w	r1, [r4, #1456]	; 0x5b0
    7598:	movs	r1, #178	; 0xb2
      _s = s;
    759a:	strb.w	r6, [r4, #1420]	; 0x58c
      _b = b;
    759e:	mvn.w	r6, #75	; 0x4b
    75a2:	strb.w	r6, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75a6:	mvn.w	r6, #63	; 0x3f
    75aa:	strb.w	r6, [r4, #1428]	; 0x594
      _b = b;
    75ae:	mvn.w	r6, #52	; 0x34
    75b2:	strb.w	r6, [r4, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75b6:	mov.w	r6, #115	; 0x73
    75ba:	strb.w	r6, [r4, #1436]	; 0x59c
      _b = b;
    75be:	mvn.w	r6, #45	; 0x2d
    75c2:	strb.w	r6, [r4, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75c6:	mvn.w	r6, #112	; 0x70
    75ca:	strb.w	r6, [r4, #1444]	; 0x5a4
      _b = b;
    75ce:	mvn.w	r6, #47	; 0x2f
    75d2:	strb.w	r6, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75d6:	mvn.w	r6, #57	; 0x39
    75da:	strb.w	r6, [r4, #1452]	; 0x5ac
    75de:	mov.w	r6, #73	; 0x49
    75e2:	strb.w	r6, [r4, #1460]	; 0x5b4
    75e6:	mov.w	r6, #63	; 0x3f
    75ea:	strb.w	r6, [r4, #1380]	; 0x564
      _b = b;
    75ee:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75f2:	str.w	r0, [r4, #1392]	; 0x570
      _s = s;
      _b = b;
    75f6:	strb.w	r6, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75fa:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75fe:	str.w	r1, [r4, #1488]	; 0x5d0
    7602:	movs	r1, #191	; 0xbf
      _s = s;
    7604:	strb.w	r6, [r4, #1468]	; 0x5bc
      _b = b;
    7608:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    760c:	str.w	r1, [r4, #1496]	; 0x5d8
      _s = s;
      _b = b;
    7610:	strb.w	r6, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7614:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7618:	str.w	r1, [r4, #1504]	; 0x5e0
    761c:	movs	r1, #44	; 0x2c
      _s = s;
    761e:	strb.w	r6, [r4, #1476]	; 0x5c4
      _b = b;
    7622:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7626:	str.w	r1, [r4, #1512]	; 0x5e8
    762a:	movs	r1, #30
      _s = s;
      _b = b;
    762c:	strb.w	r6, [r4, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7630:	mov.w	r6, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7634:	str.w	r1, [r4, #1520]	; 0x5f0
      _s = s;
    7638:	mov.w	r1, #4294967295
    763c:	strb.w	r6, [r4, #1484]	; 0x5cc
    7640:	mov.w	r6, #73	; 0x49
    7644:	strb.w	r1, [r4, #1524]	; 0x5f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7648:	movs	r1, #0
      _s = s;
    764a:	strb.w	r6, [r4, #1492]	; 0x5d4
      _b = b;
    764e:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7652:	str.w	r1, [r4, #1528]	; 0x5f8
      _s = s;
      _b = b;
    7656:	strb.w	r6, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    765a:	mov.w	r6, #117	; 0x75
    765e:	strb.w	r1, [r4, #1532]	; 0x5fc
    7662:	strb.w	r6, [r4, #1500]	; 0x5dc
    7666:	mov.w	r6, #61	; 0x3d
      _b = b;
    766a:	strb.w	r1, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    766e:	movw	r1, #321	; 0x141
      _s = s;
    7672:	strb.w	r6, [r4, #1508]	; 0x5e4
      _b = b;
    7676:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    767a:	str.w	r1, [r4, #1536]	; 0x600
    767e:	movw	r1, #329	; 0x149
      _s = s;
      _b = b;
    7682:	strb.w	r6, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7686:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    768a:	str.w	r3, [r4, #1464]	; 0x5b8
      _s = s;
    768e:	strb.w	r6, [r4, #1516]	; 0x5ec
      _b = b;
    7692:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7696:	str.w	r2, [r4, #1472]	; 0x5c0
      _s = s;
      _b = b;
    769a:	strb.w	r6, [r4, #1517]	; 0x5ed
    769e:	mov.w	r6, #71	; 0x47
    76a2:	strb.w	r3, [r4, #1501]	; 0x5dd
    76a6:	strb.w	r6, [r4, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76aa:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76ae:	str.w	r1, [r4, #1544]	; 0x608
    76b2:	movw	r1, #317	; 0x13d
      _s = s;
    76b6:	strb.w	r6, [r4, #1540]	; 0x604
      _b = b;
    76ba:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76be:	str.w	r9, [r4, #1480]	; 0x5c8
      _s = s;
      _b = b;
    76c2:	strb.w	r6, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76c6:	mvn.w	r6, #4
      _b = b;
    76ca:	strb.w	r8, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76ce:	strb.w	r6, [r4, #1548]	; 0x60c
      _b = b;
    76d2:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76d6:	str.w	r1, [r4, #1552]	; 0x610
    76da:	movs	r1, #111	; 0x6f
      _s = s;
      _b = b;
    76dc:	strb.w	r6, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76e0:	mov.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76e4:	str.w	r1, [r4, #1560]	; 0x618
    76e8:	movw	r1, #261	; 0x105
      _s = s;
    76ec:	strb.w	r6, [r4, #1556]	; 0x614
      _b = b;
    76f0:	mvn.w	r6, #21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76f4:	str.w	r1, [r4, #1568]	; 0x620
    76f8:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    76fc:	strb.w	r6, [r4, #1557]	; 0x615
    7700:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7704:	str.w	r1, [r4, #1576]	; 0x628
    7708:	mov.w	r1, #302	; 0x12e
      _s = s;
      _b = b;
    770c:	strb.w	r6, [r4, #1565]	; 0x61d
    7710:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7714:	str.w	r1, [r4, #1584]	; 0x630
    7718:	movw	r1, #283	; 0x11b
      _s = s;
      _b = b;
    771c:	strb.w	r6, [r4, #1573]	; 0x625
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7720:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7724:	str.w	r1, [r4, #1600]	; 0x640
    7728:	mov.w	r1, #274	; 0x112
      _s = s;
    772c:	strb.w	r6, [r4, #1580]	; 0x62c
      _b = b;
    7730:	mvn.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7734:	str.w	r1, [r4, #1608]	; 0x648
    7738:	movw	r1, #269	; 0x10d
      _s = s;
      _b = b;
    773c:	strb.w	r6, [r4, #1581]	; 0x62d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7740:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7744:	str.w	r1, [r4, #1616]	; 0x650
    7748:	movs	r1, #199	; 0xc7
      _s = s;
    774a:	strb.w	r6, [r4, #1588]	; 0x634
      _b = b;
    774e:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7752:	str.w	r1, [r4, #1632]	; 0x660
    7756:	movw	r1, #297	; 0x129
      _s = s;
      _b = b;
    775a:	strb.w	r6, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    775e:	mvn.w	r6, #6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7762:	str.w	r0, [r4, #1624]	; 0x658
      _s = s;
      _b = b;
    7766:	mov.w	r0, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    776a:	strb.w	r6, [r4, #1596]	; 0x63c
      _b = b;
    776e:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7772:	strb.w	fp, [r4, #1620]	; 0x654
      _b = b;
    7776:	strb.w	r6, [r4, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    777a:	mvn.w	r6, #5
    777e:	strb.w	r6, [r4, #1604]	; 0x644
      _b = b;
    7782:	mvn.w	r6, #89	; 0x59
    7786:	strb.w	r6, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    778a:	mvn.w	r6, #14
    778e:	strb.w	r6, [r4, #1612]	; 0x64c
      _b = b;
    7792:	mvn.w	r6, #89	; 0x59
    7796:	strb.w	r6, [r4, #1613]	; 0x64d
    779a:	mvn.w	r6, #55	; 0x37
    779e:	strb.w	r6, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77a2:	mvn.w	r6, #120	; 0x78
    77a6:	strb.w	r6, [r4, #1628]	; 0x65c
      _b = b;
    77aa:	mvn.w	r6, #46	; 0x2e
    77ae:	strb.w	r6, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77b2:	mvn.w	r6, #78	; 0x4e
    77b6:	strb.w	r6, [r4, #1636]	; 0x664
    77ba:	mov.w	r6, #8
    77be:	strb.w	r6, [r4, #1564]	; 0x61c
    77c2:	mov.w	r6, #74	; 0x4a
    77c6:	strb.w	r6, [r4, #1572]	; 0x624
      _b = b;
    77ca:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77ce:	str.w	r1, [r4, #1592]	; 0x638
    77d2:	movs	r1, #188	; 0xbc
      _s = s;
      _b = b;
    77d4:	strb.w	r6, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77d8:	mvn.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77dc:	str.w	r1, [r4, #1640]	; 0x668
    77e0:	movs	r1, #178	; 0xb2
      _s = s;
    77e2:	strb.w	r6, [r4, #1644]	; 0x66c
      _b = b;
    77e6:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77ea:	str.w	r1, [r4, #1648]	; 0x670
    77ee:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    77f0:	strb.w	r6, [r4, #1645]	; 0x66d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77f4:	mov.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77f8:	str.w	r1, [r4, #1688]	; 0x698
    77fc:	movs	r1, #26
      _s = s;
    77fe:	strb.w	r6, [r4, #1652]	; 0x674
      _b = b;
    7802:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7806:	str.w	r1, [r4, #1696]	; 0x6a0
    780a:	movs	r1, #46	; 0x2e
      _s = s;
      _b = b;
    780c:	strb.w	r6, [r4, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7810:	mvn.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7814:	str.w	r1, [r4, #1704]	; 0x6a8
      _s = s;
      _b = b;
    7818:	mvn.w	r1, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    781c:	strb.w	r6, [r4, #1660]	; 0x67c
      _b = b;
    7820:	mvn.w	r6, #45	; 0x2d
    7824:	strb.w	r1, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7828:	movs	r1, #0
      _s = s;
      _b = b;
    782a:	strb.w	r6, [r4, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    782e:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7832:	str.w	r1, [r4, #1712]	; 0x6b0
      _s = s;
    7836:	strb.w	r6, [r4, #1668]	; 0x684
      _b = b;
    783a:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    783e:	strb.w	r1, [r4, #1716]	; 0x6b4
      _b = b;
    7842:	strb.w	r6, [r4, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7846:	mvn.w	r6, #95	; 0x5f
      _b = b;
    784a:	strb.w	r1, [r4, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    784e:	movs	r1, #0
      _s = s;
    7850:	strb.w	r6, [r4, #1676]	; 0x68c
      _b = b;
    7854:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7858:	str.w	r3, [r4, #1664]	; 0x680
      _s = s;
      _b = b;
    785c:	strb.w	r6, [r4, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7860:	mvn.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7864:	str.w	r3, [r4, #1680]	; 0x690
      _s = s;
    7868:	strb.w	r6, [r4, #1684]	; 0x694
      _b = b;
    786c:	mvn.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7870:	str.w	r1, [r4, #1720]	; 0x6b8
      _s = s;
      _b = b;
    7874:	strb.w	r6, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7878:	mvn.w	r6, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    787c:	str.w	r9, [r4, #1656]	; 0x678
      _s = s;
    7880:	strb.w	r6, [r4, #1692]	; 0x69c
      _b = b;
    7884:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7888:	str.w	fp, [r4, #1672]	; 0x688
      _s = s;
      _b = b;
    788c:	strb.w	r6, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7890:	mov.w	r6, #52	; 0x34
    7894:	strb.w	r6, [r4, #1700]	; 0x6a4
      _b = b;
    7898:	mvn.w	r6, #90	; 0x5a
    789c:	strb.w	r6, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78a0:	mvn.w	r6, #77	; 0x4d
    78a4:	strb.w	r6, [r4, #1708]	; 0x6ac
      _b = b;
    78a8:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78ac:	strb.w	r1, [r4, #1724]	; 0x6bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78b0:	mov.w	r1, #294	; 0x126
      _s = s;
      _b = b;
    78b4:	strb.w	r6, [r4, #1733]	; 0x6c5
    78b8:	mvn.w	r6, #26
    78bc:	strb.w	r0, [r4, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78c0:	movw	r0, #333	; 0x14d
      _s = s;
      _b = b;
    78c4:	strb.w	r6, [r4, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78c8:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78cc:	str.w	r0, [r4, #1728]	; 0x6c0
    78d0:	movw	r0, #343	; 0x157
      _s = s;
    78d4:	strb.w	r6, [r4, #1748]	; 0x6d4
      _b = b;
    78d8:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78dc:	str.w	r0, [r4, #1736]	; 0x6c8
      _s = s;
    78e0:	mov.w	r0, #4294967295
      _b = b;
    78e4:	strb.w	r6, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78e8:	mov.w	r6, #16
    78ec:	strb.w	r0, [r4, #1740]	; 0x6cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f0:	movw	r0, #329	; 0x149
      _s = s;
    78f4:	strb.w	r6, [r4, #1756]	; 0x6dc
      _b = b;
    78f8:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78fc:	str.w	r0, [r4, #1744]	; 0x6d0
    7900:	movs	r0, #60	; 0x3c
      _s = s;
      _b = b;
    7902:	strb.w	r6, [r4, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7906:	mov.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    790a:	str.w	r0, [r4, #1752]	; 0x6d8
    790e:	movw	r0, #259	; 0x103
      _s = s;
    7912:	strb.w	r6, [r4, #1764]	; 0x6e4
      _b = b;
    7916:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    791a:	str.w	r0, [r4, #1760]	; 0x6e0
    791e:	movs	r0, #254	; 0xfe
      _s = s;
      _b = b;
    7920:	strb.w	r6, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7924:	mov.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7928:	str.w	r0, [r4, #1768]	; 0x6e8
    792c:	mov.w	r0, #304	; 0x130
      _s = s;
    7930:	strb.w	r6, [r4, #1772]	; 0x6ec
    7934:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7938:	str.w	r0, [r4, #1776]	; 0x6f0
    793c:	mov.w	r0, #312	; 0x138
      _s = s;
    7940:	strb.w	r6, [r4, #1780]	; 0x6f4
      _b = b;
    7944:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7948:	str.w	r0, [r4, #1784]	; 0x6f8
      _s = s;
    794c:	mov.w	r0, #4294967295
      _b = b;
    7950:	strb.w	r6, [r4, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7954:	mvn.w	r6, #12
    7958:	strb.w	r0, [r4, #1788]	; 0x6fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    795c:	movw	r0, #273	; 0x111
      _s = s;
    7960:	strb.w	r6, [r4, #1796]	; 0x704
      _b = b;
    7964:	mvn.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7968:	str.w	r0, [r4, #1792]	; 0x700
    796c:	mov.w	r0, #272	; 0x110
      _s = s;
      _b = b;
    7970:	strb.w	r6, [r4, #1797]	; 0x705
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7974:	mvn.w	r6, #17
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7978:	str.w	r0, [r4, #1800]	; 0x708
    797c:	mov.w	r0, #268	; 0x10c
      _s = s;
    7980:	strb.w	r6, [r4, #1804]	; 0x70c
      _b = b;
    7984:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7988:	strb.w	lr, [r4, #1732]	; 0x6c4
      _b = b;
    798c:	strb.w	r6, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7990:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7994:	str.w	r0, [r4, #1808]	; 0x710
    7998:	mov.w	r0, #260	; 0x104
      _s = s;
      _b = b;
    799c:	strb.w	sl, [r4, #1773]	; 0x6ed
    79a0:	strb.w	r8, [r4, #1781]	; 0x6f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79a4:	strb.w	r6, [r4, #1812]	; 0x714
      _b = b;
    79a8:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79ac:	str.w	r0, [r4, #1816]	; 0x718
    79b0:	movs	r0, #219	; 0xdb
      _s = s;
      _b = b;
    79b2:	strb.w	r6, [r4, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79b6:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79ba:	str.w	r0, [r4, #1824]	; 0x720
    79be:	movs	r0, #181	; 0xb5
      _s = s;
    79c0:	strb.w	r6, [r4, #1820]	; 0x71c
    79c4:	mov.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79c8:	str.w	r0, [r4, #1832]	; 0x728
    79cc:	movs	r0, #202	; 0xca
      _s = s;
    79ce:	strb.w	r6, [r4, #1828]	; 0x724
      _b = b;
    79d2:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79d6:	str.w	r0, [r4, #1848]	; 0x738
    79da:	movs	r0, #179	; 0xb3
      _s = s;
      _b = b;
    79dc:	strb.w	r6, [r4, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79e0:	mov.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79e4:	str.w	r0, [r4, #1856]	; 0x740
    79e8:	movs	r0, #183	; 0xb7
      _s = s;
    79ea:	strb.w	r6, [r4, #1836]	; 0x72c
      _b = b;
    79ee:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79f2:	str.w	r0, [r4, #1864]	; 0x748
    79f6:	movs	r0, #192	; 0xc0
      _s = s;
      _b = b;
    79f8:	strb.w	r6, [r4, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79fc:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a00:	str.w	r0, [r4, #1880]	; 0x758
    7a04:	movs	r0, #36	; 0x24
      _s = s;
    7a06:	strb.w	r6, [r4, #1844]	; 0x734
      _b = b;
    7a0a:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a0e:	str.w	r0, [r4, #1888]	; 0x760
    7a12:	movs	r0, #43	; 0x2b
      _s = s;
      _b = b;
    7a14:	strb.w	r6, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a18:	mov.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a1c:	str.w	r3, [r4, #1840]	; 0x730
      _s = s;
    7a20:	strb.w	r6, [r4, #1852]	; 0x73c
      _b = b;
    7a24:	mvn.w	r6, #52	; 0x34
    7a28:	strb.w	ip, [r4, #1861]	; 0x745
    7a2c:	strb.w	r6, [r4, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a30:	mov.w	r6, #84	; 0x54
      _b = b;
    7a34:	strb.w	r8, [r4, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a38:	strb.w	r6, [r4, #1860]	; 0x744
    7a3c:	mov.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a40:	str.w	fp, [r4, #1872]	; 0x750
      _s = s;
    7a44:	strb.w	r6, [r4, #1868]	; 0x74c
      _b = b;
    7a48:	mvn.w	r6, #38	; 0x26
    7a4c:	strb.w	r6, [r4, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a50:	mvn.w	r6, #106	; 0x6a
    7a54:	strb.w	r6, [r4, #1876]	; 0x754
      _b = b;
    7a58:	mvn.w	r6, #49	; 0x31
    7a5c:	strb.w	r6, [r4, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a60:	mov.w	r6, #109	; 0x6d
    7a64:	strb.w	r6, [r4, #1884]	; 0x75c
      _b = b;
    7a68:	mvn.w	r6, #48	; 0x30
    7a6c:	strb.w	r6, [r4, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a70:	mov.w	r6, #80	; 0x50
    7a74:	strb.w	r6, [r4, #1892]	; 0x764
      _b = b;
    7a78:	mvn.w	r6, #71	; 0x47
    7a7c:	strb.w	r6, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a80:	mvn.w	r6, #119	; 0x77
    7a84:	strb.w	r6, [r4, #1900]	; 0x76c
      _b = b;
    7a88:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a8c:	str.w	r0, [r4, #1896]	; 0x768
    7a90:	movs	r0, #0
      _s = s;
      _b = b;
    7a92:	strb.w	r6, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a96:	mvn.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a9a:	str.w	r0, [r4, #1904]	; 0x770
      _s = s;
    7a9e:	strb.w	r6, [r4, #1924]	; 0x784
      _b = b;
    7aa2:	mvn.w	r6, #83	; 0x53
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7aa6:	strb.w	r0, [r4, #1908]	; 0x774
      _b = b;
    7aaa:	strb.w	r6, [r4, #1925]	; 0x785
    7aae:	mvn.w	r6, #73	; 0x49
    7ab2:	strb.w	r0, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ab6:	movs	r0, #0
      _s = s;
      _b = b;
    7ab8:	strb.w	r6, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7abc:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ac0:	str.w	r0, [r4, #1912]	; 0x778
      _s = s;
    7ac4:	strb.w	r6, [r4, #1940]	; 0x794
      _b = b;
    7ac8:	mvn.w	r6, #12
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7acc:	strb.w	r0, [r4, #1916]	; 0x77c
      _b = b;
    7ad0:	strb.w	r6, [r4, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ad4:	mov.w	r6, #39	; 0x27
      _b = b;
    7ad8:	strb.w	r0, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7adc:	movw	r0, #345	; 0x159
      _s = s;
    7ae0:	strb.w	r6, [r4, #1948]	; 0x79c
      _b = b;
    7ae4:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ae8:	str.w	r0, [r4, #1928]	; 0x788
      _s = s;
    7aec:	mov.w	r0, #4294967295
      _b = b;
    7af0:	strb.w	r6, [r4, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7af4:	mov.w	r6, #72	; 0x48
    7af8:	strb.w	r0, [r4, #1932]	; 0x78c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7afc:	movw	r0, #331	; 0x14b
      _s = s;
    7b00:	strb.w	r6, [r4, #1956]	; 0x7a4
      _b = b;
    7b04:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b08:	str.w	r0, [r4, #1936]	; 0x790
    7b0c:	mov.w	r0, #268	; 0x10c
      _s = s;
      _b = b;
    7b10:	strb.w	r6, [r4, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b14:	mov.w	r6, #64	; 0x40
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b18:	str.w	r0, [r4, #1944]	; 0x798
    7b1c:	movs	r0, #249	; 0xf9
      _s = s;
    7b1e:	strb.w	r6, [r4, #1964]	; 0x7ac
      _b = b;
    7b22:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b26:	str.w	r0, [r4, #1952]	; 0x7a0
      _s = s;
      _b = b;
    7b2a:	strb.w	r6, [r4, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b2e:	mvn.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b32:	str.w	r0, [r4, #1960]	; 0x7a8
    7b36:	movw	r0, #287	; 0x11f
      _s = s;
    7b3a:	strb.w	r6, [r4, #1972]	; 0x7b4
      _b = b;
    7b3e:	mvn.w	r6, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b42:	str.w	r0, [r4, #1968]	; 0x7b0
    7b46:	movw	r0, #285	; 0x11d
      _s = s;
      _b = b;
    7b4a:	strb.w	r6, [r4, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b4e:	mvn.w	r6, #9
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b52:	str.w	r0, [r4, #1984]	; 0x7c0
    7b56:	movw	r0, #337	; 0x151
      _s = s;
    7b5a:	strb.w	r6, [r4, #1980]	; 0x7bc
      _b = b;
    7b5e:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b62:	str.w	r0, [r4, #1920]	; 0x780
    7b66:	movw	r0, #283	; 0x11b
      _s = s;
      _b = b;
    7b6a:	strb.w	r6, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b6e:	mvn.w	r6, #7
    7b72:	strb.w	r6, [r4, #1988]	; 0x7c4
      _b = b;
    7b76:	mov.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b7a:	str.w	r1, [r4, #1976]	; 0x7b8
    7b7e:	movw	r1, #289	; 0x121
      _s = s;
      _b = b;
    7b82:	strb.w	r6, [r4, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b86:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b8a:	str.w	r1, [r4, #1992]	; 0x7c8
    7b8e:	movs	r1, #254	; 0xfe
      _s = s;
    7b90:	strb.w	r6, [r4, #1996]	; 0x7cc
      _b = b;
    7b94:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b98:	str.w	r1, [r4, #2008]	; 0x7d8
    7b9c:	movs	r1, #188	; 0xbc
      _s = s;
      _b = b;
    7b9e:	strb.w	r6, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ba2:	mov.w	r6, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ba6:	str.w	r1, [r4, #2032]	; 0x7f0
    7baa:	mov.w	r1, #298	; 0x12a
      _s = s;
    7bae:	strb.w	r6, [r4, #2004]	; 0x7d4
      _b = b;
    7bb2:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bb6:	str.w	r1, [r4, #2040]	; 0x7f8
    7bba:	movs	r1, #202	; 0xca
      _s = s;
      _b = b;
    7bbc:	strb.w	r6, [r4, #2005]	; 0x7d5
    7bc0:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bc4:	str.w	r3, [r4, #2024]	; 0x7e8
      _s = s;
      _b = b;
    7bc8:	strb.w	r6, [r4, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bcc:	mov.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bd0:	str.w	r1, [r4, #2048]	; 0x800
    7bd4:	movs	r1, #215	; 0xd7
      _s = s;
    7bd6:	strb.w	r6, [r4, #2020]	; 0x7e4
      _b = b;
    7bda:	mvn.w	r6, #24
    7bde:	strb.w	r3, [r4, #2053]	; 0x805
    7be2:	strb.w	r6, [r4, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7be6:	mvn.w	r6, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bea:	str.w	r3, [r4, #2056]	; 0x808
      _s = s;
    7bee:	strb.w	r6, [r4, #2028]	; 0x7ec
      _b = b;
    7bf2:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bf6:	str.w	r7, [r4, #2000]	; 0x7d0
      _s = s;
      _b = b;
    7bfa:	strb.w	r6, [r4, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7bfe:	mov.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c02:	str.w	r8, [r4, #2016]	; 0x7e0
      _s = s;
    7c06:	strb.w	r6, [r4, #2036]	; 0x7f4
      _b = b;
    7c0a:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c0e:	str.w	r9, [r4, #2064]	; 0x810
      _s = s;
      _b = b;
    7c12:	strb.w	r6, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c16:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c1a:	str.w	sl, [r4, #2072]	; 0x818
      _s = s;
    7c1e:	strb.w	r6, [r4, #2044]	; 0x7fc
      _b = b;
    7c22:	mvn.w	r6, #71	; 0x47
    7c26:	strb.w	r6, [r4, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c2a:	mov.w	r6, #95	; 0x5f
    7c2e:	strb.w	r6, [r4, #2052]	; 0x804
    7c32:	mov.w	r6, #123	; 0x7b
    7c36:	strb.w	r6, [r4, #2060]	; 0x80c
      _b = b;
    7c3a:	mvn.w	r6, #55	; 0x37
    7c3e:	strb.w	r6, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c42:	mvn.w	r6, #116	; 0x74
    7c46:	strb.w	r6, [r4, #2068]	; 0x814
      _b = b;
    7c4a:	mvn.w	r6, #41	; 0x29
    7c4e:	strb.w	r6, [r4, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c52:	mvn.w	r6, #112	; 0x70
    7c56:	strb.w	r6, [r4, #2076]	; 0x81c
    7c5a:	mov.w	r6, #86	; 0x56
    7c5e:	strb.w	r6, [r4, #2012]	; 0x7dc
      _b = b;
    7c62:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c66:	str.w	r1, [r4, #2080]	; 0x820
    7c6a:	movs	r1, #0
      _s = s;
      _b = b;
    7c6c:	strb.w	r6, [r4, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c70:	mov.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c74:	str.w	r1, [r4, #2088]	; 0x828
      _s = s;
    7c78:	strb.w	r6, [r4, #2084]	; 0x824
      _b = b;
    7c7c:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c80:	strb.w	r1, [r4, #2092]	; 0x82c
      _b = b;
    7c84:	strb.w	r6, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c88:	mvn.w	r6, #4
      _b = b;
    7c8c:	strb.w	r1, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c90:	movs	r1, #0
      _s = s;
    7c92:	strb.w	r6, [r4, #2116]	; 0x844
      _b = b;
    7c96:	mov.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c9a:	str.w	r1, [r4, #2096]	; 0x830
      _s = s;
      _b = b;
    7c9e:	strb.w	r6, [r4, #2117]	; 0x845
    7ca2:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ca6:	strb.w	r1, [r4, #2100]	; 0x834
      _b = b;
    7caa:	strb.w	r1, [r4, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cae:	movs	r1, #0
      _s = s;
      _b = b;
    7cb0:	strb.w	r6, [r4, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cb4:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cb8:	str.w	r1, [r4, #2104]	; 0x838
      _s = s;
    7cbc:	strb.w	r1, [r4, #2108]	; 0x83c
      _b = b;
    7cc0:	strb.w	r1, [r4, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cc4:	mov.w	r1, #328	; 0x148
      _s = s;
    7cc8:	strb.w	r6, [r4, #2132]	; 0x854
      _b = b;
    7ccc:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cd0:	str.w	r1, [r4, #2112]	; 0x840
    7cd4:	movw	r1, #333	; 0x14d
      _s = s;
      _b = b;
    7cd8:	strb.w	r6, [r4, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cdc:	mov.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce0:	str.w	r1, [r4, #2120]	; 0x848
      _s = s;
    7ce4:	mov.w	r1, #4294967295
    7ce8:	strb.w	r6, [r4, #2140]	; 0x85c
      _b = b;
    7cec:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cf0:	strb.w	r1, [r4, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cf4:	mov.w	r1, #316	; 0x13c
      _s = s;
      _b = b;
    7cf8:	strb.w	r6, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cfc:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d00:	str.w	r1, [r4, #2128]	; 0x850
    7d04:	movw	r1, #257	; 0x101
      _s = s;
    7d08:	strb.w	r6, [r4, #2148]	; 0x864
      _b = b;
    7d0c:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d10:	str.w	r1, [r4, #2136]	; 0x858
    7d14:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    7d18:	strb.w	r6, [r4, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d1c:	mov.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d20:	str.w	r1, [r4, #2144]	; 0x860
    7d24:	mov.w	r1, #262	; 0x106
      _s = s;
    7d28:	strb.w	r6, [r4, #2156]	; 0x86c
      _b = b;
    7d2c:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d30:	str.w	r1, [r4, #2152]	; 0x868
    7d34:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    7d38:	strb.w	r6, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d3c:	mvn.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d40:	str.w	r1, [r4, #2160]	; 0x870
    7d44:	mov.w	r1, #284	; 0x11c
      _s = s;
    7d48:	strb.w	r6, [r4, #2164]	; 0x874
      _b = b;
    7d4c:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d50:	str.w	r1, [r4, #2168]	; 0x878
    7d54:	movw	r1, #283	; 0x11b
      _s = s;
      _b = b;
    7d58:	strb.w	r6, [r4, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d5c:	mvn.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d60:	str.w	r1, [r4, #2176]	; 0x880
    7d64:	movw	r1, #279	; 0x117
      _s = s;
    7d68:	strb.w	r6, [r4, #2172]	; 0x87c
      _b = b;
    7d6c:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d70:	str.w	r1, [r4, #2184]	; 0x888
    7d74:	movs	r1, #201	; 0xc9
      _s = s;
      _b = b;
    7d76:	strb.w	r6, [r4, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d7a:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d7e:	str.w	r1, [r4, #2216]	; 0x8a8
    7d82:	mov.w	r1, #304	; 0x130
      _s = s;
    7d86:	strb.w	r6, [r4, #2180]	; 0x884
      _b = b;
    7d8a:	mvn.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d8e:	str.w	r1, [r4, #2232]	; 0x8b8
    7d92:	movs	r1, #219	; 0xdb
      _s = s;
      _b = b;
    7d94:	strb.w	r6, [r4, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d98:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d9c:	str.w	r1, [r4, #2240]	; 0x8c0
    7da0:	movs	r1, #212	; 0xd4
      _s = s;
    7da2:	strb.w	r6, [r4, #2188]	; 0x88c
      _b = b;
    7da6:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7daa:	str.w	r1, [r4, #2248]	; 0x8c8
    7dae:	mov.w	r1, #280	; 0x118
      _s = s;
      _b = b;
    7db2:	strb.w	r6, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7db6:	mvn.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dba:	str.w	r2, [r4, #2208]	; 0x8a0
      _s = s;
    7dbe:	strb.w	r6, [r4, #2196]	; 0x894
      _b = b;
    7dc2:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dc6:	str.w	r1, [r4, #2192]	; 0x890
      _s = s;
      _b = b;
    7dca:	strb.w	r6, [r4, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dce:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dd2:	str.w	sl, [r4, #2224]	; 0x8b0
      _s = s;
    7dd6:	strb.w	r6, [r4, #2204]	; 0x89c
      _b = b;
    7dda:	mvn.w	r6, #26
    7dde:	strb.w	r6, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7de2:	mov.w	r6, #30
    7de6:	strb.w	r6, [r4, #2212]	; 0x8a4
      _b = b;
    7dea:	mvn.w	r6, #26
    7dee:	strb.w	r6, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7df2:	mov.w	r6, #35	; 0x23
    7df6:	strb.w	r6, [r4, #2220]	; 0x8ac
      _b = b;
    7dfa:	mvn.w	r6, #31
    7dfe:	strb.w	r6, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e02:	mov.w	r6, #57	; 0x39
    7e06:	strb.w	r6, [r4, #2228]	; 0x8b4
      _b = b;
    7e0a:	mvn.w	r6, #41	; 0x29
    7e0e:	strb.w	r6, [r4, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e12:	mvn.w	r6, #114	; 0x72
    7e16:	strb.w	r6, [r4, #2236]	; 0x8bc
      _b = b;
    7e1a:	mvn.w	r6, #71	; 0x47
    7e1e:	strb.w	r6, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e22:	mov.w	r6, #54	; 0x36
    7e26:	strb.w	r6, [r4, #2244]	; 0x8c4
      _b = b;
    7e2a:	mvn.w	r6, #55	; 0x37
    7e2e:	strb.w	r6, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e32:	mov.w	r6, #53	; 0x35
    7e36:	strb.w	r6, [r4, #2252]	; 0x8cc
      _b = b;
    7e3a:	mvn.w	r6, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e3e:	str.w	r1, [r4, #2200]	; 0x898
    7e42:	movs	r1, #166	; 0xa6
      _s = s;
      _b = b;
    7e44:	strb.w	r6, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e48:	mov.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e4c:	str.w	r1, [r4, #2256]	; 0x8d0
    7e50:	movw	r1, #285	; 0x11d
      _s = s;
    7e54:	strb.w	r6, [r4, #2260]	; 0x8d4
      _b = b;
    7e58:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e5c:	str.w	r1, [r4, #2272]	; 0x8e0
    7e60:	movs	r1, #0
      _s = s;
      _b = b;
    7e62:	strb.w	r6, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e66:	mov.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e6a:	str.w	r1, [r4, #2280]	; 0x8e8
      _s = s;
    7e6e:	strb.w	r6, [r4, #2276]	; 0x8e4
      _b = b;
    7e72:	mov.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e76:	strb.w	r1, [r4, #2284]	; 0x8ec
      _b = b;
    7e7a:	strb.w	r6, [r4, #2277]	; 0x8e5
    7e7e:	mov.w	r6, #119	; 0x77
    7e82:	strb.w	r1, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e86:	movs	r1, #0
      _s = s;
      _b = b;
    7e88:	strb.w	r6, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e8c:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e90:	str.w	r1, [r4, #2288]	; 0x8f0
      _s = s;
    7e94:	strb.w	r1, [r4, #2292]	; 0x8f4
      _b = b;
    7e98:	strb.w	r1, [r4, #2293]	; 0x8f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e9c:	movs	r1, #0
      _s = s;
    7e9e:	strb.w	r6, [r4, #2316]	; 0x90c
      _b = b;
    7ea2:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ea6:	str.w	r1, [r4, #2296]	; 0x8f8
      _s = s;
    7eaa:	strb.w	r1, [r4, #2300]	; 0x8fc
      _b = b;
    7eae:	strb.w	r1, [r4, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eb2:	mov.w	r1, #324	; 0x144
      _s = s;
      _b = b;
    7eb6:	strb.w	r6, [r4, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eba:	mov.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ebe:	str.w	r1, [r4, #2304]	; 0x900
      _s = s;
    7ec2:	mov.w	r1, #4294967295
    7ec6:	strb.w	r6, [r4, #2324]	; 0x914
      _b = b;
    7eca:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ece:	strb.w	r1, [r4, #2308]	; 0x904
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ed2:	mov.w	r1, #310	; 0x136
      _s = s;
      _b = b;
    7ed6:	strb.w	r6, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eda:	mov.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ede:	str.w	r1, [r4, #2312]	; 0x908
    7ee2:	mov.w	r1, #304	; 0x130
      _s = s;
    7ee6:	strb.w	r6, [r4, #2332]	; 0x91c
      _b = b;
    7eea:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eee:	str.w	r1, [r4, #2320]	; 0x910
    7ef2:	movs	r1, #204	; 0xcc
      _s = s;
      _b = b;
    7ef4:	strb.w	r6, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ef8:	mov.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7efc:	str.w	r1, [r4, #2328]	; 0x918
    7f00:	movw	r1, #277	; 0x115
      _s = s;
    7f04:	strb.w	r2, [r4, #2268]	; 0x8dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f08:	str.w	r1, [r4, #2336]	; 0x920
    7f0c:	mov.w	r1, #290	; 0x122
    7f10:	str.w	sl, [r4, #2264]	; 0x8d8
      _s = s;
      _b = b;
    7f14:	strb.w	fp, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f18:	strb.w	r6, [r4, #2340]	; 0x924
      _b = b;
    7f1c:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f20:	str.w	r0, [r4, #2344]	; 0x928
    7f24:	movw	r0, #271	; 0x10f
      _s = s;
      _b = b;
    7f28:	strb.w	r6, [r4, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f2c:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f30:	str.w	r0, [r4, #2352]	; 0x930
    7f34:	mov.w	r0, #262	; 0x106
      _s = s;
    7f38:	strb.w	r6, [r4, #2348]	; 0x92c
      _b = b;
    7f3c:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f40:	str.w	r0, [r4, #2360]	; 0x938
    7f44:	mov.w	r0, #268	; 0x10c
      _s = s;
      _b = b;
    7f48:	strb.w	r6, [r4, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f4c:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f50:	str.w	r0, [r4, #2368]	; 0x940
    7f54:	movs	r0, #238	; 0xee
      _s = s;
    7f56:	strb.w	r6, [r4, #2356]	; 0x934
      _b = b;
    7f5a:	mvn.w	r6, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f5e:	str.w	r0, [r4, #2384]	; 0x950
    7f62:	movs	r0, #255	; 0xff
      _s = s;
      _b = b;
    7f64:	strb.w	r6, [r4, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f68:	mov.w	r6, #93	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f6c:	str.w	r0, [r4, #2392]	; 0x958
    7f70:	movw	r0, #289	; 0x121
      _s = s;
    7f74:	strb.w	r6, [r4, #2364]	; 0x93c
      _b = b;
    7f78:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f7c:	str.w	r0, [r4, #2408]	; 0x968
    7f80:	movw	r0, #297	; 0x129
      _s = s;
      _b = b;
    7f84:	strb.w	r6, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f88:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f8c:	str.w	r0, [r4, #2416]	; 0x970
    7f90:	mov.w	r0, #310	; 0x136
      _s = s;
    7f94:	strb.w	r6, [r4, #2372]	; 0x944
      _b = b;
    7f98:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f9c:	str.w	r0, [r4, #2424]	; 0x978
    7fa0:	mov.w	r0, #264	; 0x108
      _s = s;
      _b = b;
    7fa4:	strb.w	r6, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fa8:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fac:	str.w	lr, [r4, #2376]	; 0x948
      _s = s;
    7fb0:	strb.w	r6, [r4, #2380]	; 0x94c
      _b = b;
    7fb4:	mvn.w	r6, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fb8:	strb.w	ip, [r4, #2428]	; 0x97c
      _b = b;
    7fbc:	strb.w	r6, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fc0:	mov.w	r6, #52	; 0x34
    7fc4:	strb.w	r6, [r4, #2388]	; 0x954
      _b = b;
    7fc8:	mvn.w	r6, #30
    7fcc:	strb.w	r6, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fd0:	mov.w	r6, #38	; 0x26
    7fd4:	strb.w	r6, [r4, #2396]	; 0x95c
      _b = b;
    7fd8:	mvn.w	r6, #31
    7fdc:	strb.w	r6, [r4, #2397]	; 0x95d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fe0:	mov.w	r6, #49	; 0x31
    7fe4:	strb.w	r6, [r4, #2404]	; 0x964
      _b = b;
    7fe8:	mvn.w	r6, #29
    7fec:	strb.w	r6, [r4, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ff0:	mov.w	r6, #94	; 0x5e
    7ff4:	strb.w	r6, [r4, #2412]	; 0x96c
      _b = b;
    7ff8:	mvn.w	r6, #50	; 0x32
    7ffc:	strb.w	r6, [r4, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8000:	mvn.w	r6, #88	; 0x58
    8004:	strb.w	r6, [r4, #2420]	; 0x974
      _b = b;
    8008:	mvn.w	r6, #74	; 0x4a
    800c:	strb.w	r6, [r4, #2421]	; 0x975
    8010:	mvn.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8014:	str.w	r0, [r4, #2400]	; 0x960
    8018:	mov.w	r0, #310	; 0x136
      _s = s;
      _b = b;
    801c:	strb.w	r6, [r4, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8020:	mvn.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8024:	str.w	r0, [r4, #2432]	; 0x980
    8028:	movs	r0, #200	; 0xc8
      _s = s;
    802a:	strb.w	r6, [r4, #2436]	; 0x984
      _b = b;
    802e:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8032:	str.w	r0, [r4, #2440]	; 0x988
    8036:	movs	r0, #181	; 0xb5
      _s = s;
      _b = b;
    8038:	strb.w	r6, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    803c:	mov.w	r6, #3
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8040:	str.w	r0, [r4, #2448]	; 0x990
    8044:	movs	r0, #27
      _s = s;
    8046:	strb.w	r6, [r4, #2444]	; 0x98c
      _b = b;
    804a:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    804e:	str.w	r0, [r4, #2456]	; 0x998
    8052:	movs	r0, #46	; 0x2e
      _s = s;
      _b = b;
    8054:	strb.w	r6, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8058:	mov.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    805c:	str.w	r0, [r4, #2464]	; 0x9a0
    8060:	movs	r0, #0
      _s = s;
    8062:	strb.w	r6, [r4, #2452]	; 0x994
      _b = b;
    8066:	mvn.w	r6, #30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    806a:	str.w	r0, [r4, #2472]	; 0x9a8
      _s = s;
      _b = b;
    806e:	strb.w	r6, [r4, #2453]	; 0x995
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8072:	mov.w	r6, #43	; 0x2b
    8076:	strb.w	r0, [r4, #2476]	; 0x9ac
    807a:	strb.w	r6, [r4, #2460]	; 0x99c
      _b = b;
    807e:	mvn.w	r6, #79	; 0x4f
    8082:	strb.w	r0, [r4, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8086:	movs	r0, #0
      _s = s;
      _b = b;
    8088:	strb.w	r6, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    808c:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8090:	str.w	r0, [r4, #2480]	; 0x9b0
      _s = s;
    8094:	strb.w	r6, [r4, #2468]	; 0x9a4
      _b = b;
    8098:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    809c:	strb.w	r0, [r4, #2484]	; 0x9b4
      _b = b;
    80a0:	strb.w	r6, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80a4:	mvn.w	r6, #4
      _b = b;
    80a8:	strb.w	r0, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80ac:	movs	r0, #0
      _s = s;
    80ae:	strb.w	r6, [r4, #2500]	; 0x9c4
      _b = b;
    80b2:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80b6:	str.w	r0, [r4, #2488]	; 0x9b8
      _s = s;
      _b = b;
    80ba:	strb.w	r6, [r4, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80be:	mvn.w	r6, #97	; 0x61
    80c2:	strb.w	r0, [r4, #2492]	; 0x9bc
      _b = b;
    80c6:	strb.w	r0, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80ca:	mov.w	r0, #312	; 0x138
      _s = s;
    80ce:	strb.w	r6, [r4, #2508]	; 0x9cc
      _b = b;
    80d2:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80d6:	str.w	r0, [r4, #2496]	; 0x9c0
    80da:	movs	r0, #223	; 0xdf
      _s = s;
      _b = b;
    80dc:	strb.w	r6, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80e0:	mov.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80e4:	str.w	r0, [r4, #2512]	; 0x9d0
    80e8:	movw	r0, #291	; 0x123
      _s = s;
    80ec:	strb.w	r6, [r4, #2516]	; 0x9d4
      _b = b;
    80f0:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f4:	str.w	r0, [r4, #2504]	; 0x9c8
    80f8:	mov.w	r0, #262	; 0x106
      _s = s;
      _b = b;
    80fc:	strb.w	r6, [r4, #2517]	; 0x9d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8100:	mov.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8104:	str.w	r0, [r4, #2528]	; 0x9e0
    8108:	movs	r0, #240	; 0xf0
      _s = s;
    810a:	strb.w	r6, [r4, #2524]	; 0x9dc
      _b = b;
    810e:	mvn.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8112:	str.w	r0, [r4, #2544]	; 0x9f0
    8116:	movw	r0, #289	; 0x121
      _s = s;
      _b = b;
    811a:	strb.w	r6, [r4, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    811e:	mvn.w	r6, #89	; 0x59
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8122:	str.w	r0, [r4, #2560]	; 0xa00
    8126:	movs	r0, #212	; 0xd4
      _s = s;
    8128:	strb.w	r6, [r4, #2532]	; 0x9e4
      _b = b;
    812c:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8130:	str.w	r0, [r4, #2568]	; 0xa08
    8134:	movs	r0, #223	; 0xdf
      _s = s;
      _b = b;
    8136:	strb.w	r6, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    813a:	mov.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    813e:	str.w	r0, [r4, #2576]	; 0xa10
    8142:	movs	r0, #193	; 0xc1
      _s = s;
    8144:	strb.w	r6, [r4, #2540]	; 0x9ec
      _b = b;
    8148:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    814c:	str.w	r0, [r4, #2584]	; 0xa18
    8150:	movw	r0, #283	; 0x11b
      _s = s;
      _b = b;
    8154:	strb.w	r6, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8158:	mov.w	r6, #120	; 0x78
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    815c:	str.w	ip, [r4, #2520]	; 0x9d8
      _s = s;
    8160:	strb.w	r6, [r4, #2548]	; 0x9f4
      _b = b;
    8164:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8168:	str.w	lr, [r4, #2536]	; 0x9e8
      _s = s;
      _b = b;
    816c:	strb.w	r6, [r4, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8170:	mvn.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8174:	str.w	r7, [r4, #2552]	; 0x9f8
      _s = s;
    8178:	movs	r7, #21
    817a:	strb.w	r6, [r4, #2564]	; 0xa04
      _b = b;
    817e:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8182:	str.w	r0, [r4, #2592]	; 0xa20
    8186:	movw	r0, #309	; 0x135
      _s = s;
      _b = b;
    818a:	strb.w	r6, [r4, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    818e:	mov.w	r6, #28
      _b = b;
    8192:	strb.w	fp, [r4, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8196:	strb.w	r6, [r4, #2572]	; 0xa0c
      _b = b;
    819a:	mvn.w	r6, #25
    819e:	strb.w	r6, [r4, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81a2:	mov.w	r6, #116	; 0x74
    81a6:	strb.w	r6, [r4, #2580]	; 0xa14
      _b = b;
    81aa:	mvn.w	r6, #53	; 0x35
    81ae:	strb.w	r6, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81b2:	mov.w	r6, #120	; 0x78
    81b6:	strb.w	r6, [r4, #2588]	; 0xa1c
      _b = b;
    81ba:	mvn.w	r6, #46	; 0x2e
    81be:	strb.w	r6, [r4, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81c2:	mov.w	r6, #62	; 0x3e
    81c6:	strb.w	r6, [r4, #2596]	; 0xa24
      _b = b;
    81ca:	mvn.w	r6, #36	; 0x24
    81ce:	strb.w	r6, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81d2:	mvn.w	r6, #126	; 0x7e
    81d6:	strb.w	r6, [r4, #2604]	; 0xa2c
    81da:	mov.w	r6, #19
    81de:	strb.w	r6, [r4, #2556]	; 0x9fc
      _b = b;
    81e2:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81e6:	str.w	r1, [r4, #2600]	; 0xa28
      _s = s;
      _b = b;
    81ea:	strb.w	r6, [r4, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    81ee:	mvn.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81f2:	str.w	r0, [r4, #2608]	; 0xa30
    81f6:	movw	r0, #325	; 0x145
      _s = s;
    81fa:	strb.w	r6, [r4, #2612]	; 0xa34
      _b = b;
    81fe:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8202:	str.w	r0, [r4, #2616]	; 0xa38
      _s = s;
    8206:	mov.w	r0, #4294967295
      _b = b;
    820a:	strb.w	r6, [r4, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    820e:	mvn.w	r6, #85	; 0x55
    8212:	strb.w	r0, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8216:	mov.w	r0, #312	; 0x138
      _s = s;
    821a:	strb.w	r6, [r4, #2628]	; 0xa44
      _b = b;
    821e:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8222:	str.w	r0, [r4, #2624]	; 0xa40
    8226:	movw	r0, #311	; 0x137
      _s = s;
      _b = b;
    822a:	strb.w	r6, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    822e:	mov.w	r6, #82	; 0x52
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8232:	str.w	r0, [r4, #2632]	; 0xa48
    8236:	movs	r0, #184	; 0xb8
      _s = s;
    8238:	strb.w	r6, [r4, #2636]	; 0xa4c
      _b = b;
    823c:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8240:	str.w	r0, [r4, #2640]	; 0xa50
    8244:	movs	r0, #37	; 0x25
      _s = s;
      _b = b;
    8246:	strb.w	r6, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    824a:	mov.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    824e:	str.w	r0, [r4, #2648]	; 0xa58
    8252:	movs	r0, #48	; 0x30
      _s = s;
    8254:	strb.w	r6, [r4, #2644]	; 0xa54
      _b = b;
    8258:	mvn.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    825c:	str.w	r0, [r4, #2656]	; 0xa60
    8260:	movs	r0, #0
      _s = s;
      _b = b;
    8262:	strb.w	r6, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8266:	mov.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    826a:	str.w	r0, [r4, #2664]	; 0xa68
      _s = s;
    826e:	strb.w	r6, [r4, #2652]	; 0xa5c
      _b = b;
    8272:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8276:	strb.w	r0, [r4, #2668]	; 0xa6c
      _b = b;
    827a:	strb.w	r0, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    827e:	movs	r0, #0
      _s = s;
      _b = b;
    8280:	strb.w	r6, [r4, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8284:	strb.w	r6, [r4, #2660]	; 0xa64
      _b = b;
    8288:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    828c:	str.w	r0, [r4, #2672]	; 0xa70
      _s = s;
    8290:	strb.w	r0, [r4, #2676]	; 0xa74
      _b = b;
    8294:	strb.w	r0, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8298:	movs	r0, #0
      _s = s;
      _b = b;
    829a:	strb.w	r6, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    829e:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82a2:	str.w	r0, [r4, #2680]	; 0xa78
      _s = s;
    82a6:	strb.w	r0, [r4, #2684]	; 0xa7c
      _b = b;
    82aa:	strb.w	r0, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82ae:	mov.w	r0, #308	; 0x134
      _s = s;
      _b = b;
    82b2:	strb.w	ip, [r4, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82b6:	str.w	r0, [r4, #2688]	; 0xa80
    82ba:	mov.w	r0, #304	; 0x130
      _s = s;
    82be:	strb.w	r6, [r4, #2692]	; 0xa84
      _b = b;
    82c2:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82c6:	str.w	r1, [r4, #2744]	; 0xab8
    82ca:	mov.w	r1, #282	; 0x11a
      _s = s;
      _b = b;
    82ce:	strb.w	r6, [r4, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82d2:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82d6:	str.w	r0, [r4, #2696]	; 0xa88
    82da:	movs	r0, #247	; 0xf7
      _s = s;
    82dc:	strb.w	r6, [r4, #2700]	; 0xa8c
      _b = b;
    82e0:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82e4:	str.w	r1, [r4, #2752]	; 0xac0
    82e8:	movs	r1, #243	; 0xf3
      _s = s;
      _b = b;
    82ea:	strb.w	r6, [r4, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82ee:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82f2:	str.w	r0, [r4, #2712]	; 0xa98
    82f6:	movs	r0, #233	; 0xe9
      _s = s;
    82f8:	strb.w	r6, [r4, #2708]	; 0xa94
      _b = b;
    82fc:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8300:	str.w	r1, [r4, #2760]	; 0xac8
    8304:	movs	r1, #217	; 0xd9
      _s = s;
      _b = b;
    8306:	strb.w	r6, [r4, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    830a:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    830e:	str.w	r0, [r4, #2720]	; 0xaa0
    8312:	movs	r0, #249	; 0xf9
      _s = s;
    8314:	strb.w	r6, [r4, #2716]	; 0xa9c
      _b = b;
    8318:	mov.w	r6, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    831c:	str.w	r1, [r4, #2768]	; 0xad0
    8320:	movs	r1, #236	; 0xec
      _s = s;
      _b = b;
    8322:	strb.w	r6, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8326:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    832a:	str.w	r0, [r4, #2728]	; 0xaa8
    832e:	mov.w	r0, #258	; 0x102
      _s = s;
    8332:	strb.w	r6, [r4, #2724]	; 0xaa4
      _b = b;
    8336:	mov.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    833a:	str.w	r1, [r4, #2776]	; 0xad8
    833e:	mov.w	r1, #270	; 0x10e
      _s = s;
      _b = b;
    8342:	strb.w	r6, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8346:	mov.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    834a:	str.w	r0, [r4, #2736]	; 0xab0
      _s = s;
    834e:	strb.w	r6, [r4, #2732]	; 0xaac
      _b = b;
    8352:	mvn.w	r6, #59	; 0x3b
    8356:	strb.w	r6, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    835a:	mov.w	r6, #97	; 0x61
    835e:	strb.w	r6, [r4, #2740]	; 0xab4
      _b = b;
    8362:	mvn.w	r6, #65	; 0x41
    8366:	strb.w	r6, [r4, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    836a:	mov.w	r6, #79	; 0x4f
    836e:	strb.w	r6, [r4, #2748]	; 0xabc
      _b = b;
    8372:	mvn.w	r6, #39	; 0x27
    8376:	strb.w	r6, [r4, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    837a:	mov.w	r6, #52	; 0x34
    837e:	strb.w	r6, [r4, #2756]	; 0xac4
      _b = b;
    8382:	mvn.w	r6, #36	; 0x24
    8386:	strb.w	r6, [r4, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    838a:	mov.w	r6, #37	; 0x25
    838e:	strb.w	r6, [r4, #2764]	; 0xacc
      _b = b;
    8392:	mvn.w	r6, #31
    8396:	strb.w	r6, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    839a:	mvn.w	r6, #127	; 0x7f
    839e:	strb.w	r6, [r4, #2772]	; 0xad4
      _b = b;
    83a2:	mvn.w	r6, #53	; 0x35
    83a6:	strb.w	r6, [r4, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83aa:	mov.w	r6, #78	; 0x4e
    83ae:	strb.w	r6, [r4, #2780]	; 0xadc
      _b = b;
    83b2:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83b6:	str.w	r1, [r4, #2704]	; 0xa90
    83ba:	mov.w	r1, #272	; 0x110
      _s = s;
      _b = b;
    83be:	strb.w	r6, [r4, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83c2:	mov.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83c6:	str.w	r1, [r4, #2784]	; 0xae0
    83ca:	movw	r1, #297	; 0x129
      _s = s;
    83ce:	strb.w	r6, [r4, #2788]	; 0xae4
      _b = b;
    83d2:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83d6:	str.w	r1, [r4, #2792]	; 0xae8
    83da:	movw	r1, #317	; 0x13d
      _s = s;
      _b = b;
    83de:	strb.w	r6, [r4, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83e2:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83e6:	str.w	r1, [r4, #2800]	; 0xaf0
      _s = s;
    83ea:	mov.w	r1, #4294967295
    83ee:	strb.w	r6, [r4, #2796]	; 0xaec
      _b = b;
    83f2:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83f6:	strb.w	r1, [r4, #2804]	; 0xaf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83fa:	movw	r1, #321	; 0x141
      _s = s;
      _b = b;
    83fe:	strb.w	r6, [r4, #2797]	; 0xaed
    8402:	mvn.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8406:	str.w	r1, [r4, #2808]	; 0xaf8
      _s = s;
    840a:	mov.w	r1, #4294967295
      _b = b;
    840e:	strb.w	r6, [r4, #2805]	; 0xaf5
    8412:	mvn.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8416:	strb.w	r1, [r4, #2812]	; 0xafc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    841a:	mov.w	r1, #312	; 0x138
      _s = s;
      _b = b;
    841e:	strb.w	r6, [r4, #2813]	; 0xafd
    8422:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8426:	str.w	r1, [r4, #2816]	; 0xb00
    842a:	mov.w	r1, #302	; 0x12e
      _s = s;
      _b = b;
    842e:	strb.w	r6, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8432:	mov.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8436:	str.w	r1, [r4, #2824]	; 0xb08
    843a:	movs	r1, #177	; 0xb1
      _s = s;
    843c:	strb.w	r6, [r4, #2828]	; 0xb0c
      _b = b;
    8440:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8444:	str.w	r1, [r4, #2832]	; 0xb10
    8448:	movs	r1, #44	; 0x2c
      _s = s;
      _b = b;
    844a:	strb.w	r6, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    844e:	mov.w	r6, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8452:	str.w	r1, [r4, #2840]	; 0xb18
    8456:	movs	r1, #39	; 0x27
      _s = s;
    8458:	strb.w	r6, [r4, #2836]	; 0xb14
      _b = b;
    845c:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8460:	str.w	r1, [r4, #2848]	; 0xb20
      _s = s;
    8464:	mov.w	r1, #4294967295
      _b = b;
    8468:	strb.w	r6, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    846c:	mvn.w	r6, #48	; 0x30
    8470:	strb.w	r1, [r4, #2852]	; 0xb24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8474:	movs	r1, #0
      _s = s;
    8476:	strb.w	r6, [r4, #2844]	; 0xb1c
      _b = b;
    847a:	mvn.w	r6, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    847e:	str.w	r1, [r4, #2856]	; 0xb28
      _s = s;
      _b = b;
    8482:	strb.w	r6, [r4, #2845]	; 0xb1d
    8486:	mvn.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    848a:	strb.w	r1, [r4, #2860]	; 0xb2c
      _b = b;
    848e:	strb.w	r6, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8492:	mov.w	r6, #88	; 0x58
      _b = b;
    8496:	strb.w	r1, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    849a:	movs	r1, #0
      _s = s;
    849c:	strb.w	lr, [r4, #2820]	; 0xb04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84a0:	str.w	r1, [r4, #2864]	; 0xb30
      _s = s;
    84a4:	strb.w	r1, [r4, #2868]	; 0xb34
    84a8:	strb.w	r6, [r4, #2884]	; 0xb44
      _b = b;
    84ac:	mvn.w	r6, #105	; 0x69
    84b0:	strb.w	r1, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84b4:	movs	r1, #0
      _s = s;
      _b = b;
    84b6:	strb.w	r6, [r4, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84ba:	mov.w	r6, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84be:	str.w	r1, [r4, #2872]	; 0xb38
      _s = s;
    84c2:	strb.w	r6, [r4, #2892]	; 0xb4c
      _b = b;
    84c6:	mvn.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84ca:	strb.w	r1, [r4, #2876]	; 0xb3c
      _b = b;
    84ce:	strb.w	r6, [r4, #2893]	; 0xb4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84d2:	mvn.w	r6, #122	; 0x7a
      _b = b;
    84d6:	strb.w	r1, [r4, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84da:	movw	r1, #287	; 0x11f
      _s = s;
    84de:	strb.w	r6, [r4, #2900]	; 0xb54
      _b = b;
    84e2:	mvn.w	r6, #97	; 0x61
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84e6:	str.w	r1, [r4, #2880]	; 0xb40
    84ea:	mov.w	r1, #276	; 0x114
      _s = s;
      _b = b;
    84ee:	strb.w	r6, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    84f2:	mvn.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84f6:	str.w	r1, [r4, #2888]	; 0xb48
    84fa:	movs	r1, #207	; 0xcf
      _s = s;
    84fc:	strb.w	r6, [r4, #2908]	; 0xb5c
      _b = b;
    8500:	mov.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8504:	str.w	r1, [r4, #2896]	; 0xb50
    8508:	movs	r1, #208	; 0xd0
      _s = s;
      _b = b;
    850a:	strb.w	r6, [r4, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    850e:	mov.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8512:	str.w	r1, [r4, #2904]	; 0xb58
    8516:	movs	r1, #192	; 0xc0
      _s = s;
    8518:	strb.w	r6, [r4, #2916]	; 0xb64
      _b = b;
    851c:	mvn.w	r6, #108	; 0x6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8520:	str.w	r1, [r4, #2912]	; 0xb60
    8524:	movs	r1, #201	; 0xc9
      _s = s;
      _b = b;
    8526:	strb.w	r6, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    852a:	mov.w	r6, #117	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    852e:	str.w	r1, [r4, #2920]	; 0xb68
    8532:	movs	r1, #230	; 0xe6
      _s = s;
    8534:	strb.w	r6, [r4, #2924]	; 0xb6c
      _b = b;
    8538:	mvn.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    853c:	str.w	r1, [r4, #2928]	; 0xb70
    8540:	movs	r1, #206	; 0xce
      _s = s;
      _b = b;
    8542:	strb.w	r6, [r4, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8546:	mov.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    854a:	str.w	r1, [r4, #2944]	; 0xb80
    854e:	movs	r1, #171	; 0xab
      _s = s;
    8550:	strb.w	r6, [r4, #2932]	; 0xb74
      _b = b;
    8554:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8558:	str.w	r0, [r4, #2936]	; 0xb78
    855c:	movs	r0, #169	; 0xa9
      _s = s;
      _b = b;
    855e:	strb.w	r6, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8562:	mvn.w	r6, #81	; 0x51
      _b = b;
    8566:	strb.w	r2, [r4, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    856a:	strb.w	r6, [r4, #2940]	; 0xb7c
    856e:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8572:	str.w	r1, [r4, #2952]	; 0xb88
    8576:	movs	r1, #220	; 0xdc
      _s = s;
    8578:	strb.w	r6, [r4, #2948]	; 0xb84
      _b = b;
    857c:	mvn.w	r6, #32
    8580:	strb.w	r6, [r4, #2949]	; 0xb85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8584:	mov.w	r6, #31
    8588:	strb.w	r6, [r4, #2956]	; 0xb8c
      _b = b;
    858c:	mvn.w	r6, #30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8590:	str.w	r1, [r4, #2960]	; 0xb90
    8594:	movs	r1, #221	; 0xdd
      _s = s;
      _b = b;
    8596:	strb.w	r6, [r4, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    859a:	mov.w	r6, #105	; 0x69
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    859e:	str.w	r1, [r4, #2968]	; 0xb98
    85a2:	movs	r1, #250	; 0xfa
      _s = s;
    85a4:	strb.w	r6, [r4, #2964]	; 0xb94
      _b = b;
    85a8:	mvn.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85ac:	str.w	r1, [r4, #2976]	; 0xba0
    85b0:	mov.w	r1, #284	; 0x11c
      _s = s;
      _b = b;
    85b4:	strb.w	r6, [r4, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85b8:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85bc:	str.w	r1, [r4, #2984]	; 0xba8
    85c0:	movw	r1, #289	; 0x121
      _s = s;
    85c4:	strb.w	r6, [r4, #2972]	; 0xb9c
      _b = b;
    85c8:	mvn.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85cc:	str.w	r1, [r4, #2992]	; 0xbb0
      _s = s;
    85d0:	mov.w	r1, #4294967295
      _b = b;
    85d4:	strb.w	r6, [r4, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85d8:	mov.w	r6, #117	; 0x75
    85dc:	strb.w	r1, [r4, #2996]	; 0xbb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85e0:	movw	r1, #313	; 0x139
      _s = s;
    85e4:	strb.w	r6, [r4, #2980]	; 0xba4
      _b = b;
    85e8:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    85ec:	str.w	r1, [r4, #3000]	; 0xbb8
      _s = s;
    85f0:	mov.w	r1, #4294967295
      _b = b;
    85f4:	strb.w	r6, [r4, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    85f8:	mov.w	r6, #120	; 0x78
    85fc:	strb.w	r1, [r4, #3004]	; 0xbbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8600:	mov.w	r1, #312	; 0x138
      _s = s;
    8604:	strb.w	r6, [r4, #2988]	; 0xbac
      _b = b;
    8608:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    860c:	str.w	r1, [r4, #3008]	; 0xbc0
      _s = s;
    8610:	mov.w	r1, #4294967295
      _b = b;
    8614:	strb.w	r6, [r4, #2989]	; 0xbad
    8618:	mov.w	r6, #117	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    861c:	strb.w	r1, [r4, #3012]	; 0xbc4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8620:	movw	r1, #297	; 0x129
      _s = s;
      _b = b;
    8624:	strb.w	r6, [r4, #2997]	; 0xbb5
    8628:	strb.w	r6, [r4, #3005]	; 0xbbd
    862c:	mvn.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8630:	str.w	r1, [r4, #3016]	; 0xbc8
    8634:	movs	r1, #177	; 0xb1
      _s = s;
      _b = b;
    8636:	strb.w	r6, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    863a:	mov.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    863e:	str.w	r1, [r4, #3024]	; 0xbd0
    8642:	movs	r1, #45	; 0x2d
      _s = s;
    8644:	strb.w	r6, [r4, #3020]	; 0xbcc
      _b = b;
    8648:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    864c:	str.w	r1, [r4, #3032]	; 0xbd8
    8650:	movs	r1, #30
      _s = s;
      _b = b;
    8652:	strb.w	r6, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8656:	mov.w	r6, #27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    865a:	str.w	r1, [r4, #3040]	; 0xbe0
    865e:	movs	r1, #0
      _s = s;
    8660:	strb.w	r6, [r4, #3028]	; 0xbd4
      _b = b;
    8664:	mvn.w	r6, #48	; 0x30
    8668:	strb.w	r6, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    866c:	mvn.w	r6, #24
    8670:	strb.w	r6, [r4, #3036]	; 0xbdc
      _b = b;
    8674:	mvn.w	r6, #1
    8678:	strb.w	r6, [r4, #3037]	; 0xbdd
    867c:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8680:	strb.w	lr, [r4, #3044]	; 0xbe4
      _b = b;
    8684:	strb.w	r6, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8688:	mvn.w	r6, #126	; 0x7e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    868c:	str.w	r1, [r4, #3048]	; 0xbe8
      _s = s;
    8690:	strb.w	r6, [r4, #3076]	; 0xc04
      _b = b;
    8694:	mov.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8698:	strb.w	r1, [r4, #3052]	; 0xbec
      _b = b;
    869c:	strb.w	r6, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86a0:	mvn.w	r6, #116	; 0x74
      _b = b;
    86a4:	strb.w	r1, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86a8:	movs	r1, #0
      _s = s;
    86aa:	strb.w	r6, [r4, #3084]	; 0xc0c
      _b = b;
    86ae:	mvn.w	r6, #90	; 0x5a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86b2:	str.w	r1, [r4, #3056]	; 0xbf0
      _s = s;
      _b = b;
    86b6:	strb.w	r6, [r4, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86ba:	mvn.w	r6, #122	; 0x7a
    86be:	strb.w	r1, [r4, #3060]	; 0xbf4
    86c2:	strb.w	r6, [r4, #3092]	; 0xc14
      _b = b;
    86c6:	mvn.w	r6, #78	; 0x4e
    86ca:	strb.w	r1, [r4, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86ce:	movs	r1, #0
      _s = s;
      _b = b;
    86d0:	strb.w	r6, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86d4:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86d8:	str.w	r1, [r4, #3064]	; 0xbf8
      _s = s;
    86dc:	strb.w	r6, [r4, #3100]	; 0xc1c
      _b = b;
    86e0:	mvn.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86e4:	strb.w	r1, [r4, #3068]	; 0xbfc
      _b = b;
    86e8:	strb.w	r1, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86ec:	movs	r1, #205	; 0xcd
      _s = s;
      _b = b;
    86ee:	strb.w	r6, [r4, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    86f2:	mov.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    86f6:	str.w	r1, [r4, #3080]	; 0xc08
    86fa:	movs	r1, #193	; 0xc1
      _s = s;
    86fc:	strb.w	r6, [r4, #3108]	; 0xc24
      _b = b;
    8700:	mvn.w	r6, #71	; 0x47
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8704:	str.w	r1, [r4, #3088]	; 0xc10
    8708:	movs	r1, #196	; 0xc4
      _s = s;
      _b = b;
    870a:	strb.w	r6, [r4, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    870e:	mov.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8712:	str.w	r1, [r4, #3096]	; 0xc18
    8716:	movs	r1, #193	; 0xc1
      _s = s;
    8718:	strb.w	r6, [r4, #3116]	; 0xc2c
      _b = b;
    871c:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8720:	str.w	r1, [r4, #3104]	; 0xc20
    8724:	movs	r1, #172	; 0xac
      _s = s;
      _b = b;
    8726:	strb.w	r6, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    872a:	mvn.w	r6, #115	; 0x73
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    872e:	str.w	r1, [r4, #3112]	; 0xc28
    8732:	movs	r1, #184	; 0xb8
      _s = s;
    8734:	strb.w	r6, [r4, #3124]	; 0xc34
      _b = b;
    8738:	mvn.w	r6, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    873c:	str.w	r1, [r4, #3120]	; 0xc30
    8740:	movs	r1, #193	; 0xc1
      _s = s;
      _b = b;
    8742:	strb.w	r6, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8746:	mvn.w	r6, #38	; 0x26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    874a:	str.w	r1, [r4, #3128]	; 0xc38
    874e:	movs	r1, #178	; 0xb2
    8750:	str.w	r8, [r4, #3072]	; 0xc00
      _s = s;
    8754:	strb.w	r6, [r4, #3132]	; 0xc3c
      _b = b;
    8758:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    875c:	str.w	r1, [r4, #3136]	; 0xc40
    8760:	movs	r1, #229	; 0xe5
      _s = s;
      _b = b;
    8762:	strb.w	r6, [r4, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8766:	mov.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    876a:	str.w	r1, [r4, #3144]	; 0xc48
    876e:	movs	r1, #242	; 0xf2
      _s = s;
    8770:	strb.w	r6, [r4, #3140]	; 0xc44
      _b = b;
    8774:	mvn.w	r6, #40	; 0x28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8778:	str.w	r1, [r4, #3152]	; 0xc50
    877c:	movs	r1, #233	; 0xe9
      _s = s;
      _b = b;
    877e:	strb.w	r6, [r4, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8782:	mov.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8786:	str.w	r1, [r4, #3160]	; 0xc58
    878a:	movw	r1, #289	; 0x121
      _s = s;
    878e:	strb.w	r6, [r4, #3148]	; 0xc4c
      _b = b;
    8792:	mvn.w	r6, #59	; 0x3b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8796:	str.w	r1, [r4, #3176]	; 0xc68
    879a:	movw	r1, #305	; 0x131
      _s = s;
      _b = b;
    879e:	strb.w	r6, [r4, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87a2:	mov.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87a6:	str.w	r1, [r4, #3184]	; 0xc70
    87aa:	mov.w	r1, #312	; 0x138
      _s = s;
    87ae:	strb.w	r6, [r4, #3156]	; 0xc54
      _b = b;
    87b2:	mvn.w	r6, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87b6:	str.w	r1, [r4, #3192]	; 0xc78
      _s = s;
    87ba:	mov.w	r1, #4294967295
      _b = b;
    87be:	strb.w	r6, [r4, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87c2:	mov.w	r6, #77	; 0x4d
    87c6:	strb.w	r1, [r4, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87ca:	movw	r1, #309	; 0x135
      _s = s;
    87ce:	strb.w	r6, [r4, #3164]	; 0xc5c
      _b = b;
    87d2:	mvn.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87d6:	str.w	r1, [r4, #3200]	; 0xc80
    87da:	movw	r1, #275	; 0x113
      _s = s;
      _b = b;
    87de:	strb.w	r6, [r4, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87e2:	mov.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    87e6:	str.w	lr, [r4, #3168]	; 0xc60
      _s = s;
    87ea:	strb.w	r6, [r4, #3172]	; 0xc64
    87ee:	mov.w	r6, #122	; 0x7a
      _b = b;
    87f2:	strb.w	ip, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87f6:	strb.w	r6, [r4, #3180]	; 0xc6c
      _b = b;
    87fa:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    87fe:	strb.w	r3, [r4, #3204]	; 0xc84
      _b = b;
    8802:	strb.w	r6, [r4, #3181]	; 0xc6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8806:	mvn.w	r6, #23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    880a:	str.w	r1, [r4, #3208]	; 0xc88
    880e:	movs	r1, #40	; 0x28
      _s = s;
    8810:	strb.w	r6, [r4, #3188]	; 0xc74
      _b = b;
    8814:	mvn.w	r6, #84	; 0x54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8818:	str.w	r3, [r4, #3216]	; 0xc90
      _s = s;
      _b = b;
    881c:	strb.w	r6, [r4, #3189]	; 0xc75
    8820:	mvn.w	r6, #88	; 0x58
    8824:	strb.w	r6, [r4, #3197]	; 0xc7d
    8828:	mvn.w	r6, #20
    882c:	strb.w	r6, [r4, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8830:	mov.w	r6, #41	; 0x29
    8834:	strb.w	r6, [r4, #3212]	; 0xc8c
      _b = b;
    8838:	mvn.w	r6, #26
    883c:	strb.w	r6, [r4, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8840:	mov.w	r6, #63	; 0x3f
    8844:	strb.w	r6, [r4, #3220]	; 0xc94
      _b = b;
    8848:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    884c:	str.w	r1, [r4, #3224]	; 0xc98
    8850:	movs	r1, #38	; 0x26
      _s = s;
      _b = b;
    8852:	strb.w	r6, [r4, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8856:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    885a:	str.w	r1, [r4, #3232]	; 0xca0
    885e:	movs	r1, #36	; 0x24
      _s = s;
    8860:	strb.w	r6, [r4, #3228]	; 0xc9c
      _b = b;
    8864:	mvn.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8868:	str.w	r1, [r4, #3240]	; 0xca8
      _s = s;
    886c:	mov.w	r1, #4294967295
      _b = b;
    8870:	strb.w	r6, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8874:	mvn.w	r6, #8
    8878:	strb.w	r1, [r4, #3244]	; 0xcac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    887c:	movs	r1, #0
      _s = s;
    887e:	strb.w	r6, [r4, #3236]	; 0xca4
      _b = b;
    8882:	mvn.w	r6, #5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8886:	str.w	r1, [r4, #3248]	; 0xcb0
      _s = s;
      _b = b;
    888a:	strb.w	r6, [r4, #3237]	; 0xca5
    888e:	mov.w	r6, #99	; 0x63
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8892:	strb.w	r1, [r4, #3252]	; 0xcb4
      _b = b;
    8896:	strb.w	r6, [r4, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    889a:	mov.w	r6, #107	; 0x6b
      _b = b;
    889e:	strb.w	r1, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88a2:	movs	r1, #0
      _s = s;
    88a4:	strb.w	r6, [r4, #3276]	; 0xccc
      _b = b;
    88a8:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88ac:	str.w	r1, [r4, #3256]	; 0xcb8
      _s = s;
      _b = b;
    88b0:	strb.w	r6, [r4, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88b4:	mov.w	r6, #94	; 0x5e
    88b8:	strb.w	r1, [r4, #3260]	; 0xcbc
    88bc:	strb.w	r6, [r4, #3284]	; 0xcd4
      _b = b;
    88c0:	mvn.w	r6, #71	; 0x47
    88c4:	strb.w	r1, [r4, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88c8:	movs	r1, #0
      _s = s;
      _b = b;
    88ca:	strb.w	r6, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88ce:	mov.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88d2:	str.w	r1, [r4, #3264]	; 0xcc0
      _s = s;
    88d6:	strb.w	r1, [r4, #3268]	; 0xcc4
      _b = b;
    88da:	strb.w	r1, [r4, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88de:	movs	r1, #194	; 0xc2
      _s = s;
    88e0:	strb.w	r6, [r4, #3292]	; 0xcdc
      _b = b;
    88e4:	mvn.w	r6, #63	; 0x3f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88e8:	str.w	r1, [r4, #3272]	; 0xcc8
    88ec:	str.w	r1, [r4, #3280]	; 0xcd0
    88f0:	movs	r1, #188	; 0xbc
      _s = s;
      _b = b;
    88f2:	strb.w	r6, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    88f6:	mov.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    88fa:	str.w	r1, [r4, #3296]	; 0xce0
    88fe:	movs	r1, #171	; 0xab
      _s = s;
    8900:	strb.w	r6, [r4, #3300]	; 0xce4
    8904:	mov.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8908:	str.w	r1, [r4, #3304]	; 0xce8
    890c:	movs	r1, #2
    890e:	str.w	fp, [r4, #3288]	; 0xcd8
      _s = s;
      _b = b;
    8912:	strb.w	sl, [r4, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8916:	strb.w	r6, [r4, #3308]	; 0xcec
      _b = b;
    891a:	mvn.w	r6, #32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    891e:	str.w	r0, [r4, #3312]	; 0xcf0
    8922:	movs	r0, #178	; 0xb2
      _s = s;
      _b = b;
    8924:	strb.w	r6, [r4, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8928:	mov.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    892c:	str.w	r0, [r4, #3320]	; 0xcf8
    8930:	movs	r0, #15
      _s = s;
    8932:	strb.w	r6, [r4, #3316]	; 0xcf4
      _b = b;
    8936:	mvn.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    893a:	str.w	r0, [r4, #3328]	; 0xd00
    893e:	movs	r0, #1
      _s = s;
      _b = b;
    8940:	strb.w	r6, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8944:	mov.w	r6, #81	; 0x51
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8948:	str.w	r0, [r4, #3336]	; 0xd08
    894c:	movw	r0, #353	; 0x161
      _s = s;
    8950:	strb.w	r6, [r4, #3324]	; 0xcfc
      _b = b;
    8954:	mvn.w	r6, #48	; 0x30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8958:	str.w	r0, [r4, #3344]	; 0xd10
    895c:	movs	r0, #218	; 0xda
      _s = s;
      _b = b;
    895e:	strb.w	r6, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8962:	mov.w	r6, #45	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8966:	str.w	r0, [r4, #3352]	; 0xd18
    896a:	movw	r0, #273	; 0x111
      _s = s;
    896e:	strb.w	r6, [r4, #3332]	; 0xd04
      _b = b;
    8972:	mvn.w	r6, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8976:	str.w	r0, [r4, #3360]	; 0xd20
    897a:	mov.w	r0, #288	; 0x120
      _s = s;
      _b = b;
    897e:	strb.w	r6, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8982:	mov.w	r6, #113	; 0x71
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8986:	str.w	r0, [r4, #3368]	; 0xd28
    898a:	mov.w	r0, #300	; 0x12c
      _s = s;
    898e:	strb.w	r6, [r4, #3340]	; 0xd0c
      _b = b;
    8992:	mvn.w	r6, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8996:	str.w	r0, [r4, #3376]	; 0xd30
    899a:	mov.w	r0, #302	; 0x12e
      _s = s;
      _b = b;
    899e:	strb.w	r6, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89a2:	mov.w	r6, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89a6:	str.w	r0, [r4, #3384]	; 0xd38
    89aa:	movw	r0, #285	; 0x11d
      _s = s;
    89ae:	strb.w	r6, [r4, #3348]	; 0xd14
    89b2:	mov.w	r6, #14
      _b = b;
    89b6:	strb.w	ip, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89ba:	strb.w	r6, [r4, #3356]	; 0xd1c
      _b = b;
    89be:	mvn.w	r6, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    89c2:	str.w	r0, [r4, #3392]	; 0xd40
    89c6:	movs	r0, #246	; 0xf6
      _s = s;
      _b = b;
    89c8:	strb.w	r6, [r4, #3357]	; 0xd1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89cc:	mvn.w	r6, #92	; 0x5c
      _b = b;
    89d0:	strb.w	r8, [r4, #3349]	; 0xd15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89d4:	strb.w	r6, [r4, #3364]	; 0xd24
      _b = b;
    89d8:	mvn.w	r6, #80	; 0x50
    89dc:	strb.w	r6, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89e0:	mvn.w	r6, #102	; 0x66
    89e4:	strb.w	r6, [r4, #3380]	; 0xd34
      _b = b;
    89e8:	mvn.w	r6, #33	; 0x21
    89ec:	strb.w	r6, [r4, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    89f0:	mvn.w	r6, #34	; 0x22
    89f4:	strb.w	r6, [r4, #3388]	; 0xd3c
      _b = b;
    89f8:	mvn.w	r6, #58	; 0x3a
    89fc:	strb.w	r6, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a00:	mov.w	r6, #113	; 0x71
    8a04:	strb.w	r6, [r4, #3396]	; 0xd44
    8a08:	mov.w	r6, #67	; 0x43
    8a0c:	strb.w	r6, [r4, #3372]	; 0xd2c
      _b = b;
    8a10:	mvn.w	r6, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a14:	str.w	r0, [r4, #3400]	; 0xd48
    8a18:	movs	r0, #188	; 0xbc
      _s = s;
      _b = b;
    8a1a:	strb.w	r6, [r4, #3397]	; 0xd45
    8a1e:	mvn.w	r6, #25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a22:	str.w	r0, [r4, #3408]	; 0xd50
    8a26:	movw	r0, #341	; 0x155
      _s = s;
      _b = b;
    8a2a:	strb.w	r6, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a2e:	mov.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a32:	str.w	r0, [r4, #3416]	; 0xd58
    8a36:	movs	r0, #39	; 0x27
      _s = s;
    8a38:	strb.w	r6, [r4, #3412]	; 0xd54
    8a3c:	mov.w	r6, #60	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a40:	str.w	r0, [r4, #3424]	; 0xd60
    8a44:	movs	r0, #41	; 0x29
      _s = s;
    8a46:	strb.w	r6, [r4, #3420]	; 0xd5c
      _b = b;
    8a4a:	mov.w	r6, #110	; 0x6e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a4e:	str.w	r0, [r4, #3432]	; 0xd68
    8a52:	movs	r0, #0
      _s = s;
      _b = b;
    8a54:	strb.w	r6, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a58:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a5c:	str.w	r0, [r4, #3440]	; 0xd70
      _s = s;
    8a60:	strb.w	r6, [r4, #3428]	; 0xd64
      _b = b;
    8a64:	mvn.w	r6, #30
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a68:	strb.w	r0, [r4, #3444]	; 0xd74
      _b = b;
    8a6c:	strb.w	r6, [r4, #3429]	; 0xd65
    8a70:	mvn.w	r6, #77	; 0x4d
    8a74:	strb.w	r0, [r4, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a78:	movs	r0, #0
      _s = s;
      _b = b;
    8a7a:	strb.w	r6, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a7e:	mov.w	r6, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a82:	str.w	r0, [r4, #3448]	; 0xd78
      _s = s;
    8a86:	strb.w	r6, [r4, #3468]	; 0xd8c
      _b = b;
    8a8a:	mov.w	r6, #69	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a8e:	strb.w	r0, [r4, #3452]	; 0xd7c
      _b = b;
    8a92:	strb.w	r0, [r4, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8a96:	movs	r0, #0
      _s = s;
      _b = b;
    8a98:	strb.w	r6, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8a9c:	mvn.w	r6, #107	; 0x6b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aa0:	str.w	r0, [r4, #3456]	; 0xd80
      _s = s;
    8aa4:	strb.w	r0, [r4, #3460]	; 0xd84
      _b = b;
    8aa8:	strb.w	r0, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aac:	movs	r0, #193	; 0xc1
      _s = s;
    8aae:	strb.w	r6, [r4, #3476]	; 0xd94
      _b = b;
    8ab2:	mvn.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ab6:	str.w	r0, [r4, #3464]	; 0xd88
    8aba:	movs	r0, #199	; 0xc7
      _s = s;
      _b = b;
    8abc:	strb.w	r6, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ac0:	mvn.w	r6, #124	; 0x7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ac4:	str.w	r0, [r4, #3472]	; 0xd90
    8ac8:	movs	r0, #193	; 0xc1
      _s = s;
    8aca:	strb.w	r6, [r4, #3484]	; 0xd9c
      _b = b;
    8ace:	mvn.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ad2:	str.w	r0, [r4, #3480]	; 0xd98
    8ad6:	movs	r0, #180	; 0xb4
      _s = s;
      _b = b;
    8ad8:	strb.w	r8, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8adc:	strb.w	r8, [r4, #3436]	; 0xd6c
    8ae0:	strb.w	r7, [r4, #3404]	; 0xd4c
      _b = b;
    8ae4:	strb.w	r6, [r4, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ae8:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8aec:	str.w	r0, [r4, #3488]	; 0xda0
    8af0:	movs	r0, #183	; 0xb7
      _s = s;
    8af2:	strb.w	r6, [r4, #3492]	; 0xda4
      _b = b;
    8af6:	mvn.w	r6, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8afa:	str.w	r0, [r4, #3496]	; 0xda8
    8afe:	movs	r0, #162	; 0xa2
      _s = s;
      _b = b;
    8b00:	strb.w	r6, [r4, #3493]	; 0xda5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b04:	mov.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b08:	str.w	r0, [r4, #3504]	; 0xdb0
    8b0c:	movs	r0, #78	; 0x4e
      _s = s;
    8b0e:	strb.w	r6, [r4, #3500]	; 0xdac
      _b = b;
    8b12:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b16:	str.w	r0, [r4, #3512]	; 0xdb8
    8b1a:	movw	r0, #345	; 0x159
      _s = s;
      _b = b;
    8b1e:	strb.w	r6, [r4, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b22:	mov.w	r6, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b26:	str.w	r0, [r4, #3536]	; 0xdd0
    8b2a:	movw	r0, #279	; 0x117
      _s = s;
    8b2e:	strb.w	r6, [r4, #3508]	; 0xdb4
      _b = b;
    8b32:	mvn.w	r6, #22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b36:	str.w	r0, [r4, #3544]	; 0xdd8
    8b3a:	mov.w	r0, #284	; 0x11c
      _s = s;
      _b = b;
    8b3e:	strb.w	r6, [r4, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b42:	mov.w	r6, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b46:	str.w	r0, [r4, #3552]	; 0xde0
    8b4a:	movw	r0, #277	; 0x115
      _s = s;
    8b4e:	strb.w	r6, [r4, #3516]	; 0xdbc
      _b = b;
    8b52:	mvn.w	r6, #35	; 0x23
    8b56:	strb.w	ip, [r4, #3541]	; 0xdd5
    8b5a:	strb.w	r6, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b5e:	mov.w	r6, #107	; 0x6b
    8b62:	strb.w	r3, [r4, #3556]	; 0xde4
    8b66:	strb.w	r6, [r4, #3524]	; 0xdc4
      _b = b;
    8b6a:	mvn.w	r6, #35	; 0x23
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b6e:	str.w	r0, [r4, #3560]	; 0xde8
    8b72:	mov.w	r0, #276	; 0x114
      _s = s;
      _b = b;
    8b76:	strb.w	r6, [r4, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b7a:	mvn.w	r6, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b7e:	str.w	lr, [r4, #3568]	; 0xdf0
      _s = s;
    8b82:	strb.w	r6, [r4, #3532]	; 0xdcc
      _b = b;
    8b86:	mvn.w	r6, #39	; 0x27
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8b8a:	str.w	r1, [r4, #3520]	; 0xdc0
      _s = s;
      _b = b;
    8b8e:	strb.w	r6, [r4, #3533]	; 0xdcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b92:	mov.w	r6, #108	; 0x6c
      _b = b;
    8b96:	strb.w	r9, [r4, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8b9a:	strb.w	r6, [r4, #3540]	; 0xdd4
    8b9e:	mov.w	r6, #74	; 0x4a
    8ba2:	strb.w	r6, [r4, #3548]	; 0xddc
      _b = b;
    8ba6:	mvn.w	r6, #104	; 0x68
    8baa:	strb.w	r6, [r4, #3549]	; 0xddd
    8bae:	mvn.w	r6, #115	; 0x73
    8bb2:	strb.w	r6, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8bb6:	mov.w	r6, #108	; 0x6c
    8bba:	strb.w	r6, [r4, #3564]	; 0xdec
    8bbe:	mov.w	r6, #41	; 0x29
    8bc2:	strb.w	r6, [r4, #3572]	; 0xdf4
    8bc6:	mov.w	r6, #119	; 0x77
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bca:	str.w	r1, [r4, #3528]	; 0xdc8
      _s = s;
    8bce:	strb.w	r6, [r4, #3580]	; 0xdfc
      _b = b;
    8bd2:	mvn.w	r6, #50	; 0x32
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bd6:	str.w	r0, [r4, #3576]	; 0xdf8
    8bda:	movw	r0, #283	; 0x11b
      _s = s;
      _b = b;
    8bde:	strb.w	r6, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8be2:	mov.w	r6, #58	; 0x3a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8be6:	str.w	r0, [r4, #3584]	; 0xe00
    8bea:	movs	r0, #127	; 0x7f
      _s = s;
    8bec:	strb.w	r6, [r4, #3588]	; 0xe04
      _b = b;
    8bf0:	mvn.w	r6, #29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8bf4:	str.w	r0, [r4, #3592]	; 0xe08
    8bf8:	mov.w	r0, #358	; 0x166
      _s = s;
      _b = b;
    8bfc:	strb.w	r6, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c00:	mov.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c04:	str.w	r0, [r4, #3608]	; 0xe18
    8c08:	mov.w	r0, #324	; 0x144
      _s = s;
    8c0c:	strb.w	r6, [r4, #3596]	; 0xe0c
      _b = b;
    8c10:	mvn.w	r6, #10
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c14:	str.w	r0, [r4, #3616]	; 0xe20
    8c18:	movs	r0, #18
      _s = s;
      _b = b;
    8c1a:	strb.w	r6, [r4, #3597]	; 0xe0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c1e:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c22:	str.w	r0, [r4, #3624]	; 0xe28
    8c26:	movs	r0, #0
      _s = s;
    8c28:	strb.w	r6, [r4, #3604]	; 0xe14
      _b = b;
    8c2c:	mvn.w	r6, #73	; 0x49
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c30:	str.w	r0, [r4, #3632]	; 0xe30
      _s = s;
      _b = b;
    8c34:	strb.w	r6, [r4, #3605]	; 0xe15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c38:	mov.w	r6, #105	; 0x69
    8c3c:	strb.w	r0, [r4, #3636]	; 0xe34
    8c40:	strb.w	r6, [r4, #3612]	; 0xe1c
      _b = b;
    8c44:	mov.w	r6, #114	; 0x72
    8c48:	strb.w	r0, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c4c:	movs	r0, #0
      _s = s;
      _b = b;
    8c4e:	strb.w	r6, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c52:	mov.w	r6, #75	; 0x4b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c56:	str.w	r0, [r4, #3640]	; 0xe38
      _s = s;
    8c5a:	strb.w	r6, [r4, #3620]	; 0xe24
    8c5e:	mov.w	r6, #116	; 0x74
    8c62:	strb.w	r0, [r4, #3644]	; 0xe3c
    8c66:	strb.w	r6, [r4, #3628]	; 0xe2c
      _b = b;
    8c6a:	mvn.w	r6, #106	; 0x6a
    8c6e:	strb.w	r0, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c72:	movs	r0, #0
      _s = s;
      _b = b;
    8c74:	strb.w	r6, [r4, #3629]	; 0xe2d
    8c78:	mov.w	r6, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c7c:	str.w	r0, [r4, #3648]	; 0xe40
      _s = s;
    8c80:	strb.w	r0, [r4, #3652]	; 0xe44
      _b = b;
    8c84:	strb.w	r0, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c88:	movs	r0, #0
      _s = s;
      _b = b;
    8c8a:	strb.w	r8, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c8e:	str.w	r0, [r4, #3656]	; 0xe48
      _s = s;
    8c92:	strb.w	r0, [r4, #3660]	; 0xe4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8c96:	str.w	sl, [r4, #3600]	; 0xe10
      _s = s;
      _b = b;
    8c9a:	strb.w	r6, [r4, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8c9e:	mvn.w	r6, #126	; 0x7e
      _b = b;
    8ca2:	strb.w	r0, [r4, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ca6:	movs	r0, #154	; 0x9a
      _s = s;
    8ca8:	strb.w	r6, [r4, #3668]	; 0xe54
      _b = b;
    8cac:	mov.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cb0:	str.w	r0, [r4, #3672]	; 0xe58
    8cb4:	movs	r0, #192	; 0xc0
      _s = s;
      _b = b;
    8cb6:	strb.w	r6, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8cba:	mov.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cbe:	str.w	r0, [r4, #3680]	; 0xe60
    8cc2:	movs	r0, #170	; 0xaa
      _s = s;
    8cc4:	strb.w	r6, [r4, #3676]	; 0xe5c
    8cc8:	mvn.w	r6, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ccc:	str.w	r0, [r4, #3688]	; 0xe68
    8cd0:	movs	r0, #155	; 0x9b
      _s = s;
    8cd2:	strb.w	r6, [r4, #3684]	; 0xe64
      _b = b;
    8cd6:	mvn.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cda:	str.w	r0, [r4, #3696]	; 0xe70
    8cde:	movs	r0, #9
      _s = s;
      _b = b;
    8ce0:	strb.w	r6, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ce4:	mov.w	r6, #87	; 0x57
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ce8:	str.w	r0, [r4, #3704]	; 0xe78
    8cec:	movs	r0, #3
      _s = s;
    8cee:	strb.w	r6, [r4, #3692]	; 0xe6c
    8cf2:	mov.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8cf6:	str.w	r0, [r4, #3712]	; 0xe80
    8cfa:	mov.w	r0, #352	; 0x160
      _s = s;
    8cfe:	strb.w	r6, [r4, #3700]	; 0xe74
      _b = b;
    8d02:	mvn.w	r6, #47	; 0x2f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d06:	str.w	r0, [r4, #3728]	; 0xe90
    8d0a:	mov.w	r0, #342	; 0x156
      _s = s;
      _b = b;
    8d0e:	strb.w	r6, [r4, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d12:	mov.w	r6, #98	; 0x62
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d16:	str.w	r0, [r4, #3736]	; 0xe98
    8d1a:	movs	r0, #241	; 0xf1
      _s = s;
    8d1c:	strb.w	r6, [r4, #3708]	; 0xe7c
      _b = b;
    8d20:	mvn.w	r6, #27
    8d24:	strb.w	ip, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d28:	mov.w	ip, #89	; 0x59
      _b = b;
    8d2c:	strb.w	r6, [r4, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d30:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d34:	str.w	r1, [r4, #3720]	; 0xe88
      _s = s;
    8d38:	strb.w	r6, [r4, #3716]	; 0xe84
      _b = b;
    8d3c:	mvn.w	r6, #36	; 0x24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d40:	str.w	r0, [r4, #3744]	; 0xea0
    8d44:	movs	r0, #235	; 0xeb
      _s = s;
      _b = b;
    8d46:	strb.w	r6, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d4a:	mvn.w	r6, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d4e:	str.w	sl, [r4, #3664]	; 0xe50
      _s = s;
    8d52:	strb.w	r6, [r4, #3724]	; 0xe8c
      _b = b;
    8d56:	mov.w	r6, #98	; 0x62
    8d5a:	strb.w	fp, [r4, #3677]	; 0xe5d
    8d5e:	strb.w	r6, [r4, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d62:	mvn.w	r6, #67	; 0x43
    8d66:	strb.w	r6, [r4, #3732]	; 0xe94
      _b = b;
    8d6a:	mvn.w	r6, #98	; 0x62
    8d6e:	strb.w	r6, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d72:	mvn.w	r6, #121	; 0x79
    8d76:	strb.w	r6, [r4, #3740]	; 0xe9c
      _b = b;
    8d7a:	mvn.w	r6, #118	; 0x76
    8d7e:	strb.w	r6, [r4, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d82:	mvn.w	r6, #71	; 0x47
    8d86:	strb.w	r6, [r4, #3748]	; 0xea4
      _b = b;
    8d8a:	mov.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d8e:	str.w	r0, [r4, #3752]	; 0xea8
    8d92:	movs	r0, #217	; 0xd9
      _s = s;
      _b = b;
    8d94:	strb.w	r6, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8d98:	mov.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8d9c:	str.w	r0, [r4, #3760]	; 0xeb0
    8da0:	mov.w	r0, #288	; 0x120
      _s = s;
    8da4:	strb.w	r6, [r4, #3756]	; 0xeac
      _b = b;
    8da8:	mvn.w	r6, #94	; 0x5e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dac:	str.w	r0, [r4, #3768]	; 0xeb8
    8db0:	movw	r0, #305	; 0x131
      _s = s;
      _b = b;
    8db4:	strb.w	r6, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8db8:	mov.w	r6, #28
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dbc:	str.w	r0, [r4, #3776]	; 0xec0
    8dc0:	movs	r0, #144	; 0x90
      _s = s;
    8dc2:	strb.w	r6, [r4, #3764]	; 0xeb4
    8dc6:	mov.w	r6, #78	; 0x4e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dca:	str.w	r0, [r4, #3784]	; 0xec8
    8dce:	movs	r0, #194	; 0xc2
      _s = s;
    8dd0:	strb.w	r6, [r4, #3772]	; 0xebc
      _b = b;
    8dd4:	mvn.w	r6, #76	; 0x4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8dd8:	str.w	r0, [r4, #3792]	; 0xed0
    8ddc:	movw	r0, #315	; 0x13b
      _s = s;
      _b = b;
    8de0:	strb.w	r6, [r4, #3773]	; 0xebd
    8de4:	mvn.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8de8:	str.w	r0, [r4, #3800]	; 0xed8
    8dec:	movs	r0, #28
      _s = s;
      _b = b;
    8dee:	strb.w	r6, [r4, #3781]	; 0xec5
    8df2:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8df6:	str.w	r0, [r4, #3808]	; 0xee0
    8dfa:	movs	r0, #22
      _s = s;
      _b = b;
    8dfc:	strb.w	r6, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e00:	mov.w	r6, #116	; 0x74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e04:	str.w	r0, [r4, #3816]	; 0xee8
    8e08:	movs	r0, #0
      _s = s;
    8e0a:	strb.w	r6, [r4, #3796]	; 0xed4
      _b = b;
    8e0e:	mvn.w	r6, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e12:	str.w	r0, [r4, #3824]	; 0xef0
      _s = s;
      _b = b;
    8e16:	strb.w	r6, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e1a:	mov.w	r6, #18
    8e1e:	strb.w	r0, [r4, #3828]	; 0xef4
    8e22:	strb.w	r6, [r4, #3804]	; 0xedc
      _b = b;
    8e26:	mov.w	r6, #112	; 0x70
    8e2a:	strb.w	r0, [r4, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e2e:	movs	r0, #0
      _s = s;
      _b = b;
    8e30:	strb.w	r6, [r4, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e34:	mvn.w	r6, #84	; 0x54
    8e38:	strb.w	r7, [r4, #3788]	; 0xecc
    8e3c:	mov.w	r7, #109	; 0x6d
    8e40:	strb.w	r6, [r4, #3812]	; 0xee4
      _b = b;
    8e44:	mvn.w	r6, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e48:	str.w	r0, [r4, #3832]	; 0xef8
      _s = s;
      _b = b;
    8e4c:	strb.w	r6, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e50:	mvn.w	r6, #35	; 0x23
    8e54:	strb.w	r0, [r4, #3836]	; 0xefc
    8e58:	strb.w	r6, [r4, #3820]	; 0xeec
      _b = b;
    8e5c:	mvn.w	r6, #113	; 0x71
    8e60:	strb.w	r8, [r4, #3765]	; 0xeb5
    8e64:	strb.w	r6, [r4, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e68:	mov.w	r6, #12
    8e6c:	strb.w	r6, [r4, #3780]	; 0xec4
    8e70:	mov.w	r6, #41	; 0x29
      _b = b;
    8e74:	strb.w	r0, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e78:	movs	r0, #0
      _s = s;
    8e7a:	strb.w	r6, [r4, #3868]	; 0xf1c
      _b = b;
    8e7e:	mov.w	r6, #68	; 0x44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e82:	str.w	r0, [r4, #3840]	; 0xf00
      _s = s;
      _b = b;
    8e86:	strb.w	r6, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8e8a:	mvn.w	r6, #51	; 0x33
    8e8e:	strb.w	r0, [r4, #3844]	; 0xf04
    8e92:	strb.w	r6, [r4, #3876]	; 0xf24
      _b = b;
    8e96:	mvn.w	r6, #119	; 0x77
    8e9a:	strb.w	r0, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8e9e:	movs	r0, #0
      _s = s;
      _b = b;
    8ea0:	strb.w	r6, [r4, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ea4:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ea8:	str.w	r0, [r4, #3848]	; 0xf08
      _s = s;
    8eac:	strb.w	r6, [r4, #3884]	; 0xf2c
      _b = b;
    8eb0:	mvn.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8eb4:	strb.w	r0, [r4, #3852]	; 0xf0c
      _b = b;
    8eb8:	strb.w	r6, [r4, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ebc:	mov.w	r6, #30
      _b = b;
    8ec0:	strb.w	r0, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ec4:	movs	r0, #0
      _s = s;
    8ec6:	strb.w	r6, [r4, #3892]	; 0xf34
      _b = b;
    8eca:	mvn.w	r6, #114	; 0x72
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ece:	str.w	r0, [r4, #3856]	; 0xf10
      _s = s;
      _b = b;
    8ed2:	strb.w	r6, [r4, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ed6:	mov.w	r6, #126	; 0x7e
    8eda:	strb.w	r0, [r4, #3860]	; 0xf14
      _b = b;
    8ede:	strb.w	r0, [r4, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8ee2:	movs	r0, #87	; 0x57
      _s = s;
    8ee4:	strb.w	r6, [r4, #3900]	; 0xf3c
      _b = b;
    8ee8:	mvn.w	r6, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8eec:	str.w	r0, [r4, #3864]	; 0xf18
    8ef0:	movs	r0, #176	; 0xb0
      _s = s;
      _b = b;
    8ef2:	strb.w	r6, [r4, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ef6:	mvn.w	r6, #34	; 0x22
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8efa:	str.w	r0, [r4, #3872]	; 0xf20
    8efe:	movs	r0, #171	; 0xab
      _s = s;
    8f00:	strb.w	r6, [r4, #3908]	; 0xf44
      _b = b;
    8f04:	mvn.w	r6, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f08:	str.w	r0, [r4, #3880]	; 0xf28
    8f0c:	movs	r0, #165	; 0xa5
      _s = s;
      _b = b;
    8f0e:	strb.w	r6, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f12:	mvn.w	r6, #43	; 0x2b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f16:	str.w	r0, [r4, #3888]	; 0xf30
    8f1a:	movs	r0, #1
      _s = s;
    8f1c:	strb.w	r6, [r4, #3916]	; 0xf4c
      _b = b;
    8f20:	mov.w	r6, #121	; 0x79
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f24:	str.w	r0, [r4, #3896]	; 0xf38
    8f28:	movs	r0, #3
      _s = s;
      _b = b;
    8f2a:	strb.w	r6, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f2e:	mvn.w	r6, #14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f32:	str.w	r0, [r4, #3904]	; 0xf40
    8f36:	str.w	r1, [r4, #3912]	; 0xf48
    8f3a:	str.w	r0, [r4, #3920]	; 0xf50
    8f3e:	mov.w	r0, #348	; 0x15c
      _s = s;
    8f42:	strb.w	r6, [r4, #3924]	; 0xf54
      _b = b;
    8f46:	mov.w	r6, #92	; 0x5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f4a:	str.w	r1, [r4, #3928]	; 0xf58
    8f4e:	movs	r1, #225	; 0xe1
      _s = s;
      _b = b;
    8f50:	strb.w	r6, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f54:	mvn.w	r6, #111	; 0x6f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f58:	str.w	r1, [r4, #3936]	; 0xf60
    8f5c:	movs	r1, #220	; 0xdc
      _s = s;
    8f5e:	strb.w	r6, [r4, #3932]	; 0xf5c
      _b = b;
    8f62:	mvn.w	r6, #101	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f66:	str.w	r1, [r4, #3952]	; 0xf70
    8f6a:	movs	r1, #222	; 0xde
      _s = s;
      _b = b;
    8f6c:	strb.w	r6, [r4, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f70:	mov.w	r6, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f74:	str.w	r1, [r4, #3960]	; 0xf78
    8f78:	movs	r1, #190	; 0xbe
      _s = s;
    8f7a:	strb.w	r6, [r4, #3940]	; 0xf64
      _b = b;
    8f7e:	mvn.w	r6, #79	; 0x4f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f82:	str.w	r1, [r4, #3968]	; 0xf80
    8f86:	movs	r1, #198	; 0xc6
      _s = s;
      _b = b;
    8f88:	strb.w	r6, [r4, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8f8c:	mvn.w	r6, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f90:	str.w	r1, [r4, #3976]	; 0xf88
    8f94:	movs	r1, #22
      _s = s;
    8f96:	strb.w	r6, [r4, #3948]	; 0xf6c
      _b = b;
    8f9a:	mvn.w	r6, #118	; 0x76
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8f9e:	str.w	r1, [r4, #3984]	; 0xf90
    8fa2:	movs	r1, #12
      _s = s;
      _b = b;
    8fa4:	strb.w	r6, [r4, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8fa8:	mov.w	r6, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fac:	str.w	r1, [r4, #3992]	; 0xf98
    8fb0:	movs	r1, #26
      _s = s;
    8fb2:	strb.w	r6, [r4, #3956]	; 0xf74
      _b = b;
    8fb6:	mvn.w	r6, #51	; 0x33
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fba:	str.w	r1, [r4, #4000]	; 0xfa0
    8fbe:	movs	r1, #17
      _s = s;
      _b = b;
    8fc0:	strb.w	r6, [r4, #3957]	; 0xf75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8fc4:	mov.w	r6, #88	; 0x58
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fc8:	str.w	r1, [r4, #4008]	; 0xfa8
    8fcc:	movs	r1, #0
      _s = s;
    8fce:	strb.w	r6, [r4, #3964]	; 0xf7c
      _b = b;
    8fd2:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8fd6:	str.w	lr, [r4, #3944]	; 0xf68
      _s = s;
      _b = b;
    8fda:	strb.w	r6, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8fde:	mov.w	r6, #45	; 0x2d
      _b = b;
    8fe2:	strb.w	r3, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8fe6:	strb.w	r6, [r4, #3972]	; 0xf84
      _b = b;
    8fea:	mvn.w	r6, #37	; 0x25
    8fee:	strb.w	r6, [r4, #3973]	; 0xf85
    8ff2:	mvn.w	r6, #84	; 0x54
    8ff6:	strb.w	r6, [r4, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8ffa:	mvn.w	r6, #56	; 0x38
    8ffe:	strb.w	r6, [r4, #3988]	; 0xf94
      _b = b;
    9002:	mvn.w	r6, #62	; 0x3e
    9006:	strb.w	r6, [r4, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    900a:	mvn.w	r6, #83	; 0x53
    900e:	strb.w	r6, [r4, #3996]	; 0xf9c
      _b = b;
    9012:	mvn.w	r6, #82	; 0x52
    9016:	strb.w	r6, [r4, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    901a:	mvn.w	r6, #43	; 0x2b
    901e:	strb.w	r6, [r4, #4004]	; 0xfa4
    9022:	mvn.w	r6, #39	; 0x27
    9026:	strb.w	r6, [r4, #4012]	; 0xfac
      _b = b;
    902a:	mov.w	r6, #125	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    902e:	strb.w	ip, [r4, #3980]	; 0xf8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9032:	str.w	r1, [r4, #4016]	; 0xfb0
      _s = s;
    9036:	strb.w	r1, [r4, #4020]	; 0xfb4
      _b = b;
    903a:	strb.w	r1, [r4, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    903e:	movs	r1, #0
      _s = s;
      _b = b;
    9040:	strb.w	r6, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9044:	mvn.w	r6, #8
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9048:	str.w	r1, [r4, #4024]	; 0xfb8
      _s = s;
    904c:	strb.w	r1, [r4, #4028]	; 0xfbc
      _b = b;
    9050:	strb.w	r1, [r4, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9054:	movs	r1, #0
      _s = s;
    9056:	strb.w	r6, [r4, #4076]	; 0xfec
      _b = b;
    905a:	mov.w	r6, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    905e:	str.w	r1, [r4, #4032]	; 0xfc0
      _s = s;
    9062:	strb.w	r1, [r4, #4036]	; 0xfc4
      _b = b;
    9066:	strb.w	r1, [r4, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    906a:	movs	r1, #0
      _s = s;
      _b = b;
    906c:	strb.w	r6, [r4, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9070:	mov.w	r6, #15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9074:	str.w	r1, [r4, #4040]	; 0xfc8
      _s = s;
    9078:	strb.w	r1, [r4, #4044]	; 0xfcc
      _b = b;
    907c:	strb.w	r1, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9080:	movs	r1, #0
      _s = s;
    9082:	strb.w	r6, [r4, #4084]	; 0xff4
      _b = b;
    9086:	mvn.w	r6, #77	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    908a:	str.w	r1, [r4, #4048]	; 0xfd0
      _s = s;
    908e:	strb.w	r1, [r4, #4052]	; 0xfd4
      _b = b;
    9092:	strb.w	r1, [r4, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9096:	movs	r1, #0
      _s = s;
      _b = b;
    9098:	strb.w	r6, [r4, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    909c:	mov.w	r6, #80	; 0x50
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90a0:	str.w	r1, [r4, #4056]	; 0xfd8
      _s = s;
    90a4:	strb.w	r1, [r4, #4060]	; 0xfdc
      _b = b;
    90a8:	strb.w	r1, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90ac:	movs	r1, #0
      _s = s;
    90ae:	strb.w	r6, [r4, #4092]	; 0xffc
      _b = b;
    90b2:	mvn.w	r6, #26
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90b6:	str.w	r1, [r4, #4064]	; 0xfe0
      _s = s;
    90ba:	strb.w	r1, [r4, #4068]	; 0xfe4
      _b = b;
    90be:	strb.w	r1, [r4, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90c2:	movs	r1, #173	; 0xad
      _s = s;
      _b = b;
    90c4:	strb.w	r6, [r4, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    90c8:	movw	r6, #4100	; 0x1004
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90cc:	str.w	r1, [r4, #4072]	; 0xfe8
    90d0:	movs	r1, #120	; 0x78
      _s = s;
    90d2:	strb	r7, [r4, r6]
      _b = b;
    90d4:	mvn.w	r7, #18
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90d8:	str.w	r1, [r4, #4080]	; 0xff0
    90dc:	movs	r1, #4
    90de:	str.w	r1, [r4, #4088]	; 0xff8
    90e2:	add.w	r1, r4, #4096	; 0x1000
    90e6:	mov	r6, r1
    90e8:	movs	r1, #5
    90ea:	str.w	r1, [r6], #32
    90ee:	mov	r1, r6
      _s = s;
      _b = b;
    90f0:	movw	r6, #4101	; 0x1005
    90f4:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    90f6:	mov	r6, r1
    90f8:	movs	r1, #100	; 0x64
    90fa:	str	r1, [r6, #0]
      _s = s;
    90fc:	movw	r1, #4108	; 0x100c
    9100:	mvn.w	r6, #102	; 0x66
    9104:	strb	r6, [r4, r1]
      _b = b;
    9106:	movw	r1, #4109	; 0x100d
    910a:	mvn.w	r6, #96	; 0x60
    910e:	strb	r6, [r4, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9110:	movw	r6, #4112	; 0x1010
    9114:	mov.w	r1, #358	; 0x166
    9118:	str	r1, [r4, r6]
      _s = s;
    911a:	movw	r1, #4116	; 0x1014
    911e:	mvn.w	r6, #83	; 0x53
    9122:	strb	r6, [r4, r1]
      _b = b;
    9124:	movw	r1, #4117	; 0x1015
    9128:	mvn.w	r6, #76	; 0x4c
    912c:	strb	r6, [r4, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    912e:	movw	r1, #4124	; 0x101c
    9132:	mov.w	r6, #114	; 0x72
    9136:	strb	r6, [r4, r1]
      _b = b;
    9138:	movw	r1, #4125	; 0x101d
    913c:	mvn.w	r6, #63	; 0x3f
    9140:	strb	r6, [r4, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9142:	movw	r1, #4132	; 0x1024
    9146:	mov.w	r6, #3
    914a:	strb	r6, [r4, r1]
      _b = b;
    914c:	movw	r1, #4133	; 0x1025
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9150:	movw	r6, #4136	; 0x1028
      _s = s;
      _b = b;
    9154:	strb.w	sl, [r4, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9158:	movs	r1, #243	; 0xf3
    915a:	str	r1, [r4, r6]
      _s = s;
    915c:	movw	r1, #4140	; 0x102c
    9160:	mov.w	r6, #59	; 0x3b
    9164:	strb	r6, [r4, r1]
      _b = b;
    9166:	mvn.w	r6, #58	; 0x3a
    916a:	movw	r1, #4141	; 0x102d
    916e:	strb	r6, [r4, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9170:	movw	r1, #4144	; 0x1030
    9174:	str	r3, [r4, r1]
      _s = s;
    9176:	movw	r3, #4148	; 0x1034
    917a:	mov.w	r1, #78	; 0x4e
    917e:	strb	r1, [r4, r3]
      _b = b;
    9180:	movw	r3, #4149	; 0x1035
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9184:	movw	r1, #4152	; 0x1038
      _s = s;
      _b = b;
    9188:	strb	r6, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    918a:	movw	r3, #327	; 0x147
      _s = s;
    918e:	movw	r6, #4284	; 0x10bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9192:	str	r3, [r4, r1]
      _s = s;
    9194:	movw	r3, #4156	; 0x103c
    9198:	mov.w	r1, #74	; 0x4a
    919c:	strb	r1, [r4, r3]
      _b = b;
    919e:	movw	r3, #4157	; 0x103d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a2:	movs	r1, #199	; 0xc7
      _s = s;
      _b = b;
    91a4:	strb.w	ip, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91a8:	add.w	r3, r4, #4096	; 0x1000
    91ac:	str	r1, [r3, #64]	; 0x40
      _s = s;
    91ae:	movw	r3, #4164	; 0x1044
    91b2:	mvn.w	r1, #124	; 0x7c
    91b6:	strb	r1, [r4, r3]
      _b = b;
    91b8:	movw	r3, #4165	; 0x1045
    91bc:	mvn.w	r1, #78	; 0x4e
    91c0:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91c2:	movw	r1, #4168	; 0x1048
    91c6:	movs	r3, #9
    91c8:	str	r3, [r4, r1]
      _s = s;
    91ca:	movw	r3, #4172	; 0x104c
    91ce:	mov.w	r1, #68	; 0x44
    91d2:	strb	r1, [r4, r3]
      _b = b;
    91d4:	movw	r3, #4173	; 0x104d
    91d8:	mvn.w	r1, #94	; 0x5e
    91dc:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91de:	movw	r1, #4176	; 0x1050
    91e2:	movs	r3, #24
    91e4:	str	r3, [r4, r1]
      _s = s;
    91e6:	movw	r3, #4180	; 0x1054
    91ea:	mov.w	r1, #4294967295
    91ee:	strb	r1, [r4, r3]
      _b = b;
    91f0:	movw	r3, #4181	; 0x1055
    91f4:	mvn.w	r1, #9
    91f8:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    91fa:	movw	r1, #4184	; 0x1058
    91fe:	movs	r3, #16
    9200:	str	r3, [r4, r1]
      _s = s;
    9202:	movw	r3, #4188	; 0x105c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9206:	movs	r1, #6
      _s = s;
    9208:	strb.w	lr, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    920c:	movw	r3, #4104	; 0x1008
    9210:	str	r0, [r4, r3]
    9212:	movw	r3, #4120	; 0x1018
    9216:	movs	r0, #0
    9218:	str	r1, [r4, r3]
      _s = s;
      _b = b;
    921a:	movw	r3, #4189	; 0x105d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    921e:	movs	r1, #0
      _s = s;
      _b = b;
    9220:	strb.w	r8, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9224:	add.w	r3, r4, #4224	; 0x1080
    9228:	str	r1, [r3, #0]
    922a:	movs	r1, #18
    922c:	str.w	r1, [r3, #-32]
      _s = s;
    9230:	movw	r3, #4196	; 0x1064
      _b = b;
    9234:	mvn.w	r1, #49	; 0x31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9238:	strb	r7, [r4, r3]
      _b = b;
    923a:	movw	r3, #4197	; 0x1065
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    923e:	mov.w	r7, #7
      _b = b;
    9242:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9244:	movw	r1, #4200	; 0x1068
    9248:	movs	r3, #35	; 0x23
    924a:	str	r3, [r4, r1]
      _s = s;
    924c:	movw	r3, #4204	; 0x106c
    9250:	mvn.w	r1, #9
    9254:	strb	r1, [r4, r3]
      _b = b;
    9256:	movw	r3, #4205	; 0x106d
    925a:	mov.w	r1, #121	; 0x79
    925e:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9260:	movs	r1, #0
    9262:	movw	r3, #4208	; 0x1070
    9266:	str	r1, [r4, r3]
      _s = s;
    9268:	movw	r3, #4212	; 0x1074
    926c:	strb	r1, [r4, r3]
      _b = b;
    926e:	movw	r3, #4213	; 0x1075
    9272:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9274:	movs	r1, #0
    9276:	movw	r3, #4216	; 0x1078
    927a:	str	r1, [r4, r3]
      _s = s;
    927c:	movw	r3, #4220	; 0x107c
    9280:	strb	r1, [r4, r3]
      _b = b;
    9282:	movw	r3, #4221	; 0x107d
    9286:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9288:	movw	r3, #4228	; 0x1084
    928c:	strb	r1, [r4, r3]
      _b = b;
    928e:	movw	r3, #4229	; 0x1085
    9292:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9294:	movs	r1, #0
    9296:	movw	r3, #4232	; 0x1088
    929a:	str	r1, [r4, r3]
      _s = s;
    929c:	movw	r3, #4236	; 0x108c
    92a0:	strb	r1, [r4, r3]
      _b = b;
    92a2:	movw	r3, #4237	; 0x108d
    92a6:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92a8:	movs	r1, #0
    92aa:	movw	r3, #4240	; 0x1090
    92ae:	str	r1, [r4, r3]
      _s = s;
    92b0:	movw	r3, #4244	; 0x1094
    92b4:	strb	r1, [r4, r3]
      _b = b;
    92b6:	movw	r3, #4245	; 0x1095
    92ba:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92bc:	movs	r1, #0
    92be:	movw	r3, #4248	; 0x1098
    92c2:	str	r1, [r4, r3]
      _s = s;
    92c4:	movw	r3, #4252	; 0x109c
    92c8:	strb	r1, [r4, r3]
      _b = b;
    92ca:	movw	r3, #4253	; 0x109d
    92ce:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    92d0:	movw	r3, #4260	; 0x10a4
    92d4:	strb	r1, [r4, r3]
      _b = b;
    92d6:	movw	r3, #4261	; 0x10a5
    92da:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92dc:	movs	r1, #0
    92de:	movw	r3, #4264	; 0x10a8
    92e2:	str	r1, [r4, r3]
      _s = s;
    92e4:	movw	r3, #4268	; 0x10ac
    92e8:	strb	r1, [r4, r3]
      _b = b;
    92ea:	movw	r3, #4269	; 0x10ad
    92ee:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92f0:	movs	r1, #0
    92f2:	movw	r3, #4272	; 0x10b0
    92f6:	str	r1, [r4, r3]
      _s = s;
    92f8:	movw	r3, #4276	; 0x10b4
    92fc:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    92fe:	movs	r1, #0
    9300:	add.w	r3, r4, #4256	; 0x10a0
    9304:	str	r1, [r3, #0]
      _s = s;
      _b = b;
    9306:	movw	r3, #4277	; 0x10b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    930a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    930c:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
      _b = b;
    9310:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9312:	add.w	r3, r4, #4096	; 0x1000
    9316:	movw	r1, #351	; 0x15f
      _s = s;
      _b = b;
    931a:	movw	r6, #4365	; 0x110d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    931e:	str.w	r1, [r3, #192]	; 0xc0
    9322:	movw	r1, #4280	; 0x10b8
    9326:	mov.w	r3, #300	; 0x12c
    932a:	str	r3, [r4, r1]
      _s = s;
      _b = b;
    932c:	movw	r3, #4285	; 0x10bd
    9330:	mov.w	r1, #100	; 0x64
    9334:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9336:	movw	r3, #4292	; 0x10c4
    933a:	mov.w	r1, #57	; 0x39
    933e:	strb	r1, [r4, r3]
      _b = b;
    9340:	movw	r3, #4293	; 0x10c5
    9344:	mvn.w	r1, #79	; 0x4f
    9348:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    934a:	movw	r1, #4296	; 0x10c8
    934e:	mov.w	r3, #358	; 0x166
    9352:	str	r3, [r4, r1]
      _s = s;
    9354:	movw	r3, #4300	; 0x10cc
    9358:	mov.w	r1, #75	; 0x4b
    935c:	strb	r1, [r4, r3]
      _b = b;
    935e:	movw	r3, #4301	; 0x10cd
    9362:	mvn.w	r1, #48	; 0x30
    9366:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9368:	movw	r1, #4304	; 0x10d0
    936c:	mov.w	r3, #356	; 0x164
    9370:	str	r3, [r4, r1]
      _s = s;
    9372:	movw	r3, #4308	; 0x10d4
    9376:	mov.w	r1, #115	; 0x73
    937a:	strb	r1, [r4, r3]
    937c:	movw	r3, #4324	; 0x10e4
    9380:	mov.w	r1, #70	; 0x46
    9384:	strb	r1, [r4, r3]
      _b = b;
    9386:	movw	r3, #4325	; 0x10e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    938a:	movw	r1, #4328	; 0x10e8
      _s = s;
      _b = b;
    938e:	strb.w	fp, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9392:	movs	r3, #176	; 0xb0
    9394:	str	r3, [r4, r1]
      _s = s;
    9396:	movw	r3, #4332	; 0x10ec
    939a:	mov.w	r1, #43	; 0x2b
    939e:	strb	r1, [r4, r3]
      _b = b;
    93a0:	movw	r3, #4333	; 0x10ed
    93a4:	mvn.w	r1, #32
    93a8:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93aa:	movw	r3, #4340	; 0x10f4
    93ae:	mov.w	r1, #78	; 0x4e
    93b2:	strb	r1, [r4, r3]
    93b4:	movw	r3, #4356	; 0x1104
    93b8:	mov.w	r1, #116	; 0x74
    93bc:	strb	r1, [r4, r3]
    93be:	movw	r3, #4364	; 0x110c
    93c2:	mvn.w	r1, #111	; 0x6f
    93c6:	strb	r1, [r4, r3]
      _b = b;
    93c8:	movw	r3, #4357	; 0x1105
    93cc:	mov.w	r1, #125	; 0x7d
    93d0:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    93d2:	movw	r3, #4316	; 0x10dc
    93d6:	mov.w	r1, #95	; 0x5f
    93da:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93dc:	movw	r1, #4344	; 0x10f8
    93e0:	movs	r3, #26
    93e2:	str	r3, [r4, r1]
    93e4:	movw	r1, #4360	; 0x1108
    93e8:	movs	r3, #22
    93ea:	str	r3, [r4, r1]
    93ec:	movw	r1, #4336	; 0x10f0
    93f0:	movs	r3, #190	; 0xbe
    93f2:	str	r3, [r4, r1]
      _s = s;
      _b = b;
    93f4:	movw	r3, #4317	; 0x10dd
    93f8:	mvn.w	r1, #63	; 0x3f
    93fc:	strb	r1, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    93fe:	add.w	r3, r4, #4096	; 0x1000
    9402:	movs	r1, #204	; 0xcc
    9404:	str.w	r1, [r3, #224]	; 0xe0
      _s = s;
      _b = b;
    9408:	movw	r3, #4309	; 0x10d5
    940c:	mvn.w	r1, #40	; 0x28
    9410:	strb	r1, [r4, r3]
    9412:	movw	r3, #4341	; 0x10f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9416:	mvn.w	r1, #31
      _b = b;
    941a:	strb	r2, [r4, r3]
    941c:	movw	r3, #4349	; 0x10fd
    9420:	mvn.w	r2, #56	; 0x38
    9424:	strb	r2, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9426:	movw	r2, #4348	; 0x10fc
#include "Screen.h"



//--------------------------------------------Screens
Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    942a:	movs	r3, #82	; 0x52
    942c:	strb	r1, [r4, r2]
    942e:	movs	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9430:	movw	r1, #4312	; 0x10d8
    9434:	str	r0, [r4, r1]
    9436:	mov.w	r1, #576	; 0x240
    943a:	str.w	r2, [r7, #256]	; 0x100
    943e:	movw	r7, #4368	; 0x1110
      _s = s;
      _b = b;
    9442:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9446:	movs	r6, #27
    9448:	ldr	r0, [pc, #884]	; (97c0 <_GLOBAL__sub_I_low_threshold+0x5f78>)
    944a:	str	r6, [r4, r7]
      _s = s;
    944c:	movw	r6, #4372	; 0x1114
    9450:	mov.w	r7, #4294967295
    9454:	strb	r7, [r4, r6]
      _b = b;
    9456:	movw	r6, #4373	; 0x1115
    945a:	mvn.w	r7, #11
    945e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9460:	movw	r7, #4376	; 0x1118
    9464:	movs	r6, #8
    9466:	str	r6, [r4, r7]
      _s = s;
    9468:	movw	r6, #4380	; 0x111c
      _b = b;
    946c:	mvn.w	r7, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    9470:	strb.w	lr, [r4, r6]
      _b = b;
    9474:	movw	r6, #4381	; 0x111d
    9478:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    947a:	add.w	r6, r4, #4096	; 0x1000
    947e:	movs	r7, #15
    9480:	str.w	r7, [r6, #288]	; 0x120
      _s = s;
    9484:	movw	r6, #4388	; 0x1124
    9488:	mov.w	r7, #4294967295
    948c:	strb	r7, [r4, r6]
      _b = b;
    948e:	movw	r6, #4389	; 0x1125
    9492:	mvn.w	r7, #92	; 0x5c
    9496:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9498:	movs	r7, #0
    949a:	movw	r6, #4392	; 0x1128
    949e:	str	r7, [r4, r6]
      _s = s;
    94a0:	movw	r6, #4396	; 0x112c
    94a4:	strb	r7, [r4, r6]
      _b = b;
    94a6:	movw	r6, #4397	; 0x112d
    94aa:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94ac:	movs	r7, #0
    94ae:	movw	r6, #4400	; 0x1130
    94b2:	str	r7, [r4, r6]
      _s = s;
    94b4:	movw	r6, #4404	; 0x1134
    94b8:	strb	r7, [r4, r6]
      _b = b;
    94ba:	movw	r6, #4405	; 0x1135
    94be:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94c0:	movs	r7, #0
    94c2:	movw	r6, #4408	; 0x1138
    94c6:	str	r7, [r4, r6]
      _s = s;
    94c8:	movw	r6, #4412	; 0x113c
    94cc:	strb	r7, [r4, r6]
      _b = b;
    94ce:	movw	r6, #4413	; 0x113d
    94d2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    94d4:	movw	r6, #4420	; 0x1144
    94d8:	strb	r7, [r4, r6]
      _b = b;
    94da:	movw	r6, #4421	; 0x1145
    94de:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94e0:	movs	r7, #0
    94e2:	movw	r6, #4424	; 0x1148
    94e6:	str	r7, [r4, r6]
      _s = s;
    94e8:	movw	r6, #4428	; 0x114c
    94ec:	strb	r7, [r4, r6]
      _b = b;
    94ee:	movw	r6, #4429	; 0x114d
    94f2:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    94f4:	movs	r7, #0
    94f6:	movw	r6, #4432	; 0x1150
    94fa:	str	r7, [r4, r6]
      _s = s;
    94fc:	movw	r6, #4436	; 0x1154
    9500:	strb	r7, [r4, r6]
      _b = b;
    9502:	movw	r6, #4437	; 0x1155
    9506:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9508:	movs	r7, #0
    950a:	movw	r6, #4440	; 0x1158
    950e:	str	r7, [r4, r6]
      _s = s;
    9510:	movw	r6, #4444	; 0x115c
    9514:	strb	r7, [r4, r6]
      _b = b;
    9516:	movw	r6, #4445	; 0x115d
    951a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    951c:	movw	r6, #4452	; 0x1164
    9520:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9522:	movs	r7, #0
    9524:	add.w	r6, r4, #4416	; 0x1140
    9528:	str	r7, [r6, #0]
    952a:	str	r7, [r6, #32]
      _s = s;
      _b = b;
    952c:	movw	r6, #4453	; 0x1165
    9530:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9532:	movs	r7, #0
    9534:	movw	r6, #4456	; 0x1168
    9538:	str	r7, [r4, r6]
      _s = s;
    953a:	movw	r6, #4460	; 0x116c
    953e:	strb	r7, [r4, r6]
      _b = b;
    9540:	movw	r6, #4461	; 0x116d
    9544:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9546:	movs	r7, #0
    9548:	movw	r6, #4464	; 0x1170
    954c:	str	r7, [r4, r6]
      _s = s;
    954e:	movw	r6, #4468	; 0x1174
    9552:	strb	r7, [r4, r6]
      _b = b;
    9554:	movw	r6, #4469	; 0x1175
    9558:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    955a:	movs	r7, #0
    955c:	movw	r6, #4472	; 0x1178
    9560:	str	r7, [r4, r6]
      _s = s;
    9562:	movw	r6, #4476	; 0x117c
    9566:	strb	r7, [r4, r6]
      _b = b;
    9568:	movw	r6, #4477	; 0x117d
    956c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    956e:	movw	r6, #4484	; 0x1184
    9572:	strb	r7, [r4, r6]
      _b = b;
    9574:	movw	r6, #4485	; 0x1185
    9578:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    957a:	movw	r7, #4488	; 0x1188
    957e:	movs	r6, #1
    9580:	str	r6, [r4, r7]
      _s = s;
    9582:	movw	r6, #4492	; 0x118c
      _b = b;
    9586:	mov.w	r7, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    958a:	strb.w	ip, [r4, r6]
      _b = b;
    958e:	movw	r6, #4493	; 0x118d
    9592:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9594:	movw	r6, #4496	; 0x1190
    9598:	movs	r7, #0
    959a:	str	r7, [r4, r6]
      _s = s;
    959c:	movw	r6, #4500	; 0x1194
    95a0:	mov.w	r7, #12
    95a4:	strb	r7, [r4, r6]
      _b = b;
    95a6:	movw	r6, #4501	; 0x1195
    95aa:	mvn.w	r7, #113	; 0x71
    95ae:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95b0:	movw	r7, #4504	; 0x1198
    95b4:	movs	r6, #192	; 0xc0
    95b6:	str	r6, [r4, r7]
      _s = s;
    95b8:	movw	r6, #4508	; 0x119c
    95bc:	mov.w	r7, #66	; 0x42
    95c0:	strb	r7, [r4, r6]
      _b = b;
    95c2:	movw	r6, #4509	; 0x119d
    95c6:	mvn.w	r7, #74	; 0x4a
    95ca:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95cc:	add.w	r6, r4, #4096	; 0x1000
    95d0:	movs	r7, #177	; 0xb1
    95d2:	str.w	r7, [r6, #416]	; 0x1a0
      _s = s;
    95d6:	movw	r6, #4516	; 0x11a4
    95da:	mov.w	r7, #65	; 0x41
    95de:	strb	r7, [r4, r6]
      _b = b;
    95e0:	movw	r6, #4517	; 0x11a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95e4:	movw	r7, #4520	; 0x11a8
      _s = s;
      _b = b;
    95e8:	strb.w	r8, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95ec:	movs	r6, #188	; 0xbc
    95ee:	str	r6, [r4, r7]
      _s = s;
    95f0:	movw	r6, #4524	; 0x11ac
    95f4:	mov.w	r7, #86	; 0x56
    95f8:	strb	r7, [r4, r6]
      _b = b;
    95fa:	movw	r6, #4525	; 0x11ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    95fe:	movw	r7, #4528	; 0x11b0
      _s = s;
      _b = b;
    9602:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9606:	movs	r6, #22
    9608:	str	r6, [r4, r7]
      _s = s;
    960a:	movw	r6, #4532	; 0x11b4
    960e:	mvn.w	r7, #79	; 0x4f
    9612:	strb	r7, [r4, r6]
      _b = b;
    9614:	movw	r6, #4533	; 0x11b5
    9618:	mvn.w	r7, #102	; 0x66
    961c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    961e:	movw	r7, #4536	; 0x11b8
    9622:	movs	r6, #25
    9624:	str	r6, [r4, r7]
      _s = s;
    9626:	movw	r6, #4540	; 0x11bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    962a:	movs	r7, #0
      _s = s;
    962c:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9630:	add.w	r6, r4, #4480	; 0x1180
    9634:	str	r7, [r6, #0]
      _s = s;
      _b = b;
    9636:	movw	r6, #4541	; 0x11bd
    963a:	mvn.w	r7, #36	; 0x24
    963e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9640:	add.w	r6, r4, #4096	; 0x1000
    9644:	movs	r7, #10
    9646:	str.w	r7, [r6, #448]	; 0x1c0
    964a:	movs	r7, #0
    964c:	str.w	r7, [r6, #480]	; 0x1e0
      _s = s;
    9650:	movw	r6, #4548	; 0x11c4
    9654:	mvn.w	r7, #50	; 0x32
    9658:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    965a:	movw	r7, #4552	; 0x11c8
    965e:	mov.w	r6, #280	; 0x118
    9662:	str	r6, [r4, r7]
      _s = s;
    9664:	movw	r6, #4556	; 0x11cc
    9668:	mov.w	r7, #82	; 0x52
    966c:	strb	r7, [r4, r6]
      _b = b;
    966e:	movw	r6, #4557	; 0x11cd
    9672:	mov.w	r7, #68	; 0x44
    9676:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    9678:	movw	r7, #4560	; 0x11d0
    967c:	movs	r6, #15
    967e:	str	r6, [r4, r7]
      _s = s;
    9680:	movw	r6, #4564	; 0x11d4
    9684:	mvn.w	r7, #76	; 0x4c
    9688:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    968a:	movw	r7, #4568	; 0x11d8
    968e:	movs	r6, #9
    9690:	str	r6, [r4, r7]
      _s = s;
    9692:	movw	r6, #4572	; 0x11dc
    9696:	mov.w	r7, #4294967295
    969a:	strb	r7, [r4, r6]
      _b = b;
    969c:	movw	r6, #4573	; 0x11dd
    96a0:	mov.w	r7, #98	; 0x62
    96a4:	strb	r7, [r4, r6]
    96a6:	movw	r6, #4565	; 0x11d5
    96aa:	mvn.w	r7, #75	; 0x4b
    96ae:	strb	r7, [r4, r6]
    96b0:	movw	r6, #4549	; 0x11c5
    96b4:	mvn.w	r7, #99	; 0x63
    96b8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    96ba:	mov.w	r7, #0
    96be:	movw	r6, #4580	; 0x11e4
    96c2:	strb	r7, [r4, r6]
      _b = b;
    96c4:	movw	r6, #4581	; 0x11e5
    96c8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96ca:	movs	r7, #0
    96cc:	movw	r6, #4584	; 0x11e8
    96d0:	str	r7, [r4, r6]
      _s = s;
    96d2:	movw	r6, #4588	; 0x11ec
    96d6:	strb	r7, [r4, r6]
      _b = b;
    96d8:	movw	r6, #4589	; 0x11ed
    96dc:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96de:	movs	r7, #0
    96e0:	movw	r6, #4592	; 0x11f0
    96e4:	str	r7, [r4, r6]
      _s = s;
    96e6:	movw	r6, #4596	; 0x11f4
    96ea:	strb	r7, [r4, r6]
      _b = b;
    96ec:	movw	r6, #4597	; 0x11f5
    96f0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    96f2:	movs	r7, #0
    96f4:	movw	r6, #4600	; 0x11f8
    96f8:	str	r7, [r4, r6]
      _s = s;
    96fa:	movw	r6, #4604	; 0x11fc
    96fe:	strb	r7, [r4, r6]
      _b = b;
    9700:	movw	r6, #4605	; 0x11fd
    9704:	strb	r7, [r4, r6]
    9706:	bl	9c38 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    970a:	ldr	r2, [pc, #184]	; (97c4 <_GLOBAL__sub_I_low_threshold+0x5f7c>)
    970c:	ldr	r1, [pc, #184]	; (97c8 <_GLOBAL__sub_I_low_threshold+0x5f80>)
    970e:	ldr	r0, [pc, #176]	; (97c0 <_GLOBAL__sub_I_low_threshold+0x5f78>)
    9710:	bl	bab0 <__aeabi_atexit>
Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    9714:	movs	r3, #82	; 0x52
    9716:	movs	r2, #8
    9718:	mov.w	r1, #576	; 0x240
    971c:	ldr	r0, [pc, #172]	; (97cc <_GLOBAL__sub_I_low_threshold+0x5f84>)
    971e:	bl	9c38 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9722:	ldr	r2, [pc, #160]	; (97c4 <_GLOBAL__sub_I_low_threshold+0x5f7c>)
    9724:	ldr	r1, [pc, #160]	; (97c8 <_GLOBAL__sub_I_low_threshold+0x5f80>)
    9726:	ldr	r0, [pc, #164]	; (97cc <_GLOBAL__sub_I_low_threshold+0x5f84>)
    9728:	bl	bab0 <__aeabi_atexit>
Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    972c:	movs	r3, #82	; 0x52
    972e:	movs	r2, #2
    9730:	movs	r1, #120	; 0x78
    9732:	ldr	r0, [pc, #156]	; (97d0 <_GLOBAL__sub_I_low_threshold+0x5f88>)
    9734:	bl	9c38 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    9738:	ldr	r2, [pc, #136]	; (97c4 <_GLOBAL__sub_I_low_threshold+0x5f7c>)
    973a:	ldr	r1, [pc, #140]	; (97c8 <_GLOBAL__sub_I_low_threshold+0x5f80>)
    973c:	ldr	r0, [pc, #144]	; (97d0 <_GLOBAL__sub_I_low_threshold+0x5f88>)
    973e:	bl	bab0 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    9742:	movs	r3, #82	; 0x52
    9744:	movs	r2, #14
    9746:	movs	r1, #120	; 0x78
    9748:	ldr	r0, [pc, #136]	; (97d4 <_GLOBAL__sub_I_low_threshold+0x5f8c>)
    974a:	bl	9c38 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    974e:	ldr	r2, [pc, #116]	; (97c4 <_GLOBAL__sub_I_low_threshold+0x5f7c>)
    9750:	ldr	r1, [pc, #116]	; (97c8 <_GLOBAL__sub_I_low_threshold+0x5f80>)
    9752:	ldr	r0, [pc, #128]	; (97d4 <_GLOBAL__sub_I_low_threshold+0x5f8c>)
    9754:	bl	bab0 <__aeabi_atexit>
    9758:	ldr	r3, [pc, #124]	; (97d8 <_GLOBAL__sub_I_low_threshold+0x5f90>)

	public:
		

Color(){
	RGB_updated = false;
    975a:	movs	r2, #0
    975c:	add.w	r1, r3, #440	; 0x1b8
    9760:	strb.w	r2, [r3, #-20]
    9764:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    9766:	strb.w	r2, [r3, #-63]
		

		

Beam() {
	active = false;
    976a:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    976e:	cmp	r3, r1
    9770:	bne.n	9760 <_GLOBAL__sub_I_low_threshold+0x5f18>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9772:	ldr	r3, [pc, #104]	; (97dc <_GLOBAL__sub_I_low_threshold+0x5f94>)
    9774:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9776:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    9778:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    977a:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    977c:	ldr	r3, [r7, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    977e:	ldr	r6, [pc, #92]	; (97dc <_GLOBAL__sub_I_low_threshold+0x5f94>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9780:	cmp	r3, r1
    9782:	it	eq
    9784:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9786:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9788:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    978a:	ite	eq
    978c:	moveq.w	lr, #1
    9790:	movne.w	lr, #0
    9794:	cmp.w	lr, #0
    9798:	beq.n	977a <_GLOBAL__sub_I_low_threshold+0x5f32>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    979a:	lsrs	r1, r3, #5
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    979c:	str	r5, [sp, #8]
    979e:	ldr	r2, [pc, #32]	; (97c0 <_GLOBAL__sub_I_low_threshold+0x5f78>)
    97a0:	orr.w	r1, r1, r0, lsl #27
    97a4:	ldr	r3, [pc, #56]	; (97e0 <_GLOBAL__sub_I_low_threshold+0x5f98>)
    97a6:	ldr	r7, [pc, #60]	; (97e4 <_GLOBAL__sub_I_low_threshold+0x5f9c>)
    97a8:	vmov	s15, r1
    97ac:	ldr	r5, [pc, #56]	; (97e8 <_GLOBAL__sub_I_low_threshold+0x5fa0>)
    97ae:	str	r2, [sp, #4]
    97b0:	vcvt.f64.u32	d7, s15
    97b4:	str	r3, [sp, #0]
    97b6:	str	r7, [sp, #12]
    97b8:	ldr	r3, [pc, #48]	; (97ec <_GLOBAL__sub_I_low_threshold+0x5fa4>)
    97ba:	ldr	r2, [pc, #52]	; (97f0 <_GLOBAL__sub_I_low_threshold+0x5fa8>)
    97bc:	b.n	97f4 <_GLOBAL__sub_I_low_threshold+0x5fac>
    97be:	nop
    97c0:	.word	0x200039cc
    97c4:	.word	0x200007cc
    97c8:	.word	0x00009951
    97cc:	.word	0x200039e0
    97d0:	.word	0x20008558
    97d4:	.word	0x2000856c
    97d8:	.word	0x20003b80
    97dc:	.word	0x400d4000
    97e0:	.word	0x20004f34
    97e4:	.word	0x20000a10
    97e8:	.word	0x20001580
    97ec:	.word	0x20008580
    97f0:	.word	0x2000a9c8
    97f4:	ldr	r1, [pc, #192]	; (98b8 <_GLOBAL__sub_I_low_threshold+0x6070>)
    97f6:	ldr	r0, [pc, #196]	; (98bc <_GLOBAL__sub_I_low_threshold+0x6074>)
    97f8:	vldr	d5, [pc, #180]	; 98b0 <_GLOBAL__sub_I_low_threshold+0x6068>
    97fc:	vdiv.f64	d6, d7, d5
    9800:	vcvt.u32.f64	s12, d6
    9804:	vstr	s12, [r5]
    9808:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
Screen screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    980c:	ldr	r1, [pc, #176]	; (98c0 <_GLOBAL__sub_I_low_threshold+0x6078>)
    980e:	ldr	r2, [pc, #180]	; (98c4 <_GLOBAL__sub_I_low_threshold+0x607c>)
    9810:	ldr	r3, [pc, #180]	; (98c8 <_GLOBAL__sub_I_low_threshold+0x6080>)
    9812:	str	r4, [sp, #8]
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9814:	mov	r4, r6
    9816:	str	r1, [sp, #12]
    9818:	str	r2, [sp, #4]
    981a:	str	r3, [sp, #0]
    981c:	ldr	r1, [pc, #172]	; (98cc <_GLOBAL__sub_I_low_threshold+0x6084>)
    981e:	ldr	r3, [pc, #176]	; (98d0 <_GLOBAL__sub_I_low_threshold+0x6088>)
    9820:	ldr	r2, [pc, #176]	; (98d4 <_GLOBAL__sub_I_low_threshold+0x608c>)
    9822:	ldr	r0, [pc, #180]	; (98d8 <_GLOBAL__sub_I_low_threshold+0x6090>)
    9824:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9828:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    982a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    982c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    982e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9830:	ldr	r6, [pc, #168]	; (98dc <_GLOBAL__sub_I_low_threshold+0x6094>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    9832:	cmp	r3, r1
    9834:	it	eq
    9836:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9838:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    983a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    983c:	ite	eq
    983e:	moveq	r5, #1
    9840:	movne	r5, #0
    9842:	cmp	r5, #0
    9844:	beq.n	982c <_GLOBAL__sub_I_low_threshold+0x5fe4>
    9846:	lsrs	r1, r3, #5
    9848:	ldr	r3, [pc, #148]	; (98e0 <_GLOBAL__sub_I_low_threshold+0x6098>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    984a:	mov	r4, r6
    984c:	orr.w	r1, r1, r2, lsl #27
    9850:	vmov	s15, r1
    9854:	vldr	d5, [pc, #88]	; 98b0 <_GLOBAL__sub_I_low_threshold+0x6068>
    9858:	vcvt.f64.u32	d7, s15
    985c:	vdiv.f64	d6, d7, d5
    9860:	vcvt.u32.f64	s12, d6
    9864:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    9868:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    986a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    986c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    986e:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    9870:	cmp	r3, r1
    9872:	it	eq
    9874:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    9876:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    9878:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    987a:	ite	eq
    987c:	moveq	r5, #1
    987e:	movne	r5, #0
    9880:	cmp	r5, #0
    9882:	beq.n	986c <_GLOBAL__sub_I_low_threshold+0x6024>
    9884:	lsrs	r1, r3, #5
    9886:	ldr	r3, [pc, #92]	; (98e4 <_GLOBAL__sub_I_low_threshold+0x609c>)
    9888:	orr.w	r1, r1, r2, lsl #27
    988c:	vmov	s15, r1
    9890:	vldr	d5, [pc, #28]	; 98b0 <_GLOBAL__sub_I_low_threshold+0x6068>
    9894:	vcvt.f64.u32	d7, s15
    9898:	vdiv.f64	d6, d7, d5
    989c:	vcvt.u32.f64	s12, d6
    98a0:	vstr	s12, [r3]

  screen_A.iterate_animation();
  screen_B.iterate_animation();

  renderInterrupt();
}
    98a4:	add	sp, #20
    98a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98aa:	nop
    98ac:	nop.w
    98b0:	.word	0xd2f1a9fc
    98b4:	.word	0x3ff0624d
    98b8:	.word	0x20001584
    98bc:	.word	0x200039f4
    98c0:	.word	0x200007d0
    98c4:	.word	0x200039e0
    98c8:	.word	0x20003d10
    98cc:	.word	0x200027a8
    98d0:	.word	0x200097a4
    98d4:	.word	0x2000bbec
    98d8:	.word	0x20003aa4
    98dc:	.word	0x400d4000
    98e0:	.word	0x2000157c
    98e4:	.word	0x20003d0c

000098e8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    98e8:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    98ea:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    98ec:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    98ee:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    98f0:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    98f2:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    98f4:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    98f8:	cbz	r3, 9912 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    98fa:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    98fe:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    9902:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9906:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    990a:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    990e:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    9912:	ldrb	r7, [r0, #15]
    9914:	ldrb	r4, [r0, #12]
    9916:	cmp	r4, r7
    9918:	beq.n	9944 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    991a:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    991c:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    991e:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    9922:	add	r7, r1
    9924:	cbnz	r3, 993a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    9926:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    9928:	strb	r3, [r7, #0]
    992a:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    992c:	strb	r6, [r1, r7]
    p[gOffset] = g;
    992e:	ldrb	r3, [r0, #13]
    9930:	strb	r5, [r1, r3]
    p[bOffset] = b;
    9932:	ldrb	r3, [r0, #14]
    9934:	strb.w	lr, [r1, r3]
    9938:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    993a:	mul.w	r3, r3, r2
    993e:	ubfx	r3, r3, #8, #8
    9942:	b.n	9928 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    9944:	add.w	r1, r1, r1, lsl #1
    9948:	ldr	r3, [r0, #8]
    994a:	add	r1, r3
    994c:	b.n	992c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    994e:	nop

00009950 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    9950:	push	{r4, lr}
    9952:	mov	r4, r0
  if(pixels)   free(pixels);
    9954:	ldr	r0, [r0, #8]
    9956:	cbz	r0, 995c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    9958:	bl	bba4 <free>
  if(pin >= 0) pinMode(pin, INPUT);
    995c:	ldrsb.w	r0, [r4, #6]
    9960:	cmp	r0, #0
    9962:	blt.n	996c <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    9964:	uxtb	r0, r0
    9966:	movs	r1, #0
    9968:	bl	b004 <pinMode>
}
    996c:	mov	r0, r4
    996e:	pop	{r4, pc}

00009970 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    9970:	push	{r4, lr}
    9972:	mov	r4, r0
  if(pin >= 0) {
    9974:	ldrsb.w	r0, [r0, #6]
    9978:	cmp	r0, #0
    997a:	blt.n	998c <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    997c:	uxtb	r0, r0
    997e:	movs	r1, #1
    9980:	bl	b004 <pinMode>
    digitalWrite(pin, LOW);
    9984:	movs	r1, #0
    9986:	ldrb	r0, [r4, #6]
    9988:	bl	aff8 <digitalWrite>
  }
  begun = true;
    998c:	movs	r3, #1
    998e:	strb	r3, [r4, #1]
    9990:	pop	{r4, pc}
    9992:	nop

00009994 <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    9994:	push	{r3, r4, r5, lr}
    9996:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    9998:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    999a:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    999c:	cbz	r0, 99a2 <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    999e:	bl	bba4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    99a2:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    99a4:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    99a6:	ldrb	r0, [r4, #12]
    99a8:	cmp	r3, r0
    99aa:	ite	eq
    99ac:	moveq	r0, #3
    99ae:	movne	r0, #4
    99b0:	smulbb	r0, r0, r5
    99b4:	uxth	r0, r0
    99b6:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    99b8:	bl	babc <calloc>
    99bc:	str	r0, [r4, #8]
    99be:	cbz	r0, 99c4 <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    99c0:	strh	r5, [r4, #2]
    99c2:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    99c4:	strh	r0, [r4, #4]
    99c6:	strh	r0, [r4, #2]
    99c8:	pop	{r3, r4, r5, pc}
    99ca:	nop

000099cc <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    99cc:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    99ce:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    99d0:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    99d4:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    99d8:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    99da:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    99de:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    99e2:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    99e6:	ite	hi
    99e8:	movhi	r6, #0
    99ea:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    99ec:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    99f0:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    99f4:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    99f6:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    99f8:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    99fa:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    99fc:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    99fe:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    9a00:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    9a02:	cbz	r5, 9a1a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    9a04:	subs	r1, r2, r1
    9a06:	clz	r1, r1
    9a0a:	lsrs	r1, r1, #5
    9a0c:	cmp	r1, r4
    9a0e:	beq.n	9a1a <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    9a10:	ldrh	r1, [r0, #2]
  }
}
    9a12:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    9a16:	b.w	9994 <Adafruit_NeoPixel::updateLength(unsigned short)>
    9a1a:	pop	{r4, r5, r6, r7, pc}

00009a1c <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    9a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    9a20:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    9a22:	sub	sp, #20
    9a24:	str	r0, [sp, #12]

  if(!pixels) return;
    9a26:	cmp	r3, #0
    9a28:	beq.n	9b0e <Adafruit_NeoPixel::show()+0xf2>
    9a2a:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    9a2c:	bl	af24 <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    9a30:	ldr	r3, [r4, #16]
    9a32:	subs	r0, r0, r3
    9a34:	cmp.w	r0, #300	; 0x12c
    9a38:	bcc.n	9a2c <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    9a3a:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9a3c:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9a3e:	ldr	r0, [pc, #408]	; (9bd8 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9a40:	ldrsb.w	r3, [r6, #6]
    9a44:	ldr	r4, [pc, #404]	; (9bdc <Adafruit_NeoPixel::show()+0x1c0>)
    9a46:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9a48:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9a4a:	ldr	r1, [pc, #404]	; (9be0 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9a4c:	ldr.w	ip, [r4, r3]
    9a50:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    9a52:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9a54:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    9a58:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    9a5c:	mov	r5, r6
    9a5e:	mov	r6, r3
    9a60:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    9a62:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9a64:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9a66:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9a68:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9a6a:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9a6c:	ldr	r4, [pc, #372]	; (9be4 <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9a6e:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9a72:	str	r2, [sp, #8]
    9a74:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    9a76:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9a78:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9a7a:	ldr	r1, [pc, #364]	; (9be8 <Adafruit_NeoPixel::show()+0x1cc>)
    9a7c:	ldr	r0, [r4, #0]
    9a7e:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    9a80:	cmp	r2, #0
    9a82:	beq.n	9b14 <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9a84:	ldr	r5, [pc, #356]	; (9bec <Adafruit_NeoPixel::show()+0x1d0>)
    9a86:	lsrs	r3, r3, #8
    while(p < end) {
    9a88:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9a8a:	umull	r2, r3, r5, r3
    9a8e:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    9a92:	bcs.n	9aee <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    9a94:	ldr	r7, [pc, #344]	; (9bf0 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    9a96:	ldr	r6, [pc, #348]	; (9bf4 <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9a98:	ldr	r3, [sp, #4]
    9a9a:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    9a9e:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9aa2:	ldrb.w	sl, [r3], #1
    9aa6:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    9aa8:	ldr	r2, [r4, #0]
    9aaa:	ldr	r3, [r1, #0]
    9aac:	subs	r2, r2, r0
    9aae:	lsrs	r3, r3, #8
    9ab0:	umull	fp, r3, r5, r3
    9ab4:	cmp.w	r2, r3, lsr #4
    9ab8:	bcc.n	9aa8 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    9aba:	ldr	r3, [pc, #296]	; (9be4 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    9abc:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    9ac0:	ldr	r0, [r3, #0]
        *set = msk;
    9ac2:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    9ac6:	beq.n	9bc6 <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    9ac8:	ldr	r3, [r4, #0]
    9aca:	ldr	r2, [r1, #0]
    9acc:	subs	r3, r3, r0
    9ace:	umull	fp, r2, r7, r2
    9ad2:	cmp.w	r3, r2, lsr #19
    9ad6:	bcc.n	9ac8 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9ad8:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    9adc:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9ae0:	mov.w	lr, lr, lsr #1
    9ae4:	bne.n	9aa8 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    9ae6:	ldr	r3, [sp, #8]
    9ae8:	ldr	r2, [sp, #4]
    9aea:	cmp	r3, r2
    9aec:	bne.n	9a98 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    9aee:	ldr	r5, [pc, #244]	; (9be4 <Adafruit_NeoPixel::show()+0x1c8>)
    9af0:	ldr	r4, [pc, #248]	; (9bec <Adafruit_NeoPixel::show()+0x1d0>)
    9af2:	ldr	r2, [r5, #0]
    9af4:	ldr	r3, [r1, #0]
    9af6:	subs	r2, r2, r0
    9af8:	lsrs	r3, r3, #8
    9afa:	umull	r6, r3, r4, r3
    9afe:	cmp.w	r2, r3, lsr #4
    9b02:	bcc.n	9af2 <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    9b04:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    9b06:	bl	af24 <micros>
    9b0a:	ldr	r3, [sp, #12]
    9b0c:	str	r0, [r3, #16]
}
    9b0e:	add	sp, #20
    9b10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    9b14:	ldr	r6, [pc, #212]	; (9bec <Adafruit_NeoPixel::show()+0x1d0>)
    9b16:	lsrs	r3, r3, #7
    9b18:	umull	r2, r3, r6, r3
    while(p < end) {
    9b1c:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    9b1e:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    9b22:	ldr	r3, [sp, #4]
    9b24:	cmp	r3, r2
    9b26:	bcs.n	9b92 <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    9b28:	ldr.w	lr, [pc, #204]	; 9bf8 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    9b2c:	ldr	r7, [pc, #196]	; (9bf4 <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    9b2e:	ldr	r3, [sp, #4]
    9b30:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    9b34:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    9b38:	ldrb.w	fp, [r3], #1
    9b3c:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    9b3e:	ldr	r2, [r4, #0]
    9b40:	ldr	r3, [r1, #0]
    9b42:	subs	r2, r2, r0
    9b44:	lsrs	r3, r3, #7
    9b46:	umull	r5, r3, r6, r3
    9b4a:	cmp.w	r2, r3, lsr #4
    9b4e:	bcc.n	9b3e <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    9b50:	ldr	r3, [pc, #144]	; (9be4 <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    9b52:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    9b56:	ldr	r0, [r3, #0]
        *set = msk;
    9b58:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    9b5c:	beq.n	9bb4 <Adafruit_NeoPixel::show()+0x198>
    9b5e:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    9b62:	ldr	r2, [r4, #0]
    9b64:	ldr	r5, [r1, #0]
    9b66:	subs	r2, r2, r0
    9b68:	umull	ip, r3, lr, r5
    9b6c:	subs	r5, r5, r3
    9b6e:	add.w	r3, r3, r5, lsr #1
    9b72:	cmp.w	r2, r3, lsr #19
    9b76:	bcc.n	9b62 <Adafruit_NeoPixel::show()+0x146>
    9b78:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9b7c:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    9b80:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9b84:	mov.w	r9, r9, lsr #1
    9b88:	bne.n	9b3e <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    9b8a:	ldr	r3, [sp, #8]
    9b8c:	ldr	r2, [sp, #4]
    9b8e:	cmp	r3, r2
    9b90:	bne.n	9b2e <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    9b92:	ldr	r5, [pc, #80]	; (9be4 <Adafruit_NeoPixel::show()+0x1c8>)
    9b94:	ldr	r4, [pc, #84]	; (9bec <Adafruit_NeoPixel::show()+0x1d0>)
    9b96:	ldr	r2, [r5, #0]
    9b98:	ldr	r3, [r1, #0]
    9b9a:	subs	r2, r2, r0
    9b9c:	lsrs	r3, r3, #7
    9b9e:	umull	r6, r3, r4, r3
    9ba2:	cmp.w	r2, r3, lsr #4
    9ba6:	bcc.n	9b96 <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    9ba8:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    9baa:	bl	af24 <micros>
    9bae:	ldr	r3, [sp, #12]
    9bb0:	str	r0, [r3, #16]
    9bb2:	b.n	9b0e <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    9bb4:	ldr	r3, [r4, #0]
    9bb6:	ldr	r2, [r1, #0]
    9bb8:	subs	r3, r3, r0
    9bba:	umull	r5, r2, r7, r2
    9bbe:	cmp.w	r3, r2, lsr #19
    9bc2:	bcc.n	9bb4 <Adafruit_NeoPixel::show()+0x198>
    9bc4:	b.n	9b7c <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    9bc6:	ldr	r3, [r4, #0]
    9bc8:	ldr	r2, [r1, #0]
    9bca:	subs	r3, r3, r0
    9bcc:	umull	fp, r2, r6, r2
    9bd0:	cmp.w	r3, r2, lsr #20
    9bd4:	bcc.n	9bc6 <Adafruit_NeoPixel::show()+0x1aa>
    9bd6:	b.n	9ad8 <Adafruit_NeoPixel::show()+0xbc>
    9bd8:	.word	0xe000edfc
    9bdc:	.word	0x200004a8
    9be0:	.word	0xe0001000
    9be4:	.word	0xe0001004
    9be8:	.word	0x20000c54
    9bec:	.word	0x014f8b59
    9bf0:	.word	0x6b5fca6b
    9bf4:	.word	0x431bde83
    9bf8:	.word	0x421f67b3

00009bfc <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    9bfc:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    9bfe:	ldrb	r3, [r0, #1]
    9c00:	cbz	r3, 9c1e <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    9c02:	mov	r4, r0
    9c04:	ldrsb.w	r0, [r0, #6]
    9c08:	mov	r5, r1
    9c0a:	cmp	r0, #0
    9c0c:	blt.n	9c22 <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    9c0e:	uxtb	r0, r0
    9c10:	movs	r1, #0
    9c12:	bl	b004 <pinMode>
    9c16:	ldrb	r3, [r4, #1]
    pin = p;
    9c18:	strb	r5, [r4, #6]
    if(begun) {
    9c1a:	cbnz	r3, 9c24 <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    9c1c:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    9c1e:	strb	r1, [r0, #6]
    9c20:	pop	{r3, r4, r5, pc}
    9c22:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    9c24:	mov	r0, r5
    9c26:	movs	r1, #1
    9c28:	bl	b004 <pinMode>
      digitalWrite(p, LOW);
    9c2c:	mov	r0, r5
    9c2e:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    9c30:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    9c34:	b.w	aff8 <digitalWrite>

00009c38 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9c38:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9c3a:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9c3c:	mov	r4, r0
    9c3e:	mov	r7, r1
    9c40:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    9c42:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9c44:	strb	r5, [r0, #1]
    9c46:	strb	r5, [r0, #7]
    9c48:	str	r5, [r0, #8]
    9c4a:	str	r5, [r0, #16]
{
  updateType(t);
    9c4c:	bl	99cc <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    9c50:	mov	r1, r7
    9c52:	mov	r0, r4
    9c54:	bl	9994 <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    9c58:	mov	r0, r4
    9c5a:	mov	r1, r6
    9c5c:	bl	9bfc <Adafruit_NeoPixel::setPin(unsigned char)>
}
    9c60:	mov	r0, r4
    9c62:	pop	{r3, r4, r5, r6, r7, pc}

00009c64 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9c64:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    9c66:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9c68:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    9c6c:	cmp	r4, r1
    9c6e:	bls.n	9ca4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    9c70:	ldrb	r4, [r0, #7]
    9c72:	cbz	r4, 9c86 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    9c74:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    9c78:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    9c7c:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9c80:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    9c82:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    9c84:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    9c86:	ldrb	r5, [r0, #15]
    9c88:	ldrb	r4, [r0, #12]
    9c8a:	cmp	r4, r5
    9c8c:	beq.n	9ca8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9c8e:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9c90:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9c92:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9c96:	strb	r7, [r1, r5]
    9c98:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    9c9a:	strb	r2, [r1, r5]
    p[gOffset] = g;
    9c9c:	ldrb	r2, [r0, #13]
    9c9e:	strb	r3, [r1, r2]
    p[bOffset] = b;
    9ca0:	ldrb	r3, [r0, #14]
    9ca2:	strb	r6, [r1, r3]
  }
}
    9ca4:	pop	{r4, r5, r6, r7}
    9ca6:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    9ca8:	add.w	r1, r1, r1, lsl #1
    9cac:	ldr	r4, [r0, #8]
    9cae:	add	r1, r4
    9cb0:	b.n	9c9a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    9cb2:	nop

00009cb4 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    9cb4:	ldrh	r3, [r0, #2]
    9cb6:	cmp	r3, r1
    9cb8:	bls.n	9cbe <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    9cba:	b.w	98e8 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    9cbe:	bx	lr

00009cc0 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9cc0:	ldrh	r3, [r0, #2]
    9cc2:	cmp	r3, r1
    9cc4:	bls.n	9cf6 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    9cc6:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    9cc8:	ldrb	r2, [r0, #15]
    9cca:	ldrb	r3, [r0, #12]
    9ccc:	cmp	r2, r3
    9cce:	beq.n	9cfa <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9cd0:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    9cd2:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9cd4:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9cd8:	ldrb	r3, [r1, r3]
    9cda:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    9cdc:	cbnz	r4, 9d2c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    9cde:	lsls	r3, r3, #16
    9ce0:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9ce2:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    9ce4:	orr.w	r0, r3, r5, lsl #24
    9ce8:	ldrb	r3, [r1, r4]
    9cea:	ldrb	r2, [r1, r2]
    9cec:	orrs	r3, r0
    9cee:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    9cf2:	pop	{r4, r5}
    9cf4:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9cf6:	movs	r0, #0
    9cf8:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9cfa:	add.w	r1, r1, r1, lsl #1
    9cfe:	ldr	r3, [r0, #8]
    if(brightness) {
    9d00:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9d02:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9d04:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    9d06:	cbz	r4, 9d5c <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9d08:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9d0a:	lsls	r2, r2, #8
    9d0c:	ldrb	r3, [r0, #14]
    9d0e:	ldrb	r0, [r1, r5]
    9d10:	ldrb	r3, [r1, r3]
    9d12:	lsls	r0, r0, #8
    9d14:	lsls	r3, r3, #8
    9d16:	udiv	r2, r2, r4
    9d1a:	udiv	r0, r0, r4
    9d1e:	lsls	r2, r2, #16
    9d20:	udiv	r3, r3, r4
    9d24:	orr.w	r0, r2, r0, lsl #8
    9d28:	orrs	r0, r3
    9d2a:	b.n	9cf2 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9d2c:	lsls	r3, r3, #8
    9d2e:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9d30:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9d32:	lsls	r5, r5, #8
    9d34:	ldrb	r2, [r1, r2]
    9d36:	ldrb	r0, [r1, r0]
    9d38:	lsls	r2, r2, #8
    9d3a:	lsls	r0, r0, #8
    9d3c:	udiv	r1, r3, r4
    9d40:	udiv	r5, r5, r4
    9d44:	udiv	r2, r2, r4
    9d48:	lsls	r3, r1, #16
    9d4a:	udiv	r0, r0, r4
    9d4e:	orr.w	r3, r3, r5, lsl #24
    9d52:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9d54:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9d56:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9d5a:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9d5c:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    9d5e:	lsls	r2, r2, #16
    9d60:	ldrb	r3, [r0, #14]
    9d62:	ldrb	r0, [r1, r4]
    9d64:	ldrb	r3, [r1, r3]
    9d66:	orr.w	r0, r2, r0, lsl #8
    9d6a:	orrs	r0, r3
    9d6c:	b.n	9cf2 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    9d6e:	nop

00009d70 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    9d70:	ldrh	r0, [r0, #2]
    9d72:	bx	lr

00009d74 <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    9d74:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9d76:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    9d78:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9d7a:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    9d7c:	cmp	r6, r4
    9d7e:	beq.n	9da8 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    9d80:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    9d82:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    9d84:	ands.w	r4, r4, #255	; 0xff
    9d88:	bne.n	9dac <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9d8a:	ldrh	r3, [r0, #4]
    9d8c:	cbz	r3, 9da6 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    9d8e:	mov	r2, r5
      c      = *ptr;
    9d90:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    9d92:	mul.w	r3, r4, r3
    9d96:	asrs	r3, r3, #8
    9d98:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9d9c:	subs	r3, r2, r5
    9d9e:	ldrh	r1, [r0, #4]
    9da0:	uxth	r3, r3
    9da2:	cmp	r1, r3
    9da4:	bhi.n	9d90 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    9da6:	strb	r6, [r0, #7]
  }
}
    9da8:	pop	{r4, r5, r6}
    9daa:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9dac:	cmp	r1, #255	; 0xff
    9dae:	beq.n	9dbc <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    9db0:	lsls	r3, r6, #8
    9db2:	subs	r3, #1
    9db4:	sdiv	r4, r3, r4
    9db8:	uxth	r4, r4
    9dba:	b.n	9d8a <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9dbc:	movw	r3, #65535	; 0xffff
    9dc0:	sdiv	r4, r3, r4
    9dc4:	b.n	9d8a <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    9dc6:	nop

00009dc8 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    9dc8:	ldrh	r2, [r0, #4]
    9dca:	movs	r1, #0
    9dcc:	ldr	r0, [r0, #8]
    9dce:	b.w	c124 <memset>
    9dd2:	nop

00009dd4 <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9dd4:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9dd6:	movs	r1, #0
    9dd8:	mov	r3, r0
    9dda:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    9dde:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9de0:	movs	r4, #0
    9de2:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9de4:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    9de8:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9dea:	bfc	r2, #0, #4
    9dee:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    9df0:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9df4:	cmp	r3, r5
    9df6:	bne.n	9dde <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    9df8:	mov	r2, r4
    9dfa:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    9dfc:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    9dfe:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9e02:	add.w	r3, r0, r2, lsl #4
    9e06:	adds	r3, #8
    9e08:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9e0a:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9e0e:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9e12:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9e16:	beq.n	9e20 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9e18:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    9e1a:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    9e1c:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    9e1e:	str	r6, [r1, #8]
    9e20:	adds	r2, #1
    9e22:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    9e24:	cmp	r2, #12
    9e26:	bne.n	9e02 <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    9e28:	pop	{r4, r5, r6}
    9e2a:	bx	lr

00009e2c <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    9e2c:	ldr	r0, [pc, #4]	; (9e34 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    9e2e:	b.w	9dd4 <TimeAlarmsClass::TimeAlarmsClass()>
    9e32:	nop
    9e34:	.word	0x2000ce10

00009e38 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9e38:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9e3a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9e3e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9e42:	bne.n	9f20 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9e44:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9e46:	bcc.n	9ecc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9e48:	ldr.w	r3, [r1], #4
    9e4c:	str.w	r3, [r0], #4
    9e50:	ldr.w	r3, [r1], #4
    9e54:	str.w	r3, [r0], #4
    9e58:	ldr.w	r3, [r1], #4
    9e5c:	str.w	r3, [r0], #4
    9e60:	ldr.w	r3, [r1], #4
    9e64:	str.w	r3, [r0], #4
    9e68:	ldr.w	r3, [r1], #4
    9e6c:	str.w	r3, [r0], #4
    9e70:	ldr.w	r3, [r1], #4
    9e74:	str.w	r3, [r0], #4
    9e78:	ldr.w	r3, [r1], #4
    9e7c:	str.w	r3, [r0], #4
    9e80:	ldr.w	r3, [r1], #4
    9e84:	str.w	r3, [r0], #4
    9e88:	ldr.w	r3, [r1], #4
    9e8c:	str.w	r3, [r0], #4
    9e90:	ldr.w	r3, [r1], #4
    9e94:	str.w	r3, [r0], #4
    9e98:	ldr.w	r3, [r1], #4
    9e9c:	str.w	r3, [r0], #4
    9ea0:	ldr.w	r3, [r1], #4
    9ea4:	str.w	r3, [r0], #4
    9ea8:	ldr.w	r3, [r1], #4
    9eac:	str.w	r3, [r0], #4
    9eb0:	ldr.w	r3, [r1], #4
    9eb4:	str.w	r3, [r0], #4
    9eb8:	ldr.w	r3, [r1], #4
    9ebc:	str.w	r3, [r0], #4
    9ec0:	ldr.w	r3, [r1], #4
    9ec4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9ec8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9eca:	bcs.n	9e48 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9ecc:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9ece:	bcc.n	9ef4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9ed0:	ldr.w	r3, [r1], #4
    9ed4:	str.w	r3, [r0], #4
    9ed8:	ldr.w	r3, [r1], #4
    9edc:	str.w	r3, [r0], #4
    9ee0:	ldr.w	r3, [r1], #4
    9ee4:	str.w	r3, [r0], #4
    9ee8:	ldr.w	r3, [r1], #4
    9eec:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9ef0:	subs	r2, #16
	bhs	.Lmid_block_loop
    9ef2:	bcs.n	9ed0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9ef4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9ef6:	bcc.n	9f04 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9ef8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9efc:	str.w	r3, [r0], #4
	subs	r2, #4
    9f00:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9f02:	bcs.n	9ef8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9f04:	adds	r2, #4
	beq	.Ldone
    9f06:	beq.n	9f1a <memcpy+0xe2>

	lsls	r2, r2, #31
    9f08:	lsls	r2, r2, #31
	itt ne
    9f0a:	itt	ne
	ldrbne  r3, [r1], #1
    9f0c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9f10:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9f14:	bcc.n	9f1a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9f16:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9f18:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9f1a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9f1c:	bx	lr
    9f1e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9f20:	cmp	r2, #8
	blo	.Lbyte_copy
    9f22:	bcc.n	9f4c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9f24:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9f26:	beq.n	9e44 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9f28:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9f2c:	beq.n	9e44 <memcpy+0xc>

	rsb	r3, #4
    9f2e:	rsb	r3, r3, #4
	subs	r2, r3
    9f32:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9f34:	lsls	r3, r3, #31
	itt ne
    9f36:	itt	ne
	ldrbne  r3, [r1], #1
    9f38:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9f3c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9f40:	bcc.n	9e44 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9f42:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9f46:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9f4a:	b.n	9e44 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9f4c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9f4e:	bcc.n	9f04 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9f50:	subs	r2, #1
	ldrb    r3, [r1], #1
    9f52:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9f56:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9f5a:	bcs.n	9f50 <memcpy+0x118>

	ldrb	r3, [r1]
    9f5c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9f5e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9f60:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9f62:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9f64:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9f66:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9f68:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9f6a:	bx	lr

00009f6c <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    9f6c:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    9f6e:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9f70:	ubfx	r3, r3, #16, #15
    9f74:	ldr	r1, [pc, #20]	; (9f8c <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    9f76:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9f78:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    9f7c:	ldr	r4, [pc, #16]	; (9f90 <rx_event+0x24>)
    9f7e:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9f80:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    9f84:	strh.w	r5, [r4, r2, lsl #1]
}
    9f88:	pop	{r4, r5}
    9f8a:	bx	lr
    9f8c:	.word	0x2000d6a0
    9f90:	.word	0x2000d698

00009f94 <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9f94:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    9f96:	ldr	r3, [pc, #84]	; (9fec <usb_serial_flush_callback+0x58>)
    9f98:	ldrb	r3, [r3, #0]
    9f9a:	cbnz	r3, 9fac <usb_serial_flush_callback+0x18>
    9f9c:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    9fa0:	ldr	r3, [pc, #76]	; (9ff0 <usb_serial_flush_callback+0x5c>)
    9fa2:	ldrb	r3, [r3, #0]
    9fa4:	cbz	r3, 9fac <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    9fa6:	ldr	r5, [pc, #76]	; (9ff4 <usb_serial_flush_callback+0x60>)
    9fa8:	ldrh	r2, [r5, #0]
    9faa:	cbnz	r2, 9fae <usb_serial_flush_callback+0x1a>
    9fac:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9fae:	ldr	r7, [pc, #72]	; (9ff8 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9fb0:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9fb2:	ldr	r6, [pc, #72]	; (9ffc <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9fb4:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9fb8:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9fba:	ldr	r0, [pc, #68]	; (a000 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9fbc:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9fc0:	add.w	r1, r0, r1, lsl #8
    9fc4:	mov	r0, r6
    9fc6:	bl	ad94 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9fca:	mov	r1, r6
    9fcc:	movs	r0, #4
    9fce:	bl	adc4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9fd2:	ldrb	r3, [r7, #0]
    9fd4:	adds	r3, #1
    9fd6:	uxtb	r3, r3
    9fd8:	cmp	r3, #6
    9fda:	it	ls
    9fdc:	strbls	r3, [r7, #0]
	tx_available = 0;
    9fde:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    9fe2:	it	hi
    9fe4:	strbhi	r4, [r7, #0]
	tx_available = 0;
    9fe6:	strh	r3, [r5, #0]
    9fe8:	pop	{r3, r4, r5, r6, r7, pc}
    9fea:	nop
    9fec:	.word	0x2000d5d4
    9ff0:	.word	0x2000d850
    9ff4:	.word	0x2000d720
    9ff8:	.word	0x2000d5d5
    9ffc:	.word	0x2000d740
    a000:	.word	0x2000ced4

0000a004 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a004:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a008:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a00a:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    a00c:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a00e:	cmp	r1, #0
    a010:	beq.w	a13c <usb_serial_write.part.1+0x138>
    a014:	movs	r3, #0
    a016:	ldr.w	r8, [pc, #320]	; a158 <usb_serial_write.part.1+0x154>
    a01a:	ldr.w	r9, [pc, #304]	; a14c <usb_serial_write.part.1+0x148>
    a01e:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    a020:	ldr	r6, [pc, #284]	; (a140 <usb_serial_write.part.1+0x13c>)
    a022:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a026:	ldr.w	sl, [pc, #308]	; a15c <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    a02a:	ldr	r2, [pc, #280]	; (a144 <usb_serial_write.part.1+0x140>)
    a02c:	ldrb	r4, [r2, #0]
    a02e:	ldr	r2, [pc, #280]	; (a148 <usb_serial_write.part.1+0x144>)
    a030:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a034:	cmp	r3, #0
    a036:	bne.n	a0f4 <usb_serial_write.part.1+0xf0>
    a038:	mov	r5, r3
    a03a:	mov	r4, r3
    a03c:	b.n	a068 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a03e:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    a042:	cbnz	r4, a046 <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    a044:	ldr	r5, [r6, #0]
    a046:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a048:	cmp	r3, #0
    a04a:	bne.n	a0e8 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a04c:	ldr	r3, [r6, #0]
    a04e:	subs	r3, r3, r5
    a050:	cmp	r3, #120	; 0x78
    a052:	bhi.n	a130 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    a054:	ldrb.w	r3, [sl]
    a058:	cmp	r3, #0
    a05a:	beq.n	a0e8 <usb_serial_write.part.1+0xe4>
			yield();
    a05c:	bl	b0dc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    a060:	ldrh.w	r3, [r8]
    a064:	cmp	r3, #0
    a066:	bne.n	a0f0 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    a068:	mov	r0, r7
    a06a:	bl	ae10 <usb_transfer_status>
			if (!(status & 0x80)) {
    a06e:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    a072:	ldr	r2, [pc, #216]	; (a14c <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    a074:	bne.n	a03e <usb_serial_write.part.1+0x3a>
    a076:	ldr	r2, [pc, #204]	; (a144 <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a078:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    a07c:	strb.w	r0, [r9]
    a080:	ldrb	r4, [r2, #0]
    a082:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a084:	ldr	r1, [pc, #200]	; (a150 <usb_serial_write.part.1+0x14c>)
    a086:	lsls	r4, r4, #8
		if (size >= tx_available) {
    a088:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    a08a:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a08e:	add	r0, r4
    a090:	add	r0, r1
		if (size >= tx_available) {
    a092:	bcc.n	a106 <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    a094:	ldr	r1, [sp, #8]
    a096:	bl	9e38 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    a09a:	ldr	r3, [pc, #180]	; (a150 <usb_serial_write.part.1+0x14c>)
    a09c:	mov.w	r2, #256	; 0x100
    a0a0:	mov	r0, r7
    a0a2:	adds	r1, r3, r4
    a0a4:	movs	r3, #0
    a0a6:	bl	ad94 <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a0aa:	mov	r1, r7
    a0ac:	movs	r0, #4
    a0ae:	bl	adc4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a0b2:	ldr	r3, [pc, #144]	; (a144 <usb_serial_write.part.1+0x140>)
    a0b4:	ldr	r2, [pc, #140]	; (a144 <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a0b6:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a0b8:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a0ba:	ldr	r0, [pc, #152]	; (a154 <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    a0bc:	adds	r3, #1
    a0be:	uxtb	r3, r3
    a0c0:	cmp	r3, #6
    a0c2:	it	hi
    a0c4:	movhi	r3, #0
    a0c6:	strb	r3, [r2, #0]
			size -= tx_available;
    a0c8:	ldrh.w	r2, [r8]
			sent += tx_available;
    a0cc:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a0ce:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    a0d2:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    a0d6:	add	r3, r2
    a0d8:	str	r3, [sp, #4]
			data += tx_available;
    a0da:	ldr	r3, [sp, #8]
    a0dc:	add	r3, r2
    a0de:	str	r3, [sp, #8]
    a0e0:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    a0e2:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a0e6:	bne.n	a02a <usb_serial_write.part.1+0x26>
    a0e8:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a0ea:	add	sp, #20
    a0ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0f0:	ldr	r2, [pc, #80]	; (a144 <usb_serial_write.part.1+0x140>)
    a0f2:	ldrb	r4, [r2, #0]
    a0f4:	mov	r2, r3
    a0f6:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a0fa:	lsls	r4, r4, #8
    a0fc:	ldr	r1, [pc, #80]	; (a150 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    a0fe:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a100:	add	r0, r4
    a102:	add	r0, r1
		if (size >= tx_available) {
    a104:	bcs.n	a094 <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    a106:	ldr	r1, [sp, #8]
    a108:	mov	r2, fp
    a10a:	str	r3, [sp, #12]
    a10c:	bl	9e38 <memcpy>
			tx_available -= size;
    a110:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a112:	mov.w	r1, #3221225472	; 0xc0000000
    a116:	ldr	r2, [pc, #60]	; (a154 <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    a118:	rsb	r3, fp, r3
    a11c:	strh.w	r3, [r8]
    a120:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a122:	str.w	r1, [r2, #132]	; 0x84
    a126:	add	r3, fp
    a128:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a12a:	add	sp, #20
    a12c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a130:	movs	r3, #1
				return sent;
    a132:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    a134:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a136:	add	sp, #20
    a138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    a13c:	mov	r0, r1
    a13e:	b.n	a0ea <usb_serial_write.part.1+0xe6>
    a140:	.word	0x2000d858
    a144:	.word	0x2000d5d5
    a148:	.word	0x2000d740
    a14c:	.word	0x2000d820
    a150:	.word	0x2000ced4
    a154:	.word	0x402e0000
    a158:	.word	0x2000d720
    a15c:	.word	0x2000d850

0000a160 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    a160:	bx	lr
    a162:	nop

0000a164 <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a164:	movs	r1, #0
    a166:	movs	r2, #224	; 0xe0
    a168:	ldr	r0, [pc, #128]	; (a1ec <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    a16a:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a16c:	mov	r4, r1
    a16e:	ldr	r6, [pc, #128]	; (a1f0 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a170:	ldr	r5, [pc, #128]	; (a1f4 <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a172:	bl	c124 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a176:	ldr	r7, [pc, #128]	; (a1f8 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a178:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a17a:	ldr	r3, [pc, #128]	; (a1fc <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a17c:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    a17e:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a180:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    a182:	ldr	r6, [pc, #124]	; (a200 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    a184:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a186:	bl	c124 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a18a:	mov	r3, r4
    a18c:	mov	r2, r4
    a18e:	movs	r1, #16
    a190:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    a192:	str	r4, [r7, #0]
    a194:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    a196:	str	r4, [r6, #0]
    a198:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    a19a:	bl	ad2c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    a19e:	mov	r2, r4
    a1a0:	ldr	r3, [pc, #96]	; (a204 <usb_serial_configure+0xa0>)
    a1a2:	movs	r1, #64	; 0x40
    a1a4:	movs	r0, #3
    a1a6:	bl	acc8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    a1aa:	mov	r3, r4
    a1ac:	mov	r2, r4
    a1ae:	movs	r1, #64	; 0x40
    a1b0:	movs	r0, #4
    a1b2:	bl	ad2c <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a1b6:	mov	r3, r4
    a1b8:	movs	r2, #64	; 0x40
    a1ba:	mov	r0, r5
    a1bc:	ldr	r1, [pc, #72]	; (a208 <usb_serial_configure+0xa4>)
    a1be:	bl	ad94 <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a1c2:	mov	r1, r5
    a1c4:	movs	r0, #3
    a1c6:	bl	adec <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    a1ca:	ldr	r3, [pc, #64]	; (a20c <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    a1cc:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    a1ce:	ldr	r1, [pc, #64]	; (a210 <usb_serial_configure+0xac>)
    a1d0:	ldr	r0, [pc, #64]	; (a214 <usb_serial_configure+0xb0>)
    a1d2:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    a1d4:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a1d8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a1dc:	ldr.w	r2, [r3, #328]	; 0x148
    a1e0:	orr.w	r2, r2, #16777216	; 0x1000000
    a1e4:	str.w	r2, [r3, #328]	; 0x148
    a1e8:	pop	{r3, r4, r5, r6, r7, pc}
    a1ea:	nop
    a1ec:	.word	0x2000d740
    a1f0:	.word	0x2000d5d5
    a1f4:	.word	0x2000d6c0
    a1f8:	.word	0x2000d6a0
    a1fc:	.word	0x2000d720
    a200:	.word	0x2000d698
    a204:	.word	0x00009f6d
    a208:	.word	0x2000d5d8
    a20c:	.word	0x402e0000
    a210:	.word	0x2000d824
    a214:	.word	0x00009f95

0000a218 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a218:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a21a:	ldr	r5, [pc, #56]	; (a254 <usb_serial_getchar+0x3c>)
    a21c:	ldr	r3, [pc, #56]	; (a258 <usb_serial_getchar+0x40>)
    a21e:	ldrh	r2, [r5, #0]
    a220:	ldrh	r0, [r3, #0]
    a222:	cmp	r2, r0
    a224:	bcs.n	a24e <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    a226:	adds	r3, r2, #1
    a228:	ldr	r1, [pc, #48]	; (a25c <usb_serial_getchar+0x44>)
    a22a:	uxth	r3, r3
    a22c:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    a22e:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    a230:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    a232:	bls.n	a238 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    a234:	mov	r0, r4
	}
	return -1;
}
    a236:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a238:	movs	r3, #0
    a23a:	movs	r2, #64	; 0x40
    a23c:	ldr	r0, [pc, #32]	; (a260 <usb_serial_getchar+0x48>)
    a23e:	bl	ad94 <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a242:	ldr	r1, [pc, #28]	; (a260 <usb_serial_getchar+0x48>)
    a244:	movs	r0, #3
    a246:	bl	adec <usb_receive>
		}
		return c;
    a24a:	mov	r0, r4
    a24c:	pop	{r3, r4, r5, pc}
	}
	return -1;
    a24e:	mov.w	r0, #4294967295
    a252:	pop	{r3, r4, r5, pc}
    a254:	.word	0x2000d698
    a258:	.word	0x2000d6a0
    a25c:	.word	0x2000d5d8
    a260:	.word	0x2000d6c0

0000a264 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    a264:	ldr	r3, [pc, #20]	; (a27c <usb_serial_peekchar+0x18>)
    a266:	ldr	r2, [pc, #24]	; (a280 <usb_serial_peekchar+0x1c>)
    a268:	ldrh	r3, [r3, #0]
    a26a:	ldrh	r2, [r2, #0]
    a26c:	cmp	r2, r3
    a26e:	bls.n	a276 <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    a270:	ldr	r2, [pc, #16]	; (a284 <usb_serial_peekchar+0x20>)
    a272:	ldrb	r0, [r2, r3]
    a274:	bx	lr
	}

	return -1;
    a276:	mov.w	r0, #4294967295
}
    a27a:	bx	lr
    a27c:	.word	0x2000d698
    a280:	.word	0x2000d6a0
    a284:	.word	0x2000d5d8

0000a288 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    a288:	ldr	r2, [pc, #8]	; (a294 <usb_serial_available+0xc>)
    a28a:	ldr	r3, [pc, #12]	; (a298 <usb_serial_available+0x10>)
    a28c:	ldrh	r0, [r2, #0]
    a28e:	ldrh	r3, [r3, #0]
}
    a290:	subs	r0, r0, r3
    a292:	bx	lr
    a294:	.word	0x2000d6a0
    a298:	.word	0x2000d698

0000a29c <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    a29c:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a29e:	ldr	r3, [pc, #40]	; (a2c8 <usb_serial_flush_input+0x2c>)
    a2a0:	ldr	r4, [pc, #40]	; (a2cc <usb_serial_flush_input+0x30>)
    a2a2:	ldrh	r5, [r3, #0]
    a2a4:	ldrh	r3, [r4, #0]
    a2a6:	cmp	r3, r5
    a2a8:	bcc.n	a2ac <usb_serial_flush_input+0x10>
    a2aa:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a2ac:	movs	r3, #0
    a2ae:	ldr	r1, [pc, #32]	; (a2d0 <usb_serial_flush_input+0x34>)
    a2b0:	ldr	r0, [pc, #32]	; (a2d4 <usb_serial_flush_input+0x38>)
    a2b2:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    a2b4:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a2b6:	bl	ad94 <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a2ba:	ldr	r1, [pc, #24]	; (a2d4 <usb_serial_flush_input+0x38>)
    a2bc:	movs	r0, #3
	}
}
    a2be:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a2c2:	b.w	adec <usb_receive>
    a2c6:	nop
    a2c8:	.word	0x2000d6a0
    a2cc:	.word	0x2000d698
    a2d0:	.word	0x2000d5d8
    a2d4:	.word	0x2000d6c0

0000a2d8 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a2d8:	ldr	r3, [pc, #36]	; (a300 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a2da:	push	{lr}
    a2dc:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a2de:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a2e0:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a2e4:	cbnz	r3, a2f0 <usb_serial_putchar+0x18>
    a2e6:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a2ea:	add	sp, #12
    a2ec:	ldr.w	pc, [sp], #4
    a2f0:	movs	r1, #1
    a2f2:	add.w	r0, sp, #7
    a2f6:	bl	a004 <usb_serial_write.part.1>
    a2fa:	add	sp, #12
    a2fc:	ldr.w	pc, [sp], #4
    a300:	.word	0x2000d850

0000a304 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a304:	ldr	r3, [pc, #16]	; (a318 <usb_serial_write+0x14>)
    a306:	ldrb	r3, [r3, #0]
    a308:	and.w	r2, r3, #255	; 0xff
    a30c:	cbz	r3, a312 <usb_serial_write+0xe>
    a30e:	b.w	a004 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a312:	mov	r0, r2
    a314:	bx	lr
    a316:	nop
    a318:	.word	0x2000d850

0000a31c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a31c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a320:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a322:	ldr.w	r8, [pc, #64]	; a364 <usb_serial_write_buffer_free+0x48>
    a326:	movs	r3, #1
    a328:	ldr	r5, [pc, #48]	; (a35c <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a32a:	mov	r7, r4
    a32c:	ldr	r6, [pc, #48]	; (a360 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a32e:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a332:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a334:	mov	r0, r5
    a336:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a338:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a33a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a33e:	beq.n	a34c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a340:	bl	ae10 <usb_transfer_status>
    a344:	lsls	r3, r0, #24
    a346:	it	pl
    a348:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a34c:	cmp	r4, #7
    a34e:	bne.n	a332 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a350:	movs	r3, #0
	return sum;
}
    a352:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a354:	strb.w	r3, [r8]
	return sum;
}
    a358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a35c:	.word	0x2000d740
    a360:	.word	0x2000d5d5
    a364:	.word	0x2000d5d4

0000a368 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a368:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    a36a:	ldr	r3, [pc, #80]	; (a3bc <usb_serial_flush_output+0x54>)
    a36c:	ldrb	r3, [r3, #0]
    a36e:	cbz	r3, a376 <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    a370:	ldr	r4, [pc, #76]	; (a3c0 <usb_serial_flush_output+0x58>)
    a372:	ldrh	r2, [r4, #0]
    a374:	cbnz	r2, a378 <usb_serial_flush_output+0x10>
    a376:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a378:	ldr	r6, [pc, #72]	; (a3c4 <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a37a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a37e:	ldr	r5, [pc, #72]	; (a3c8 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a380:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a382:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a384:	rsb	r2, r2, #256	; 0x100
    a388:	ldr	r0, [pc, #64]	; (a3cc <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a38a:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a38e:	ldr	r7, [pc, #64]	; (a3d0 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a390:	add.w	r1, r0, r1, lsl #8
    a394:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a396:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a39a:	bl	ad94 <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a39e:	mov	r1, r5
    a3a0:	movs	r0, #4
    a3a2:	bl	adc4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a3a6:	ldrb	r3, [r6, #0]
    a3a8:	adds	r3, #1
    a3aa:	uxtb	r3, r3
    a3ac:	cmp	r3, #6
    a3ae:	it	hi
    a3b0:	movhi	r3, #0
    a3b2:	strb	r3, [r6, #0]
	tx_available = 0;
    a3b4:	movs	r3, #0
    a3b6:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    a3b8:	strb	r3, [r7, #0]
    a3ba:	pop	{r3, r4, r5, r6, r7, pc}
    a3bc:	.word	0x2000d850
    a3c0:	.word	0x2000d720
    a3c4:	.word	0x2000d5d5
    a3c8:	.word	0x2000d740
    a3cc:	.word	0x2000ced4
    a3d0:	.word	0x2000d5d4

0000a3d4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a3d4:	ldr	r2, [pc, #556]	; (a604 <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a3d6:	ldr	r3, [pc, #560]	; (a608 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a3d8:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a3da:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a3de:	ldr	r5, [pc, #556]	; (a60c <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a3e0:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a3e2:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a3e4:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a3e6:	bls.n	a424 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a3e8:	ldr	r3, [pc, #548]	; (a610 <set_arm_clock+0x23c>)
    a3ea:	cmp	r0, r3
    a3ec:	bls.w	a5f0 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a3f0:	ldr	r3, [pc, #544]	; (a614 <set_arm_clock+0x240>)
    a3f2:	movw	r6, #1300	; 0x514
    a3f6:	ldr.w	lr, [pc, #600]	; a650 <set_arm_clock+0x27c>
    a3fa:	add	r3, r0
    a3fc:	ldr	r5, [pc, #536]	; (a618 <set_arm_clock+0x244>)
    a3fe:	lsrs	r2, r3, #8
    a400:	umull	r3, r2, lr, r2
    a404:	lsrs	r3, r2, #7
    a406:	add.w	r3, r3, r3, lsl #2
    a40a:	add.w	r2, r3, r3, lsl #2
    a40e:	addw	r3, r2, #1250	; 0x4e2
    a412:	cmp	r3, r6
    a414:	it	cs
    a416:	movcs	r3, r6
    a418:	sub.w	r3, r3, #800	; 0x320
    a41c:	umull	r3, r6, r5, r3
    a420:	lsrs	r6, r6, #3
    a422:	b.n	a42c <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    a424:	cmp	r0, #25
    a426:	ite	cc
    a428:	movcc	r6, #6
    a42a:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a42c:	ldr	r2, [pc, #472]	; (a608 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a42e:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a432:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a436:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a438:	orr.w	r3, r3, #192	; 0xc0
    a43c:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a440:	bcs.n	a458 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a442:	ldr	r3, [pc, #456]	; (a60c <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a444:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a448:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a44a:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a44c:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a44e:	ldr	r3, [r2, #0]
    a450:	cmp	r3, #0
    a452:	bge.n	a44e <set_arm_clock+0x7a>
    a454:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a458:	ands.w	r3, r4, #33554432	; 0x2000000
    a45c:	bne.n	a4bc <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a45e:	ldr	r5, [pc, #444]	; (a61c <set_arm_clock+0x248>)
    a460:	ldr	r2, [pc, #444]	; (a620 <set_arm_clock+0x24c>)
    a462:	ldr.w	ip, [r5, #16]
    a466:	mov	r5, r2
    a468:	and.w	r2, ip, r2
    a46c:	cmp	r2, r5
    a46e:	itet	eq
    a470:	moveq.w	r3, #402653184	; 0x18000000
    a474:	movne.w	r2, #4096	; 0x1000
    a478:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a47a:	eor.w	r5, r4, r3
    a47e:	tst.w	r5, #939524096	; 0x38000000
    a482:	beq.n	a492 <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a484:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a488:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a48c:	ldr	r5, [pc, #376]	; (a608 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a48e:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    a490:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a492:	eor.w	r3, r1, r2
    a496:	tst.w	r3, #12288	; 0x3000
    a49a:	beq.n	a4ae <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a49c:	ldr	r3, [pc, #360]	; (a608 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a49e:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a4a2:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a4a4:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a4a6:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a4a8:	ldr	r3, [r2, #72]	; 0x48
    a4aa:	lsls	r5, r3, #28
    a4ac:	bmi.n	a4a8 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a4ae:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a4b2:	ldr	r2, [pc, #340]	; (a608 <set_arm_clock+0x234>)
    a4b4:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a4b6:	ldr	r3, [r2, #72]	; 0x48
    a4b8:	lsls	r1, r3, #26
    a4ba:	bmi.n	a4b6 <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a4bc:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a4be:	ldr	r5, [pc, #356]	; (a624 <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a4c0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a4c2:	mul.w	r3, r1, r2
    a4c6:	mul.w	r3, r0, r3
    a4ca:	cmp	r3, r5
    a4cc:	bhi.n	a4e2 <set_arm_clock+0x10e>
		if (div_arm < 8) {
    a4ce:	cmp	r2, #7
    a4d0:	bhi.w	a5dc <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    a4d4:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a4d6:	mul.w	r3, r1, r2
    a4da:	mul.w	r3, r0, r3
    a4de:	cmp	r3, r5
    a4e0:	bls.n	a4ce <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a4e2:	ldr	r0, [pc, #324]	; (a628 <set_arm_clock+0x254>)
    a4e4:	ldr	r5, [pc, #324]	; (a62c <set_arm_clock+0x258>)
    a4e6:	add	r0, r3
    a4e8:	umull	r3, r0, r5, r0
    a4ec:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    a4ee:	cmp	r3, #108	; 0x6c
    a4f0:	bhi.n	a5e6 <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    a4f2:	cmp	r3, #53	; 0x35
    a4f4:	bhi.n	a5f4 <set_arm_clock+0x220>
    a4f6:	ldr.w	r8, [pc, #348]	; a654 <set_arm_clock+0x280>
    a4fa:	movs	r3, #54	; 0x36
    a4fc:	ldr	r0, [pc, #304]	; (a630 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a4fe:	ldr.w	ip, [pc, #284]	; a61c <set_arm_clock+0x248>
    a502:	ldr	r5, [pc, #304]	; (a634 <set_arm_clock+0x260>)
    a504:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a508:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a50c:	and.w	r5, r9, r5
    a510:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a512:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a516:	beq.n	a530 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a518:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a51c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a520:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a522:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a526:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a52a:	ldr	r3, [r5, #0]
    a52c:	cmp	r3, #0
    a52e:	bge.n	a52a <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a530:	ldr.w	ip, [pc, #212]	; a608 <set_arm_clock+0x234>
    a534:	subs	r2, #1
    a536:	ldr.w	r3, [ip, #16]
    a53a:	and.w	r3, r3, #7
    a53e:	cmp	r3, r2
    a540:	beq.n	a552 <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a542:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a546:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a548:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a54c:	ldr	r3, [r5, #72]	; 0x48
    a54e:	lsls	r3, r3, #15
    a550:	bmi.n	a54c <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a552:	subs	r1, #1
    a554:	lsls	r1, r1, #10
    a556:	eor.w	r3, r4, r1
    a55a:	tst.w	r3, #7168	; 0x1c00
    a55e:	beq.n	a576 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a560:	ldr	r3, [pc, #164]	; (a608 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a562:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a566:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a56a:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a56c:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    a56e:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a570:	ldr	r3, [r2, #72]	; 0x48
    a572:	lsls	r1, r3, #30
    a574:	bmi.n	a570 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a576:	ldr	r3, [pc, #192]	; (a638 <set_arm_clock+0x264>)
    a578:	ldr	r1, [pc, #192]	; (a63c <set_arm_clock+0x268>)
    a57a:	add	r3, r0
    a57c:	lsrs	r3, r3, #7
    a57e:	umull	r3, r1, r1, r3
    a582:	lsrs	r1, r1, #12
    a584:	cmp	r1, #4
    a586:	it	cs
    a588:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a58a:	subs	r3, r1, #1
    a58c:	lsls	r3, r3, #8
    a58e:	eor.w	r2, r4, r3
    a592:	tst.w	r2, #768	; 0x300
    a596:	beq.n	a5a6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a598:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a59c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a5a0:	ldr	r2, [pc, #100]	; (a608 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a5a2:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a5a4:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a5a6:	ldr	r3, [pc, #96]	; (a608 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a5a8:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a5ac:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a5ae:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a5b0:	ldr	r3, [r2, #72]	; 0x48
    a5b2:	lsls	r3, r3, #26
    a5b4:	bmi.n	a5b0 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a5b6:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a5ba:	ldr	r2, [pc, #132]	; (a640 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5bc:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a5be:	ldr	r3, [pc, #132]	; (a644 <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a5c0:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a5c2:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5c4:	bcs.n	a5d8 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a5c6:	ldr	r3, [pc, #68]	; (a60c <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a5c8:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a5cc:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a5ce:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a5d0:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a5d2:	ldr	r3, [r2, #0]
    a5d4:	cmp	r3, #0
    a5d6:	bge.n	a5d2 <set_arm_clock+0x1fe>
	}

	return frequency;
}
    a5d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a5dc:	cmp	r1, #4
    a5de:	bhi.n	a4e2 <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    a5e0:	adds	r1, #1
				div_arm = 1;
    a5e2:	movs	r2, #1
    a5e4:	b.n	a4c2 <set_arm_clock+0xee>
    a5e6:	ldr.w	r8, [pc, #112]	; a658 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a5ea:	movs	r3, #108	; 0x6c
    a5ec:	ldr	r0, [pc, #88]	; (a648 <set_arm_clock+0x274>)
    a5ee:	b.n	a4fe <set_arm_clock+0x12a>
    a5f0:	movs	r6, #18
    a5f2:	b.n	a42c <set_arm_clock+0x58>
    a5f4:	ldr	r0, [pc, #84]	; (a64c <set_arm_clock+0x278>)
    a5f6:	ldr.w	r8, [pc, #100]	; a65c <set_arm_clock+0x288>
    a5fa:	mul.w	r0, r0, r3
    a5fe:	orr.w	r8, r3, r8
    a602:	b.n	a4fe <set_arm_clock+0x12a>
    a604:	.word	0x1f78a400
    a608:	.word	0x400fc000
    a60c:	.word	0x40080000
    a610:	.word	0x23c34600
    a614:	.word	0xdc3cba00
    a618:	.word	0x51eb851f
    a61c:	.word	0x400d8000
    a620:	.word	0x80003040
    a624:	.word	0x269fb1ff
    a628:	.word	0x005b8d80
    a62c:	.word	0x165e9f81
    a630:	.word	0x269fb200
    a634:	.word	0x8001307f
    a638:	.word	0x08f0d17f
    a63c:	.word	0x00e5109f
    a640:	.word	0x20000c54
    a644:	.word	0x20000c50
    a648:	.word	0x4d3f6400
    a64c:	.word	0x00b71b00
    a650:	.word	0x004cb223
    a654:	.word	0x80002036
    a658:	.word	0x8000206c
    a65c:	.word	0x80002000

0000a660 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a660:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a662:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a664:	cbz	r3, a66e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a666:	ldr	r3, [r2, #4]
    a668:	orr.w	r3, r3, #32768	; 0x8000
    a66c:	str	r3, [r2, #4]
	}
	__disable_irq();
    a66e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a670:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a672:	cbz	r4, a69c <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a674:	ldr	r3, [pc, #64]	; (a6b8 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a676:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a678:	ldr.w	r4, [r3, #432]	; 0x1b0
    a67c:	tst	r4, r1
    a67e:	bne.n	a6b0 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a680:	ldr.w	r4, [r3, #320]	; 0x140
    a684:	orr.w	r4, r4, #16384	; 0x4000
    a688:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a68c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    a690:	ldr.w	r4, [r3, #320]	; 0x140
    a694:	lsls	r4, r4, #17
    a696:	bpl.n	a680 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a698:	tst	r1, r5
    a69a:	bne.n	a6b0 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a69c:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a69e:	ldr	r4, [pc, #24]	; (a6b8 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a6a0:	str	r2, [r0, #8]
	endpoint->status = 0;
    a6a2:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a6a4:	ldr.w	r3, [r4, #432]	; 0x1b0
    a6a8:	orrs	r1, r3
    a6aa:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a6ae:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a6b0:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a6b2:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a6b4:	pop	{r4, r5}
    a6b6:	bx	lr
    a6b8:	.word	0x402e0000

0000a6bc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a6bc:	push	{r3, r4, r5, lr}
    a6be:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    a6c0:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    a6c2:	b.n	a6d2 <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a6c4:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    a6c6:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    a6c8:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    a6ca:	ldr	r2, [r5, #52]	; 0x34
    a6cc:	mov	r3, r4
    a6ce:	cmp	r4, r2
    a6d0:	beq.n	a6e4 <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a6d2:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    a6d4:	cbz	r3, a6e4 <run_callbacks+0x28>
    a6d6:	cmp	r3, #1
    a6d8:	beq.n	a6e4 <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    a6da:	ldr	r2, [r3, #4]
    a6dc:	lsls	r2, r2, #24
    a6de:	bpl.n	a6c4 <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    a6e0:	str	r3, [r5, #48]	; 0x30
			return;
    a6e2:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    a6e4:	movs	r3, #0
    a6e6:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    a6e8:	str	r3, [r5, #52]	; 0x34
    a6ea:	pop	{r3, r4, r5, pc}

0000a6ec <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a6ec:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a6ee:	cbnz	r1, a722 <endpoint0_transmit.constprop.0+0x36>
    a6f0:	ldr	r4, [pc, #124]	; (a770 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a6f2:	ldr	r3, [pc, #128]	; (a774 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a6f4:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a6f6:	ldr	r0, [pc, #128]	; (a778 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a6f8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a6fa:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a6fc:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a6fe:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a700:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a702:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a704:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    a706:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a70a:	ldr	r5, [pc, #112]	; (a77c <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a70c:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a710:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a712:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a716:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a718:	ldr.w	r3, [r2, #432]	; 0x1b0
    a71c:	cmp	r3, #0
    a71e:	bne.n	a718 <endpoint0_transmit.constprop.0+0x2c>
}
    a720:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a722:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a724:	ldr	r3, [pc, #88]	; (a780 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a726:	ldr	r5, [pc, #80]	; (a778 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a728:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a72a:	ldr	r4, [pc, #68]	; (a770 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a72c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a730:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a732:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a734:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a736:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a73a:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a73c:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a740:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a742:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a746:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a74a:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a74e:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a750:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a752:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a756:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a75a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a75e:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a760:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a762:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a766:	ldr.w	r3, [r2, #432]	; 0x1b0
    a76a:	cmp	r3, #0
    a76c:	bne.n	a766 <endpoint0_transmit.constprop.0+0x7a>
    a76e:	b.n	a6f2 <endpoint0_transmit.constprop.0+0x6>
    a770:	.word	0x2000f000
    a774:	.word	0x2000e020
    a778:	.word	0x402e0000
    a77c:	.word	0x2000d830
    a780:	.word	0x2000e000

0000a784 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    a784:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a788:	ldr	r4, [pc, #696]	; (aa44 <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    a78a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a78c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a790:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a794:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a798:	beq.n	a858 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a79a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a79e:	cmp	r3, #0
    a7a0:	beq.n	a84e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a7a2:	mov.w	r9, #65537	; 0x10001
    a7a6:	ldr.w	fp, [pc, #700]	; aa64 <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a7aa:	mov	r6, r4
    a7ac:	ldr	r7, [pc, #664]	; (aa48 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a7ae:	mov	sl, r9
    a7b0:	ldr	r1, [r7, #40]	; 0x28
    a7b2:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a7b4:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a7b8:	ldr.w	r3, [r4, #320]	; 0x140
    a7bc:	orr.w	r3, r3, #8192	; 0x2000
    a7c0:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a7c4:	ldr.w	r3, [r4, #320]	; 0x140
    a7c8:	lsls	r5, r3, #18
    a7ca:	bpl.n	a7b8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a7cc:	ldr.w	r3, [r6, #320]	; 0x140
    a7d0:	bic.w	r3, r3, #8192	; 0x2000
    a7d4:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a7d8:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a7dc:	ldr.w	r3, [r4, #436]	; 0x1b4
    a7e0:	ands.w	r3, r3, #65537	; 0x10001
    a7e4:	bne.n	a7dc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7e6:	uxth	r0, r1
    a7e8:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a7ec:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7f0:	cmp	r0, r5
    a7f2:	bhi.w	a916 <isr+0x192>
    a7f6:	cmp.w	r0, #1664	; 0x680
    a7fa:	bcs.w	ab60 <isr+0x3dc>
    a7fe:	cmp.w	r0, #258	; 0x102
    a802:	beq.w	aa80 <isr+0x2fc>
    a806:	bhi.w	a99c <isr+0x218>
    a80a:	cmp	r0, #128	; 0x80
    a80c:	beq.w	aa2a <isr+0x2a6>
    a810:	cmp	r0, #130	; 0x82
    a812:	bne.w	a98c <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a816:	uxth	r2, r2
    a818:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a81c:	cmp	r1, #7
    a81e:	bhi.w	a98c <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a822:	lsls	r1, r1, #2
    a824:	ldr	r0, [pc, #548]	; (aa4c <isr+0x2c8>)
		reply_buffer[0] = 0;
    a826:	ldr	r5, [pc, #552]	; (aa50 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a828:	add	r0, r1
    a82a:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a82c:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a82e:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    a830:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a832:	bpl.w	abb2 <isr+0x42e>
    a836:	lsls	r2, r1, #15
    a838:	bpl.n	a83e <isr+0xba>
			reply_buffer[0] = 1;
    a83a:	movs	r3, #1
    a83c:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a83e:	movs	r1, #2
    a840:	ldr	r0, [pc, #524]	; (aa50 <isr+0x2cc>)
    a842:	bl	a6ec <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a846:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a84a:	cmp	r3, #0
    a84c:	bne.n	a7b0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a84e:	ldr	r2, [pc, #500]	; (aa44 <isr+0x2c0>)
    a850:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a854:	cmp	r3, #0
    a856:	bne.n	a8e2 <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a858:	tst.w	r8, #64	; 0x40
    a85c:	beq.n	a890 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a85e:	ldr	r3, [pc, #484]	; (aa44 <isr+0x2c0>)
    a860:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a864:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a866:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a86a:	ldr.w	r1, [r3, #444]	; 0x1bc
    a86e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a872:	ldr.w	r4, [r2, #432]	; 0x1b0
    a876:	ldr	r3, [pc, #460]	; (aa44 <isr+0x2c0>)
    a878:	cmp	r4, #0
    a87a:	bne.n	a872 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a87c:	mov.w	r2, #4294967295
    a880:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a884:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a888:	bl	a160 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a88c:	ldr	r3, [pc, #452]	; (aa54 <isr+0x2d0>)
    a88e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a890:	tst.w	r8, #16777216	; 0x1000000
    a894:	beq.n	a89e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a896:	ldr	r3, [pc, #448]	; (aa58 <isr+0x2d4>)
    a898:	ldr	r3, [r3, #0]
    a89a:	cbz	r3, a89e <isr+0x11a>
    a89c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a89e:	tst.w	r8, #33554432	; 0x2000000
    a8a2:	beq.n	a8ac <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a8a4:	ldr	r3, [pc, #436]	; (aa5c <isr+0x2d8>)
    a8a6:	ldr	r3, [r3, #0]
    a8a8:	cbz	r3, a8ac <isr+0x128>
    a8aa:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a8ac:	tst.w	r8, #4
    a8b0:	beq.n	a8b8 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a8b2:	ldr	r3, [pc, #400]	; (aa44 <isr+0x2c0>)
    a8b4:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a8b8:	ldr	r3, [pc, #392]	; (aa44 <isr+0x2c0>)
    a8ba:	ldr.w	r2, [r3, #328]	; 0x148
    a8be:	lsls	r2, r2, #24
    a8c0:	bpl.n	a8dc <isr+0x158>
    a8c2:	tst.w	r8, #128	; 0x80
    a8c6:	beq.n	a8dc <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a8c8:	ldr	r1, [pc, #404]	; (aa60 <isr+0x2dc>)
    a8ca:	ldrb	r2, [r1, #0]
    a8cc:	cmp	r2, #0
    a8ce:	beq.w	aba0 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    a8d2:	subs	r3, r2, #1
    a8d4:	uxtb	r3, r3
    a8d6:	strb	r3, [r1, #0]
    a8d8:	cbnz	r3, a8dc <isr+0x158>
				asm("bkpt #251"); // run bootloader
    a8da:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    a8dc:	add	sp, #12
    a8de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a8e2:	ldr	r1, [pc, #384]	; (aa64 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a8e4:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a8e8:	ldr	r0, [r1, #0]
    a8ea:	tst	r3, r0
    a8ec:	bne.w	ac2e <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a8f0:	ldr	r2, [pc, #352]	; (aa54 <isr+0x2d0>)
    a8f2:	ldr	r4, [r2, #0]
			if (completestatus) {
    a8f4:	ands	r4, r3
    a8f6:	beq.n	a858 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a8f8:	lsls	r6, r4, #29
    a8fa:	bmi.w	ac68 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a8fe:	lsls	r5, r4, #13
    a900:	bmi.w	ac78 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a904:	lsls	r0, r4, #28
    a906:	bmi.w	ac70 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a90a:	lsls	r1, r4, #12
    a90c:	bpl.n	a858 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    a90e:	ldr	r0, [pc, #344]	; (aa68 <isr+0x2e4>)
    a910:	bl	a6bc <run_callbacks>
    a914:	b.n	a858 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a916:	movw	r5, #8225	; 0x2021
    a91a:	cmp	r0, r5
    a91c:	beq.n	a984 <isr+0x200>
    a91e:	bhi.n	a9e8 <isr+0x264>
    a920:	cmp.w	r0, #2176	; 0x880
    a924:	beq.w	ab44 <isr+0x3c0>
    a928:	cmp.w	r0, #2304	; 0x900
    a92c:	bne.n	a98c <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a92e:	ubfx	r1, r1, #16, #8
    a932:	ldr	r2, [pc, #312]	; (aa6c <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a934:	ldr	r0, [pc, #312]	; (aa70 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a936:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a938:	ldr	r1, [pc, #312]	; (aa74 <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a93a:	ldr	r2, [pc, #316]	; (aa78 <isr+0x2f4>)
    a93c:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a93e:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a942:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a946:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a94a:	bl	a164 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a94e:	ldr	r2, [pc, #300]	; (aa7c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a950:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a952:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a954:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    a956:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a958:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a95a:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a95c:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a960:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a962:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a964:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a968:	ldr	r2, [pc, #248]	; (aa64 <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a96a:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a96e:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a970:	ldr.w	r3, [r4, #432]	; 0x1b0
    a974:	cmp	r3, #0
    a976:	bne.n	a970 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a978:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a97c:	cmp	r3, #0
    a97e:	bne.w	a7b0 <isr+0x2c>
    a982:	b.n	a84e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a984:	lsrs	r0, r2, #16
    a986:	cmp	r0, #7
    a988:	beq.w	abba <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a98c:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a990:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a994:	cmp	r3, #0
    a996:	bne.w	a7b0 <isr+0x2c>
    a99a:	b.n	a84e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a99c:	movw	r5, #770	; 0x302
    a9a0:	cmp	r0, r5
    a9a2:	beq.w	aaea <isr+0x366>
    a9a6:	cmp.w	r0, #1280	; 0x500
    a9aa:	bne.n	a98c <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9ac:	ldr	r2, [pc, #204]	; (aa7c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    a9ae:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9b0:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a9b2:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a9b4:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9b6:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a9b8:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a9bc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a9be:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9c2:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a9c4:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a9c8:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9cc:	cmp	r3, #0
    a9ce:	bne.n	a9c8 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a9d0:	lsrs	r3, r1, #16
    a9d2:	lsls	r3, r3, #25
    a9d4:	orr.w	r3, r3, #16777216	; 0x1000000
    a9d8:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a9dc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a9e0:	cmp	r3, #0
    a9e2:	bne.w	a7b0 <isr+0x2c>
    a9e6:	b.n	a84e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a9e8:	movw	r3, #8737	; 0x2221
    a9ec:	cmp	r0, r3
    a9ee:	beq.n	aad8 <isr+0x354>
    a9f0:	movw	r3, #8993	; 0x2321
    a9f4:	cmp	r0, r3
    a9f6:	bne.n	a98c <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9f8:	ldr	r3, [pc, #128]	; (aa7c <isr+0x2f8>)
    a9fa:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    a9fc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a9fe:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aa00:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    aa02:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa04:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa08:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa0a:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aa0e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aa10:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    aa12:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aa16:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa1a:	cmp	r3, #0
    aa1c:	bne.n	aa16 <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa1e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa22:	cmp	r3, #0
    aa24:	bne.w	a7b0 <isr+0x2c>
    aa28:	b.n	a84e <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    aa2a:	ldr	r2, [pc, #36]	; (aa50 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    aa2c:	movs	r1, #2
    aa2e:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    aa30:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    aa32:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    aa34:	bl	a6ec <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aa38:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aa3c:	cmp	r3, #0
    aa3e:	bne.w	a7b0 <isr+0x2c>
    aa42:	b.n	a84e <isr+0xca>
    aa44:	.word	0x402e0000
    aa48:	.word	0x2000f000
    aa4c:	.word	0x402e01c0
    aa50:	.word	0x2000d840
    aa54:	.word	0x2000d828
    aa58:	.word	0x2000d824
    aa5c:	.word	0x2000d82c
    aa60:	.word	0x2000d834
    aa64:	.word	0x2000d830
    aa68:	.word	0x2000f1c0
    aa6c:	.word	0x2000d850
    aa70:	.word	0x00cc0002
    aa74:	.word	0x000200c8
    aa78:	.word	0x00c80002
    aa7c:	.word	0x2000e020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    aa80:	uxth	r2, r2
    aa82:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    aa86:	cmp	r3, #7
    aa88:	bhi.n	a98c <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    aa8a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    aa8e:	mov.w	r3, r3, lsl #2
    aa92:	ldr	r2, [pc, #492]	; (ac80 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa94:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    aa98:	add	r2, r3
    aa9a:	ldr	r3, [r2, #0]
    aa9c:	ite	ne
    aa9e:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    aaa2:	biceq.w	r3, r3, #1
    aaa6:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    aaa8:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aaaa:	ldr	r3, [pc, #472]	; (ac84 <isr+0x500>)
    aaac:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aaae:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    aab0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aab2:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aab6:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aab8:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aabc:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    aabe:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    aac0:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    aac4:	ldr.w	r3, [r4, #432]	; 0x1b0
    aac8:	cmp	r3, #0
    aaca:	bne.n	aac4 <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    aacc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    aad0:	cmp	r3, #0
    aad2:	bne.w	a7b0 <isr+0x2c>
    aad6:	b.n	a84e <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aad8:	ldr	r3, [pc, #428]	; (ac88 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    aada:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aade:	ldr	r2, [pc, #428]	; (ac8c <isr+0x508>)
    aae0:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    aae2:	ldr	r3, [pc, #428]	; (ac90 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    aae4:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    aae6:	strb	r1, [r3, #0]
    aae8:	b.n	a9f8 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    aaea:	uxth	r2, r2
    aaec:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    aaf0:	cmp	r3, #7
    aaf2:	bhi.w	a98c <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    aaf6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aafa:	mov.w	r3, r3, lsl #2
    aafe:	ldr	r2, [pc, #384]	; (ac80 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ab00:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    ab04:	add	r2, r3
    ab06:	ldr	r3, [r2, #0]
    ab08:	ite	ne
    ab0a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ab0e:	orreq.w	r3, r3, #1
    ab12:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ab14:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ab16:	ldr	r3, [pc, #364]	; (ac84 <isr+0x500>)
    ab18:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ab1a:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ab1c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ab1e:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ab22:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ab24:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ab28:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ab2a:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    ab2c:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    ab30:	ldr.w	r3, [r4, #432]	; 0x1b0
    ab34:	cmp	r3, #0
    ab36:	bne.n	ab30 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ab38:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ab3c:	cmp	r3, #0
    ab3e:	bne.w	a7b0 <isr+0x2c>
    ab42:	b.n	a84e <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab44:	ldr	r2, [pc, #332]	; (ac94 <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ab46:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab48:	ldr	r3, [pc, #332]	; (ac98 <isr+0x514>)
    ab4a:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ab4c:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    ab4e:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    ab50:	bl	a6ec <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ab54:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    ab58:	cmp	r3, #0
    ab5a:	bne.w	a7b0 <isr+0x2c>
    ab5e:	b.n	a84e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ab60:	ldr	r3, [pc, #312]	; (ac9c <isr+0x518>)
    ab62:	ldr	r0, [r3, #4]
    ab64:	cmp	r0, #0
    ab66:	beq.w	a98c <isr+0x208>
    ab6a:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ab6c:	uxth.w	lr, r2
    ab70:	b.n	ab7c <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ab72:	adds	r3, #12
    ab74:	ldr	r0, [r3, #4]
    ab76:	cmp	r0, #0
    ab78:	beq.w	a98c <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ab7c:	ldrh	r5, [r3, #0]
    ab7e:	cmp	r5, r1
    ab80:	bne.n	ab72 <isr+0x3ee>
    ab82:	ldrh	r5, [r3, #2]
    ab84:	cmp	r5, lr
    ab86:	bne.n	ab72 <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    ab88:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    ab8a:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    ab8c:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    ab8e:	ite	eq
    ab90:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    ab92:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    ab94:	cmp	r1, r2
    ab96:	it	cs
    ab98:	movcs	r1, r2
    ab9a:	bl	a6ec <endpoint0_transmit.constprop.0>
    ab9e:	b.n	a846 <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    aba0:	ldr.w	r2, [r3, #328]	; 0x148
    aba4:	bic.w	r2, r2, #128	; 0x80
    aba8:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    abac:	add	sp, #12
    abae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    abb2:	lsls	r3, r1, #31
    abb4:	bpl.w	a83e <isr+0xba>
    abb8:	b.n	a83a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    abba:	ldr	r5, [pc, #228]	; (aca0 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    abbc:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    abbe:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    abc0:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    abc2:	ldr	r3, [pc, #224]	; (aca4 <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    abc4:	ldr	r1, [pc, #224]	; (aca8 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    abc6:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    abc8:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    abca:	ldr	r1, [pc, #224]	; (acac <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    abcc:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    abd0:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    abd2:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    abd6:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    abda:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    abde:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    abe2:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    abe4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    abe6:	sub.w	r0, r1, #4096	; 0x1000
    abea:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    abec:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    abf0:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    abf2:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    abf4:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    abf8:	ldr.w	r3, [r4, #432]	; 0x1b0
    abfc:	cmp	r3, #0
    abfe:	bne.n	abf8 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    ac00:	ldr	r2, [pc, #128]	; (ac84 <isr+0x500>)
    ac02:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    ac04:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    ac06:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ac08:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac0a:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    ac0e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ac10:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    ac14:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ac16:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ac1a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    ac1c:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac20:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    ac24:	ldr.w	r3, [r4, #432]	; 0x1b0
    ac28:	cmp	r3, #0
    ac2a:	bne.n	ac24 <isr+0x4a0>
    ac2c:	b.n	a846 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    ac2e:	ldr	r4, [pc, #112]	; (aca0 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ac30:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ac34:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ac36:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    ac38:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    ac3a:	cmp	r4, r0
    ac3c:	bne.w	a8f0 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ac40:	ldr	r1, [pc, #108]	; (acb0 <isr+0x52c>)
    ac42:	ldr	r4, [pc, #112]	; (acb4 <isr+0x530>)
    ac44:	ldmia	r1, {r0, r1}
    ac46:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ac48:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ac4a:	str	r0, [r4, #0]
    ac4c:	strh	r1, [r4, #4]
    ac4e:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    ac50:	bne.w	a8f0 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    ac54:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ac58:	movs	r4, #80	; 0x50
    ac5a:	ldr	r0, [pc, #92]	; (acb8 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    ac5c:	orr.w	r1, r1, #128	; 0x80
    ac60:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ac64:	strb	r4, [r0, #0]
    ac66:	b.n	a8f0 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    ac68:	ldr	r0, [pc, #80]	; (acbc <isr+0x538>)
    ac6a:	bl	a6bc <run_callbacks>
    ac6e:	b.n	a8fe <isr+0x17a>
    ac70:	ldr	r0, [pc, #76]	; (acc0 <isr+0x53c>)
    ac72:	bl	a6bc <run_callbacks>
    ac76:	b.n	a90a <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    ac78:	ldr	r0, [pc, #72]	; (acc4 <isr+0x540>)
    ac7a:	bl	a6bc <run_callbacks>
    ac7e:	b.n	a904 <isr+0x180>
    ac80:	.word	0x402e01c0
    ac84:	.word	0x2000e020
    ac88:	.word	0x2000d858
    ac8c:	.word	0x2000d8ec
    ac90:	.word	0x2000d821
    ac94:	.word	0x2000d850
    ac98:	.word	0x2000d840
    ac9c:	.word	0x20000728
    aca0:	.word	0x2000d838
    aca4:	.word	0x2000e000
    aca8:	.word	0x00078080
    acac:	.word	0x2000f848
    acb0:	.word	0x2000d848
    acb4:	.word	0x2000d8e4
    acb8:	.word	0x2000d834
    acbc:	.word	0x2000f100
    acc0:	.word	0x2000f180
    acc4:	.word	0x2000f140

0000acc8 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acc8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acca:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    acce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acd2:	ite	ne
    acd4:	movne	r7, #0
    acd6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    acda:	cmp	r2, #2
    acdc:	bls.n	ace2 <usb_config_rx+0x1a>
    acde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ace2:	mov.w	sl, r0, lsl #7
    ace6:	ldr.w	r9, [pc, #64]	; ad28 <usb_config_rx+0x60>
    acea:	mov	r5, r1
    acec:	mov	r4, r0
    acee:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    acf2:	movs	r1, #0
    acf4:	movs	r2, #64	; 0x40
    acf6:	mov	r8, r3
    acf8:	mov	r0, r6
    acfa:	bl	c124 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    acfe:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ad00:	orr.w	r1, r7, r5, lsl #16
    ad04:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ad08:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad0c:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ad0e:	cmp.w	r8, #0
    ad12:	beq.n	acde <usb_config_rx+0x16>
    ad14:	ldr	r3, [pc, #12]	; (ad24 <usb_config_rx+0x5c>)
    ad16:	lsls	r0, r4
    ad18:	ldr	r4, [r3, #0]
    ad1a:	orrs	r0, r4
    ad1c:	str	r0, [r3, #0]
    ad1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad22:	nop
    ad24:	.word	0x2000d828
    ad28:	.word	0x2000f000

0000ad2c <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ad2c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ad2e:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ad32:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ad36:	ite	ne
    ad38:	movne	r7, #0
    ad3a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ad3e:	cmp	r2, #2
    ad40:	bls.n	ad46 <usb_config_tx+0x1a>
    ad42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad46:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad48:	lsls	r5, r0, #7
    ad4a:	ldr.w	r9, [pc, #68]	; ad90 <usb_config_tx+0x64>
    ad4e:	mov	r8, r1
    ad50:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad52:	movs	r1, #0
    ad54:	mov	r4, r0
    ad56:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ad58:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ad5c:	mov	r0, sl
    ad5e:	bl	c124 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad62:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ad64:	orr.w	r1, r7, r8, lsl #16
    ad68:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ad6c:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ad70:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ad74:	cmp	r6, #0
    ad76:	beq.n	ad42 <usb_config_tx+0x16>
    ad78:	add.w	r0, r4, #16
    ad7c:	ldr	r3, [pc, #12]	; (ad8c <usb_config_tx+0x60>)
    ad7e:	lsls	r2, r0
    ad80:	ldr	r0, [r3, #0]
    ad82:	orrs	r2, r0
    ad84:	str	r2, [r3, #0]
    ad86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad8a:	nop
    ad8c:	.word	0x2000d828
    ad90:	.word	0x2000f000

0000ad94 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad94:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ad96:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ad98:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ad9a:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ad9e:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ada0:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ada2:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ada4:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    ada8:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    adac:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    adb0:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    adb4:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    adb6:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    adb8:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    adba:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    adbc:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    adbe:	pop	{r4, r5, r6, r7}
    adc0:	bx	lr
    adc2:	nop

0000adc4 <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    adc4:	subs	r3, r0, #2
    adc6:	cmp	r3, #2
    adc8:	bls.n	adcc <usb_transmit+0x8>
    adca:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    adcc:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    adce:	ldr	r3, [pc, #24]	; (ade8 <usb_transmit+0x24>)
    add0:	add.w	r4, r0, #16
    add4:	movs	r5, #1
    add6:	mov	r2, r1
    add8:	add.w	r0, r3, r0, lsl #7
    addc:	lsl.w	r1, r5, r4
}
    ade0:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    ade2:	b.w	a660 <schedule_transfer>
    ade6:	nop
    ade8:	.word	0x2000f040

0000adec <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    adec:	subs	r3, r0, #2
    adee:	cmp	r3, #2
    adf0:	bls.n	adf4 <usb_receive+0x8>
    adf2:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    adf4:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    adf6:	ldr	r3, [pc, #20]	; (ae0c <usb_receive+0x20>)
    adf8:	movs	r4, #1
    adfa:	mov	r2, r1
    adfc:	lsl.w	r1, r4, r0
    ae00:	add.w	r0, r3, r0, lsl #7
}
    ae04:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ae08:	b.w	a660 <schedule_transfer>
    ae0c:	.word	0x2000f000

0000ae10 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ae10:	ldr	r2, [pc, #32]	; (ae34 <usb_transfer_status+0x24>)
    ae12:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ae16:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ae18:	orr.w	r3, r3, #16384	; 0x4000
    ae1c:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ae20:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ae22:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ae26:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    ae28:	tst.w	r3, #16384	; 0x4000
    ae2c:	beq.n	ae16 <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    ae2e:	mov	r0, r1
    ae30:	bx	lr
    ae32:	nop
    ae34:	.word	0x402e0000

0000ae38 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    ae38:	ldr	r3, [pc, #36]	; (ae60 <rtc_set+0x28>)
    ae3a:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    ae3c:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    ae3e:	bic.w	r2, r2, #1
    ae42:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    ae44:	ldr	r3, [r1, #8]
    ae46:	ldr	r2, [pc, #24]	; (ae60 <rtc_set+0x28>)
    ae48:	lsls	r3, r3, #31
    ae4a:	bmi.n	ae44 <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    ae4c:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    ae4e:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    ae50:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    ae52:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    ae54:	ldr	r3, [r2, #8]
    ae56:	orr.w	r3, r3, #1
    ae5a:	str	r3, [r2, #8]
    ae5c:	bx	lr
    ae5e:	nop
    ae60:	.word	0x400d4000

0000ae64 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ae64:	cmp	r0, #0
    ae66:	beq.n	af0e <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    ae68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae6c:	mov	r9, r0
    ae6e:	sub	sp, #12
    ae70:	ldr	r4, [pc, #156]	; (af10 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae72:	movs	r0, #1
    ae74:	ldr	r5, [pc, #156]	; (af14 <delay+0xb0>)
    ae76:	ldr	r6, [pc, #160]	; (af18 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ae78:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ae7c:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ae7e:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ae80:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    ae84:	cmp	r3, #0
    ae86:	bne.n	ae78 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    ae88:	ldr	r7, [pc, #144]	; (af1c <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ae8a:	mov.w	lr, #1000	; 0x3e8
    ae8e:	ldr	r0, [pc, #144]	; (af20 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    ae90:	ldr.w	ip, [r7]
    ae94:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ae96:	add.w	r7, r7, #1660944384	; 0x63000000
    ae9a:	ldr	r3, [r0, #0]
    ae9c:	rsb	r1, r1, ip
    aea0:	add.w	r7, r7, #1818624	; 0x1bc000
    aea4:	addw	r7, r7, #3711	; 0xe7f
    aea8:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    aeac:	mov	sl, r7
    aeae:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    aeb0:	lsrs	r3, r3, #18
    aeb2:	udiv	r3, r1, r3
    aeb6:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    aeba:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    aebe:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    aec0:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    aec2:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    aec6:	cmp	r3, #0
    aec8:	bne.n	aeba <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    aeca:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    aece:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    aed2:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    aed4:	mul.w	r2, lr, r2
    aed8:	rsb	r1, r1, ip
    aedc:	umull	r3, lr, sl, r3
    aee0:	rsb	r3, r8, r2
    aee4:	mov.w	r2, lr, lsr #18
    aee8:	udiv	r1, r1, r2
    aeec:	adds	r2, r1, r3
    aeee:	cmp.w	r2, #1000	; 0x3e8
    aef2:	bcc.n	af04 <delay+0xa0>
			if (--msec == 0) return;
    aef4:	subs.w	r9, r9, #1
			start += 1000;
    aef8:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    aefc:	bne.n	aeba <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    aefe:	add	sp, #12
    af00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af04:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    af06:	bl	b0dc <yield>
	}
    af0a:	ldr	r0, [sp, #4]
    af0c:	b.n	aeba <delay+0x56>
    af0e:	bx	lr
    af10:	.word	0x2000f280
    af14:	.word	0x2000d858
    af18:	.word	0x2000d854
    af1c:	.word	0xe0001004
    af20:	.word	0x20000c54

0000af24 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    af24:	push	{r4, r5, r6}
    af26:	ldr	r3, [pc, #56]	; (af60 <micros+0x3c>)
    af28:	movs	r6, #1
    af2a:	ldr	r5, [pc, #56]	; (af64 <micros+0x40>)
    af2c:	ldr	r0, [pc, #56]	; (af68 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    af2e:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    af32:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    af34:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    af36:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    af3a:	cmp	r2, #0
    af3c:	bne.n	af2e <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    af3e:	ldr	r3, [pc, #44]	; (af6c <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    af40:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    af44:	ldr	r2, [pc, #40]	; (af70 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    af46:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    af48:	ldr	r5, [pc, #40]	; (af74 <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    af4a:	ldr	r2, [r2, #0]
	return usec;
    af4c:	subs	r4, r3, r4
    af4e:	umull	r2, r3, r5, r2
    af52:	lsrs	r3, r3, #18
    af54:	udiv	r4, r4, r3
}
    af58:	mla	r0, r0, r1, r4
    af5c:	pop	{r4, r5, r6}
    af5e:	bx	lr
    af60:	.word	0x2000f280
    af64:	.word	0x2000d858
    af68:	.word	0x2000d854
    af6c:	.word	0xe0001004
    af70:	.word	0x20000c54
    af74:	.word	0x431bde83

0000af78 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    af78:	cmp	r0, #28
    af7a:	bhi.n	afa8 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    af7c:	ldr	r1, [pc, #68]	; (afc4 <analogRead+0x4c>)
    af7e:	ldrb	r3, [r1, #0]
    af80:	cbz	r3, af8e <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    af82:	ldr	r2, [pc, #68]	; (afc8 <analogRead+0x50>)
    af84:	ldr	r3, [r2, #72]	; 0x48
    af86:	ands.w	r3, r3, #128	; 0x80
    af8a:	bne.n	af84 <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    af8c:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    af8e:	ldr	r3, [pc, #60]	; (afcc <analogRead+0x54>)
    af90:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    af92:	lsls	r2, r3, #24
    af94:	bmi.n	afac <analogRead+0x34>
		ADC1_HC0 = ch;
    af96:	ldr	r2, [pc, #48]	; (afc8 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    af98:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    af9a:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    af9c:	ldr	r3, [r1, #32]
    af9e:	ldr	r2, [pc, #40]	; (afc8 <analogRead+0x50>)
    afa0:	lsls	r0, r3, #31
    afa2:	bpl.n	af9c <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    afa4:	ldr	r0, [r2, #36]	; 0x24
    afa6:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    afa8:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    afaa:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    afac:	ldr	r2, [pc, #32]	; (afd0 <analogRead+0x58>)
    afae:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    afb2:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    afb4:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    afb6:	ldr	r3, [r1, #32]
    afb8:	ldr	r2, [pc, #20]	; (afd0 <analogRead+0x58>)
    afba:	lsls	r3, r3, #31
    afbc:	bpl.n	afb6 <analogRead+0x3e>
		return ADC2_R0;
    afbe:	ldr	r0, [r2, #36]	; 0x24
    afc0:	bx	lr
    afc2:	nop
    afc4:	.word	0x2000d85c
    afc8:	.word	0x400c4000
    afcc:	.word	0x2000048c
    afd0:	.word	0x400c8000

0000afd4 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    afd4:	lsls	r0, r0, #4
    afd6:	ldr	r3, [pc, #28]	; (aff4 <digitalWrite.part.0+0x20>)
    afd8:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    afda:	ldr	r3, [r3, r0]
	mask = p->mask;
    afdc:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    afde:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    afe0:	tst	r0, r2
    afe2:	beq.n	afea <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    afe4:	cbnz	r1, afec <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    afe6:	str.w	r2, [r3, #136]	; 0x88
    afea:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    afec:	str.w	r2, [r3, #132]	; 0x84
    aff0:	bx	lr
    aff2:	nop
    aff4:	.word	0x200004a8

0000aff8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    aff8:	cmp	r0, #39	; 0x27
    affa:	bhi.n	b000 <digitalWrite+0x8>
    affc:	b.w	afd4 <digitalWrite.part.0>
    b000:	bx	lr
    b002:	nop

0000b004 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    b004:	cmp	r0, #39	; 0x27
    b006:	bhi.n	b042 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    b008:	lsls	r0, r0, #4
    b00a:	ldr	r2, [pc, #104]	; (b074 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b00c:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    b00e:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b012:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    b014:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b016:	beq.n	b044 <pinMode+0x40>
    b018:	cmp	r1, #4
    b01a:	beq.n	b044 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    b01c:	ldr	r4, [r3, #12]
    b01e:	ldr	r2, [r0, #4]
    b020:	bic.w	r2, r2, r4
    b024:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b026:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    b028:	cbz	r1, b066 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    b02a:	cmp	r1, #2
    b02c:	beq.n	b06c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    b02e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b030:	ldr	r3, [r3, #4]
}
    b032:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    b036:	ite	eq
    b038:	ldreq	r1, [pc, #60]	; (b078 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    b03a:	ldrne	r1, [pc, #64]	; (b07c <pinMode+0x78>)
    b03c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    b03e:	movs	r2, #21
    b040:	str	r2, [r3, #0]
}
    b042:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b044:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    b046:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    b048:	ldr	r4, [r0, #4]
    b04a:	orr.w	r2, r2, r4
    b04e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b050:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    b052:	beq.n	b066 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    b054:	movw	r1, #2104	; 0x838
    b058:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b05a:	ldr	r3, [r3, #4]
    b05c:	movs	r2, #21
}
    b05e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    b062:	str	r2, [r3, #0]
}
    b064:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    b066:	movs	r1, #56	; 0x38
    b068:	str	r1, [r2, #0]
    b06a:	b.n	b05a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b06c:	ldr	r1, [pc, #16]	; (b080 <pinMode+0x7c>)
    b06e:	str	r1, [r2, #0]
    b070:	b.n	b05a <pinMode+0x56>
    b072:	nop
    b074:	.word	0x200004a8
    b078:	.word	0x00013038
    b07c:	.word	0x00010038
    b080:	.word	0x0001f038

0000b084 <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b084:	ldr	r2, [pc, #72]	; (b0d0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b086:	ldr	r3, [pc, #76]	; (b0d4 <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b088:	ldr.w	r0, [r2, #544]	; 0x220
    b08c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b090:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b092:	push	{r4, lr}
    b094:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b096:	bhi.n	b09e <usb_init_serialnumber+0x1a>
    b098:	add.w	r0, r0, r0, lsl #2
    b09c:	lsls	r0, r0, #1
    b09e:	ldr	r4, [pc, #56]	; (b0d8 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    b0a0:	add	r1, sp, #4
    b0a2:	movs	r2, #10
    b0a4:	bl	b550 <ultoa>
    b0a8:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    b0aa:	movs	r3, #0
    b0ac:	mov	r0, r4
		char c = buf[i];
    b0ae:	ldrb.w	r2, [r1], #1
    b0b2:	adds	r3, #1
		if (!c) break;
    b0b4:	cbz	r2, b0c6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b0b6:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    b0b8:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    b0bc:	bne.n	b0ae <usb_init_serialnumber+0x2a>
    b0be:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b0c0:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    b0c2:	add	sp, #16
    b0c4:	pop	{r4, pc}
    b0c6:	lsls	r3, r3, #1
    b0c8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b0ca:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    b0cc:	add	sp, #16
    b0ce:	pop	{r4, pc}
    b0d0:	.word	0x401f4400
    b0d4:	.word	0x0098967f
    b0d8:	.word	0x20000cf0

0000b0dc <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b0dc:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    b0de:	ldr	r4, [pc, #132]	; (b164 <yield+0x88>)
    b0e0:	ldrb	r3, [r4, #0]
    b0e2:	cbnz	r3, b106 <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b0e4:	ldr	r3, [pc, #128]	; (b168 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b0e6:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b0e8:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b0ea:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b0ec:	cbnz	r3, b136 <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    b0ee:	ldr	r3, [pc, #124]	; (b16c <yield+0x90>)
    b0f0:	ldrb	r3, [r3, #0]
    b0f2:	cmp	r3, #0
    b0f4:	bne.n	b14a <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    b0f6:	ldr	r3, [pc, #120]	; (b170 <yield+0x94>)

	running = 0;
    b0f8:	movs	r1, #0
    b0fa:	ldr	r2, [r3, #0]
    b0fc:	strb	r1, [r4, #0]
    b0fe:	cbz	r2, b106 <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b100:	mrs	r2, IPSR
		if (ipsr != 0) return;
    b104:	cbz	r2, b108 <yield+0x2c>
    b106:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b108:	mrs	r0, PRIMASK
		__disable_irq();
    b10c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    b10e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    b110:	cbz	r2, b150 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    b112:	ldr	r4, [pc, #96]	; (b174 <yield+0x98>)
    b114:	ldrb	r1, [r4, #0]
    b116:	cbnz	r1, b150 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b118:	movs	r6, #1
		firstYield = first->_next;
    b11a:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b11c:	strb	r6, [r4, #0]
		firstYield = first->_next;
    b11e:	str	r5, [r3, #0]
		if (firstYield) {
    b120:	cbz	r5, b158 <yield+0x7c>
			firstYield->_prev = nullptr;
    b122:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b124:	cbnz	r0, b128 <yield+0x4c>
    b126:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b128:	movs	r5, #0
		(*(first->_function))(*first);
    b12a:	ldr	r3, [r2, #8]
    b12c:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b12e:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    b130:	blx	r3
		runningFromYield = false;
    b132:	strb	r5, [r4, #0]
    b134:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b136:	bl	a288 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b13a:	cmp	r0, #0
    b13c:	beq.n	b0ee <yield+0x12>
    b13e:	bl	b44c <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    b142:	ldr	r3, [pc, #40]	; (b16c <yield+0x90>)
    b144:	ldrb	r3, [r3, #0]
    b146:	cmp	r3, #0
    b148:	beq.n	b0f6 <yield+0x1a>
    b14a:	bl	b858 <HardwareSerial::processSerialEvents()>
    b14e:	b.n	b0f6 <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b150:	cmp	r0, #0
    b152:	bne.n	b106 <yield+0x2a>
    b154:	cpsie	i
    b156:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b158:	ldr	r3, [pc, #28]	; (b178 <yield+0x9c>)
    b15a:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b15c:	cmp	r0, #0
    b15e:	bne.n	b128 <yield+0x4c>
    b160:	b.n	b126 <yield+0x4a>
    b162:	nop
    b164:	.word	0x2000d85d
    b168:	.word	0x20000d06
    b16c:	.word	0x2000d8ac
    b170:	.word	0x2000d874
    b174:	.word	0x2000d878
    b178:	.word	0x2000d870

0000b17c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    b17c:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    b17e:	ldr	r4, [pc, #100]	; (b1e4 <random(unsigned long) [clone .part.0]+0x68>)
    b180:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    b182:	cbz	r3, b1c8 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    b184:	ldr	r1, [pc, #96]	; (b1e8 <random(unsigned long) [clone .part.0]+0x6c>)
    b186:	asrs	r5, r3, #31
    b188:	ldr.w	lr, [pc, #104]	; b1f4 <random(unsigned long) [clone .part.0]+0x78>
    b18c:	smull	r6, r7, r3, r1
    b190:	ldr	r6, [pc, #88]	; (b1ec <random(unsigned long) [clone .part.0]+0x70>)
    b192:	smull	r2, r1, r1, r3
    b196:	adds	r2, r3, r7
    b198:	add	r1, r3
    b19a:	rsb	r2, r5, r2, asr #16
    b19e:	rsb	r1, r5, r1, asr #16
    b1a2:	movw	r5, #16807	; 0x41a7
    b1a6:	mls	r2, lr, r2, r3
    b1aa:	mul.w	r1, r6, r1
    b1ae:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    b1b2:	cmp	r3, #0
    b1b4:	bge.n	b1d6 <random(unsigned long) [clone .part.0]+0x5a>
    b1b6:	mvn.w	r2, #2147483648	; 0x80000000
    b1ba:	add	r2, r3
    b1bc:	udiv	r3, r2, r0
	seed = x;
    b1c0:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b1c2:	mls	r0, r0, r3, r2
    b1c6:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    b1c8:	ldr	r2, [pc, #36]	; (b1f0 <random(unsigned long) [clone .part.0]+0x74>)
    b1ca:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b1ce:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b1d0:	mls	r0, r0, r3, r2
    b1d4:	pop	{r4, r5, r6, r7, pc}
    b1d6:	mov	r2, r3
    b1d8:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b1dc:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b1de:	mls	r0, r0, r3, r2
    b1e2:	pop	{r4, r5, r6, r7, pc}
    b1e4:	.word	0x2000d860
    b1e8:	.word	0x834e0b5f
    b1ec:	.word	0xfffff4ec
    b1f0:	.word	0x1f0cce42
    b1f4:	.word	0x0001f31d

0000b1f8 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    b1f8:	cbz	r0, b1fe <randomSeed(unsigned long)+0x6>
    b1fa:	ldr	r3, [pc, #4]	; (b200 <randomSeed(unsigned long)+0x8>)
    b1fc:	str	r0, [r3, #0]
    b1fe:	bx	lr
    b200:	.word	0x2000d860

0000b204 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    b204:	cbz	r0, b20a <random(unsigned long)+0x6>
    b206:	b.w	b17c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    b20a:	bx	lr

0000b20c <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    b20c:	cmp	r0, r1
    b20e:	bge.n	b21e <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    b210:	push	{r4, lr}
    b212:	mov	r4, r0
    b214:	subs	r0, r1, r0
    b216:	bl	b17c <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    b21a:	add	r0, r4
}
    b21c:	pop	{r4, pc}
    b21e:	bx	lr

0000b220 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    b220:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b222:	mrs	r2, PRIMASK
		__disable_irq();
    b226:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b228:	ldrb	r3, [r0, #29]
    b22a:	cbnz	r3, b23a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b22c:	ldrb	r1, [r0, #28]
    b22e:	cmp	r1, #1
    b230:	beq.n	b244 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b232:	cmp	r1, #3
    b234:	beq.n	b258 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b236:	movs	r3, #1
    b238:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b23a:	cbnz	r2, b23e <EventResponder::triggerEventNotImmediate()+0x1e>
    b23c:	cpsie	i
	}
	enableInterrupts(irq);
}
    b23e:	ldr.w	r4, [sp], #4
    b242:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b244:	ldr	r4, [pc, #68]	; (b28c <EventResponder::triggerEventNotImmediate()+0x6c>)
    b246:	ldr	r1, [r4, #0]
    b248:	cbz	r1, b274 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b24a:	ldr	r1, [pc, #68]	; (b290 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b24c:	str	r3, [r0, #20]
				_prev = lastYield;
    b24e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b250:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b252:	str	r3, [r0, #24]
				_prev->_next = this;
    b254:	str	r0, [r3, #20]
    b256:	b.n	b236 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b258:	ldr	r4, [pc, #56]	; (b294 <EventResponder::triggerEventNotImmediate()+0x74>)
    b25a:	ldr	r1, [r4, #0]
    b25c:	cbz	r1, b280 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b25e:	ldr	r1, [pc, #56]	; (b298 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b260:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b262:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b264:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b266:	str	r3, [r0, #24]
				_prev->_next = this;
    b268:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b26a:	ldr	r3, [pc, #48]	; (b29c <EventResponder::triggerEventNotImmediate()+0x7c>)
    b26c:	mov.w	r1, #268435456	; 0x10000000
    b270:	str	r1, [r3, #0]
    b272:	b.n	b236 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b274:	ldr	r3, [pc, #24]	; (b290 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b276:	str	r1, [r0, #20]
				_prev = nullptr;
    b278:	str	r1, [r0, #24]
				firstYield = this;
    b27a:	str	r0, [r4, #0]
				lastYield = this;
    b27c:	str	r0, [r3, #0]
    b27e:	b.n	b236 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b280:	ldr	r3, [pc, #20]	; (b298 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b282:	str	r1, [r0, #20]
				_prev = nullptr;
    b284:	str	r1, [r0, #24]
				firstInterrupt = this;
    b286:	str	r0, [r4, #0]
				lastInterrupt = this;
    b288:	str	r0, [r3, #0]
    b28a:	b.n	b26a <EventResponder::triggerEventNotImmediate()+0x4a>
    b28c:	.word	0x2000d874
    b290:	.word	0x2000d870
    b294:	.word	0x2000d864
    b298:	.word	0x2000d868
    b29c:	.word	0xe000ed04

0000b2a0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    b2a0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b2a2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b2a4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b2a6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b2a8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b2aa:	beq.n	b2b4 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    b2ac:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b2b0:	b.w	b220 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b2b4:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    b2b6:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b2ba:	bx	r3

0000b2bc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b2bc:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b2be:	mrs	r1, PRIMASK
		__disable_irq();
    b2c2:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b2c4:	ldr	r4, [pc, #48]	; (b2f8 <EventResponder::runFromInterrupt()+0x3c>)
    b2c6:	ldr	r3, [r4, #0]
		if (first) {
    b2c8:	cbz	r3, b2ee <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b2ca:	ldr	r6, [pc, #48]	; (b2fc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b2cc:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b2ce:	ldr	r2, [r3, #20]
    b2d0:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b2d2:	cbz	r2, b2f4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b2d4:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b2d6:	cbnz	r1, b2da <EventResponder::runFromInterrupt()+0x1e>
    b2d8:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b2da:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b2dc:	mov	r0, r3
    b2de:	ldr	r3, [r3, #8]
    b2e0:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b2e2:	mrs	r1, PRIMASK
		__disable_irq();
    b2e6:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b2e8:	ldr	r3, [r4, #0]
		if (first) {
    b2ea:	cmp	r3, #0
    b2ec:	bne.n	b2ce <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b2ee:	cbnz	r1, b2f2 <EventResponder::runFromInterrupt()+0x36>
    b2f0:	cpsie	i
    b2f2:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b2f4:	str	r2, [r6, #0]
    b2f6:	b.n	b2d6 <EventResponder::runFromInterrupt()+0x1a>
    b2f8:	.word	0x2000d864
    b2fc:	.word	0x2000d868

0000b300 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b300:	b.w	b2bc <EventResponder::runFromInterrupt()>

0000b304 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    b304:	ldr	r2, [pc, #96]	; (b368 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    b306:	push	{r4, r5}
	if (listActive == nullptr) {
    b308:	ldr	r4, [r2, #0]
    b30a:	cmp	r4, #0
    b30c:	beq.n	b360 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    b30e:	ldr	r3, [r0, #0]
    b310:	ldr	r1, [r4, #0]
    b312:	cmp	r3, r1
    b314:	bcs.n	b336 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b316:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    b318:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    b31a:	str	r4, [r0, #8]
		_prev = nullptr;
    b31c:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b31e:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    b320:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    b322:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b324:	movs	r3, #2
}
    b326:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b328:	strb	r3, [r0, #20]
}
    b32a:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    b32c:	str	r3, [r0, #0]
    b32e:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    b330:	ldr	r1, [r2, #0]
    b332:	cmp	r3, r1
    b334:	bcc.n	b348 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b336:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b338:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b33a:	cmp	r2, #0
    b33c:	bne.n	b32c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    b33e:	str	r2, [r0, #8]
		_prev = timer;
    b340:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b342:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    b344:	str	r0, [r4, #8]
    b346:	b.n	b324 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b348:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    b34a:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    b34c:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    b34e:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b350:	str	r5, [r0, #12]
				timer->_prev = this;
    b352:	str	r0, [r4, #12]
				_prev->_next = this;
    b354:	ldr	r1, [r0, #12]
    b356:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    b358:	str	r3, [r4, #0]
				_state = TimerActive;
    b35a:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    b35c:	pop	{r4, r5}
    b35e:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    b360:	str	r4, [r0, #8]
		_prev = nullptr;
    b362:	str	r4, [r0, #12]
		listActive = this;
    b364:	str	r0, [r2, #0]
    b366:	b.n	b324 <MillisTimer::addToActiveList()+0x20>
    b368:	.word	0x2000d86c

0000b36c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    b36c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    b36e:	ldr	r6, [pc, #136]	; (b3f8 <MillisTimer::runFromTimer()+0x8c>)
    b370:	ldr	r4, [r6, #0]
	while (timer) {
    b372:	cbz	r4, b3c0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b374:	ldr	r3, [r4, #0]
    b376:	cmp	r3, #0
    b378:	bne.n	b3f0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    b37a:	mov	r5, r3
    b37c:	ldr	r7, [pc, #124]	; (b3fc <MillisTimer::runFromTimer()+0x90>)
    b37e:	b.n	b38a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    b380:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b382:	cbz	r4, b3c0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b384:	ldr	r3, [r4, #0]
    b386:	cmp	r3, #0
    b388:	bne.n	b3f0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    b38a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    b38c:	cbz	r3, b390 <MillisTimer::runFromTimer()+0x24>
    b38e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    b390:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    b392:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b394:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    b396:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b398:	ldr	r3, [r3, #0]
    b39a:	cmp	r3, r7
    b39c:	bne.n	b3e2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b39e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b3a0:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b3a2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b3a4:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    b3a6:	beq.n	b3ea <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b3a8:	bl	b220 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    b3ac:	ldr	r3, [r4, #4]
    b3ae:	cmp	r3, #0
    b3b0:	beq.n	b380 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    b3b2:	str	r3, [r4, #0]
				timer->addToActiveList();
    b3b4:	mov	r0, r4
    b3b6:	bl	b304 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    b3ba:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b3bc:	cmp	r4, #0
    b3be:	bne.n	b384 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b3c0:	mrs	r3, PRIMASK
		__disable_irq();
    b3c4:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b3c6:	ldr	r2, [pc, #56]	; (b400 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b3c8:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b3ca:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b3cc:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    b3ce:	cbnz	r3, b3d2 <MillisTimer::runFromTimer()+0x66>
    b3d0:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    b3d2:	cbz	r0, b3e0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    b3d4:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    b3d6:	bl	b304 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    b3da:	mov	r0, r4
    b3dc:	cmp	r0, #0
    b3de:	bne.n	b3d4 <MillisTimer::runFromTimer()+0x68>
    b3e0:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b3e2:	mov	r2, r4
    b3e4:	movs	r1, #0
    b3e6:	blx	r3
    b3e8:	b.n	b3ac <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b3ea:	ldr	r3, [r0, #8]
    b3ec:	blx	r3
    b3ee:	b.n	b3ac <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    b3f0:	subs	r3, #1
    b3f2:	str	r3, [r4, #0]
			break;
    b3f4:	b.n	b3c0 <MillisTimer::runFromTimer()+0x54>
    b3f6:	nop
    b3f8:	.word	0x2000d86c
    b3fc:	.word	0x0000b2a1
    b400:	.word	0x2000d87c

0000b404 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b404:	ldr	r2, [pc, #16]	; (b418 <systick_isr+0x14>)
    b406:	ldr	r3, [pc, #20]	; (b41c <systick_isr+0x18>)
    b408:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b40a:	ldr	r2, [pc, #20]	; (b420 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b40c:	str	r1, [r3, #0]
	systick_millis_count++;
    b40e:	ldr	r3, [r2, #0]
    b410:	adds	r3, #1
    b412:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    b414:	b.w	b36c <MillisTimer::runFromTimer()>
    b418:	.word	0xe0001004
    b41c:	.word	0x2000d854
    b420:	.word	0x2000d858

0000b424 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b424:	b.w	a29c <usb_serial_flush_input>

0000b428 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b428:	b.w	a264 <usb_serial_peekchar>

0000b42c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    b42c:	b.w	a218 <usb_serial_getchar>

0000b430 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b430:	b.w	a288 <usb_serial_available>

0000b434 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b434:	b.w	a368 <usb_serial_flush_output>

0000b438 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b438:	b.w	a31c <usb_serial_write_buffer_free>

0000b43c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b43c:	mov	r0, r1
    b43e:	mov	r1, r2
    b440:	b.w	a304 <usb_serial_write>

0000b444 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b444:	mov	r0, r1
    b446:	b.w	a2d8 <usb_serial_putchar>
    b44a:	nop

0000b44c <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    b44c:	ldr	r3, [pc, #4]	; (b454 <serialEvent()+0x8>)
    b44e:	movs	r2, #0
    b450:	strb	r2, [r3, #0]
    b452:	bx	lr
    b454:	.word	0x20000d06

0000b458 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b458:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    b45a:	ldr	r4, [pc, #24]	; (b474 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    b45c:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    b45e:	ldr	r3, [r0, #0]
    b460:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b462:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    b464:	add	r1, sp, #4
    b466:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    b468:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    b46c:	blx	r3
}
    b46e:	add	sp, #8
    b470:	pop	{r4, pc}
    b472:	nop
    b474:	.word	0x200007bc

0000b478 <operator new(unsigned int)>:
    b478:	b.w	bb94 <malloc>

0000b47c <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    b47c:	movs	r0, #4
    b47e:	mov	r1, lr
    b480:	tst	r0, r1
    b482:	beq.n	b48c <_MSP>
    b484:	mrs	r0, PSP
    b488:	b.w	b494 <HardFault_HandlerC>

0000b48c <_MSP>:
    b48c:	mrs	r0, MSP
    b490:	b.w	b494 <HardFault_HandlerC>

0000b494 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b494:	ldr	r3, [pc, #108]	; (b504 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    b496:	movs	r1, #5
    b498:	ldr	r2, [pc, #108]	; (b508 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    b49a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    b49c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    b49e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    b4a2:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    b4a4:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    b4a8:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b4aa:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    b4ac:	ldr	r4, [pc, #92]	; (b50c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b4ae:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    b4b0:	ldr	r0, [pc, #92]	; (b510 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    b4b2:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    b4b4:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    b4b8:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    b4bc:	ldr	r3, [r4, #0]
    b4be:	cmp	r3, r0
    b4c0:	bls.n	b4c8 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    b4c2:	ldr	r0, [pc, #80]	; (b514 <HardFault_HandlerC+0x80>)
    b4c4:	bl	a3d4 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    b4c8:	ldr	r5, [pc, #56]	; (b504 <HardFault_HandlerC+0x70>)
    b4ca:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    b4cc:	movs	r0, #0
    b4ce:	ldr	r2, [pc, #72]	; (b518 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    b4d0:	ldr	r1, [pc, #72]	; (b51c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    b4d2:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    b4d6:	str	r0, [sp, #4]
    b4d8:	ldr	r3, [sp, #4]
    b4da:	cmp	r3, r2
    b4dc:	bhi.n	b4ea <HardFault_HandlerC+0x56>
    b4de:	ldr	r3, [sp, #4]
    b4e0:	adds	r3, #1
    b4e2:	str	r3, [sp, #4]
    b4e4:	ldr	r3, [sp, #4]
    b4e6:	cmp	r3, r2
    b4e8:	bls.n	b4de <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    b4ea:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    b4ee:	str	r0, [sp, #4]
    b4f0:	ldr	r3, [sp, #4]
    b4f2:	cmp	r3, r1
    b4f4:	bhi.n	b4d2 <HardFault_HandlerC+0x3e>
    b4f6:	ldr	r3, [sp, #4]
    b4f8:	adds	r3, #1
    b4fa:	str	r3, [sp, #4]
    b4fc:	ldr	r3, [sp, #4]
    b4fe:	cmp	r3, r1
    b500:	bls.n	b4f6 <HardFault_HandlerC+0x62>
    b502:	b.n	b4d2 <HardFault_HandlerC+0x3e>
    b504:	.word	0x401bc000
    b508:	.word	0x401f8000
    b50c:	.word	0x20000c54
    b510:	.word	0x23c345ff
    b514:	.word	0x11e1a300
    b518:	.word	0x000f423f
    b51c:	.word	0x0089543f

0000b520 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    b520:	ldr	r2, [pc, #36]	; (b548 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    b522:	push	{r3, lr}
        char *prev = __brkval;
    b524:	ldr	r3, [r2, #0]
        if (incr != 0) {
    b526:	cbz	r0, b532 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    b528:	add	r0, r3
    b52a:	ldr	r1, [pc, #32]	; (b54c <_sbrk+0x2c>)
    b52c:	cmp	r0, r1
    b52e:	bhi.n	b536 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    b530:	str	r0, [r2, #0]
        }
        return prev;
}
    b532:	mov	r0, r3
    b534:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b536:	bl	bb38 <__errno>
    b53a:	movs	r2, #12
                        return (void *)-1;
    b53c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    b540:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b542:	mov	r0, r3
    b544:	pop	{r3, pc}
    b546:	nop
    b548:	.word	0x20000d18
    b54c:	.word	0x20280000

0000b550 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b550:	push	{r4, r5, r6, r7}
    b552:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    b554:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b556:	mov	r7, r6
    b558:	b.n	b55c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    b55a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    b55c:	udiv	r3, r0, r2
    b560:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b564:	add.w	r4, r0, #55	; 0x37
    b568:	cmp	r0, #9
    b56a:	add.w	r0, r0, #48	; 0x30
    b56e:	uxtb	r4, r4
    b570:	it	ls
    b572:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    b574:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b576:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    b57a:	cmp	r3, #0
    b57c:	bne.n	b55a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    b57e:	adds	r2, r1, r5
    b580:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    b582:	cbz	r5, b598 <ultoa+0x48>
    b584:	adds	r3, #1
		t = buf[j];
    b586:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    b58a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b58c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    b58e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b590:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    b592:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    b596:	blt.n	b584 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b598:	mov	r0, r1
    b59a:	pop	{r4, r5, r6, r7}
    b59c:	bx	lr
    b59e:	nop

0000b5a0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b5a0:	ldr	r0, [pc, #656]	; (b834 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b5a2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b5a6:	ldr	r3, [pc, #656]	; (b838 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b5a8:	ldr	r2, [r0, #120]	; 0x78
    b5aa:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    b5ae:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b5b0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b5b2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b5b4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b5b8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b5bc:	ldr	r4, [pc, #636]	; (b83c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b5be:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b5c2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b5c4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b5c8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b5ca:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b5cc:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b5d0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b5d4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b5d8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b5dc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b5e0:	ldrh.w	r0, [r3, #392]	; 0x188
    b5e4:	uxth	r0, r0
    b5e6:	orr.w	r0, r0, #240	; 0xf0
    b5ea:	strh.w	r0, [r3, #392]	; 0x188
    b5ee:	add.w	r0, r1, r1, lsl #1
    b5f2:	ldr	r3, [pc, #580]	; (b838 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    b5f4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b5f6:	movs	r5, #0
    b5f8:	lsls	r0, r0, #5
    b5fa:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b5fc:	cmp	r1, #4
    b5fe:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b600:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b604:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    b606:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b608:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b60a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b60c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b60e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b610:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b612:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b614:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b616:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b618:	bne.n	b5ee <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b61a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b61e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b622:	ldr	r3, [pc, #540]	; (b840 <pwm_init+0x2a0>)
    b624:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b628:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b62a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b62c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b630:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b632:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b636:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b63a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b63e:	ldrh.w	r0, [r4, #392]	; 0x188
    b642:	uxth	r0, r0
    b644:	orr.w	r0, r0, #3840	; 0xf00
    b648:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b64c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b650:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b654:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b658:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b65c:	ldrh.w	r0, [r3, #392]	; 0x188
    b660:	uxth	r0, r0
    b662:	orr.w	r0, r0, #240	; 0xf0
    b666:	strh.w	r0, [r3, #392]	; 0x188
    b66a:	add.w	r0, r1, r1, lsl #1
    b66e:	ldr	r3, [pc, #464]	; (b840 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    b670:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b672:	movs	r5, #0
    b674:	lsls	r0, r0, #5
    b676:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b678:	cmp	r1, #4
    b67a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b67c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b67e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b682:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b684:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b686:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b688:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b68a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b68c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b68e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b690:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b692:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b694:	bne.n	b66a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b696:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b69a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b69e:	ldr	r3, [pc, #420]	; (b844 <pwm_init+0x2a4>)
    b6a0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b6a4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b6a6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b6a8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b6ac:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b6ae:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b6b2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b6b6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b6ba:	ldrh.w	r0, [r4, #392]	; 0x188
    b6be:	uxth	r0, r0
    b6c0:	orr.w	r0, r0, #3840	; 0xf00
    b6c4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b6c8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b6cc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b6d0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b6d4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b6d8:	ldrh.w	r0, [r3, #392]	; 0x188
    b6dc:	uxth	r0, r0
    b6de:	orr.w	r0, r0, #240	; 0xf0
    b6e2:	strh.w	r0, [r3, #392]	; 0x188
    b6e6:	add.w	r0, r1, r1, lsl #1
    b6ea:	ldr	r3, [pc, #344]	; (b844 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    b6ec:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b6ee:	movs	r5, #0
    b6f0:	lsls	r0, r0, #5
    b6f2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b6f4:	cmp	r1, #4
    b6f6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b6f8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b6fa:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b6fe:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b700:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b702:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b704:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b706:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    b708:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b70a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b70c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b70e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b710:	bne.n	b6e6 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b712:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b716:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b71a:	ldr	r3, [pc, #300]	; (b848 <pwm_init+0x2a8>)
    b71c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b720:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b722:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b724:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    b728:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b72a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b72e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b732:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b736:	ldrh.w	r0, [r4, #392]	; 0x188
    b73a:	uxth	r0, r0
    b73c:	orr.w	r0, r0, #3840	; 0xf00
    b740:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b744:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b748:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    b74c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    b750:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b754:	ldrh.w	r0, [r3, #392]	; 0x188
    b758:	uxth	r0, r0
    b75a:	orr.w	r0, r0, #240	; 0xf0
    b75e:	strh.w	r0, [r3, #392]	; 0x188
    b762:	add.w	r0, r1, r1, lsl #1
    b766:	ldr	r3, [pc, #224]	; (b848 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    b768:	adds	r1, #1
    b76a:	lsls	r0, r0, #5
    b76c:	mov	r4, r3
    b76e:	cmp	r1, #4
    b770:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b772:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b774:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b778:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b77a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b77c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b77e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b780:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    b782:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b784:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b786:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b788:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    b78a:	bne.n	b762 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b78c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b790:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b792:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b794:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b798:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b79a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b79e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b7a0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b7a4:	orrs	r3, r7
    b7a6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b7aa:	ldrh.w	r3, [r4, #392]	; 0x188
    b7ae:	uxth	r3, r3
    b7b0:	orr.w	r3, r3, #3840	; 0xf00
    b7b4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b7b8:	lsls	r0, r2, #5
    b7ba:	ldr	r3, [pc, #144]	; (b84c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b7bc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b7be:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b7c0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b7c2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b7c4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b7c6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b7c8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b7ca:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b7ce:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b7d0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b7d2:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b7d4:	bne.n	b7b8 <pwm_init+0x218>
    b7d6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b7d8:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b7da:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b7de:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b7e2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b7e4:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b7e8:	lsls	r0, r2, #5
    b7ea:	ldr	r3, [pc, #100]	; (b850 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b7ec:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b7ee:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b7f0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b7f2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b7f4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b7f6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b7f8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b7fa:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b7fc:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b7fe:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b800:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b802:	bne.n	b7e8 <pwm_init+0x248>
    b804:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b806:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b808:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b80c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b810:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b812:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    b816:	lsls	r0, r2, #5
    b818:	ldr	r3, [pc, #56]	; (b854 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b81a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b81c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b81e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    b820:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    b822:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b824:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b826:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b828:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b82a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    b82c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b82e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    b830:	bne.n	b816 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b832:	pop	{r4, r5, r6, r7, pc}
    b834:	.word	0x400fc000
    b838:	.word	0x403dc000
    b83c:	.word	0xfc030000
    b840:	.word	0x403e0000
    b844:	.word	0x403e4000
    b848:	.word	0x403e8000
    b84c:	.word	0x401dc000
    b850:	.word	0x401e0000
    b854:	.word	0x401e4000

0000b858 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    b858:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    b85a:	ldr	r3, [pc, #28]	; (b878 <HardwareSerial::processSerialEvents()+0x20>)
    b85c:	ldrb	r4, [r3, #0]
    b85e:	cbz	r4, b874 <HardwareSerial::processSerialEvents()+0x1c>
    b860:	ldr	r5, [pc, #24]	; (b87c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    b862:	ldr.w	r3, [r5, #4]!
    b866:	cmp	r3, #0
    b868:	beq.n	b862 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    b86a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    b86c:	subs	r3, r4, #1
    b86e:	ands.w	r4, r3, #255	; 0xff
    b872:	bne.n	b862 <HardwareSerial::processSerialEvents()+0xa>
    b874:	pop	{r3, r4, r5, pc}
    b876:	nop
    b878:	.word	0x2000d8ac
    b87c:	.word	0x2000d88c

0000b880 <sqrt>:
    b880:	push	{lr}
    b882:	vpush	{d8}
    b886:	vmov.f64	d8, d0
    b88a:	sub	sp, #44	; 0x2c
    b88c:	bl	b928 <__ieee754_sqrt>
    b890:	ldr	r3, [pc, #140]	; (b920 <sqrt+0xa0>)
    b892:	ldrsb.w	r3, [r3]
    b896:	adds	r2, r3, #1
    b898:	beq.n	b8b2 <sqrt+0x32>
    b89a:	vcmp.f64	d8, d8
    b89e:	vmrs	APSR_nzcv, fpscr
    b8a2:	bvs.n	b8b2 <sqrt+0x32>
    b8a4:	vldr	d7, [pc, #112]	; b918 <sqrt+0x98>
    b8a8:	vcmpe.f64	d8, d7
    b8ac:	vmrs	APSR_nzcv, fpscr
    b8b0:	bmi.n	b8bc <sqrt+0x3c>
    b8b2:	add	sp, #44	; 0x2c
    b8b4:	vpop	{d8}
    b8b8:	ldr.w	pc, [sp], #4
    b8bc:	movs	r2, #1
    b8be:	ldr	r1, [pc, #100]	; (b924 <sqrt+0xa4>)
    b8c0:	str	r2, [sp, #0]
    b8c2:	movs	r2, #0
    b8c4:	vstr	d8, [sp, #16]
    b8c8:	vstr	d8, [sp, #8]
    b8cc:	str	r1, [sp, #4]
    b8ce:	str	r2, [sp, #32]
    b8d0:	cbz	r3, b8f8 <sqrt+0x78>
    b8d2:	vdiv.f64	d6, d7, d7
    b8d6:	cmp	r3, #2
    b8d8:	vstr	d6, [sp, #24]
    b8dc:	bne.n	b8fc <sqrt+0x7c>
    b8de:	bl	bb38 <__errno>
    b8e2:	movs	r3, #33	; 0x21
    b8e4:	str	r3, [r0, #0]
    b8e6:	ldr	r3, [sp, #32]
    b8e8:	cbnz	r3, b908 <sqrt+0x88>
    b8ea:	vldr	d0, [sp, #24]
    b8ee:	add	sp, #44	; 0x2c
    b8f0:	vpop	{d8}
    b8f4:	ldr.w	pc, [sp], #4
    b8f8:	vstr	d7, [sp, #24]
    b8fc:	mov	r0, sp
    b8fe:	bl	baac <matherr>
    b902:	cmp	r0, #0
    b904:	bne.n	b8e6 <sqrt+0x66>
    b906:	b.n	b8de <sqrt+0x5e>
    b908:	bl	bb38 <__errno>
    b90c:	ldr	r3, [sp, #32]
    b90e:	str	r3, [r0, #0]
    b910:	b.n	b8ea <sqrt+0x6a>
    b912:	nop
    b914:	nop.w
	...
    b920:	.word	0x20000d1c
    b924:	.word	0x200007c0

0000b928 <__ieee754_sqrt>:
    b928:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b92c:	sub	sp, #8
    b92e:	vstr	d0, [sp]
    b932:	ldr	r1, [pc, #372]	; (baa8 <__ieee754_sqrt+0x180>)
    b934:	ldr	r3, [sp, #4]
    b936:	ldr	r0, [sp, #0]
    b938:	mov	r4, r1
    b93a:	ands	r1, r3
    b93c:	cmp	r1, r4
    b93e:	beq.w	ba72 <__ieee754_sqrt+0x14a>
    b942:	cmp	r3, #0
    b944:	mov	r2, r0
    b946:	ble.n	ba38 <__ieee754_sqrt+0x110>
    b948:	asrs	r7, r3, #20
    b94a:	beq.w	ba52 <__ieee754_sqrt+0x12a>
    b94e:	subw	r7, r7, #1023	; 0x3ff
    b952:	ubfx	r3, r3, #0, #20
    b956:	lsls	r1, r7, #31
    b958:	orr.w	r3, r3, #1048576	; 0x100000
    b95c:	bmi.n	ba2e <__ieee754_sqrt+0x106>
    b95e:	add.w	r1, r3, r2, lsr #31
    b962:	movs	r6, #0
    b964:	add	r3, r1
    b966:	asrs	r7, r7, #1
    b968:	lsls	r2, r2, #1
    b96a:	mov	lr, r6
    b96c:	movs	r0, #22
    b96e:	mov.w	r1, #2097152	; 0x200000
    b972:	add.w	r4, lr, r1
    b976:	cmp	r4, r3
    b978:	mov.w	r5, r2, lsr #31
    b97c:	mov.w	r2, r2, lsl #1
    b980:	bgt.n	b98a <__ieee754_sqrt+0x62>
    b982:	subs	r3, r3, r4
    b984:	add.w	lr, r4, r1
    b988:	add	r6, r1
    b98a:	subs	r0, #1
    b98c:	add.w	r3, r5, r3, lsl #1
    b990:	mov.w	r1, r1, lsr #1
    b994:	bne.n	b972 <__ieee754_sqrt+0x4a>
    b996:	mov	ip, r0
    b998:	movs	r4, #32
    b99a:	mov.w	r1, #2147483648	; 0x80000000
    b99e:	b.n	b9b4 <__ieee754_sqrt+0x8c>
    b9a0:	beq.n	b9e4 <__ieee754_sqrt+0xbc>
    b9a2:	add.w	r5, r3, r2, lsr #31
    b9a6:	subs	r4, #1
    b9a8:	mov.w	r1, r1, lsr #1
    b9ac:	add	r3, r5
    b9ae:	mov.w	r2, r2, lsl #1
    b9b2:	beq.n	b9f6 <__ieee754_sqrt+0xce>
    b9b4:	cmp	lr, r3
    b9b6:	add.w	r5, r1, ip
    b9ba:	bge.n	b9a0 <__ieee754_sqrt+0x78>
    b9bc:	cmp	r5, #0
    b9be:	add.w	ip, r5, r1
    b9c2:	blt.n	b9d8 <__ieee754_sqrt+0xb0>
    b9c4:	mov	r8, lr
    b9c6:	cmp	r5, r2
    b9c8:	rsb	r3, lr, r3
    b9cc:	bls.n	b9d0 <__ieee754_sqrt+0xa8>
    b9ce:	subs	r3, #1
    b9d0:	subs	r2, r2, r5
    b9d2:	add	r0, r1
    b9d4:	mov	lr, r8
    b9d6:	b.n	b9a2 <__ieee754_sqrt+0x7a>
    b9d8:	cmp.w	ip, #0
    b9dc:	blt.n	b9c4 <__ieee754_sqrt+0x9c>
    b9de:	add.w	r8, lr, #1
    b9e2:	b.n	b9c6 <__ieee754_sqrt+0x9e>
    b9e4:	cmp	r5, r2
    b9e6:	bhi.n	ba1e <__ieee754_sqrt+0xf6>
    b9e8:	cmp	r5, #0
    b9ea:	add.w	ip, r5, r1
    b9ee:	blt.n	ba82 <__ieee754_sqrt+0x15a>
    b9f0:	mov	r8, r3
    b9f2:	movs	r3, #0
    b9f4:	b.n	b9d0 <__ieee754_sqrt+0xa8>
    b9f6:	orrs	r3, r2
    b9f8:	bne.n	ba22 <__ieee754_sqrt+0xfa>
    b9fa:	lsrs	r0, r0, #1
    b9fc:	asrs	r1, r6, #1
    b9fe:	lsls	r3, r6, #31
    ba00:	add.w	r1, r1, #1069547520	; 0x3fc00000
    ba04:	add.w	r1, r1, #2097152	; 0x200000
    ba08:	it	mi
    ba0a:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    ba0e:	add.w	r3, r1, r7, lsl #20
    ba12:	mov	r2, r0
    ba14:	vmov	d0, r2, r3
    ba18:	add	sp, #8
    ba1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba1e:	mov	r3, lr
    ba20:	b.n	b9a2 <__ieee754_sqrt+0x7a>
    ba22:	adds	r2, r0, #1
    ba24:	beq.n	ba8a <__ieee754_sqrt+0x162>
    ba26:	and.w	r3, r0, #1
    ba2a:	add	r0, r3
    ba2c:	b.n	b9fa <__ieee754_sqrt+0xd2>
    ba2e:	lsls	r3, r3, #1
    ba30:	add.w	r3, r3, r2, lsr #31
    ba34:	lsls	r2, r2, #1
    ba36:	b.n	b95e <__ieee754_sqrt+0x36>
    ba38:	bic.w	r1, r3, #2147483648	; 0x80000000
    ba3c:	orrs	r1, r0
    ba3e:	beq.n	ba7c <__ieee754_sqrt+0x154>
    ba40:	cbnz	r3, ba9a <__ieee754_sqrt+0x172>
    ba42:	mov	r7, r3
    ba44:	lsrs	r3, r2, #11
    ba46:	subs	r7, #21
    ba48:	lsls	r2, r2, #21
    ba4a:	cmp	r3, #0
    ba4c:	beq.n	ba44 <__ieee754_sqrt+0x11c>
    ba4e:	lsls	r5, r3, #11
    ba50:	bmi.n	ba90 <__ieee754_sqrt+0x168>
    ba52:	movs	r1, #0
    ba54:	b.n	ba58 <__ieee754_sqrt+0x130>
    ba56:	mov	r1, r0
    ba58:	lsls	r3, r3, #1
    ba5a:	lsls	r4, r3, #11
    ba5c:	add.w	r0, r1, #1
    ba60:	bpl.n	ba56 <__ieee754_sqrt+0x12e>
    ba62:	rsb	r4, r0, #32
    ba66:	lsr.w	r4, r2, r4
    ba6a:	orrs	r3, r4
    ba6c:	subs	r7, r7, r1
    ba6e:	lsls	r2, r0
    ba70:	b.n	b94e <__ieee754_sqrt+0x26>
    ba72:	vfma.f64	d0, d0, d0
    ba76:	add	sp, #8
    ba78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba7c:	vldr	d0, [sp]
    ba80:	b.n	ba18 <__ieee754_sqrt+0xf0>
    ba82:	cmp.w	ip, #0
    ba86:	bge.n	b9de <__ieee754_sqrt+0xb6>
    ba88:	b.n	b9f0 <__ieee754_sqrt+0xc8>
    ba8a:	adds	r6, #1
    ba8c:	mov	r0, r4
    ba8e:	b.n	b9fc <__ieee754_sqrt+0xd4>
    ba90:	movs	r4, #32
    ba92:	mov.w	r1, #4294967295
    ba96:	movs	r0, #0
    ba98:	b.n	ba66 <__ieee754_sqrt+0x13e>
    ba9a:	vldr	d7, [sp]
    ba9e:	vsub.f64	d7, d7, d7
    baa2:	vdiv.f64	d0, d7, d7
    baa6:	b.n	ba18 <__ieee754_sqrt+0xf0>
    baa8:	.word	0x7ff00000

0000baac <matherr>:
    baac:	movs	r0, #0
    baae:	bx	lr

0000bab0 <__aeabi_atexit>:
    bab0:	mov	r3, r1
    bab2:	mov	r1, r0
    bab4:	mov	r0, r3
    bab6:	b.w	bb2c <__cxa_atexit>
    baba:	nop

0000babc <calloc>:
    babc:	ldr	r3, [pc, #8]	; (bac8 <calloc+0xc>)
    babe:	mov	r2, r1
    bac0:	mov	r1, r0
    bac2:	ldr	r0, [r3, #0]
    bac4:	b.w	bacc <_calloc_r>
    bac8:	.word	0x20001148

0000bacc <_calloc_r>:
    bacc:	push	{r4, lr}
    bace:	mul.w	r1, r2, r1
    bad2:	bl	bbb4 <_malloc_r>
    bad6:	mov	r4, r0
    bad8:	cbz	r0, bb12 <_calloc_r+0x46>
    bada:	ldr.w	r2, [r0, #-4]
    bade:	bic.w	r2, r2, #3
    bae2:	subs	r2, #4
    bae4:	cmp	r2, #36	; 0x24
    bae6:	bhi.n	bb1a <_calloc_r+0x4e>
    bae8:	cmp	r2, #19
    baea:	bls.n	bb16 <_calloc_r+0x4a>
    baec:	movs	r3, #0
    baee:	cmp	r2, #27
    baf0:	str	r3, [r0, #0]
    baf2:	str	r3, [r0, #4]
    baf4:	bls.n	bb24 <_calloc_r+0x58>
    baf6:	cmp	r2, #36	; 0x24
    baf8:	str	r3, [r0, #8]
    bafa:	str	r3, [r0, #12]
    bafc:	iteee	ne
    bafe:	addne.w	r2, r0, #16
    bb02:	streq	r3, [r0, #16]
    bb04:	streq	r3, [r0, #20]
    bb06:	addeq.w	r2, r0, #24
    bb0a:	movs	r3, #0
    bb0c:	str	r3, [r2, #0]
    bb0e:	str	r3, [r2, #4]
    bb10:	str	r3, [r2, #8]
    bb12:	mov	r0, r4
    bb14:	pop	{r4, pc}
    bb16:	mov	r2, r0
    bb18:	b.n	bb0a <_calloc_r+0x3e>
    bb1a:	movs	r1, #0
    bb1c:	bl	c124 <memset>
    bb20:	mov	r0, r4
    bb22:	pop	{r4, pc}
    bb24:	add.w	r2, r0, #8
    bb28:	b.n	bb0a <_calloc_r+0x3e>
    bb2a:	nop

0000bb2c <__cxa_atexit>:
    bb2c:	mov	r3, r2
    bb2e:	mov	r2, r1
    bb30:	mov	r1, r0
    bb32:	movs	r0, #2
    bb34:	b.w	c1ec <__register_exitproc>

0000bb38 <__errno>:
    bb38:	ldr	r3, [pc, #4]	; (bb40 <__errno+0x8>)
    bb3a:	ldr	r0, [r3, #0]
    bb3c:	bx	lr
    bb3e:	nop
    bb40:	.word	0x20001148

0000bb44 <__libc_init_array>:
    bb44:	push	{r4, r5, r6, lr}
    bb46:	ldr	r6, [pc, #60]	; (bb84 <__libc_init_array+0x40>)
    bb48:	ldr	r5, [pc, #60]	; (bb88 <__libc_init_array+0x44>)
    bb4a:	subs	r6, r6, r5
    bb4c:	asrs	r6, r6, #2
    bb4e:	it	ne
    bb50:	movne	r4, #0
    bb52:	beq.n	bb60 <__libc_init_array+0x1c>
    bb54:	adds	r4, #1
    bb56:	ldr.w	r3, [r5], #4
    bb5a:	blx	r3
    bb5c:	cmp	r6, r4
    bb5e:	bne.n	bb54 <__libc_init_array+0x10>
    bb60:	ldr	r6, [pc, #40]	; (bb8c <__libc_init_array+0x48>)
    bb62:	ldr	r5, [pc, #44]	; (bb90 <__libc_init_array+0x4c>)
    bb64:	subs	r6, r6, r5
    bb66:	bl	c500 <___init_veneer>
    bb6a:	asrs	r6, r6, #2
    bb6c:	it	ne
    bb6e:	movne	r4, #0
    bb70:	beq.n	bb80 <__libc_init_array+0x3c>
    bb72:	adds	r4, #1
    bb74:	ldr.w	r3, [r5], #4
    bb78:	blx	r3
    bb7a:	cmp	r6, r4
    bb7c:	bne.n	bb72 <__libc_init_array+0x2e>
    bb7e:	pop	{r4, r5, r6, pc}
    bb80:	pop	{r4, r5, r6, pc}
    bb82:	nop
    bb84:	.word	0x60001600
    bb88:	.word	0x60001600
    bb8c:	.word	0x6000160c
    bb90:	.word	0x60001600

0000bb94 <malloc>:
    bb94:	ldr	r3, [pc, #8]	; (bba0 <malloc+0xc>)
    bb96:	mov	r1, r0
    bb98:	ldr	r0, [r3, #0]
    bb9a:	b.w	bbb4 <_malloc_r>
    bb9e:	nop
    bba0:	.word	0x20001148

0000bba4 <free>:
    bba4:	ldr	r3, [pc, #8]	; (bbb0 <free+0xc>)
    bba6:	mov	r1, r0
    bba8:	ldr	r0, [r3, #0]
    bbaa:	b.w	c32c <_free_r>
    bbae:	nop
    bbb0:	.word	0x20001148

0000bbb4 <_malloc_r>:
    bbb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbb8:	add.w	r5, r1, #11
    bbbc:	cmp	r5, #22
    bbbe:	sub	sp, #12
    bbc0:	mov	r6, r0
    bbc2:	bls.w	bd04 <_malloc_r+0x150>
    bbc6:	bics.w	r5, r5, #7
    bbca:	bmi.w	bd4c <_malloc_r+0x198>
    bbce:	cmp	r1, r5
    bbd0:	bhi.w	bd4c <_malloc_r+0x198>
    bbd4:	bl	c1c0 <__malloc_lock>
    bbd8:	cmp.w	r5, #504	; 0x1f8
    bbdc:	bcc.w	c118 <_malloc_r+0x564>
    bbe0:	lsrs	r3, r5, #9
    bbe2:	beq.w	bd5a <_malloc_r+0x1a6>
    bbe6:	cmp	r3, #4
    bbe8:	bhi.w	bef2 <_malloc_r+0x33e>
    bbec:	lsrs	r0, r5, #6
    bbee:	add.w	lr, r0, #57	; 0x39
    bbf2:	mov.w	r3, lr, lsl #1
    bbf6:	adds	r0, #56	; 0x38
    bbf8:	ldr	r7, [pc, #784]	; (bf0c <_malloc_r+0x358>)
    bbfa:	add.w	r3, r7, r3, lsl #2
    bbfe:	sub.w	r1, r3, #8
    bc02:	ldr	r4, [r3, #4]
    bc04:	cmp	r1, r4
    bc06:	bne.n	bc18 <_malloc_r+0x64>
    bc08:	b.n	bd64 <_malloc_r+0x1b0>
    bc0a:	cmp	r2, #0
    bc0c:	bge.w	bd68 <_malloc_r+0x1b4>
    bc10:	ldr	r4, [r4, #12]
    bc12:	cmp	r1, r4
    bc14:	beq.w	bd64 <_malloc_r+0x1b0>
    bc18:	ldr	r3, [r4, #4]
    bc1a:	bic.w	r3, r3, #3
    bc1e:	subs	r2, r3, r5
    bc20:	cmp	r2, #15
    bc22:	ble.n	bc0a <_malloc_r+0x56>
    bc24:	ldr	r1, [pc, #740]	; (bf0c <_malloc_r+0x358>)
    bc26:	ldr	r4, [r7, #16]
    bc28:	add.w	lr, r1, #8
    bc2c:	cmp	r4, lr
    bc2e:	beq.w	bf98 <_malloc_r+0x3e4>
    bc32:	ldr	r3, [r4, #4]
    bc34:	bic.w	r3, r3, #3
    bc38:	subs	r2, r3, r5
    bc3a:	cmp	r2, #15
    bc3c:	bgt.w	bf72 <_malloc_r+0x3be>
    bc40:	cmp	r2, #0
    bc42:	str.w	lr, [r1, #20]
    bc46:	str.w	lr, [r1, #16]
    bc4a:	bge.w	bd8a <_malloc_r+0x1d6>
    bc4e:	cmp.w	r3, #512	; 0x200
    bc52:	bcs.w	bf24 <_malloc_r+0x370>
    bc56:	lsrs	r3, r3, #3
    bc58:	add.w	ip, r3, #1
    bc5c:	movs	r2, #1
    bc5e:	asrs	r3, r3, #2
    bc60:	lsl.w	r3, r2, r3
    bc64:	ldr	r2, [r1, #4]
    bc66:	ldr.w	r8, [r1, ip, lsl #3]
    bc6a:	str.w	r8, [r4, #8]
    bc6e:	add.w	r9, r1, ip, lsl #3
    bc72:	orrs	r2, r3
    bc74:	sub.w	r3, r9, #8
    bc78:	str	r3, [r4, #12]
    bc7a:	str	r2, [r1, #4]
    bc7c:	str.w	r4, [r1, ip, lsl #3]
    bc80:	str.w	r4, [r8, #12]
    bc84:	asrs	r3, r0, #2
    bc86:	movs	r4, #1
    bc88:	lsls	r4, r3
    bc8a:	cmp	r4, r2
    bc8c:	bhi.w	bda4 <_malloc_r+0x1f0>
    bc90:	tst	r4, r2
    bc92:	bne.n	bca2 <_malloc_r+0xee>
    bc94:	bic.w	r0, r0, #3
    bc98:	lsls	r4, r4, #1
    bc9a:	tst	r4, r2
    bc9c:	add.w	r0, r0, #4
    bca0:	beq.n	bc98 <_malloc_r+0xe4>
    bca2:	add.w	r9, r7, r0, lsl #3
    bca6:	mov	ip, r9
    bca8:	mov	r8, r0
    bcaa:	ldr.w	r1, [ip, #12]
    bcae:	cmp	ip, r1
    bcb0:	bne.n	bcc2 <_malloc_r+0x10e>
    bcb2:	b.n	bf9c <_malloc_r+0x3e8>
    bcb4:	cmp	r2, #0
    bcb6:	bge.w	bfbc <_malloc_r+0x408>
    bcba:	ldr	r1, [r1, #12]
    bcbc:	cmp	ip, r1
    bcbe:	beq.w	bf9c <_malloc_r+0x3e8>
    bcc2:	ldr	r3, [r1, #4]
    bcc4:	bic.w	r3, r3, #3
    bcc8:	subs	r2, r3, r5
    bcca:	cmp	r2, #15
    bccc:	ble.n	bcb4 <_malloc_r+0x100>
    bcce:	mov	r4, r1
    bcd0:	ldr.w	ip, [r1, #12]
    bcd4:	ldr.w	r8, [r4, #8]!
    bcd8:	adds	r3, r1, r5
    bcda:	orr.w	r5, r5, #1
    bcde:	str	r5, [r1, #4]
    bce0:	orr.w	r1, r2, #1
    bce4:	str.w	ip, [r8, #12]
    bce8:	mov	r0, r6
    bcea:	str.w	r8, [ip, #8]
    bcee:	str	r3, [r7, #20]
    bcf0:	str	r3, [r7, #16]
    bcf2:	str.w	lr, [r3, #12]
    bcf6:	str.w	lr, [r3, #8]
    bcfa:	str	r1, [r3, #4]
    bcfc:	str	r2, [r3, r2]
    bcfe:	bl	c1c4 <__malloc_unlock>
    bd02:	b.n	bd44 <_malloc_r+0x190>
    bd04:	cmp	r1, #16
    bd06:	bhi.n	bd4c <_malloc_r+0x198>
    bd08:	bl	c1c0 <__malloc_lock>
    bd0c:	movs	r5, #16
    bd0e:	movs	r3, #6
    bd10:	movs	r0, #2
    bd12:	ldr	r7, [pc, #504]	; (bf0c <_malloc_r+0x358>)
    bd14:	add.w	r3, r7, r3, lsl #2
    bd18:	sub.w	r2, r3, #8
    bd1c:	ldr	r4, [r3, #4]
    bd1e:	cmp	r4, r2
    bd20:	beq.w	bfae <_malloc_r+0x3fa>
    bd24:	ldr	r3, [r4, #4]
    bd26:	ldr	r1, [r4, #12]
    bd28:	ldr	r5, [r4, #8]
    bd2a:	bic.w	r3, r3, #3
    bd2e:	add	r3, r4
    bd30:	mov	r0, r6
    bd32:	ldr	r2, [r3, #4]
    bd34:	str	r1, [r5, #12]
    bd36:	orr.w	r2, r2, #1
    bd3a:	str	r5, [r1, #8]
    bd3c:	str	r2, [r3, #4]
    bd3e:	bl	c1c4 <__malloc_unlock>
    bd42:	adds	r4, #8
    bd44:	mov	r0, r4
    bd46:	add	sp, #12
    bd48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd4c:	movs	r4, #0
    bd4e:	movs	r3, #12
    bd50:	mov	r0, r4
    bd52:	str	r3, [r6, #0]
    bd54:	add	sp, #12
    bd56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd5a:	movs	r3, #128	; 0x80
    bd5c:	mov.w	lr, #64	; 0x40
    bd60:	movs	r0, #63	; 0x3f
    bd62:	b.n	bbf8 <_malloc_r+0x44>
    bd64:	mov	r0, lr
    bd66:	b.n	bc24 <_malloc_r+0x70>
    bd68:	add	r3, r4
    bd6a:	ldr	r1, [r4, #12]
    bd6c:	ldr	r2, [r3, #4]
    bd6e:	ldr	r5, [r4, #8]
    bd70:	orr.w	r2, r2, #1
    bd74:	str	r1, [r5, #12]
    bd76:	mov	r0, r6
    bd78:	str	r5, [r1, #8]
    bd7a:	str	r2, [r3, #4]
    bd7c:	bl	c1c4 <__malloc_unlock>
    bd80:	adds	r4, #8
    bd82:	mov	r0, r4
    bd84:	add	sp, #12
    bd86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd8a:	add	r3, r4
    bd8c:	mov	r0, r6
    bd8e:	ldr	r2, [r3, #4]
    bd90:	orr.w	r2, r2, #1
    bd94:	str	r2, [r3, #4]
    bd96:	bl	c1c4 <__malloc_unlock>
    bd9a:	adds	r4, #8
    bd9c:	mov	r0, r4
    bd9e:	add	sp, #12
    bda0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bda4:	ldr	r4, [r7, #8]
    bda6:	ldr	r3, [r4, #4]
    bda8:	bic.w	r8, r3, #3
    bdac:	cmp	r8, r5
    bdae:	bcc.n	bdba <_malloc_r+0x206>
    bdb0:	rsb	r3, r5, r8
    bdb4:	cmp	r3, #15
    bdb6:	bgt.w	bed2 <_malloc_r+0x31e>
    bdba:	ldr	r3, [pc, #340]	; (bf10 <_malloc_r+0x35c>)
    bdbc:	ldr.w	r9, [pc, #352]	; bf20 <_malloc_r+0x36c>
    bdc0:	ldr	r2, [r3, #0]
    bdc2:	ldr.w	r3, [r9]
    bdc6:	adds	r3, #1
    bdc8:	add	r2, r5
    bdca:	add.w	sl, r4, r8
    bdce:	beq.w	c092 <_malloc_r+0x4de>
    bdd2:	add.w	r2, r2, #4096	; 0x1000
    bdd6:	adds	r2, #15
    bdd8:	bic.w	r2, r2, #4080	; 0xff0
    bddc:	bic.w	r2, r2, #15
    bde0:	mov	r1, r2
    bde2:	mov	r0, r6
    bde4:	str	r2, [sp, #4]
    bde6:	bl	c1c8 <_sbrk_r>
    bdea:	cmp.w	r0, #4294967295
    bdee:	mov	fp, r0
    bdf0:	ldr	r2, [sp, #4]
    bdf2:	beq.w	c0a6 <_malloc_r+0x4f2>
    bdf6:	cmp	sl, r0
    bdf8:	bhi.w	bff4 <_malloc_r+0x440>
    bdfc:	ldr	r3, [pc, #276]	; (bf14 <_malloc_r+0x360>)
    bdfe:	ldr	r1, [r3, #0]
    be00:	cmp	sl, fp
    be02:	add	r1, r2
    be04:	str	r1, [r3, #0]
    be06:	beq.w	c0b0 <_malloc_r+0x4fc>
    be0a:	ldr.w	r0, [r9]
    be0e:	ldr.w	lr, [pc, #272]	; bf20 <_malloc_r+0x36c>
    be12:	adds	r0, #1
    be14:	ittet	ne
    be16:	rsbne	sl, sl, fp
    be1a:	addne	r1, sl
    be1c:	streq.w	fp, [lr]
    be20:	strne	r1, [r3, #0]
    be22:	ands.w	r1, fp, #7
    be26:	beq.w	c058 <_malloc_r+0x4a4>
    be2a:	rsb	r0, r1, #8
    be2e:	rsb	r1, r1, #4096	; 0x1000
    be32:	add	fp, r0
    be34:	adds	r1, #8
    be36:	add	r2, fp
    be38:	ubfx	r2, r2, #0, #12
    be3c:	rsb	r9, r2, r1
    be40:	mov	r1, r9
    be42:	mov	r0, r6
    be44:	str	r3, [sp, #4]
    be46:	bl	c1c8 <_sbrk_r>
    be4a:	adds	r3, r0, #1
    be4c:	ldr	r3, [sp, #4]
    be4e:	beq.w	c0d0 <_malloc_r+0x51c>
    be52:	rsb	r2, fp, r0
    be56:	add	r2, r9
    be58:	orr.w	r2, r2, #1
    be5c:	ldr	r1, [r3, #0]
    be5e:	str.w	fp, [r7, #8]
    be62:	add	r1, r9
    be64:	cmp	r4, r7
    be66:	str.w	r2, [fp, #4]
    be6a:	str	r1, [r3, #0]
    be6c:	ldr.w	r9, [pc, #164]	; bf14 <_malloc_r+0x360>
    be70:	beq.n	bea0 <_malloc_r+0x2ec>
    be72:	cmp.w	r8, #15
    be76:	bls.w	c074 <_malloc_r+0x4c0>
    be7a:	ldr	r2, [r4, #4]
    be7c:	sub.w	r3, r8, #12
    be80:	bic.w	r3, r3, #7
    be84:	adds	r0, r4, r3
    be86:	and.w	r2, r2, #1
    be8a:	mov.w	lr, #5
    be8e:	orrs	r2, r3
    be90:	cmp	r3, #15
    be92:	str	r2, [r4, #4]
    be94:	str.w	lr, [r0, #4]
    be98:	str.w	lr, [r0, #8]
    be9c:	bhi.w	c0d8 <_malloc_r+0x524>
    bea0:	ldr	r3, [pc, #116]	; (bf18 <_malloc_r+0x364>)
    bea2:	ldr	r4, [r7, #8]
    bea4:	ldr	r2, [r3, #0]
    bea6:	cmp	r1, r2
    bea8:	it	hi
    beaa:	strhi	r1, [r3, #0]
    beac:	ldr	r3, [pc, #108]	; (bf1c <_malloc_r+0x368>)
    beae:	ldr	r2, [r3, #0]
    beb0:	cmp	r1, r2
    beb2:	ldr	r2, [r4, #4]
    beb4:	it	hi
    beb6:	strhi	r1, [r3, #0]
    beb8:	bic.w	r2, r2, #3
    bebc:	cmp	r5, r2
    bebe:	sub.w	r3, r2, r5
    bec2:	bhi.n	bec8 <_malloc_r+0x314>
    bec4:	cmp	r3, #15
    bec6:	bgt.n	bed2 <_malloc_r+0x31e>
    bec8:	mov	r0, r6
    beca:	bl	c1c4 <__malloc_unlock>
    bece:	movs	r4, #0
    bed0:	b.n	bd44 <_malloc_r+0x190>
    bed2:	adds	r2, r4, r5
    bed4:	orr.w	r3, r3, #1
    bed8:	orr.w	r5, r5, #1
    bedc:	str	r5, [r4, #4]
    bede:	mov	r0, r6
    bee0:	str	r2, [r7, #8]
    bee2:	str	r3, [r2, #4]
    bee4:	bl	c1c4 <__malloc_unlock>
    bee8:	adds	r4, #8
    beea:	mov	r0, r4
    beec:	add	sp, #12
    beee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bef2:	cmp	r3, #20
    bef4:	bls.n	bfda <_malloc_r+0x426>
    bef6:	cmp	r3, #84	; 0x54
    bef8:	bhi.w	c044 <_malloc_r+0x490>
    befc:	lsrs	r0, r5, #12
    befe:	add.w	lr, r0, #111	; 0x6f
    bf02:	mov.w	r3, lr, lsl #1
    bf06:	adds	r0, #110	; 0x6e
    bf08:	b.n	bbf8 <_malloc_r+0x44>
    bf0a:	nop
    bf0c:	.word	0x2000114c
    bf10:	.word	0x2000d8b8
    bf14:	.word	0x2000d8bc
    bf18:	.word	0x2000d8b4
    bf1c:	.word	0x2000d8b0
    bf20:	.word	0x20001558
    bf24:	lsrs	r2, r3, #9
    bf26:	cmp	r2, #4
    bf28:	bls.n	bfe8 <_malloc_r+0x434>
    bf2a:	cmp	r2, #20
    bf2c:	bhi.w	c096 <_malloc_r+0x4e2>
    bf30:	add.w	r1, r2, #92	; 0x5c
    bf34:	lsls	r1, r1, #1
    bf36:	adds	r2, #91	; 0x5b
    bf38:	add.w	ip, r7, r1, lsl #2
    bf3c:	ldr.w	r1, [r7, r1, lsl #2]
    bf40:	ldr.w	r8, [pc, #476]	; c120 <_malloc_r+0x56c>
    bf44:	sub.w	ip, ip, #8
    bf48:	cmp	ip, r1
    bf4a:	beq.w	c05e <_malloc_r+0x4aa>
    bf4e:	ldr	r2, [r1, #4]
    bf50:	bic.w	r2, r2, #3
    bf54:	cmp	r3, r2
    bf56:	bcs.n	bf5e <_malloc_r+0x3aa>
    bf58:	ldr	r1, [r1, #8]
    bf5a:	cmp	ip, r1
    bf5c:	bne.n	bf4e <_malloc_r+0x39a>
    bf5e:	ldr.w	ip, [r1, #12]
    bf62:	ldr	r2, [r7, #4]
    bf64:	str.w	ip, [r4, #12]
    bf68:	str	r1, [r4, #8]
    bf6a:	str.w	r4, [ip, #8]
    bf6e:	str	r4, [r1, #12]
    bf70:	b.n	bc84 <_malloc_r+0xd0>
    bf72:	adds	r3, r4, r5
    bf74:	orr.w	r7, r2, #1
    bf78:	orr.w	r5, r5, #1
    bf7c:	str	r5, [r4, #4]
    bf7e:	mov	r0, r6
    bf80:	str	r3, [r1, #20]
    bf82:	str	r3, [r1, #16]
    bf84:	str.w	lr, [r3, #12]
    bf88:	str.w	lr, [r3, #8]
    bf8c:	str	r7, [r3, #4]
    bf8e:	str	r2, [r3, r2]
    bf90:	adds	r4, #8
    bf92:	bl	c1c4 <__malloc_unlock>
    bf96:	b.n	bd44 <_malloc_r+0x190>
    bf98:	ldr	r2, [r1, #4]
    bf9a:	b.n	bc84 <_malloc_r+0xd0>
    bf9c:	add.w	r8, r8, #1
    bfa0:	tst.w	r8, #3
    bfa4:	add.w	ip, ip, #8
    bfa8:	bne.w	bcaa <_malloc_r+0xf6>
    bfac:	b.n	c010 <_malloc_r+0x45c>
    bfae:	ldr	r4, [r3, #12]
    bfb0:	cmp	r3, r4
    bfb2:	it	eq
    bfb4:	addeq	r0, #2
    bfb6:	beq.w	bc24 <_malloc_r+0x70>
    bfba:	b.n	bd24 <_malloc_r+0x170>
    bfbc:	add	r3, r1
    bfbe:	mov	r4, r1
    bfc0:	ldr	r2, [r3, #4]
    bfc2:	ldr	r1, [r1, #12]
    bfc4:	ldr.w	r5, [r4, #8]!
    bfc8:	orr.w	r2, r2, #1
    bfcc:	str	r2, [r3, #4]
    bfce:	mov	r0, r6
    bfd0:	str	r1, [r5, #12]
    bfd2:	str	r5, [r1, #8]
    bfd4:	bl	c1c4 <__malloc_unlock>
    bfd8:	b.n	bd44 <_malloc_r+0x190>
    bfda:	add.w	lr, r3, #92	; 0x5c
    bfde:	add.w	r0, r3, #91	; 0x5b
    bfe2:	mov.w	r3, lr, lsl #1
    bfe6:	b.n	bbf8 <_malloc_r+0x44>
    bfe8:	lsrs	r2, r3, #6
    bfea:	add.w	r1, r2, #57	; 0x39
    bfee:	lsls	r1, r1, #1
    bff0:	adds	r2, #56	; 0x38
    bff2:	b.n	bf38 <_malloc_r+0x384>
    bff4:	cmp	r4, r7
    bff6:	ldr	r3, [pc, #296]	; (c120 <_malloc_r+0x56c>)
    bff8:	beq.w	bdfc <_malloc_r+0x248>
    bffc:	ldr	r4, [r3, #8]
    bffe:	ldr	r2, [r4, #4]
    c000:	bic.w	r2, r2, #3
    c004:	b.n	bebc <_malloc_r+0x308>
    c006:	ldr.w	r3, [r9], #-8
    c00a:	cmp	r9, r3
    c00c:	bne.w	c114 <_malloc_r+0x560>
    c010:	tst.w	r0, #3
    c014:	add.w	r0, r0, #4294967295
    c018:	bne.n	c006 <_malloc_r+0x452>
    c01a:	ldr	r3, [r7, #4]
    c01c:	bic.w	r3, r3, r4
    c020:	str	r3, [r7, #4]
    c022:	lsls	r4, r4, #1
    c024:	cmp	r4, r3
    c026:	bhi.w	bda4 <_malloc_r+0x1f0>
    c02a:	cmp	r4, #0
    c02c:	beq.w	bda4 <_malloc_r+0x1f0>
    c030:	tst	r4, r3
    c032:	mov	r0, r8
    c034:	bne.w	bca2 <_malloc_r+0xee>
    c038:	lsls	r4, r4, #1
    c03a:	tst	r4, r3
    c03c:	add.w	r0, r0, #4
    c040:	beq.n	c038 <_malloc_r+0x484>
    c042:	b.n	bca2 <_malloc_r+0xee>
    c044:	cmp.w	r3, #340	; 0x154
    c048:	bhi.n	c07c <_malloc_r+0x4c8>
    c04a:	lsrs	r0, r5, #15
    c04c:	add.w	lr, r0, #120	; 0x78
    c050:	mov.w	r3, lr, lsl #1
    c054:	adds	r0, #119	; 0x77
    c056:	b.n	bbf8 <_malloc_r+0x44>
    c058:	mov.w	r1, #4096	; 0x1000
    c05c:	b.n	be36 <_malloc_r+0x282>
    c05e:	movs	r1, #1
    c060:	ldr.w	r3, [r8, #4]
    c064:	asrs	r2, r2, #2
    c066:	lsl.w	r2, r1, r2
    c06a:	orrs	r2, r3
    c06c:	str.w	r2, [r8, #4]
    c070:	mov	r1, ip
    c072:	b.n	bf64 <_malloc_r+0x3b0>
    c074:	movs	r3, #1
    c076:	str.w	r3, [fp, #4]
    c07a:	b.n	bec8 <_malloc_r+0x314>
    c07c:	movw	r2, #1364	; 0x554
    c080:	cmp	r3, r2
    c082:	bhi.n	c0c6 <_malloc_r+0x512>
    c084:	lsrs	r0, r5, #18
    c086:	add.w	lr, r0, #125	; 0x7d
    c08a:	mov.w	r3, lr, lsl #1
    c08e:	adds	r0, #124	; 0x7c
    c090:	b.n	bbf8 <_malloc_r+0x44>
    c092:	adds	r2, #16
    c094:	b.n	bde0 <_malloc_r+0x22c>
    c096:	cmp	r2, #84	; 0x54
    c098:	bhi.n	c0e8 <_malloc_r+0x534>
    c09a:	lsrs	r2, r3, #12
    c09c:	add.w	r1, r2, #111	; 0x6f
    c0a0:	lsls	r1, r1, #1
    c0a2:	adds	r2, #110	; 0x6e
    c0a4:	b.n	bf38 <_malloc_r+0x384>
    c0a6:	ldr	r4, [r7, #8]
    c0a8:	ldr	r2, [r4, #4]
    c0aa:	bic.w	r2, r2, #3
    c0ae:	b.n	bebc <_malloc_r+0x308>
    c0b0:	ubfx	r0, sl, #0, #12
    c0b4:	cmp	r0, #0
    c0b6:	bne.w	be0a <_malloc_r+0x256>
    c0ba:	add	r2, r8
    c0bc:	ldr	r3, [r7, #8]
    c0be:	orr.w	r2, r2, #1
    c0c2:	str	r2, [r3, #4]
    c0c4:	b.n	bea0 <_malloc_r+0x2ec>
    c0c6:	movs	r3, #254	; 0xfe
    c0c8:	mov.w	lr, #127	; 0x7f
    c0cc:	movs	r0, #126	; 0x7e
    c0ce:	b.n	bbf8 <_malloc_r+0x44>
    c0d0:	movs	r2, #1
    c0d2:	mov.w	r9, #0
    c0d6:	b.n	be5c <_malloc_r+0x2a8>
    c0d8:	add.w	r1, r4, #8
    c0dc:	mov	r0, r6
    c0de:	bl	c32c <_free_r>
    c0e2:	ldr.w	r1, [r9]
    c0e6:	b.n	bea0 <_malloc_r+0x2ec>
    c0e8:	cmp.w	r2, #340	; 0x154
    c0ec:	bhi.n	c0fa <_malloc_r+0x546>
    c0ee:	lsrs	r2, r3, #15
    c0f0:	add.w	r1, r2, #120	; 0x78
    c0f4:	lsls	r1, r1, #1
    c0f6:	adds	r2, #119	; 0x77
    c0f8:	b.n	bf38 <_malloc_r+0x384>
    c0fa:	movw	r1, #1364	; 0x554
    c0fe:	cmp	r2, r1
    c100:	bhi.n	c10e <_malloc_r+0x55a>
    c102:	lsrs	r2, r3, #18
    c104:	add.w	r1, r2, #125	; 0x7d
    c108:	lsls	r1, r1, #1
    c10a:	adds	r2, #124	; 0x7c
    c10c:	b.n	bf38 <_malloc_r+0x384>
    c10e:	movs	r1, #254	; 0xfe
    c110:	movs	r2, #126	; 0x7e
    c112:	b.n	bf38 <_malloc_r+0x384>
    c114:	ldr	r3, [r7, #4]
    c116:	b.n	c022 <_malloc_r+0x46e>
    c118:	lsrs	r0, r5, #3
    c11a:	adds	r3, r0, #1
    c11c:	lsls	r3, r3, #1
    c11e:	b.n	bd12 <_malloc_r+0x15e>
    c120:	.word	0x2000114c

0000c124 <memset>:
    c124:	push	{r4, r5, r6}
    c126:	lsls	r4, r0, #30
    c128:	beq.n	c1b8 <memset+0x94>
    c12a:	subs	r4, r2, #1
    c12c:	cmp	r2, #0
    c12e:	beq.n	c1b4 <memset+0x90>
    c130:	uxtb	r5, r1
    c132:	mov	r3, r0
    c134:	b.n	c13c <memset+0x18>
    c136:	subs	r2, r4, #1
    c138:	cbz	r4, c1b4 <memset+0x90>
    c13a:	mov	r4, r2
    c13c:	strb.w	r5, [r3], #1
    c140:	lsls	r2, r3, #30
    c142:	bne.n	c136 <memset+0x12>
    c144:	cmp	r4, #3
    c146:	bls.n	c1a6 <memset+0x82>
    c148:	uxtb	r5, r1
    c14a:	orr.w	r5, r5, r5, lsl #8
    c14e:	cmp	r4, #15
    c150:	orr.w	r5, r5, r5, lsl #16
    c154:	bls.n	c18a <memset+0x66>
    c156:	add.w	r2, r3, #16
    c15a:	mov	r6, r4
    c15c:	subs	r6, #16
    c15e:	cmp	r6, #15
    c160:	str.w	r5, [r2, #-16]
    c164:	str.w	r5, [r2, #-12]
    c168:	str.w	r5, [r2, #-8]
    c16c:	str.w	r5, [r2, #-4]
    c170:	add.w	r2, r2, #16
    c174:	bhi.n	c15c <memset+0x38>
    c176:	sub.w	r2, r4, #16
    c17a:	bic.w	r2, r2, #15
    c17e:	and.w	r4, r4, #15
    c182:	adds	r2, #16
    c184:	cmp	r4, #3
    c186:	add	r3, r2
    c188:	bls.n	c1a6 <memset+0x82>
    c18a:	mov	r6, r3
    c18c:	mov	r2, r4
    c18e:	subs	r2, #4
    c190:	cmp	r2, #3
    c192:	str.w	r5, [r6], #4
    c196:	bhi.n	c18e <memset+0x6a>
    c198:	subs	r2, r4, #4
    c19a:	bic.w	r2, r2, #3
    c19e:	adds	r2, #4
    c1a0:	add	r3, r2
    c1a2:	and.w	r4, r4, #3
    c1a6:	cbz	r4, c1b4 <memset+0x90>
    c1a8:	uxtb	r1, r1
    c1aa:	add	r4, r3
    c1ac:	strb.w	r1, [r3], #1
    c1b0:	cmp	r3, r4
    c1b2:	bne.n	c1ac <memset+0x88>
    c1b4:	pop	{r4, r5, r6}
    c1b6:	bx	lr
    c1b8:	mov	r4, r2
    c1ba:	mov	r3, r0
    c1bc:	b.n	c144 <memset+0x20>
    c1be:	nop

0000c1c0 <__malloc_lock>:
    c1c0:	bx	lr
    c1c2:	nop

0000c1c4 <__malloc_unlock>:
    c1c4:	bx	lr
    c1c6:	nop

0000c1c8 <_sbrk_r>:
    c1c8:	push	{r3, r4, r5, lr}
    c1ca:	ldr	r4, [pc, #28]	; (c1e8 <_sbrk_r+0x20>)
    c1cc:	movs	r3, #0
    c1ce:	mov	r5, r0
    c1d0:	mov	r0, r1
    c1d2:	str	r3, [r4, #0]
    c1d4:	bl	b520 <_sbrk>
    c1d8:	adds	r3, r0, #1
    c1da:	beq.n	c1de <_sbrk_r+0x16>
    c1dc:	pop	{r3, r4, r5, pc}
    c1de:	ldr	r3, [r4, #0]
    c1e0:	cmp	r3, #0
    c1e2:	beq.n	c1dc <_sbrk_r+0x14>
    c1e4:	str	r3, [r5, #0]
    c1e6:	pop	{r3, r4, r5, pc}
    c1e8:	.word	0x2000f6c0

0000c1ec <__register_exitproc>:
    c1ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1f0:	ldr	r4, [pc, #148]	; (c288 <__register_exitproc+0x9c>)
    c1f2:	ldr	r5, [r4, #0]
    c1f4:	ldr.w	r4, [r5, #328]	; 0x148
    c1f8:	mov	r6, r0
    c1fa:	mov	r8, r1
    c1fc:	mov	sl, r2
    c1fe:	mov	r9, r3
    c200:	cbz	r4, c274 <__register_exitproc+0x88>
    c202:	ldr	r0, [r4, #4]
    c204:	cmp	r0, #31
    c206:	bgt.n	c238 <__register_exitproc+0x4c>
    c208:	adds	r3, r0, #1
    c20a:	cbz	r6, c22a <__register_exitproc+0x3e>
    c20c:	add.w	r5, r4, r0, lsl #2
    c210:	movs	r2, #1
    c212:	str.w	sl, [r5, #136]	; 0x88
    c216:	ldr.w	r1, [r4, #392]	; 0x188
    c21a:	lsls	r2, r0
    c21c:	orrs	r1, r2
    c21e:	cmp	r6, #2
    c220:	str.w	r1, [r4, #392]	; 0x188
    c224:	str.w	r9, [r5, #264]	; 0x108
    c228:	beq.n	c268 <__register_exitproc+0x7c>
    c22a:	adds	r0, #2
    c22c:	str	r3, [r4, #4]
    c22e:	str.w	r8, [r4, r0, lsl #2]
    c232:	movs	r0, #0
    c234:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c238:	ldr	r3, [pc, #80]	; (c28c <__register_exitproc+0xa0>)
    c23a:	cbz	r3, c27e <__register_exitproc+0x92>
    c23c:	mov.w	r0, #400	; 0x190
    c240:	bl	bb94 <malloc>
    c244:	mov	r4, r0
    c246:	cbz	r0, c27e <__register_exitproc+0x92>
    c248:	ldr.w	r3, [r5, #328]	; 0x148
    c24c:	movs	r7, #0
    c24e:	stmia.w	r0, {r3, r7}
    c252:	str.w	r4, [r5, #328]	; 0x148
    c256:	mov	r0, r7
    c258:	movs	r3, #1
    c25a:	str.w	r7, [r4, #392]	; 0x188
    c25e:	str.w	r7, [r4, #396]	; 0x18c
    c262:	cmp	r6, #0
    c264:	beq.n	c22a <__register_exitproc+0x3e>
    c266:	b.n	c20c <__register_exitproc+0x20>
    c268:	ldr.w	r1, [r4, #396]	; 0x18c
    c26c:	orrs	r2, r1
    c26e:	str.w	r2, [r4, #396]	; 0x18c
    c272:	b.n	c22a <__register_exitproc+0x3e>
    c274:	add.w	r4, r5, #332	; 0x14c
    c278:	str.w	r4, [r5, #328]	; 0x148
    c27c:	b.n	c202 <__register_exitproc+0x16>
    c27e:	mov.w	r0, #4294967295
    c282:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c286:	nop
    c288:	.word	0x200007c8
    c28c:	.word	0x0000bb95

0000c290 <_malloc_trim_r>:
    c290:	push	{r3, r4, r5, r6, r7, lr}
    c292:	ldr	r7, [pc, #140]	; (c320 <_malloc_trim_r+0x90>)
    c294:	mov	r4, r1
    c296:	mov	r6, r0
    c298:	bl	c1c0 <__malloc_lock>
    c29c:	ldr	r3, [r7, #8]
    c29e:	ldr	r5, [r3, #4]
    c2a0:	bic.w	r5, r5, #3
    c2a4:	subs	r1, r5, r4
    c2a6:	addw	r1, r1, #4079	; 0xfef
    c2aa:	bic.w	r1, r1, #4080	; 0xff0
    c2ae:	bic.w	r1, r1, #15
    c2b2:	sub.w	r4, r1, #4096	; 0x1000
    c2b6:	cmp.w	r4, #4096	; 0x1000
    c2ba:	blt.n	c2cc <_malloc_trim_r+0x3c>
    c2bc:	movs	r1, #0
    c2be:	mov	r0, r6
    c2c0:	bl	c1c8 <_sbrk_r>
    c2c4:	ldr	r3, [r7, #8]
    c2c6:	add	r3, r5
    c2c8:	cmp	r0, r3
    c2ca:	beq.n	c2d6 <_malloc_trim_r+0x46>
    c2cc:	mov	r0, r6
    c2ce:	bl	c1c4 <__malloc_unlock>
    c2d2:	movs	r0, #0
    c2d4:	pop	{r3, r4, r5, r6, r7, pc}
    c2d6:	negs	r1, r4
    c2d8:	mov	r0, r6
    c2da:	bl	c1c8 <_sbrk_r>
    c2de:	adds	r0, #1
    c2e0:	beq.n	c2fe <_malloc_trim_r+0x6e>
    c2e2:	ldr	r3, [pc, #64]	; (c324 <_malloc_trim_r+0x94>)
    c2e4:	ldr	r2, [r7, #8]
    c2e6:	ldr	r1, [r3, #0]
    c2e8:	subs	r5, r5, r4
    c2ea:	orr.w	r5, r5, #1
    c2ee:	mov	r0, r6
    c2f0:	subs	r1, r1, r4
    c2f2:	str	r5, [r2, #4]
    c2f4:	str	r1, [r3, #0]
    c2f6:	bl	c1c4 <__malloc_unlock>
    c2fa:	movs	r0, #1
    c2fc:	pop	{r3, r4, r5, r6, r7, pc}
    c2fe:	movs	r1, #0
    c300:	mov	r0, r6
    c302:	bl	c1c8 <_sbrk_r>
    c306:	ldr	r2, [r7, #8]
    c308:	subs	r3, r0, r2
    c30a:	cmp	r3, #15
    c30c:	ble.n	c2cc <_malloc_trim_r+0x3c>
    c30e:	ldr	r4, [pc, #24]	; (c328 <_malloc_trim_r+0x98>)
    c310:	ldr	r1, [pc, #16]	; (c324 <_malloc_trim_r+0x94>)
    c312:	ldr	r4, [r4, #0]
    c314:	orr.w	r3, r3, #1
    c318:	subs	r0, r0, r4
    c31a:	str	r3, [r2, #4]
    c31c:	str	r0, [r1, #0]
    c31e:	b.n	c2cc <_malloc_trim_r+0x3c>
    c320:	.word	0x2000114c
    c324:	.word	0x2000d8bc
    c328:	.word	0x20001558

0000c32c <_free_r>:
    c32c:	cmp	r1, #0
    c32e:	beq.n	c3bc <_free_r+0x90>
    c330:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c334:	mov	r5, r1
    c336:	mov	r8, r0
    c338:	bl	c1c0 <__malloc_lock>
    c33c:	ldr.w	r7, [r5, #-4]
    c340:	ldr	r1, [pc, #424]	; (c4ec <_free_r+0x1c0>)
    c342:	bic.w	r3, r7, #1
    c346:	sub.w	r4, r5, #8
    c34a:	adds	r2, r4, r3
    c34c:	ldr	r6, [r1, #8]
    c34e:	ldr	r0, [r2, #4]
    c350:	cmp	r2, r6
    c352:	bic.w	r0, r0, #3
    c356:	beq.n	c41e <_free_r+0xf2>
    c358:	lsls	r6, r7, #31
    c35a:	str	r0, [r2, #4]
    c35c:	bmi.n	c376 <_free_r+0x4a>
    c35e:	ldr.w	r7, [r5, #-8]
    c362:	subs	r4, r4, r7
    c364:	add.w	lr, r1, #8
    c368:	ldr	r5, [r4, #8]
    c36a:	cmp	r5, lr
    c36c:	add	r3, r7
    c36e:	beq.n	c450 <_free_r+0x124>
    c370:	ldr	r7, [r4, #12]
    c372:	str	r7, [r5, #12]
    c374:	str	r5, [r7, #8]
    c376:	adds	r5, r2, r0
    c378:	ldr	r5, [r5, #4]
    c37a:	lsls	r5, r5, #31
    c37c:	bpl.n	c404 <_free_r+0xd8>
    c37e:	orr.w	r2, r3, #1
    c382:	str	r2, [r4, #4]
    c384:	str	r3, [r4, r3]
    c386:	cmp.w	r3, #512	; 0x200
    c38a:	bcs.n	c3be <_free_r+0x92>
    c38c:	lsrs	r3, r3, #3
    c38e:	adds	r2, r3, #1
    c390:	ldr	r5, [r1, #4]
    c392:	ldr.w	r7, [r1, r2, lsl #3]
    c396:	str	r7, [r4, #8]
    c398:	movs	r0, #1
    c39a:	asrs	r3, r3, #2
    c39c:	lsl.w	r3, r0, r3
    c3a0:	add.w	r0, r1, r2, lsl #3
    c3a4:	orrs	r5, r3
    c3a6:	subs	r0, #8
    c3a8:	str	r0, [r4, #12]
    c3aa:	str	r5, [r1, #4]
    c3ac:	str.w	r4, [r1, r2, lsl #3]
    c3b0:	str	r4, [r7, #12]
    c3b2:	mov	r0, r8
    c3b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c3b8:	b.w	c1c4 <__malloc_unlock>
    c3bc:	bx	lr
    c3be:	lsrs	r2, r3, #9
    c3c0:	cmp	r2, #4
    c3c2:	bhi.n	c46c <_free_r+0x140>
    c3c4:	lsrs	r2, r3, #6
    c3c6:	add.w	r7, r2, #57	; 0x39
    c3ca:	lsls	r7, r7, #1
    c3cc:	add.w	r5, r2, #56	; 0x38
    c3d0:	add.w	r0, r1, r7, lsl #2
    c3d4:	ldr.w	r2, [r1, r7, lsl #2]
    c3d8:	ldr	r1, [pc, #272]	; (c4ec <_free_r+0x1c0>)
    c3da:	subs	r0, #8
    c3dc:	cmp	r0, r2
    c3de:	beq.n	c47c <_free_r+0x150>
    c3e0:	ldr	r1, [r2, #4]
    c3e2:	bic.w	r1, r1, #3
    c3e6:	cmp	r3, r1
    c3e8:	bcs.n	c3f0 <_free_r+0xc4>
    c3ea:	ldr	r2, [r2, #8]
    c3ec:	cmp	r0, r2
    c3ee:	bne.n	c3e0 <_free_r+0xb4>
    c3f0:	ldr	r0, [r2, #12]
    c3f2:	str	r0, [r4, #12]
    c3f4:	str	r2, [r4, #8]
    c3f6:	str	r4, [r0, #8]
    c3f8:	str	r4, [r2, #12]
    c3fa:	mov	r0, r8
    c3fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c400:	b.w	c1c4 <__malloc_unlock>
    c404:	ldr	r5, [r2, #8]
    c406:	ldr	r7, [pc, #232]	; (c4f0 <_free_r+0x1c4>)
    c408:	cmp	r5, r7
    c40a:	add	r3, r0
    c40c:	beq.n	c48e <_free_r+0x162>
    c40e:	ldr	r0, [r2, #12]
    c410:	str	r0, [r5, #12]
    c412:	orr.w	r2, r3, #1
    c416:	str	r5, [r0, #8]
    c418:	str	r2, [r4, #4]
    c41a:	str	r3, [r4, r3]
    c41c:	b.n	c386 <_free_r+0x5a>
    c41e:	lsls	r7, r7, #31
    c420:	add	r3, r0
    c422:	bmi.n	c434 <_free_r+0x108>
    c424:	ldr.w	r2, [r5, #-8]
    c428:	subs	r4, r4, r2
    c42a:	add	r3, r2
    c42c:	ldr	r0, [r4, #8]
    c42e:	ldr	r2, [r4, #12]
    c430:	str	r2, [r0, #12]
    c432:	str	r0, [r2, #8]
    c434:	ldr	r2, [pc, #188]	; (c4f4 <_free_r+0x1c8>)
    c436:	ldr	r2, [r2, #0]
    c438:	orr.w	r0, r3, #1
    c43c:	cmp	r3, r2
    c43e:	str	r0, [r4, #4]
    c440:	str	r4, [r1, #8]
    c442:	bcc.n	c3b2 <_free_r+0x86>
    c444:	ldr	r3, [pc, #176]	; (c4f8 <_free_r+0x1cc>)
    c446:	mov	r0, r8
    c448:	ldr	r1, [r3, #0]
    c44a:	bl	c290 <_malloc_trim_r>
    c44e:	b.n	c3b2 <_free_r+0x86>
    c450:	adds	r1, r2, r0
    c452:	ldr	r1, [r1, #4]
    c454:	lsls	r1, r1, #31
    c456:	bmi.n	c4e2 <_free_r+0x1b6>
    c458:	ldr	r1, [r2, #8]
    c45a:	ldr	r2, [r2, #12]
    c45c:	str	r2, [r1, #12]
    c45e:	add	r3, r0
    c460:	orr.w	r0, r3, #1
    c464:	str	r1, [r2, #8]
    c466:	str	r0, [r4, #4]
    c468:	str	r3, [r4, r3]
    c46a:	b.n	c3b2 <_free_r+0x86>
    c46c:	cmp	r2, #20
    c46e:	bhi.n	c4a0 <_free_r+0x174>
    c470:	add.w	r7, r2, #92	; 0x5c
    c474:	lsls	r7, r7, #1
    c476:	add.w	r5, r2, #91	; 0x5b
    c47a:	b.n	c3d0 <_free_r+0xa4>
    c47c:	asrs	r2, r5, #2
    c47e:	ldr	r3, [r1, #4]
    c480:	movs	r5, #1
    c482:	lsl.w	r2, r5, r2
    c486:	orrs	r3, r2
    c488:	str	r3, [r1, #4]
    c48a:	mov	r2, r0
    c48c:	b.n	c3f2 <_free_r+0xc6>
    c48e:	orr.w	r2, r3, #1
    c492:	str	r4, [r1, #20]
    c494:	str	r4, [r1, #16]
    c496:	str	r5, [r4, #12]
    c498:	str	r5, [r4, #8]
    c49a:	str	r2, [r4, #4]
    c49c:	str	r3, [r4, r3]
    c49e:	b.n	c3b2 <_free_r+0x86>
    c4a0:	cmp	r2, #84	; 0x54
    c4a2:	bhi.n	c4b2 <_free_r+0x186>
    c4a4:	lsrs	r2, r3, #12
    c4a6:	add.w	r7, r2, #111	; 0x6f
    c4aa:	lsls	r7, r7, #1
    c4ac:	add.w	r5, r2, #110	; 0x6e
    c4b0:	b.n	c3d0 <_free_r+0xa4>
    c4b2:	cmp.w	r2, #340	; 0x154
    c4b6:	bhi.n	c4c6 <_free_r+0x19a>
    c4b8:	lsrs	r2, r3, #15
    c4ba:	add.w	r7, r2, #120	; 0x78
    c4be:	lsls	r7, r7, #1
    c4c0:	add.w	r5, r2, #119	; 0x77
    c4c4:	b.n	c3d0 <_free_r+0xa4>
    c4c6:	movw	r0, #1364	; 0x554
    c4ca:	cmp	r2, r0
    c4cc:	bhi.n	c4dc <_free_r+0x1b0>
    c4ce:	lsrs	r2, r3, #18
    c4d0:	add.w	r7, r2, #125	; 0x7d
    c4d4:	lsls	r7, r7, #1
    c4d6:	add.w	r5, r2, #124	; 0x7c
    c4da:	b.n	c3d0 <_free_r+0xa4>
    c4dc:	movs	r7, #254	; 0xfe
    c4de:	movs	r5, #126	; 0x7e
    c4e0:	b.n	c3d0 <_free_r+0xa4>
    c4e2:	orr.w	r2, r3, #1
    c4e6:	str	r2, [r4, #4]
    c4e8:	str	r3, [r4, r3]
    c4ea:	b.n	c3b2 <_free_r+0x86>
    c4ec:	.word	0x2000114c
    c4f0:	.word	0x20001154
    c4f4:	.word	0x20001554
    c4f8:	.word	0x2000d8b8
    c4fc:	.word	0x00000000

0000c500 <___init_veneer>:
    c500:	ldr.w	pc, [pc]	; c504 <___init_veneer+0x4>
    c504:	.word	0x600015a9
	...

Disassembly of section .fini:

0000c510 <_fini>:
    c510:	push	{r3, r4, r5, r6, r7, lr}
    c512:	nop
