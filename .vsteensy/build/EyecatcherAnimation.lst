
C:\Users\stefa\Desktop\DesignLab\Eyecatcher\EyecatcherAnimation\.vsteensy\build/EyecatcherAnimation.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000d4e0 l    d  .fini	00000000 .fini
0000d4e4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
20000000 l    d  .data	00000000 .data
20001740 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
0000bad8 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
0000a458 l     F .text.itcm	0000005c schedule_transfer
0000a4b4 l     F .text.itcm	00000030 run_callbacks
0000a4e4 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
0000a57c l     F .text.itcm	00000544 isr
2000dc68 l     O .bss	00000004 endpointN_notify_mask
2000dc70 l     O .bss	00000004 endpoint0_notify_mask
2000dc74 l     O .bss	00000001 usb_reboot_timer
2000dc78 l     O .bss	00000008 endpoint0_setupdata
2000dc80 l     O .bss	00000008 reply_buffer
2000dc88 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
2000dc9c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
2000e4e0 l     O .bss	00000004 s_hotTemp
2000e4e4 l     O .bss	00000004 s_hot_ROOM
2000e4e8 l     O .bss	00000004 s_roomC_hotC
2000e4ec l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/fpv5-d16/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001740 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001744 l       .bss	00000000 object.8610
60001600 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000f3c l     F .text.itcm	00000958 Screen::iterate_animation() [clone .part.16]
000034f0 l     F .text.itcm	000051fc _GLOBAL__sub_I_bri_level
20000944 l     O .data	00000240 background_B
20003bd8 l     O .bss	00001200 mask_B
20000b84 l     O .data	00000240 background_A
2000017c l     O .data	00000400 dim_curve
20009c0c l     O .bss	00001200 mask_A
00000000 l    df *ABS*	00000000 TimeAlarms.cpp
00009c24 l     F .text.itcm	0000000c _GLOBAL__sub_I__ZN10AlarmClassC2Ev
00000000 l    df *ABS*	00000000 Adafruit_NeoPixel.cpp
000096e0 l     F .text.itcm	00000066 Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009d64 l     F .text.itcm	00000028 rx_event
00009d8c l     F .text.itcm	00000070 usb_serial_flush_callback
00009dfc l     F .text.itcm	0000015c usb_serial_write.part.1
2000d318 l     O .bss	00000700 txbuffer
2000da18 l     O .bss	00000001 tx_noautoflush
2000da19 l     O .bss	00000001 tx_head
2000da1c l     O .bss	000000c0 rx_buffer
2000dadc l     O .bss	00000006 rx_index
2000dae4 l     O .bss	00000006 rx_count
2000db00 l     O .bss	00000060 rx_transfer
2000db60 l     O .bss	00000002 tx_available
2000db80 l     O .bss	000000e0 tx_transfer
2000dc60 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
0000adcc l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 usb_desc.c
20000dcc l     O .data	0000000a qualifier_descriptor
20000df0 l     O .data	00000043 config_descriptor
20000e34 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 WString.cpp
0000b564 l     F .text.itcm	0000001a String::operator=(char const*) [clone .part.3]
00000000 l    df *ABS*	00000000 yield.cpp
2000dcbd l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 WMath.cpp
0000b724 l     F .text.itcm	0000007c random(unsigned long) [clone .part.0]
2000dcc0 l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
2000dcc4 l     O .bss	00000400 tx_buffer1
200008a8 l     O .data	0000005c UART6_Hardware
2000e0c4 l     O .bss	00000400 rx_buffer1
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20000ef8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 main
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
600015b8 l     F .text.progmem	00000008 __memset_veneer
600015c0 l     F .text.progmem	00000008 __setup_veneer
600015c8 l     F .text.progmem	00000008 __delay_veneer
600015d0 l     F .text.progmem	00000008 ____libc_init_array_veneer
600015d8 l     F .text.progmem	00000008 __set_arm_clock_veneer
600015e0 l     F .text.progmem	00000008 __pwm_init_veneer
600015e8 l     F .text.progmem	00000008 __loop_veneer
600015f0 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600015f8 l     F .text.progmem	00000008 __yield_veneer
0000d4d8 l     F .text.itcm	00000008 ___init_veneer
0000a080 g     F .text.itcm	00000014 usb_serial_available
0000cfbc g     F .text.itcm	000000ba strcpy
0000b684  w    F .text.itcm	000000a0 yield
0000bea8 g     F .text.itcm	000000a8 sqrt
2000dc6c g     O .bss	00000004 usb_timer1_callback
20000dd8 g     O .data	00000018 usb_string_manufacturer_name_default
2000dca0 g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
00009b6c g     F .text.itcm	00000052 Adafruit_NeoPixel::setBrightness(unsigned char)
20001760 g     O .bss	00000004 sinceBeam
0000baa4 g     F .text.itcm	00000020 Print::println()
0000b7b4 g     F .text.itcm	00000014 random(long, long)
00009bcc g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000c8b4 g     F .text.itcm	00000002 __malloc_unlock
60001354 g     F .text.progmem	00000058 analog_init
20000dc8 g     O .data	00000004 F_CPU_ACTUAL
0000b468 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000c74c g     F .text.itcm	000000c6 memmove
0000b940 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000af10 g     F .text.itcm	00000038 HardwareSerial::peek()
20005340 g     O .bss	00000004 sinceFadeUpdate
2000e4d8 g     O .bss	00000001 EventResponder::runningFromYield
2000d254 g     O .bss	000000c4 Alarm
0000ba2c g     F .text.itcm	0000002c Print::write(unsigned char const*, unsigned int)
0000c160 g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
2000e4c4 g     O .bss	00000004 EventResponder::firstInterrupt
0000ac08 g     F .text.itcm	00000028 usb_transfer_status
20000edc g     O .data	00000001 usb_enable_serial_event_processing
20000e7c g     O .data	00000060 Serial1
0000ba10  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000598 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
0000d4e0 g       .text.itcm	00000000 _etext
00009a5c g     F .text.itcm	0000004e Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)
20001740 g       .bss	00000000 _sbss
00009768 g     F .text.itcm	00000022 Adafruit_NeoPixel::begin()
0000aef4 g     F .text.itcm	0000001c HardwareSerial::available()
60001610 g       *ABS*	00000000 _stextload
000087e0 g     F .text.itcm	00000efe loop
20005344 g     O .bss	00001224 sat_automaton_B
200089c0 g     O .bss	00000014 synapse_A
0000aac0 g     F .text.itcm	00000064 usb_config_rx
0000b7d4  w    F .text.itcm	0000000c serialEvent1()
0000b8d8 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00009814 g     F .text.itcm	000001e0 Adafruit_NeoPixel::show()
0000b310 g     F .text.itcm	00000004 HardwareSerial::write(unsigned char)
2000e4c8 g     O .bss	00000004 EventResponder::lastInterrupt
00009c30 g     F .text.itcm	00000134 memcpy
0000b490 g     F .text.itcm	0000002c HardwareSerial::disableSerialEvents()
2000dc98 g     O .bss	00000004 systick_millis_count
2000dc90 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
20000dd8  w    O .data	00000018 usb_string_manufacturer_name
0000c1bc g     F .text.itcm	00000010 malloc
200089d4 g     O .bss	00000014 synapse_B
0000b874  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
60001268 g     F .text.progmem	000000ec usb_init
000004f0 g     F .text.itcm	00000594 updateBeams()
2000e4f8 g     O .bss	00000004 __malloc_top_pad
0000ac30 g     F .text.itcm	0000002c rtc_set
20010280 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
2000093c g     O .data	00000000 .hidden __dso_handle
0000978c g     F .text.itcm	00000036 Adafruit_NeoPixel::updateLength(unsigned short)
20000000 g       .data	00000000 _sdata
0000b4cc g     F .text.itcm	0000002a String::reserve(unsigned int)
0000cca8 g     F .text.itcm	00000024 _sbrk_r
60001034 g     F .text.progmem	00000234 ResetHandler
0000a010 g     F .text.itcm	0000004c usb_serial_getchar
2000e524 g     O .bss	00000008 usb_cdc_line_coding
0000adf0 g     F .text.itcm	0000000a digitalWrite
2000e4d0 g     O .bss	00000004 EventResponder::lastYield
000086ec g     F .text.itcm	000000f4 readMessages()
2000e4f4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000adfc g     F .text.itcm	00000080 pinMode
0000b650 g     F .text.itcm	00000034 String::getBytes(unsigned char*, unsigned int, unsigned int) const
200089b0 g     O .bss	00000010 readBuffer
20280000 g       .bss	00000000 _heap_end
20000ef4 g     O .data	00000001 __fdlib_version
2000e4d4 g     O .bss	00000004 EventResponder::firstYield
20000938 g     O .data	00000004 _global_impure_ptr
0000c8c8 g     F .text.itcm	000003de _realloc_r
0000c16c g     F .text.itcm	00000050 __libc_init_array
0000bae0  w    F .text.itcm	0000008c HardFault_HandlerC
0000b9f8  w    F .text.itcm	00000004 usb_serial_class::clear()
0000bb6c g     F .text.itcm	00000030 _sbrk
6000eafc g       *ABS*	00000000 _sdataload
2000e4dc g     O .bss	00000004 MillisTimer::listWaiting
20000ef0 g     O .data	00000004 __brkval
2000dc61 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000007c  w    F .text.itcm	0000015c Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
600015a8 g     F .text.progmem	00000000 _init
00009f58 g     F .text.itcm	00000002 usb_serial_reset
0000b4bc g     F .text.itcm	0000000e String::~String()
20010700 g       .bss	00000000 _ebss
0000aed4 g     F .text.itcm	00000020 HardwareSerial::availableForWrite()
0000b594 g     F .text.itcm	00000070 String::append(char const*, unsigned int)
0000c0e4 g     F .text.itcm	00000010 calloc
20200000 g       .bss.dma	00000000 _heap_start
2000ae0c g     O .bss	00001224 bg_automaton_A
0000b4f8 g     F .text.itcm	00000042 String::copy(char const*, unsigned int)
000097c4 g     F .text.itcm	00000050 Adafruit_NeoPixel::updateType(unsigned short)
00000002 g       *ABS*	00000000 _itcm_block_count
0000b250 g     F .text.itcm	000000c0 HardwareSerial::write9bit(unsigned long)
2000f000 g     O .bss	00000020 endpoint0_transfer_data
0000bbec g     F .text.itcm	000002b8 pwm_init
0000afb4 g     F .text.itcm	0000001a HardwareSerial::flush()
0000b4bc g     F .text.itcm	0000000e String::~String()
6000144c g     F .text.progmem	00000064 usb_pll_start
6000102c g     O .text.progmem	00000008 vector_table
00009ab8 g     F .text.itcm	000000ae Adafruit_NeoPixel::getPixelColor(unsigned short) const
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e52c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000abbc g     F .text.itcm	00000028 usb_transmit
0000b9d8 g     F .text.itcm	00000020 systick_isr
20000ee0 g     O .data	00000010 Serial
0000b7c8 g     F .text.itcm	0000000c IRQHandler_Serial1
2000dcbc g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
20000884 g     O .data	00000024 vtable for HardwareSerial
0000ba18  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000a05c g     F .text.itcm	00000024 usb_serial_peekchar
0000a1cc g     F .text.itcm	0000028c set_arm_clock
2000dc94 g     O .bss	00000004 systick_cycle_count
20000e64 g     O .data	00000016 usb_string_serial_number_default
0000d304 g     F .text.itcm	000001d0 _free_r
0000ba08  w    F .text.itcm	00000004 usb_serial_class::flush()
20001730 g     O .data	00000004 __malloc_sbrk_base
0000ba00  w    F .text.itcm	00000004 usb_serial_class::read()
0000ab8c g     F .text.itcm	0000002e usb_prepare_transfer
0000bac8 g     F .text.itcm	00000018 unused_interrupt_vector
600014b0 g     F .text.progmem	000000f8 tempmon_init
2000dc64 g     O .bss	00000004 usb_timer0_callback
0000ba20  w    F .text.itcm	0000000c serialEvent()
0000d1c4 g     F .text.itcm	000000a4 __register_exitproc
00009bcc g     F .text.itcm	00000058 TimeAlarmsClass::TimeAlarmsClass()
0000a094 g     F .text.itcm	0000003c usb_serial_flush_input
0000a0d0 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
0000d15c g     F .text.itcm	00000066 strncpy
2000e4fc g     O .bss	00000028 __malloc_current_mallinfo
200089e8 g     O .bss	00001224 grow_automaton_A
0000c8b8 g     F .text.itcm	00000010 realloc
000002a8 g     F .text.itcm	00000248 addPixelColor(Adafruit_NeoPixel*, int, Color)
0000c154 g     F .text.itcm	0000000c __cxa_atexit
2000778c g     O .bss	00001224 sat_automaton_A
0000b7e0 g     F .text.itcm	00000014 serial_event_check_serial1()
0000b7ac g     F .text.itcm	00000008 random(unsigned long)
20000904  w    O .data	00000028 vtable for usb_serial_class
0000b53c g     F .text.itcm	00000026 String::String(char const*)
20003bc4 g     O .bss	00000014 matrix_B
2000e4cc g     O .bss	00000004 MillisTimer::listActive
2000175c g     O .bss	00000001 incomingByte
20001324 g     O .data	00000408 __malloc_av_
0000a160 g     F .text.itcm	0000006c usb_serial_flush_output
0000c8b0 g     F .text.itcm	00000002 __malloc_lock
20010400 g     O .bss	000002c0 _VectorsRam
0000c0f4 g     F .text.itcm	0000005e _calloc_r
0000b624 g     F .text.itcm	0000002c String::equals(char const*) const
00009b68 g     F .text.itcm	00000004 Adafruit_NeoPixel::numPixels() const
20000940 g     O .data	00000004 bri_level
0000c814 g     F .text.itcm	0000009a memset
2000e4f0 g     O .bss	00000004 __malloc_max_total_mem
000001d8 g     F .text.itcm	000000d0 newBeam(Adafruit_NeoPixel*, bool, Color, float, int)
0000007c  w    F .text.itcm	0000015c Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])
00000a88 g     F .text.itcm	000004b4 updateScreensFade()
0000c0d4 g     F .text.itcm	00000004 matherr
0000ae7c g     F .text.itcm	00000058 usb_init_serialnumber
6000160c g       .text.progmem	00000000 __init_array_end
0000c1dc g     F .text.itcm	00000570 _malloc_r
0000b7f4 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
20003bb0 g     O .bss	00000014 matrix_A
0000ad1c g     F .text.itcm	00000054 micros
0000d268 g     F .text.itcm	0000009c _malloc_trim_r
20001768 g     O .bss	00001224 fg_automaton_A
20000e60 g     O .data	00000004 string0
0000a0fc g     F .text.itcm	00000018 usb_serial_write
0000ba04  w    F .text.itcm	00000004 usb_serial_class::available()
0000cce8 g     F .text.itcm	000002dc strcmp
00009bc0 g     F .text.itcm	0000000a Adafruit_NeoPixel::clear()
20010000 g     O .bss	00000280 endpoint_queue_head
20000e48  w    O .data	00000016 usb_string_product_name
0000ac5c g     F .text.itcm	000000c0 delay
0000d4e0 g     F .fini	00000000 _fini
0000b580 g     F .text.itcm	00000014 String::operator=(char const*)
60001020 g     O .text.progmem	0000000c BootData
2000c030 g     O .bss	00001224 bg_automaton_B
0000b53c g     F .text.itcm	00000026 String::String(char const*)
20001320 g     O .data	00000004 _impure_ptr
60001600 g       .text.progmem	00000000 __preinit_array_end
000099f4 g     F .text.itcm	0000003c Adafruit_NeoPixel::setPin(unsigned char)
0000b7a0 g     F .text.itcm	0000000c randomSeed(unsigned long)
0000b314 g     F .text.itcm	00000152 HardwareSerial::IRQHandler()
00001898 g     F .text.itcm	00001c58 setup
20000818 g     O .data	0000006c usb_descriptor_list
20004fb0 g     O .bss	000001d8 screen_B
20006568 g     O .bss	00001224 grow_automaton_B
0000bf50 g     F .text.itcm	00000184 __ieee754_sqrt
20070000 g       .bss	00000000 _estack
0000a114 g     F .text.itcm	0000004c usb_serial_write_buffer_free
2000298c g     O .bss	00001224 fg_automaton_B
20004dd8 g     O .bss	000001d8 screen_A
00009f5c g     F .text.itcm	000000b4 usb_serial_configure
20001740 g       .data	00000000 _edata
00009a30 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
0000ba0c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000afd0 g     F .text.itcm	00000040 nvic_execution_priority()
00009aac g     F .text.itcm	0000000c Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)
0000bb9c g     F .text.itcm	0000004e ultoa
20001764 g     O .bss	00000004 sinceBeamUpdate
20005188 g     O .bss	000001b8 beams
0000bac4 g     F .text.itcm	00000004 operator new(unsigned int)
0000b890 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
2000172c g     O .data	00000004 __malloc_trim_threshold
0000b9fc  w    F .text.itcm	00000004 usb_serial_class::peek()
0000af48 g     F .text.itcm	0000006a HardwareSerial::read()
60001600 g       .text.progmem	00000000 __init_array_start
0000ad70 g     F .text.itcm	0000005c analogRead
20000dc4 g     O .data	00000004 F_BUS_ACTUAL
2000057c g     O .data	0000001c pin_to_channel
00009a30 g     F .text.itcm	0000002c Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)
00000000 g       .text.itcm	00000000 _stext
0000d080 g     F .text.itcm	000000dc strlen
20000e48 g     O .data	00000016 usb_string_product_name_default
0000ba58 g     F .text.itcm	0000004a Print::print(String const&)
600013ac g     F .text.progmem	000000a0 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000b010 g     F .text.itcm	00000240 HardwareSerial::begin(unsigned long, unsigned short)
60001600 g       .text.progmem	00000000 __preinit_array_start
0000abe4 g     F .text.itcm	00000024 usb_receive
00009748 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
0000b604 g     F .text.itcm	0000001e String::append(char)
00009748 g     F .text.itcm	00000020 Adafruit_NeoPixel::~Adafruit_NeoPixel()
00010230 g       *ABS*	00000000 _flashimagelen
0000c0d8 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000b8d4 g     F .text.itcm	00000004 pendablesrvreq_isr
0000ab24 g     F .text.itcm	00000068 usb_config_tx
0000c1cc g     F .text.itcm	00000010 free
20000e64  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`0.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #424]	; (600011e0 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00000007;
60001036:	movs	r0, #7
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001038:	ldr	r4, [pc, #424]	; (600011e4 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR16 = 0x00000007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000103a:	mov.w	r1, #11141120	; 0xaa0000
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #424]	; (600011e8 <ResetHandler+0x1b4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001040:	str	r4, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00000007;
60001042:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #416]	; (600011ec <ResetHandler+0x1b8>)
6000104a:	ldr	r1, [pc, #420]	; (600011f0 <ResetHandler+0x1bc>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #416]	; (600011f4 <ResetHandler+0x1c0>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #388]	; (600011f8 <ResetHandler+0x1c4>)
60001072:	ldr	r1, [pc, #392]	; (600011fc <ResetHandler+0x1c8>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #388]	; (60001200 <ResetHandler+0x1cc>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #360]	; (60001204 <ResetHandler+0x1d0>)
6000109a:	ldr	r3, [pc, #364]	; (60001208 <ResetHandler+0x1d4>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #336]	; (6000120c <ResetHandler+0x1d8>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #336]	; (60001210 <ResetHandler+0x1dc>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #332]	; (60001214 <ResetHandler+0x1e0>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #324]	; (60001218 <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #324]	; (6000121c <ResetHandler+0x1e8>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #320]	; (60001220 <ResetHandler+0x1ec>)
600010e0:	mov.w	r5, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r0, [pc, #316]	; (60001224 <ResetHandler+0x1f0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r1, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	r8, [pc, #376]	; 60001264 <ResetHandler+0x230>
600010ee:	ldr	r3, [pc, #312]	; (60001228 <ResetHandler+0x1f4>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr	r7, [pc, #312]	; (6000122c <ResetHandler+0x1f8>)
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f2:	ldr	r6, [pc, #316]	; (60001230 <ResetHandler+0x1fc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	str.w	r8, [r3]

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010f8:	str.w	r5, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001100:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001104:	str.w	r6, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001108:	ldr	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000110a:	ldr	r2, [pc, #212]	; (600011e0 <ResetHandler+0x1ac>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000110c:	bic.w	r3, r3, #127	; 0x7f
60001110:	orr.w	r3, r3, #64	; 0x40
60001114:	str	r3, [r0, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001116:	ldr	r3, [r0, #36]	; 0x24
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r0, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001122:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001124:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001126:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001128:	str	r1, [r2, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000112a:	bl	600013ac <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000112e:	ldr	r1, [pc, #260]	; (60001234 <ResetHandler+0x200>)
60001130:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001132:	ldr	r3, [pc, #260]	; (60001238 <ResetHandler+0x204>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001134:	ldr	r2, [pc, #260]	; (6000123c <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001136:	str	r0, [r1, #0]
	SYST_CVR = 0;
60001138:	movs	r0, #0
6000113a:	str	r0, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113c:	movs	r0, #3
6000113e:	str.w	r0, [r1, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001142:	ldr	r0, [pc, #252]	; (60001240 <ResetHandler+0x20c>)
60001144:	str.w	r0, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001148:	ldr.w	r3, [r1, #3560]	; 0xde8
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r2, [r8, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	orr.w	r3, r3, #16777216	; 0x1000000
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001154:	ldr	r2, [pc, #236]	; (60001244 <ResetHandler+0x210>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001156:	ldr	r0, [pc, #240]	; (60001248 <ResetHandler+0x214>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	str.w	r3, [r1, #3560]	; 0xde8
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r3, [r2, #0]

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115e:	str.w	r0, [r8, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001162:	orr.w	r3, r3, #1
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #228]	; (6000124c <ResetHandler+0x218>)
60001168:	ldr	r1, [pc, #228]	; (60001250 <ResetHandler+0x21c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r3, [r0, #0]
6000116e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001170:	bl	6000144c <usb_pll_start>

__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001174:	str.w	r5, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001178:	ldr	r0, [pc, #216]	; (60001254 <ResetHandler+0x220>)
__attribute__((section(".progmem")))
void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117a:	str.w	r7, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000117e:	str.w	r5, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001182:	str.w	r6, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
	
	set_arm_clock(600000000);
60001186:	bl	600015d8 <__set_arm_clock_veneer>
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000118a:	ldr	r3, [pc, #204]	; (60001258 <ResetHandler+0x224>)
6000118c:	ldr	r2, [r3, #56]	; 0x38
6000118e:	lsls	r2, r2, #31
60001190:	bmi.n	600011a4 <ResetHandler+0x170>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001192:	movw	r2, #11797	; 0x2e15
	//set_arm_clock(984000000); Ludicrous Speed

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001196:	ldr	r1, [pc, #196]	; (6000125c <ResetHandler+0x228>)
60001198:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000119a:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000119c:	ldr	r2, [r3, #56]	; 0x38
6000119e:	orr.w	r2, r2, #1
600011a2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011a4:	ldr	r2, [pc, #176]	; (60001258 <ResetHandler+0x224>)
600011a6:	ldr	r4, [pc, #184]	; (60001260 <ResetHandler+0x22c>)
600011a8:	ldr	r3, [r2, #8]
600011aa:	orr.w	r3, r3, #65537	; 0x10001
600011ae:	str	r3, [r2, #8]
	// 		return ((hi2 << 27) | (lo2 >> 5))/1.024;
	// 	}
	// 	hi1 = hi2;
	// 	lo1 = lo2;
	// }
	return systick_millis_count;
600011b0:	ldr	r3, [r4, #0]

	while (millis() < 20) ; // wait at least 20ms before starting USB
600011b2:	cmp	r3, #19
600011b4:	bls.n	600011b0 <ResetHandler+0x17c>
	usb_init();
600011b6:	bl	60001268 <usb_init>
	analog_init();
600011ba:	bl	60001354 <analog_init>
	pwm_init();
600011be:	bl	600015e0 <__pwm_init_veneer>
	tempmon_init();
600011c2:	bl	600014b0 <tempmon_init>
600011c6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600011c8:	cmp.w	r3, #300	; 0x12c
600011cc:	bcc.n	600011c6 <ResetHandler+0x192>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011ce:	bl	600015d0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	setup();
600011d2:	bl	600015c0 <__setup_veneer>
	//printf("after setup\n");
	while (1) {
		//printf("loop\n");
		loop();
600011d6:	bl	600015e8 <__loop_veneer>
		yield();
600011da:	bl	600015f8 <__yield_veneer>
600011de:	b.n	600011d6 <ResetHandler+0x1a2>
600011e0:	.word	0x400ac000
600011e4:	.word	0xaaaaaaaf
600011e8:	.word	0x20070000
600011ec:	.word	0x00000000
600011f0:	.word	0x60001610
600011f4:	.word	0x0000d4e0
600011f8:	.word	0x20000000
600011fc:	.word	0x6000eafc
60001200:	.word	0x20001740
60001204:	.word	0x20001740
60001208:	.word	0x20010700
6000120c:	.word	0xe000ed88
60001210:	.word	0x200103fc
60001214:	.word	0x0000bac9
60001218:	.word	0xe000e400
6000121c:	.word	0xe000e4a0
60001220:	.word	0x400d8000
60001224:	.word	0x400fc000
60001228:	.word	0xe000ed08
6000122c:	.word	0x2018101b
60001230:	.word	0x13110d0c
60001234:	.word	0xe000e014
60001238:	.word	0xe000e018
6000123c:	.word	0x0000b8d5
60001240:	.word	0x20200000
60001244:	.word	0xe0001000
60001248:	.word	0x0000b9d9
6000124c:	.word	0xe0001004
60001250:	.word	0x2000dc94
60001254:	.word	0x23c34600
60001258:	.word	0x400d4000
6000125c:	.word	0x56c00000
60001260:	.word	0x2000dc98
60001264:	.word	0x20010400

60001268 <usb_init>:
void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001268:	ldr	r3, [pc, #192]	; (6000132c <usb_init+0xc4>)
6000126a:	movw	r2, #3937	; 0xf61
static void run_callbacks(endpoint_t *ep);


__attribute__((section(".progmem")))
void usb_init(void)
{
6000126e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001270:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001274:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001278:	bl	600015f0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000127c:	ldr	r1, [pc, #176]	; (60001330 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000127e:	ldr	r0, [pc, #180]	; (60001334 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001280:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001284:	ldr	r4, [pc, #176]	; (60001338 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001286:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000128a:	ldr	r3, [pc, #176]	; (6000133c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000128c:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001290:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001294:	ldr	r2, [r4, #0]
60001296:	ands	r3, r2
60001298:	cbnz	r3, 600012a2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000129a:	ldr.w	r3, [r0, #424]	; 0x1a8
6000129e:	lsls	r2, r3, #30
600012a0:	beq.n	600012d8 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012a2:	ldr	r3, [pc, #144]	; (60001334 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012a4:	mov.w	r1, #2147483648	; 0x80000000
600012a8:	ldr	r2, [pc, #140]	; (60001338 <usb_init+0xd0>)
600012aa:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ac:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ae:	ldr.w	r1, [r3, #320]	; 0x140
600012b2:	orr.w	r1, r1, #2
600012b6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ba:	ldr.w	r3, [r2, #320]	; 0x140
600012be:	lsls	r3, r3, #30
600012c0:	bmi.n	600012ba <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012c2:	mov.w	r0, #131072	; 0x20000
600012c6:	ldr	r1, [pc, #120]	; (60001340 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012c8:	ldr	r3, [pc, #108]	; (60001338 <usb_init+0xd0>)
600012ca:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012ce:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d0:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012d2:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600012d4:	bl	600015c8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012d8:	ldr	r5, [pc, #104]	; (60001344 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012da:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012dc:	ldr	r3, [pc, #88]	; (60001338 <usb_init+0xd0>)
600012de:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012e2:	ldr	r4, [pc, #80]	; (60001334 <usb_init+0xcc>)
600012e4:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600012e6:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012e8:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600012ea:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012ec:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600012ee:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600012f2:	mov.w	r2, #640	; 0x280
600012f6:	bl	600015b8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600012fa:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600012fe:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001302:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001306:	ldr	r2, [pc, #64]	; (60001348 <usb_init+0xe0>)
60001308:	ldr	r1, [pc, #64]	; (6000134c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000130a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000130c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000130e:	str.w	r5, [r4, #344]	; 0x158
60001312:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001316:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000131a:	ldr	r2, [pc, #52]	; (60001350 <usb_init+0xe8>)
6000131c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001320:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001322:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001324:	str.w	r3, [r4, #320]	; 0x140
60001328:	pop	{r4, r5, r6, pc}
6000132a:	nop
6000132c:	.word	0x400d8000
60001330:	.word	0x400fc000
60001334:	.word	0x402e0000
60001338:	.word	0x400d9000
6000133c:	.word	0x001e1c00
60001340:	.word	0xe000e28c
60001344:	.word	0x20010000
60001348:	.word	0x20010400
6000134c:	.word	0x0000a57d
60001350:	.word	0xe000e10c

60001354 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001354:	ldr	r3, [pc, #68]	; (6000139c <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001356:	ldr	r1, [pc, #72]	; (600013a0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001358:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000135a:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000135c:	orr.w	r0, r0, #196608	; 0x30000

#define MAX_ADC_CLOCK 20000000

__attribute__((section(".progmem")))
void analog_init(void)
{
60001360:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001362:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001364:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001368:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000136a:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000136c:	orr.w	r0, r0, #768	; 0x300
60001370:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001372:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001374:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001376:	ldr	r3, [r2, #72]	; 0x48
60001378:	lsls	r3, r3, #24
6000137a:	bmi.n	60001376 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000137c:	ldr	r3, [pc, #36]	; (600013a4 <analog_init+0x50>)
6000137e:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001382:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001384:	ldr	r2, [pc, #24]	; (600013a0 <analog_init+0x4c>)
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
60001386:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001388:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000138a:	ldr	r3, [r2, #72]	; 0x48
6000138c:	ands.w	r3, r3, #128	; 0x80
60001390:	bne.n	6000138a <analog_init+0x36>
	calibrating = 0;
60001392:	ldr	r2, [pc, #20]	; (600013a8 <analog_init+0x54>)
60001394:	strb	r3, [r2, #0]
}
60001396:	pop	{r4, r5}
60001398:	bx	lr
6000139a:	nop
6000139c:	.word	0x400fc000
600013a0:	.word	0x400c4000
600013a4:	.word	0x400c8000
600013a8:	.word	0x2000dc9c

600013ac <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

__attribute__((section(".progmem")))
void configure_cache(void)
{
600013ac:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013ae:	ldr	r2, [pc, #100]	; (60001414 <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b2:	ldr	r3, [pc, #100]	; (60001418 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013b4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013b8:	ldr	r0, [pc, #96]	; (6000141c <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ba:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013bc:	ldr	r6, [pc, #96]	; (60001420 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013be:	ldr	r5, [pc, #100]	; (60001424 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013c0:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c2:	ldr	r7, [pc, #100]	; (60001428 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600013c4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013c8:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600013ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013cc:	ldr	r6, [pc, #92]	; (6000142c <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ce:	ldr	r5, [pc, #96]	; (60001430 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600013d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013d4:	ldr	r7, [pc, #92]	; (60001434 <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d8:	ldr	r6, [pc, #92]	; (60001438 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013da:	ldr	r5, [pc, #96]	; (6000143c <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600013dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e0:	ldr	r7, [pc, #92]	; (60001440 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600013e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013e4:	ldr	r6, [pc, #92]	; (60001444 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013e6:	ldr	r5, [pc, #96]	; (60001448 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600013ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600013f0:	dsb	sy
	asm("isb");
600013f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600013f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600013fc:	dsb	sy
	asm("isb");
60001400:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001404:	ldr.w	r3, [r2, #-136]
60001408:	orr.w	r3, r3, #196608	; 0x30000
6000140c:	str.w	r3, [r2, #-136]
60001410:	pop	{r4, r5, r6, r7, pc}
60001412:	nop
60001414:	.word	0xe000ed9c
60001418:	.word	0xe000eda0
6000141c:	.word	0xe000ed94
60001420:	.word	0x03080025
60001424:	.word	0x00200011
60001428:	.word	0x07020021
6000142c:	.word	0x20000012
60001430:	.word	0x13080025
60001434:	.word	0x20200013
60001438:	.word	0x130b0027
6000143c:	.word	0x40000014
60001440:	.word	0x13100033
60001444:	.word	0x60000015
60001448:	.word	0x070b002f

6000144c <usb_pll_start>:
}


__attribute__((section(".progmem")))
void usb_pll_start()
{
6000144c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000144e:	ldr	r2, [pc, #92]	; (600014ac <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001450:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001452:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001456:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000145a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000145e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001462:	movw	r0, #12354	; 0x3042

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001466:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001468:	tst.w	r3, #2
6000146c:	beq.n	6000147c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000146e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001470:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001472:	str	r0, [r2, #24]

__attribute__((section(".progmem")))
void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001474:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001476:	tst.w	r3, #2
6000147a:	bne.n	6000146e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000147c:	tst.w	r3, #8192	; 0x2000
60001480:	bne.n	60001486 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001482:	str	r5, [r2, #20]
			continue;
60001484:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001486:	tst.w	r3, #4096	; 0x1000
6000148a:	bne.n	60001490 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000148c:	str	r6, [r2, #20]
			continue;
6000148e:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001490:	cmp	r3, #0
60001492:	bge.n	60001466 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001494:	tst.w	r3, #65536	; 0x10000
60001498:	beq.n	6000149e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000149a:	str	r1, [r2, #24]
			continue;
6000149c:	b.n	60001466 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000149e:	lsls	r3, r3, #25
600014a0:	bmi.n	600014a6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014a2:	str	r7, [r2, #20]
			continue;
600014a4:	b.n	60001466 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014a6:	pop	{r4, r5, r6, r7}
600014a8:	bx	lr
600014aa:	nop
600014ac:	.word	0x400d8000

600014b0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014b0:	ldr	r2, [pc, #216]	; (6000158c <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014b2:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014b4:	ldr	r1, [pc, #216]	; (60001590 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b6:	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ba:	ldr	r3, [r2, #0]
600014bc:	bic.w	r3, r3, #1
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

__attribute__((section(".progmem")))
void tempmon_init(void)
{
600014c0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014c2:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014c4:	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014c8:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014cc:	ldr.w	lr, [pc, #212]	; 600015a4 <tempmon_init+0xf4>
600014d0:	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014d2:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014d6:	ldr	r7, [pc, #188]	; (60001594 <tempmon_init+0xe4>)
600014d8:	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014dc:	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014e0:	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014e4:	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014ec:	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014f0:	vmov	s15, r0
600014f4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014f8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014fa:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014fe:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001502:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001506:	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001508:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000150c:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	ldr	r5, [pc, #132]	; (60001598 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001516:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001518:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151c:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001520:	ldr	r6, [pc, #120]	; (6000159c <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001522:	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001526:	ldr	r1, [pc, #120]	; (600015a0 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001528:	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000152a:	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000152c:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001530:	vmov	s15, r3
60001534:	vcvt.f32.u32	s15, s15
60001538:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000153c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001540:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001544:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001548:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000154c:	vmov	r3, s11
60001550:	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001554:	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001558:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	and.w	r1, r1, r0, lsl #16
60001562:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	orrs	r3, r1
6000156c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001570:	vmov	r3, s15
60001574:	ldr.w	r1, [r2, #272]	; 0x110
60001578:	ubfx	r3, r3, #0, #12
6000157c:	orrs	r3, r1
6000157e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001582:	ldr	r3, [r2, #0]
60001584:	orr.w	r3, r3, #2
60001588:	str	r3, [r2, #0]
6000158a:	pop	{r4, r5, r6, r7, pc}
6000158c:	.word	0x400d8180
60001590:	.word	0x401f4400
60001594:	.word	0x2000e4e8
60001598:	.word	0x2000e4e4
6000159c:	.word	0x2000e4ec
600015a0:	.word	0x0fff0000
600015a4:	.word	0x2000e4e0

600015a8 <_init>:
600015a8:	push	{r3, r4, r5, r6, r7, lr}
600015aa:	nop
600015ac:	pop	{r3, r4, r5, r6, r7}
600015ae:	pop	{r3}
600015b0:	mov	lr, r3
600015b2:	bx	lr
600015b4:			; <UNDEFINED> instruction: 0xffffffff

600015b8 <__memset_veneer>:
600015b8:	ldr.w	pc, [pc]	; 600015bc <__memset_veneer+0x4>
600015bc:	.word	0x0000c815

600015c0 <__setup_veneer>:
600015c0:	ldr.w	pc, [pc]	; 600015c4 <__setup_veneer+0x4>
600015c4:	.word	0x00001899

600015c8 <__delay_veneer>:
600015c8:	ldr.w	pc, [pc]	; 600015cc <__delay_veneer+0x4>
600015cc:	.word	0x0000ac5d

600015d0 <____libc_init_array_veneer>:
600015d0:	ldr.w	pc, [pc]	; 600015d4 <____libc_init_array_veneer+0x4>
600015d4:	.word	0x0000c16d

600015d8 <__set_arm_clock_veneer>:
600015d8:	ldr.w	pc, [pc]	; 600015dc <__set_arm_clock_veneer+0x4>
600015dc:	.word	0x0000a1cd

600015e0 <__pwm_init_veneer>:
600015e0:	ldr.w	pc, [pc]	; 600015e4 <__pwm_init_veneer+0x4>
600015e4:	.word	0x0000bbed

600015e8 <__loop_veneer>:
600015e8:	ldr.w	pc, [pc]	; 600015ec <__loop_veneer+0x4>
600015ec:	.word	0x000087e1

600015f0 <__usb_init_serialnumber_veneer>:
600015f0:	ldr.w	pc, [pc]	; 600015f4 <__usb_init_serialnumber_veneer+0x4>
600015f4:	.word	0x0000ae7d

600015f8 <__yield_veneer>:
600015f8:	ldr.w	pc, [pc]	; 600015fc <__yield_veneer+0x4>
600015fc:	.word	0x0000b685

60001600 <__init_array_start>:
60001600:	.word	0x00000045
60001604:	.word	0x000034f1
60001608:	.word	0x00009c25

6000160c <__init_array_end>:
6000160c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r0, #29
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	.word	0x0000d4e4

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	.short	0xb510
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	.word	0xb9036803
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000; nn++) ;
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 20000000; nn++) ;
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
      5c:	cmp	r3, #0
	// digitalWrite(13, LOW);
    for (nn = 0; nn < 10000000; nn++) ;
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      68:	movs	r0, r0
      6a:	.short	0x0000
      6c:	asrs	r4, r0, #29
      6e:	.short	0x2000
      70:	bmi.n	3c <__rtc_localtime+0xb>
      72:	movs	r0, r0
      74:	asrs	r0, r0, #29
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>:
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      80:	ldr	r6, [pc, #336]	; (1d4 <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])+0x158>)
      82:	.short	0xb083
      84:	mov	r4, r0
      86:	.short	0x4693
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG |= mode;
  ADC2_CFG |= mode1;
      88:	mov	r5, r6
      8a:	.short	0x9100
      8c:	str	r3, [sp, #4]
  
  if(num >= 4){
      8e:	mov	r7, r0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      90:	.word	0x0a02f04f
      94:	mov.w	r9, #5
      98:	.word	0x0801f04f
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      9c:	ldmia	r5!, {r0, r1, r2, r3}
      9e:	stmia	r7!, {r0, r1, r2, r3}
      a0:	ldmia.w	r5, {r0, r1}
      a4:	.word	0x250022a8
      a8:	stmia.w	r7, {r0, r1}
      ac:	add.w	r1, r6, #24
      b0:	add.w	r0, r4, #24
      b4:	.word	0xfdbcf009
      b8:	add.w	r1, r6, #192	; 0xc0
      bc:	add.w	r6, r6, #336	; 0x150
      c0:	add.w	r0, r4, #192	; 0xc0
      c4:	movs	r2, #144	; 0x90
      c6:	add.w	r7, r4, #336	; 0x150
      ca:	bl	9c30 <memcpy>
      ce:	ldmia.w	r6, {r0, r1, r2}
      d2:	stmia.w	r7, {r0, r1, r2}
      d6:	movs	r7, #3
      d8:	.word	0x915cf8c4
      dc:	str.w	r8, [r4, #352]	; 0x160
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      e0:	.word	0x46394650
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      e4:	strb.w	r5, [r4, #356]	; 0x164
      e8:	.word	0xa168f8c4
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
      ec:	mov.w	r6, #1728	; 0x6c0
		{ALL, 1, true},
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
      f0:	bl	b7b4 <random(long, long)>
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      f4:	.word	0x7174f8c4
      f8:	str.w	r0, [r4, #364]	; 0x16c
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
      fc:	movs	r1, #4
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
      fe:	.short	0xf884
     100:	str	r0, [r6, r5]
	};

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
     102:	.short	0x4650
     104:	bl	b7b4 <random(long, long)>
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     108:	.word	0xf8c42204
     10c:	lsls	r0, r7, #5

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     10e:	.short	0x4649
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     110:	str.w	r2, [r4, #384]	; 0x180

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     114:	mov	r0, sl
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     116:	strb.w	r5, [r4, #380]	; 0x17c

	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
     11a:	.short	0xf00b
     11c:	smlsd	r1, fp, sl, r2
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     120:	.word	0x0184f8c4
	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
		{LINE, random(3, 10), false}
     124:	mov	r0, r7
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     126:	.short	0xf884
     128:	str	r0, [r1, r6]
     12a:	str.w	r8, [r4, #396]	; 0x18c
	Seed bri_seeds[5] = {
		{IMPLOSION, 1, false},
		{SQUARE, random(2, 3), false},
		{CIRCLE, random(2, 4), false},
		{MULTIPLE, random(2, 5), false},
		{LINE, random(3, 10), false}
     12e:	bl	b7b4 <random(long, long)>
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     132:	movs	r3, #0
     134:	str.w	r0, [r4, #400]	; 0x190
     138:	mov	r0, r6
     13a:	str.w	r3, [r4, #444]	; 0x1bc
     13e:	strb.w	r5, [r4, #404]	; 0x194
     142:	str.w	r5, [r4, #440]	; 0x1b8
     146:	str.w	r5, [r4, #448]	; 0x1c0
     14a:	bl	bac4 <operator new(unsigned int)>
     14e:	.short	0x4607
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     150:	mov	r1, r5
     152:	.short	0x4632
     154:	bl	c814 <memset>
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     158:	str.w	r7, [r4, #460]	; 0x1cc
     15c:	mov	r0, r6
     15e:	bl	bac4 <operator new(unsigned int)>
     162:	.short	0x4607
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     164:	mov	r2, r6
     166:	.short	0x4629
     168:	bl	c814 <memset>
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     16c:	str.w	r7, [r4, #464]	; 0x1d0
     170:	mov	r0, r6
     172:	bl	bac4 <operator new(unsigned int)>
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     176:	mov	r2, r6
     178:	mov	r1, r5
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     17a:	.short	0x4607
#define MULTIPLE 4
#define IMPLOSION 5
class Screen {


	typedef struct {
     17c:	bl	c814 <memset>
public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
     180:	.word	0x9a009b01
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
     184:	mov	r0, r5
public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
     186:	str.w	r3, [r4, #416]	; 0x1a0
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
     18a:	.short	0xf44f
     18c:	strb	r4, [r6, #6]

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     18e:	.short	0x9b0c

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
     190:	str.w	r2, [r4, #412]	; 0x19c
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
     194:	.word	0x31a4f8c4
		_screen = screen;
     198:	ldr	r3, [sp, #52]	; 0x34
	int bottom_hue_threshold;
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
     19a:	.short	0xf8c4
     19c:	strb	r4, [r2, #7]
		_bg_automaton = bg_automaton;
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
     19e:	.short	0xf8c4
     1a0:	adds	r1, #168	; 0xa8
		_mask = mask;
     1a2:	.short	0x9b0e
	int hue_difference;

public:

	Screen(Automaton * fg_automaton, Automaton * bg_automaton, Automaton * grow_automaton, Automaton * sat_automaton, Adafruit_NeoPixel * screen, Cellmask (* mask)[SIZE_SCREEN][SIZE_SCREEN], boolean (* bg_mask)[SIZE_SCREEN][SIZE_SCREEN]) {
		_bg_automaton = bg_automaton;
     1a4:	str.w	fp, [r4, #408]	; 0x198
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
     1a8:	.word	0x31acf8c4
		_bg_mask = bg_mask;
     1ac:	ldr	r3, [sp, #60]	; 0x3c
		newFrameReady = false;
     1ae:	.short	0xf884
     1b0:	str	r4, [r6, r6]
		_fg_automaton = fg_automaton;
		_grow_automaton = grow_automaton;
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
     1b2:	str.w	r3, [r4, #432]	; 0x1b0
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
     1b6:	.short	0xf00b
     1b8:			; <UNDEFINED> instruction: 0xfafdf44f
		hue_difference = random(0, 360 );
     1bc:	.word	0xf8c471b4
		_sat_automaton = sat_automaton;
		_screen = screen;
		_mask = mask;
		_bg_mask = bg_mask;
		newFrameReady = false;
		bottom_hue_threshold = random(0, 360);
     1c0:	lsls	r4, r0, #7
		hue_difference = random(0, 360 );
     1c2:	.short	0x4628
     1c4:	bl	b7b4 <random(long, long)>
     1c8:	.word	0x01c8f8c4
	}
     1cc:	mov	r0, r4
     1ce:	.short	0xb003
     1d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1d4:	movs	r0, r0
     1d6:	.short	0x2000

000001d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>:

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1d8:	sub	sp, #8
     1da:	.short	0x4684
     1dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     1e0:	.word	0xb0852400
     1e4:	mov	lr, r1
     1e6:	.short	0x4e2e
     1e8:	add	r1, sp, #48	; 0x30
  for (int i = 0; i < BEAM_AM; i++) {
     1ea:	.short	0x4625

elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
     1ec:	stmia.w	r1, {r2, r3}
  for (int i = 0; i < BEAM_AM; i++) {
    if (!beams[i].active) {
     1f0:	.word	0x342c5d33
     1f4:	ldr	r2, [pc, #168]	; (2a0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xc8>)
     1f6:	.short	0xb143
elapsedMillis sinceBeamUpdate;



bool newBeam(Adafruit_NeoPixel* _strip, bool _direction, Color _color, float _length, int _duration) {
  for (int i = 0; i < BEAM_AM; i++) {
     1f8:	adds	r5, #1
     1fa:	.short	0x2d0a
     1fc:	bne.n	1f0 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0x18>
    if (!beams[i].active) {
      beams[i].begin(_strip, _direction, _color, _length, _duration);
      return true;
    }
  }
  return false;
     1fe:	.short	0x2000
}
     200:	add	sp, #20
     202:	.short	0xe8bd
     204:	mvns	r0, r6
     206:	.short	0xb002
     208:	bx	lr
	active = false;
}

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
     20a:	movs	r3, #44	; 0x2c
     20c:	.word	0x466f2101
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     210:	ldr.w	r8, [pc, #144]	; 2a4 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)+0xcc>
     214:	.word	0xf305fb03
     218:	add.w	r9, r2, r3
     21c:	.word	0xab0c54d1
	strip = _strip;
     220:	str.w	ip, [r9, #4]
	direction = _direction;
	color = _color;
     224:	add.w	r4, r9, #12

void begin(Adafruit_NeoPixel * _strip, bool _direction, Color _color, float _length, int _duration)
{
	active = true;
	strip = _strip;
	direction = _direction;
     228:	.word	0xe008f889
     22c:	ldmia	r3, {r0, r1, r2, r3}
     22e:	stmia	r7!, {r0, r1, r2}
     230:	strh	r3, [r7, #0]
	color = _color;
     232:	add	r3, sp, #16
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     234:	mov	r7, r8
     236:	ldmdb	r3, {r0, r1, r2, r3}
     23a:	stmia	r4!, {r0, r1, r2}
     23c:	strh	r3, [r4, #0]
	length = _length;
	duration = _duration;
     23e:	ldr	r3, [sp, #64]	; 0x40
{
	active = true;
	strip = _strip;
	direction = _direction;
	color = _color;
	length = _length;
     240:	vstr	s0, [r9, #28]
	duration = _duration;
     244:	.word	0x3020f8c9
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     248:	ldr.w	r4, [r8, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     24c:	ldr.w	r1, [r8, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     250:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     252:	ldr	r3, [r7, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     254:	cmp	r3, r1
     256:	it	eq
     258:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     25a:	.short	0x4614
    uint32_t lo2 = SNVS_HPRTCLR;
     25c:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     25e:	.short	0xbf0c
     260:	moveq	r0, #1
     262:	.short	0x2000
     264:	cmp	r0, #0
     266:	.short	0xd0f3
	startTime = rtcMillis();
     268:	lsrs	r1, r3, #5
     26a:	.short	0x232c
     26c:	orr.w	r1, r1, r2, lsl #27
     270:	.word	0x6505fb03
     274:	vmov	s15, r1
     278:	.word	0x5b07ed9f
     27c:	vcvt.f64.u32	d7, s15
     280:	.word	0x6b05ee87
     284:	vcvt.u32.f64	s12, d6
     288:	.word	0x6a09ed85
     28c:	add	sp, #20
     28e:	.short	0xe8bd
     290:	mvns	r0, r6
     292:	.short	0xb002
     294:	bx	lr	; unpredictable branch in IT block

     296:	nopne
     298:	.word	0xd2f1a9fc
     29c:	str	r5, [r1, #36]	; 0x24
     29e:	.short	0x3ff0
     2a0:	str	r0, [r1, r6]
     2a2:	.short	0x2000
     2a4:	ands	r0, r0
     2a6:	.short	0x400d

000002a8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>:
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     2a8:	sub	sp, #8
     2aa:	.short	0xe92d
     2ac:	ldr	r7, [pc, #960]	; (670 <updateBeams()+0x180>)
     2ae:	.short	0xb085
  int colInt = strip->getPixelColor(pixel);
     2b0:	uxth	r6, r1
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     2b2:	.short	0x4680
     2b4:	ldrb.w	r4, [sp, #65]	; 0x41
  int colInt = strip->getPixelColor(pixel);
     2b8:	.word	0xf89d4631
     2bc:	str	r0, [sp, #272]	; 0x110
     2be:	.short	0x9401
  byte g;
  byte r;
  byte a;
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
     2c0:	add	r4, sp, #56	; 0x38
     2c2:	.short	0xf89d
     2c4:	str	r0, [r0, r1]
     2c6:	.short	0xe884
     2c8:	movs	r4, r1
     2ca:	.short	0xf89d
     2cc:	add	r0, pc, #224	; (adr r0, 3b0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x108>)
     2ce:	.short	0xf89d
     2d0:	ands	r1, r7
     2d2:	.short	0xf89d
     2d4:	add	sp, #232	; 0xe8
     2d6:	.short	0x9f0f
  int colInt = strip->getPixelColor(pixel);
     2d8:	bl	9ab8 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>
     2dc:	.word	0xf3c09003
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     2e0:	ands	r7, r0
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     2e2:	.short	0xf1b9
     2e4:	lsrs	r0, r0, #28
     2e6:	.short	0xd021
     2e8:	add	sl, r0
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     2ea:	.short	0xf89d
     2ec:	movs	r0, #13
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     2ee:	.short	0xf89d
     2f0:	str	r4, [r1, r0]

  strip->setPixelColor(pixel, *(int*)getCol);
     2f2:	.short	0x4631

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     2f4:	add	r4, r2
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     2f6:	.short	0xf1ba
     2f8:	lsrs	r7, r7, #31
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     2fa:	.short	0xeb05
     2fc:	lsls	r3, r1, #12

  strip->setPixelColor(pixel, *(int*)getCol);
     2fe:	mov	r0, r8
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     300:	it	ge
     302:	movge.w	sl, #255	; 0xff
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     306:	cmp	r4, #255	; 0xff
     308:	it	ge
     30a:	movge	r4, #255	; 0xff
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     30c:	cmp	r3, #255	; 0xff
};

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
     30e:	strb.w	sl, [sp, #14]
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     312:	it	ge
     314:	movge	r3, #255	; 0xff

void addPixelColor(Adafruit_NeoPixel* strip, int pixel, Color c) {
  int colInt = strip->getPixelColor(pixel);
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
     316:	strb.w	r4, [sp, #13]
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);
     31a:	strb.w	r3, [sp, #12]

  strip->setPixelColor(pixel, *(int*)getCol);
     31e:	ldr	r2, [sp, #12]
}
     320:	add	sp, #20
     322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     326:	add	sp, #8
  RGB32* getCol = (RGB32*)&colInt;
  getCol->r = constrain(getCol->r + c.red(), 0, 255);
  getCol->g = constrain(getCol->g + c.green(), 0, 255);
  getCol->b = constrain(getCol->b + c.blue(), 0, 255);

  strip->setPixelColor(pixel, *(int*)getCol);
     328:	b.w	9aac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
     32c:	ldr	r3, [sp, #4]
     32e:	cmp	r3, #99	; 0x63
     330:	bgt.n	3ae <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x106>
     332:	vmov	s15, r3
     336:	vldr	d6, [pc, #424]	; 4e0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     33a:	vcvt.f64.s32	d7, s15
     33e:	vmul.f64	d7, d7, d6
     342:	vcvt.u32.f64	s15, d7
     346:	vstr	s15, [sp, #4]
     34a:	ldrb.w	sl, [sp, #4]
     34e:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     350:	cbz	r5, 3b8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x110>
     352:	cmp	r5, #99	; 0x63
     354:	bgt.n	3bc <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x114>
     356:	vmov	s15, r5
     35a:	vldr	d6, [pc, #388]	; 4e0 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x238>
     35e:	vcvt.f64.s32	d7, s15
     362:	vmul.f64	d7, d7, d6
     366:	vcvt.s32.f64	s15, d7
     36a:	vmov	r2, s15
     36e:	rsb	r2, r2, #255	; 0xff
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     372:	ldr	r4, [pc, #372]	; (4e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x240>)
     374:	asrs	r1, r7, #31
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     376:	mul.w	r2, r2, sl
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     37a:	smull	r4, r5, r7, r4
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     37e:	ubfx	r2, r2, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     382:	adds	r4, r7, r5
     384:	mov.w	r5, #360	; 0x168
     388:	rsb	r1, r1, r4, asr #8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     38c:	ldr	r4, [pc, #348]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     38e:	mls	r1, r5, r1, r7
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     392:	smull	r3, r4, r4, r1
     396:	asrs	r5, r1, #31
     398:	add	r4, r1
     39a:	rsb	r4, r5, r4, asr #5
     39e:	cmp	r4, #5
     3a0:	bhi.w	4d6 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x22e>
     3a4:	tbb	[pc, r4]
     3a8:	.word	0x415b7588
     3ac:	.short	0x0c27
     3ae:	mov.w	sl, #254	; 0xfe
     3b2:	mov	fp, sl
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     3b4:	cmp	r5, #0
     3b6:	bne.n	352 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xaa>
     3b8:	mov	r4, sl
     3ba:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     3bc:	movs	r2, #1
     3be:	b.n	372 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0xca>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     3c0:	ldr	r7, [pc, #296]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3c2:	rsb	r3, r2, sl
     3c6:	smull	r4, lr, r7, r1
     3ca:	mov	r4, r2
     3cc:	add	lr, r1
     3ce:	rsb	r5, r5, lr, asr #5
     3d2:	rsb	r5, r5, r5, lsl #4
     3d6:	sub.w	r1, r1, r5, lsl #2
     3da:	rsb	r1, r1, #60	; 0x3c
     3de:	mul.w	r3, r1, r3
     3e2:	smull	r1, r7, r7, r3
     3e6:	asrs	r1, r3, #31
     3e8:	add	r3, r7
     3ea:	rsb	r3, r1, r3, asr #5
     3ee:	add	r3, r2
     3f0:	uxtb.w	fp, r3
     3f4:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     3f6:	ldr	r7, [pc, #244]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     3f8:	rsb	sl, r2, sl
     3fc:	mov	r4, r2
     3fe:	smull	r3, lr, r7, r1
     402:	add	lr, r1
     404:	rsb	r5, r5, lr, asr #5
     408:	rsb	r5, r5, r5, lsl #4
     40c:	sub.w	r1, r1, r5, lsl #2
     410:	mul.w	r1, r1, sl
     414:	smull	r3, r7, r7, r1
     418:	mov.w	sl, r1, asr #31
     41c:	add	r1, r7
     41e:	rsb	r1, sl, r1, asr #5
     422:	add	r2, r1
     424:	uxtb.w	sl, r2
     428:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     42a:	ldr	r7, [pc, #192]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     42c:	rsb	lr, r2, sl
     430:	mov	sl, r2
     432:	smull	r3, r4, r7, r1
     436:	add	r4, r1
     438:	rsb	r5, r5, r4, asr #5
     43c:	rsb	r5, r5, r5, lsl #4
     440:	sub.w	r1, r1, r5, lsl #2
     444:	rsb	r4, r1, #60	; 0x3c
     448:	mul.w	r1, r4, lr
     44c:	smull	r3, r7, r7, r1
     450:	asrs	r4, r1, #31
     452:	add	r1, r7
     454:	rsb	r4, r4, r1, asr #5
     458:	add	r4, r2
     45a:	uxtb	r4, r4
     45c:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     45e:	ldr	r7, [pc, #140]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     460:	rsb	lr, r2, sl
     464:	mov	r4, sl
     466:	mov	sl, r2
     468:	smull	ip, r3, r7, r1
     46c:	add	r3, r1
     46e:	rsb	r5, r5, r3, asr #5
     472:	rsb	r5, r5, r5, lsl #4
     476:	sub.w	r1, r1, r5, lsl #2
     47a:	mul.w	r1, r1, lr
     47e:	smull	r3, r7, r7, r1
     482:	asrs	r3, r1, #31
     484:	add	r1, r7
     486:	rsb	r3, r3, r1, asr #5
     48a:	add	r3, r2
     48c:	uxtb.w	fp, r3
     490:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     492:	ldr	r7, [pc, #88]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)
     494:	rsb	lr, r2, sl
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     498:	mov	r4, sl
      output.g = bri;
      output.b = base;
     49a:	mov	fp, r2
     49c:	smull	r3, ip, r7, r1
     4a0:	add	ip, r1
     4a2:	rsb	r5, r5, ip, asr #5
     4a6:	rsb	r5, r5, r5, lsl #4
     4aa:	sub.w	r5, r1, r5, lsl #2
     4ae:	rsb	r5, r5, #60	; 0x3c
     4b2:	mul.w	r1, r5, lr
     4b6:	b.n	414 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x16c>
     4b8:	rsb	r3, r2, sl
     4bc:	ldr	r5, [pc, #44]	; (4ec <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x244>)

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     4be:	mov	fp, r2
     4c0:	mul.w	r1, r1, r3
     4c4:	smull	r3, r5, r5, r1
     4c8:	asrs	r4, r1, #31
     4ca:	add	r1, r5
     4cc:	rsb	r1, r4, r1, asr #5
     4d0:	adds	r4, r2, r1
     4d2:	uxtb	r4, r4
     4d4:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     4d6:	mov.w	sl, #0
     4da:	mov	r4, sl
     4dc:	b.n	2e8 <addPixelColor(Adafruit_NeoPixel*, int, Color)+0x40>
     4de:	nop
     4e0:	.word	0x66666666
     4e4:	.word	0x40046666
     4e8:	.word	0xb60b60b7
     4ec:	.word	0x88888889

000004f0 <updateBeams()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     4f0:	ldr	r3, [pc, #772]	; (7f8 <updateBeams()+0x308>)
    }
  }
  return false;
}

void updateBeams() {
     4f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f6:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     4f8:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     4fa:	ldr	r1, [r3, #40]	; 0x28
     4fc:	vpush	{d8-d10}
     500:	sub	sp, #44	; 0x2c
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     502:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     504:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     506:	ldr	r6, [pc, #752]	; (7f8 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     508:	cmp	r3, r1
     50a:	it	eq
     50c:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     50e:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     510:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     512:	ite	eq
     514:	moveq	r5, #1
     516:	movne	r5, #0
     518:	cmp	r5, #0
     51a:	beq.n	502 <updateBeams()+0x12>
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
     51c:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     51e:	ldr	r4, [pc, #732]	; (7fc <updateBeams()+0x30c>)
     520:	orr.w	r1, r1, r2, lsl #27
     524:	ldr	r3, [r4, #0]
     526:	vmov	s15, r1
     52a:	vldr	d5, [pc, #700]	; 7e8 <updateBeams()+0x2f8>
     52e:	vcvt.f64.u32	d7, s15
     532:	vdiv.f64	d6, d7, d5
     536:	vcvt.u32.f64	s12, d6
     53a:	vmov	r2, s12
     53e:	subs	r3, r2, r3
     540:	cmp	r3, #15
     542:	ble.w	8e2 <updateBeams()+0x3f2>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     546:	ldr	r5, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     548:	mov	r0, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     54a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     54c:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     54e:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     550:	cmp	r3, r1
     552:	it	eq
     554:	cmpeq	r2, r5
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     556:	mov	r5, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     558:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     55a:	ite	eq
     55c:	moveq	r6, #1
     55e:	movne	r6, #0
     560:	cmp	r6, #0
     562:	beq.n	54c <updateBeams()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     564:	lsrs	r1, r3, #5
     566:	ldr	r7, [pc, #664]	; (800 <updateBeams()+0x310>)
  sinceBeamUpdate = 0;

  synapse_A.clear();
     568:	ldr	r0, [pc, #664]	; (804 <updateBeams()+0x314>)
     56a:	orr.w	r1, r1, r2, lsl #27
     56e:	add.w	r9, r7, #440	; 0x1b8
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     572:	ldr.w	fp, [pc, #644]	; 7f8 <updateBeams()+0x308>
  synapse_B.clear();
     576:	mov	sl, r7
     578:	vmov	s15, r1
     57c:	vldr	d8, [pc, #616]	; 7e8 <updateBeams()+0x2f8>
     580:	vcvt.f64.u32	d7, s15
     584:	vldr	d9, [pc, #616]	; 7f0 <updateBeams()+0x300>
     588:	vdiv.f64	d6, d7, d8
     58c:	vcvt.u32.f64	s12, d6
     590:	vstr	s12, [r4]

void updateBeams() {
  if ((int)sinceBeamUpdate < BEAM_UPDATE_INTERVAL) return;
  sinceBeamUpdate = 0;

  synapse_A.clear();
     594:	bl	9bc0 <Adafruit_NeoPixel::clear()>
  synapse_B.clear();
     598:	ldr	r0, [pc, #620]	; (808 <updateBeams()+0x318>)
     59a:	bl	9bc0 <Adafruit_NeoPixel::clear()>
     59e:	b.n	5aa <updateBeams()+0xba>
     5a0:	add.w	sl, sl, #44	; 0x2c

  for (int i = 0; i < BEAM_AM; i++) {
     5a4:	cmp	sl, r9
     5a6:	beq.w	890 <updateBeams()+0x3a0>
    if (beams[i].active) {
     5aa:	ldrb.w	r3, [sl, #-36]
     5ae:	cmp	r3, #0
     5b0:	beq.n	5a0 <updateBeams()+0xb0>
     5b2:	ldr.w	r0, [fp, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     5b6:	ldr.w	r1, [fp, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5ba:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     5be:	ldr.w	r3, [fp, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5c2:	ldr	r7, [pc, #564]	; (7f8 <updateBeams()+0x308>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     5c4:	cmp	r3, r1
     5c6:	it	eq
     5c8:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     5ca:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     5cc:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     5ce:	ite	eq
     5d0:	moveq	r4, #1
     5d2:	movne	r4, #0
     5d4:	cmp	r4, #0
     5d6:	beq.n	5ba <updateBeams()+0xca>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
     5d8:	lsrs	r1, r3, #5
     5da:	ldr.w	r5, [sl]
     5de:	ldr.w	r6, [sl, #-4]
     5e2:	orr.w	r1, r1, r2, lsl #27
     5e6:	adds	r3, r6, r5
     5e8:	vmov	s15, r1
     5ec:	vcvt.f64.u32	d7, s15
     5f0:	vdiv.f64	d6, d7, d8
     5f4:	vcvt.u32.f64	s12, d6
     5f8:	vmov	r2, s12
     5fc:	cmp	r2, r3
     5fe:	bhi.w	8da <updateBeams()+0x3ea>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     602:	ldr	r0, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     604:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     606:	ldr.w	r2, [fp, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     60a:	ldr.w	r3, [fp, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     60e:	cmp	r3, r1
     610:	it	eq
     612:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     614:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     616:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     618:	ite	eq
     61a:	moveq	r4, #1
     61c:	movne	r4, #0
     61e:	cmp	r4, #0
     620:	beq.n	606 <updateBeams()+0x116>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     622:	lsrs	r1, r3, #5
     624:	vmov	s15, r6
	if (direction == DOWN) posFac = 1 - posFac;
     628:	ldrb.w	r3, [sl, #-28]
	if (rtcMillis() > startTime + duration) {
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
     62c:	orr.w	r1, r1, r2, lsl #27
     630:	vcvt.f32.s32	s11, s15
     634:	vmov	s15, r1
     638:	vcvt.f64.u32	d7, s15
     63c:	vdiv.f64	d6, d7, d8
     640:	vcvt.u32.f64	s12, d6
     644:	vmov	r2, s12
     648:	subs	r5, r2, r5
     64a:	vmov	s15, r5
     64e:	vcvt.f32.u32	s15, s15
     652:	vdiv.f32	s20, s15, s11
	if (direction == DOWN) posFac = 1 - posFac;
     656:	cmp	r3, #0
     658:	bne.w	8d0 <updateBeams()+0x3e0>
	position = (strip->numPixels() + length) * posFac - length / 2;
     65c:	ldr.w	r0, [sl, #-32]
     660:	bl	9b68 <Adafruit_NeoPixel::numPixels() const>
     664:	vmov	s15, r0
}


void draw() {
	if (!active) return;
     668:	ldrb.w	r3, [sl, #-36]
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
	position = (strip->numPixels() + length) * posFac - length / 2;
     66c:	vmov.f32	s14, #96	; 0x3f000000  0.5
     670:	vcvt.f32.s32	s13, s15
     674:	vldr	s15, [sl, #-8]
     678:	vmul.f32	s14, s15, s14
     67c:	vadd.f32	s15, s13, s15
     680:	vmov.f32	s13, s14
     684:	vfnms.f32	s13, s15, s20
     688:	vmov.f32	s15, s13
     68c:	vstr	s13, [sl, #4]
}


void draw() {
	if (!active) return;
     690:	cmp	r3, #0
     692:	beq.n	5a0 <updateBeams()+0xb0>

	int startLed = position - length / 2;
	int endLed = position + length / 2;
     694:	vadd.f32	s15, s14, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     698:	vsub.f32	s13, s13, s14
	int endLed = position + length / 2;
     69c:	vcvt.s32.f32	s15, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     6a0:	vcvt.s32.f32	s14, s13
	int endLed = position + length / 2;
     6a4:	vmov	r3, s15

	for (int i = startLed; i <= endLed; i++) {
     6a8:	vmov	r5, s15


void draw() {
	if (!active) return;

	int startLed = position - length / 2;
     6ac:	vmov	r7, s14
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     6b0:	cmp	r7, r3
     6b2:	ble.n	7ae <updateBeams()+0x2be>
     6b4:	b.n	5a0 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     6b6:	vldr	s11, [sl, #-8]
     6ba:	vmov.f32	s14, #112	; 0x3f800000  1.0
     6be:	vmov.f32	s13, #0	; 0x40000000  2.0
     6c2:	vdiv.f32	s12, s15, s11
     6c6:	vmov.f32	s15, s14
     6ca:	vfms.f32	s15, s12, s13
     6ce:	vcmpe.f32	s15, #0.0
     6d2:	vmrs	APSR_nzcv, fpscr
     6d6:	bmi.w	7e0 <updateBeams()+0x2f0>
     6da:	vcmp.f32	s15, s14
     6de:	vmrs	APSR_nzcv, fpscr
     6e2:	it	gt
     6e4:	vmovgt.f32	s15, s14
	
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
     6e8:	vmov.f32	s14, #112	; 0x3f800000  1.0
			Color c = color;
     6ec:	sub.w	r3, sl, #24
     6f0:	add	r4, sp, #24
     6f2:	ldrb.w	ip, [sl, #-24]
     6f6:	ldrb.w	lr, [sl, #-23]
     6fa:	vcmp.f32	s15, s14
     6fe:	ldrb.w	r6, [sl, #-22]
     702:	ldr.w	r8, [sl, #-20]
     706:	vmrs	APSR_nzcv, fpscr
     70a:	ldmia	r3, {r0, r1, r2, r3}
     70c:	stmia.w	r4, {r0, r1, r2, r3}
     710:	ldrb.w	r3, [sl, #-16]
     714:	ldrb.w	r2, [sl, #-15]
     718:	ldrb.w	r1, [sl, #-12]
     71c:	beq.n	772 <updateBeams()+0x282>
	HSB_color = RGBtoHSB(&RGB_color);
	HSB_updated = true;
}

byte red(){
	if(!RGB_updated){
     71e:	cmp	r1, #0
     720:	beq.n	810 <updateBeams()+0x320>
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     722:	vmov	s14, ip
     726:	vmov	s13, lr
     72a:	vcvt.f32.s32	s14, s14
     72e:	vmul.f32	s14, s14, s15
     732:	vcvt.u32.f32	s14, s14
     736:	vstr	s14, [sp, #12]
     73a:	ldrb.w	ip, [sp, #12]
		byte g = green()*multFac;
		byte b = blue()*multFac;
     73e:	vmov	s14, r6
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     742:	vcvt.f32.s32	s13, s13
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     746:	movs	r0, #0

void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
     748:	movs	r1, #1

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     74a:	vcvt.f32.s32	s14, s14
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     74e:	vmul.f32	s13, s13, s15
void setRGB(byte r, byte g, byte b){
	RGB_color.r = r;
	RGB_color.g = g;
	RGB_color.b = b;
	RGB_updated = true;
	HSB_updated = false;
     752:	strb.w	r0, [sp, #37]	; 0x25

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
		byte b = blue()*multFac;
     756:	vmul.f32	s15, s14, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     75a:	vcvt.u32.f32	s14, s13
		byte b = blue()*multFac;
     75e:	vcvt.u32.f32	s15, s15
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
		byte g = green()*multFac;
     762:	vstr	s14, [sp, #12]
     766:	ldrb.w	lr, [sp, #12]
		byte b = blue()*multFac;
     76a:	vstr	s15, [sp, #16]
     76e:	ldrb.w	r6, [sp, #16]
			c.multiply(dist);
			addPixelColor(strip, i, c);
     772:	strb.w	r3, [sp, #32]
     776:	add	r3, sp, #40	; 0x28
     778:	strb.w	r2, [sp, #33]	; 0x21
     77c:	strb.w	r1, [sp, #36]	; 0x24
     780:	strb.w	ip, [sp, #24]
     784:	strb.w	lr, [sp, #25]
     788:	strb.w	r6, [sp, #26]
     78c:	str.w	r8, [sp, #28]
     790:	ldmdb	r3, {r0, r1}
     794:	ldmia.w	r4, {r2, r3}
     798:	stmia.w	sp, {r0, r1}
     79c:	mov	r1, r7
     79e:	ldr.w	r0, [sl, #-32]
     7a2:	bl	2a8 <addPixelColor(Adafruit_NeoPixel*, int, Color)>
	if (!active) return;

	int startLed = position - length / 2;
	int endLed = position + length / 2;

	for (int i = startLed; i <= endLed; i++) {
     7a6:	adds	r7, #1
     7a8:	cmp	r5, r7
     7aa:	blt.w	5a0 <updateBeams()+0xb0>
		if (i >= 0 && i < strip->numPixels()) {
     7ae:	cmp	r7, #0
     7b0:	blt.n	7a6 <updateBeams()+0x2b6>
     7b2:	ldr.w	r0, [sl, #-32]
     7b6:	bl	9b68 <Adafruit_NeoPixel::numPixels() const>
     7ba:	cmp	r0, r7
     7bc:	ble.n	7a6 <updateBeams()+0x2b6>
			float dist = constrain(1 - abs(i - position) / length * 2, 0, 1);
     7be:	vmov	s14, r7
     7c2:	vldr	s15, [sl, #4]
     7c6:	vcvt.f32.s32	s14, s14
     7ca:	vsub.f32	s15, s14, s15
     7ce:	vcmpe.f32	s15, #0.0
     7d2:	vmrs	APSR_nzcv, fpscr
     7d6:	bgt.w	6b6 <updateBeams()+0x1c6>
     7da:	vneg.f32	s15, s15
     7de:	b.n	6b6 <updateBeams()+0x1c6>
     7e0:	vldr	s15, [pc, #40]	; 80c <updateBeams()+0x31c>
     7e4:	b.n	6e8 <updateBeams()+0x1f8>
     7e6:	nop
     7e8:	.word	0xd2f1a9fc
     7ec:	.word	0x3ff0624d
     7f0:	.word	0x66666666
     7f4:	.word	0x40046666
     7f8:	.word	0x400d4000
     7fc:	.word	0x20001764
     800:	.word	0x200051ac
     804:	.word	0x200089c0
     808:	.word	0x200089d4
     80c:	.word	0x00000000
     810:	cmp	r2, #99	; 0x63
     812:	bgt.n	8a6 <updateBeams()+0x3b6>
     814:	vmov	s14, r2
     818:	vcvt.f64.s32	d6, s14
     81c:	vmul.f64	d6, d6, d9
     820:	vcvt.u32.f64	s14, d6
     824:	vstr	s14, [sp, #12]
     828:	ldrb.w	ip, [sp, #12]
     82c:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     82e:	cmp	r3, #0
     830:	beq.n	8b0 <updateBeams()+0x3c0>
     832:	cmp	r3, #99	; 0x63
     834:	bgt.n	8ec <updateBeams()+0x3fc>
     836:	vmov	s14, r3
     83a:	vcvt.f64.s32	d6, s14
     83e:	vmul.f64	d6, d6, d9
     842:	vcvt.s32.f64	s14, d6
     846:	vmov	r6, s14
     84a:	rsb	r6, r6, #255	; 0xff
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     84e:	mul.w	r6, r6, ip
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     852:	ldr	r1, [pc, #544]	; (a74 <updateBeams()+0x584>)
     854:	smull	r0, r1, r8, r1
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     858:	ubfx	r0, r6, #8, #8
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     85c:	add	r1, r8
    output.r=bri;
    output.g=bri;
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;
     85e:	str	r0, [sp, #12]
}

//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
     860:	mov.w	r0, r8, asr #31
     864:	rsb	r1, r0, r1, asr #8
     868:	mov.w	r0, #360	; 0x168
     86c:	mls	r1, r0, r1, r8
    output.b=bri;  
  }
  else{
    byte base = ((255 - int(min(color->s,100)*2.55)) * bri)>>8;

    switch(hue/60) {
     870:	ldr	r0, [pc, #516]	; (a78 <updateBeams()+0x588>)
     872:	smull	r6, r0, r0, r1
     876:	asrs	r6, r1, #31
     878:	add	r0, r1
     87a:	str	r6, [sp, #16]
     87c:	rsb	r0, r6, r0, asr #5
     880:	cmp	r0, #5
     882:	bhi.w	a6a <updateBeams()+0x57a>
     886:	tbb	[pc, r0]
     88a:	.short	0xbadc
     88c:	.word	0x3355759a
  // for (int i = 0; i < synapse_B.numPixels(); i++) {
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
     890:	ldr	r0, [pc, #488]	; (a7c <updateBeams()+0x58c>)
     892:	bl	9814 <Adafruit_NeoPixel::show()>
  synapse_B.show();
     896:	ldr	r0, [pc, #488]	; (a80 <updateBeams()+0x590>)
}
     898:	add	sp, #44	; 0x2c
     89a:	vpop	{d8-d10}
     89e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //   synapse_B.setPixelColor(i,50,0,10);
  //   synapse_A.setPixelColor(i,50,0,10);
  // }

  synapse_A.show();
  synapse_B.show();
     8a2:	b.w	9814 <Adafruit_NeoPixel::show()>
     8a6:	mov.w	ip, #254	; 0xfe
     8aa:	mov	lr, ip
//// convert hsb to rgb
RGB HSBtoRGB(HSB *color){
  RGB output;
  int hue = color->h%360;
  byte bri = min(color->b,100)*2.55;
  if (color->s == 0) { // Acromatic color (gray). Hue doesn't mind.
     8ac:	cmp	r3, #0
     8ae:	bne.n	832 <updateBeams()+0x342>
     8b0:	vmov	s13, ip
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     8b4:	vmov	s14, ip
	RGB_updated = false;
	HSB_updated = true;
}

void updateRGB(){
	RGB_color = HSBtoRGB(&HSB_color);
     8b8:	mov	r6, lr
	setRGB(r,g,b);
}

void multiply(float multFac){
	if(multFac!=1.){
		byte r = red()*multFac;
     8ba:	vcvt.f32.s32	s14, s14
     8be:	vmul.f32	s14, s14, s15
     8c2:	vcvt.u32.f32	s14, s14
     8c6:	vstr	s14, [sp, #12]
     8ca:	ldrb.w	ip, [sp, #12]
     8ce:	b.n	73e <updateBeams()+0x24e>
		active = false;
		return;
	}

	float posFac = (float)(rtcMillis() - startTime) / duration;
	if (direction == DOWN) posFac = 1 - posFac;
     8d0:	vmov.f32	s15, #112	; 0x3f800000  1.0
     8d4:	vsub.f32	s20, s15, s20
     8d8:	b.n	65c <updateBeams()+0x16c>
}

void update() {
	if (!active) return;
	if (rtcMillis() > startTime + duration) {
		active = false;
     8da:	movs	r3, #0
     8dc:	strb.w	r3, [sl, #-36]
     8e0:	b.n	5a0 <updateBeams()+0xb0>
}
     8e2:	add	sp, #44	; 0x2c
     8e4:	vpop	{d8-d10}
     8e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ec:	movs	r6, #1
     8ee:	b.n	84e <updateBeams()+0x35e>
      break;

    case 5:
      output.r = bri;
      output.g = base;
      output.b = (((bri-base)*(60-(hue%60)))/60)+base;
     8f0:	ldr	r0, [pc, #388]	; (a78 <updateBeams()+0x588>)
     8f2:	smull	r6, r0, r0, r1
     8f6:	ldr	r6, [sp, #12]
     8f8:	add	r0, r1
     8fa:	vmov	s13, r6
     8fe:	rsb	lr, r6, ip
     902:	ldr	r6, [sp, #16]
     904:	rsb	r0, r6, r0, asr #5
     908:	rsb	r0, r0, r0, lsl #4
     90c:	sub.w	r1, r1, r0, lsl #2
     910:	rsb	r1, r1, #60	; 0x3c
     914:	mul.w	lr, r1, lr
     918:	ldr	r1, [pc, #348]	; (a78 <updateBeams()+0x588>)
     91a:	smull	r1, r0, r1, lr
     91e:	mov.w	r1, lr, asr #31
     922:	add	lr, r0
     924:	rsb	lr, r1, lr, asr #5
     928:	vmov	r1, s13
     92c:	add	r1, lr
     92e:	uxtb.w	lr, r1
     932:	b.n	8b4 <updateBeams()+0x3c4>
     934:	ldr	r0, [pc, #320]	; (a78 <updateBeams()+0x588>)
     936:	smull	r6, r0, r0, r1
     93a:	ldr	r6, [sp, #12]
     93c:	add	r0, r1
     93e:	rsb	ip, r6, ip
     942:	vmov	s13, r6
     946:	ldr	r6, [sp, #16]
     948:	rsb	r0, r6, r0, asr #5
     94c:	vmov	r6, s13
     950:	rsb	r0, r0, r0, lsl #4
     954:	sub.w	r1, r1, r0, lsl #2
     958:	mul.w	ip, r1, ip
     95c:	ldr	r1, [pc, #280]	; (a78 <updateBeams()+0x588>)
     95e:	smull	r1, r0, r1, ip
     962:	mov.w	r1, ip, asr #31
     966:	add	ip, r0
     968:	rsb	ip, r1, ip, asr #5
     96c:	add	r6, ip
     96e:	uxtb.w	ip, r6
     972:	b.n	8b4 <updateBeams()+0x3c4>
      output.b = (((bri-base)*(hue%60))/60)+base;
      break;

    case 3:
      output.r = base;
      output.g = (((bri-base)*(60-(hue%60)))/60)+base;
     974:	ldr	r0, [pc, #256]	; (a78 <updateBeams()+0x588>)
     976:	smull	r6, r0, r0, r1
     97a:	ldr	r6, [sp, #12]
     97c:	add	r0, r1
     97e:	rsb	r6, r6, ip
     982:	ldr.w	ip, [sp, #12]
     986:	str	r6, [sp, #20]
     988:	mov	r6, r0
     98a:	ldr	r0, [sp, #16]
     98c:	rsb	r0, r0, r6, asr #5
     990:	ldr	r6, [sp, #20]
     992:	rsb	r0, r0, r0, lsl #4
     996:	sub.w	r1, r1, r0, lsl #2
     99a:	ldr	r0, [pc, #220]	; (a78 <updateBeams()+0x588>)
     99c:	rsb	r1, r1, #60	; 0x3c
     9a0:	mul.w	r1, r1, r6
     9a4:	smull	r6, r0, r0, r1
     9a8:	mov	r6, r0
     9aa:	asrs	r0, r1, #31
     9ac:	add	r1, r6
     9ae:	mov	r6, ip
     9b0:	rsb	r0, r0, r1, asr #5
     9b4:	add	r6, r0
     9b6:	uxtb	r1, r6
     9b8:	vmov	s13, r1
     9bc:	b.n	8b4 <updateBeams()+0x3c4>
      break;

    case 2:
      output.r = base;
      output.g = bri;
      output.b = (((bri-base)*(hue%60))/60)+base;
     9be:	ldr	r0, [pc, #184]	; (a78 <updateBeams()+0x588>)
     9c0:	vmov	s13, ip
     9c4:	smull	r6, r0, r0, r1
     9c8:	ldr	r6, [sp, #12]
     9ca:	add	r0, r1
     9cc:	rsb	lr, r6, ip
     9d0:	mov	ip, r6
     9d2:	ldr	r6, [sp, #16]
     9d4:	rsb	r0, r6, r0, asr #5
     9d8:	mov	r6, ip
     9da:	rsb	r0, r0, r0, lsl #4
     9de:	sub.w	r1, r1, r0, lsl #2
     9e2:	mul.w	lr, r1, lr
     9e6:	ldr	r1, [pc, #144]	; (a78 <updateBeams()+0x588>)
     9e8:	smull	r1, r0, r1, lr
     9ec:	mov.w	r1, lr, asr #31
     9f0:	add	lr, r0
     9f2:	rsb	lr, r1, lr, asr #5
     9f6:	add	r6, lr
     9f8:	uxtb.w	lr, r6
     9fc:	b.n	8b4 <updateBeams()+0x3c4>
     9fe:	ldr	r0, [pc, #120]	; (a78 <updateBeams()+0x588>)
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     a00:	vmov	s13, ip
     a04:	smull	r6, r0, r0, r1
     a08:	ldr	r6, [sp, #12]
     a0a:	add	r0, r1
     a0c:	rsb	ip, r6, ip
      output.g = bri;
      output.b = base;
     a10:	mov	lr, r6
     a12:	ldr	r6, [sp, #16]
     a14:	rsb	r0, r6, r0, asr #5
     a18:	mov	r6, lr
     a1a:	rsb	r0, r0, r0, lsl #4
     a1e:	sub.w	r1, r1, r0, lsl #2
     a22:	rsb	r1, r1, #60	; 0x3c
     a26:	mul.w	ip, r1, ip
     a2a:	ldr	r1, [pc, #76]	; (a78 <updateBeams()+0x588>)
     a2c:	smull	r1, r0, r1, ip
     a30:	mov.w	r1, ip, asr #31
     a34:	add	ip, r0
     a36:	rsb	ip, r1, ip, asr #5
     a3a:	add	r6, ip
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
      break;

    case 1:
      output.r = (((bri-base)*(60-(hue%60)))/60)+base;
     a3c:	uxtb.w	ip, r6
     a40:	b.n	8b4 <updateBeams()+0x3c4>
     a42:	ldr	r6, [sp, #12]
     a44:	rsb	r0, r6, ip

    switch(hue/60) {
    case 0:
      output.r = bri;
      output.g = (((bri-base)*hue)/60)+base;
      output.b = base;
     a48:	mov	lr, r6
     a4a:	mul.w	r1, r1, r0
     a4e:	ldr	r0, [pc, #40]	; (a78 <updateBeams()+0x588>)
     a50:	smull	r6, r0, r0, r1
     a54:	mov	r6, r0
     a56:	asrs	r0, r1, #31
     a58:	add	r1, r6
     a5a:	mov	r6, lr
     a5c:	rsb	r0, r0, r1, asr #5
     a60:	add	r6, r0
     a62:	uxtb	r1, r6
     a64:	vmov	s13, r1
     a68:	b.n	8b4 <updateBeams()+0x3c4>
     a6a:	mov.w	ip, #0
     a6e:	vmov	s13, ip
     a72:	b.n	8b4 <updateBeams()+0x3c4>
     a74:	.word	0xb60b60b7
     a78:	.word	0x88888889
     a7c:	.word	0x200089c0
     a80:	.word	0x200089d4
     a84:	.word	0x00000000

00000a88 <updateScreensFade()>:
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     a88:	ldr	r3, [pc, #636]	; (d08 <updateScreensFade()+0x280>)

elapsedMillis sinceBeam;
elapsedMillis sinceFadeUpdate;


void updateScreensFade() {
     a8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a8e:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a90:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     a92:	ldr	r1, [r3, #40]	; 0x28
     a94:	vpush	{d8}
     a98:	sub	sp, #28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a9a:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     a9c:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     a9e:	ldr	r6, [pc, #616]	; (d08 <updateScreensFade()+0x280>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     aa0:	cmp	r3, r1
     aa2:	it	eq
     aa4:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     aa6:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     aa8:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     aaa:	ite	eq
     aac:	moveq	r5, #1
     aae:	movne	r5, #0
     ab0:	cmp	r5, #0
     ab2:	beq.n	a9a <updateScreensFade()+0x12>
  if (sinceFadeUpdate < FADE_INTERVAL) return;
     ab4:	lsrs	r1, r3, #5
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
     ab6:	ldr	r7, [pc, #596]	; (d0c <updateScreensFade()+0x284>)
     ab8:	orr.w	r1, r1, r2, lsl #27
     abc:	ldr	r3, [r7, #0]
     abe:	vmov	s15, r1
     ac2:	vldr	d5, [pc, #572]	; d00 <updateScreensFade()+0x278>
     ac6:	vcvt.f64.u32	d7, s15
     aca:	vdiv.f64	d6, d7, d5
     ace:	vcvt.u32.f64	s12, d6
     ad2:	vmov	r2, s12
     ad6:	subs	r3, r2, r3
     ad8:	cmp	r3, #15
     ada:	bls.w	cf0 <updateScreensFade()+0x268>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     ade:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ae0:	mov	r4, r6

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     ae2:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ae4:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     ae6:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ae8:	ldr	r6, [pc, #540]	; (d08 <updateScreensFade()+0x280>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
     aea:	cmp	r3, r1
     aec:	it	eq
     aee:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     af0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
     af2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
     af4:	ite	eq
     af6:	moveq	r5, #1
     af8:	movne	r5, #0
     afa:	cmp	r5, #0
     afc:	beq.n	ae4 <updateScreensFade()+0x5c>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
     afe:	lsrs	r1, r3, #5
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     b00:	ldr.w	r8, [pc, #528]	; d14 <updateScreensFade()+0x28c>
     b04:	vmov.f32	s11, #112	; 0x3f800000  1.0
     b08:	orr.w	r1, r1, r2, lsl #27
     b0c:	vldr	s10, [r8, #444]	; 0x1bc
     b10:	vmov	s15, r1
     b14:	vcmpe.f32	s10, s11
     b18:	vcvt.f64.u32	d7, s15
     b1c:	vmrs	APSR_nzcv, fpscr
     b20:	vldr	d4, [pc, #476]	; d00 <updateScreensFade()+0x278>
     b24:	vdiv.f64	d6, d7, d4
     b28:	vcvt.u32.f64	s12, d6
     b2c:	vstr	s12, [r7]
     b30:	blt.w	f06 <updateScreensFade()+0x47e>
      //Serial.println("end of fade");
			if (newFrameReady) {
     b34:	ldrb.w	r3, [r8, #436]	; 0x1b4
     b38:	cmp	r3, #0
     b3a:	beq.w	d20 <updateScreensFade()+0x298>
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     b3e:	ldr.w	r3, [r8, #460]	; 0x1cc
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b42:	mov	r5, r6
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     b44:	ldr.w	ip, [r8, #468]	; 0x1d4
		if (fadeFactor >= 1) {
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     b48:	ldr.w	r2, [r8, #464]	; 0x1d0
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     b4c:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     b4e:	ldr	r0, [r6, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     b50:	str.w	r3, [r8, #468]	; 0x1d4
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     b54:	str.w	ip, [r8, #464]	; 0x1d0
		if (fadeFactor >= 1) {
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     b58:	str.w	r2, [r8, #460]	; 0x1cc
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b5c:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     b5e:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     b60:	cmp	r3, r0
     b62:	it	eq
     b64:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     b66:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     b68:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     b6a:	ite	eq
     b6c:	moveq	r6, #1
     b6e:	movne	r6, #0
     b70:	cmp	r6, #0
     b72:	beq.n	b5c <updateScreensFade()+0xd4>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     b74:	lsrs	r0, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     b76:	movs	r3, #0
     b78:	orr.w	r0, r0, r1, lsl #27
     b7c:	strb.w	r3, [r8, #436]	; 0x1b4
     b80:	vmov	s15, r0
     b84:	vldr	d5, [pc, #376]	; d00 <updateScreensFade()+0x278>
     b88:	vcvt.f64.u32	d7, s15
     b8c:	vdiv.f64	d6, d7, d5
     b90:	vcvt.u32.f64	s15, d6
     b94:	vmov	r6, s15
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     b98:	vstr	s15, [r8, #448]	; 0x1c0
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     b9c:	ldr	r3, [pc, #360]	; (d08 <updateScreensFade()+0x280>)
     b9e:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ba0:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     ba2:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     ba4:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     ba6:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     ba8:	cmp	r3, r0
     baa:	it	eq
     bac:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     bae:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     bb0:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     bb2:	ite	eq
     bb4:	moveq	r7, #1
     bb6:	movne	r7, #0
     bb8:	cmp	r7, #0
     bba:	beq.n	ba4 <updateScreensFade()+0x11c>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     bbc:	lsrs	r0, r3, #5
     bbe:	vldr	s10, [pc, #336]	; d10 <updateScreensFade()+0x288>
     bc2:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     bc6:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     bc8:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     bcc:	ldr	r5, [pc, #324]	; (d14 <updateScreensFade()+0x28c>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     bce:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     bd0:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     bd4:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     bd8:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     bda:	vcvt.f64.u32	d7, s15
     bde:	vldr	d4, [pc, #288]	; d00 <updateScreensFade()+0x278>
     be2:	vdiv.f64	d6, d7, d4
     be6:	vcvt.u32.f64	s14, d6
     bea:	vmov	r3, s14
     bee:	subs	r6, r3, r6
     bf0:	vmov	s15, r6
     bf4:	vcvt.f32.u32	s14, s15
     bf8:	vdiv.f32	s15, s14, s10
     bfc:	vcmpe.f32	s15, s11
     c00:	vmrs	APSR_nzcv, fpscr
     c04:	it	pl
     c06:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     c0a:	vstr	s15, [r8, #444]	; 0x1bc
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     c0e:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     c12:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     c14:	lsls	r6, r6, #3
     c16:	b.n	c24 <updateScreensFade()+0x19c>
     c18:	ldr.w	r2, [r5, #460]	; 0x1cc
     c1c:	vldr	s15, [r5, #444]	; 0x1bc
     c20:	ldr.w	ip, [r5, #464]	; 0x1d0
     c24:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     c28:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c2c:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     c2e:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     c30:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c32:	ldr.w	r0, [r8, #424]	; 0x1a8
     c36:	uxth	r1, r1
     c38:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     c3c:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c40:	vmov	s14, lr
     c44:	ldrb.w	ip, [fp, #1]
     c48:	ldrb.w	lr, [fp, #2]
     c4c:	vmov	s13, ip
     c50:	vcvt.f32.s32	s14, s14
     c54:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     c58:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     c5c:	vcvt.f32.s32	s13, s13
     c60:	ldrb	r3, [r2, r3]
     c62:	ldrb.w	ip, [lr, #2]
     c66:	vcvt.f32.s32	s12, s12
     c6a:	vmov	s10, r3
     c6e:	ldrb.w	r3, [lr, #1]
     c72:	vmov	s8, ip
     c76:	vmul.f32	s13, s13, s15
     c7a:	vmov	s9, r3
     c7e:	vmul.f32	s12, s12, s15
     c82:	vcvt.f32.s32	s8, s8
     c86:	ldr.w	fp, [pc, #140]	; d14 <updateScreensFade()+0x28c>
     c8a:	vcvt.f32.s32	s9, s9
     c8e:	vmul.f32	s15, s14, s15
     c92:	vcvt.f32.s32	s10, s10
     c96:	vmov.f32	s14, s13
     c9a:	vfma.f32	s12, s11, s8
     c9e:	vfma.f32	s15, s10, s11
     ca2:	vfma.f32	s14, s11, s9
     ca6:	vcvt.s32.f32	s13, s12
     caa:	vcvt.s32.f32	s15, s15
     cae:	vcvt.s32.f32	s14, s14
     cb2:	vstr	s13, [sp, #20]
     cb6:	ldrb.w	r2, [sp, #20]
     cba:	vstr	s14, [sp, #12]
     cbe:	vstr	s15, [sp, #16]
     cc2:	str	r2, [sp, #0]
     cc4:	ldrb.w	r3, [sp, #12]
     cc8:	ldrb.w	r2, [sp, #16]
     ccc:	bl	9a5c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     cd0:	cmp	r4, #24
     cd2:	bne.n	c18 <updateScreensFade()+0x190>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     cd4:	add.w	r9, r9, #1
     cd8:	adds	r7, #24
     cda:	cmp.w	r9, #24
     cde:	uxth	r7, r7
     ce0:	beq.n	d18 <updateScreensFade()+0x290>
     ce2:	ldr.w	r2, [sl, #460]	; 0x1cc
     ce6:	vldr	s15, [sl, #444]	; 0x1bc
     cea:	ldr.w	ip, [sl, #464]	; 0x1d0
     cee:	b.n	c0e <updateScreensFade()+0x186>
  sinceFadeUpdate = 0;

  screen_A.updateFade();
  screen_B.updateFade();
}
     cf0:	add	sp, #28
     cf2:	vpop	{d8}
     cf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cfa:	nop
     cfc:	nop.w
     d00:	.word	0xd2f1a9fc
     d04:	.word	0x3ff0624d
     d08:	.word	0x400d4000
     d0c:	.word	0x20005340
     d10:	.word	0x44160000
     d14:	.word	0x20004dd8

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     d18:	ldr.w	r0, [fp, #424]	; 0x1a8
     d1c:	bl	9814 <Adafruit_NeoPixel::show()>
			}
		}
	}

	void updateFade() {
		if (fadeFactor >= 1) {
     d20:	ldr.w	r8, [pc, #532]	; f38 <updateScreensFade()+0x4b0>
     d24:	vmov.f32	s15, #112	; 0x3f800000  1.0
     d28:	vldr	s14, [r8, #444]	; 0x1bc
     d2c:	vcmpe.f32	s14, s15
     d30:	vmrs	APSR_nzcv, fpscr
     d34:	blt.w	f14 <updateScreensFade()+0x48c>
      //Serial.println("end of fade");
			if (newFrameReady) {
     d38:	ldrb.w	r3, [r8, #436]	; 0x1b4
     d3c:	cmp	r3, #0
     d3e:	beq.n	cf0 <updateScreensFade()+0x268>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     d40:	ldr	r3, [pc, #492]	; (f30 <updateScreensFade()+0x4a8>)
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
     d42:	ldr.w	r1, [r8, #460]	; 0x1cc
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     d46:	ldr.w	ip, [r8, #468]	; 0x1d4
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     d4a:	mov	r5, r3
		if (fadeFactor >= 1) {
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     d4c:	ldr.w	r2, [r8, #464]	; 0x1d0
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     d50:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
     d52:	ldr	r0, [r3, #40]	; 0x28
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
     d54:	str.w	r1, [r8, #468]	; 0x1d4
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
     d58:	str.w	ip, [r8, #464]	; 0x1d0
		if (fadeFactor >= 1) {
      //Serial.println("end of fade");
			if (newFrameReady) {
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
     d5c:	str.w	r2, [r8, #460]	; 0x1cc
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     d60:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     d62:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     d64:	cmp	r3, r0
     d66:	it	eq
     d68:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     d6a:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     d6c:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     d6e:	ite	eq
     d70:	moveq	r6, #1
     d72:	movne	r6, #0
     d74:	cmp	r6, #0
     d76:	beq.n	d60 <updateScreensFade()+0x2d8>
      return ((hi2 << 27) | (lo2 >> 5))/1.024;
     d78:	lsrs	r0, r3, #5
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
        newFrameReady = false;
     d7a:	movs	r3, #0
     d7c:	orr.w	r0, r0, r1, lsl #27
     d80:	strb.w	r3, [r8, #436]	; 0x1b4
     d84:	vmov	s15, r0
     d88:	vldr	d5, [pc, #412]	; f28 <updateScreensFade()+0x4a0>
     d8c:	vcvt.f64.u32	d7, s15
     d90:	vdiv.f64	d6, d7, d5
     d94:	vcvt.u32.f64	s15, d6
     d98:	vmov	r6, s15
        //Serial.println("setup next fade");
				ColorMatrix* temp = prev_colors;
				prev_colors = currGoal_colors;
				currGoal_colors = nextGoal_colors;
				nextGoal_colors = temp;
				fadeStart = rtcMillis();
     d9c:	vstr	s15, [r8, #448]	; 0x1c0
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
     da0:	ldr	r3, [pc, #396]	; (f30 <updateScreensFade()+0x4a8>)
     da2:	ldr	r4, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     da4:	mov	r5, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
     da6:	ldr	r0, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     da8:	ldr	r1, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
     daa:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
     dac:	cmp	r3, r0
     dae:	it	eq
     db0:	cmpeq	r1, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
     db2:	mov	r4, r1
    uint32_t lo2 = SNVS_HPRTCLR;
     db4:	mov	r0, r3
    if (lo1 == lo2 && hi1 == hi2) {
     db6:	ite	eq
     db8:	moveq	r7, #1
     dba:	movne	r7, #0
     dbc:	cmp	r7, #0
     dbe:	beq.n	da8 <updateScreensFade()+0x320>
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     dc0:	lsrs	r0, r3, #5
     dc2:	vldr	s10, [pc, #368]	; f34 <updateScreensFade()+0x4ac>
     dc6:	vmov.f32	s11, #112	; 0x3f800000  1.0
		fadeFactor = min(fadeFactor, 1);
     dca:	movs	r7, #0
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     dcc:	orr.w	r0, r0, r1, lsl #27
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     dd0:	ldr	r5, [pc, #356]	; (f38 <updateScreensFade()+0x4b0>)
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     dd2:	mov	r9, r7
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     dd4:	vmov	s15, r0

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     dd8:	vmov.f32	s16, s11
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     ddc:	mov	sl, r5
        newFrameReady = false;
			}
			else return;
		}

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
     dde:	vcvt.f64.u32	d7, s15
     de2:	vldr	d4, [pc, #324]	; f28 <updateScreensFade()+0x4a0>
     de6:	vdiv.f64	d6, d7, d4
     dea:	vcvt.u32.f64	s14, d6
     dee:	vmov	r3, s14
     df2:	subs	r6, r3, r6
     df4:	vmov	s15, r6
     df8:	vcvt.f32.u32	s14, s15
     dfc:	vdiv.f32	s15, s14, s10
     e00:	vcmpe.f32	s15, s11
     e04:	vmrs	APSR_nzcv, fpscr
     e08:	it	pl
     e0a:	vmovpl.f32	s15, s11
		fadeFactor = min(fadeFactor, 1);
     e0e:	vstr	s15, [r8, #444]	; 0x1bc
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     e12:	add.w	r6, r9, r9, lsl #3
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     e16:	movs	r4, #0
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     e18:	lsls	r6, r6, #3
     e1a:	b.n	e28 <updateScreensFade()+0x3a0>
     e1c:	ldr.w	r2, [r5, #460]	; 0x1cc
     e20:	vldr	s15, [r5, #444]	; 0x1bc
     e24:	ldr.w	ip, [r5, #464]	; 0x1d0
     e28:	add.w	r3, r4, r4, lsl #1

	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
     e2c:	vsub.f32	s11, s16, s15
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     e30:	adds	r1, r7, r4


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     e32:	adds	r4, #1
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     e34:	add	r3, r6
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     e36:	ldr.w	r0, [r8, #424]	; 0x1a8
     e3a:	uxth	r1, r1
     e3c:	ldrb.w	lr, [ip, r3]
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     e40:	add.w	fp, ip, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     e44:	vmov	s14, lr
     e48:	ldrb.w	ip, [fp, #1]
     e4c:	ldrb.w	lr, [fp, #2]
     e50:	vmov	s13, ip
     e54:	vcvt.f32.s32	s14, s14
     e58:	vmov	s12, lr
	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				r = prev_colors->pixel[x][y].r * (1 - fadeFactor) + currGoal_colors->pixel[x][y].r * fadeFactor;
				g = prev_colors->pixel[x][y].g * (1 - fadeFactor) + currGoal_colors->pixel[x][y].g * fadeFactor;
     e5c:	add.w	lr, r2, r3
				b = prev_colors->pixel[x][y].b * (1 - fadeFactor) + currGoal_colors->pixel[x][y].b * fadeFactor;
				_screen->setPixelColor(x*SIZE_SCREEN + y, r, g, b);
     e60:	vcvt.f32.s32	s13, s13
     e64:	ldrb	r3, [r2, r3]
     e66:	ldrb.w	ip, [lr, #2]
     e6a:	vcvt.f32.s32	s12, s12
     e6e:	vmov	s10, r3
     e72:	ldrb.w	r3, [lr, #1]
     e76:	vmov	s8, ip
     e7a:	vmul.f32	s13, s13, s15
     e7e:	vmov	s9, r3
     e82:	vmul.f32	s12, s12, s15
     e86:	vcvt.f32.s32	s8, s8
     e8a:	ldr.w	fp, [pc, #172]	; f38 <updateScreensFade()+0x4b0>
     e8e:	vcvt.f32.s32	s9, s9
     e92:	vmul.f32	s15, s14, s15
     e96:	vcvt.f32.s32	s10, s10
     e9a:	vmov.f32	s14, s13
     e9e:	vfma.f32	s12, s11, s8
     ea2:	vfma.f32	s15, s10, s11
     ea6:	vfma.f32	s14, s11, s9
     eaa:	vcvt.s32.f32	s13, s12
     eae:	vcvt.s32.f32	s15, s15
     eb2:	vcvt.s32.f32	s14, s14
     eb6:	vstr	s13, [sp, #20]
     eba:	ldrb.w	r2, [sp, #20]
     ebe:	vstr	s14, [sp, #12]
     ec2:	vstr	s15, [sp, #16]
     ec6:	str	r2, [sp, #0]
     ec8:	ldrb.w	r3, [sp, #12]
     ecc:	ldrb.w	r2, [sp, #16]
     ed0:	bl	9a5c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
     ed4:	cmp	r4, #24
     ed6:	bne.n	e1c <updateScreensFade()+0x394>
	}


	void interpolate_colors() {
		int r = 0, g = 0, b = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
     ed8:	add.w	r9, r9, #1
     edc:	adds	r7, #24
     ede:	cmp.w	r9, #24
     ee2:	uxth	r7, r7
     ee4:	beq.n	ef4 <updateScreensFade()+0x46c>
     ee6:	ldr.w	r2, [sl, #460]	; 0x1cc
     eea:	vldr	s15, [sl, #444]	; 0x1bc
     eee:	ldr.w	ip, [sl, #464]	; 0x1d0
     ef2:	b.n	e12 <updateScreensFade()+0x38a>

		fadeFactor = (float)(rtcMillis() - fadeStart) / AUTOMATON_INTERVAL;
		fadeFactor = min(fadeFactor, 1);

		interpolate_colors();
		_screen->show();
     ef4:	ldr.w	r0, [fp, #424]	; 0x1a8
     ef8:	add	sp, #28
     efa:	vpop	{d8}
     efe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f02:	b.w	9814 <Adafruit_NeoPixel::show()>
     f06:	ldr.w	r6, [r8, #448]	; 0x1c0
     f0a:	ldr.w	r2, [r8, #460]	; 0x1cc
     f0e:	ldr.w	ip, [r8, #464]	; 0x1d0
     f12:	b.n	b9c <updateScreensFade()+0x114>
     f14:	ldr.w	r6, [r8, #448]	; 0x1c0
     f18:	ldr.w	r2, [r8, #460]	; 0x1cc
     f1c:	ldr.w	ip, [r8, #464]	; 0x1d0
     f20:	b.n	da0 <updateScreensFade()+0x318>
     f22:	nop
     f24:	nop.w
     f28:	.word	0xd2f1a9fc
     f2c:	.word	0x3ff0624d
     f30:	.word	0x400d4000
     f34:	.word	0x44160000
     f38:	.word	0x20004fb0

00000f3c <Screen::iterate_animation() [clone .part.16]>:
	}


	
	void iterate_animation() {
     f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
     f40:	movs	r3, #2
     f42:	sub	sp, #68	; 0x44

		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
     f44:	ldr.w	r9, [r0, #412]	; 0x19c
     f48:	movs	r2, #32
     f4a:	str	r3, [sp, #4]
		_screen->show();
	}


	
	void iterate_animation() {
     f4c:	mov	fp, r0
     f4e:	addw	r3, r9, #2428	; 0x97c
     f52:	movs	r1, #0
     f54:	ldr.w	sl, [pc, #1608]	; 15a0 <Screen::iterate_animation() [clone .part.16]+0x664>
     f58:	add.w	r0, sp, r2
     f5c:	str	r3, [sp, #12]
     f5e:	add.w	r3, r9, #4640	; 0x1220
     f62:	str	r1, [sp, #20]
     f64:	str	r3, [sp, #24]
     f66:	bl	c814 <memset>
     f6a:	str.w	fp, [sp, #28]


void renderInterrupt() {
 

  updateBeams();
     f6e:	bl	4f0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     f72:	movs	r7, #2
  updateScreensFade();
     f74:	bl	a88 <updateScreensFade()>
     f78:	ldrb.w	r2, [r9, #24]
     f7c:	ldr	r3, [sp, #24]
     f7e:	str	r2, [sp, #16]
     f80:	ldr	r3, [r3, #0]
     f82:	ldr	r2, [sp, #20]
     f84:	ldr	r1, [sp, #12]
     f86:	add.w	r8, r3, r2
     f8a:	sub.w	ip, r1, #96	; 0x60
     f8e:	sub.w	r3, r1, #2400	; 0x960
     f92:	mov	fp, r8
     f94:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
     f96:	ldr	r3, [sp, #16]
     f98:	cmp	r3, #0
     f9a:	beq.w	13da <Screen::iterate_animation() [clone .part.16]+0x49e>
      return _background[x][y];
     f9e:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
     fa2:	cmp	r3, #0
     fa4:	beq.n	107a <Screen::iterate_animation() [clone .part.16]+0x13e>
     fa6:	ldr	r3, [sp, #4]
     fa8:	add.w	lr, sp, #32
     fac:	subs	r6, r3, #3
     fae:	subs	r3, r7, #3
     fb0:	str	r3, [sp, #8]
     fb2:	smull	r3, r2, sl, r6
     fb6:	asrs	r3, r6, #31
     fb8:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
     fba:	mov	r5, lr
     fbc:	rsb	r3, r3, r2, asr #2
     fc0:	add.w	r3, r3, r3, lsl #1
     fc4:	sub.w	r3, r6, r3, lsl #3
     fc8:	adds	r3, #24
     fca:	smull	r2, r1, sl, r3
     fce:	asrs	r2, r3, #31
     fd0:	rsb	r2, r2, r1, asr #2
     fd4:	add.w	r2, r2, r2, lsl #1
     fd8:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     fdc:	add.w	r2, r2, r2, lsl #1
     fe0:	lsls	r4, r2, #3
     fe2:	smull	r3, r2, sl, r0
     fe6:	asrs	r3, r0, #31
     fe8:	rsb	r3, r3, r2, asr #2
     fec:	add.w	r3, r3, r3, lsl #1
     ff0:	sub.w	r3, r0, r3, lsl #3
     ff4:	adds	r0, #1
     ff6:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
     ff8:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
     ffa:	smull	r2, r1, sl, r3
     ffe:	mov.w	r2, r3, asr #31
    1002:	rsb	r2, r2, r1, asr #2
    1006:	add.w	r2, r2, r2, lsl #1
    100a:	sub.w	r3, r3, r2, lsl #3
    100e:	add	r3, r4
    1010:	add.w	r3, r9, r3, lsl #2
    1014:	ldr	r3, [r3, #28]
    1016:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    101a:	bne.n	fe2 <Screen::iterate_animation() [clone .part.16]+0xa6>
    101c:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    101e:	ldr	r3, [sp, #4]
    1020:	add.w	lr, lr, #12
    1024:	cmp	r3, r6
    1026:	bne.n	fb2 <Screen::iterate_animation() [clone .part.16]+0x76>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1028:	ldr	r3, [sp, #0]
    102a:	movs	r0, #1
    102c:	ldr	r1, [r3, #0]
    102e:	ldr.w	r3, [r9]
    1032:	adds	r5, r1, r3
    1034:	movs	r4, #0
    1036:	mov	r3, r4
    1038:	b.n	1040 <Screen::iterate_animation() [clone .part.16]+0x104>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    103a:	adds	r3, #1
    103c:	cmp	r3, #8
    103e:	beq.n	1056 <Screen::iterate_animation() [clone .part.16]+0x11a>
          if ((i >> j) % 2 == 1){
    1040:	asr.w	r2, r0, r3
    1044:	lsls	r6, r2, #31
    1046:	bpl.n	103a <Screen::iterate_animation() [clone .part.16]+0xfe>
            sum += neighbours[j];
    1048:	add	r2, sp, #32
    104a:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    104e:	adds	r3, #1
    1050:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1052:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1054:	bne.n	1040 <Screen::iterate_animation() [clone .part.16]+0x104>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1056:	cmp	r5, r4
    1058:	beq.w	13e4 <Screen::iterate_animation() [clone .part.16]+0x4a8>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    105c:	adds	r0, #1
    105e:	cmp.w	r0, #256	; 0x100
    1062:	bne.n	1034 <Screen::iterate_animation() [clone .part.16]+0xf8>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1064:	ldr.w	r3, [r9, #8]
    1068:	subs	r1, r1, r3
    106a:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    106e:	ldr.w	r3, [r9, #12]
    1072:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    1074:	it	gt
    1076:	strgt.w	r3, [ip]
    107a:	ldr	r3, [sp, #0]
    107c:	add.w	ip, ip, #4
    1080:	adds	r7, #1
    1082:	add.w	r8, r8, #1
    1086:	adds	r3, #4
    1088:	add.w	fp, fp, #1
    108c:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    108e:	ldr	r3, [sp, #12]
    1090:	cmp	r3, ip
    1092:	bne.n	f96 <Screen::iterate_animation() [clone .part.16]+0x5a>
    1094:	ldr	r2, [sp, #12]
    1096:	ldr	r3, [sp, #20]
    1098:	adds	r2, #96	; 0x60
    109a:	adds	r3, #24
    109c:	str	r2, [sp, #12]
    109e:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    10a0:	cmp.w	r3, #576	; 0x240
    10a4:	str	r3, [sp, #20]
    10a6:	add.w	r2, r2, #1
    10aa:	str	r2, [sp, #4]
    10ac:	bne.w	f6e <Screen::iterate_animation() [clone .part.16]+0x32>
    10b0:	movw	r5, #4632	; 0x1218
    10b4:	ldr.w	fp, [sp, #28]
    10b8:	addw	r4, r9, #2328	; 0x918
    10bc:	add	r5, r9
    10be:	sub.w	r3, r4, #2304	; 0x900
    10c2:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    10c6:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    10c8:	ldr.w	r1, [r2, #4]!
    10cc:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    10d0:	cmp	r0, r3
    10d2:	bne.n	10c8 <Screen::iterate_animation() [clone .part.16]+0x18c>
    10d4:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    10d6:	cmp	r5, r4
    10d8:	bne.n	10be <Screen::iterate_animation() [clone .part.16]+0x182>
		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
    10da:	ldr.w	r9, [fp, #408]	; 0x198
        }
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    10de:	movs	r3, #2
    10e0:	movs	r2, #32
    10e2:	movs	r1, #0
    10e4:	str	r3, [sp, #4]
    10e6:	addw	r3, r9, #2428	; 0x97c
    10ea:	ldr.w	sl, [pc, #1204]	; 15a0 <Screen::iterate_animation() [clone .part.16]+0x664>
    10ee:	add.w	r0, sp, r2
    10f2:	str	r3, [sp, #12]
    10f4:	add.w	r3, r9, #4640	; 0x1220
    10f8:	str	r1, [sp, #20]
    10fa:	str	r3, [sp, #24]
    10fc:	bl	c814 <memset>
    1100:	str.w	fp, [sp, #28]


void renderInterrupt() {
 

  updateBeams();
    1104:	bl	4f0 <updateBeams()>
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1108:	movs	r7, #2
  updateScreensFade();
    110a:	bl	a88 <updateScreensFade()>
    110e:	ldrb.w	r2, [r9, #24]
    1112:	ldr	r3, [sp, #24]
    1114:	str	r2, [sp, #16]
    1116:	ldr	r3, [r3, #0]
    1118:	ldr	r2, [sp, #20]
    111a:	ldr	r1, [sp, #12]
    111c:	add.w	r8, r3, r2
    1120:	sub.w	ip, r1, #96	; 0x60
    1124:	sub.w	r3, r1, #2400	; 0x960
    1128:	mov	fp, r8
    112a:	str	r3, [sp, #0]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    112c:	ldr	r3, [sp, #16]
    112e:	cmp	r3, #0
    1130:	beq.w	13f0 <Screen::iterate_animation() [clone .part.16]+0x4b4>
      return _background[x][y];
    1134:	ldrb.w	r3, [r8]
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
    1138:	cmp	r3, #0
    113a:	beq.n	1210 <Screen::iterate_animation() [clone .part.16]+0x2d4>
    113c:	ldr	r3, [sp, #4]
    113e:	add.w	lr, sp, #32
    1142:	subs	r6, r3, #3
    1144:	subs	r3, r7, #3
    1146:	str	r3, [sp, #8]
    1148:	smull	r3, r2, sl, r6
    114c:	asrs	r3, r6, #31
    114e:	ldr	r0, [sp, #8]
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    1150:	mov	r5, lr
    1152:	rsb	r3, r3, r2, asr #2
    1156:	add.w	r3, r3, r3, lsl #1
    115a:	sub.w	r3, r6, r3, lsl #3
    115e:	adds	r3, #24
    1160:	smull	r2, r1, sl, r3
    1164:	asrs	r2, r3, #31
    1166:	rsb	r2, r2, r1, asr #2
    116a:	add.w	r2, r2, r2, lsl #1
    116e:	sub.w	r2, r3, r2, lsl #3
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1172:	add.w	r2, r2, r2, lsl #1
    1176:	lsls	r4, r2, #3
    1178:	smull	r3, r2, sl, r0
    117c:	asrs	r3, r0, #31
    117e:	rsb	r3, r3, r2, asr #2
    1182:	add.w	r3, r3, r3, lsl #1
    1186:	sub.w	r3, r0, r3, lsl #3
    118a:	adds	r0, #1
    118c:	adds	r3, #24
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    118e:	cmp	r7, r0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1190:	smull	r2, r1, sl, r3
    1194:	mov.w	r2, r3, asr #31
    1198:	rsb	r2, r2, r1, asr #2
    119c:	add.w	r2, r2, r2, lsl #1
    11a0:	sub.w	r3, r3, r2, lsl #3
    11a4:	add	r3, r4
    11a6:	add.w	r3, r9, r3, lsl #2
    11aa:	ldr	r3, [r3, #28]
    11ac:	str.w	r3, [r5], #4
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
              for (int dy = -1; dy <= 1; dy++){ 
    11b0:	bne.n	1178 <Screen::iterate_animation() [clone .part.16]+0x23c>
    11b2:	adds	r6, #1
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          if (can_color(x, y)) {
             for (int dx = -1; dx <= 1; dx++){
    11b4:	ldr	r3, [sp, #4]
    11b6:	add.w	lr, lr, #12
    11ba:	cmp	r3, r6
    11bc:	bne.n	1148 <Screen::iterate_animation() [clone .part.16]+0x20c>
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    11be:	ldr	r3, [sp, #0]
    11c0:	movs	r0, #1
    11c2:	ldr	r1, [r3, #0]
    11c4:	ldr.w	r3, [r9]
    11c8:	adds	r5, r1, r3
    11ca:	movs	r4, #0
    11cc:	mov	r3, r4
    11ce:	b.n	11d6 <Screen::iterate_animation() [clone .part.16]+0x29a>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11d0:	adds	r3, #1
    11d2:	cmp	r3, #8
    11d4:	beq.n	11ec <Screen::iterate_animation() [clone .part.16]+0x2b0>
          if ((i >> j) % 2 == 1){
    11d6:	asr.w	r2, r0, r3
    11da:	lsls	r2, r2, #31
    11dc:	bpl.n	11d0 <Screen::iterate_animation() [clone .part.16]+0x294>
            sum += neighbours[j];
    11de:	add	r2, sp, #32
    11e0:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11e4:	adds	r3, #1
    11e6:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    11e8:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    11ea:	bne.n	11d6 <Screen::iterate_animation() [clone .part.16]+0x29a>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    11ec:	cmp	r5, r4
    11ee:	beq.w	13fa <Screen::iterate_animation() [clone .part.16]+0x4be>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    11f2:	adds	r0, #1
    11f4:	cmp.w	r0, #256	; 0x100
    11f8:	bne.n	11ca <Screen::iterate_animation() [clone .part.16]+0x28e>
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    11fa:	ldr.w	r3, [r9, #8]
    11fe:	subs	r1, r1, r3
    1200:	str.w	r1, [ip]
          }
          if (nextCells[x][y] < _floorInit){
    1204:	ldr.w	r3, [r9, #12]
    1208:	cmp	r3, r1
            nextCells[x][y] = _floorInit;
    120a:	it	gt
    120c:	strgt.w	r3, [ip]
    1210:	ldr	r3, [sp, #0]
    1212:	add.w	ip, ip, #4
    1216:	adds	r7, #1
    1218:	add.w	r8, r8, #1
    121c:	adds	r3, #4
    121e:	add.w	fp, fp, #1
    1222:	str	r3, [sp, #0]
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    1224:	ldr	r3, [sp, #12]
    1226:	cmp	r3, ip
    1228:	bne.n	112c <Screen::iterate_animation() [clone .part.16]+0x1f0>
    122a:	ldr	r2, [sp, #12]
    122c:	ldr	r3, [sp, #20]
    122e:	adds	r2, #96	; 0x60
    1230:	adds	r3, #24
    1232:	str	r2, [sp, #12]
    1234:	ldr	r2, [sp, #4]
      }
    }
  
    void iterate(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    1236:	cmp.w	r3, #576	; 0x240
    123a:	str	r3, [sp, #20]
    123c:	add.w	r2, r2, #1
    1240:	str	r2, [sp, #4]
    1242:	bne.w	1104 <Screen::iterate_animation() [clone .part.16]+0x1c8>
    1246:	movw	r5, #4632	; 0x1218
    124a:	ldr.w	fp, [sp, #28]
    124e:	addw	r4, r9, #2328	; 0x918
    1252:	add	r5, r9
    1254:	sub.w	r3, r4, #2304	; 0x900
    1258:	sub.w	r0, r4, #2208	; 0x8a0
                neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
                index++;
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    125c:	mov	r2, r4
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    125e:	ldr.w	r1, [r2, #4]!
    1262:	str.w	r1, [r3, #4]!
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1266:	cmp	r0, r3
    1268:	bne.n	125e <Screen::iterate_animation() [clone .part.16]+0x322>
    126a:	adds	r4, #96	; 0x60
            nextCells[x][y] = _floorInit;
          }
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    126c:	cmp	r5, r4
    126e:	bne.n	1254 <Screen::iterate_animation() [clone .part.16]+0x318>
		ratio++;
    1270:	ldr.w	r3, [fp, #440]	; 0x1b8
    1274:	adds	r3, #1
		if (ratio == RATIO_GROWTH){
    1276:	cmp	r3, #1
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
		}
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
    1278:	str.w	r3, [fp, #440]	; 0x1b8
		if (ratio == RATIO_GROWTH){
    127c:	beq.w	15a8 <Screen::iterate_animation() [clone .part.16]+0x66c>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1280:	movs	r3, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*10 % 360;
    1282:	ldr.w	ip, [pc, #800]	; 15a4 <Screen::iterate_animation() [clone .part.16]+0x668>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1286:	str	r3, [sp, #0]
    1288:	str	r3, [sp, #8]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    128a:	ldr	r2, [sp, #8]
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    128c:	mov.w	lr, #0
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*10 % 360;
    1290:	mov.w	r8, #360	; 0x168
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    1294:	add.w	r9, r2, r2, lsl #1
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
    *r = colors[0];
    1298:	add.w	r3, r2, r2, lsl #3
    129c:	mov.w	r9, r9, lsl #3
    12a0:	lsls	r3, r3, #3
    12a2:	str	r3, [sp, #4]
    12a4:	add.w	r3, r9, lr
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12a8:	ldr.w	r2, [fp, #420]	; 0x1a4
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12ac:	ldr.w	r1, [fp, #416]	; 0x1a0
    12b0:	adds	r3, #6
    12b2:	lsls	r3, r3, #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12b4:	add	r2, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12b6:	add	r3, r1
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12b8:	ldr	r4, [r2, #4]
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12ba:	ldr	r0, [r3, #4]
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12bc:	adds	r4, #50	; 0x32
    12be:	ldr	r3, [pc, #720]	; (1590 <Screen::iterate_animation() [clone .part.16]+0x654>)
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12c0:	add.w	r0, r0, r0, lsl #2
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12c4:	smull	r2, r3, r4, r3
    12c8:	asrs	r1, r4, #31
    12ca:	adds	r5, r4, r3
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12cc:	ldr	r3, [pc, #704]	; (1590 <Screen::iterate_animation() [clone .part.16]+0x654>)
    12ce:	smull	r2, r3, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12d2:	rsb	r2, r1, r5, asr #7
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12d6:	adds	r1, r0, r3
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12d8:	rsb	r2, r2, r2, lsl #8
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12dc:	asrs	r3, r0, #31
  }

  int saturationMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return max((cells[x][y]+50) % 255, 220);
    12de:	subs	r2, r4, r2
  }

  int brightnessMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return (cells[x][y]*5) % 255;
    12e0:	rsb	r1, r3, r1, asr #7
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    12e4:	cmp	r2, #219	; 0xdb
    12e6:	rsb	r1, r1, r1, lsl #8
    12ea:	sub.w	r1, r0, r1
    12ee:	ble.w	157a <Screen::iterate_animation() [clone .part.16]+0x63e>
    12f2:	rsb	r2, r2, #255	; 0xff
    12f6:	ldr	r3, [pc, #668]	; (1594 <Screen::iterate_animation() [clone .part.16]+0x658>)
    12f8:	ldr.w	r0, [r3, r2, lsl #2]
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
				bri = (*_grow_automaton).brightnessMap(x, y);
				sat = (*_sat_automaton).saturationMap(x, y);
				
				if ((*_fg_automaton).can_color(x, y)) {
    12fc:	ldr.w	r3, [fp, #412]	; 0x19c
    1300:	add.w	r2, r3, #4640	; 0x1220
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    1304:	ldrb	r4, [r3, #24]
    1306:	ldr	r2, [r2, #0]
      return _background[x][y];
    1308:	add	r2, lr
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    130a:	cmp	r4, #0
    130c:	beq.w	157e <Screen::iterate_animation() [clone .part.16]+0x642>
      return _background[x][y];
    1310:	ldr	r4, [sp, #0]
    1312:	ldrb	r2, [r2, r4]
    1314:	cbnz	r2, 131a <Screen::iterate_animation() [clone .part.16]+0x3de>
  }

  int colorMap(int x, int y){
    //float val = value * 0.001; ///rework this
    //int b = (val >= 1.0 ? 255 : (val <= 0.0 ? 0 : (int)floor(val * 256.0)));
    return cells[x][y]*10 % 360;
    1316:	ldr.w	r3, [fp, #408]	; 0x198
    131a:	add.w	r2, r9, lr
    131e:	ldr.w	r6, [fp, #452]	; 0x1c4
    1322:	add.w	r3, r3, r2, lsl #2
    1326:	ldr	r4, [r3, #28]
    1328:	add.w	r4, r4, r4, lsl #2
    132c:	lsls	r4, r4, #1
    132e:	smull	r2, r3, r4, ip
    1332:	asrs	r2, r4, #31
    1334:	adds	r5, r4, r3
    1336:	ldr.w	r3, [fp, #456]	; 0x1c8
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    133a:	cmp	r3, #0
    133c:	rsb	r5, r2, r5, asr #8
    1340:	mov	r2, r3
    1342:	it	lt
    1344:	addlt	r2, r3, #1
    1346:	mls	r5, r8, r5, r4
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    134a:	add	r3, r6
		
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
    134c:	asrs	r2, r2, #1
    134e:	adds	r4, r6, r2
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    1350:	negs	r2, r2
		int val = (hue - shift_val) % 360 ;
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    1352:	subs	r3, r3, r4
    1354:	smull	r6, r7, r2, ip
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    1358:	subs	r6, r5, r4
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    135a:	smull	r4, r5, r3, ip
    135e:	add	r7, r2
    1360:	asrs	r4, r2, #31
    1362:	add.w	sl, r3, r5
    1366:	asrs	r5, r3, #31
    1368:	rsb	r7, r4, r7, asr #8
    136c:	rsb	sl, r5, sl, asr #8
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    1370:	smull	r4, r5, r6, ip
    1374:	mls	r2, r8, r7, r2
		int bottom = (bottom_hue_threshold - shift_val) % 360;
		int top = (bottom_hue_threshold + hue_difference - shift_val) % 360;
    1378:	mls	sl, r8, sl, r3
		return val;
	}

	int filter_hue(int hue){
		int shift_val = bottom_hue_threshold + (int) hue_difference/2;
		int val = (hue - shift_val) % 360 ;
    137c:	adds	r4, r6, r5
    137e:	asrs	r3, r6, #31
    1380:	rsb	r2, sl, r2
    1384:	rsb	r3, r3, r4, asr #8
    1388:	cmp.w	r2, #360	; 0x168
    138c:	mls	r3, r8, r3, r6
    1390:	bge.w	1550 <Screen::iterate_animation() [clone .part.16]+0x614>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    1394:	mla	r3, r2, r3, r3
    1398:	ldr	r2, [pc, #508]	; (1598 <Screen::iterate_animation() [clone .part.16]+0x65c>)
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    139a:	cmp	r1, #90	; 0x5a
    139c:	smull	r4, r2, r2, r3
    13a0:	mov.w	r3, r3, asr #31
    13a4:	rsb	r3, r3, r2, asr #7
    13a8:	add	sl, r3
    13aa:	bgt.w	156a <Screen::iterate_animation() [clone .part.16]+0x62e>
    13ae:	movs	r2, #0
  */
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
  int colors[3] = {0, 0, 0};
  int base;
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    13b0:	cmp	r0, #255	; 0xff
    13b2:	beq.n	1450 <Screen::iterate_animation() [clone .part.16]+0x514>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    13b4:	ldr	r3, [pc, #484]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    13b6:	mul.w	r0, r2, r0
    switch(hue/60) {
    13ba:	smull	r1, r3, r3, sl
    13be:	mov.w	r1, sl, asr #31
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    13c2:	asrs	r0, r0, #8
    switch(hue/60) {
    13c4:	add	r3, sl
    13c6:	rsb	r3, r1, r3, asr #5
    13ca:	cmp	r3, #5
    13cc:	bhi.w	1588 <Screen::iterate_animation() [clone .part.16]+0x64c>
    13d0:	tbb	[pc, r3]
    13d4:	.word	0x7e9aab53
    13d8:	.short	0x1964

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    13da:	ldrb.w	r3, [fp]
    13de:	eor.w	r3, r3, #1
    13e2:	b.n	fa2 <Screen::iterate_animation() [clone .part.16]+0x66>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    13e4:	ldr.w	r2, [r9, #4]
    13e8:	add	r1, r2
    13ea:	str.w	r1, [ip]
    13ee:	b.n	106e <Screen::iterate_animation() [clone .part.16]+0x132>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    13f0:	ldrb.w	r3, [fp]
    13f4:	eor.w	r3, r3, #1
    13f8:	b.n	1138 <Screen::iterate_animation() [clone .part.16]+0x1fc>
              }
            }
          
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    13fa:	ldr.w	r2, [r9, #4]
    13fe:	add	r1, r2
    1400:	str.w	r1, [ip]
    1404:	b.n	1204 <Screen::iterate_animation() [clone .part.16]+0x2c8>
        colors[2] = val;
    break;
    case 5:
        colors[0] = val;
        colors[1] = base;
        colors[2] = (((val-base)*(60-(hue%60)))/60)+base;
    1406:	ldr	r3, [pc, #404]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    1408:	uxtb	r6, r2
    140a:	uxtb	r5, r0
    140c:	smull	r3, r4, r3, sl
    1410:	subs	r3, r2, r0
    1412:	add.w	r2, r4, sl
    1416:	rsb	r1, r1, r2, asr #5
    141a:	rsb	r1, r1, r1, lsl #4
    141e:	sub.w	sl, sl, r1, lsl #2
    1422:	rsb	r2, sl, #60	; 0x3c
    1426:	mul.w	r3, r3, r2
    142a:	ldr	r2, [pc, #368]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    142c:	smull	r2, r1, r2, r3
    1430:	asrs	r2, r3, #31
    1432:	add	r3, r1
    1434:	rsb	r3, r2, r3, asr #5
    1438:	adds	r2, r0, r3
    143a:	uxtb	r4, r2
    break;
    }
    *r = colors[0];
    143c:	ldr	r1, [sp, #4]
    143e:	add.w	r3, lr, lr, lsl #1

				//hue = (hue + 100)%360;
				hue = filter_hue(hue);
				bri = shift_bri(bri);
				
				getRGB(hue, sat, bri, &nextGoal_colors->pixel[x][y].r, &nextGoal_colors->pixel[x][y].g, &nextGoal_colors->pixel[x][y].b);
    1442:	ldr.w	r2, [fp, #468]	; 0x1d4
    1446:	add	r3, r1
    1448:	adds	r1, r2, r3
    144a:	strb	r6, [r2, r3]
    *g = colors[1];
    144c:	strb	r5, [r1, #1]
    *b = colors[2]; 
    144e:	strb	r4, [r1, #2]
		return result;
	}
	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
			for (int y = 0; y < SIZE_SCREEN; y++) {
    1450:	add.w	lr, lr, #1
    1454:	cmp.w	lr, #24
    1458:	bne.w	12a4 <Screen::iterate_animation() [clone .part.16]+0x368>
		int result = map(val, 0, 360,  top, bottom);
		return result;
	}
	void gen_color_matrix() {
		int hue = 0, sat = 0, bri = 0;
		for (int x = 0; x < SIZE_SCREEN; x++) {
    145c:	ldr	r3, [sp, #8]
    145e:	ldr	r2, [sp, #0]
    1460:	adds	r3, #1
    1462:	adds	r2, #24
    1464:	cmp	r3, #24
    1466:	str	r3, [sp, #8]
    1468:	str	r2, [sp, #0]
    146a:	bne.w	128a <Screen::iterate_animation() [clone .part.16]+0x34e>

		

		gen_color_matrix();

		newFrameReady = true;
    146e:	movs	r3, #1
    1470:	strb.w	r3, [fp, #436]	; 0x1b4
    //Serial.println("newFrameReady");
	}
    1474:	add	sp, #68	; 0x44
    1476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    case 0:
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
    147a:	subs	r3, r2, r0
    147c:	uxtb	r6, r2
    147e:	uxtb	r4, r0
    1480:	mul.w	sl, sl, r3
    1484:	ldr	r3, [pc, #276]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    1486:	smull	r2, r3, r3, sl
    148a:	mov.w	r2, sl, asr #31
    148e:	add	sl, r3
    1490:	rsb	sl, r2, sl, asr #5
    1494:	add.w	r2, r0, sl
    1498:	uxtb	r5, r2
    149a:	b.n	143c <Screen::iterate_animation() [clone .part.16]+0x500>
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
        colors[2] = val;
    break;
    case 4:
        colors[0] = (((val-base)*(hue%60))/60)+base;
    149c:	ldr	r3, [pc, #252]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    149e:	uxtb	r4, r2
    14a0:	smull	r3, r5, r3, sl
    14a4:	subs	r3, r2, r0
    14a6:	add.w	r2, r5, sl
    14aa:	uxtb	r5, r0
    14ac:	rsb	r1, r1, r2, asr #5
    14b0:	rsb	r1, r1, r1, lsl #4
    14b4:	sub.w	sl, sl, r1, lsl #2
    14b8:	mul.w	r3, sl, r3
    14bc:	ldr	r2, [pc, #220]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    14be:	smull	r2, r1, r2, r3
    14c2:	asrs	r2, r3, #31
    14c4:	add	r3, r1
    14c6:	rsb	r3, r2, r3, asr #5
    14ca:	adds	r2, r0, r3
    14cc:	uxtb	r6, r2
    14ce:	b.n	143c <Screen::iterate_animation() [clone .part.16]+0x500>
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    break;
    case 3:
        colors[0] = base;
        colors[1] = (((val-base)*(60-(hue%60)))/60)+base;
    14d0:	ldr	r3, [pc, #200]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    14d2:	uxtb	r4, r2
    14d4:	uxtb	r6, r0
    14d6:	smull	r3, r5, r3, sl
    14da:	subs	r3, r2, r0
    14dc:	add.w	r2, r5, sl
    14e0:	rsb	r1, r1, r2, asr #5
    14e4:	rsb	r1, r1, r1, lsl #4
    14e8:	sub.w	sl, sl, r1, lsl #2
    14ec:	rsb	r2, sl, #60	; 0x3c
    14f0:	mul.w	r3, r3, r2
    14f4:	ldr	r2, [pc, #164]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    14f6:	smull	r2, r1, r2, r3
    14fa:	asrs	r2, r3, #31
    14fc:	add	r3, r1
    14fe:	rsb	r3, r2, r3, asr #5
    1502:	adds	r2, r0, r3
    1504:	uxtb	r5, r2
    1506:	b.n	143c <Screen::iterate_animation() [clone .part.16]+0x500>
        colors[2] = base;
    break;
    case 2:
        colors[0] = base;
        colors[1] = val;
        colors[2] = (((val-base)*(hue%60))/60)+base;
    1508:	ldr	r3, [pc, #144]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    150a:	uxtb	r5, r2
    150c:	uxtb	r6, r0
    150e:	smull	r3, r4, r3, sl
    1512:	subs	r3, r2, r0
    1514:	add.w	r2, r4, sl
    1518:	rsb	r1, r1, r2, asr #5
    151c:	rsb	r1, r1, r1, lsl #4
    1520:	sub.w	sl, sl, r1, lsl #2
    1524:	mul.w	r3, sl, r3
    1528:	b.n	142a <Screen::iterate_animation() [clone .part.16]+0x4ee>
        colors[0] = val;
        colors[1] = (((val-base)*hue)/60)+base;
        colors[2] = base;
    break;
    case 1:
        colors[0] = (((val-base)*(60-(hue%60)))/60)+base;
    152a:	ldr	r3, [pc, #112]	; (159c <Screen::iterate_animation() [clone .part.16]+0x660>)
    152c:	uxtb	r5, r2
    152e:	smull	r3, r4, r3, sl
    1532:	subs	r3, r2, r0
    1534:	add.w	r2, r4, sl
    1538:	uxtb	r4, r0
    153a:	rsb	r1, r1, r2, asr #5
    153e:	rsb	r1, r1, r1, lsl #4
    1542:	sub.w	sl, sl, r1, lsl #2
    1546:	rsb	r2, sl, #60	; 0x3c
    154a:	mul.w	r3, r3, r2
    154e:	b.n	14bc <Screen::iterate_animation() [clone .part.16]+0x580>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1550:	mul.w	r3, r2, r3
	ColorMatrix* currGoal_colors = new ColorMatrix;
	ColorMatrix* nextGoal_colors = new ColorMatrix;

	int shift_bri(int bri) {
		int val = bri;
		if (val > LOW_BRI){
    1554:	cmp	r1, #90	; 0x5a
    1556:	smull	r2, r4, ip, r3
    155a:	mov.w	r2, r3, asr #31
    155e:	add	r3, r4
    1560:	rsb	r3, r2, r3, asr #8
    1564:	add	sl, r3
    1566:	ble.w	13ae <Screen::iterate_animation() [clone .part.16]+0x472>
			val = constrain(val+SHIFT_BRI, LOW_BRI, HIGH_BRI);
    156a:	adds	r1, #80	; 0x50
    156c:	ldr	r3, [pc, #36]	; (1594 <Screen::iterate_animation() [clone .part.16]+0x658>)
    156e:	cmp	r1, #255	; 0xff
    1570:	it	ge
    1572:	movge	r1, #255	; 0xff
    1574:	ldr.w	r2, [r3, r1, lsl #2]
    1578:	b.n	13b0 <Screen::iterate_animation() [clone .part.16]+0x474>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    157a:	movs	r0, #5
    157c:	b.n	12fc <Screen::iterate_animation() [clone .part.16]+0x3c0>

  boolean can_color(int x, int y){
    if (_isBg){
      return _background[x][y];
    } else {
      return !_background[x][y];
    157e:	ldr	r4, [sp, #0]
    1580:	ldrb	r2, [r2, r4]
    1582:	eor.w	r2, r2, #1
    1586:	b.n	1314 <Screen::iterate_animation() [clone .part.16]+0x3d8>
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
    base = ((255 - sat) * val)>>8;
    switch(hue/60) {
    1588:	movs	r4, #0
    158a:	mov	r5, r4
    158c:	mov	r6, r4
    158e:	b.n	143c <Screen::iterate_animation() [clone .part.16]+0x500>
    1590:	.word	0x80808081
    1594:	.word	0x2000017c
    1598:	.word	0x5ac5242b
    159c:	.word	0x88888889
    15a0:	.word	0x2aaaaaab
    15a4:	.word	0xb60b60b7
		if (newFrameReady) return;
		(*_fg_automaton).iterate();
		(*_bg_automaton).iterate();
		ratio++;
		if (ratio == RATIO_GROWTH){
			(*_grow_automaton).iterate_growth();
    15a8:	ldr.w	sl, [fp, #416]	; 0x1a0
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    15ac:	movs	r2, #32
    15ae:	mov.w	r8, #2
    15b2:	ldr.w	r9, [pc, #732]	; 1890 <Screen::iterate_animation() [clone .part.16]+0x954>
    15b6:	addw	r3, sl, #2332	; 0x91c
    15ba:	movs	r1, #0
    15bc:	add.w	r0, sp, r2
    15c0:	str	r3, [sp, #4]
    15c2:	bl	c814 <memset>
    15c6:	str.w	fp, [sp, #20]


void renderInterrupt() {
 

  updateBeams();
    15ca:	bl	4f0 <updateBeams()>
  updateScreensFade();
    15ce:	bl	a88 <updateScreensFade()>
    15d2:	ldr.w	r3, [sl]
    15d6:	ldr	r2, [sp, #4]
    15d8:	mov.w	ip, #4294967295
    15dc:	str	r3, [sp, #8]
    15de:	ldr.w	r3, [sl, #12]
    15e2:	mov	fp, r2
    15e4:	str	r3, [sp, #12]
    15e6:	subw	r3, r2, #2308	; 0x904
    15ea:	str	r3, [sp, #0]
    15ec:	sub.w	r3, r8, #3
    15f0:	str	r3, [sp, #16]
    15f2:	ldr	r6, [sp, #16]
    15f4:	add.w	lr, sp, #32
    15f8:	add.w	r7, ip, #3
    15fc:	smull	r3, r2, r9, r6
    1600:	asrs	r3, r6, #31
    1602:	mov	r4, lr
    1604:	mov	r1, ip
    1606:	rsb	r3, r3, r2, asr #2
    160a:	add.w	r3, r3, r3, lsl #1
    160e:	sub.w	r3, r6, r3, lsl #3
    1612:	adds	r3, #24
    1614:	smull	r2, r0, r9, r3
    1618:	asrs	r2, r3, #31
    161a:	rsb	r0, r2, r0, asr #2
    161e:	add.w	r0, r0, r0, lsl #1
    1622:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1626:	add.w	r0, r0, r0, lsl #1
    162a:	lsls	r0, r0, #3
    162c:	smull	r3, r2, r9, r1
    1630:	asrs	r3, r1, #31
    1632:	rsb	r3, r3, r2, asr #2
    1636:	add.w	r3, r3, r3, lsl #1
    163a:	sub.w	r3, r1, r3, lsl #3
    163e:	adds	r1, #1
    1640:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1642:	cmp	r1, r7
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    1644:	smull	r2, r5, r9, r3
    1648:	mov.w	r2, r3, asr #31
    164c:	rsb	r2, r2, r5, asr #2
    1650:	add.w	r2, r2, r2, lsl #1
    1654:	sub.w	r3, r3, r2, lsl #3
    1658:	add	r3, r0
    165a:	add.w	r3, sl, r3, lsl #2
    165e:	ldr	r3, [r3, #28]
    1660:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    1664:	bne.n	162c <Screen::iterate_animation() [clone .part.16]+0x6f0>
    1666:	adds	r6, #1
    1668:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    166c:	cmp	r8, r6
    166e:	bne.n	15fc <Screen::iterate_animation() [clone .part.16]+0x6c0>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    1670:	ldr	r3, [sp, #0]
    1672:	movs	r1, #1
    1674:	ldr.w	r0, [r3, #4]!
    1678:	str	r3, [sp, #0]
    167a:	ldr	r3, [sp, #8]
    167c:	adds	r5, r0, r3
    167e:	movs	r4, #0
    1680:	mov	r3, r4
    1682:	b.n	168a <Screen::iterate_animation() [clone .part.16]+0x74e>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1684:	adds	r3, #1
    1686:	cmp	r3, #8
    1688:	beq.n	16a0 <Screen::iterate_animation() [clone .part.16]+0x764>
          if ((i >> j) % 2 == 1){
    168a:	asr.w	r2, r1, r3
    168e:	lsls	r6, r2, #31
    1690:	bpl.n	1684 <Screen::iterate_animation() [clone .part.16]+0x748>
            sum += neighbours[j];
    1692:	add	r2, sp, #32
    1694:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1698:	adds	r3, #1
    169a:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    169c:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    169e:	bne.n	168a <Screen::iterate_animation() [clone .part.16]+0x74e>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    16a0:	cmp	r5, r4
    16a2:	beq.w	1876 <Screen::iterate_animation() [clone .part.16]+0x93a>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    16a6:	adds	r1, #1
    16a8:	cmp.w	r1, #256	; 0x100
    16ac:	bne.n	167e <Screen::iterate_animation() [clone .part.16]+0x742>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    16ae:	ldr.w	r3, [sl, #8]
    16b2:	subs	r0, r0, r3
    16b4:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    16b8:	ldr	r2, [sp, #12]
    16ba:	add.w	ip, ip, #1
    16be:	add.w	fp, fp, #4
    16c2:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    16c4:	it	gt
    16c6:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    16ca:	cmp.w	ip, #23
    16ce:	bne.n	15f2 <Screen::iterate_animation() [clone .part.16]+0x6b6>
    16d0:	ldr	r3, [sp, #4]
    16d2:	add.w	r8, r8, #1
    16d6:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    16d8:	cmp.w	r8, #26
    16dc:	str	r3, [sp, #4]
    16de:	bne.w	15ca <Screen::iterate_animation() [clone .part.16]+0x68e>
    16e2:	movw	r0, #4632	; 0x1218
    16e6:	ldr.w	fp, [sp, #20]
    16ea:	addw	r3, sl, #2328	; 0x918
    16ee:	add	r0, sl
    16f0:	sub.w	r2, r3, #2304	; 0x900
    16f4:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    16f8:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    16fa:	ldr.w	r4, [r1, #4]!
    16fe:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1702:	cmp	r5, r2
    1704:	bne.n	16fa <Screen::iterate_animation() [clone .part.16]+0x7be>
    1706:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    1708:	cmp	r0, r3
    170a:	bne.n	16f0 <Screen::iterate_animation() [clone .part.16]+0x7b4>
			(*_sat_automaton).iterate_growth();
    170c:	ldr.w	sl, [fp, #420]	; 0x1a4
        }
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1710:	movs	r2, #32
    1712:	mov.w	r8, #2
    1716:	ldr.w	r9, [pc, #376]	; 1890 <Screen::iterate_animation() [clone .part.16]+0x954>
    171a:	addw	r3, sl, #2332	; 0x91c
    171e:	movs	r1, #0
    1720:	add.w	r0, sp, r2
    1724:	str	r3, [sp, #4]
    1726:	bl	c814 <memset>
    172a:	str.w	fp, [sp, #20]


void renderInterrupt() {
 

  updateBeams();
    172e:	bl	4f0 <updateBeams()>
  updateScreensFade();
    1732:	bl	a88 <updateScreensFade()>
    1736:	ldr.w	r3, [sl]
    173a:	ldr	r2, [sp, #4]
    173c:	mov.w	ip, #4294967295
    1740:	str	r3, [sp, #8]
    1742:	ldr.w	r3, [sl, #12]
    1746:	mov	fp, r2
    1748:	str	r3, [sp, #12]
    174a:	subw	r3, r2, #2308	; 0x904
    174e:	str	r3, [sp, #0]
    1750:	sub.w	r3, r8, #3
    1754:	str	r3, [sp, #16]
    1756:	ldr	r6, [sp, #16]
    1758:	add.w	lr, sp, #32
    175c:	add.w	r7, ip, #3
    1760:	smull	r3, r2, r9, r6
    1764:	asrs	r3, r6, #31
    1766:	mov	r4, lr
    1768:	mov	r1, ip
    176a:	rsb	r3, r3, r2, asr #2
    176e:	add.w	r3, r3, r3, lsl #1
    1772:	sub.w	r3, r6, r3, lsl #3
    1776:	adds	r3, #24
    1778:	smull	r2, r0, r9, r3
    177c:	asrs	r2, r3, #31
    177e:	rsb	r0, r2, r0, asr #2
    1782:	add.w	r0, r0, r0, lsl #1
    1786:	sub.w	r0, r3, r0, lsl #3
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    178a:	add.w	r0, r0, r0, lsl #1
    178e:	lsls	r0, r0, #3
    1790:	smull	r3, r2, r9, r1
    1794:	asrs	r3, r1, #31
    1796:	rsb	r3, r3, r2, asr #2
    179a:	add.w	r3, r3, r3, lsl #1
    179e:	sub.w	r3, r1, r3, lsl #3
    17a2:	adds	r1, #1
    17a4:	adds	r3, #24
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    17a6:	cmp	r7, r1
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
    17a8:	smull	r2, r5, r9, r3
    17ac:	mov.w	r2, r3, asr #31
    17b0:	rsb	r2, r2, r5, asr #2
    17b4:	add.w	r2, r2, r2, lsl #1
    17b8:	sub.w	r3, r3, r2, lsl #3
    17bc:	add	r3, r0
    17be:	add.w	r3, sl, r3, lsl #2
    17c2:	ldr	r3, [r3, #28]
    17c4:	str.w	r3, [r4], #4
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
            for (int dy = -1; dy <= 1; dy++){ 
    17c8:	bne.n	1790 <Screen::iterate_animation() [clone .part.16]+0x854>
    17ca:	adds	r6, #1
    17cc:	add.w	lr, lr, #12
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
          int index = 0;
          for (int dx = -1; dx <= 1; dx++){
    17d0:	cmp	r6, r8
    17d2:	bne.n	1760 <Screen::iterate_animation() [clone .part.16]+0x824>
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    17d4:	ldr	r3, [sp, #0]
    17d6:	movs	r1, #1
    17d8:	ldr.w	r0, [r3, #4]!
    17dc:	str	r3, [sp, #0]
    17de:	ldr	r3, [sp, #8]
    17e0:	adds	r5, r0, r3
    17e2:	movs	r4, #0
    17e4:	mov	r3, r4
    17e6:	b.n	17ee <Screen::iterate_animation() [clone .part.16]+0x8b2>
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    17e8:	adds	r3, #1
    17ea:	cmp	r3, #8
    17ec:	beq.n	1804 <Screen::iterate_animation() [clone .part.16]+0x8c8>
          if ((i >> j) % 2 == 1){
    17ee:	asr.w	r2, r1, r3
    17f2:	lsls	r2, r2, #31
    17f4:	bpl.n	17e8 <Screen::iterate_animation() [clone .part.16]+0x8ac>
            sum += neighbours[j];
    17f6:	add	r2, sp, #32
    17f8:	ldr.w	r2, [r2, r3, lsl #2]
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    17fc:	adds	r3, #1
    17fe:	cmp	r3, #8
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
    1800:	add	r4, r2
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
        int sum = 0;
        for (int j = 0; j < neighboursLength; j++){
    1802:	bne.n	17ee <Screen::iterate_animation() [clone .part.16]+0x8b2>
          if ((i >> j) % 2 == 1){
            sum += neighbours[j];
            
          }
        }
        if (sum == target) {
    1804:	cmp	r5, r4
    1806:	beq.n	1882 <Screen::iterate_animation() [clone .part.16]+0x946>
        }
      }
      }

    boolean canSum(int neighbours[], int neighboursLength, int target){
      for (int i = 1; i < pow(2, neighboursLength); i++){
    1808:	adds	r1, #1
    180a:	cmp.w	r1, #256	; 0x100
    180e:	bne.n	17e2 <Screen::iterate_animation() [clone .part.16]+0x8a6>
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
          } else {
            nextCells[x][y] = (cells[x][y] - _penalty);
    1810:	ldr.w	r3, [sl, #8]
    1814:	subs	r0, r0, r3
    1816:	str.w	r0, [fp]
          }
          if (nextCells[x][y] < _floorInit){
    181a:	ldr	r2, [sp, #12]
    181c:	add.w	ip, ip, #1
    1820:	add.w	fp, fp, #4
    1824:	cmp	r2, r0
            nextCells[x][y] = _floorInit;
    1826:	it	gt
    1828:	strgt.w	r2, [fp, #-4]

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
         renderInterrupt();
        for (int y = 0; y < SIZE_SCREEN; y++){
    182c:	cmp.w	ip, #23
    1830:	bne.n	1756 <Screen::iterate_animation() [clone .part.16]+0x81a>
    1832:	ldr	r3, [sp, #4]
    1834:	add.w	r8, r8, #1
    1838:	adds	r3, #96	; 0x60
      }
    }

    void iterate_growth(){
      int neighbours[8] = {0, 0, 0, 0, 0, 0, 0, 0};
      for (int x = 0; x < SIZE_SCREEN; x++){
    183a:	cmp.w	r8, #26
    183e:	str	r3, [sp, #4]
    1840:	bne.w	172e <Screen::iterate_animation() [clone .part.16]+0x7f2>
    1844:	movw	r0, #4632	; 0x1218
    1848:	ldr.w	fp, [sp, #20]
    184c:	addw	r3, sl, #2328	; 0x918
    1850:	add	r0, sl
    1852:	sub.w	r2, r3, #2304	; 0x900
    1856:	sub.w	r5, r3, #2208	; 0x8a0
            for (int dy = -1; dy <= 1; dy++){ 
              neighbours[index] = cells[mod(x+dx, SIZE_SCREEN)][mod(y+dy, SIZE_SCREEN)]; //_neighbourMask.charAt(index) == '0' ? INT_MIN : cells_A[mod(x+dx, SIZE_SCREEN_A)][mod(y+dy, SIZE_SCREEN_A)];
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
    185a:	mov	r1, r3
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          cells[x][y] = nextCells[x][y];
    185c:	ldr.w	r4, [r1, #4]!
    1860:	str.w	r4, [r2, #4]!
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    1864:	cmp	r5, r2
    1866:	bne.n	185c <Screen::iterate_animation() [clone .part.16]+0x920>
    1868:	adds	r3, #96	; 0x60
          if (nextCells[x][y] < _floorInit){
            nextCells[x][y] = _floorInit;
          }
        }
      }
      for (int x = 0; x < SIZE_SCREEN; x++){
    186a:	cmp	r0, r3
    186c:	bne.n	1852 <Screen::iterate_animation() [clone .part.16]+0x916>
			ratio = 0;
    186e:	movs	r3, #0
    1870:	str.w	r3, [fp, #440]	; 0x1b8
    1874:	b.n	1280 <Screen::iterate_animation() [clone .part.16]+0x344>
              index++;
            }
          }
          boolean condition = canSum(neighbours, sizeof(neighbours)/sizeof(neighbours[0]), _target + cells[x][y]);
          if (condition){
            nextCells[x][y] = (cells[x][y] + _reward);
    1876:	ldr.w	r2, [sl, #4]
    187a:	add	r0, r2
    187c:	str.w	r0, [fp]
    1880:	b.n	16b8 <Screen::iterate_animation() [clone .part.16]+0x77c>
    1882:	ldr.w	r2, [sl, #4]
    1886:	add	r0, r2
    1888:	str.w	r0, [fp]
    188c:	b.n	181a <Screen::iterate_animation() [clone .part.16]+0x8de>
    188e:	nop
    1890:	.word	0x2aaaaaab
    1894:	.word	0x00000000

00001898 <setup>:
}




void setup() {
    1898:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(SETUP_DELAY);
    189c:	movw	r0, #3000	; 0xbb8
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    18a0:	mov.w	fp, #1
    18a4:	movw	r5, #4636	; 0x121c
}




void setup() {
    18a8:	vpush	{d8-d9}
    18ac:	sub	sp, #12
  delay(SETUP_DELAY);
    18ae:	bl	ac5c <delay>
  rtc_set(0);
    18b2:	movs	r0, #0
    18b4:	bl	ac30 <rtc_set>
  randomSeed(analogRead(17)+analogRead(16));
    18b8:	movs	r0, #17
    18ba:	bl	ad70 <analogRead>
    18be:	mov	r4, r0
    18c0:	movs	r0, #16
    18c2:	bl	ad70 <analogRead>
    18c6:	add	r0, r4
    18c8:	bl	b7a0 <randomSeed(unsigned long)>


  Serial.begin(9600);
  Serial1.begin(9600);
    18cc:	movs	r2, #0
    18ce:	mov.w	r1, #9600	; 0x2580
    18d2:	ldr	r0, [pc, #716]	; (1ba0 <setup+0x308>)
    18d4:	bl	b010 <HardwareSerial::begin(unsigned long, unsigned short)>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    18d8:	ldr	r3, [pc, #712]	; (1ba4 <setup+0x30c>)
    18da:	ldr.w	r0, [r3, #424]	; 0x1a8
    18de:	bl	9768 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    18e2:	ldr	r3, [pc, #704]	; (1ba4 <setup+0x30c>)
    18e4:	movs	r1, #255	; 0xff
    18e6:	ldr.w	r0, [r3, #424]	; 0x1a8
    18ea:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    18ee:	ldr	r3, [pc, #692]	; (1ba4 <setup+0x30c>)
    18f0:	movs	r1, #8
    18f2:	movs	r0, #0
    18f4:	ldr.w	r4, [r3, #412]	; 0x19c
    18f8:	bl	b7b4 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    18fc:	add.w	r1, r0, fp
    1900:	ldr	r3, [pc, #672]	; (1ba4 <setup+0x30c>)
    1902:	add.w	r0, r0, r0, lsl #1
    1906:	mov.w	ip, #0
    190a:	add.w	r1, r1, r1, lsl #1
    190e:	ldr.w	lr, [r3, #428]	; 0x1ac
    1912:	add.w	r8, r3, r0, lsl #3
    1916:	ldr	r0, [pc, #652]	; (1ba4 <setup+0x30c>)
    1918:	lsls	r1, r1, #3
    191a:	str.w	lr, [r4, r5]
    191e:	ldr.w	r2, [r8, #32]
    1922:	ldr.w	r6, [r8, #40]	; 0x28
    1926:	add.w	r9, r0, r1
    192a:	ldr	r0, [r0, r1]
    192c:	ldr.w	r1, [r8, #36]	; 0x24
    1930:	ldr.w	r7, [r3, #432]	; 0x1b0
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    1934:	ldr.w	r3, [r3, #408]	; 0x198
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1938:	str	r1, [r4, #12]
    193a:	ldr.w	r1, [r9, #4]
    193e:	add.w	r9, r3, #4640	; 0x1220
    1942:	str	r6, [r4, #16]
    1944:	ldr.w	r6, [r8, #44]	; 0x2c
    1948:	add.w	r8, r4, #4640	; 0x1220
    194c:	str	r2, [r4, #8]
    194e:	ldr	r2, [pc, #596]	; (1ba4 <setup+0x30c>)
    1950:	str	r6, [r4, #20]
    1952:	ldr	r2, [r2, #4]
    1954:	str	r0, [r4, #0]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    1956:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1958:	mov	r6, r2
    195a:	ldr	r2, [pc, #584]	; (1ba4 <setup+0x30c>)
    195c:	str	r1, [r4, #4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    195e:	movs	r1, #6
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1960:	strb.w	ip, [r4, #24]
    1964:	ldr.w	ip, [r2, #12]
    1968:	ldr	r4, [r2, #8]
    196a:	ldr	r2, [r2, #16]
    196c:	str.w	r7, [r8]
    1970:	str	r2, [r3, #16]
    1972:	ldr	r2, [pc, #560]	; (1ba4 <setup+0x30c>)
    1974:	str.w	lr, [r3, r5]
    1978:	ldr	r2, [r2, #20]
    197a:	strb.w	fp, [r3, #24]
    197e:	str	r2, [r3, #20]
    1980:	ldr	r2, [pc, #544]	; (1ba4 <setup+0x30c>)
    1982:	str.w	ip, [r3, #12]
    1986:	ldr	r2, [r2, #0]
    1988:	str	r6, [r3, #4]
    198a:	str	r2, [r3, #0]
    198c:	str	r4, [r3, #8]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    198e:	ldr	r3, [pc, #532]	; (1ba4 <setup+0x30c>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    1990:	str.w	r7, [r9]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    1994:	ldr.w	r8, [r3, #416]	; 0x1a0
    1998:	bl	b7b4 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    199c:	ldr	r3, [pc, #516]	; (1ba4 <setup+0x30c>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    199e:	add.w	r0, r0, r0, lsl #1
    19a2:	add.w	sl, r8, #4640	; 0x1220
    19a6:	add.w	r0, r3, r0, lsl #3
    19aa:	ldr.w	ip, [r3, #428]	; 0x1ac

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    19ae:	ldr.w	r7, [r3, #420]	; 0x1a4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    19b2:	add.w	r1, r0, #200	; 0xc8
    19b6:	str.w	ip, [r8, r5]
    19ba:	ldr.w	r3, [r3, #432]	; 0x1b0
    19be:	add.w	r9, r7, #4640	; 0x1220
    19c2:	ldr.w	r4, [r0, #196]	; 0xc4
    19c6:	ldmia	r1, {r1, r2, r6}
    19c8:	str.w	r6, [r8, #16]
    19cc:	ldr.w	r6, [r0, #212]	; 0xd4
    19d0:	ldr.w	r0, [r0, #192]	; 0xc0
    19d4:	str.w	r1, [r8, #8]
    19d8:	ldr	r1, [pc, #456]	; (1ba4 <setup+0x30c>)
    19da:	str.w	r2, [r8, #12]
    19de:	ldr	r1, [r1, #4]
    19e0:	ldr	r2, [pc, #448]	; (1ba4 <setup+0x30c>)
    19e2:	str.w	r6, [r8, #20]
    19e6:	mov	r6, r1
    19e8:	ldr.w	lr, [r2, #8]
    19ec:	ldr	r1, [r2, #20]
    19ee:	strb.w	fp, [r8, #24]
    19f2:	stmia.w	r8, {r0, r4}
    19f6:	ldr	r4, [r2, #16]
    19f8:	ldr	r0, [r2, #12]
    19fa:	ldr	r2, [r2, #0]
    19fc:	str.w	r3, [sl]
    1a00:	str.w	ip, [r7, r5]
    1a04:	str	r6, [r7, #4]
    1a06:	str	r2, [r7, #0]
    1a08:	strb.w	fp, [r7, #24]
    1a0c:	str.w	lr, [r7, #8]
    1a10:	str	r0, [r7, #12]
    1a12:	str	r4, [r7, #16]
    1a14:	str	r1, [r7, #20]
    1a16:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a1a:	ldr	r3, [pc, #392]	; (1ba4 <setup+0x30c>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a1c:	ldr	r2, [pc, #388]	; (1ba4 <setup+0x30c>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a1e:	ldr.w	r3, [r3, #336]	; 0x150
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    1a22:	ldr.w	r5, [r2, #412]	; 0x19c
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a26:	subs	r3, #1
    1a28:	ldr.w	r6, [r2, #340]	; 0x154
    1a2c:	ldrb.w	sl, [r2, #344]	; 0x158
    1a30:	cmp	r3, #4
    1a32:	bhi.w	31ac <setup+0x1914>
    1a36:	tbh	[pc, r3, lsl #1]
    1a3a:	.short	0x002f
    1a3c:	.word	0x00930058
    1a40:	.word	0x000500eb
    1a44:	add.w	r7, r5, #2304	; 0x900
    1a48:	add.w	r6, r5, #28
    1a4c:	mov	r4, r5
    1a4e:	mov	r8, r7
    1a50:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1a52:	cmp	r7, #0
    1a54:	bne.w	2ec6 <setup+0x162e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1a58:	ldr	r3, [r5, #0]
    1a5a:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1a5c:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1a60:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1a62:	str	r3, [r4, #120]	; 0x78
    1a64:	adds	r4, #96	; 0x60
    1a66:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1a68:	cmp	r4, r8
    1a6a:	bne.n	1a52 <setup+0x1ba>
    1a6c:	ldr	r3, [pc, #308]	; (1ba4 <setup+0x30c>)
    1a6e:	ldr	r2, [pc, #308]	; (1ba4 <setup+0x30c>)
    1a70:	ldr.w	r6, [r3, #340]	; 0x154
    1a74:	ldr.w	r3, [r3, #336]	; 0x150
    1a78:	ldrb.w	sl, [r2, #344]	; 0x158
    1a7c:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    1a7e:	ldr	r2, [pc, #292]	; (1ba4 <setup+0x30c>)
    1a80:	ldr.w	r5, [r2, #408]	; 0x198
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1a84:	cmp	r3, #4
    1a86:	bhi.w	3280 <setup+0x19e8>
    1a8a:	tbh	[pc, r3, lsl #1]
    1a8e:	.short	0x01ad
    1a90:	.word	0x011d0171
    1a94:	.word	0x00f401d9
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1a98:	movs	r0, #8
    1a9a:	bl	b7ac <random(unsigned long)>
    1a9e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1aa2:	movs	r0, #8
    1aa4:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1aa8:	cmp	r6, #0
    1aaa:	ble.n	1a6c <setup+0x1d4>
    1aac:	add.w	r3, r0, #15
    1ab0:	add.w	r4, r4, r4, lsl #1
    1ab4:	mov	r8, r6
    1ab6:	mov	r6, sl
    1ab8:	add.w	r4, r3, r4, lsl #3
    1abc:	movs	r7, #0
    1abe:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1ac2:	cbnz	r6, 1ad4 <setup+0x23c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1ac4:	ldr	r3, [r5, #0]
    1ac6:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1ac8:	adds	r7, #1
    1aca:	adds	r4, #4
    1acc:	cmp	r7, r8
    1ace:	beq.n	1a6c <setup+0x1d4>
      if (rand){
    1ad0:	cmp	r6, #0
    1ad2:	beq.n	1ac4 <setup+0x22c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ad4:	ldr	r3, [r5, #20]
    1ad6:	ldr	r2, [r5, #16]
    1ad8:	subs	r0, r3, r2
    1ada:	adds	r0, #2
    1adc:	bl	b7ac <random(unsigned long)>
    1ae0:	ldr	r3, [r5, #16]
    1ae2:	subs	r3, #1
    1ae4:	add	r0, r3
    1ae6:	str	r0, [r4, #0]
    1ae8:	b.n	1ac8 <setup+0x230>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1aea:	movs	r0, #8
    1aec:	bl	b7ac <random(unsigned long)>
    1af0:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1af4:	movs	r0, #8
    1af6:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1afa:	cmp	r6, #0
    1afc:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1afe:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1b02:	it	lt
    1b04:	addlt	r3, r6, #1
    1b06:	cmp	r6, #0
    1b08:	mov.w	fp, r3, asr #1
    1b0c:	it	lt
    1b0e:	addlt	r6, #1
    1b10:	rsb	fp, fp, #0
    1b14:	asrs	r6, r6, #1
    1b16:	add.w	r7, r0, fp
    1b1a:	adds	r3, r0, r6
    1b1c:	cmp	r7, r3
    1b1e:	str	r3, [sp, #4]
    1b20:	bge.n	1a6c <setup+0x1d4>
    1b22:	add	fp, r4
    1b24:	add	r4, r6
    1b26:	add.w	r6, fp, fp, lsl #1
    1b2a:	add.w	r6, r7, r6, lsl #3
    1b2e:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1b32:	cmp	fp, r4
    1b34:	bge.n	1b54 <setup+0x2bc>
    1b36:	mov	r9, r6
    1b38:	mov	r8, fp
        if (rand){
    1b3a:	cmp.w	sl, #0
    1b3e:	bne.w	2eac <setup+0x1614>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1b42:	ldr	r3, [r5, #0]
    1b44:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1b48:	add.w	r8, r8, #1
    1b4c:	add.w	r9, r9, #96	; 0x60
    1b50:	cmp	r8, r4
    1b52:	bne.n	1b3a <setup+0x2a2>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1b54:	adds	r7, #1
    1b56:	ldr	r3, [sp, #4]
    1b58:	adds	r6, #4
    1b5a:	cmp	r7, r3
    1b5c:	bne.n	1b32 <setup+0x29a>
    1b5e:	b.n	1a6c <setup+0x1d4>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b60:	movs	r0, #8
    1b62:	mov	r7, r5
    1b64:	bl	b7ac <random(unsigned long)>
    1b68:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1b6a:	movs	r0, #8
    1b6c:	add.w	fp, r5, #96	; 0x60
    1b70:	bl	b7ac <random(unsigned long)>
    1b74:	vmov	s15, r6
    1b78:	adds	r4, #8
    1b7a:	add.w	r3, r0, #8
    1b7e:	vcvt.f64.s32	d9, s15
    1b82:	rsb	r9, r0, #16
    1b86:	negs	r3, r3
    1b88:	rsb	r8, r4, #0
    1b8c:	str	r3, [sp, #4]
    1b8e:	vmov	s15, r8
    1b92:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1b94:	mov	r6, r7
    1b96:	vcvt.f64.s32	d8, s15
    1b9a:	vmul.f64	d8, d8, d8
    1b9e:	b.n	1bb4 <setup+0x31c>
    1ba0:	.word	0x20000e7c
    1ba4:	.word	0x20004dd8
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1ba8:	ldr	r3, [r5, #0]
    1baa:	str	r3, [r6, #28]
    1bac:	adds	r4, #1
    1bae:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bb0:	cmp	r4, r9
    1bb2:	beq.n	1c04 <setup+0x36c>
      double xx = x-midPoint_y;
    1bb4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1bb8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1bbc:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1bc0:	vfma.f64	d0, d7, d7
    1bc4:	vsqrt.f64	d7, d0
    1bc8:	vcmp.f64	d7, d7
    1bcc:	vmrs	APSR_nzcv, fpscr
    1bd0:	bne.w	3492 <setup+0x1bfa>
    1bd4:	vcmpe.f64	d7, d9
    1bd8:	vmrs	APSR_nzcv, fpscr
    1bdc:	bhi.n	1bac <setup+0x314>
        if (rand){
    1bde:	cmp.w	sl, #0
    1be2:	beq.n	1ba8 <setup+0x310>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1be4:	ldr	r3, [r5, #20]
    1be6:	adds	r4, #1
    1be8:	ldr	r0, [r5, #16]
    1bea:	adds	r6, #96	; 0x60
    1bec:	subs	r0, r3, r0
    1bee:	adds	r0, #2
    1bf0:	bl	b7ac <random(unsigned long)>
    1bf4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1bf6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1bf8:	add.w	r3, r3, #4294967295
    1bfc:	add	r0, r3
    1bfe:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1c02:	bne.n	1bb4 <setup+0x31c>
    1c04:	adds	r7, #4
    1c06:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1c0a:	cmp	r7, fp
    1c0c:	bne.n	1b8e <setup+0x2f6>
    1c0e:	b.n	1a6c <setup+0x1d4>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1c10:	cmp	r6, #0
    1c12:	ble.n	1c9e <setup+0x406>
    1c14:	mov	r9, r5
    1c16:	movs	r7, #0
    1c18:	mov	r5, sl
    1c1a:	b.n	1c32 <setup+0x39a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1c1c:	add.w	r3, r8, r3, lsl #3
    1c20:	ldr.w	r2, [r9]
    1c24:	add.w	r3, r9, r3, lsl #2
    1c28:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1c2a:	adds	r7, #1
    1c2c:	cmp	r7, r6
    1c2e:	beq.w	1a6c <setup+0x1d4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c32:	movs	r0, #8
    1c34:	bl	b7ac <random(unsigned long)>
    1c38:	add.w	r4, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1c3c:	movs	r0, #8
    1c3e:	bl	b7ac <random(unsigned long)>
    1c42:	add.w	r8, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1c46:	add.w	r3, r4, r4, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1c4a:	cmp	r5, #0
    1c4c:	beq.n	1c1c <setup+0x384>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1c4e:	ldr.w	r3, [r9, #20]
    1c52:	add.w	r4, r4, r4, lsl #1
    1c56:	ldr.w	r2, [r9, #16]
    1c5a:	subs	r0, r3, r2
    1c5c:	adds	r0, #2
    1c5e:	bl	b7ac <random(unsigned long)>
    1c62:	ldr.w	r3, [r9, #16]
    1c66:	subs	r2, r3, #1
    1c68:	add.w	r3, r8, r4, lsl #3
    1c6c:	add	r0, r2
    1c6e:	add.w	r3, r9, r3, lsl #2
    1c72:	str	r0, [r3, #28]
    1c74:	b.n	1c2a <setup+0x392>
    1c76:	add.w	r7, r5, #2304	; 0x900
    1c7a:	add.w	r6, r5, #28
    1c7e:	mov	r4, r5
    1c80:	mov	r8, r7
    1c82:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1c84:	cmp	r7, #0
    1c86:	bne.w	2f66 <setup+0x16ce>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1c8a:	ldr	r3, [r5, #0]
    1c8c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1c8e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1c92:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1c94:	str	r3, [r4, #120]	; 0x78
    1c96:	adds	r4, #96	; 0x60
    1c98:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1c9a:	cmp	r4, r8
    1c9c:	bne.n	1c84 <setup+0x3ec>
    1c9e:	ldr	r3, [pc, #784]	; (1fb0 <setup+0x718>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    1ca0:	ldr	r2, [pc, #780]	; (1fb0 <setup+0x718>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1ca2:	ldr.w	r3, [r3, #360]	; 0x168
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    1ca6:	ldr.w	r5, [r2, #416]	; 0x1a0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1caa:	subs	r3, #1
    1cac:	ldr.w	r6, [r2, #364]	; 0x16c
    1cb0:	ldrb.w	sl, [r2, #368]	; 0x170
    1cb4:	cmp	r3, #4
    1cb6:	bhi.w	3142 <setup+0x18aa>
    1cba:	tbh	[pc, r3, lsl #1]
    1cbe:	.short	0x01eb
    1cc0:	.word	0x015901af
    1cc4:	.word	0x00f50127
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1cc8:	movs	r0, #8
    1cca:	mov	r7, r5
    1ccc:	bl	b7ac <random(unsigned long)>
    1cd0:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1cd2:	movs	r0, #8
    1cd4:	add.w	fp, r5, #96	; 0x60
    1cd8:	bl	b7ac <random(unsigned long)>
    1cdc:	vmov	s15, r6
    1ce0:	adds	r4, #8
    1ce2:	add.w	r3, r0, #8
    1ce6:	vcvt.f64.s32	d9, s15
    1cea:	rsb	r9, r0, #16
    1cee:	negs	r3, r3
    1cf0:	rsb	r8, r4, #0
    1cf4:	str	r3, [sp, #4]
    1cf6:	vmov	s15, r8
    1cfa:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1cfc:	mov	r6, r7
    1cfe:	vcvt.f64.s32	d8, s15
    1d02:	vmul.f64	d8, d8, d8
    1d06:	b.n	1d14 <setup+0x47c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1d08:	ldr	r3, [r5, #0]
    1d0a:	str	r3, [r6, #28]
    1d0c:	adds	r4, #1
    1d0e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d10:	cmp	r4, r9
    1d12:	beq.n	1d64 <setup+0x4cc>
      double xx = x-midPoint_y;
    1d14:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1d18:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1d1c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1d20:	vfma.f64	d0, d7, d7
    1d24:	vsqrt.f64	d7, d0
    1d28:	vcmp.f64	d7, d7
    1d2c:	vmrs	APSR_nzcv, fpscr
    1d30:	bne.w	34e4 <setup+0x1c4c>
    1d34:	vcmpe.f64	d7, d9
    1d38:	vmrs	APSR_nzcv, fpscr
    1d3c:	bhi.n	1d0c <setup+0x474>
        if (rand){
    1d3e:	cmp.w	sl, #0
    1d42:	beq.n	1d08 <setup+0x470>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1d44:	ldr	r3, [r5, #20]
    1d46:	adds	r4, #1
    1d48:	ldr	r0, [r5, #16]
    1d4a:	adds	r6, #96	; 0x60
    1d4c:	subs	r0, r3, r0
    1d4e:	adds	r0, #2
    1d50:	bl	b7ac <random(unsigned long)>
    1d54:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d56:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1d58:	add.w	r3, r3, #4294967295
    1d5c:	add	r0, r3
    1d5e:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1d62:	bne.n	1d14 <setup+0x47c>
    1d64:	adds	r7, #4
    1d66:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    1d6a:	cmp	r7, fp
    1d6c:	bne.n	1cf6 <setup+0x45e>
    1d6e:	b.n	1c9e <setup+0x406>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d70:	movs	r0, #8
    1d72:	bl	b7ac <random(unsigned long)>
    1d76:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d7a:	movs	r0, #8
    1d7c:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d80:	cmp	r6, #0
    1d82:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1d84:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1d88:	it	lt
    1d8a:	addlt	r3, r6, #1
    1d8c:	cmp	r6, #0
    1d8e:	mov.w	fp, r3, asr #1
    1d92:	it	lt
    1d94:	addlt	r6, #1
    1d96:	rsb	fp, fp, #0
    1d9a:	asrs	r6, r6, #1
    1d9c:	add.w	r7, r0, fp
    1da0:	adds	r3, r0, r6
    1da2:	cmp	r7, r3
    1da4:	str	r3, [sp, #4]
    1da6:	bge.w	1c9e <setup+0x406>
    1daa:	add	fp, r4
    1dac:	add	r4, r6
    1dae:	add.w	r6, fp, fp, lsl #1
    1db2:	add.w	r6, r7, r6, lsl #3
    1db6:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1dba:	cmp	fp, r4
    1dbc:	bge.n	1ddc <setup+0x544>
    1dbe:	mov	r9, r6
    1dc0:	mov	r8, fp
        if (rand){
    1dc2:	cmp.w	sl, #0
    1dc6:	bne.w	2e78 <setup+0x15e0>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    1dca:	ldr	r3, [r5, #0]
    1dcc:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    1dd0:	add.w	r8, r8, #1
    1dd4:	add.w	r9, r9, #96	; 0x60
    1dd8:	cmp	r8, r4
    1dda:	bne.n	1dc2 <setup+0x52a>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    1ddc:	adds	r7, #1
    1dde:	ldr	r3, [sp, #4]
    1de0:	adds	r6, #4
    1de2:	cmp	r7, r3
    1de4:	bne.n	1dba <setup+0x522>
    1de6:	b.n	1c9e <setup+0x406>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1de8:	movs	r0, #8
    1dea:	bl	b7ac <random(unsigned long)>
    1dee:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1df2:	movs	r0, #8
    1df4:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    1df8:	cmp	r6, #0
    1dfa:	ble.w	1c9e <setup+0x406>
    1dfe:	add.w	r3, r0, #15
    1e02:	add.w	r4, r4, r4, lsl #1
    1e06:	movs	r7, #0
    1e08:	add.w	r4, r3, r4, lsl #3
    1e0c:	add.w	r4, r5, r4, lsl #2
      if (rand){
    1e10:	cmp.w	sl, #0
    1e14:	bne.n	1e2a <setup+0x592>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    1e16:	ldr	r3, [r5, #0]
    1e18:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    1e1a:	adds	r7, #1
    1e1c:	adds	r4, #4
    1e1e:	cmp	r7, r6
    1e20:	beq.w	1c9e <setup+0x406>
      if (rand){
    1e24:	cmp.w	sl, #0
    1e28:	beq.n	1e16 <setup+0x57e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1e2a:	ldr	r3, [r5, #20]
    1e2c:	ldr	r2, [r5, #16]
    1e2e:	subs	r0, r3, r2
    1e30:	adds	r0, #2
    1e32:	bl	b7ac <random(unsigned long)>
    1e36:	ldr	r3, [r5, #16]
    1e38:	subs	r3, #1
    1e3a:	add	r0, r3
    1e3c:	str	r0, [r4, #0]
    1e3e:	b.n	1e1a <setup+0x582>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1e40:	cmp	r6, #0
    1e42:	ble.w	1c9e <setup+0x406>
    1e46:	mov	r9, r5
    1e48:	movs	r7, #0
    1e4a:	mov	r5, sl
    1e4c:	b.n	1e64 <setup+0x5cc>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1e4e:	add.w	r3, r4, r3, lsl #3
    1e52:	ldr.w	r2, [r9]
    1e56:	add.w	r3, r9, r3, lsl #2
    1e5a:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1e5c:	adds	r7, #1
    1e5e:	cmp	r7, r6
    1e60:	beq.w	1c9e <setup+0x406>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e64:	movs	r0, #8
    1e66:	bl	b7ac <random(unsigned long)>
    1e6a:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1e6e:	movs	r0, #8
    1e70:	bl	b7ac <random(unsigned long)>
    1e74:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1e78:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1e7c:	cmp	r5, #0
    1e7e:	beq.n	1e4e <setup+0x5b6>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1e80:	ldr.w	r3, [r9, #20]
    1e84:	add.w	r8, r8, r8, lsl #1
    1e88:	ldr.w	r2, [r9, #16]
    1e8c:	add.w	r4, r4, r8, lsl #3
    1e90:	subs	r0, r3, r2
    1e92:	add.w	r4, r9, r4, lsl #2
    1e96:	adds	r0, #2
    1e98:	bl	b7ac <random(unsigned long)>
    1e9c:	ldr.w	r3, [r9, #16]
    1ea0:	subs	r3, #1
    1ea2:	add	r0, r3
    1ea4:	str	r0, [r4, #28]
    1ea6:	b.n	1e5c <setup+0x5c4>
    1ea8:	add.w	r7, r5, #2304	; 0x900
    1eac:	add.w	r6, r5, #28
    1eb0:	mov	r4, r5
    1eb2:	mov	r8, r7
    1eb4:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    1eb6:	cmp	r7, #0
    1eb8:	bne.w	2f16 <setup+0x167e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    1ebc:	ldr	r3, [r5, #0]
    1ebe:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    1ec0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    1ec4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    1ec6:	str	r3, [r4, #120]	; 0x78
    1ec8:	adds	r4, #96	; 0x60
    1eca:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    1ecc:	cmp	r4, r8
    1ece:	bne.n	1eb6 <setup+0x61e>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    1ed0:	ldr	r3, [pc, #220]	; (1fb0 <setup+0x718>)
    1ed2:	movs	r1, #5
    1ed4:	movs	r0, #0
    1ed6:	ldr.w	r5, [r3, #420]	; 0x1a4
    1eda:	bl	b7b4 <random(long, long)>
    1ede:	ldr	r3, [pc, #208]	; (1fb0 <setup+0x718>)
    1ee0:	add.w	r0, r0, r0, lsl #1
    1ee4:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    1ee8:	ldr.w	r2, [r3, #348]	; 0x15c
    1eec:	add.w	r3, r3, #348	; 0x15c
    1ef0:	subs	r2, #1
    1ef2:	ldr	r4, [r3, #4]
    1ef4:	ldrb.w	fp, [r3, #8]
    1ef8:	cmp	r2, #4
    1efa:	bhi.w	3428 <setup+0x1b90>
    1efe:	tbh	[pc, r2, lsl #1]
    1f02:	.short	0x0287
    1f04:	.word	0x01f50249
    1f08:	.word	0x00f501c3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1f0c:	cmp	r6, #0
    1f0e:	ble.n	1ed0 <setup+0x638>
    1f10:	mov	r9, r5
    1f12:	movs	r7, #0
    1f14:	mov	r5, sl
    1f16:	b.n	1f2c <setup+0x694>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1f18:	add.w	r3, r4, r3, lsl #3
    1f1c:	ldr.w	r2, [r9]
    1f20:	add.w	r3, r9, r3, lsl #2
    1f24:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    1f26:	adds	r7, #1
    1f28:	cmp	r7, r6
    1f2a:	beq.n	1ed0 <setup+0x638>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f2c:	movs	r0, #8
    1f2e:	bl	b7ac <random(unsigned long)>
    1f32:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f36:	movs	r0, #8
    1f38:	bl	b7ac <random(unsigned long)>
    1f3c:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    1f40:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    1f44:	cmp	r5, #0
    1f46:	beq.n	1f18 <setup+0x680>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    1f48:	ldr.w	r3, [r9, #20]
    1f4c:	add.w	r8, r8, r8, lsl #1
    1f50:	ldr.w	r2, [r9, #16]
    1f54:	add.w	r4, r4, r8, lsl #3
    1f58:	subs	r0, r3, r2
    1f5a:	add.w	r4, r9, r4, lsl #2
    1f5e:	adds	r0, #2
    1f60:	bl	b7ac <random(unsigned long)>
    1f64:	ldr.w	r3, [r9, #16]
    1f68:	subs	r3, #1
    1f6a:	add	r0, r3
    1f6c:	str	r0, [r4, #28]
    1f6e:	b.n	1f26 <setup+0x68e>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f70:	movs	r0, #8
    1f72:	mov	r7, r5
    1f74:	bl	b7ac <random(unsigned long)>
    1f78:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    1f7a:	movs	r0, #8
    1f7c:	add.w	fp, r5, #96	; 0x60
    1f80:	bl	b7ac <random(unsigned long)>
    1f84:	vmov	s15, r6
    1f88:	adds	r4, #8
    1f8a:	add.w	r3, r0, #8
    1f8e:	vcvt.f64.s32	d9, s15
    1f92:	rsb	r9, r0, #16
    1f96:	negs	r3, r3
    1f98:	rsb	r8, r4, #0
    1f9c:	str	r3, [sp, #4]
    1f9e:	vmov	s15, r8
    1fa2:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    1fa4:	mov	r6, r7
    1fa6:	vcvt.f64.s32	d8, s15
    1faa:	vmul.f64	d8, d8, d8
    1fae:	b.n	1fc0 <setup+0x728>
    1fb0:	.word	0x20004dd8
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    1fb4:	ldr	r3, [r5, #0]
    1fb6:	str	r3, [r6, #28]
    1fb8:	adds	r4, #1
    1fba:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    1fbc:	cmp	r4, r9
    1fbe:	beq.n	2010 <setup+0x778>
      double xx = x-midPoint_y;
    1fc0:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    1fc4:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    1fc8:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    1fcc:	vfma.f64	d0, d7, d7
    1fd0:	vsqrt.f64	d7, d0
    1fd4:	vcmp.f64	d7, d7
    1fd8:	vmrs	APSR_nzcv, fpscr
    1fdc:	bne.w	34d8 <setup+0x1c40>
    1fe0:	vcmpe.f64	d7, d9
    1fe4:	vmrs	APSR_nzcv, fpscr
    1fe8:	bhi.n	1fb8 <setup+0x720>
        if (rand){
    1fea:	cmp.w	sl, #0
    1fee:	beq.n	1fb4 <setup+0x71c>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    1ff0:	ldr	r3, [r5, #20]
    1ff2:	adds	r4, #1
    1ff4:	ldr	r0, [r5, #16]
    1ff6:	adds	r6, #96	; 0x60
    1ff8:	subs	r0, r3, r0
    1ffa:	adds	r0, #2
    1ffc:	bl	b7ac <random(unsigned long)>
    2000:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2002:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2004:	add.w	r3, r3, #4294967295
    2008:	add	r0, r3
    200a:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    200e:	bne.n	1fc0 <setup+0x728>
    2010:	adds	r7, #4
    2012:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2016:	cmp	r7, fp
    2018:	bne.n	1f9e <setup+0x706>
    201a:	b.n	1ed0 <setup+0x638>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    201c:	movs	r0, #8
    201e:	bl	b7ac <random(unsigned long)>
    2022:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2026:	movs	r0, #8
    2028:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    202c:	cmp	r6, #0
    202e:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2030:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2034:	it	lt
    2036:	addlt	r3, r6, #1
    2038:	cmp	r6, #0
    203a:	mov.w	fp, r3, asr #1
    203e:	it	lt
    2040:	addlt	r6, #1
    2042:	rsb	fp, fp, #0
    2046:	asrs	r6, r6, #1
    2048:	add.w	r7, r0, fp
    204c:	adds	r3, r0, r6
    204e:	cmp	r7, r3
    2050:	str	r3, [sp, #4]
    2052:	bge.w	1ed0 <setup+0x638>
    2056:	add	fp, r4
    2058:	add	r4, r6
    205a:	add.w	r6, fp, fp, lsl #1
    205e:	add.w	r6, r7, r6, lsl #3
    2062:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2066:	cmp	fp, r4
    2068:	bge.n	2088 <setup+0x7f0>
    206a:	mov	r9, r6
    206c:	mov	r8, fp
        if (rand){
    206e:	cmp.w	sl, #0
    2072:	bne.w	2e92 <setup+0x15fa>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2076:	ldr	r3, [r5, #0]
    2078:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    207c:	add.w	r8, r8, #1
    2080:	add.w	r9, r9, #96	; 0x60
    2084:	cmp	r8, r4
    2086:	bne.n	206e <setup+0x7d6>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2088:	adds	r7, #1
    208a:	ldr	r3, [sp, #4]
    208c:	adds	r6, #4
    208e:	cmp	r7, r3
    2090:	bne.n	2066 <setup+0x7ce>
    2092:	b.n	1ed0 <setup+0x638>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2094:	movs	r0, #8
    2096:	bl	b7ac <random(unsigned long)>
    209a:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    209e:	movs	r0, #8
    20a0:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    20a4:	cmp	r6, #0
    20a6:	ble.w	1ed0 <setup+0x638>
    20aa:	add.w	r3, r0, #15
    20ae:	add.w	r4, r4, r4, lsl #1
    20b2:	movs	r7, #0
    20b4:	add.w	r4, r3, r4, lsl #3
    20b8:	add.w	r4, r5, r4, lsl #2
      if (rand){
    20bc:	cmp.w	sl, #0
    20c0:	bne.n	20d6 <setup+0x83e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    20c2:	ldr	r3, [r5, #0]
    20c4:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    20c6:	adds	r7, #1
    20c8:	adds	r4, #4
    20ca:	cmp	r7, r6
    20cc:	beq.w	1ed0 <setup+0x638>
      if (rand){
    20d0:	cmp.w	sl, #0
    20d4:	beq.n	20c2 <setup+0x82a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    20d6:	ldr	r3, [r5, #20]
    20d8:	ldr	r2, [r5, #16]
    20da:	subs	r0, r3, r2
    20dc:	adds	r0, #2
    20de:	bl	b7ac <random(unsigned long)>
    20e2:	ldr	r3, [r5, #16]
    20e4:	subs	r3, #1
    20e6:	add	r0, r3
    20e8:	str	r0, [r4, #0]
    20ea:	b.n	20c6 <setup+0x82e>
    20ec:	add.w	r7, r5, #2304	; 0x900
    20f0:	add.w	r6, r5, #28
    20f4:	mov	r4, r5
    20f6:	mov	r8, r7
    20f8:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    20fa:	cmp	r7, #0
    20fc:	bne.w	30a2 <setup+0x180a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    2100:	ldr	r3, [r5, #0]
    2102:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2104:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2108:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    210a:	str	r3, [r4, #120]	; 0x78
    210c:	adds	r4, #96	; 0x60
    210e:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    2110:	cmp	r4, r8
    2112:	bne.n	20fa <setup+0x862>
			
		}
	}

	void init_screen() {	
		_screen->begin();
    2114:	ldr	r3, [pc, #756]	; (240c <setup+0xb74>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    2116:	mov.w	fp, #1
    211a:	movw	r5, #4636	; 0x121c
			
		}
	}

	void init_screen() {	
		_screen->begin();
    211e:	ldr.w	r0, [r3, #424]	; 0x1a8
    2122:	bl	9768 <Adafruit_NeoPixel::begin()>
		_screen->setBrightness(HIGH_BRI);
    2126:	ldr	r3, [pc, #740]	; (240c <setup+0xb74>)
    2128:	movs	r1, #255	; 0xff
    212a:	ldr.w	r0, [r3, #424]	; 0x1a8
    212e:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
		initialize_automaton(_grow_automaton, &bri_automatons[2], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
    2132:	ldr	r3, [pc, #728]	; (240c <setup+0xb74>)
    2134:	movs	r1, #8
    2136:	movs	r0, #0
    2138:	ldr.w	r4, [r3, #412]	; 0x19c
    213c:	bl	b7b4 <random(long, long)>
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    2140:	add.w	r1, r0, fp
    2144:	ldr	r3, [pc, #708]	; (240c <setup+0xb74>)
    2146:	add.w	r0, r0, r0, lsl #1
    214a:	mov.w	ip, #0
    214e:	add.w	r1, r1, r1, lsl #1
    2152:	ldr.w	lr, [r3, #428]	; 0x1ac
    2156:	add.w	r8, r3, r0, lsl #3
    215a:	ldr	r0, [pc, #688]	; (240c <setup+0xb74>)
    215c:	lsls	r1, r1, #3
    215e:	str.w	lr, [r4, r5]
    2162:	ldr.w	r2, [r8, #32]
    2166:	ldr.w	r6, [r8, #40]	; 0x28
    216a:	add.w	r9, r0, r1
    216e:	ldr	r0, [r0, r1]
    2170:	ldr.w	r1, [r8, #36]	; 0x24
    2174:	ldr.w	r7, [r3, #432]	; 0x1b0
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
    2178:	ldr.w	r3, [r3, #408]	; 0x198
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    217c:	str	r1, [r4, #12]
    217e:	ldr.w	r1, [r9, #4]
    2182:	add.w	r9, r3, #4640	; 0x1220
    2186:	str	r6, [r4, #16]
    2188:	ldr.w	r6, [r8, #44]	; 0x2c
    218c:	add.w	r8, r4, #4640	; 0x1220
    2190:	str	r2, [r4, #8]
    2192:	ldr	r2, [pc, #632]	; (240c <setup+0xb74>)
    2194:	str	r6, [r4, #20]
    2196:	ldr	r2, [r2, #4]
    2198:	str	r0, [r4, #0]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    219a:	mov	r0, ip
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    219c:	mov	r6, r2
    219e:	ldr	r2, [pc, #620]	; (240c <setup+0xb74>)
    21a0:	str	r1, [r4, #4]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    21a2:	movs	r1, #6
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    21a4:	strb.w	ip, [r4, #24]
    21a8:	ldr.w	ip, [r2, #12]
    21ac:	ldr	r4, [r2, #8]
    21ae:	ldr	r2, [r2, #16]
    21b0:	str.w	r7, [r8]
    21b4:	str	r2, [r3, #16]
    21b6:	ldr	r2, [pc, #596]	; (240c <setup+0xb74>)
    21b8:	str.w	lr, [r3, r5]
    21bc:	ldr	r2, [r2, #20]
    21be:	strb.w	fp, [r3, #24]
    21c2:	str	r2, [r3, #20]
    21c4:	ldr	r2, [pc, #580]	; (240c <setup+0xb74>)
    21c6:	str.w	ip, [r3, #12]
    21ca:	ldr	r2, [r2, #0]
    21cc:	str	r6, [r3, #4]
    21ce:	str	r2, [r3, #0]
    21d0:	str	r4, [r3, #8]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    21d2:	ldr	r3, [pc, #568]	; (240c <setup+0xb74>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    21d4:	str.w	r7, [r9]
	}

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
    21d8:	ldr.w	r8, [r3, #416]	; 0x1a0
    21dc:	bl	b7b4 <random(long, long)>
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    21e0:	ldr	r3, [pc, #552]	; (240c <setup+0xb74>)
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    21e2:	add.w	r0, r0, r0, lsl #1
    21e6:	add.w	sl, r8, #4640	; 0x1220
    21ea:	add.w	r0, r3, r0, lsl #3
    21ee:	ldr.w	ip, [r3, #428]	; 0x1ac

	void define_automaton(){
		initialize_automaton(_fg_automaton, &hue_automatons[random(0, 8)], false);
		initialize_automaton(_bg_automaton, &sat_automatons, true);
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
    21f2:	ldr.w	r7, [r3, #420]	; 0x1a4
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
	}

	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
    21f6:	add.w	r1, r0, #200	; 0xc8
    21fa:	str.w	ip, [r8, r5]
    21fe:	ldr.w	r3, [r3, #432]	; 0x1b0
    2202:	add.w	r9, r7, #4640	; 0x1220
    2206:	ldr.w	r4, [r0, #196]	; 0xc4
    220a:	ldmia	r1, {r1, r2, r6}
    220c:	str.w	r6, [r8, #16]
    2210:	ldr.w	r6, [r0, #212]	; 0xd4
    2214:	ldr.w	r0, [r0, #192]	; 0xc0
    2218:	str.w	r1, [r8, #8]
    221c:	ldr	r1, [pc, #492]	; (240c <setup+0xb74>)
    221e:	str.w	r2, [r8, #12]
    2222:	ldr	r1, [r1, #4]
    2224:	ldr	r2, [pc, #484]	; (240c <setup+0xb74>)
    2226:	str.w	r6, [r8, #20]
    222a:	mov	r6, r1
    222c:	ldr.w	lr, [r2, #8]
    2230:	ldr	r1, [r2, #20]
    2232:	strb.w	fp, [r8, #24]
    2236:	stmia.w	r8, {r0, r4}
    223a:	ldr	r4, [r2, #16]
    223c:	ldr	r0, [r2, #12]
    223e:	ldr	r2, [r2, #0]
    2240:	str.w	r3, [sl]
    2244:	str.w	ip, [r7, r5]
    2248:	str	r4, [r7, #16]
    224a:	str	r2, [r7, #0]
    224c:	strb.w	fp, [r7, #24]
    2250:	str	r6, [r7, #4]
    2252:	str.w	lr, [r7, #8]
    2256:	str	r0, [r7, #12]
    2258:	str	r1, [r7, #20]
    225a:	str.w	r3, [r9]
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    225e:	ldr	r3, [pc, #428]	; (240c <setup+0xb74>)
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    2260:	ldr	r2, [pc, #424]	; (240c <setup+0xb74>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    2262:	ldr.w	r3, [r3, #336]	; 0x150
		initialize_automaton(_grow_automaton, &bri_automatons[random(0, 6)], true);
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
    2266:	ldr.w	r5, [r2, #412]	; 0x19c
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    226a:	subs	r3, #1
    226c:	ldr.w	r4, [r2, #340]	; 0x154
    2270:	ldrb.w	sl, [r2, #344]	; 0x158
    2274:	cmp	r3, #4
    2276:	bhi.w	33be <setup+0x1b26>
    227a:	tbh	[pc, r3, lsl #1]
    227e:	.short	0x01dd
    2280:	.word	0x014d01a1
    2284:	.word	0x00f4011e
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2288:	cmp	r4, #0
    228a:	ble.w	2114 <setup+0x87c>
    228e:	mov	r9, r4
    2290:	mov.w	r8, #0
    2294:	mov	r4, fp
    2296:	b.n	22ae <setup+0xa16>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2298:	add.w	r3, r6, r3, lsl #3
    229c:	ldr	r2, [r5, #0]
    229e:	add.w	r3, r5, r3, lsl #2
    22a2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    22a4:	add.w	r8, r8, #1
    22a8:	cmp	r8, r9
    22aa:	beq.w	2114 <setup+0x87c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22ae:	movs	r0, #8
    22b0:	bl	b7ac <random(unsigned long)>
    22b4:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22b8:	movs	r0, #8
    22ba:	bl	b7ac <random(unsigned long)>
    22be:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    22c2:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    22c6:	cmp	r4, #0
    22c8:	beq.n	2298 <setup+0xa00>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    22ca:	ldr	r3, [r5, #20]
    22cc:	add.w	r7, r7, r7, lsl #1
    22d0:	ldr	r2, [r5, #16]
    22d2:	add.w	r6, r6, r7, lsl #3
    22d6:	subs	r0, r3, r2
    22d8:	add.w	r6, r5, r6, lsl #2
    22dc:	adds	r0, #2
    22de:	bl	b7ac <random(unsigned long)>
    22e2:	ldr	r3, [r5, #16]
    22e4:	subs	r3, #1
    22e6:	add	r0, r3
    22e8:	str	r0, [r6, #28]
    22ea:	b.n	22a4 <setup+0xa0c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22ec:	movs	r0, #8
    22ee:	mov	r7, r5
    22f0:	bl	b7ac <random(unsigned long)>
    22f4:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    22f6:	movs	r0, #8
    22f8:	add.w	r9, r5, #96	; 0x60
    22fc:	bl	b7ac <random(unsigned long)>
    2300:	vmov	s15, r4
    2304:	adds	r6, #8
    2306:	add.w	r3, r0, #8
    230a:	vcvt.f64.s32	d9, s15
    230e:	rsb	sl, r0, #16
    2312:	negs	r3, r3
    2314:	rsb	r8, r6, #0
    2318:	str	r3, [sp, #4]
    231a:	vmov	s15, r8
    231e:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    2320:	mov	r6, r7
    2322:	vcvt.f64.s32	d8, s15
    2326:	vmul.f64	d8, d8, d8
    232a:	b.n	2338 <setup+0xaa0>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    232c:	ldr	r3, [r5, #0]
    232e:	str	r3, [r6, #28]
    2330:	adds	r4, #1
    2332:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2334:	cmp	r4, sl
    2336:	beq.n	2388 <setup+0xaf0>
      double xx = x-midPoint_y;
    2338:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    233c:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2340:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2344:	vfma.f64	d0, d7, d7
    2348:	vsqrt.f64	d7, d0
    234c:	vcmp.f64	d7, d7
    2350:	vmrs	APSR_nzcv, fpscr
    2354:	bne.w	34cc <setup+0x1c34>
    2358:	vcmpe.f64	d7, d9
    235c:	vmrs	APSR_nzcv, fpscr
    2360:	bhi.n	2330 <setup+0xa98>
        if (rand){
    2362:	cmp.w	fp, #0
    2366:	beq.n	232c <setup+0xa94>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2368:	ldr	r3, [r5, #20]
    236a:	adds	r4, #1
    236c:	ldr	r0, [r5, #16]
    236e:	adds	r6, #96	; 0x60
    2370:	subs	r0, r3, r0
    2372:	adds	r0, #2
    2374:	bl	b7ac <random(unsigned long)>
    2378:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    237a:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    237c:	add.w	r3, r3, #4294967295
    2380:	add	r0, r3
    2382:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2386:	bne.n	2338 <setup+0xaa0>
    2388:	adds	r7, #4
    238a:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    238e:	cmp	r7, r9
    2390:	bne.n	231a <setup+0xa82>
    2392:	b.n	2114 <setup+0x87c>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2394:	movs	r0, #8
    2396:	bl	b7ac <random(unsigned long)>
    239a:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    239e:	movs	r0, #8
    23a0:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    23a4:	cmp	r4, #0
    23a6:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    23a8:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    23ac:	it	lt
    23ae:	addlt	r3, r4, #1
    23b0:	cmp	r4, #0
    23b2:	mov.w	r8, r3, asr #1
    23b6:	it	lt
    23b8:	addlt	r4, #1
    23ba:	rsb	r8, r8, #0
    23be:	asrs	r4, r4, #1
    23c0:	add.w	r7, r0, r8
    23c4:	adds	r3, r4, r0
    23c6:	cmp	r3, r7
    23c8:	str	r3, [sp, #4]
    23ca:	ble.w	2114 <setup+0x87c>
    23ce:	add	r8, r6
    23d0:	add.w	sl, r4, r6
    23d4:	add.w	r6, r8, r8, lsl #1
    23d8:	add.w	r6, r7, r6, lsl #3
    23dc:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    23e0:	cmp	sl, r8
    23e2:	ble.n	2400 <setup+0xb68>
    23e4:	mov	r9, r6
    23e6:	mov	r4, r8
        if (rand){
    23e8:	cmp.w	fp, #0
    23ec:	bne.w	2e5e <setup+0x15c6>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    23f0:	ldr	r3, [r5, #0]
    23f2:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    23f6:	adds	r4, #1
    23f8:	add.w	r9, r9, #96	; 0x60
    23fc:	cmp	r4, sl
    23fe:	bne.n	23e8 <setup+0xb50>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2400:	adds	r7, #1
    2402:	ldr	r3, [sp, #4]
    2404:	adds	r6, #4
    2406:	cmp	r3, r7
    2408:	bne.n	23e0 <setup+0xb48>
    240a:	b.n	2114 <setup+0x87c>
    240c:	.word	0x20004fb0
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2410:	movs	r0, #8
    2412:	bl	b7ac <random(unsigned long)>
    2416:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    241a:	movs	r0, #8
    241c:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2420:	cmp	r4, #0
    2422:	ble.w	2114 <setup+0x87c>
    2426:	add.w	r3, r0, #15
    242a:	add.w	r6, r6, r6, lsl #1
    242e:	mov	r8, r4
    2430:	mov	r4, fp
    2432:	add.w	r6, r3, r6, lsl #3
    2436:	movs	r7, #0
    2438:	add.w	r6, r5, r6, lsl #2
      if (rand){
    243c:	cbnz	r4, 2450 <setup+0xbb8>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    243e:	ldr	r3, [r5, #0]
    2440:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2442:	adds	r7, #1
    2444:	adds	r6, #4
    2446:	cmp	r7, r8
    2448:	beq.w	2114 <setup+0x87c>
      if (rand){
    244c:	cmp	r4, #0
    244e:	beq.n	243e <setup+0xba6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2450:	ldr	r3, [r5, #20]
    2452:	ldr	r2, [r5, #16]
    2454:	subs	r0, r3, r2
    2456:	adds	r0, #2
    2458:	bl	b7ac <random(unsigned long)>
    245c:	ldr	r3, [r5, #16]
    245e:	subs	r3, #1
    2460:	add	r0, r3
    2462:	str	r0, [r6, #0]
    2464:	b.n	2442 <setup+0xbaa>
    2466:	add.w	r7, r5, #2304	; 0x900
    246a:	add.w	r6, r5, #28
    246e:	mov	r4, r5
    2470:	mov	r8, r7
    2472:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2474:	cmp	r7, #0
    2476:	bne.w	30f2 <setup+0x185a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    247a:	ldr	r3, [r5, #0]
    247c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    247e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2482:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2484:	str	r3, [r4, #120]	; 0x78
    2486:	adds	r4, #96	; 0x60
    2488:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    248a:	cmp	r4, r8
    248c:	bne.n	2474 <setup+0xbdc>
    248e:	ldr	r3, [pc, #760]	; (2788 <setup+0xef0>)
    2490:	ldr	r2, [pc, #756]	; (2788 <setup+0xef0>)
    2492:	ldr.w	r3, [r3, #336]	; 0x150
    2496:	ldrb.w	sl, [r2, #344]	; 0x158
    249a:	ldr.w	r4, [r2, #340]	; 0x154
    249e:	subs	r3, #1
		initialize_automaton(_sat_automaton, &sat_automatons, true);
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
    24a0:	ldr	r2, [pc, #740]	; (2788 <setup+0xef0>)
    24a2:	ldr.w	r5, [r2, #408]	; 0x198
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    24a6:	cmp	r3, #4
    24a8:	bhi.w	3216 <setup+0x197e>
    24ac:	tbh	[pc, r3, lsl #1]
    24b0:	.word	0x016e01aa
    24b4:	.word	0x01d50118
    24b8:	.short	0x00ef
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    24ba:	cmp	r4, #0
    24bc:	ble.w	26b6 <setup+0xe1e>
    24c0:	mov	r9, r4
    24c2:	movs	r7, #0
    24c4:	mov	r4, sl
    24c6:	b.n	24da <setup+0xc42>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    24c8:	add.w	r3, r6, r3, lsl #3
    24cc:	ldr	r2, [r5, #0]
    24ce:	add.w	r3, r5, r3, lsl #2
    24d2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    24d4:	adds	r7, #1
    24d6:	cmp	r7, r9
    24d8:	beq.n	248e <setup+0xbf6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24da:	movs	r0, #8
    24dc:	bl	b7ac <random(unsigned long)>
    24e0:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    24e4:	movs	r0, #8
    24e6:	bl	b7ac <random(unsigned long)>
    24ea:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    24ee:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    24f2:	cmp	r4, #0
    24f4:	beq.n	24c8 <setup+0xc30>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    24f6:	ldr	r3, [r5, #20]
    24f8:	add.w	r8, r8, r8, lsl #1
    24fc:	ldr	r2, [r5, #16]
    24fe:	add.w	r6, r6, r8, lsl #3
    2502:	subs	r0, r3, r2
    2504:	add.w	r6, r5, r6, lsl #2
    2508:	adds	r0, #2
    250a:	bl	b7ac <random(unsigned long)>
    250e:	ldr	r3, [r5, #16]
    2510:	subs	r3, #1
    2512:	add	r0, r3
    2514:	str	r0, [r6, #28]
    2516:	b.n	24d4 <setup+0xc3c>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2518:	movs	r0, #8
    251a:	mov	r7, r5
    251c:	bl	b7ac <random(unsigned long)>
    2520:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2522:	movs	r0, #8
    2524:	add.w	fp, r5, #96	; 0x60
    2528:	bl	b7ac <random(unsigned long)>
    252c:	vmov	s15, r4
    2530:	adds	r6, #8
    2532:	add.w	r3, r0, #8
    2536:	vcvt.f64.s32	d9, s15
    253a:	rsb	r9, r0, #16
    253e:	negs	r3, r3
    2540:	rsb	r8, r6, #0
    2544:	str	r3, [sp, #4]
    2546:	vmov	s15, r8
    254a:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    254c:	mov	r6, r7
    254e:	vcvt.f64.s32	d8, s15
    2552:	vmul.f64	d8, d8, d8
    2556:	b.n	2564 <setup+0xccc>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2558:	ldr	r3, [r5, #0]
    255a:	str	r3, [r6, #28]
    255c:	adds	r4, #1
    255e:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2560:	cmp	r4, r9
    2562:	beq.n	25b4 <setup+0xd1c>
      double xx = x-midPoint_y;
    2564:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2568:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    256c:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2570:	vfma.f64	d0, d7, d7
    2574:	vsqrt.f64	d7, d0
    2578:	vcmp.f64	d7, d7
    257c:	vmrs	APSR_nzcv, fpscr
    2580:	bne.w	34c0 <setup+0x1c28>
    2584:	vcmpe.f64	d7, d9
    2588:	vmrs	APSR_nzcv, fpscr
    258c:	bhi.n	255c <setup+0xcc4>
        if (rand){
    258e:	cmp.w	sl, #0
    2592:	beq.n	2558 <setup+0xcc0>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2594:	ldr	r3, [r5, #20]
    2596:	adds	r4, #1
    2598:	ldr	r0, [r5, #16]
    259a:	adds	r6, #96	; 0x60
    259c:	subs	r0, r3, r0
    259e:	adds	r0, #2
    25a0:	bl	b7ac <random(unsigned long)>
    25a4:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    25a6:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    25a8:	add.w	r3, r3, #4294967295
    25ac:	add	r0, r3
    25ae:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    25b2:	bne.n	2564 <setup+0xccc>
    25b4:	adds	r7, #4
    25b6:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    25ba:	cmp	r7, fp
    25bc:	bne.n	2546 <setup+0xcae>
    25be:	b.n	248e <setup+0xbf6>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    25c0:	movs	r0, #8
    25c2:	bl	b7ac <random(unsigned long)>
    25c6:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    25ca:	movs	r0, #8
    25cc:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    25d0:	cmp	r4, #0
    25d2:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    25d4:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    25d8:	it	lt
    25da:	addlt	r3, r4, #1
    25dc:	cmp	r4, #0
    25de:	mov.w	fp, r3, asr #1
    25e2:	it	lt
    25e4:	addlt	r4, #1
    25e6:	rsb	fp, fp, #0
    25ea:	asrs	r4, r4, #1
    25ec:	add.w	r7, r0, fp
    25f0:	adds	r3, r4, r0
    25f2:	cmp	r7, r3
    25f4:	str	r3, [sp, #4]
    25f6:	bge.w	248e <setup+0xbf6>
    25fa:	add	fp, r6
    25fc:	add.w	r9, r4, r6
    2600:	add.w	r6, fp, fp, lsl #1
    2604:	add.w	r6, r7, r6, lsl #3
    2608:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    260c:	cmp	fp, r9
    260e:	bge.n	262c <setup+0xd94>
    2610:	mov	r8, r6
    2612:	mov	r4, fp
        if (rand){
    2614:	cmp.w	sl, #0
    2618:	bne.w	2e44 <setup+0x15ac>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    261c:	ldr	r3, [r5, #0]
    261e:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2622:	adds	r4, #1
    2624:	add.w	r8, r8, #96	; 0x60
    2628:	cmp	r4, r9
    262a:	bne.n	2614 <setup+0xd7c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    262c:	adds	r7, #1
    262e:	ldr	r3, [sp, #4]
    2630:	adds	r6, #4
    2632:	cmp	r7, r3
    2634:	bne.n	260c <setup+0xd74>
    2636:	b.n	248e <setup+0xbf6>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2638:	movs	r0, #8
    263a:	bl	b7ac <random(unsigned long)>
    263e:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2642:	movs	r0, #8
    2644:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2648:	cmp	r4, #0
    264a:	ble.w	248e <setup+0xbf6>
    264e:	add.w	r3, r0, #15
    2652:	add.w	r6, r6, r6, lsl #1
    2656:	mov	r8, r4
    2658:	mov	r4, sl
    265a:	add.w	r6, r3, r6, lsl #3
    265e:	movs	r7, #0
    2660:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2664:	cbnz	r4, 2678 <setup+0xde0>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2666:	ldr	r3, [r5, #0]
    2668:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    266a:	adds	r7, #1
    266c:	adds	r6, #4
    266e:	cmp	r7, r8
    2670:	beq.w	248e <setup+0xbf6>
      if (rand){
    2674:	cmp	r4, #0
    2676:	beq.n	2666 <setup+0xdce>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2678:	ldr	r3, [r5, #20]
    267a:	ldr	r2, [r5, #16]
    267c:	subs	r0, r3, r2
    267e:	adds	r0, #2
    2680:	bl	b7ac <random(unsigned long)>
    2684:	ldr	r3, [r5, #16]
    2686:	subs	r3, #1
    2688:	add	r0, r3
    268a:	str	r0, [r6, #0]
    268c:	b.n	266a <setup+0xdd2>
    268e:	add.w	r7, r5, #2304	; 0x900
    2692:	add.w	r6, r5, #28
    2696:	mov	r4, r5
    2698:	mov	r8, r7
    269a:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    269c:	cmp	r7, #0
    269e:	bne.w	3052 <setup+0x17ba>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    26a2:	ldr	r3, [r5, #0]
    26a4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    26a6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    26aa:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    26ac:	str	r3, [r4, #120]	; 0x78
    26ae:	adds	r4, #96	; 0x60
    26b0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    26b2:	cmp	r4, r8
    26b4:	bne.n	269c <setup+0xe04>
    26b6:	ldr	r3, [pc, #208]	; (2788 <setup+0xef0>)
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    26b8:	ldr	r2, [pc, #204]	; (2788 <setup+0xef0>)
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    26ba:	ldr.w	r3, [r3, #360]	; 0x168
	}

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
    26be:	ldr.w	r5, [r2, #416]	; 0x1a0
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    26c2:	subs	r3, #1
    26c4:	ldr.w	r6, [r2, #364]	; 0x16c
    26c8:	ldrb.w	sl, [r2, #368]	; 0x170
    26cc:	cmp	r3, #4
    26ce:	bhi.w	3354 <setup+0x1abc>
    26d2:	tbh	[pc, r3, lsl #1]
    26d6:	.short	0x01e6
    26d8:	.word	0x015601aa
    26dc:	.word	0x00f20124
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    26e0:	movs	r0, #8
    26e2:	mov	r7, r5
    26e4:	bl	b7ac <random(unsigned long)>
    26e8:	mov	r6, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    26ea:	movs	r0, #8
    26ec:	add.w	fp, r5, #96	; 0x60
    26f0:	bl	b7ac <random(unsigned long)>
    26f4:	vmov	s15, r4
    26f8:	adds	r6, #8
    26fa:	add.w	r3, r0, #8
    26fe:	vcvt.f64.s32	d9, s15
    2702:	rsb	r9, r0, #16
    2706:	negs	r3, r3
    2708:	rsb	r8, r6, #0
    270c:	str	r3, [sp, #4]
    270e:	vmov	s15, r8
    2712:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    2714:	mov	r6, r7
    2716:	vcvt.f64.s32	d8, s15
    271a:	vmul.f64	d8, d8, d8
    271e:	b.n	272c <setup+0xe94>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2720:	ldr	r3, [r5, #0]
    2722:	str	r3, [r6, #28]
    2724:	adds	r4, #1
    2726:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2728:	cmp	r4, r9
    272a:	beq.n	277c <setup+0xee4>
      double xx = x-midPoint_y;
    272c:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2730:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2734:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2738:	vfma.f64	d0, d7, d7
    273c:	vsqrt.f64	d7, d0
    2740:	vcmp.f64	d7, d7
    2744:	vmrs	APSR_nzcv, fpscr
    2748:	bne.w	34b4 <setup+0x1c1c>
    274c:	vcmpe.f64	d7, d9
    2750:	vmrs	APSR_nzcv, fpscr
    2754:	bhi.n	2724 <setup+0xe8c>
        if (rand){
    2756:	cmp.w	sl, #0
    275a:	beq.n	2720 <setup+0xe88>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    275c:	ldr	r3, [r5, #20]
    275e:	adds	r4, #1
    2760:	ldr	r0, [r5, #16]
    2762:	adds	r6, #96	; 0x60
    2764:	subs	r0, r3, r0
    2766:	adds	r0, #2
    2768:	bl	b7ac <random(unsigned long)>
    276c:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    276e:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2770:	add.w	r3, r3, #4294967295
    2774:	add	r0, r3
    2776:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    277a:	bne.n	272c <setup+0xe94>
    277c:	adds	r7, #4
    277e:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2782:	cmp	r7, fp
    2784:	bne.n	270e <setup+0xe76>
    2786:	b.n	26b6 <setup+0xe1e>
    2788:	.word	0x20004fb0
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    278c:	movs	r0, #8
    278e:	bl	b7ac <random(unsigned long)>
    2792:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2796:	movs	r0, #8
    2798:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    279c:	cmp	r4, #0
    279e:	mov	r3, r4
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    27a0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    27a4:	it	lt
    27a6:	addlt	r3, r4, #1
    27a8:	cmp	r4, #0
    27aa:	mov.w	fp, r3, asr #1
    27ae:	it	lt
    27b0:	addlt	r4, #1
    27b2:	rsb	fp, fp, #0
    27b6:	asrs	r4, r4, #1
    27b8:	add.w	r7, r0, fp
    27bc:	adds	r3, r4, r0
    27be:	cmp	r7, r3
    27c0:	str	r3, [sp, #4]
    27c2:	bge.w	26b6 <setup+0xe1e>
    27c6:	add	fp, r6
    27c8:	add.w	r9, r4, r6
    27cc:	add.w	r6, fp, fp, lsl #1
    27d0:	add.w	r6, r7, r6, lsl #3
    27d4:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    27d8:	cmp	r9, fp
    27da:	ble.n	27f8 <setup+0xf60>
    27dc:	mov	r8, r6
    27de:	mov	r4, fp
        if (rand){
    27e0:	cmp.w	sl, #0
    27e4:	bne.w	2e2c <setup+0x1594>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    27e8:	ldr	r3, [r5, #0]
    27ea:	str.w	r3, [r8, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    27ee:	adds	r4, #1
    27f0:	add.w	r8, r8, #96	; 0x60
    27f4:	cmp	r4, r9
    27f6:	bne.n	27e0 <setup+0xf48>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    27f8:	adds	r7, #1
    27fa:	ldr	r3, [sp, #4]
    27fc:	adds	r6, #4
    27fe:	cmp	r7, r3
    2800:	bne.n	27d8 <setup+0xf40>
    2802:	b.n	26b6 <setup+0xe1e>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2804:	movs	r0, #8
    2806:	bl	b7ac <random(unsigned long)>
    280a:	add.w	r6, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    280e:	movs	r0, #8
    2810:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2814:	cmp	r4, #0
    2816:	ble.w	26b6 <setup+0xe1e>
    281a:	add.w	r6, r6, r6, lsl #1
    281e:	add.w	r3, r0, #15
    2822:	mov	r8, r4
    2824:	mov	r4, sl
    2826:	add.w	r6, r3, r6, lsl #3
    282a:	movs	r7, #0
    282c:	add.w	r6, r5, r6, lsl #2
      if (rand){
    2830:	cbnz	r4, 2844 <setup+0xfac>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2832:	ldr	r3, [r5, #0]
    2834:	str	r3, [r6, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2836:	adds	r7, #1
    2838:	adds	r6, #4
    283a:	cmp	r7, r8
    283c:	beq.w	26b6 <setup+0xe1e>
      if (rand){
    2840:	cmp	r4, #0
    2842:	beq.n	2832 <setup+0xf9a>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2844:	ldr	r3, [r5, #20]
    2846:	ldr	r2, [r5, #16]
    2848:	subs	r0, r3, r2
    284a:	adds	r0, #2
    284c:	bl	b7ac <random(unsigned long)>
    2850:	ldr	r3, [r5, #16]
    2852:	subs	r3, #1
    2854:	add	r0, r3
    2856:	str	r0, [r6, #0]
    2858:	b.n	2836 <setup+0xf9e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    285a:	cmp	r4, #0
    285c:	ble.w	26b6 <setup+0xe1e>
    2860:	mov	r9, r4
    2862:	movs	r7, #0
    2864:	mov	r4, sl
    2866:	b.n	287c <setup+0xfe4>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2868:	add.w	r3, r6, r3, lsl #3
    286c:	ldr	r2, [r5, #0]
    286e:	add.w	r3, r5, r3, lsl #2
    2872:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2874:	adds	r7, #1
    2876:	cmp	r7, r9
    2878:	beq.w	26b6 <setup+0xe1e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    287c:	movs	r0, #8
    287e:	bl	b7ac <random(unsigned long)>
    2882:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2886:	movs	r0, #8
    2888:	bl	b7ac <random(unsigned long)>
    288c:	add.w	r6, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2890:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2894:	cmp	r4, #0
    2896:	beq.n	2868 <setup+0xfd0>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2898:	ldr	r3, [r5, #20]
    289a:	add.w	r8, r8, r8, lsl #1
    289e:	ldr	r2, [r5, #16]
    28a0:	add.w	r6, r6, r8, lsl #3
    28a4:	subs	r0, r3, r2
    28a6:	add.w	r6, r5, r6, lsl #2
    28aa:	adds	r0, #2
    28ac:	bl	b7ac <random(unsigned long)>
    28b0:	ldr	r3, [r5, #16]
    28b2:	subs	r3, #1
    28b4:	add	r0, r3
    28b6:	str	r0, [r6, #28]
    28b8:	b.n	2874 <setup+0xfdc>
    28ba:	add.w	r7, r5, #2304	; 0x900
    28be:	add.w	r6, r5, #28
    28c2:	mov	r4, r5
    28c4:	mov	r8, r7
    28c6:	mov	r7, sl
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    28c8:	cmp	r7, #0
    28ca:	bne.w	2fb6 <setup+0x171e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    28ce:	ldr	r3, [r5, #0]
    28d0:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    28d2:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    28d6:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    28d8:	str	r3, [r4, #120]	; 0x78
    28da:	adds	r4, #96	; 0x60
    28dc:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    28de:	cmp	r4, r8
    28e0:	bne.n	28c8 <setup+0x1030>

	void define_seeds(){
		initialize_seed(_fg_automaton, hue_seeds[0]);
		initialize_seed(_bg_automaton, hue_seeds[0]);
		initialize_seed(_grow_automaton, bri_seeds[1]);
		initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    28e2:	ldr	r3, [pc, #812]	; (2c10 <setup+0x1378>)
    28e4:	movs	r1, #5
    28e6:	movs	r0, #0
    28e8:	ldr.w	r5, [r3, #420]	; 0x1a4
    28ec:	bl	b7b4 <random(long, long)>
    28f0:	ldr	r3, [pc, #796]	; (2c10 <setup+0x1378>)
    28f2:	add.w	r0, r0, r0, lsl #1
    28f6:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    28fa:	ldr.w	r2, [r3, #348]	; 0x15c
    28fe:	add.w	r3, r3, #348	; 0x15c
    2902:	subs	r2, #1
    2904:	ldr	r6, [r3, #4]
    2906:	ldrb.w	fp, [r3, #8]
    290a:	cmp	r2, #4
    290c:	bhi.w	32ea <setup+0x1a52>
    2910:	tbh	[pc, r2, lsl #1]
    2914:	.word	0x020e0249
    2918:	.word	0x017201ba
    291c:	.short	0x00f3
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    291e:	cmp	r6, #0
    2920:	ble.n	28e2 <setup+0x104a>
    2922:	mov	r9, r5
    2924:	movs	r7, #0
    2926:	mov	r5, sl
    2928:	b.n	293e <setup+0x10a6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    292a:	add.w	r3, r4, r3, lsl #3
    292e:	ldr.w	r2, [r9]
    2932:	add.w	r3, r9, r3, lsl #2
    2936:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2938:	adds	r7, #1
    293a:	cmp	r6, r7
    293c:	beq.n	28e2 <setup+0x104a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    293e:	movs	r0, #8
    2940:	bl	b7ac <random(unsigned long)>
    2944:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2948:	movs	r0, #8
    294a:	bl	b7ac <random(unsigned long)>
    294e:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2952:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2956:	cmp	r5, #0
    2958:	beq.n	292a <setup+0x1092>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    295a:	ldr.w	r3, [r9, #20]
    295e:	add.w	r8, r8, r8, lsl #1
    2962:	ldr.w	r2, [r9, #16]
    2966:	add.w	r4, r4, r8, lsl #3
    296a:	subs	r0, r3, r2
    296c:	add.w	r4, r9, r4, lsl #2
    2970:	adds	r0, #2
    2972:	bl	b7ac <random(unsigned long)>
    2976:	ldr.w	r3, [r9, #16]
    297a:	subs	r3, #1
    297c:	add	r0, r3
    297e:	str	r0, [r4, #28]
    2980:	b.n	2938 <setup+0x10a0>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2982:	movs	r0, #8
    2984:	mov	r7, r5
    2986:	bl	b7ac <random(unsigned long)>
    298a:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    298c:	movs	r0, #8
    298e:	add.w	fp, r5, #96	; 0x60
    2992:	bl	b7ac <random(unsigned long)>
    2996:	vmov	s15, r6
    299a:	adds	r4, #8
    299c:	add.w	r3, r0, #8
    29a0:	vcvt.f64.s32	d9, s15
    29a4:	rsb	r9, r0, #16
    29a8:	negs	r3, r3
    29aa:	rsb	r8, r4, #0
    29ae:	str	r3, [sp, #4]
    29b0:	vmov	s15, r8
    29b4:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    29b6:	mov	r6, r7
    29b8:	vcvt.f64.s32	d8, s15
    29bc:	vmul.f64	d8, d8, d8
    29c0:	b.n	29ce <setup+0x1136>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    29c2:	ldr	r3, [r5, #0]
    29c4:	str	r3, [r6, #28]
    29c6:	adds	r4, #1
    29c8:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    29ca:	cmp	r9, r4
    29cc:	beq.n	2a1e <setup+0x1186>
      double xx = x-midPoint_y;
    29ce:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    29d2:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    29d6:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    29da:	vfma.f64	d0, d7, d7
    29de:	vsqrt.f64	d7, d0
    29e2:	vcmp.f64	d7, d7
    29e6:	vmrs	APSR_nzcv, fpscr
    29ea:	bne.w	34a8 <setup+0x1c10>
    29ee:	vcmpe.f64	d7, d9
    29f2:	vmrs	APSR_nzcv, fpscr
    29f6:	bhi.n	29c6 <setup+0x112e>
        if (rand){
    29f8:	cmp.w	sl, #0
    29fc:	beq.n	29c2 <setup+0x112a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    29fe:	ldr	r3, [r5, #20]
    2a00:	adds	r4, #1
    2a02:	ldr	r0, [r5, #16]
    2a04:	adds	r6, #96	; 0x60
    2a06:	subs	r0, r3, r0
    2a08:	adds	r0, #2
    2a0a:	bl	b7ac <random(unsigned long)>
    2a0e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2a10:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2a12:	add.w	r3, r3, #4294967295
    2a16:	add	r0, r3
    2a18:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2a1c:	bne.n	29ce <setup+0x1136>
    2a1e:	adds	r7, #4
    2a20:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2a24:	cmp	fp, r7
    2a26:	bne.n	29b0 <setup+0x1118>
    2a28:	b.n	28e2 <setup+0x104a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2a2a:	movs	r0, #8
    2a2c:	bl	b7ac <random(unsigned long)>
    2a30:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2a34:	movs	r0, #8
    2a36:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2a3a:	cmp	r6, #0
    2a3c:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2a3e:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2a42:	it	lt
    2a44:	addlt	r3, r6, #1
    2a46:	cmp	r6, #0
    2a48:	mov.w	fp, r3, asr #1
    2a4c:	it	lt
    2a4e:	addlt	r6, #1
    2a50:	rsb	fp, fp, #0
    2a54:	asrs	r6, r6, #1
    2a56:	add.w	r7, r0, fp
    2a5a:	adds	r3, r0, r6
    2a5c:	cmp	r3, r7
    2a5e:	str	r3, [sp, #4]
    2a60:	ble.w	28e2 <setup+0x104a>
    2a64:	add	fp, r4
    2a66:	add	r4, r6
    2a68:	add.w	r6, fp, fp, lsl #1
    2a6c:	add.w	r6, r7, r6, lsl #3
    2a70:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2a74:	cmp	r4, fp
    2a76:	ble.n	2a96 <setup+0x11fe>
    2a78:	mov	r9, r6
    2a7a:	mov	r8, fp
        if (rand){
    2a7c:	cmp.w	sl, #0
    2a80:	bne.w	2e14 <setup+0x157c>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2a84:	ldr	r3, [r5, #0]
    2a86:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2a8a:	add.w	r8, r8, #1
    2a8e:	add.w	r9, r9, #96	; 0x60
    2a92:	cmp	r8, r4
    2a94:	bne.n	2a7c <setup+0x11e4>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2a96:	adds	r7, #1
    2a98:	ldr	r3, [sp, #4]
    2a9a:	adds	r6, #4
    2a9c:	cmp	r3, r7
    2a9e:	bne.n	2a74 <setup+0x11dc>
    2aa0:	b.n	28e2 <setup+0x104a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2aa2:	movs	r0, #8
    2aa4:	bl	b7ac <random(unsigned long)>
    2aa8:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2aac:	movs	r0, #8
    2aae:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2ab2:	cmp	r6, #0
    2ab4:	ble.w	28e2 <setup+0x104a>
    2ab8:	add.w	r3, r0, #15
    2abc:	add.w	r4, r4, r4, lsl #1
    2ac0:	movs	r7, #0
    2ac2:	add.w	r4, r3, r4, lsl #3
    2ac6:	add.w	r4, r5, r4, lsl #2
      if (rand){
    2aca:	cmp.w	sl, #0
    2ace:	bne.n	2ae4 <setup+0x124c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2ad0:	ldr	r3, [r5, #0]
    2ad2:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2ad4:	adds	r7, #1
    2ad6:	adds	r4, #4
    2ad8:	cmp	r6, r7
    2ada:	beq.w	28e2 <setup+0x104a>
      if (rand){
    2ade:	cmp.w	sl, #0
    2ae2:	beq.n	2ad0 <setup+0x1238>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2ae4:	ldr	r3, [r5, #20]
    2ae6:	ldr	r2, [r5, #16]
    2ae8:	subs	r0, r3, r2
    2aea:	adds	r0, #2
    2aec:	bl	b7ac <random(unsigned long)>
    2af0:	ldr	r3, [r5, #16]
    2af2:	subs	r3, #1
    2af4:	add	r0, r3
    2af6:	str	r0, [r4, #0]
    2af8:	b.n	2ad4 <setup+0x123c>
    2afa:	add.w	r7, r5, #2304	; 0x900
    2afe:	add.w	r6, r5, #28
    2b02:	mov	r4, r5
    2b04:	mov	r8, r7
    2b06:	mov	r7, fp
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    2b08:	cmp	r7, #0
    2b0a:	bne.w	3004 <setup+0x176c>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    2b0e:	ldr	r3, [r5, #0]
    2b10:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    2b12:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    2b16:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    2b18:	str	r3, [r4, #120]	; 0x78
    2b1a:	adds	r4, #96	; 0x60
    2b1c:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    2b1e:	cmp	r4, r8
    2b20:	bne.n	2b08 <setup+0x1270>

  screen_A.init_screen();
  screen_B.init_screen();

  synapse_A.begin();
    2b22:	ldr	r0, [pc, #240]	; (2c14 <setup+0x137c>)
    2b24:	bl	9768 <Adafruit_NeoPixel::begin()>
  synapse_B.begin();
    2b28:	ldr	r0, [pc, #236]	; (2c18 <setup+0x1380>)
    2b2a:	bl	9768 <Adafruit_NeoPixel::begin()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2b2e:	ldr	r3, [pc, #236]	; (2c1c <setup+0x1384>)
    2b30:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b32:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    2b34:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b36:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2b38:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b3a:	ldr	r6, [pc, #224]	; (2c1c <setup+0x1384>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2b3c:	cmp	r3, r1
    2b3e:	it	eq
    2b40:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b42:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2b44:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2b46:	ite	eq
    2b48:	moveq	r5, #1
    2b4a:	movne	r5, #0
    2b4c:	cmp	r5, #0
    2b4e:	beq.n	2b36 <setup+0x129e>
    2b50:	lsrs	r1, r3, #5
    2b52:	ldr	r3, [pc, #204]	; (2c20 <setup+0x1388>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b54:	mov	r4, r6
    2b56:	orr.w	r1, r1, r2, lsl #27
    2b5a:	vmov	s15, r1
    2b5e:	vldr	d5, [pc, #168]	; 2c08 <setup+0x1370>
    2b62:	vcvt.f64.u32	d7, s15
    2b66:	vdiv.f64	d6, d7, d5
    2b6a:	vcvt.u32.f64	s12, d6
    2b6e:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2b72:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    2b74:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b76:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2b78:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b7a:	ldr	r6, [pc, #160]	; (2c1c <setup+0x1384>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    2b7c:	cmp	r3, r1
    2b7e:	it	eq
    2b80:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b82:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2b84:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2b86:	ite	eq
    2b88:	moveq	r5, #1
    2b8a:	movne	r5, #0
    2b8c:	cmp	r5, #0
    2b8e:	beq.n	2b76 <setup+0x12de>
    2b90:	lsrs	r1, r3, #5
    2b92:	ldr	r3, [pc, #144]	; (2c24 <setup+0x138c>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2b94:	mov	r4, r6
    2b96:	orr.w	r1, r1, r2, lsl #27
    2b9a:	vmov	s15, r1
    2b9e:	vldr	d5, [pc, #104]	; 2c08 <setup+0x1370>
    2ba2:	vcvt.f64.u32	d7, s15
    2ba6:	vdiv.f64	d6, d7, d5
    2baa:	vcvt.u32.f64	s12, d6
    2bae:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    2bb2:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    2bb4:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2bb6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    2bb8:	ldr	r3, [r4, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    2bba:	cmp	r3, r1
    2bbc:	it	eq
    2bbe:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    2bc0:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    2bc2:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    2bc4:	ite	eq
    2bc6:	moveq	r5, #1
    2bc8:	movne	r5, #0
    2bca:	cmp	r5, #0
    2bcc:	beq.n	2bb6 <setup+0x131e>
    2bce:	lsrs	r1, r3, #5
    2bd0:	ldr	r3, [pc, #84]	; (2c28 <setup+0x1390>)
    2bd2:	orr.w	r1, r1, r2, lsl #27
    2bd6:	vmov	s15, r1
    2bda:	vldr	d5, [pc, #44]	; 2c08 <setup+0x1370>
    2bde:	vcvt.f64.u32	d7, s15
    2be2:	vdiv.f64	d6, d7, d5
    2be6:	vcvt.u32.f64	s12, d6
    2bea:	vstr	s12, [r3]
  sinceBeam = 0;
  sinceBeamUpdate = 0;
  sinceFadeUpdate = 0;

  
}
    2bee:	add	sp, #12
    2bf0:	vpop	{d8-d9}
    2bf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2bf8:	cmp	r6, #0
    2bfa:	ble.n	2b22 <setup+0x128a>
    2bfc:	mov	r9, r5
    2bfe:	mov.w	r8, #0
    2c02:	mov	r5, fp
    2c04:	b.n	2c44 <setup+0x13ac>
    2c06:	nop
    2c08:	.word	0xd2f1a9fc
    2c0c:	.word	0x3ff0624d
    2c10:	.word	0x20004fb0
    2c14:	.word	0x200089c0
    2c18:	.word	0x200089d4
    2c1c:	.word	0x400d4000
    2c20:	.word	0x20001760
    2c24:	.word	0x20001764
    2c28:	.word	0x20005340
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2c2c:	add.w	r3, r4, r3, lsl #3
    2c30:	ldr.w	r2, [r9]
    2c34:	add.w	r3, r9, r3, lsl #2
    2c38:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    2c3a:	add.w	r8, r8, #1
    2c3e:	cmp	r8, r6
    2c40:	beq.w	2b22 <setup+0x128a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c44:	movs	r0, #8
    2c46:	bl	b7ac <random(unsigned long)>
    2c4a:	add.w	r7, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c4e:	movs	r0, #8
    2c50:	bl	b7ac <random(unsigned long)>
    2c54:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    2c58:	add.w	r3, r7, r7, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    2c5c:	cmp	r5, #0
    2c5e:	beq.n	2c2c <setup+0x1394>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    2c60:	ldr.w	r3, [r9, #20]
    2c64:	add.w	r7, r7, r7, lsl #1
    2c68:	ldr.w	r2, [r9, #16]
    2c6c:	add.w	r4, r4, r7, lsl #3
    2c70:	subs	r0, r3, r2
    2c72:	add.w	r4, r9, r4, lsl #2
    2c76:	adds	r0, #2
    2c78:	bl	b7ac <random(unsigned long)>
    2c7c:	ldr.w	r3, [r9, #16]
    2c80:	subs	r3, #1
    2c82:	add	r0, r3
    2c84:	str	r0, [r4, #28]
    2c86:	b.n	2c3a <setup+0x13a2>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c88:	movs	r0, #8
    2c8a:	mov	r7, r5
    2c8c:	bl	b7ac <random(unsigned long)>
    2c90:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2c92:	movs	r0, #8
    2c94:	add.w	r9, r5, #96	; 0x60
    2c98:	bl	b7ac <random(unsigned long)>
    2c9c:	vmov	s15, r6
    2ca0:	adds	r4, #8
    2ca2:	add.w	r3, r0, #8
    2ca6:	vcvt.f64.s32	d9, s15
    2caa:	rsb	sl, r0, #16
    2cae:	negs	r3, r3
    2cb0:	rsb	r8, r4, #0
    2cb4:	str	r3, [sp, #4]
    2cb6:	vmov	s15, r8
    2cba:	ldr	r4, [sp, #4]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    2cbc:	mov	r6, r7
    2cbe:	vcvt.f64.s32	d8, s15
    2cc2:	vmul.f64	d8, d8, d8
    2cc6:	b.n	2cd4 <setup+0x143c>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    2cc8:	ldr	r3, [r5, #0]
    2cca:	str	r3, [r6, #28]
    2ccc:	adds	r4, #1
    2cce:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2cd0:	cmp	r4, sl
    2cd2:	beq.n	2d24 <setup+0x148c>
      double xx = x-midPoint_y;
    2cd4:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    2cd8:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    2cdc:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    2ce0:	vfma.f64	d0, d7, d7
    2ce4:	vsqrt.f64	d7, d0
    2ce8:	vcmp.f64	d7, d7
    2cec:	vmrs	APSR_nzcv, fpscr
    2cf0:	bne.w	349e <setup+0x1c06>
    2cf4:	vcmpe.f64	d7, d9
    2cf8:	vmrs	APSR_nzcv, fpscr
    2cfc:	bhi.n	2ccc <setup+0x1434>
        if (rand){
    2cfe:	cmp.w	fp, #0
    2d02:	beq.n	2cc8 <setup+0x1430>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2d04:	ldr	r3, [r5, #20]
    2d06:	adds	r4, #1
    2d08:	ldr	r0, [r5, #16]
    2d0a:	adds	r6, #96	; 0x60
    2d0c:	subs	r0, r3, r0
    2d0e:	adds	r0, #2
    2d10:	bl	b7ac <random(unsigned long)>
    2d14:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2d16:	cmp	r4, sl
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2d18:	add.w	r3, r3, #4294967295
    2d1c:	add	r0, r3
    2d1e:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    2d22:	bne.n	2cd4 <setup+0x143c>
    2d24:	adds	r7, #4
    2d26:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    2d2a:	cmp	r9, r7
    2d2c:	bne.n	2cb6 <setup+0x141e>
    2d2e:	b.n	2b22 <setup+0x128a>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2d30:	movs	r0, #8
    2d32:	bl	b7ac <random(unsigned long)>
    2d36:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2d3a:	movs	r0, #8
    2d3c:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2d40:	cmp	r6, #0
    2d42:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2d44:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2d48:	it	lt
    2d4a:	addlt	r3, r6, #1
    2d4c:	cmp	r6, #0
    2d4e:	mov.w	r8, r3, asr #1
    2d52:	it	lt
    2d54:	addlt	r6, #1
    2d56:	rsb	r8, r8, #0
    2d5a:	asrs	r6, r6, #1
    2d5c:	add.w	r7, r0, r8
    2d60:	adds	r3, r0, r6
    2d62:	cmp	r7, r3
    2d64:	str	r3, [sp, #4]
    2d66:	bge.w	2b22 <setup+0x128a>
    2d6a:	add	r8, r4
    2d6c:	add	r4, r6
    2d6e:	add.w	r6, r8, r8, lsl #1
    2d72:	add.w	r6, r7, r6, lsl #3
    2d76:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2d7a:	cmp	r4, r8
    2d7c:	ble.n	2d9a <setup+0x1502>
    2d7e:	mov	sl, r6
    2d80:	mov	r9, r8
        if (rand){
    2d82:	cmp.w	fp, #0
    2d86:	bne.n	2dfc <setup+0x1564>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    2d88:	ldr	r3, [r5, #0]
    2d8a:	str.w	r3, [sl, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    2d8e:	add.w	r9, r9, #1
    2d92:	add.w	sl, sl, #96	; 0x60
    2d96:	cmp	r9, r4
    2d98:	bne.n	2d82 <setup+0x14ea>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    2d9a:	adds	r7, #1
    2d9c:	ldr	r3, [sp, #4]
    2d9e:	adds	r6, #4
    2da0:	cmp	r7, r3
    2da2:	bne.n	2d7a <setup+0x14e2>
    2da4:	b.n	2b22 <setup+0x128a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2da6:	movs	r0, #8
    2da8:	bl	b7ac <random(unsigned long)>
    2dac:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    2db0:	movs	r0, #8
    2db2:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    2db6:	cmp	r6, #0
    2db8:	ble.w	2b22 <setup+0x128a>
    2dbc:	add.w	r4, r4, r4, lsl #1
    2dc0:	add.w	r3, r0, #15
    2dc4:	mov	r8, r6
    2dc6:	mov	r6, fp
    2dc8:	add.w	r4, r3, r4, lsl #3
    2dcc:	movs	r7, #0
    2dce:	add.w	r4, r5, r4, lsl #2
      if (rand){
    2dd2:	cbnz	r6, 2de6 <setup+0x154e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    2dd4:	ldr	r3, [r5, #0]
    2dd6:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    2dd8:	adds	r7, #1
    2dda:	adds	r4, #4
    2ddc:	cmp	r7, r8
    2dde:	beq.w	2b22 <setup+0x128a>
      if (rand){
    2de2:	cmp	r6, #0
    2de4:	beq.n	2dd4 <setup+0x153c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2de6:	ldr	r3, [r5, #20]
    2de8:	ldr	r2, [r5, #16]
    2dea:	subs	r0, r3, r2
    2dec:	adds	r0, #2
    2dee:	bl	b7ac <random(unsigned long)>
    2df2:	ldr	r3, [r5, #16]
    2df4:	subs	r3, #1
    2df6:	add	r0, r3
    2df8:	str	r0, [r4, #0]
    2dfa:	b.n	2dd8 <setup+0x1540>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2dfc:	ldr	r3, [r5, #20]
    2dfe:	ldr	r0, [r5, #16]
    2e00:	subs	r0, r3, r0
    2e02:	adds	r0, #2
    2e04:	bl	b7ac <random(unsigned long)>
    2e08:	ldr	r3, [r5, #16]
    2e0a:	subs	r3, #1
    2e0c:	add	r0, r3
    2e0e:	str.w	r0, [sl, #28]
    2e12:	b.n	2d8e <setup+0x14f6>
    2e14:	ldr	r3, [r5, #20]
    2e16:	ldr	r0, [r5, #16]
    2e18:	subs	r0, r3, r0
    2e1a:	adds	r0, #2
    2e1c:	bl	b7ac <random(unsigned long)>
    2e20:	ldr	r3, [r5, #16]
    2e22:	subs	r3, #1
    2e24:	add	r0, r3
    2e26:	str.w	r0, [r9, #28]
    2e2a:	b.n	2a8a <setup+0x11f2>
    2e2c:	ldr	r3, [r5, #20]
    2e2e:	ldr	r0, [r5, #16]
    2e30:	subs	r0, r3, r0
    2e32:	adds	r0, #2
    2e34:	bl	b7ac <random(unsigned long)>
    2e38:	ldr	r3, [r5, #16]
    2e3a:	subs	r3, #1
    2e3c:	add	r0, r3
    2e3e:	str.w	r0, [r8, #28]
    2e42:	b.n	27ee <setup+0xf56>
    2e44:	ldr	r3, [r5, #20]
    2e46:	ldr	r0, [r5, #16]
    2e48:	subs	r0, r3, r0
    2e4a:	adds	r0, #2
    2e4c:	bl	b7ac <random(unsigned long)>
    2e50:	ldr	r3, [r5, #16]
    2e52:	subs	r3, #1
    2e54:	add	r0, r3
    2e56:	str.w	r0, [r8, #28]
    2e5a:	b.w	2622 <setup+0xd8a>
    2e5e:	ldr	r3, [r5, #20]
    2e60:	ldr	r0, [r5, #16]
    2e62:	subs	r0, r3, r0
    2e64:	adds	r0, #2
    2e66:	bl	b7ac <random(unsigned long)>
    2e6a:	ldr	r3, [r5, #16]
    2e6c:	subs	r3, #1
    2e6e:	add	r0, r3
    2e70:	str.w	r0, [r9, #28]
    2e74:	b.w	23f6 <setup+0xb5e>
    2e78:	ldr	r3, [r5, #20]
    2e7a:	ldr	r0, [r5, #16]
    2e7c:	subs	r0, r3, r0
    2e7e:	adds	r0, #2
    2e80:	bl	b7ac <random(unsigned long)>
    2e84:	ldr	r3, [r5, #16]
    2e86:	subs	r3, #1
    2e88:	add	r0, r3
    2e8a:	str.w	r0, [r9, #28]
    2e8e:	b.w	1dd0 <setup+0x538>
    2e92:	ldr	r3, [r5, #20]
    2e94:	ldr	r0, [r5, #16]
    2e96:	subs	r0, r3, r0
    2e98:	adds	r0, #2
    2e9a:	bl	b7ac <random(unsigned long)>
    2e9e:	ldr	r3, [r5, #16]
    2ea0:	subs	r3, #1
    2ea2:	add	r0, r3
    2ea4:	str.w	r0, [r9, #28]
    2ea8:	b.w	207c <setup+0x7e4>
    2eac:	ldr	r3, [r5, #20]
    2eae:	ldr	r0, [r5, #16]
    2eb0:	subs	r0, r3, r0
    2eb2:	adds	r0, #2
    2eb4:	bl	b7ac <random(unsigned long)>
    2eb8:	ldr	r3, [r5, #16]
    2eba:	subs	r3, #1
    2ebc:	add	r0, r3
    2ebe:	str.w	r0, [r9, #28]
    2ec2:	b.w	1b48 <setup+0x2b0>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2ec6:	ldr	r3, [r5, #20]
    2ec8:	ldr	r2, [r5, #16]
    2eca:	subs	r0, r3, r2
    2ecc:	adds	r0, #2
    2ece:	bl	b7ac <random(unsigned long)>
    2ed2:	ldr	r1, [r5, #16]
    2ed4:	subs	r2, r1, #1
    2ed6:	add	r0, r2
    2ed8:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2eda:	ldr	r3, [r5, #20]
    2edc:	subs	r0, r3, r1
    2ede:	adds	r0, #2
    2ee0:	bl	b7ac <random(unsigned long)>
    2ee4:	ldr	r1, [r5, #16]
    2ee6:	subs	r2, r1, #1
    2ee8:	add	r0, r2
    2eea:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2eee:	ldr	r3, [r5, #20]
    2ef0:	subs	r0, r3, r1
    2ef2:	adds	r0, #2
    2ef4:	bl	b7ac <random(unsigned long)>
    2ef8:	ldr	r1, [r5, #16]
    2efa:	subs	r2, r1, #1
    2efc:	add	r0, r2
    2efe:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f00:	ldr	r3, [r5, #20]
    2f02:	subs	r0, r3, r1
    2f04:	adds	r0, #2
    2f06:	bl	b7ac <random(unsigned long)>
    2f0a:	ldr	r3, [r5, #16]
    2f0c:	subs	r3, #1
    2f0e:	add	r0, r3
    2f10:	str	r0, [r4, #120]	; 0x78
    2f12:	b.w	1a64 <setup+0x1cc>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f16:	ldr	r3, [r5, #20]
    2f18:	ldr	r2, [r5, #16]
    2f1a:	subs	r0, r3, r2
    2f1c:	adds	r0, #2
    2f1e:	bl	b7ac <random(unsigned long)>
    2f22:	ldr	r1, [r5, #16]
    2f24:	subs	r2, r1, #1
    2f26:	add	r0, r2
    2f28:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f2a:	ldr	r3, [r5, #20]
    2f2c:	subs	r0, r3, r1
    2f2e:	adds	r0, #2
    2f30:	bl	b7ac <random(unsigned long)>
    2f34:	ldr	r1, [r5, #16]
    2f36:	subs	r2, r1, #1
    2f38:	add	r0, r2
    2f3a:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f3e:	ldr	r3, [r5, #20]
    2f40:	subs	r0, r3, r1
    2f42:	adds	r0, #2
    2f44:	bl	b7ac <random(unsigned long)>
    2f48:	ldr	r1, [r5, #16]
    2f4a:	subs	r2, r1, #1
    2f4c:	add	r0, r2
    2f4e:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f50:	ldr	r3, [r5, #20]
    2f52:	subs	r0, r3, r1
    2f54:	adds	r0, #2
    2f56:	bl	b7ac <random(unsigned long)>
    2f5a:	ldr	r3, [r5, #16]
    2f5c:	subs	r3, #1
    2f5e:	add	r0, r3
    2f60:	str	r0, [r4, #120]	; 0x78
    2f62:	b.w	1ec8 <setup+0x630>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f66:	ldr	r3, [r5, #20]
    2f68:	ldr	r2, [r5, #16]
    2f6a:	subs	r0, r3, r2
    2f6c:	adds	r0, #2
    2f6e:	bl	b7ac <random(unsigned long)>
    2f72:	ldr	r1, [r5, #16]
    2f74:	subs	r2, r1, #1
    2f76:	add	r0, r2
    2f78:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f7a:	ldr	r3, [r5, #20]
    2f7c:	subs	r0, r3, r1
    2f7e:	adds	r0, #2
    2f80:	bl	b7ac <random(unsigned long)>
    2f84:	ldr	r1, [r5, #16]
    2f86:	subs	r2, r1, #1
    2f88:	add	r0, r2
    2f8a:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2f8e:	ldr	r3, [r5, #20]
    2f90:	subs	r0, r3, r1
    2f92:	adds	r0, #2
    2f94:	bl	b7ac <random(unsigned long)>
    2f98:	ldr	r1, [r5, #16]
    2f9a:	subs	r2, r1, #1
    2f9c:	add	r0, r2
    2f9e:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2fa0:	ldr	r3, [r5, #20]
    2fa2:	subs	r0, r3, r1
    2fa4:	adds	r0, #2
    2fa6:	bl	b7ac <random(unsigned long)>
    2faa:	ldr	r3, [r5, #16]
    2fac:	subs	r3, #1
    2fae:	add	r0, r3
    2fb0:	str	r0, [r4, #120]	; 0x78
    2fb2:	b.w	1c96 <setup+0x3fe>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2fb6:	ldr	r3, [r5, #20]
    2fb8:	ldr	r2, [r5, #16]
    2fba:	subs	r0, r3, r2
    2fbc:	adds	r0, #2
    2fbe:	bl	b7ac <random(unsigned long)>
    2fc2:	ldr	r1, [r5, #16]
    2fc4:	subs	r2, r1, #1
    2fc6:	add	r0, r2
    2fc8:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2fca:	ldr	r3, [r5, #20]
    2fcc:	subs	r0, r3, r1
    2fce:	adds	r0, #2
    2fd0:	bl	b7ac <random(unsigned long)>
    2fd4:	ldr	r1, [r5, #16]
    2fd6:	subs	r2, r1, #1
    2fd8:	add	r0, r2
    2fda:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2fde:	ldr	r3, [r5, #20]
    2fe0:	subs	r0, r3, r1
    2fe2:	adds	r0, #2
    2fe4:	bl	b7ac <random(unsigned long)>
    2fe8:	ldr	r1, [r5, #16]
    2fea:	subs	r2, r1, #1
    2fec:	add	r0, r2
    2fee:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    2ff0:	ldr	r3, [r5, #20]
    2ff2:	subs	r0, r3, r1
    2ff4:	adds	r0, #2
    2ff6:	bl	b7ac <random(unsigned long)>
    2ffa:	ldr	r3, [r5, #16]
    2ffc:	subs	r3, #1
    2ffe:	add	r0, r3
    3000:	str	r0, [r4, #120]	; 0x78
    3002:	b.n	28da <setup+0x1042>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3004:	ldr	r3, [r5, #20]
    3006:	ldr	r2, [r5, #16]
    3008:	subs	r0, r3, r2
    300a:	adds	r0, #2
    300c:	bl	b7ac <random(unsigned long)>
    3010:	ldr	r1, [r5, #16]
    3012:	subs	r2, r1, #1
    3014:	add	r0, r2
    3016:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3018:	ldr	r3, [r5, #20]
    301a:	subs	r0, r3, r1
    301c:	adds	r0, #2
    301e:	bl	b7ac <random(unsigned long)>
    3022:	ldr	r1, [r5, #16]
    3024:	subs	r2, r1, #1
    3026:	add	r0, r2
    3028:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    302c:	ldr	r3, [r5, #20]
    302e:	subs	r0, r3, r1
    3030:	adds	r0, #2
    3032:	bl	b7ac <random(unsigned long)>
    3036:	ldr	r1, [r5, #16]
    3038:	subs	r2, r1, #1
    303a:	add	r0, r2
    303c:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    303e:	ldr	r3, [r5, #20]
    3040:	subs	r0, r3, r1
    3042:	adds	r0, #2
    3044:	bl	b7ac <random(unsigned long)>
    3048:	ldr	r3, [r5, #16]
    304a:	subs	r3, #1
    304c:	add	r0, r3
    304e:	str	r0, [r4, #120]	; 0x78
    3050:	b.n	2b1a <setup+0x1282>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3052:	ldr	r3, [r5, #20]
    3054:	ldr	r2, [r5, #16]
    3056:	subs	r0, r3, r2
    3058:	adds	r0, #2
    305a:	bl	b7ac <random(unsigned long)>
    305e:	ldr	r1, [r5, #16]
    3060:	subs	r2, r1, #1
    3062:	add	r0, r2
    3064:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3066:	ldr	r3, [r5, #20]
    3068:	subs	r0, r3, r1
    306a:	adds	r0, #2
    306c:	bl	b7ac <random(unsigned long)>
    3070:	ldr	r1, [r5, #16]
    3072:	subs	r2, r1, #1
    3074:	add	r0, r2
    3076:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    307a:	ldr	r3, [r5, #20]
    307c:	subs	r0, r3, r1
    307e:	adds	r0, #2
    3080:	bl	b7ac <random(unsigned long)>
    3084:	ldr	r1, [r5, #16]
    3086:	subs	r2, r1, #1
    3088:	add	r0, r2
    308a:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    308c:	ldr	r3, [r5, #20]
    308e:	subs	r0, r3, r1
    3090:	adds	r0, #2
    3092:	bl	b7ac <random(unsigned long)>
    3096:	ldr	r3, [r5, #16]
    3098:	subs	r3, #1
    309a:	add	r0, r3
    309c:	str	r0, [r4, #120]	; 0x78
    309e:	b.w	26ae <setup+0xe16>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    30a2:	ldr	r3, [r5, #20]
    30a4:	ldr	r2, [r5, #16]
    30a6:	subs	r0, r3, r2
    30a8:	adds	r0, #2
    30aa:	bl	b7ac <random(unsigned long)>
    30ae:	ldr	r1, [r5, #16]
    30b0:	subs	r2, r1, #1
    30b2:	add	r0, r2
    30b4:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    30b6:	ldr	r3, [r5, #20]
    30b8:	subs	r0, r3, r1
    30ba:	adds	r0, #2
    30bc:	bl	b7ac <random(unsigned long)>
    30c0:	ldr	r1, [r5, #16]
    30c2:	subs	r2, r1, #1
    30c4:	add	r0, r2
    30c6:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    30ca:	ldr	r3, [r5, #20]
    30cc:	subs	r0, r3, r1
    30ce:	adds	r0, #2
    30d0:	bl	b7ac <random(unsigned long)>
    30d4:	ldr	r1, [r5, #16]
    30d6:	subs	r2, r1, #1
    30d8:	add	r0, r2
    30da:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    30dc:	ldr	r3, [r5, #20]
    30de:	subs	r0, r3, r1
    30e0:	adds	r0, #2
    30e2:	bl	b7ac <random(unsigned long)>
    30e6:	ldr	r3, [r5, #16]
    30e8:	subs	r3, #1
    30ea:	add	r0, r3
    30ec:	str	r0, [r4, #120]	; 0x78
    30ee:	b.w	210c <setup+0x874>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    30f2:	ldr	r3, [r5, #20]
    30f4:	ldr	r2, [r5, #16]
    30f6:	subs	r0, r3, r2
    30f8:	adds	r0, #2
    30fa:	bl	b7ac <random(unsigned long)>
    30fe:	ldr	r1, [r5, #16]
    3100:	subs	r2, r1, #1
    3102:	add	r0, r2
    3104:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    3106:	ldr	r3, [r5, #20]
    3108:	subs	r0, r3, r1
    310a:	adds	r0, #2
    310c:	bl	b7ac <random(unsigned long)>
    3110:	ldr	r1, [r5, #16]
    3112:	subs	r2, r1, #1
    3114:	add	r0, r2
    3116:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    311a:	ldr	r3, [r5, #20]
    311c:	subs	r0, r3, r1
    311e:	adds	r0, #2
    3120:	bl	b7ac <random(unsigned long)>
    3124:	ldr	r1, [r5, #16]
    3126:	subs	r2, r1, #1
    3128:	add	r0, r2
    312a:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    312c:	ldr	r3, [r5, #20]
    312e:	subs	r0, r3, r1
    3130:	adds	r0, #2
    3132:	bl	b7ac <random(unsigned long)>
    3136:	ldr	r3, [r5, #16]
    3138:	subs	r3, #1
    313a:	add	r0, r3
    313c:	str	r0, [r4, #120]	; 0x78
    313e:	b.w	2486 <setup+0xbee>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3142:	movw	sl, #4636	; 0x121c
    3146:	add.w	r3, r5, #28
    314a:	movs	r7, #0
    314c:	add.w	r9, r5, #4640	; 0x1220
    3150:	add	sl, r5
    3152:	str	r3, [sp, #4]
    3154:	mov.w	r8, r7, lsl #3
    3158:	ldr	r6, [sp, #4]
    315a:	movs	r4, #0
    315c:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3160:	ldrb	r2, [r5, #24]
      return _background[x][y];
    3162:	add	r3, r4
    3164:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3166:	cbnz	r2, 316c <setup+0x18d4>
      return _background[x][y];
    } else {
      return !_background[x][y];
    3168:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    316c:	cbnz	r3, 3188 <setup+0x18f0>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    316e:	adds	r4, #1
    3170:	adds	r6, #4
    3172:	cmp	r4, #24
    3174:	bne.n	315c <setup+0x18c4>
    3176:	ldr	r3, [sp, #4]
    3178:	adds	r7, #24
    317a:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    317c:	cmp.w	r7, #576	; 0x240
    3180:	str	r3, [sp, #4]
    3182:	bne.n	3154 <setup+0x18bc>
    3184:	b.w	1ed0 <setup+0x638>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3188:	ldr	r2, [r5, #20]
    318a:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    318c:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3190:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3192:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3194:	adds	r0, #2
    3196:	ldr.w	fp, [r3, r4, lsl #3]
    319a:	bl	b7ac <random(unsigned long)>
    319e:	ldr	r3, [r5, #16]
    31a0:	rsb	r3, r3, fp
    31a4:	adds	r3, #1
    31a6:	subs	r0, r3, r0
    31a8:	str	r0, [r6, #0]
    31aa:	b.n	316e <setup+0x18d6>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    31ac:	movw	sl, #4636	; 0x121c
    31b0:	add.w	r3, r5, #28
    31b4:	movs	r7, #0
    31b6:	add.w	r9, r5, #4640	; 0x1220
    31ba:	add	sl, r5
    31bc:	str	r3, [sp, #4]
    31be:	mov.w	r8, r7, lsl #3
    31c2:	ldr	r6, [sp, #4]
    31c4:	movs	r4, #0
    31c6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    31ca:	ldrb	r2, [r5, #24]
      return _background[x][y];
    31cc:	add	r3, r4
    31ce:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    31d0:	cbnz	r2, 31d6 <setup+0x193e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    31d2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    31d6:	cbnz	r3, 31f2 <setup+0x195a>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    31d8:	adds	r4, #1
    31da:	adds	r6, #4
    31dc:	cmp	r4, #24
    31de:	bne.n	31c6 <setup+0x192e>
    31e0:	ldr	r3, [sp, #4]
    31e2:	adds	r7, #24
    31e4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    31e6:	cmp.w	r7, #576	; 0x240
    31ea:	str	r3, [sp, #4]
    31ec:	bne.n	31be <setup+0x1926>
    31ee:	b.w	1a6c <setup+0x1d4>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    31f2:	ldr	r2, [r5, #20]
    31f4:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    31f6:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    31fa:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    31fc:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    31fe:	adds	r0, #2
    3200:	ldr.w	fp, [r3, r4, lsl #3]
    3204:	bl	b7ac <random(unsigned long)>
    3208:	ldr	r3, [r5, #16]
    320a:	rsb	r3, r3, fp
    320e:	adds	r3, #1
    3210:	subs	r0, r3, r0
    3212:	str	r0, [r6, #0]
    3214:	b.n	31d8 <setup+0x1940>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3216:	movw	sl, #4636	; 0x121c
    321a:	add.w	r3, r5, #28
    321e:	movs	r7, #0
    3220:	add.w	r9, r5, #4640	; 0x1220
    3224:	add	sl, r5
    3226:	str	r3, [sp, #4]
    3228:	mov.w	r8, r7, lsl #3
    322c:	ldr	r6, [sp, #4]
    322e:	movs	r4, #0
    3230:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3234:	ldrb	r2, [r5, #24]
      return _background[x][y];
    3236:	add	r3, r4
    3238:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    323a:	cbnz	r2, 3240 <setup+0x19a8>
      return _background[x][y];
    } else {
      return !_background[x][y];
    323c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    3240:	cbnz	r3, 325c <setup+0x19c4>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3242:	adds	r4, #1
    3244:	adds	r6, #4
    3246:	cmp	r4, #24
    3248:	bne.n	3230 <setup+0x1998>
    324a:	ldr	r3, [sp, #4]
    324c:	adds	r7, #24
    324e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    3250:	cmp.w	r7, #576	; 0x240
    3254:	str	r3, [sp, #4]
    3256:	bne.n	3228 <setup+0x1990>
    3258:	b.w	26b6 <setup+0xe1e>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    325c:	ldr	r2, [r5, #20]
    325e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3260:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3264:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3266:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3268:	adds	r0, #2
    326a:	ldr.w	fp, [r3, r4, lsl #3]
    326e:	bl	b7ac <random(unsigned long)>
    3272:	ldr	r3, [r5, #16]
    3274:	rsb	r3, r3, fp
    3278:	adds	r3, #1
    327a:	subs	r0, r3, r0
    327c:	str	r0, [r6, #0]
    327e:	b.n	3242 <setup+0x19aa>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3280:	movw	sl, #4636	; 0x121c
    3284:	add.w	r3, r5, #28
    3288:	movs	r7, #0
    328a:	add.w	r9, r5, #4640	; 0x1220
    328e:	add	sl, r5
    3290:	str	r3, [sp, #4]
    3292:	mov.w	r8, r7, lsl #3
    3296:	ldr	r6, [sp, #4]
    3298:	movs	r4, #0
    329a:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    329e:	ldrb	r2, [r5, #24]
      return _background[x][y];
    32a0:	add	r3, r4
    32a2:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    32a4:	cbnz	r2, 32aa <setup+0x1a12>
      return _background[x][y];
    } else {
      return !_background[x][y];
    32a6:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    32aa:	cbnz	r3, 32c6 <setup+0x1a2e>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    32ac:	adds	r4, #1
    32ae:	adds	r6, #4
    32b0:	cmp	r4, #24
    32b2:	bne.n	329a <setup+0x1a02>
    32b4:	ldr	r3, [sp, #4]
    32b6:	adds	r7, #24
    32b8:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    32ba:	cmp.w	r7, #576	; 0x240
    32be:	str	r3, [sp, #4]
    32c0:	bne.n	3292 <setup+0x19fa>
    32c2:	b.w	1c9e <setup+0x406>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    32c6:	ldr	r2, [r5, #20]
    32c8:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    32ca:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    32ce:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    32d0:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    32d2:	adds	r0, #2
    32d4:	ldr.w	fp, [r3, r4, lsl #3]
    32d8:	bl	b7ac <random(unsigned long)>
    32dc:	ldr	r3, [r5, #16]
    32de:	rsb	r3, r3, fp
    32e2:	adds	r3, #1
    32e4:	subs	r0, r3, r0
    32e6:	str	r0, [r6, #0]
    32e8:	b.n	32ac <setup+0x1a14>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    32ea:	movw	sl, #4636	; 0x121c
    32ee:	add.w	r3, r5, #28
    32f2:	movs	r7, #0
    32f4:	add.w	r9, r5, #4640	; 0x1220
    32f8:	add	sl, r5
    32fa:	str	r3, [sp, #4]
    32fc:	mov.w	r8, r7, lsl #3
    3300:	ldr	r6, [sp, #4]
    3302:	movs	r4, #0
    3304:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3308:	ldrb	r2, [r5, #24]
      return _background[x][y];
    330a:	add	r3, r4
    330c:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    330e:	cbnz	r2, 3314 <setup+0x1a7c>
      return _background[x][y];
    } else {
      return !_background[x][y];
    3310:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    3314:	cbnz	r3, 3330 <setup+0x1a98>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3316:	adds	r4, #1
    3318:	adds	r6, #4
    331a:	cmp	r4, #24
    331c:	bne.n	3304 <setup+0x1a6c>
    331e:	ldr	r3, [sp, #4]
    3320:	adds	r7, #24
    3322:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    3324:	cmp.w	r7, #576	; 0x240
    3328:	str	r3, [sp, #4]
    332a:	bne.n	32fc <setup+0x1a64>
    332c:	b.w	2b22 <setup+0x128a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3330:	ldr	r2, [r5, #20]
    3332:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3334:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3338:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    333a:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    333c:	adds	r0, #2
    333e:	ldr.w	fp, [r3, r4, lsl #3]
    3342:	bl	b7ac <random(unsigned long)>
    3346:	ldr	r3, [r5, #16]
    3348:	rsb	r3, r3, fp
    334c:	adds	r3, #1
    334e:	subs	r0, r3, r0
    3350:	str	r0, [r6, #0]
    3352:	b.n	3316 <setup+0x1a7e>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3354:	movw	sl, #4636	; 0x121c
    3358:	add.w	r3, r5, #28
    335c:	movs	r7, #0
    335e:	add.w	r9, r5, #4640	; 0x1220
    3362:	add	sl, r5
    3364:	str	r3, [sp, #4]
    3366:	mov.w	r8, r7, lsl #3
    336a:	ldr	r6, [sp, #4]
    336c:	movs	r4, #0
    336e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3372:	ldrb	r2, [r5, #24]
      return _background[x][y];
    3374:	add	r3, r4
    3376:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3378:	cbnz	r2, 337e <setup+0x1ae6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    337a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    337e:	cbnz	r3, 339a <setup+0x1b02>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3380:	adds	r4, #1
    3382:	adds	r6, #4
    3384:	cmp	r4, #24
    3386:	bne.n	336e <setup+0x1ad6>
    3388:	ldr	r3, [sp, #4]
    338a:	adds	r7, #24
    338c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    338e:	cmp.w	r7, #576	; 0x240
    3392:	str	r3, [sp, #4]
    3394:	bne.n	3366 <setup+0x1ace>
    3396:	b.w	28e2 <setup+0x104a>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    339a:	ldr	r2, [r5, #20]
    339c:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    339e:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    33a2:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    33a4:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    33a6:	adds	r0, #2
    33a8:	ldr.w	fp, [r3, r4, lsl #3]
    33ac:	bl	b7ac <random(unsigned long)>
    33b0:	ldr	r3, [r5, #16]
    33b2:	rsb	r3, r3, fp
    33b6:	adds	r3, #1
    33b8:	subs	r0, r3, r0
    33ba:	str	r0, [r6, #0]
    33bc:	b.n	3380 <setup+0x1ae8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    33be:	movw	sl, #4636	; 0x121c
    33c2:	add.w	r3, r5, #28
    33c6:	movs	r7, #0
    33c8:	add.w	r9, r5, #4640	; 0x1220
    33cc:	add	sl, r5
    33ce:	str	r3, [sp, #4]
    33d0:	mov.w	r8, r7, lsl #3
    33d4:	ldr	r6, [sp, #4]
    33d6:	movs	r4, #0
    33d8:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    33dc:	ldrb	r2, [r5, #24]
      return _background[x][y];
    33de:	add	r3, r4
    33e0:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    33e2:	cbnz	r2, 33e8 <setup+0x1b50>
      return _background[x][y];
    } else {
      return !_background[x][y];
    33e4:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    33e8:	cbnz	r3, 3404 <setup+0x1b6c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    33ea:	adds	r4, #1
    33ec:	adds	r6, #4
    33ee:	cmp	r4, #24
    33f0:	bne.n	33d8 <setup+0x1b40>
    33f2:	ldr	r3, [sp, #4]
    33f4:	adds	r7, #24
    33f6:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    33f8:	cmp.w	r7, #576	; 0x240
    33fc:	str	r3, [sp, #4]
    33fe:	bne.n	33d0 <setup+0x1b38>
    3400:	b.w	248e <setup+0xbf6>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3404:	ldr	r2, [r5, #20]
    3406:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3408:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    340c:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    340e:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3410:	adds	r0, #2
    3412:	ldr.w	fp, [r3, r4, lsl #3]
    3416:	bl	b7ac <random(unsigned long)>
    341a:	ldr	r3, [r5, #16]
    341c:	rsb	r3, r3, fp
    3420:	adds	r3, #1
    3422:	subs	r0, r3, r0
    3424:	str	r0, [r6, #0]
    3426:	b.n	33ea <setup+0x1b52>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3428:	movw	sl, #4636	; 0x121c
    342c:	add.w	r3, r5, #28
    3430:	movs	r7, #0
    3432:	add.w	r9, r5, #4640	; 0x1220
    3436:	add	sl, r5
    3438:	str	r3, [sp, #4]
    343a:	mov.w	r8, r7, lsl #3
    343e:	ldr	r6, [sp, #4]
    3440:	movs	r4, #0
    3442:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    3446:	ldrb	r2, [r5, #24]
      return _background[x][y];
    3448:	add	r3, r4
    344a:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    344c:	cbnz	r2, 3452 <setup+0x1bba>
      return _background[x][y];
    } else {
      return !_background[x][y];
    344e:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    3452:	cbnz	r3, 346e <setup+0x1bd6>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    3454:	adds	r4, #1
    3456:	adds	r6, #4
    3458:	cmp	r4, #24
    345a:	bne.n	3442 <setup+0x1baa>
    345c:	ldr	r3, [sp, #4]
    345e:	adds	r7, #24
    3460:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    3462:	cmp.w	r7, #576	; 0x240
    3466:	str	r3, [sp, #4]
    3468:	bne.n	343a <setup+0x1ba2>
    346a:	b.w	2114 <setup+0x87c>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    346e:	ldr	r2, [r5, #20]
    3470:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3472:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    3476:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    3478:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    347a:	adds	r0, #2
    347c:	ldr.w	fp, [r3, r4, lsl #3]
    3480:	bl	b7ac <random(unsigned long)>
    3484:	ldr	r3, [r5, #16]
    3486:	rsb	r3, r3, fp
    348a:	adds	r3, #1
    348c:	subs	r0, r3, r0
    348e:	str	r0, [r6, #0]
    3490:	b.n	3454 <setup+0x1bbc>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    3492:	bl	bea8 <sqrt>
    3496:	vmov.f64	d7, d0
    349a:	b.w	1bd4 <setup+0x33c>
    349e:	bl	bea8 <sqrt>
    34a2:	vmov.f64	d7, d0
    34a6:	b.n	2cf4 <setup+0x145c>
    34a8:	bl	bea8 <sqrt>
    34ac:	vmov.f64	d7, d0
    34b0:	b.w	29ee <setup+0x1156>
    34b4:	bl	bea8 <sqrt>
    34b8:	vmov.f64	d7, d0
    34bc:	b.w	274c <setup+0xeb4>
    34c0:	bl	bea8 <sqrt>
    34c4:	vmov.f64	d7, d0
    34c8:	b.w	2584 <setup+0xcec>
    34cc:	bl	bea8 <sqrt>
    34d0:	vmov.f64	d7, d0
    34d4:	b.w	2358 <setup+0xac0>
    34d8:	bl	bea8 <sqrt>
    34dc:	vmov.f64	d7, d0
    34e0:	b.w	1fe0 <setup+0x748>
    34e4:	bl	bea8 <sqrt>
    34e8:	vmov.f64	d7, d0
    34ec:	b.w	1d34 <setup+0x49c>

000034f0 <_GLOBAL__sub_I_bri_level>:

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt();
}
    34f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    34f4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    34f8:	ldr	r5, [pc, #972]	; (38c8 <_GLOBAL__sub_I_bri_level+0x3d8>)
    34fa:	movs	r2, #120	; 0x78
      _s = s;
    34fc:	mov.w	lr, #241	; 0xf1
    3500:	strb	r1, [r5, #4]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3502:	movs	r3, #194	; 0xc2
      _s = s;
    3504:	strb	r1, [r5, #12]
    3506:	movs	r6, #204	; 0xcc
    3508:	strb	r1, [r5, #20]
      _b = b;
    350a:	mov.w	fp, #225	; 0xe1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    350e:	strb	r1, [r5, #28]
    3510:	movs	r7, #105	; 0x69
    3512:	strb.w	r1, [r5, #68]	; 0x44
      _b = b;
    3516:	mov.w	ip, #245	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    351a:	strb.w	r1, [r5, #76]	; 0x4c
    351e:	mov.w	r8, #192	; 0xc0
    3522:	strb.w	r1, [r5, #84]	; 0x54
      _b = b;
    3526:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    352a:	str	r2, [r5, #0]
      _s = s;
    352c:	mov.w	sl, #11
      _b = b;
    3530:	strb	r1, [r5, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3532:	movw	r1, #261	; 0x105
    3536:	str	r2, [r5, #8]
      _s = s;
    3538:	mov.w	r9, #106	; 0x6a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    353c:	str	r1, [r5, #32]
    353e:	sub	sp, #20
    3540:	str	r1, [r5, #40]	; 0x28
    3542:	str	r1, [r5, #56]	; 0x38
      _s = s;
    3544:	mvn.w	r1, #103	; 0x67
      _b = b;
    3548:	strb	r2, [r5, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    354a:	strb.w	r1, [r5, #36]	; 0x24
    354e:	strb.w	r1, [r5, #44]	; 0x2c
    3552:	strb.w	r1, [r5, #60]	; 0x3c
      _b = b;
    3556:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    355a:	str	r2, [r5, #16]
      _s = s;
      _b = b;
    355c:	strb.w	r1, [r5, #37]	; 0x25
    3560:	strb.w	r1, [r5, #45]	; 0x2d
    3564:	strb.w	r1, [r5, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3568:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    356c:	strb	r2, [r5, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    356e:	str	r1, [r5, #48]	; 0x30
      _s = s;
    3570:	mvn.w	r1, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3574:	str	r2, [r5, #24]
      _s = s;
    3576:	strb.w	r1, [r5, #52]	; 0x34
      _b = b;
    357a:	mov.w	r1, #112	; 0x70
    357e:	strb	r2, [r5, #29]
    3580:	strb.w	r1, [r5, #53]	; 0x35
    3584:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3588:	str	r2, [r5, #64]	; 0x40
    358a:	str	r2, [r5, #72]	; 0x48
    358c:	str	r2, [r5, #80]	; 0x50
      _s = s;
      _b = b;
    358e:	strb.w	r1, [r5, #69]	; 0x45
    3592:	strb.w	r1, [r5, #77]	; 0x4d
    3596:	strb.w	r1, [r5, #85]	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    359a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    359e:	str	r2, [r5, #88]	; 0x58
      _s = s;
    35a0:	strb.w	r1, [r5, #92]	; 0x5c
      _b = b;
    35a4:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35a8:	str	r2, [r5, #96]	; 0x60
      _s = s;
      _b = b;
    35aa:	strb.w	r1, [r5, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    35ae:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35b2:	str	r2, [r5, #104]	; 0x68
      _s = s;
    35b4:	strb.w	r1, [r5, #100]	; 0x64
      _b = b;
    35b8:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35bc:	str	r2, [r5, #112]	; 0x70
      _s = s;
      _b = b;
    35be:	strb.w	r1, [r5, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    35c2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35c6:	str	r2, [r5, #120]	; 0x78
      _s = s;
    35c8:	strb.w	r1, [r5, #108]	; 0x6c
      _b = b;
    35cc:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35d0:	str.w	r2, [r5, #128]	; 0x80
      _s = s;
      _b = b;
    35d4:	strb.w	r1, [r5, #109]	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    35d8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35dc:	str.w	r2, [r5, #136]	; 0x88
      _s = s;
    35e0:	strb.w	r1, [r5, #116]	; 0x74
      _b = b;
    35e4:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35e8:	str.w	r2, [r5, #144]	; 0x90
      _s = s;
      _b = b;
    35ec:	strb.w	r1, [r5, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    35f0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    35f4:	str.w	r2, [r5, #152]	; 0x98
      _s = s;
    35f8:	strb.w	r1, [r5, #124]	; 0x7c
      _b = b;
    35fc:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3600:	str.w	r2, [r5, #160]	; 0xa0
      _s = s;
      _b = b;
    3604:	strb.w	r1, [r5, #125]	; 0x7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3608:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    360c:	str.w	r2, [r5, #168]	; 0xa8
      _s = s;
    3610:	strb.w	r1, [r5, #132]	; 0x84
      _b = b;
    3614:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3618:	ldr	r4, [pc, #688]	; (38cc <_GLOBAL__sub_I_bri_level+0x3dc>)
      _s = s;
      _b = b;
    361a:	strb.w	r1, [r5, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    361e:	mov.w	r1, #4294967295
    3622:	strb.w	r1, [r5, #140]	; 0x8c
      _b = b;
    3626:	mov.w	r1, #1
    362a:	strb.w	r1, [r5, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    362e:	mov.w	r1, #4294967295
    3632:	strb.w	r1, [r5, #148]	; 0x94
      _b = b;
    3636:	mov.w	r1, #1
    363a:	strb.w	r1, [r5, #149]	; 0x95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    363e:	mov.w	r1, #4294967295
    3642:	strb.w	r1, [r5, #156]	; 0x9c
      _b = b;
    3646:	mov.w	r1, #1
    364a:	strb.w	r1, [r5, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    364e:	mov.w	r1, #4294967295
    3652:	strb.w	r1, [r5, #164]	; 0xa4
      _b = b;
    3656:	mov.w	r1, #1
    365a:	strb.w	r1, [r5, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    365e:	mov.w	r1, #4294967295
    3662:	strb.w	r1, [r5, #172]	; 0xac
      _b = b;
    3666:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    366a:	str.w	r2, [r5, #176]	; 0xb0
      _s = s;
      _b = b;
    366e:	strb.w	r1, [r5, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3672:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3676:	str.w	r2, [r5, #184]	; 0xb8
      _s = s;
    367a:	strb.w	r1, [r5, #180]	; 0xb4
      _b = b;
    367e:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3682:	str.w	r2, [r5, #192]	; 0xc0
      _s = s;
      _b = b;
    3686:	strb.w	r1, [r5, #181]	; 0xb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    368a:	mov.w	r1, #4294967295
    368e:	strb.w	r7, [r5, #204]	; 0xcc
    3692:	strb.w	r1, [r5, #188]	; 0xbc
      _b = b;
    3696:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    369a:	strb.w	r7, [r5, #236]	; 0xec
      _b = b;
    369e:	strb.w	r1, [r5, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    36a2:	mov.w	r1, #4294967295
    36a6:	strb.w	sl, [r5, #212]	; 0xd4
    36aa:	strb.w	r1, [r5, #196]	; 0xc4
      _b = b;
    36ae:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    36b2:	strb.w	sl, [r5, #220]	; 0xdc
      _b = b;
    36b6:	strb.w	r1, [r5, #197]	; 0xc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    36ba:	movs	r1, #223	; 0xdf
    36bc:	str.w	r3, [r5, #224]	; 0xe0
    36c0:	str.w	r1, [r5, #200]	; 0xc8
    36c4:	str.w	r1, [r5, #232]	; 0xe8
      _s = s;
      _b = b;
    36c8:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    36cc:	strb.w	r6, [r5, #228]	; 0xe4
      _b = b;
    36d0:	strb.w	r1, [r5, #205]	; 0xcd
    36d4:	strb.w	r1, [r5, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    36d8:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    36da:	strb.w	r3, [r5, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    36de:	str.w	r1, [r5, #208]	; 0xd0
    36e2:	str.w	r1, [r5, #216]	; 0xd8
      _s = s;
      _b = b;
    36e6:	mvn.w	r1, #24
    36ea:	strb.w	ip, [r5, #253]	; 0xfd
    36ee:	strb.w	r1, [r5, #213]	; 0xd5
    36f2:	strb.w	r1, [r5, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    36f6:	movw	r1, #359	; 0x167
      _s = s;
    36fa:	strb.w	lr, [r5, #244]	; 0xf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    36fe:	str.w	r1, [r5, #240]	; 0xf0
    3702:	movs	r1, #5
      _s = s;
    3704:	strb.w	r8, [r5, #252]	; 0xfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3708:	str.w	r1, [r5, #248]	; 0xf8
    370c:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    3710:	strb.w	fp, [r5, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3714:	str.w	r1, [r5, #256]	; 0x100
    3718:	movs	r1, #186	; 0xba
      _s = s;
    371a:	strb.w	r9, [r5, #260]	; 0x104
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    371e:	mov	r0, r1
    3720:	str.w	r1, [r5, #264]	; 0x108
      _s = s;
      _b = b;
    3724:	mvn.w	r1, #24
    3728:	strb.w	r6, [r5, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    372c:	strb.w	sl, [r5, #268]	; 0x10c
      _b = b;
    3730:	strb.w	r1, [r5, #269]	; 0x10d
    3734:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3738:	str.w	r0, [r5, #272]	; 0x110
      _s = s;
      _b = b;
    373c:	strb.w	r1, [r5, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3740:	movs	r1, #223	; 0xdf
      _s = s;
    3742:	strb.w	sl, [r5, #276]	; 0x114
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3746:	str.w	r1, [r5, #280]	; 0x118
      _s = s;
      _b = b;
    374a:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    374e:	strb.w	r7, [r5, #284]	; 0x11c
      _b = b;
    3752:	strb.w	r1, [r5, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3756:	movw	r1, #287	; 0x11f
      _s = s;
    375a:	strb.w	r9, [r5, #292]	; 0x124
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    375e:	str.w	r1, [r5, #288]	; 0x120
      _s = s;
    3762:	mov.w	r1, #4294967295
      _b = b;
    3766:	strb.w	r6, [r5, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    376a:	strb.w	r1, [r5, #300]	; 0x12c
      _b = b;
    376e:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3772:	str.w	r2, [r5, #296]	; 0x128
      _s = s;
      _b = b;
    3776:	strb.w	r1, [r5, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    377a:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    377e:	str.w	r2, [r5, #304]	; 0x130
      _s = s;
    3782:	strb.w	r1, [r5, #308]	; 0x134
      _b = b;
    3786:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    378a:	str.w	r2, [r5, #312]	; 0x138
      _s = s;
      _b = b;
    378e:	strb.w	r1, [r5, #309]	; 0x135
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3792:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3796:	str.w	r2, [r5, #320]	; 0x140
      _s = s;
    379a:	strb.w	r1, [r5, #316]	; 0x13c
      _b = b;
    379e:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    37a2:	str.w	r2, [r5, #328]	; 0x148
      _s = s;
      _b = b;
    37a6:	strb.w	r1, [r5, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    37aa:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    37ae:	str.w	r2, [r5, #336]	; 0x150
      _s = s;
    37b2:	strb.w	r1, [r5, #324]	; 0x144
      _b = b;
    37b6:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    37ba:	str.w	r2, [r5, #344]	; 0x158
      _s = s;
      _b = b;
    37be:	strb.w	r1, [r5, #325]	; 0x145
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    37c2:	mov.w	r1, #4294967295
    37c6:	strb.w	r1, [r5, #332]	; 0x14c
      _b = b;
    37ca:	mov.w	r1, #1
    37ce:	strb.w	r1, [r5, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    37d2:	mov.w	r1, #4294967295
    37d6:	strb.w	r1, [r5, #340]	; 0x154
      _b = b;
    37da:	mov.w	r1, #1
    37de:	strb.w	r1, [r5, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    37e2:	mov.w	r1, #4294967295
    37e6:	strb.w	r1, [r5, #348]	; 0x15c
      _b = b;
    37ea:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    37ee:	str.w	r2, [r5, #352]	; 0x160
      _s = s;
      _b = b;
    37f2:	strb.w	r1, [r5, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    37f6:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    37fa:	str.w	r2, [r5, #360]	; 0x168
      _s = s;
    37fe:	strb.w	r1, [r5, #356]	; 0x164
      _b = b;
    3802:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3806:	str.w	r2, [r5, #368]	; 0x170
      _s = s;
      _b = b;
    380a:	strb.w	r1, [r5, #357]	; 0x165
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    380e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3812:	str.w	r2, [r5, #376]	; 0x178
      _s = s;
    3816:	strb.w	r1, [r5, #364]	; 0x16c
      _b = b;
    381a:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    381e:	strb.w	r7, [r5, #388]	; 0x184
      _b = b;
    3822:	strb.w	r1, [r5, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3826:	mov.w	r1, #4294967295
    382a:	strb.w	sl, [r5, #396]	; 0x18c
    382e:	strb.w	r1, [r5, #372]	; 0x174
      _b = b;
    3832:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3836:	strb.w	sl, [r5, #404]	; 0x194
      _b = b;
    383a:	strb.w	r1, [r5, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    383e:	mov.w	r1, #4294967295
    3842:	strb.w	sl, [r5, #412]	; 0x19c
    3846:	strb.w	r1, [r5, #380]	; 0x17c
      _b = b;
    384a:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    384e:	strb.w	r7, [r5, #420]	; 0x1a4
      _b = b;
    3852:	strb.w	r1, [r5, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3856:	movs	r1, #223	; 0xdf
    3858:	str.w	r1, [r5, #384]	; 0x180
      _s = s;
      _b = b;
    385c:	mvn.w	r1, #33	; 0x21
    3860:	strb.w	r1, [r5, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3864:	movs	r1, #186	; 0xba
    3866:	mov	r0, r1
    3868:	str.w	r1, [r5, #392]	; 0x188
      _s = s;
      _b = b;
    386c:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3870:	str.w	r0, [r5, #400]	; 0x190
      _s = s;
      _b = b;
    3874:	strb.w	r1, [r5, #397]	; 0x18d
    3878:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    387c:	str.w	r0, [r5, #408]	; 0x198
      _s = s;
      _b = b;
    3880:	strb.w	r1, [r5, #405]	; 0x195
    3884:	mvn.w	r1, #24
    3888:	strb.w	r1, [r5, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    388c:	movs	r1, #223	; 0xdf
    388e:	str.w	r1, [r5, #416]	; 0x1a0
      _s = s;
      _b = b;
    3892:	mvn.w	r1, #33	; 0x21
    3896:	strb.w	r1, [r5, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    389a:	movw	r1, #261	; 0x105
    389e:	str.w	r1, [r5, #424]	; 0x1a8
      _s = s;
    38a2:	mvn.w	r1, #103	; 0x67
    38a6:	strb.w	r1, [r5, #428]	; 0x1ac
      _b = b;
    38aa:	mov.w	r1, #104	; 0x68
    38ae:	strb.w	r1, [r5, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38b2:	movw	r1, #359	; 0x167
    38b6:	str.w	r1, [r5, #432]	; 0x1b0
    38ba:	movw	r1, #343	; 0x157
      _s = s;
    38be:	strb.w	lr, [r5, #436]	; 0x1b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38c2:	mov	r0, r1
    38c4:	b.n	38d0 <_GLOBAL__sub_I_bri_level+0x3e0>
    38c6:	nop
    38c8:	.word	0x20009c0c
    38cc:	.word	0x20003bd8
    38d0:	str.w	r1, [r5, #440]	; 0x1b8
      _s = s;
    38d4:	mvn.w	r1, #41	; 0x29
      _b = b;
    38d8:	strb.w	r3, [r5, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    38dc:	str.w	r0, [r5, #448]	; 0x1c0
      _s = s;
    38e0:	strb.w	r1, [r5, #444]	; 0x1bc
      _b = b;
    38e4:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    38e8:	strb.w	r8, [r5, #460]	; 0x1cc
      _b = b;
    38ec:	strb.w	r1, [r5, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    38f0:	mvn.w	r1, #41	; 0x29
      _b = b;
    38f4:	strb.w	ip, [r5, #461]	; 0x1cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    38f8:	strb.w	r1, [r5, #452]	; 0x1c4
      _b = b;
    38fc:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3900:	strb.w	r9, [r5, #468]	; 0x1d4
      _b = b;
    3904:	strb.w	r1, [r5, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3908:	movs	r1, #5
      _s = s;
      _b = b;
    390a:	strb.w	r6, [r5, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    390e:	str.w	r1, [r5, #456]	; 0x1c8
    3912:	movw	r1, #287	; 0x11f
      _s = s;
    3916:	strb.w	sl, [r5, #476]	; 0x1dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    391a:	str.w	r1, [r5, #464]	; 0x1d0
    391e:	movs	r1, #186	; 0xba
      _s = s;
    3920:	strb.w	sl, [r5, #484]	; 0x1e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3924:	mov	r0, r1
    3926:	str.w	r1, [r5, #472]	; 0x1d8
      _s = s;
      _b = b;
    392a:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    392e:	strb.w	r8, [r5, #492]	; 0x1ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3932:	str.w	r0, [r5, #480]	; 0x1e0
      _s = s;
      _b = b;
    3936:	strb.w	r1, [r5, #477]	; 0x1dd
    393a:	mvn.w	r1, #24
    393e:	strb.w	ip, [r5, #493]	; 0x1ed
    3942:	strb.w	r1, [r5, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3946:	movs	r1, #5
      _s = s;
    3948:	strb.w	r8, [r5, #500]	; 0x1f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    394c:	str.w	r1, [r5, #488]	; 0x1e8
    3950:	str.w	r1, [r5, #496]	; 0x1f0
    3954:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    3958:	strb.w	ip, [r5, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    395c:	str.w	r1, [r5, #504]	; 0x1f8
      _s = s;
    3960:	mvn.w	r1, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3964:	str.w	r2, [r5, #512]	; 0x200
      _s = s;
    3968:	strb.w	r1, [r5, #508]	; 0x1fc
      _b = b;
    396c:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3970:	str.w	r2, [r5, #520]	; 0x208
      _s = s;
      _b = b;
    3974:	strb.w	r1, [r5, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3978:	mov.w	r1, #4294967295
    397c:	strb.w	r1, [r5, #516]	; 0x204
      _b = b;
    3980:	mov.w	r1, #1
    3984:	strb.w	r1, [r5, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3988:	mov.w	r1, #4294967295
    398c:	strb.w	r1, [r5, #524]	; 0x20c
      _b = b;
    3990:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3994:	str.w	r2, [r5, #528]	; 0x210
      _s = s;
      _b = b;
    3998:	strb.w	r1, [r5, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    399c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39a0:	str.w	r2, [r5, #536]	; 0x218
      _s = s;
    39a4:	strb.w	r1, [r5, #532]	; 0x214
      _b = b;
    39a8:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39ac:	str.w	r2, [r5, #544]	; 0x220
      _s = s;
      _b = b;
    39b0:	strb.w	r1, [r5, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39b4:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39b8:	str.w	r2, [r5, #552]	; 0x228
      _s = s;
    39bc:	strb.w	r1, [r5, #540]	; 0x21c
      _b = b;
    39c0:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39c4:	str.w	r2, [r5, #560]	; 0x230
      _s = s;
      _b = b;
    39c8:	strb.w	r1, [r5, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39cc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    39d0:	str.w	r2, [r5, #568]	; 0x238
      _s = s;
    39d4:	strb.w	r1, [r5, #548]	; 0x224
      _b = b;
    39d8:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39dc:	strb.w	r7, [r5, #580]	; 0x244
      _b = b;
    39e0:	strb.w	r1, [r5, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39e4:	mov.w	r1, #4294967295
    39e8:	strb.w	sl, [r5, #588]	; 0x24c
    39ec:	strb.w	r1, [r5, #556]	; 0x22c
      _b = b;
    39f0:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39f4:	strb.w	sl, [r5, #596]	; 0x254
      _b = b;
    39f8:	strb.w	r1, [r5, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    39fc:	mov.w	r1, #4294967295
    3a00:	strb.w	r7, [r5, #604]	; 0x25c
    3a04:	strb.w	r1, [r5, #564]	; 0x234
      _b = b;
    3a08:	mov.w	r1, #1
    3a0c:	strb.w	r1, [r5, #565]	; 0x235
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a10:	mov.w	r1, #4294967295
    3a14:	strb.w	r1, [r5, #572]	; 0x23c
      _b = b;
    3a18:	mov.w	r1, #0
    3a1c:	strb.w	r1, [r5, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a20:	movs	r1, #223	; 0xdf
    3a22:	str.w	r1, [r5, #576]	; 0x240
      _s = s;
      _b = b;
    3a26:	mvn.w	r1, #33	; 0x21
    3a2a:	strb.w	r1, [r5, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a2e:	movs	r1, #186	; 0xba
    3a30:	mov	r0, r1
    3a32:	str.w	r1, [r5, #584]	; 0x248
      _s = s;
      _b = b;
    3a36:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a3a:	str.w	r0, [r5, #592]	; 0x250
      _s = s;
      _b = b;
    3a3e:	strb.w	r1, [r5, #589]	; 0x24d
    3a42:	mvn.w	r1, #24
    3a46:	strb.w	r1, [r5, #597]	; 0x255
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a4a:	movs	r1, #223	; 0xdf
    3a4c:	mov	r0, r1
    3a4e:	str.w	r1, [r5, #600]	; 0x258
      _s = s;
      _b = b;
    3a52:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a56:	str.w	r0, [r5, #608]	; 0x260
      _s = s;
      _b = b;
    3a5a:	strb.w	r1, [r5, #605]	; 0x25d
    3a5e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a62:	strb.w	r7, [r5, #612]	; 0x264
      _b = b;
    3a66:	strb.w	r1, [r5, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a6a:	movw	r1, #261	; 0x105
      _s = s;
    3a6e:	strb.w	r7, [r5, #636]	; 0x27c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a72:	str.w	r1, [r5, #616]	; 0x268
      _s = s;
    3a76:	mvn.w	r1, #103	; 0x67
    3a7a:	strb.w	r7, [r5, #644]	; 0x284
    3a7e:	strb.w	r1, [r5, #620]	; 0x26c
      _b = b;
    3a82:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a86:	strb.w	r9, [r5, #652]	; 0x28c
      _b = b;
    3a8a:	strb.w	r1, [r5, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a8e:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    3a90:	strb.w	r6, [r5, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3a94:	str.w	r1, [r5, #624]	; 0x270
      _s = s;
      _b = b;
    3a98:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3a9c:	strb.w	lr, [r5, #660]	; 0x294
      _b = b;
    3aa0:	strb.w	r1, [r5, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3aa4:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    3aa6:	strb.w	r3, [r5, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3aaa:	mov	r0, r1
    3aac:	str.w	r1, [r5, #632]	; 0x278
      _s = s;
      _b = b;
    3ab0:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ab4:	strb.w	r9, [r5, #668]	; 0x29c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ab8:	str.w	r0, [r5, #640]	; 0x280
      _s = s;
      _b = b;
    3abc:	strb.w	r1, [r5, #637]	; 0x27d
    3ac0:	mvn.w	r1, #33	; 0x21
    3ac4:	strb.w	r6, [r5, #669]	; 0x29d
    3ac8:	strb.w	r1, [r5, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3acc:	movw	r1, #287	; 0x11f
      _s = s;
    3ad0:	strb.w	sl, [r5, #676]	; 0x2a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ad4:	str.w	r1, [r5, #648]	; 0x288
    3ad8:	movw	r1, #359	; 0x167
      _s = s;
    3adc:	strb.w	sl, [r5, #684]	; 0x2ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ae0:	str.w	r1, [r5, #656]	; 0x290
    3ae4:	movw	r1, #287	; 0x11f
      _s = s;
    3ae8:	strb.w	r8, [r5, #692]	; 0x2b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3aec:	str.w	r1, [r5, #664]	; 0x298
    3af0:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    3af2:	strb.w	ip, [r5, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3af6:	mov	r0, r1
    3af8:	str.w	r1, [r5, #672]	; 0x2a0
      _s = s;
      _b = b;
    3afc:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b00:	strb.w	r8, [r5, #700]	; 0x2bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b04:	str.w	r0, [r5, #680]	; 0x2a8
      _s = s;
      _b = b;
    3b08:	strb.w	r1, [r5, #677]	; 0x2a5
    3b0c:	mvn.w	r1, #24
    3b10:	strb.w	r1, [r5, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b14:	movs	r1, #5
    3b16:	mov	r0, r1
    3b18:	str.w	r1, [r5, #688]	; 0x2b0
    3b1c:	str.w	r1, [r5, #696]	; 0x2b8
      _s = s;
    3b20:	mvn.w	r1, #65	; 0x41
    3b24:	strb.w	r1, [r5, #628]	; 0x274
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b28:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    3b2c:	strb.w	ip, [r5, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b30:	str.w	r1, [r5, #712]	; 0x2c8
      _s = s;
    3b34:	mvn.w	r1, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b38:	str.w	r0, [r5, #704]	; 0x2c0
      _s = s;
    3b3c:	strb.w	r1, [r5, #716]	; 0x2cc
      _b = b;
    3b40:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b44:	strb.w	r8, [r5, #708]	; 0x2c4
      _b = b;
    3b48:	strb.w	r1, [r5, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b4c:	mov.w	r1, #4294967295
      _b = b;
    3b50:	strb.w	ip, [r5, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b54:	strb.w	r1, [r5, #724]	; 0x2d4
      _b = b;
    3b58:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b5c:	str.w	r2, [r5, #720]	; 0x2d0
      _s = s;
      _b = b;
    3b60:	strb.w	r1, [r5, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b64:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b68:	str.w	r2, [r5, #728]	; 0x2d8
      _s = s;
    3b6c:	strb.w	r1, [r5, #732]	; 0x2dc
      _b = b;
    3b70:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b74:	str.w	r2, [r5, #736]	; 0x2e0
      _s = s;
      _b = b;
    3b78:	strb.w	r1, [r5, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b7c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b80:	str.w	r2, [r5, #744]	; 0x2e8
      _s = s;
    3b84:	strb.w	r1, [r5, #740]	; 0x2e4
      _b = b;
    3b88:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b8c:	str.w	r2, [r5, #752]	; 0x2f0
      _s = s;
      _b = b;
    3b90:	strb.w	r1, [r5, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3b94:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3b98:	str.w	r2, [r5, #760]	; 0x2f8
      _s = s;
    3b9c:	strb.w	r1, [r5, #748]	; 0x2ec
      _b = b;
    3ba0:	mov.w	r1, #1
    3ba4:	strb.w	r1, [r5, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ba8:	mov.w	r1, #4294967295
    3bac:	strb.w	r1, [r5, #756]	; 0x2f4
      _b = b;
    3bb0:	mov.w	r1, #1
    3bb4:	strb.w	r1, [r5, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3bb8:	mov.w	r1, #4294967295
    3bbc:	strb.w	r1, [r5, #764]	; 0x2fc
      _b = b;
    3bc0:	mov.w	r1, #0
    3bc4:	strb.w	r1, [r5, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bc8:	movw	r1, #261	; 0x105
    3bcc:	str.w	r1, [r5, #768]	; 0x300
      _s = s;
    3bd0:	mvn.w	r1, #103	; 0x67
    3bd4:	strb.w	r1, [r5, #772]	; 0x304
      _b = b;
    3bd8:	mov.w	r1, #104	; 0x68
    3bdc:	strb.w	r1, [r5, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3be0:	movs	r1, #231	; 0xe7
    3be2:	str.w	r1, [r5, #776]	; 0x308
      _s = s;
    3be6:	mvn.w	r1, #65	; 0x41
    3bea:	strb.w	r1, [r5, #780]	; 0x30c
      _b = b;
    3bee:	mvn.w	r1, #62	; 0x3e
    3bf2:	strb.w	r1, [r5, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3bf6:	movs	r1, #223	; 0xdf
    3bf8:	str.w	r1, [r5, #784]	; 0x310
      _s = s;
      _b = b;
    3bfc:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c00:	strb.w	r7, [r5, #788]	; 0x314
      _b = b;
    3c04:	strb.w	r1, [r5, #789]	; 0x315
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c08:	movw	r1, #261	; 0x105
    3c0c:	str.w	r3, [r5, #792]	; 0x318
    3c10:	str.w	r1, [r5, #800]	; 0x320
      _s = s;
    3c14:	mvn.w	r1, #103	; 0x67
    3c18:	strb.w	r6, [r5, #796]	; 0x31c
    3c1c:	strb.w	r1, [r5, #804]	; 0x324
      _b = b;
    3c20:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c24:	strb.w	r7, [r5, #812]	; 0x32c
      _b = b;
    3c28:	strb.w	r1, [r5, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c2c:	movs	r1, #223	; 0xdf
      _s = s;
    3c2e:	strb.w	r7, [r5, #820]	; 0x334
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c32:	mov	r0, r1
    3c34:	str.w	r1, [r5, #808]	; 0x328
      _s = s;
      _b = b;
    3c38:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c3c:	strb.w	sl, [r5, #828]	; 0x33c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c40:	str.w	r0, [r5, #816]	; 0x330
      _s = s;
      _b = b;
    3c44:	strb.w	r1, [r5, #813]	; 0x32d
    3c48:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c4c:	strb.w	sl, [r5, #836]	; 0x344
      _b = b;
    3c50:	strb.w	r1, [r5, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c54:	movs	r1, #186	; 0xba
      _s = s;
    3c56:	strb.w	r7, [r5, #844]	; 0x34c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c5a:	mov	r0, r1
    3c5c:	str.w	r1, [r5, #824]	; 0x338
      _s = s;
      _b = b;
    3c60:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c64:	strb.w	r7, [r5, #852]	; 0x354
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c68:	str.w	r0, [r5, #832]	; 0x340
      _s = s;
      _b = b;
    3c6c:	strb.w	r1, [r5, #829]	; 0x33d
    3c70:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c74:	strb.w	r8, [r5, #860]	; 0x35c
      _b = b;
    3c78:	strb.w	r1, [r5, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c7c:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    3c7e:	strb.w	ip, [r5, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c82:	mov	r0, r1
    3c84:	str.w	r1, [r5, #840]	; 0x348
      _s = s;
      _b = b;
    3c88:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3c8c:	strb.w	sl, [r5, #868]	; 0x364
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3c90:	str.w	r0, [r5, #848]	; 0x350
      _s = s;
      _b = b;
    3c94:	strb.w	r1, [r5, #845]	; 0x34d
    3c98:	mvn.w	r1, #33	; 0x21
    3c9c:	strb.w	fp, [r5, #797]	; 0x31d
    3ca0:	strb.w	r1, [r5, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ca4:	movs	r1, #5
    3ca6:	str.w	r1, [r5, #856]	; 0x358
    3caa:	movs	r1, #186	; 0xba
    3cac:	mov	r0, r1
    3cae:	str.w	r1, [r5, #864]	; 0x360
      _s = s;
      _b = b;
    3cb2:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cb6:	str.w	r0, [r5, #872]	; 0x368
      _s = s;
      _b = b;
    3cba:	strb.w	r1, [r5, #869]	; 0x365
    3cbe:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3cc2:	strb.w	sl, [r5, #876]	; 0x36c
      _b = b;
    3cc6:	strb.w	r1, [r5, #877]	; 0x36d
    3cca:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cce:	str.w	r0, [r5, #880]	; 0x370
      _s = s;
      _b = b;
    3cd2:	strb.w	r1, [r5, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cd6:	movs	r1, #5
      _s = s;
    3cd8:	strb.w	sl, [r5, #884]	; 0x374
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cdc:	str.w	r1, [r5, #888]	; 0x378
    3ce0:	movw	r1, #287	; 0x11f
      _s = s;
    3ce4:	strb.w	r8, [r5, #892]	; 0x37c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ce8:	str.w	r1, [r5, #896]	; 0x380
    3cec:	str.w	r1, [r5, #904]	; 0x388
    3cf0:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    3cf4:	strb.w	ip, [r5, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3cf8:	str.w	r1, [r5, #912]	; 0x390
    3cfc:	movw	r1, #343	; 0x157
      _s = s;
    3d00:	strb.w	r9, [r5, #900]	; 0x384
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d04:	str.w	r1, [r5, #920]	; 0x398
      _s = s;
    3d08:	mvn.w	r1, #41	; 0x29
      _b = b;
    3d0c:	strb.w	r6, [r5, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d10:	strb.w	r1, [r5, #924]	; 0x39c
      _b = b;
    3d14:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d18:	strb.w	r9, [r5, #908]	; 0x38c
      _b = b;
    3d1c:	strb.w	r1, [r5, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d20:	mov.w	r1, #4294967295
      _b = b;
    3d24:	strb.w	r6, [r5, #909]	; 0x38d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d28:	strb.w	r1, [r5, #932]	; 0x3a4
      _b = b;
    3d2c:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d30:	strb.w	lr, [r5, #916]	; 0x394
      _b = b;
    3d34:	strb.w	r1, [r5, #933]	; 0x3a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d38:	mov.w	r1, #4294967295
      _b = b;
    3d3c:	strb.w	r3, [r5, #917]	; 0x395
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d40:	strb.w	r1, [r5, #940]	; 0x3ac
      _b = b;
    3d44:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d48:	str.w	r2, [r5, #928]	; 0x3a0
      _s = s;
      _b = b;
    3d4c:	strb.w	r1, [r5, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d50:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d54:	str.w	r2, [r5, #936]	; 0x3a8
      _s = s;
    3d58:	strb.w	r1, [r5, #948]	; 0x3b4
      _b = b;
    3d5c:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d60:	str.w	r2, [r5, #944]	; 0x3b0
      _s = s;
      _b = b;
    3d64:	strb.w	r1, [r5, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3d68:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d6c:	str.w	r2, [r5, #952]	; 0x3b8
      _s = s;
    3d70:	strb.w	r1, [r5, #956]	; 0x3bc
      _b = b;
    3d74:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d78:	str.w	r3, [r5, #960]	; 0x3c0
      _s = s;
      _b = b;
    3d7c:	strb.w	r1, [r5, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d80:	movw	r1, #261	; 0x105
      _s = s;
    3d84:	strb.w	r6, [r5, #964]	; 0x3c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d88:	mov	r0, r1
    3d8a:	str.w	r1, [r5, #968]	; 0x3c8
      _s = s;
    3d8e:	mvn.w	r1, #103	; 0x67
    3d92:	strb.w	r7, [r5, #1004]	; 0x3ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3d96:	str.w	r0, [r5, #976]	; 0x3d0
      _s = s;
    3d9a:	strb.w	r1, [r5, #972]	; 0x3cc
      _b = b;
    3d9e:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3da2:	str.w	r0, [r5, #984]	; 0x3d8
      _s = s;
      _b = b;
    3da6:	strb.w	r1, [r5, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3daa:	mvn.w	r1, #103	; 0x67
    3dae:	strb.w	sl, [r5, #1012]	; 0x3f4
    3db2:	strb.w	r1, [r5, #980]	; 0x3d4
      _b = b;
    3db6:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3dba:	strb.w	sl, [r5, #1020]	; 0x3fc
      _b = b;
    3dbe:	strb.w	r1, [r5, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3dc2:	mvn.w	r1, #103	; 0x67
    3dc6:	strb.w	sl, [r5, #1028]	; 0x404
    3dca:	strb.w	r1, [r5, #988]	; 0x3dc
      _b = b;
    3dce:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3dd2:	strb.w	sl, [r5, #1036]	; 0x40c
      _b = b;
    3dd6:	strb.w	r1, [r5, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3dda:	movs	r1, #231	; 0xe7
    3ddc:	str.w	r3, [r5, #1040]	; 0x410
    3de0:	str.w	r1, [r5, #992]	; 0x3e0
      _s = s;
    3de4:	mvn.w	r1, #65	; 0x41
    3de8:	strb.w	r6, [r5, #1044]	; 0x414
    3dec:	strb.w	r1, [r5, #996]	; 0x3e4
      _b = b;
    3df0:	mvn.w	r1, #62	; 0x3e
    3df4:	strb.w	fp, [r5, #965]	; 0x3c5
    3df8:	strb.w	r1, [r5, #997]	; 0x3e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3dfc:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    3dfe:	strb.w	fp, [r5, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e02:	str.w	r1, [r5, #1000]	; 0x3e8
      _s = s;
      _b = b;
    3e06:	mvn.w	r1, #33	; 0x21
    3e0a:	strb.w	r1, [r5, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e0e:	movs	r1, #186	; 0xba
    3e10:	mov	r0, r1
    3e12:	str.w	r1, [r5, #1008]	; 0x3f0
      _s = s;
      _b = b;
    3e16:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e1a:	str.w	r0, [r5, #1016]	; 0x3f8
      _s = s;
      _b = b;
    3e1e:	strb.w	r1, [r5, #1013]	; 0x3f5
    3e22:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e26:	str.w	r0, [r5, #1024]	; 0x400
      _s = s;
      _b = b;
    3e2a:	strb.w	r1, [r5, #1021]	; 0x3fd
    3e2e:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e32:	str.w	r0, [r5, #1032]	; 0x408
      _s = s;
      _b = b;
    3e36:	strb.w	r1, [r5, #1029]	; 0x405
    3e3a:	mvn.w	r1, #24
    3e3e:	strb.w	r1, [r5, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e42:	movw	r1, #343	; 0x157
    3e46:	str.w	r1, [r5, #1048]	; 0x418
      _s = s;
    3e4a:	mvn.w	r1, #41	; 0x29
    3e4e:	strb.w	r1, [r5, #1052]	; 0x41c
      _b = b;
    3e52:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e56:	strb.w	r8, [r5, #1060]	; 0x424
      _b = b;
    3e5a:	strb.w	r1, [r5, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e5e:	movs	r1, #5
      _s = s;
      _b = b;
    3e60:	strb.w	ip, [r5, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e64:	str.w	r1, [r5, #1056]	; 0x420
    3e68:	movw	r1, #287	; 0x11f
      _s = s;
    3e6c:	strb.w	r9, [r5, #1068]	; 0x42c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e70:	str.w	r1, [r5, #1064]	; 0x428
    3e74:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    3e76:	strb.w	r6, [r5, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e7a:	str.w	r1, [r5, #1072]	; 0x430
      _s = s;
      _b = b;
    3e7e:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3e82:	strb.w	sl, [r5, #1076]	; 0x434
      _b = b;
    3e86:	strb.w	r1, [r5, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e8a:	movw	r1, #287	; 0x11f
      _s = s;
    3e8e:	strb.w	r9, [r5, #1084]	; 0x43c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3e92:	str.w	r1, [r5, #1080]	; 0x438
    3e96:	str.w	r1, [r5, #1088]	; 0x440
    3e9a:	movs	r1, #5
      _s = s;
      _b = b;
    3e9c:	strb.w	r6, [r5, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ea0:	str.w	r1, [r5, #1096]	; 0x448
    3ea4:	movw	r1, #359	; 0x167
      _s = s;
    3ea8:	strb.w	r9, [r5, #1092]	; 0x444
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eac:	str.w	r1, [r5, #1104]	; 0x450
    3eb0:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    3eb4:	strb.w	r6, [r5, #1093]	; 0x445
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eb8:	mov	r0, r1
    3eba:	str.w	r1, [r5, #1112]	; 0x458
      _s = s;
    3ebe:	mvn.w	r1, #103	; 0x67
    3ec2:	strb.w	r8, [r5, #1100]	; 0x44c
      _b = b;
    3ec6:	strb.w	ip, [r5, #1101]	; 0x44d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3eca:	strb.w	r1, [r5, #1116]	; 0x45c
      _b = b;
    3ece:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ed2:	strb.w	lr, [r5, #1108]	; 0x454
      _b = b;
    3ed6:	strb.w	r1, [r5, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3eda:	mvn.w	r1, #103	; 0x67
      _b = b;
    3ede:	strb.w	r3, [r5, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ee2:	strb.w	r1, [r5, #1124]	; 0x464
      _b = b;
    3ee6:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3eea:	str.w	r0, [r5, #1120]	; 0x460
      _s = s;
      _b = b;
    3eee:	strb.w	r1, [r5, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3ef2:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3ef6:	str.w	r2, [r5, #1128]	; 0x468
      _s = s;
    3efa:	strb.w	r1, [r5, #1132]	; 0x46c
      _b = b;
    3efe:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f02:	str.w	r2, [r5, #1136]	; 0x470
      _s = s;
      _b = b;
    3f06:	strb.w	r1, [r5, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f0a:	mov.w	r1, #4294967295
    3f0e:	strb.w	r1, [r5, #1140]	; 0x474
      _b = b;
    3f12:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f16:	str.w	r0, [r5, #1152]	; 0x480
      _s = s;
      _b = b;
    3f1a:	strb.w	r1, [r5, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f1e:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f22:	str.w	r2, [r5, #1144]	; 0x478
      _s = s;
    3f26:	strb.w	r1, [r5, #1148]	; 0x47c
      _b = b;
    3f2a:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f2e:	str.w	r3, [r5, #1160]	; 0x488
      _s = s;
      _b = b;
    3f32:	strb.w	r1, [r5, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f36:	mvn.w	r1, #103	; 0x67
    3f3a:	strb.w	r6, [r5, #1164]	; 0x48c
    3f3e:	strb.w	r1, [r5, #1156]	; 0x484
      _b = b;
    3f42:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f46:	strb.w	lr, [r5, #1180]	; 0x49c
      _b = b;
    3f4a:	strb.w	r1, [r5, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f4e:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    3f52:	strb.w	r3, [r5, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f56:	str.w	r1, [r5, #1168]	; 0x490
      _s = s;
    3f5a:	mvn.w	r1, #41	; 0x29
    3f5e:	strb.w	r7, [r5, #1196]	; 0x4ac
    3f62:	strb.w	r1, [r5, #1172]	; 0x494
      _b = b;
    3f66:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f6a:	strb.w	r7, [r5, #1204]	; 0x4b4
      _b = b;
    3f6e:	strb.w	r1, [r5, #1173]	; 0x495
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f72:	movw	r1, #359	; 0x167
      _s = s;
    3f76:	strb.w	sl, [r5, #1212]	; 0x4bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f7a:	str.w	r1, [r5, #1176]	; 0x498
    3f7e:	movs	r1, #231	; 0xe7
      _s = s;
    3f80:	strb.w	sl, [r5, #1220]	; 0x4c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f84:	str.w	r1, [r5, #1184]	; 0x4a0
      _s = s;
    3f88:	mvn.w	r1, #65	; 0x41
      _b = b;
    3f8c:	strb.w	fp, [r5, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3f90:	strb.w	r1, [r5, #1188]	; 0x4a4
      _b = b;
    3f94:	mvn.w	r1, #62	; 0x3e
    3f98:	strb.w	r1, [r5, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3f9c:	movs	r1, #223	; 0xdf
    3f9e:	mov	r0, r1
    3fa0:	str.w	r1, [r5, #1192]	; 0x4a8
      _s = s;
      _b = b;
    3fa4:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fa8:	str.w	r0, [r5, #1200]	; 0x4b0
      _s = s;
      _b = b;
    3fac:	strb.w	r1, [r5, #1197]	; 0x4ad
    3fb0:	mvn.w	r1, #33	; 0x21
    3fb4:	strb.w	r1, [r5, #1205]	; 0x4b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fb8:	movs	r1, #186	; 0xba
    3fba:	mov	r0, r1
    3fbc:	str.w	r1, [r5, #1208]	; 0x4b8
      _s = s;
      _b = b;
    3fc0:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fc4:	str.w	r0, [r5, #1216]	; 0x4c0
      _s = s;
      _b = b;
    3fc8:	strb.w	r1, [r5, #1213]	; 0x4bd
    3fcc:	mvn.w	r1, #24
    3fd0:	strb.w	r1, [r5, #1221]	; 0x4c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fd4:	movs	r1, #223	; 0xdf
    3fd6:	str.w	r1, [r5, #1224]	; 0x4c8
      _s = s;
      _b = b;
    3fda:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    3fde:	strb.w	r7, [r5, #1228]	; 0x4cc
      _b = b;
    3fe2:	strb.w	r1, [r5, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    3fe6:	movw	r1, #261	; 0x105
    3fea:	str.w	r3, [r5, #1232]	; 0x4d0
    3fee:	str.w	r1, [r5, #1240]	; 0x4d8
      _s = s;
    3ff2:	mvn.w	r1, #103	; 0x67
    3ff6:	strb.w	r6, [r5, #1236]	; 0x4d4
    3ffa:	strb.w	r1, [r5, #1244]	; 0x4dc
      _b = b;
    3ffe:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4002:	str.w	r3, [r5, #1248]	; 0x4e0
      _s = s;
      _b = b;
    4006:	strb.w	r1, [r5, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    400a:	movs	r1, #223	; 0xdf
      _s = s;
    400c:	strb.w	r6, [r5, #1252]	; 0x4e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4010:	str.w	r1, [r5, #1256]	; 0x4e8
      _s = s;
      _b = b;
    4014:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4018:	strb.w	r7, [r5, #1260]	; 0x4ec
      _b = b;
    401c:	strb.w	r1, [r5, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4020:	movs	r1, #5
      _s = s;
    4022:	strb.w	r8, [r5, #1268]	; 0x4f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4026:	str.w	r1, [r5, #1264]	; 0x4f0
    402a:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    402e:	strb.w	ip, [r5, #1269]	; 0x4f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4032:	str.w	r1, [r5, #1272]	; 0x4f8
    4036:	str.w	r1, [r5, #1280]	; 0x500
    403a:	movs	r1, #5
      _s = s;
    403c:	strb.w	r9, [r5, #1276]	; 0x4fc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4040:	str.w	r1, [r5, #1288]	; 0x508
    4044:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    4048:	strb.w	r6, [r5, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    404c:	str.w	r1, [r5, #1296]	; 0x510
    4050:	movs	r1, #231	; 0xe7
      _s = s;
    4052:	strb.w	r9, [r5, #1284]	; 0x504
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4056:	str.w	r1, [r5, #1304]	; 0x518
      _s = s;
    405a:	mvn.w	r1, #65	; 0x41
      _b = b;
    405e:	strb.w	r6, [r5, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4062:	strb.w	r1, [r5, #1308]	; 0x51c
      _b = b;
    4066:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    406a:	strb.w	r8, [r5, #1292]	; 0x50c
      _b = b;
    406e:	strb.w	r1, [r5, #1309]	; 0x51d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4072:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    4074:	strb.w	ip, [r5, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4078:	str.w	r1, [r5, #1312]	; 0x520
      _s = s;
      _b = b;
    407c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4080:	strb.w	lr, [r5, #1300]	; 0x514
      _b = b;
    4084:	strb.w	r3, [r5, #1301]	; 0x515
    4088:	strb.w	fp, [r5, #1237]	; 0x4d5
    408c:	strb.w	fp, [r5, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4090:	strb.w	r7, [r5, #1316]	; 0x524
      _b = b;
    4094:	strb.w	r1, [r5, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4098:	movw	r1, #261	; 0x105
    409c:	str.w	r2, [r5, #1328]	; 0x530
    40a0:	str.w	r1, [r5, #1320]	; 0x528
      _s = s;
    40a4:	mvn.w	r1, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40a8:	str.w	r2, [r5, #1336]	; 0x538
      _s = s;
    40ac:	strb.w	r1, [r5, #1324]	; 0x52c
      _b = b;
    40b0:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40b4:	str.w	r2, [r5, #1344]	; 0x540
      _s = s;
      _b = b;
    40b8:	strb.w	r1, [r5, #1325]	; 0x52d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    40bc:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    40c0:	str.w	r3, [r5, #1352]	; 0x548
      _s = s;
    40c4:	strb.w	r1, [r5, #1332]	; 0x534
      _b = b;
    40c8:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    40cc:	strb.w	r6, [r5, #1356]	; 0x54c
      _b = b;
    40d0:	strb.w	r1, [r5, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    40d4:	mov.w	r1, #4294967295
    40d8:	strb.w	r9, [r5, #1364]	; 0x554
    40dc:	strb.w	r1, [r5, #1340]	; 0x53c
      _b = b;
    40e0:	mov.w	r1, #0
    40e4:	strb.w	r6, [r5, #1365]	; 0x555
    40e8:	strb.w	r1, [r5, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    40ec:	mov.w	r1, #4294967295
    40f0:	strb.w	lr, [r5, #1372]	; 0x55c
    40f4:	strb.w	r1, [r5, #1348]	; 0x544
      _b = b;
    40f8:	mov.w	r1, #0
    40fc:	strb.w	r3, [r5, #1373]	; 0x55d
    4100:	strb.w	r1, [r5, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4104:	movw	r1, #287	; 0x11f
      _s = s;
    4108:	strb.w	r7, [r5, #1388]	; 0x56c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    410c:	str.w	r1, [r5, #1360]	; 0x550
    4110:	movw	r1, #359	; 0x167
      _s = s;
    4114:	strb.w	r7, [r5, #1396]	; 0x574
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4118:	str.w	r1, [r5, #1368]	; 0x558
    411c:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    4120:	strb.w	fp, [r5, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4124:	str.w	r1, [r5, #1376]	; 0x560
      _s = s;
    4128:	mvn.w	r1, #103	; 0x67
    412c:	strb.w	r1, [r5, #1380]	; 0x564
      _b = b;
    4130:	mov.w	r1, #104	; 0x68
    4134:	strb.w	r1, [r5, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4138:	movs	r1, #223	; 0xdf
    413a:	mov	r0, r1
    413c:	str.w	r1, [r5, #1384]	; 0x568
      _s = s;
      _b = b;
    4140:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4144:	str.w	r0, [r5, #1392]	; 0x570
      _s = s;
      _b = b;
    4148:	strb.w	r1, [r5, #1389]	; 0x56d
    414c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4150:	str.w	r0, [r5, #1400]	; 0x578
      _s = s;
      _b = b;
    4154:	strb.w	r1, [r5, #1397]	; 0x575
    4158:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    415c:	strb.w	r7, [r5, #1404]	; 0x57c
      _b = b;
    4160:	strb.w	r1, [r5, #1405]	; 0x57d
    4164:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4168:	str.w	r0, [r5, #1408]	; 0x580
      _s = s;
      _b = b;
    416c:	strb.w	r1, [r5, #1413]	; 0x585
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4170:	movs	r1, #231	; 0xe7
      _s = s;
    4172:	strb.w	r7, [r5, #1412]	; 0x584
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4176:	str.w	r1, [r5, #1424]	; 0x590
      _s = s;
    417a:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    417e:	str.w	r3, [r5, #1416]	; 0x588
      _s = s;
    4182:	strb.w	r1, [r5, #1428]	; 0x594
      _b = b;
    4186:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    418a:	strb.w	r6, [r5, #1420]	; 0x58c
      _b = b;
    418e:	strb.w	r1, [r5, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4192:	movw	r1, #287	; 0x11f
    4196:	str.w	r3, [r5, #1432]	; 0x598
    419a:	str.w	r1, [r5, #1464]	; 0x5b8
    419e:	str.w	r1, [r5, #1472]	; 0x5c0
    41a2:	movw	r1, #359	; 0x167
      _s = s;
    41a6:	strb.w	r6, [r5, #1436]	; 0x59c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41aa:	str.w	r1, [r5, #1480]	; 0x5c8
    41ae:	str.w	r1, [r5, #1488]	; 0x5d0
    41b2:	movs	r1, #231	; 0xe7
    41b4:	str.w	r3, [r5, #1440]	; 0x5a0
      _s = s;
    41b8:	strb.w	r6, [r5, #1444]	; 0x5a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41bc:	str.w	r3, [r5, #1448]	; 0x5a8
      _s = s;
    41c0:	strb.w	r6, [r5, #1452]	; 0x5ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41c4:	str.w	r3, [r5, #1456]	; 0x5b0
      _s = s;
    41c8:	strb.w	r6, [r5, #1460]	; 0x5b4
    41cc:	strb.w	r9, [r5, #1468]	; 0x5bc
      _b = b;
    41d0:	strb.w	r6, [r5, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    41d4:	strb.w	r9, [r5, #1476]	; 0x5c4
      _b = b;
    41d8:	strb.w	r6, [r5, #1477]	; 0x5c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    41dc:	strb.w	lr, [r5, #1484]	; 0x5cc
      _b = b;
    41e0:	strb.w	r3, [r5, #1485]	; 0x5cd
    41e4:	strb.w	fp, [r5, #1421]	; 0x58d
    41e8:	strb.w	fp, [r5, #1437]	; 0x59d
    41ec:	strb.w	fp, [r5, #1445]	; 0x5a5
    41f0:	strb.w	fp, [r5, #1453]	; 0x5ad
    41f4:	strb.w	fp, [r5, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    41f8:	strb.w	lr, [r5, #1492]	; 0x5d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    41fc:	str.w	r1, [r5, #1496]	; 0x5d8
      _s = s;
    4200:	mvn.w	r1, #65	; 0x41
      _b = b;
    4204:	strb.w	r3, [r5, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4208:	strb.w	r1, [r5, #1500]	; 0x5dc
      _b = b;
    420c:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4210:	strb.w	r7, [r5, #1508]	; 0x5e4
      _b = b;
    4214:	strb.w	r1, [r5, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4218:	movs	r1, #223	; 0xdf
    421a:	str.w	r2, [r5, #1520]	; 0x5f0
    421e:	str.w	r1, [r5, #1504]	; 0x5e0
      _s = s;
      _b = b;
    4222:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4226:	str.w	r2, [r5, #1528]	; 0x5f8
      _s = s;
      _b = b;
    422a:	strb.w	r1, [r5, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    422e:	movs	r1, #231	; 0xe7
    4230:	str.w	r2, [r5, #1536]	; 0x600
    4234:	mov	r0, r1
    4236:	str.w	r1, [r5, #1512]	; 0x5e8
      _s = s;
    423a:	mvn.w	r1, #65	; 0x41
    423e:	strb.w	r9, [r5, #1556]	; 0x614
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4242:	str.w	r0, [r5, #1544]	; 0x608
      _s = s;
    4246:	strb.w	r1, [r5, #1516]	; 0x5ec
      _b = b;
    424a:	mvn.w	r1, #62	; 0x3e
    424e:	strb.w	r6, [r5, #1557]	; 0x615
    4252:	strb.w	r1, [r5, #1517]	; 0x5ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4256:	mov.w	r1, #4294967295
    425a:	strb.w	r8, [r5, #1564]	; 0x61c
    425e:	strb.w	r1, [r5, #1524]	; 0x5f4
      _b = b;
    4262:	mov.w	r1, #1
    4266:	strb.w	ip, [r5, #1565]	; 0x61d
    426a:	strb.w	r1, [r5, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    426e:	mov.w	r1, #4294967295
    4272:	strb.w	r8, [r5, #1572]	; 0x624
    4276:	strb.w	r1, [r5, #1532]	; 0x5fc
      _b = b;
    427a:	mov.w	r1, #0
    427e:	strb.w	ip, [r5, #1573]	; 0x625
    4282:	strb.w	r1, [r5, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4286:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    428a:	str.w	r3, [r5, #1576]	; 0x628
      _s = s;
    428e:	strb.w	r1, [r5, #1540]	; 0x604
      _b = b;
    4292:	mov.w	r1, #0
    4296:	strb.w	r1, [r5, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    429a:	mvn.w	r1, #65	; 0x41
    429e:	strb.w	r1, [r5, #1548]	; 0x60c
      _b = b;
    42a2:	mvn.w	r1, #62	; 0x3e
    42a6:	strb.w	r1, [r5, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42aa:	movw	r1, #287	; 0x11f
    42ae:	str.w	r1, [r5, #1552]	; 0x610
    42b2:	movs	r1, #5
    42b4:	str.w	r1, [r5, #1560]	; 0x618
    42b8:	str.w	r1, [r5, #1568]	; 0x620
    42bc:	movs	r1, #223	; 0xdf
      _s = s;
    42be:	strb.w	r6, [r5, #1580]	; 0x62c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42c2:	str.w	r1, [r5, #1584]	; 0x630
      _s = s;
      _b = b;
    42c6:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    42ca:	strb.w	r7, [r5, #1588]	; 0x634
      _b = b;
    42ce:	strb.w	r1, [r5, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42d2:	movs	r1, #231	; 0xe7
    42d4:	str.w	r3, [r5, #1592]	; 0x638
    42d8:	str.w	r1, [r5, #1608]	; 0x648
      _s = s;
    42dc:	mvn.w	r1, #65	; 0x41
    42e0:	strb.w	r6, [r5, #1596]	; 0x63c
    42e4:	strb.w	r1, [r5, #1612]	; 0x64c
      _b = b;
    42e8:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42ec:	str.w	r3, [r5, #1600]	; 0x640
      _s = s;
      _b = b;
    42f0:	strb.w	r1, [r5, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42f4:	movs	r1, #223	; 0xdf
      _s = s;
    42f6:	strb.w	r6, [r5, #1604]	; 0x644
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    42fa:	mov	r0, r1
    42fc:	str.w	r1, [r5, #1624]	; 0x658
      _s = s;
      _b = b;
    4300:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4304:	str.w	r3, [r5, #1616]	; 0x650
      _s = s;
    4308:	strb.w	r6, [r5, #1620]	; 0x654
      _b = b;
    430c:	strb.w	r1, [r5, #1629]	; 0x65d
    4310:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4314:	strb.w	r7, [r5, #1628]	; 0x65c
      _b = b;
    4318:	strb.w	r1, [r5, #1637]	; 0x665
    431c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4320:	str.w	r0, [r5, #1632]	; 0x660
      _s = s;
      _b = b;
    4324:	strb.w	r1, [r5, #1661]	; 0x67d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4328:	movw	r1, #287	; 0x11f
      _s = s;
    432c:	strb.w	r7, [r5, #1636]	; 0x664
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4330:	str.w	r1, [r5, #1664]	; 0x680
    4334:	movs	r1, #5
    4336:	str.w	r3, [r5, #1640]	; 0x668
      _s = s;
    433a:	strb.w	r6, [r5, #1644]	; 0x66c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    433e:	str.w	r3, [r5, #1648]	; 0x670
      _s = s;
    4342:	strb.w	r6, [r5, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4346:	str.w	r0, [r5, #1656]	; 0x678
      _s = s;
    434a:	strb.w	r7, [r5, #1660]	; 0x67c
      _b = b;
    434e:	strb.w	fp, [r5, #1581]	; 0x62d
    4352:	strb.w	fp, [r5, #1597]	; 0x63d
    4356:	strb.w	fp, [r5, #1605]	; 0x645
    435a:	strb.w	fp, [r5, #1621]	; 0x655
    435e:	strb.w	fp, [r5, #1645]	; 0x66d
    4362:	strb.w	fp, [r5, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4366:	strb.w	r9, [r5, #1668]	; 0x684
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    436a:	str.w	r1, [r5, #1672]	; 0x688
    436e:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    4372:	strb.w	r6, [r5, #1669]	; 0x685
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4376:	str.w	r1, [r5, #1680]	; 0x690
    437a:	movw	r1, #343	; 0x157
      _s = s;
    437e:	strb.w	r8, [r5, #1676]	; 0x68c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4382:	str.w	r1, [r5, #1688]	; 0x698
      _s = s;
    4386:	mvn.w	r1, #41	; 0x29
      _b = b;
    438a:	strb.w	ip, [r5, #1677]	; 0x68d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    438e:	strb.w	r1, [r5, #1692]	; 0x69c
      _b = b;
    4392:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4396:	strb.w	lr, [r5, #1684]	; 0x694
      _b = b;
    439a:	strb.w	r1, [r5, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    439e:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    43a0:	strb.w	r3, [r5, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43a4:	str.w	r1, [r5, #1696]	; 0x6a0
      _s = s;
    43a8:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43ac:	str.w	r2, [r5, #1720]	; 0x6b8
      _s = s;
    43b0:	strb.w	r1, [r5, #1700]	; 0x6a4
      _b = b;
    43b4:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43b8:	str.w	r2, [r5, #1728]	; 0x6c0
      _s = s;
      _b = b;
    43bc:	strb.w	r1, [r5, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43c0:	movw	r1, #261	; 0x105
    43c4:	str.w	r2, [r5, #1736]	; 0x6c8
    43c8:	mov	r0, r1
    43ca:	str.w	r1, [r5, #1704]	; 0x6a8
      _s = s;
    43ce:	mvn.w	r1, #103	; 0x67
    43d2:	strb.w	r9, [r5, #1748]	; 0x6d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    43d6:	str.w	r0, [r5, #1712]	; 0x6b0
      _s = s;
    43da:	strb.w	r1, [r5, #1708]	; 0x6ac
      _b = b;
    43de:	mov.w	r1, #104	; 0x68
    43e2:	strb.w	r6, [r5, #1749]	; 0x6d5
    43e6:	strb.w	r1, [r5, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    43ea:	mvn.w	r1, #103	; 0x67
    43ee:	strb.w	r1, [r5, #1716]	; 0x6b4
      _b = b;
    43f2:	mov.w	r1, #104	; 0x68
    43f6:	strb.w	r1, [r5, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    43fa:	mov.w	r1, #4294967295
    43fe:	strb.w	r1, [r5, #1724]	; 0x6bc
      _b = b;
    4402:	mov.w	r1, #0
    4406:	strb.w	r1, [r5, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    440a:	mov.w	r1, #4294967295
    440e:	strb.w	r1, [r5, #1732]	; 0x6c4
      _b = b;
    4412:	mov.w	r1, #0
    4416:	strb.w	r1, [r5, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    441a:	mov.w	r1, #4294967295
    441e:	strb.w	r1, [r5, #1740]	; 0x6cc
      _b = b;
    4422:	mov.w	r1, #1
    4426:	strb.w	r1, [r5, #1741]	; 0x6cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    442a:	movw	r1, #287	; 0x11f
    442e:	str.w	r1, [r5, #1744]	; 0x6d0
    4432:	movs	r1, #5
    4434:	str.w	r1, [r5, #1752]	; 0x6d8
      _s = s;
    4438:	strb.w	r8, [r5, #1756]	; 0x6dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    443c:	str.w	r1, [r5, #1760]	; 0x6e0
    4440:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    4444:	strb.w	ip, [r5, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4448:	mov	r0, r1
    444a:	str.w	r1, [r5, #1768]	; 0x6e8
      _s = s;
    444e:	mvn.w	r1, #103	; 0x67
    4452:	strb.w	r8, [r5, #1764]	; 0x6e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4456:	str.w	r0, [r5, #1800]	; 0x708
      _s = s;
    445a:	strb.w	r1, [r5, #1772]	; 0x6ec
      _b = b;
    445e:	mov.w	r1, #104	; 0x68
    4462:	strb.w	ip, [r5, #1765]	; 0x6e5
    4466:	strb.w	r1, [r5, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    446a:	mvn.w	r1, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    446e:	str.w	r3, [r5, #1776]	; 0x6f0
      _s = s;
    4472:	strb.w	r1, [r5, #1804]	; 0x70c
      _b = b;
    4476:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    447a:	strb.w	r6, [r5, #1780]	; 0x6f4
      _b = b;
    447e:	strb.w	r1, [r5, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4482:	movs	r1, #223	; 0xdf
    4484:	str.w	r3, [r5, #1784]	; 0x6f8
    4488:	str.w	r1, [r5, #1808]	; 0x710
      _s = s;
      _b = b;
    448c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4490:	strb.w	r6, [r5, #1788]	; 0x6fc
      _b = b;
    4494:	strb.w	r1, [r5, #1813]	; 0x715
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4498:	movs	r1, #186	; 0xba
    449a:	str.w	r3, [r5, #1792]	; 0x700
    449e:	mov	r0, r1
    44a0:	str.w	r1, [r5, #1816]	; 0x718
      _s = s;
      _b = b;
    44a4:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44a8:	strb.w	r6, [r5, #1796]	; 0x704
    44ac:	strb.w	r7, [r5, #1812]	; 0x714
      _b = b;
    44b0:	strb.w	r1, [r5, #1821]	; 0x71d
    44b4:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44b8:	strb.w	sl, [r5, #1820]	; 0x71c
      _b = b;
    44bc:	strb.w	r1, [r5, #1829]	; 0x725
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44c0:	movs	r1, #223	; 0xdf
    44c2:	str.w	r0, [r5, #1824]	; 0x720
      _s = s;
    44c6:	strb.w	sl, [r5, #1828]	; 0x724
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44ca:	str.w	r3, [r5, #1832]	; 0x728
      _s = s;
    44ce:	strb.w	r6, [r5, #1836]	; 0x72c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44d2:	str.w	r3, [r5, #1840]	; 0x730
      _s = s;
      _b = b;
    44d6:	strb.w	fp, [r5, #1781]	; 0x6f5
    44da:	strb.w	fp, [r5, #1789]	; 0x6fd
    44de:	strb.w	fp, [r5, #1797]	; 0x705
    44e2:	strb.w	fp, [r5, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44e6:	strb.w	r6, [r5, #1844]	; 0x734
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44ea:	str.w	r1, [r5, #1848]	; 0x738
      _s = s;
      _b = b;
    44ee:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    44f2:	strb.w	r7, [r5, #1852]	; 0x73c
      _b = b;
    44f6:	strb.w	r1, [r5, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    44fa:	movw	r1, #287	; 0x11f
      _s = s;
    44fe:	strb.w	r9, [r5, #1860]	; 0x744
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4502:	str.w	r1, [r5, #1856]	; 0x740
    4506:	movs	r1, #5
      _s = s;
      _b = b;
    4508:	strb.w	r6, [r5, #1861]	; 0x745
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    450c:	str.w	r1, [r5, #1864]	; 0x748
    4510:	movw	r1, #359	; 0x167
      _s = s;
    4514:	strb.w	r8, [r5, #1868]	; 0x74c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4518:	str.w	r1, [r5, #1872]	; 0x750
    451c:	str.w	r1, [r5, #1880]	; 0x758
    4520:	str.w	r1, [r5, #1888]	; 0x760
    4524:	str.w	r1, [r5, #1896]	; 0x768
    4528:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    452c:	strb.w	ip, [r5, #1869]	; 0x74d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4530:	str.w	r1, [r5, #1904]	; 0x770
      _s = s;
    4534:	mvn.w	r1, #41	; 0x29
    4538:	strb.w	lr, [r5, #1876]	; 0x754
    453c:	strb.w	r1, [r5, #1908]	; 0x774
      _b = b;
    4540:	mov.w	r1, #112	; 0x70
    4544:	strb.w	r3, [r5, #1877]	; 0x755
    4548:	strb.w	r1, [r5, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    454c:	mov.w	r1, #4294967295
    4550:	strb.w	lr, [r5, #1884]	; 0x75c
    4554:	strb.w	r1, [r5, #1916]	; 0x77c
      _b = b;
    4558:	mov.w	r1, #0
    455c:	strb.w	r3, [r5, #1885]	; 0x75d
    4560:	strb.w	r1, [r5, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4564:	mov.w	r1, #4294967295
    4568:	strb.w	lr, [r5, #1892]	; 0x764
    456c:	strb.w	r1, [r5, #1924]	; 0x784
      _b = b;
    4570:	mov.w	r1, #0
    4574:	strb.w	r3, [r5, #1893]	; 0x765
    4578:	strb.w	r1, [r5, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    457c:	mov.w	r1, #4294967295
    4580:	strb.w	lr, [r5, #1900]	; 0x76c
      _b = b;
    4584:	strb.w	r3, [r5, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4588:	str.w	r2, [r5, #1912]	; 0x778
    458c:	str.w	r2, [r5, #1920]	; 0x780
    4590:	str.w	r2, [r5, #1928]	; 0x788
      _s = s;
      _b = b;
    4594:	strb.w	fp, [r5, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4598:	strb.w	r1, [r5, #1932]	; 0x78c
      _b = b;
    459c:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    45a0:	strb.w	r8, [r5, #1956]	; 0x7a4
      _b = b;
    45a4:	strb.w	r1, [r5, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45a8:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    45ac:	strb.w	ip, [r5, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45b0:	mov	r0, r1
    45b2:	str.w	r1, [r5, #1936]	; 0x790
      _s = s;
    45b6:	mvn.w	r1, #103	; 0x67
    45ba:	strb.w	r8, [r5, #1964]	; 0x7ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45be:	str.w	r0, [r5, #1944]	; 0x798
      _s = s;
    45c2:	strb.w	r1, [r5, #1940]	; 0x794
      _b = b;
    45c6:	mov.w	r1, #104	; 0x68
    45ca:	strb.w	ip, [r5, #1965]	; 0x7ad
    45ce:	strb.w	r1, [r5, #1941]	; 0x795
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    45d2:	mvn.w	r1, #103	; 0x67
    45d6:	strb.w	lr, [r5, #1972]	; 0x7b4
    45da:	strb.w	r1, [r5, #1948]	; 0x79c
      _b = b;
    45de:	mov.w	r1, #104	; 0x68
    45e2:	strb.w	r3, [r5, #1973]	; 0x7b5
    45e6:	strb.w	r1, [r5, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    45ea:	movs	r1, #5
    45ec:	str.w	r3, [r5, #2000]	; 0x7d0
    45f0:	str.w	r1, [r5, #1952]	; 0x7a0
    45f4:	str.w	r1, [r5, #1960]	; 0x7a8
    45f8:	movw	r1, #359	; 0x167
      _s = s;
    45fc:	strb.w	r6, [r5, #2004]	; 0x7d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4600:	str.w	r1, [r5, #1968]	; 0x7b0
    4604:	movw	r1, #343	; 0x157
      _s = s;
    4608:	strb.w	r7, [r5, #2012]	; 0x7dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    460c:	mov	r0, r1
    460e:	str.w	r1, [r5, #1976]	; 0x7b8
      _s = s;
    4612:	mvn.w	r1, #41	; 0x29
      _b = b;
    4616:	strb.w	fp, [r5, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    461a:	str.w	r0, [r5, #1984]	; 0x7c0
      _s = s;
    461e:	strb.w	r1, [r5, #1980]	; 0x7bc
      _b = b;
    4622:	mov.w	r1, #112	; 0x70
    4626:	strb.w	r1, [r5, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    462a:	mvn.w	r1, #41	; 0x29
    462e:	strb.w	r1, [r5, #1988]	; 0x7c4
      _b = b;
    4632:	mov.w	r1, #112	; 0x70
    4636:	strb.w	r1, [r5, #1989]	; 0x7c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    463a:	movs	r1, #231	; 0xe7
    463c:	str.w	r1, [r5, #1992]	; 0x7c8
      _s = s;
    4640:	mvn.w	r1, #65	; 0x41
    4644:	strb.w	r1, [r5, #1996]	; 0x7cc
      _b = b;
    4648:	mvn.w	r1, #62	; 0x3e
    464c:	strb.w	r1, [r5, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4650:	movs	r1, #223	; 0xdf
    4652:	mov	r0, r1
    4654:	str.w	r1, [r5, #2008]	; 0x7d8
      _s = s;
      _b = b;
    4658:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    465c:	str.w	r0, [r5, #2016]	; 0x7e0
      _s = s;
      _b = b;
    4660:	strb.w	r1, [r5, #2013]	; 0x7dd
    4664:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4668:	strb.w	r7, [r5, #2020]	; 0x7e4
      _b = b;
    466c:	strb.w	r1, [r5, #2021]	; 0x7e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4670:	movs	r1, #231	; 0xe7
    4672:	str.w	r3, [r5, #2032]	; 0x7f0
    4676:	mov	r0, r1
    4678:	str.w	r1, [r5, #2024]	; 0x7e8
      _s = s;
    467c:	mvn.w	r1, #65	; 0x41
    4680:	strb.w	r6, [r5, #2036]	; 0x7f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4684:	str.w	r0, [r5, #2040]	; 0x7f8
      _s = s;
    4688:	strb.w	r1, [r5, #2028]	; 0x7ec
      _b = b;
    468c:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4690:	strb.w	r9, [r5, #2052]	; 0x804
      _b = b;
    4694:	strb.w	r1, [r5, #2029]	; 0x7ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4698:	mvn.w	r1, #65	; 0x41
      _b = b;
    469c:	strb.w	r6, [r5, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46a0:	strb.w	r1, [r5, #2044]	; 0x7fc
      _b = b;
    46a4:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46a8:	strb.w	r8, [r5, #2060]	; 0x80c
      _b = b;
    46ac:	strb.w	r1, [r5, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46b0:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    46b4:	strb.w	ip, [r5, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46b8:	str.w	r1, [r5, #2048]	; 0x800
    46bc:	movs	r1, #5
      _s = s;
    46be:	strb.w	r8, [r5, #2068]	; 0x814
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46c2:	str.w	r1, [r5, #2056]	; 0x808
    46c6:	str.w	r1, [r5, #2064]	; 0x810
    46ca:	str.w	r1, [r5, #2072]	; 0x818
    46ce:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    46d2:	strb.w	ip, [r5, #2069]	; 0x815
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    46d6:	str.w	r1, [r5, #2080]	; 0x820
    46da:	str.w	r1, [r5, #2088]	; 0x828
    46de:	str.w	r1, [r5, #2096]	; 0x830
    46e2:	str.w	r1, [r5, #2104]	; 0x838
      _s = s;
    46e6:	mov.w	r1, #4294967295
    46ea:	strb.w	r8, [r5, #2076]	; 0x81c
      _b = b;
    46ee:	strb.w	ip, [r5, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46f2:	strb.w	lr, [r5, #2084]	; 0x824
      _b = b;
    46f6:	strb.w	r3, [r5, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    46fa:	strb.w	lr, [r5, #2092]	; 0x82c
      _b = b;
    46fe:	strb.w	r3, [r5, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4702:	strb.w	lr, [r5, #2100]	; 0x834
      _b = b;
    4706:	strb.w	r3, [r5, #2101]	; 0x835
    470a:	strb.w	fp, [r5, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    470e:	strb.w	lr, [r5, #2108]	; 0x83c
    4712:	strb.w	r1, [r5, #2116]	; 0x844
      _b = b;
    4716:	mov.w	r1, #0
    471a:	strb.w	r3, [r5, #2109]	; 0x83d
    471e:	strb.w	r1, [r5, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4722:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4726:	str.w	r2, [r5, #2112]	; 0x840
      _s = s;
    472a:	strb.w	r1, [r5, #2124]	; 0x84c
      _b = b;
    472e:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4732:	str.w	r2, [r5, #2120]	; 0x848
      _s = s;
      _b = b;
    4736:	strb.w	r1, [r5, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    473a:	movs	r1, #231	; 0xe7
      _s = s;
    473c:	strb.w	r7, [r5, #2140]	; 0x85c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4740:	str.w	r1, [r5, #2128]	; 0x850
      _s = s;
    4744:	mvn.w	r1, #65	; 0x41
    4748:	strb.w	r8, [r5, #2156]	; 0x86c
    474c:	strb.w	r1, [r5, #2132]	; 0x854
      _b = b;
    4750:	mvn.w	r1, #62	; 0x3e
    4754:	strb.w	ip, [r5, #2157]	; 0x86d
    4758:	strb.w	r1, [r5, #2133]	; 0x855
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    475c:	movs	r1, #223	; 0xdf
    475e:	str.w	r3, [r5, #2168]	; 0x878
    4762:	str.w	r1, [r5, #2136]	; 0x858
      _s = s;
      _b = b;
    4766:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    476a:	strb.w	r6, [r5, #2172]	; 0x87c
      _b = b;
    476e:	strb.w	r1, [r5, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4772:	movw	r1, #261	; 0x105
    4776:	str.w	r3, [r5, #2176]	; 0x880
    477a:	str.w	r1, [r5, #2144]	; 0x860
      _s = s;
    477e:	mvn.w	r1, #103	; 0x67
    4782:	strb.w	r6, [r5, #2180]	; 0x884
    4786:	strb.w	r1, [r5, #2148]	; 0x864
      _b = b;
    478a:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    478e:	str.w	r3, [r5, #2192]	; 0x890
      _s = s;
      _b = b;
    4792:	strb.w	r1, [r5, #2149]	; 0x865
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4796:	movs	r1, #5
      _s = s;
      _b = b;
    4798:	strb.w	fp, [r5, #2173]	; 0x87d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    479c:	str.w	r1, [r5, #2152]	; 0x868
    47a0:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    47a2:	strb.w	fp, [r5, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47a6:	str.w	r1, [r5, #2160]	; 0x870
      _s = s;
    47aa:	mvn.w	r1, #65	; 0x41
    47ae:	strb.w	r1, [r5, #2164]	; 0x874
      _b = b;
    47b2:	mvn.w	r1, #62	; 0x3e
    47b6:	strb.w	r1, [r5, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47ba:	movw	r1, #261	; 0x105
    47be:	str.w	r1, [r5, #2184]	; 0x888
      _s = s;
    47c2:	mvn.w	r1, #103	; 0x67
    47c6:	strb.w	r1, [r5, #2188]	; 0x88c
      _b = b;
    47ca:	mov.w	r1, #104	; 0x68
    47ce:	strb.w	r1, [r5, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47d2:	movw	r1, #287	; 0x11f
      _s = s;
    47d6:	strb.w	r6, [r5, #2196]	; 0x894
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47da:	str.w	r1, [r5, #2232]	; 0x8b8
    47de:	str.w	r1, [r5, #2240]	; 0x8c0
    47e2:	movw	r1, #359	; 0x167
    47e6:	str.w	r3, [r5, #2200]	; 0x898
      _s = s;
    47ea:	strb.w	r6, [r5, #2204]	; 0x89c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47ee:	str.w	r3, [r5, #2208]	; 0x8a0
      _s = s;
    47f2:	strb.w	r6, [r5, #2212]	; 0x8a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47f6:	str.w	r3, [r5, #2216]	; 0x8a8
      _s = s;
    47fa:	strb.w	r6, [r5, #2220]	; 0x8ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    47fe:	str.w	r3, [r5, #2224]	; 0x8b0
      _s = s;
    4802:	strb.w	r6, [r5, #2228]	; 0x8b4
    4806:	strb.w	r9, [r5, #2236]	; 0x8bc
      _b = b;
    480a:	strb.w	r6, [r5, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    480e:	strb.w	r9, [r5, #2244]	; 0x8c4
      _b = b;
    4812:	strb.w	r6, [r5, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4816:	str.w	r1, [r5, #2248]	; 0x8c8
      _s = s;
    481a:	strb.w	lr, [r5, #2252]	; 0x8cc
      _b = b;
    481e:	strb.w	r3, [r5, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4822:	str.w	r1, [r5, #2256]	; 0x8d0
      _s = s;
    4826:	strb.w	lr, [r5, #2260]	; 0x8d4
      _b = b;
    482a:	strb.w	r3, [r5, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    482e:	str.w	r1, [r5, #2264]	; 0x8d8
      _s = s;
    4832:	strb.w	lr, [r5, #2268]	; 0x8dc
      _b = b;
    4836:	strb.w	r3, [r5, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    483a:	str.w	r1, [r5, #2272]	; 0x8e0
      _s = s;
    483e:	strb.w	lr, [r5, #2276]	; 0x8e4
      _b = b;
    4842:	strb.w	r3, [r5, #2277]	; 0x8e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4846:	str.w	r1, [r5, #2280]	; 0x8e8
      _s = s;
      _b = b;
    484a:	strb.w	fp, [r5, #2197]	; 0x895
    484e:	strb.w	fp, [r5, #2205]	; 0x89d
    4852:	strb.w	fp, [r5, #2213]	; 0x8a5
    4856:	strb.w	fp, [r5, #2221]	; 0x8ad
    485a:	strb.w	fp, [r5, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    485e:	strb.w	lr, [r5, #2284]	; 0x8ec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4862:	str.w	r1, [r5, #2288]	; 0x8f0
    4866:	str.w	r1, [r5, #2296]	; 0x8f8
      _s = s;
    486a:	mov.w	r1, #4294967295
      _b = b;
    486e:	strb.w	r3, [r5, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4872:	strb.w	r1, [r5, #2308]	; 0x904
      _b = b;
    4876:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    487a:	strb.w	lr, [r5, #2292]	; 0x8f4
      _b = b;
    487e:	strb.w	r1, [r5, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4882:	mov.w	r1, #4294967295
      _b = b;
    4886:	strb.w	r3, [r5, #2293]	; 0x8f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    488a:	strb.w	r1, [r5, #2316]	; 0x90c
      _b = b;
    488e:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4892:	strb.w	lr, [r5, #2300]	; 0x8fc
      _b = b;
    4896:	strb.w	r1, [r5, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    489a:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    489c:	strb.w	r3, [r5, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48a0:	mov	r0, r1
    48a2:	str.w	r1, [r5, #2320]	; 0x910
      _s = s;
    48a6:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48aa:	str.w	r2, [r5, #2304]	; 0x900
    48ae:	str.w	r0, [r5, #2336]	; 0x920
      _s = s;
    48b2:	strb.w	r1, [r5, #2324]	; 0x914
      _b = b;
    48b6:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48ba:	str.w	r2, [r5, #2312]	; 0x908
      _s = s;
      _b = b;
    48be:	strb.w	r1, [r5, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48c2:	mvn.w	r1, #65	; 0x41
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48c6:	str.w	r3, [r5, #2328]	; 0x918
      _s = s;
    48ca:	strb.w	r1, [r5, #2340]	; 0x924
      _b = b;
    48ce:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48d2:	strb.w	r6, [r5, #2332]	; 0x91c
      _b = b;
    48d6:	strb.w	r1, [r5, #2341]	; 0x925
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48da:	movw	r1, #287	; 0x11f
      _s = s;
    48de:	strb.w	r9, [r5, #2348]	; 0x92c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48e2:	str.w	r1, [r5, #2344]	; 0x928
    48e6:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    48e8:	strb.w	r6, [r5, #2349]	; 0x92d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48ec:	mov	r0, r1
    48ee:	str.w	r1, [r5, #2352]	; 0x930
      _s = s;
      _b = b;
    48f2:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    48f6:	strb.w	r7, [r5, #2356]	; 0x934
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    48fa:	str.w	r0, [r5, #2360]	; 0x938
      _s = s;
      _b = b;
    48fe:	strb.w	r1, [r5, #2357]	; 0x935
    4902:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4906:	strb.w	r7, [r5, #2364]	; 0x93c
      _b = b;
    490a:	strb.w	r1, [r5, #2365]	; 0x93d
    490e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4912:	str.w	r0, [r5, #2368]	; 0x940
      _s = s;
      _b = b;
    4916:	strb.w	fp, [r5, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    491a:	strb.w	r7, [r5, #2372]	; 0x944
      _b = b;
    491e:	strb.w	r1, [r5, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4922:	movs	r1, #231	; 0xe7
    4924:	str.w	r3, [r5, #2376]	; 0x948
    4928:	str.w	r1, [r5, #2384]	; 0x950
      _s = s;
    492c:	mvn.w	r1, #65	; 0x41
    4930:	strb.w	r6, [r5, #2380]	; 0x94c
    4934:	strb.w	r1, [r5, #2388]	; 0x954
      _b = b;
    4938:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    493c:	str.w	r3, [r5, #2392]	; 0x958
      _s = s;
      _b = b;
    4940:	strb.w	r1, [r5, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4944:	movw	r1, #287	; 0x11f
      _s = s;
    4948:	strb.w	r6, [r5, #2396]	; 0x95c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    494c:	str.w	r1, [r5, #2416]	; 0x970
    4950:	str.w	r1, [r5, #2424]	; 0x978
    4954:	movs	r1, #186	; 0xba
    4956:	str.w	r3, [r5, #2400]	; 0x960
    495a:	str.w	r1, [r5, #2432]	; 0x980
      _s = s;
      _b = b;
    495e:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4962:	strb.w	r6, [r5, #2404]	; 0x964
      _b = b;
    4966:	strb.w	r1, [r5, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    496a:	movs	r1, #5
    496c:	str.w	r3, [r5, #2408]	; 0x968
    4970:	str.w	r1, [r5, #2440]	; 0x988
    4974:	str.w	r1, [r5, #2448]	; 0x990
    4978:	movw	r1, #359	; 0x167
      _s = s;
    497c:	strb.w	r6, [r5, #2412]	; 0x96c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4980:	str.w	r1, [r5, #2456]	; 0x998
    4984:	movs	r1, #231	; 0xe7
      _s = s;
    4986:	strb.w	r9, [r5, #2420]	; 0x974
      _b = b;
    498a:	strb.w	r6, [r5, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    498e:	strb.w	r9, [r5, #2428]	; 0x97c
      _b = b;
    4992:	strb.w	r6, [r5, #2429]	; 0x97d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4996:	strb.w	sl, [r5, #2436]	; 0x984
    499a:	strb.w	r8, [r5, #2444]	; 0x98c
      _b = b;
    499e:	strb.w	ip, [r5, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49a2:	strb.w	r8, [r5, #2452]	; 0x994
      _b = b;
    49a6:	strb.w	ip, [r5, #2453]	; 0x995
    49aa:	strb.w	fp, [r5, #2381]	; 0x94d
    49ae:	strb.w	fp, [r5, #2397]	; 0x95d
    49b2:	strb.w	fp, [r5, #2405]	; 0x965
    49b6:	strb.w	fp, [r5, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49ba:	strb.w	lr, [r5, #2460]	; 0x99c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49be:	str.w	r1, [r5, #2464]	; 0x9a0
      _s = s;
    49c2:	mvn.w	r1, #65	; 0x41
      _b = b;
    49c6:	strb.w	r3, [r5, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49ca:	strb.w	r1, [r5, #2468]	; 0x9a4
      _b = b;
    49ce:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49d2:	strb.w	lr, [r5, #2476]	; 0x9ac
      _b = b;
    49d6:	strb.w	r1, [r5, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49da:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    49de:	strb.w	r3, [r5, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49e2:	str.w	r1, [r5, #2472]	; 0x9a8
    49e6:	movs	r1, #5
      _s = s;
    49e8:	strb.w	r8, [r5, #2484]	; 0x9b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    49ec:	str.w	r1, [r5, #2480]	; 0x9b0
    49f0:	str.w	r1, [r5, #2488]	; 0x9b8
      _s = s;
    49f4:	mov.w	r1, #4294967295
      _b = b;
    49f8:	strb.w	ip, [r5, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    49fc:	strb.w	r1, [r5, #2500]	; 0x9c4
      _b = b;
    4a00:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a04:	strb.w	r8, [r5, #2492]	; 0x9bc
      _b = b;
    4a08:	strb.w	r1, [r5, #2501]	; 0x9c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a0c:	mov.w	r1, #4294967295
      _b = b;
    4a10:	strb.w	ip, [r5, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a14:	strb.w	r1, [r5, #2508]	; 0x9cc
      _b = b;
    4a18:	mov.w	r1, #1
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a1c:	str.w	r2, [r5, #2496]	; 0x9c0
      _s = s;
      _b = b;
    4a20:	strb.w	r1, [r5, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a24:	movs	r1, #186	; 0xba
    4a26:	str.w	r2, [r5, #2504]	; 0x9c8
    4a2a:	str.w	r1, [r5, #2512]	; 0x9d0
      _s = s;
      _b = b;
    4a2e:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a32:	strb.w	sl, [r5, #2516]	; 0x9d4
      _b = b;
    4a36:	strb.w	r1, [r5, #2517]	; 0x9d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a3a:	movs	r1, #223	; 0xdf
      _s = s;
    4a3c:	strb.w	r7, [r5, #2524]	; 0x9dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a40:	mov	r0, r1
    4a42:	str.w	r1, [r5, #2520]	; 0x9d8
      _s = s;
      _b = b;
    4a46:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a4a:	strb.w	r7, [r5, #2532]	; 0x9e4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a4e:	str.w	r0, [r5, #2528]	; 0x9e0
      _s = s;
      _b = b;
    4a52:	strb.w	r1, [r5, #2525]	; 0x9dd
    4a56:	mvn.w	r1, #33	; 0x21
    4a5a:	strb.w	r1, [r5, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a5e:	movs	r1, #231	; 0xe7
    4a60:	str.w	r1, [r5, #2536]	; 0x9e8
      _s = s;
    4a64:	mvn.w	r1, #65	; 0x41
    4a68:	strb.w	r1, [r5, #2540]	; 0x9ec
      _b = b;
    4a6c:	mvn.w	r1, #62	; 0x3e
    4a70:	strb.w	r1, [r5, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a74:	movs	r1, #186	; 0xba
    4a76:	mov	r0, r1
    4a78:	str.w	r1, [r5, #2544]	; 0x9f0
      _s = s;
      _b = b;
    4a7c:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a80:	strb.w	sl, [r5, #2548]	; 0x9f4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a84:	str.w	r0, [r5, #2552]	; 0x9f8
      _s = s;
      _b = b;
    4a88:	strb.w	r1, [r5, #2549]	; 0x9f5
    4a8c:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4a90:	strb.w	sl, [r5, #2556]	; 0x9fc
      _b = b;
    4a94:	strb.w	r1, [r5, #2557]	; 0x9fd
    4a98:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4a9c:	str.w	r0, [r5, #2560]	; 0xa00
      _s = s;
      _b = b;
    4aa0:	strb.w	r1, [r5, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4aa4:	movw	r1, #343	; 0x157
      _s = s;
    4aa8:	strb.w	sl, [r5, #2564]	; 0xa04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4aac:	str.w	r1, [r5, #2584]	; 0xa18
      _s = s;
    4ab0:	mvn.w	r1, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ab4:	str.w	r3, [r5, #2568]	; 0xa08
      _s = s;
    4ab8:	strb.w	r1, [r5, #2588]	; 0xa1c
      _b = b;
    4abc:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ac0:	strb.w	r6, [r5, #2572]	; 0xa0c
      _b = b;
    4ac4:	strb.w	r1, [r5, #2589]	; 0xa1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ac8:	movw	r1, #359	; 0x167
    4acc:	str.w	r3, [r5, #2576]	; 0xa10
    4ad0:	str.w	r1, [r5, #2592]	; 0xa20
    4ad4:	str.w	r1, [r5, #2600]	; 0xa28
    4ad8:	movs	r1, #186	; 0xba
      _s = s;
    4ada:	strb.w	r6, [r5, #2580]	; 0xa14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ade:	str.w	r1, [r5, #2608]	; 0xa30
      _s = s;
      _b = b;
    4ae2:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ae6:	strb.w	lr, [r5, #2596]	; 0xa24
      _b = b;
    4aea:	strb.w	r1, [r5, #2613]	; 0xa35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4aee:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    4af0:	strb.w	r3, [r5, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4af4:	str.w	r1, [r5, #2616]	; 0xa38
      _s = s;
      _b = b;
    4af8:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4afc:	strb.w	lr, [r5, #2604]	; 0xa2c
      _b = b;
    4b00:	strb.w	r1, [r5, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b04:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    4b06:	strb.w	r3, [r5, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b0a:	str.w	r1, [r5, #2624]	; 0xa40
      _s = s;
      _b = b;
    4b0e:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b12:	strb.w	sl, [r5, #2612]	; 0xa34
      _b = b;
    4b16:	strb.w	r1, [r5, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b1a:	movw	r1, #287	; 0x11f
      _s = s;
    4b1e:	strb.w	r7, [r5, #2620]	; 0xa3c
    4b22:	strb.w	sl, [r5, #2628]	; 0xa44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b26:	str.w	r1, [r5, #2632]	; 0xa48
      _s = s;
      _b = b;
    4b2a:	strb.w	fp, [r5, #2573]	; 0xa0d
    4b2e:	strb.w	fp, [r5, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4b32:	strb.w	r9, [r5, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b36:	str.w	r1, [r5, #2640]	; 0xa50
    4b3a:	str.w	r1, [r5, #2648]	; 0xa58
    4b3e:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    4b42:	strb.w	r6, [r5, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b46:	str.w	r1, [r5, #2656]	; 0xa60
      _s = s;
    4b4a:	mvn.w	r1, #103	; 0x67
    4b4e:	strb.w	r9, [r5, #2644]	; 0xa54
    4b52:	strb.w	r1, [r5, #2660]	; 0xa64
      _b = b;
    4b56:	mov.w	r1, #104	; 0x68
    4b5a:	strb.w	r6, [r5, #2645]	; 0xa55
    4b5e:	strb.w	r1, [r5, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b62:	movw	r1, #359	; 0x167
      _s = s;
    4b66:	strb.w	r9, [r5, #2652]	; 0xa5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b6a:	str.w	r1, [r5, #2664]	; 0xa68
    4b6e:	movs	r1, #5
      _s = s;
      _b = b;
    4b70:	strb.w	r6, [r5, #2653]	; 0xa5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b74:	str.w	r1, [r5, #2672]	; 0xa70
    4b78:	str.w	r1, [r5, #2680]	; 0xa78
      _s = s;
    4b7c:	mov.w	r1, #4294967295
    4b80:	strb.w	lr, [r5, #2668]	; 0xa6c
    4b84:	strb.w	r1, [r5, #2692]	; 0xa84
      _b = b;
    4b88:	mov.w	r1, #0
    4b8c:	strb.w	r3, [r5, #2669]	; 0xa6d
    4b90:	strb.w	r1, [r5, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b94:	movw	r1, #261	; 0x105
      _s = s;
    4b98:	strb.w	r8, [r5, #2676]	; 0xa74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4b9c:	str.w	r1, [r5, #2696]	; 0xa88
      _s = s;
    4ba0:	mvn.w	r1, #103	; 0x67
      _b = b;
    4ba4:	strb.w	ip, [r5, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ba8:	strb.w	r1, [r5, #2700]	; 0xa8c
      _b = b;
    4bac:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4bb0:	strb.w	r8, [r5, #2684]	; 0xa7c
      _b = b;
    4bb4:	strb.w	r1, [r5, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bb8:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    4bba:	strb.w	ip, [r5, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bbe:	str.w	r1, [r5, #2704]	; 0xa90
      _s = s;
      _b = b;
    4bc2:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bc6:	str.w	r2, [r5, #2688]	; 0xa80
      _s = s;
      _b = b;
    4bca:	strb.w	r1, [r5, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bce:	movs	r1, #223	; 0xdf
      _s = s;
    4bd0:	strb.w	sl, [r5, #2708]	; 0xa94
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bd4:	str.w	r1, [r5, #2712]	; 0xa98
      _s = s;
      _b = b;
    4bd8:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4bdc:	strb.w	r7, [r5, #2716]	; 0xa9c
      _b = b;
    4be0:	strb.w	r1, [r5, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4be4:	movs	r1, #231	; 0xe7
    4be6:	str.w	r3, [r5, #2720]	; 0xaa0
      _s = s;
    4bea:	strb.w	r6, [r5, #2724]	; 0xaa4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4bee:	str.w	r1, [r5, #2728]	; 0xaa8
      _s = s;
    4bf2:	mvn.w	r1, #65	; 0x41
    4bf6:	strb.w	sl, [r5, #2740]	; 0xab4
    4bfa:	strb.w	r1, [r5, #2732]	; 0xaac
      _b = b;
    4bfe:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c02:	strb.w	sl, [r5, #2748]	; 0xabc
      _b = b;
    4c06:	strb.w	r1, [r5, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c0a:	movs	r1, #186	; 0xba
      _s = s;
    4c0c:	strb.w	sl, [r5, #2756]	; 0xac4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c10:	mov	r0, r1
    4c12:	str.w	r1, [r5, #2736]	; 0xab0
      _s = s;
      _b = b;
    4c16:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c1a:	str.w	r3, [r5, #2760]	; 0xac8
    4c1e:	str.w	r0, [r5, #2744]	; 0xab8
      _s = s;
      _b = b;
    4c22:	strb.w	r1, [r5, #2741]	; 0xab5
    4c26:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c2a:	str.w	r0, [r5, #2752]	; 0xac0
      _s = s;
      _b = b;
    4c2e:	strb.w	r1, [r5, #2749]	; 0xabd
    4c32:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c36:	strb.w	r6, [r5, #2764]	; 0xacc
      _b = b;
    4c3a:	strb.w	r1, [r5, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c3e:	movs	r1, #5
    4c40:	str.w	r3, [r5, #2768]	; 0xad0
    4c44:	str.w	r1, [r5, #2776]	; 0xad8
    4c48:	str.w	r1, [r5, #2784]	; 0xae0
    4c4c:	movw	r1, #287	; 0x11f
      _s = s;
    4c50:	strb.w	r6, [r5, #2772]	; 0xad4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c54:	str.w	r1, [r5, #2792]	; 0xae8
    4c58:	movs	r1, #186	; 0xba
      _s = s;
    4c5a:	strb.w	r8, [r5, #2780]	; 0xadc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c5e:	mov	r0, r1
    4c60:	str.w	r1, [r5, #2800]	; 0xaf0
      _s = s;
      _b = b;
    4c64:	mvn.w	r1, #24
    4c68:	strb.w	ip, [r5, #2781]	; 0xadd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c6c:	strb.w	r8, [r5, #2788]	; 0xae4
      _b = b;
    4c70:	strb.w	r1, [r5, #2805]	; 0xaf5
    4c74:	mvn.w	r1, #24
    4c78:	strb.w	ip, [r5, #2789]	; 0xae5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c7c:	strb.w	r9, [r5, #2796]	; 0xaec
      _b = b;
    4c80:	strb.w	r6, [r5, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c84:	strb.w	sl, [r5, #2804]	; 0xaf4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4c88:	str.w	r0, [r5, #2808]	; 0xaf8
      _s = s;
      _b = b;
    4c8c:	strb.w	fp, [r5, #2725]	; 0xaa5
    4c90:	strb.w	fp, [r5, #2765]	; 0xacd
    4c94:	strb.w	fp, [r5, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4c98:	strb.w	sl, [r5, #2812]	; 0xafc
      _b = b;
    4c9c:	strb.w	r1, [r5, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ca0:	movs	r1, #223	; 0xdf
      _s = s;
    4ca2:	strb.w	r7, [r5, #2820]	; 0xb04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ca6:	mov	r0, r1
    4ca8:	str.w	r1, [r5, #2816]	; 0xb00
      _s = s;
      _b = b;
    4cac:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4cb0:	strb.w	r7, [r5, #2828]	; 0xb0c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cb4:	str.w	r0, [r5, #2824]	; 0xb08
      _s = s;
      _b = b;
    4cb8:	strb.w	r1, [r5, #2821]	; 0xb05
    4cbc:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cc0:	str.w	r0, [r5, #2832]	; 0xb10
      _s = s;
      _b = b;
    4cc4:	strb.w	r1, [r5, #2829]	; 0xb0d
    4cc8:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ccc:	strb.w	r7, [r5, #2836]	; 0xb14
      _b = b;
    4cd0:	strb.w	r1, [r5, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cd4:	movw	r1, #287	; 0x11f
      _s = s;
    4cd8:	strb.w	r9, [r5, #2844]	; 0xb1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4cdc:	str.w	r1, [r5, #2840]	; 0xb18
    4ce0:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    4ce4:	strb.w	r6, [r5, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ce8:	str.w	r1, [r5, #2848]	; 0xb20
    4cec:	str.w	r1, [r5, #2856]	; 0xb28
    4cf0:	str.w	r1, [r5, #2864]	; 0xb30
    4cf4:	str.w	r1, [r5, #2872]	; 0xb38
      _s = s;
    4cf8:	mov.w	r1, #4294967295
    4cfc:	strb.w	lr, [r5, #2852]	; 0xb24
    4d00:	strb.w	r1, [r5, #2884]	; 0xb44
      _b = b;
    4d04:	mov.w	r1, #0
    4d08:	strb.w	r3, [r5, #2853]	; 0xb25
    4d0c:	strb.w	r1, [r5, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d10:	movs	r1, #223	; 0xdf
      _s = s;
    4d12:	strb.w	lr, [r5, #2860]	; 0xb2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d16:	mov	r0, r1
    4d18:	str.w	r1, [r5, #2888]	; 0xb48
      _s = s;
      _b = b;
    4d1c:	mvn.w	r1, #33	; 0x21
    4d20:	strb.w	r3, [r5, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4d24:	strb.w	lr, [r5, #2868]	; 0xb34
      _b = b;
    4d28:	strb.w	r1, [r5, #2893]	; 0xb4d
    4d2c:	mvn.w	r1, #33	; 0x21
    4d30:	strb.w	r3, [r5, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4d34:	strb.w	lr, [r5, #2876]	; 0xb3c
      _b = b;
    4d38:	strb.w	r3, [r5, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d3c:	str.w	r2, [r5, #2880]	; 0xb40
      _s = s;
    4d40:	strb.w	r7, [r5, #2892]	; 0xb4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d44:	str.w	r0, [r5, #2896]	; 0xb50
      _s = s;
    4d48:	strb.w	r7, [r5, #2900]	; 0xb54
      _b = b;
    4d4c:	strb.w	r1, [r5, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d50:	movw	r1, #343	; 0x157
    4d54:	str.w	r3, [r5, #2904]	; 0xb58
    4d58:	str.w	r1, [r5, #2920]	; 0xb68
      _s = s;
    4d5c:	mvn.w	r1, #41	; 0x29
    4d60:	strb.w	r6, [r5, #2908]	; 0xb5c
    4d64:	strb.w	r1, [r5, #2924]	; 0xb6c
      _b = b;
    4d68:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d6c:	str.w	r3, [r5, #2912]	; 0xb60
      _s = s;
      _b = b;
    4d70:	strb.w	r1, [r5, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d74:	movs	r1, #223	; 0xdf
      _s = s;
    4d76:	strb.w	r6, [r5, #2916]	; 0xb64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d7a:	str.w	r1, [r5, #2936]	; 0xb78
      _s = s;
      _b = b;
    4d7e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d82:	str.w	r3, [r5, #2928]	; 0xb70
      _s = s;
      _b = b;
    4d86:	strb.w	r1, [r5, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d8a:	movs	r1, #5
      _s = s;
    4d8c:	strb.w	r6, [r5, #2932]	; 0xb74
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d90:	str.w	r1, [r5, #2960]	; 0xb90
    4d94:	movw	r1, #359	; 0x167
      _s = s;
    4d98:	strb.w	r7, [r5, #2940]	; 0xb7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4d9c:	str.w	r1, [r5, #2968]	; 0xb98
    4da0:	movs	r1, #5
    4da2:	str.w	r3, [r5, #2944]	; 0xb80
    4da6:	str.w	r1, [r5, #2976]	; 0xba0
    4daa:	str.w	r1, [r5, #2984]	; 0xba8
    4dae:	movs	r1, #186	; 0xba
      _s = s;
    4db0:	strb.w	r6, [r5, #2948]	; 0xb84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4db4:	mov	r0, r1
    4db6:	str.w	r3, [r5, #2952]	; 0xb88
      _s = s;
    4dba:	strb.w	r6, [r5, #2956]	; 0xb8c
    4dbe:	strb.w	r8, [r5, #2964]	; 0xb94
      _b = b;
    4dc2:	strb.w	ip, [r5, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4dc6:	strb.w	lr, [r5, #2972]	; 0xb9c
      _b = b;
    4dca:	strb.w	r3, [r5, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4dce:	strb.w	r8, [r5, #2980]	; 0xba4
      _b = b;
    4dd2:	strb.w	ip, [r5, #2981]	; 0xba5
    4dd6:	strb.w	fp, [r5, #2909]	; 0xb5d
    4dda:	strb.w	fp, [r5, #2917]	; 0xb65
    4dde:	strb.w	fp, [r5, #2933]	; 0xb75
    4de2:	strb.w	fp, [r5, #2949]	; 0xb85
    4de6:	strb.w	fp, [r5, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4dea:	strb.w	r8, [r5, #2988]	; 0xbac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4dee:	str.w	r1, [r5, #2992]	; 0xbb0
      _s = s;
      _b = b;
    4df2:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4df6:	str.w	r0, [r5, #3000]	; 0xbb8
      _s = s;
      _b = b;
    4dfa:	strb.w	r1, [r5, #2997]	; 0xbb5
    4dfe:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e02:	str.w	r0, [r5, #3008]	; 0xbc0
      _s = s;
      _b = b;
    4e06:	strb.w	r1, [r5, #3005]	; 0xbbd
    4e0a:	mvn.w	r1, #24
    4e0e:	strb.w	ip, [r5, #2989]	; 0xbad
    4e12:	strb.w	r1, [r5, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e16:	movs	r1, #223	; 0xdf
      _s = s;
    4e18:	strb.w	sl, [r5, #2996]	; 0xbb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e1c:	mov	r0, r1
    4e1e:	str.w	r1, [r5, #3016]	; 0xbc8
      _s = s;
      _b = b;
    4e22:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e26:	strb.w	sl, [r5, #3004]	; 0xbbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e2a:	str.w	r0, [r5, #3024]	; 0xbd0
      _s = s;
      _b = b;
    4e2e:	strb.w	r1, [r5, #3021]	; 0xbcd
    4e32:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e36:	strb.w	sl, [r5, #3012]	; 0xbc4
      _b = b;
    4e3a:	strb.w	r1, [r5, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e3e:	movw	r1, #359	; 0x167
      _s = s;
    4e42:	strb.w	r7, [r5, #3020]	; 0xbcc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e46:	str.w	r1, [r5, #3032]	; 0xbd8
    4e4a:	str.w	r1, [r5, #3040]	; 0xbe0
    4e4e:	str.w	r1, [r5, #3048]	; 0xbe8
    4e52:	movs	r1, #5
      _s = s;
    4e54:	strb.w	r7, [r5, #3028]	; 0xbd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e58:	str.w	r1, [r5, #3056]	; 0xbf0
    4e5c:	movw	r1, #359	; 0x167
      _s = s;
    4e60:	strb.w	lr, [r5, #3036]	; 0xbdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e64:	str.w	r1, [r5, #3064]	; 0xbf8
    4e68:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    4e6c:	strb.w	r3, [r5, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4e70:	mov	r0, r1
    4e72:	str.w	r1, [r5, #3072]	; 0xc00
      _s = s;
    4e76:	mvn.w	r1, #103	; 0x67
    4e7a:	strb.w	lr, [r5, #3044]	; 0xbe4
      _b = b;
    4e7e:	strb.w	r3, [r5, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e82:	strb.w	lr, [r5, #3052]	; 0xbec
      _b = b;
    4e86:	strb.w	r3, [r5, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e8a:	strb.w	r8, [r5, #3060]	; 0xbf4
      _b = b;
    4e8e:	strb.w	ip, [r5, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e92:	strb.w	lr, [r5, #3068]	; 0xbfc
      _b = b;
    4e96:	strb.w	r3, [r5, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4e9a:	strb.w	r1, [r5, #3076]	; 0xc04
      _b = b;
    4e9e:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ea2:	str.w	r3, [r5, #3080]	; 0xc08
      _s = s;
      _b = b;
    4ea6:	strb.w	r1, [r5, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4eaa:	mvn.w	r1, #103	; 0x67
    4eae:	strb.w	r6, [r5, #3084]	; 0xc0c
    4eb2:	strb.w	r1, [r5, #3108]	; 0xc24
      _b = b;
    4eb6:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4eba:	str.w	r3, [r5, #3088]	; 0xc10
      _s = s;
      _b = b;
    4ebe:	strb.w	r1, [r5, #3109]	; 0xc25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ec2:	movs	r1, #5
      _s = s;
    4ec4:	strb.w	r6, [r5, #3092]	; 0xc14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ec8:	str.w	r1, [r5, #3112]	; 0xc28
    4ecc:	str.w	r1, [r5, #3120]	; 0xc30
    4ed0:	movs	r1, #231	; 0xe7
    4ed2:	str.w	r3, [r5, #3096]	; 0xc18
    4ed6:	str.w	r1, [r5, #3128]	; 0xc38
      _s = s;
    4eda:	mvn.w	r1, #65	; 0x41
    4ede:	strb.w	r6, [r5, #3100]	; 0xc1c
    4ee2:	strb.w	r1, [r5, #3132]	; 0xc3c
      _b = b;
    4ee6:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4eea:	str.w	r0, [r5, #3104]	; 0xc20
      _s = s;
      _b = b;
    4eee:	strb.w	r1, [r5, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ef2:	movw	r1, #287	; 0x11f
      _s = s;
    4ef6:	strb.w	r8, [r5, #3116]	; 0xc2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4efa:	str.w	r1, [r5, #3136]	; 0xc40
    4efe:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    4f02:	strb.w	ip, [r5, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f06:	str.w	r1, [r5, #3144]	; 0xc48
    4f0a:	movw	r1, #261	; 0x105
      _s = s;
    4f0e:	strb.w	r8, [r5, #3124]	; 0xc34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f12:	str.w	r1, [r5, #3152]	; 0xc50
      _s = s;
    4f16:	mvn.w	r1, #103	; 0x67
      _b = b;
    4f1a:	strb.w	ip, [r5, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f1e:	strb.w	r1, [r5, #3156]	; 0xc54
      _b = b;
    4f22:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f26:	strb.w	r9, [r5, #3140]	; 0xc44
      _b = b;
    4f2a:	strb.w	r1, [r5, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f2e:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    4f32:	strb.w	r6, [r5, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f36:	strb.w	lr, [r5, #3148]	; 0xc4c
      _b = b;
    4f3a:	strb.w	r3, [r5, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f3e:	str.w	r1, [r5, #3160]	; 0xc58
      _s = s;
      _b = b;
    4f42:	strb.w	fp, [r5, #3085]	; 0xc0d
    4f46:	strb.w	fp, [r5, #3093]	; 0xc15
    4f4a:	strb.w	fp, [r5, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f4e:	strb.w	r9, [r5, #3164]	; 0xc5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f52:	str.w	r1, [r5, #3168]	; 0xc60
    4f56:	movs	r1, #5
      _s = s;
      _b = b;
    4f58:	strb.w	r6, [r5, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f5c:	str.w	r1, [r5, #3176]	; 0xc68
    4f60:	movw	r1, #287	; 0x11f
      _s = s;
    4f64:	strb.w	r9, [r5, #3172]	; 0xc64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f68:	str.w	r1, [r5, #3184]	; 0xc70
    4f6c:	movs	r1, #186	; 0xba
      _s = s;
      _b = b;
    4f6e:	strb.w	r6, [r5, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4f72:	mov	r0, r1
    4f74:	str.w	r1, [r5, #3192]	; 0xc78
      _s = s;
      _b = b;
    4f78:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f7c:	strb.w	r8, [r5, #3180]	; 0xc6c
      _b = b;
    4f80:	strb.w	ip, [r5, #3181]	; 0xc6d
    4f84:	strb.w	r1, [r5, #3197]	; 0xc7d
    4f88:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4f8c:	strb.w	r9, [r5, #3188]	; 0xc74
      _b = b;
    4f90:	strb.w	r1, [r5, #3205]	; 0xc85
    4f94:	mvn.w	r1, #24
    4f98:	strb.w	r6, [r5, #3189]	; 0xc75
    4f9c:	strb.w	r1, [r5, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fa0:	movw	r1, #287	; 0x11f
      _s = s;
    4fa4:	strb.w	sl, [r5, #3196]	; 0xc7c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fa8:	str.w	r1, [r5, #3216]	; 0xc90
    4fac:	str.w	r1, [r5, #3224]	; 0xc98
    4fb0:	movs	r1, #5
    4fb2:	str.w	r0, [r5, #3200]	; 0xc80
    4fb6:	str.w	r1, [r5, #3232]	; 0xca0
    4fba:	str.w	r1, [r5, #3240]	; 0xca8
    4fbe:	str.w	r1, [r5, #3248]	; 0xcb0
    4fc2:	movw	r1, #343	; 0x157
      _s = s;
    4fc6:	strb.w	sl, [r5, #3204]	; 0xc84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4fca:	str.w	r0, [r5, #3208]	; 0xc88
      _s = s;
    4fce:	strb.w	sl, [r5, #3212]	; 0xc8c
    4fd2:	strb.w	r9, [r5, #3220]	; 0xc94
      _b = b;
    4fd6:	strb.w	r6, [r5, #3221]	; 0xc95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4fda:	strb.w	r9, [r5, #3228]	; 0xc9c
      _b = b;
    4fde:	strb.w	r6, [r5, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4fe2:	strb.w	r8, [r5, #3236]	; 0xca4
      _b = b;
    4fe6:	strb.w	ip, [r5, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4fea:	strb.w	r8, [r5, #3244]	; 0xcac
      _b = b;
    4fee:	strb.w	ip, [r5, #3245]	; 0xcad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    4ff2:	strb.w	r8, [r5, #3252]	; 0xcb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    4ff6:	str.w	r1, [r5, #3256]	; 0xcb8
      _s = s;
    4ffa:	mvn.w	r1, #41	; 0x29
      _b = b;
    4ffe:	strb.w	ip, [r5, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5002:	strb.w	r1, [r5, #3260]	; 0xcbc
      _b = b;
    5006:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    500a:	str.w	r3, [r5, #3272]	; 0xcc8
      _s = s;
      _b = b;
    500e:	strb.w	r1, [r5, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5012:	movs	r1, #231	; 0xe7
      _s = s;
    5014:	strb.w	r6, [r5, #3276]	; 0xccc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5018:	str.w	r1, [r5, #3264]	; 0xcc0
      _s = s;
    501c:	mvn.w	r1, #65	; 0x41
    5020:	strb.w	r7, [r5, #3284]	; 0xcd4
    5024:	strb.w	r1, [r5, #3268]	; 0xcc4
      _b = b;
    5028:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    502c:	strb.w	r8, [r5, #3300]	; 0xce4
      _b = b;
    5030:	strb.w	r1, [r5, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5034:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    5036:	strb.w	ip, [r5, #3301]	; 0xce5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    503a:	str.w	r1, [r5, #3280]	; 0xcd0
      _s = s;
      _b = b;
    503e:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5042:	strb.w	r8, [r5, #3308]	; 0xcec
      _b = b;
    5046:	strb.w	r1, [r5, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    504a:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    504e:	strb.w	ip, [r5, #3309]	; 0xced
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5052:	str.w	r1, [r5, #3288]	; 0xcd8
      _s = s;
    5056:	mvn.w	r1, #103	; 0x67
    505a:	strb.w	lr, [r5, #3316]	; 0xcf4
    505e:	strb.w	r1, [r5, #3292]	; 0xcdc
      _b = b;
    5062:	mov.w	r1, #104	; 0x68
    5066:	strb.w	r3, [r5, #3317]	; 0xcf5
    506a:	strb.w	r1, [r5, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    506e:	movs	r1, #5
      _s = s;
    5070:	strb.w	lr, [r5, #3324]	; 0xcfc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5074:	str.w	r1, [r5, #3296]	; 0xce0
    5078:	str.w	r1, [r5, #3304]	; 0xce8
    507c:	movw	r1, #359	; 0x167
      _s = s;
      _b = b;
    5080:	strb.w	r3, [r5, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5084:	str.w	r1, [r5, #3312]	; 0xcf0
    5088:	str.w	r1, [r5, #3320]	; 0xcf8
    508c:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    5090:	strb.w	fp, [r5, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5094:	str.w	r1, [r5, #3328]	; 0xd00
      _s = s;
    5098:	mvn.w	r1, #41	; 0x29
    509c:	strb.w	r1, [r5, #3332]	; 0xd04
      _b = b;
    50a0:	mov.w	r1, #112	; 0x70
    50a4:	strb.w	r1, [r5, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50a8:	movs	r1, #223	; 0xdf
    50aa:	str.w	r1, [r5, #3336]	; 0xd08
      _s = s;
      _b = b;
    50ae:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    50b2:	strb.w	r7, [r5, #3340]	; 0xd0c
      _b = b;
    50b6:	strb.w	r1, [r5, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50ba:	movw	r1, #343	; 0x157
    50be:	str.w	r3, [r5, #3344]	; 0xd10
    50c2:	str.w	r1, [r5, #3376]	; 0xd30
      _s = s;
    50c6:	mvn.w	r1, #41	; 0x29
    50ca:	strb.w	r6, [r5, #3348]	; 0xd14
    50ce:	strb.w	r1, [r5, #3380]	; 0xd34
      _b = b;
    50d2:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50d6:	str.w	r3, [r5, #3352]	; 0xd18
      _s = s;
      _b = b;
    50da:	strb.w	r1, [r5, #3381]	; 0xd35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50de:	movs	r1, #5
      _s = s;
    50e0:	strb.w	r6, [r5, #3356]	; 0xd1c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50e4:	str.w	r1, [r5, #3384]	; 0xd38
    50e8:	movw	r1, #287	; 0x11f
    50ec:	str.w	r3, [r5, #3360]	; 0xd20
    50f0:	str.w	r1, [r5, #3392]	; 0xd40
    50f4:	movs	r1, #186	; 0xba
      _s = s;
    50f6:	strb.w	r6, [r5, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    50fa:	str.w	r1, [r5, #3400]	; 0xd48
      _s = s;
      _b = b;
    50fe:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5102:	str.w	r3, [r5, #3368]	; 0xd28
      _s = s;
      _b = b;
    5106:	strb.w	r1, [r5, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    510a:	movs	r1, #223	; 0xdf
      _s = s;
    510c:	strb.w	r6, [r5, #3372]	; 0xd2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5110:	str.w	r1, [r5, #3408]	; 0xd50
      _s = s;
      _b = b;
    5114:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5118:	strb.w	r8, [r5, #3388]	; 0xd3c
      _b = b;
    511c:	strb.w	r1, [r5, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5120:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    5122:	strb.w	ip, [r5, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5126:	str.w	r1, [r5, #3416]	; 0xd58
      _s = s;
    512a:	mvn.w	r1, #65	; 0x41
    512e:	strb.w	r9, [r5, #3396]	; 0xd44
    5132:	strb.w	r1, [r5, #3420]	; 0xd5c
      _b = b;
    5136:	mvn.w	r1, #62	; 0x3e
    513a:	strb.w	r6, [r5, #3397]	; 0xd45
    513e:	strb.w	r1, [r5, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5142:	movw	r1, #287	; 0x11f
      _s = s;
    5146:	strb.w	sl, [r5, #3404]	; 0xd4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    514a:	str.w	r1, [r5, #3424]	; 0xd60
    514e:	movs	r1, #5
      _s = s;
    5150:	strb.w	r7, [r5, #3412]	; 0xd54
      _b = b;
    5154:	strb.w	fp, [r5, #3349]	; 0xd15
    5158:	strb.w	fp, [r5, #3357]	; 0xd1d
    515c:	strb.w	fp, [r5, #3365]	; 0xd25
    5160:	strb.w	fp, [r5, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5164:	strb.w	r9, [r5, #3428]	; 0xd64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5168:	str.w	r1, [r5, #3432]	; 0xd68
    516c:	movw	r1, #343	; 0x157
      _s = s;
      _b = b;
    5170:	strb.w	r6, [r5, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5174:	str.w	r1, [r5, #3440]	; 0xd70
      _s = s;
    5178:	mvn.w	r1, #41	; 0x29
    517c:	strb.w	r8, [r5, #3436]	; 0xd6c
    5180:	strb.w	r1, [r5, #3444]	; 0xd74
      _b = b;
    5184:	mov.w	r1, #112	; 0x70
    5188:	strb.w	ip, [r5, #3437]	; 0xd6d
    518c:	strb.w	r1, [r5, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5190:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5194:	str.w	r2, [r5, #3448]	; 0xd78
      _s = s;
    5198:	strb.w	r1, [r5, #3452]	; 0xd7c
      _b = b;
    519c:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    51a0:	strb.w	r8, [r5, #3468]	; 0xd8c
      _b = b;
    51a4:	strb.w	r1, [r5, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51a8:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    51ac:	strb.w	ip, [r5, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51b0:	str.w	r1, [r5, #3456]	; 0xd80
      _s = s;
    51b4:	mvn.w	r1, #103	; 0x67
    51b8:	strb.w	r7, [r5, #3484]	; 0xd9c
    51bc:	strb.w	r1, [r5, #3460]	; 0xd84
      _b = b;
    51c0:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51c4:	str.w	r3, [r5, #3488]	; 0xda0
      _s = s;
      _b = b;
    51c8:	strb.w	r1, [r5, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51cc:	movs	r1, #5
      _s = s;
    51ce:	strb.w	r6, [r5, #3492]	; 0xda4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51d2:	str.w	r1, [r5, #3464]	; 0xd88
    51d6:	movw	r1, #343	; 0x157
    51da:	str.w	r3, [r5, #3496]	; 0xda8
    51de:	str.w	r1, [r5, #3472]	; 0xd90
      _s = s;
    51e2:	mvn.w	r1, #41	; 0x29
    51e6:	strb.w	r6, [r5, #3500]	; 0xdac
    51ea:	strb.w	r1, [r5, #3476]	; 0xd94
      _b = b;
    51ee:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    51f2:	strb.w	r9, [r5, #3508]	; 0xdb4
      _b = b;
    51f6:	strb.w	r1, [r5, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    51fa:	movs	r1, #223	; 0xdf
      _s = s;
      _b = b;
    51fc:	strb.w	r6, [r5, #3509]	; 0xdb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5200:	str.w	r1, [r5, #3480]	; 0xd98
      _s = s;
      _b = b;
    5204:	mvn.w	r1, #33	; 0x21
    5208:	strb.w	fp, [r5, #3493]	; 0xda5
    520c:	strb.w	r1, [r5, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5210:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    5214:	strb.w	fp, [r5, #3501]	; 0xdad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5218:	str.w	r1, [r5, #3504]	; 0xdb0
    521c:	movw	r1, #359	; 0x167
    5220:	str.w	r1, [r5, #3512]	; 0xdb8
    5224:	movs	r1, #223	; 0xdf
      _s = s;
    5226:	strb.w	lr, [r5, #3516]	; 0xdbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    522a:	mov	r0, r1
    522c:	str.w	r1, [r5, #3520]	; 0xdc0
      _s = s;
      _b = b;
    5230:	mvn.w	r1, #33	; 0x21
    5234:	strb.w	r3, [r5, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5238:	strb.w	r7, [r5, #3524]	; 0xdc4
      _b = b;
    523c:	strb.w	r1, [r5, #3525]	; 0xdc5
    5240:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5244:	str.w	r0, [r5, #3528]	; 0xdc8
      _s = s;
      _b = b;
    5248:	strb.w	r1, [r5, #3533]	; 0xdcd
    524c:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5250:	strb.w	r7, [r5, #3532]	; 0xdcc
      _b = b;
    5254:	strb.w	r1, [r5, #3541]	; 0xdd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5258:	movs	r1, #231	; 0xe7
    525a:	str.w	r0, [r5, #3536]	; 0xdd0
    525e:	str.w	r1, [r5, #3568]	; 0xdf0
      _s = s;
    5262:	mvn.w	r1, #65	; 0x41
    5266:	strb.w	r7, [r5, #3540]	; 0xdd4
    526a:	strb.w	r1, [r5, #3572]	; 0xdf4
      _b = b;
    526e:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5272:	str.w	r3, [r5, #3544]	; 0xdd8
      _s = s;
      _b = b;
    5276:	strb.w	r1, [r5, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    527a:	movw	r1, #359	; 0x167
      _s = s;
    527e:	strb.w	r6, [r5, #3548]	; 0xddc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5282:	str.w	r1, [r5, #3576]	; 0xdf8
    5286:	str.w	r1, [r5, #3584]	; 0xe00
    528a:	movs	r1, #5
    528c:	str.w	r3, [r5, #3552]	; 0xde0
    5290:	str.w	r1, [r5, #3592]	; 0xe08
    5294:	str.w	r1, [r5, #3600]	; 0xe10
    5298:	movs	r1, #223	; 0xdf
      _s = s;
    529a:	strb.w	r6, [r5, #3556]	; 0xde4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    529e:	mov	r0, r1
    52a0:	str.w	r3, [r5, #3560]	; 0xde8
      _s = s;
    52a4:	strb.w	r6, [r5, #3564]	; 0xdec
    52a8:	strb.w	lr, [r5, #3580]	; 0xdfc
      _b = b;
    52ac:	strb.w	r3, [r5, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52b0:	strb.w	lr, [r5, #3588]	; 0xe04
      _b = b;
    52b4:	strb.w	r3, [r5, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52b8:	strb.w	r8, [r5, #3596]	; 0xe0c
      _b = b;
    52bc:	strb.w	ip, [r5, #3597]	; 0xe0d
    52c0:	strb.w	fp, [r5, #3549]	; 0xddd
    52c4:	strb.w	fp, [r5, #3557]	; 0xde5
    52c8:	strb.w	fp, [r5, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52cc:	strb.w	r8, [r5, #3604]	; 0xe14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52d0:	str.w	r1, [r5, #3608]	; 0xe18
      _s = s;
      _b = b;
    52d4:	mvn.w	r1, #33	; 0x21
    52d8:	strb.w	ip, [r5, #3605]	; 0xe15
    52dc:	strb.w	r1, [r5, #3613]	; 0xe1d
    52e0:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    52e4:	strb.w	r7, [r5, #3612]	; 0xe1c
      _b = b;
    52e8:	strb.w	r1, [r5, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    52ec:	movw	r1, #261	; 0x105
    52f0:	str.w	r0, [r5, #3616]	; 0xe20
    52f4:	str.w	r1, [r5, #3624]	; 0xe28
      _s = s;
    52f8:	mvn.w	r1, #103	; 0x67
    52fc:	strb.w	r7, [r5, #3620]	; 0xe24
    5300:	strb.w	r1, [r5, #3628]	; 0xe2c
      _b = b;
    5304:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5308:	str.w	r2, [r5, #3632]	; 0xe30
      _s = s;
      _b = b;
    530c:	strb.w	r1, [r5, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5310:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5314:	str.w	r2, [r5, #3640]	; 0xe38
      _s = s;
    5318:	strb.w	r1, [r5, #3636]	; 0xe34
      _b = b;
    531c:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5320:	strb.w	r8, [r5, #3652]	; 0xe44
      _b = b;
    5324:	strb.w	r1, [r5, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5328:	mov.w	r1, #4294967295
      _b = b;
    532c:	strb.w	ip, [r5, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5330:	strb.w	r1, [r5, #3644]	; 0xe3c
      _b = b;
    5334:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5338:	strb.w	r8, [r5, #3660]	; 0xe4c
      _b = b;
    533c:	strb.w	r1, [r5, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5340:	movs	r1, #5
      _s = s;
      _b = b;
    5342:	strb.w	ip, [r5, #3661]	; 0xe4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5346:	str.w	r1, [r5, #3648]	; 0xe40
    534a:	str.w	r1, [r5, #3656]	; 0xe48
    534e:	movw	r1, #261	; 0x105
    5352:	str.w	r3, [r5, #3664]	; 0xe50
      _s = s;
    5356:	strb.w	r6, [r5, #3668]	; 0xe54
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    535a:	str.w	r3, [r5, #3672]	; 0xe58
      _s = s;
    535e:	strb.w	r6, [r5, #3676]	; 0xe5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5362:	str.w	r3, [r5, #3680]	; 0xe60
      _s = s;
    5366:	strb.w	r6, [r5, #3684]	; 0xe64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    536a:	str.w	r3, [r5, #3688]	; 0xe68
      _s = s;
      _b = b;
    536e:	strb.w	fp, [r5, #3669]	; 0xe55
    5372:	strb.w	fp, [r5, #3677]	; 0xe5d
    5376:	strb.w	fp, [r5, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    537a:	strb.w	r6, [r5, #3692]	; 0xe6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    537e:	str.w	r1, [r5, #3704]	; 0xe78
      _s = s;
    5382:	mvn.w	r1, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5386:	str.w	r3, [r5, #3696]	; 0xe70
      _s = s;
    538a:	strb.w	r1, [r5, #3708]	; 0xe7c
      _b = b;
    538e:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5392:	strb.w	r6, [r5, #3700]	; 0xe74
      _b = b;
    5396:	strb.w	r1, [r5, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    539a:	movs	r1, #223	; 0xdf
      _s = s;
    539c:	strb.w	r7, [r5, #3716]	; 0xe84
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53a0:	mov	r0, r1
    53a2:	str.w	r1, [r5, #3712]	; 0xe80
      _s = s;
      _b = b;
    53a6:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53aa:	strb.w	r7, [r5, #3724]	; 0xe8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ae:	str.w	r0, [r5, #3720]	; 0xe88
      _s = s;
      _b = b;
    53b2:	strb.w	r1, [r5, #3717]	; 0xe85
    53b6:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53ba:	strb.w	r9, [r5, #3732]	; 0xe94
      _b = b;
    53be:	strb.w	r1, [r5, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53c2:	movw	r1, #287	; 0x11f
      _s = s;
      _b = b;
    53c6:	strb.w	r6, [r5, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ca:	str.w	r1, [r5, #3728]	; 0xe90
    53ce:	str.w	r1, [r5, #3736]	; 0xe98
    53d2:	movs	r1, #231	; 0xe7
      _s = s;
    53d4:	strb.w	r9, [r5, #3740]	; 0xe9c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53d8:	str.w	r1, [r5, #3744]	; 0xea0
      _s = s;
    53dc:	mvn.w	r1, #65	; 0x41
      _b = b;
    53e0:	strb.w	r6, [r5, #3741]	; 0xe9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    53e4:	strb.w	r1, [r5, #3748]	; 0xea4
      _b = b;
    53e8:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53ec:	str.w	r3, [r5, #3752]	; 0xea8
      _s = s;
      _b = b;
    53f0:	strb.w	r1, [r5, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53f4:	movw	r1, #261	; 0x105
      _s = s;
    53f8:	strb.w	r6, [r5, #3756]	; 0xeac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    53fc:	mov	r0, r1
    53fe:	str.w	r1, [r5, #3760]	; 0xeb0
      _s = s;
    5402:	mvn.w	r1, #103	; 0x67
      _b = b;
    5406:	strb.w	fp, [r5, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    540a:	str.w	r0, [r5, #3768]	; 0xeb8
      _s = s;
    540e:	strb.w	r1, [r5, #3764]	; 0xeb4
      _b = b;
    5412:	mov.w	r1, #104	; 0x68
    5416:	strb.w	fp, [r5, #3701]	; 0xe75
    541a:	strb.w	r1, [r5, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    541e:	mvn.w	r1, #103	; 0x67
      _b = b;
    5422:	strb.w	fp, [r5, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5426:	strb.w	r1, [r5, #3772]	; 0xebc
      _b = b;
    542a:	mov.w	r1, #104	; 0x68
    542e:	strb.w	r1, [r5, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5432:	movw	r1, #287	; 0x11f
    5436:	str.w	r1, [r5, #3776]	; 0xec0
      _s = s;
    543a:	strb.w	r9, [r5, #3780]	; 0xec4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    543e:	str.w	r1, [r5, #3784]	; 0xec8
    5442:	movs	r1, #5
      _s = s;
      _b = b;
    5444:	strb.w	r6, [r5, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5448:	str.w	r1, [r5, #3792]	; 0xed0
    544c:	str.w	r1, [r5, #3800]	; 0xed8
    5450:	movw	r1, #261	; 0x105
      _s = s;
    5454:	strb.w	r9, [r5, #3788]	; 0xecc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5458:	str.w	r1, [r5, #3808]	; 0xee0
      _s = s;
    545c:	mvn.w	r1, #103	; 0x67
      _b = b;
    5460:	strb.w	r6, [r5, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5464:	strb.w	r1, [r5, #3812]	; 0xee4
      _b = b;
    5468:	mov.w	r1, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    546c:	strb.w	r8, [r5, #3796]	; 0xed4
      _b = b;
    5470:	strb.w	r1, [r5, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5474:	mov.w	r1, #4294967295
      _b = b;
    5478:	strb.w	ip, [r5, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    547c:	strb.w	r1, [r5, #3820]	; 0xeec
      _b = b;
    5480:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5484:	strb.w	r8, [r5, #3804]	; 0xedc
      _b = b;
    5488:	mov.w	r8, #176	; 0xb0
    548c:	strb.w	r1, [r5, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5490:	mov.w	r1, #4294967295
      _b = b;
    5494:	strb.w	ip, [r5, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5498:	mov.w	ip, #140	; 0x8c
    549c:	strb.w	r1, [r5, #3828]	; 0xef4
      _b = b;
    54a0:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54a4:	str.w	r2, [r5, #3816]	; 0xee8
      _s = s;
      _b = b;
    54a8:	strb.w	r1, [r5, #3829]	; 0xef5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    54ac:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54b0:	str.w	r2, [r5, #3824]	; 0xef0
      _s = s;
    54b4:	strb.w	r1, [r5, #3836]	; 0xefc
      _b = b;
    54b8:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54bc:	str.w	r2, [r5, #3832]	; 0xef8
      _s = s;
      _b = b;
    54c0:	strb.w	r1, [r5, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54c4:	movw	r1, #343	; 0x157
    54c8:	str.w	r3, [r5, #3848]	; 0xf08
    54cc:	str.w	r1, [r5, #3840]	; 0xf00
      _s = s;
    54d0:	mvn.w	r1, #41	; 0x29
    54d4:	strb.w	r6, [r5, #3852]	; 0xf0c
    54d8:	strb.w	r1, [r5, #3844]	; 0xf04
      _b = b;
    54dc:	mov.w	r1, #112	; 0x70
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54e0:	str.w	r3, [r5, #3856]	; 0xf10
      _s = s;
      _b = b;
    54e4:	strb.w	r1, [r5, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54e8:	movs	r1, #231	; 0xe7
      _s = s;
    54ea:	strb.w	r6, [r5, #3860]	; 0xf14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    54ee:	str.w	r1, [r5, #3864]	; 0xf18
      _s = s;
    54f2:	mvn.w	r1, #65	; 0x41
      _b = b;
    54f6:	strb.w	fp, [r5, #3853]	; 0xf0d
    54fa:	strb.w	fp, [r5, #3861]	; 0xf15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    54fe:	strb.w	r1, [r5, #3868]	; 0xf1c
      _b = b;
    5502:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5506:	strb.w	r7, [r5, #3876]	; 0xf24
      _b = b;
    550a:	strb.w	r1, [r5, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    550e:	movs	r1, #223	; 0xdf
    5510:	str.w	r3, [r5, #3888]	; 0xf30
    5514:	str.w	r1, [r5, #3872]	; 0xf20
      _s = s;
      _b = b;
    5518:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    551c:	strb.w	r6, [r5, #3892]	; 0xf34
      _b = b;
    5520:	strb.w	r1, [r5, #3877]	; 0xf25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5524:	movs	r1, #231	; 0xe7
      _s = s;
    5526:	strb.w	r9, [r5, #3908]	; 0xf44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    552a:	mov	r0, r1
    552c:	str.w	r1, [r5, #3880]	; 0xf28
      _s = s;
    5530:	mvn.w	r1, #65	; 0x41
      _b = b;
    5534:	strb.w	r6, [r5, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5538:	str.w	r0, [r5, #3896]	; 0xf38
      _s = s;
    553c:	strb.w	r1, [r5, #3884]	; 0xf2c
      _b = b;
    5540:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5544:	strb.w	r9, [r5, #3924]	; 0xf54
      _b = b;
    5548:	strb.w	r1, [r5, #3885]	; 0xf2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    554c:	mvn.w	r1, #65	; 0x41
      _b = b;
    5550:	strb.w	r6, [r5, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5554:	strb.w	r1, [r5, #3900]	; 0xf3c
      _b = b;
    5558:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    555c:	strb.w	sl, [r5, #3932]	; 0xf5c
      _b = b;
    5560:	strb.w	r1, [r5, #3901]	; 0xf3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5564:	movw	r1, #287	; 0x11f
      _s = s;
    5568:	strb.w	r7, [r5, #3948]	; 0xf6c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    556c:	str.w	r1, [r5, #3904]	; 0xf40
    5570:	movw	r1, #261	; 0x105
    5574:	str.w	r3, [r5, #3952]	; 0xf70
    5578:	str.w	r1, [r5, #3912]	; 0xf48
      _s = s;
    557c:	mvn.w	r1, #103	; 0x67
      _b = b;
    5580:	strb.w	fp, [r5, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5584:	strb.w	r1, [r5, #3916]	; 0xf4c
      _b = b;
    5588:	mov.w	r1, #104	; 0x68
    558c:	strb.w	r1, [r5, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5590:	movw	r1, #287	; 0x11f
    5594:	str.w	r1, [r5, #3920]	; 0xf50
    5598:	movs	r1, #186	; 0xba
    559a:	str.w	r1, [r5, #3928]	; 0xf58
      _s = s;
      _b = b;
    559e:	mvn.w	r1, #24
    55a2:	strb.w	r1, [r5, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55a6:	movs	r1, #231	; 0xe7
    55a8:	str.w	r1, [r5, #3936]	; 0xf60
      _s = s;
    55ac:	mvn.w	r1, #65	; 0x41
    55b0:	strb.w	r1, [r5, #3940]	; 0xf64
      _b = b;
    55b4:	mvn.w	r1, #62	; 0x3e
    55b8:	strb.w	r1, [r5, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55bc:	movs	r1, #223	; 0xdf
    55be:	mov	r0, r1
    55c0:	str.w	r1, [r5, #3944]	; 0xf68
      _s = s;
      _b = b;
    55c4:	mvn.w	r1, #33	; 0x21
    55c8:	strb.w	r1, [r5, #3949]	; 0xf6d
    55cc:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55d0:	strb.w	r6, [r5, #3956]	; 0xf74
      _b = b;
    55d4:	strb.w	r1, [r5, #3981]	; 0xf8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55d8:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55dc:	str.w	r3, [r5, #3960]	; 0xf78
      _s = s;
    55e0:	strb.w	r1, [r5, #3988]	; 0xf94
      _b = b;
    55e4:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55e8:	strb.w	r6, [r5, #3964]	; 0xf7c
      _b = b;
    55ec:	strb.w	r1, [r5, #3989]	; 0xf95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    55f0:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    55f4:	str.w	r3, [r5, #3968]	; 0xf80
      _s = s;
    55f8:	strb.w	r1, [r5, #3996]	; 0xf9c
      _b = b;
    55fc:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5600:	strb.w	r6, [r5, #3972]	; 0xf84
      _b = b;
    5604:	strb.w	r1, [r5, #3997]	; 0xf9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5608:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    560c:	str.w	r0, [r5, #3976]	; 0xf88
    5610:	add.w	r0, r5, #4096	; 0x1000
      _s = s;
    5614:	strb.w	r1, [r5, #4004]	; 0xfa4
      _b = b;
    5618:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    561c:	strb.w	r7, [r5, #3980]	; 0xf8c
      _b = b;
    5620:	strb.w	r1, [r5, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5624:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5628:	str.w	r2, [r5, #3984]	; 0xf90
      _s = s;
    562c:	strb.w	r1, [r5, #4012]	; 0xfac
      _b = b;
    5630:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5634:	str.w	r2, [r5, #3992]	; 0xf98
      _s = s;
      _b = b;
    5638:	strb.w	r1, [r5, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    563c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5640:	str.w	r2, [r5, #4000]	; 0xfa0
      _s = s;
    5644:	strb.w	r1, [r5, #4020]	; 0xfb4
      _b = b;
    5648:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    564c:	str.w	r2, [r5, #4008]	; 0xfa8
      _s = s;
      _b = b;
    5650:	strb.w	r1, [r5, #4021]	; 0xfb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5654:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5658:	str.w	r2, [r5, #4016]	; 0xfb0
      _s = s;
    565c:	strb.w	r1, [r5, #4028]	; 0xfbc
      _b = b;
    5660:	mov.w	r1, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5664:	str.w	r2, [r5, #4024]	; 0xfb8
      _s = s;
      _b = b;
    5668:	strb.w	r1, [r5, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    566c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5670:	str.w	r2, [r5, #4032]	; 0xfc0
      _s = s;
    5674:	strb.w	r1, [r5, #4036]	; 0xfc4
      _b = b;
    5678:	mov.w	r1, #0
    567c:	strb.w	fp, [r5, #3957]	; 0xf75
    5680:	strb.w	r1, [r5, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5684:	movs	r1, #231	; 0xe7
      _s = s;
      _b = b;
    5686:	strb.w	fp, [r5, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    568a:	str.w	r1, [r5, #4040]	; 0xfc8
      _s = s;
    568e:	mvn.w	r1, #65	; 0x41
      _b = b;
    5692:	strb.w	fp, [r5, #3973]	; 0xf85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5696:	strb.w	r1, [r5, #4044]	; 0xfcc
      _b = b;
    569a:	mvn.w	r1, #62	; 0x3e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    569e:	str.w	r3, [r5, #4048]	; 0xfd0
      _s = s;
      _b = b;
    56a2:	strb.w	r1, [r5, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56a6:	movs	r1, #223	; 0xdf
      _s = s;
    56a8:	strb.w	r6, [r5, #4052]	; 0xfd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ac:	str.w	r1, [r5, #4056]	; 0xfd8
      _s = s;
      _b = b;
    56b0:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56b4:	strb.w	r7, [r5, #4060]	; 0xfdc
      _b = b;
    56b8:	strb.w	r1, [r5, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56bc:	movs	r1, #186	; 0xba
      _s = s;
    56be:	strb.w	sl, [r5, #4068]	; 0xfe4
    56c2:	mov.w	sl, #131	; 0x83
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56c6:	str.w	r1, [r5, #4064]	; 0xfe0
      _s = s;
      _b = b;
    56ca:	mvn.w	r1, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56ce:	strb.w	r7, [r5, #4076]	; 0xfec
      _b = b;
    56d2:	strb.w	r1, [r5, #4069]	; 0xfe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56d6:	movs	r1, #223	; 0xdf
    56d8:	str.w	r3, [r5, #4080]	; 0xff0
    56dc:	str.w	r1, [r5, #4072]	; 0xfe8
      _s = s;
      _b = b;
    56e0:	mvn.w	r1, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    56e4:	strb.w	r6, [r5, #4084]	; 0xff4
      _b = b;
    56e8:	strb.w	r1, [r5, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56ec:	movw	r1, #261	; 0x105
      _s = s;
      _b = b;
    56f0:	strb.w	fp, [r5, #4053]	; 0xfd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    56f4:	str.w	r1, [r5, #4088]	; 0xff8
      _s = s;
    56f8:	mvn.w	r1, #103	; 0x67
      _b = b;
    56fc:	strb.w	fp, [r5, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5700:	strb.w	r1, [r5, #4092]	; 0xffc
      _b = b;
    5704:	mov.w	r1, #104	; 0x68
    5708:	strb.w	r1, [r5, #4093]	; 0xffd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    570c:	mov	r1, r0
    570e:	movs	r0, #223	; 0xdf
    5710:	str.w	r0, [r1], #32
    5714:	mov	r0, r1
      _s = s;
    5716:	movw	r1, #4100	; 0x1004
    571a:	strb	r7, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    571c:	mov	r1, r0
    571e:	movs	r0, #231	; 0xe7
    5720:	str	r0, [r1, #0]
      _s = s;
      _b = b;
    5722:	movw	r1, #4101	; 0x1005
    5726:	mvn.w	r0, #33	; 0x21
    572a:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    572c:	movw	r1, #4104	; 0x1008
    5730:	movs	r0, #223	; 0xdf
    5732:	str	r0, [r5, r1]
      _s = s;
    5734:	movw	r1, #4108	; 0x100c
      _b = b;
    5738:	mvn.w	r0, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    573c:	strb	r7, [r5, r1]
      _b = b;
    573e:	movw	r1, #4109	; 0x100d
    5742:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5744:	movw	r1, #4112	; 0x1010
    5748:	movw	r0, #261	; 0x105
    574c:	str	r0, [r5, r1]
      _s = s;
    574e:	movw	r1, #4116	; 0x1014
    5752:	mvn.w	r0, #103	; 0x67
    5756:	strb	r0, [r5, r1]
      _b = b;
    5758:	movw	r1, #4117	; 0x1015
    575c:	mov.w	r0, #104	; 0x68
    5760:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5762:	movw	r1, #4120	; 0x1018
    5766:	movs	r0, #231	; 0xe7
    5768:	str	r0, [r5, r1]
      _s = s;
    576a:	movw	r1, #4124	; 0x101c
    576e:	mvn.w	r0, #65	; 0x41
    5772:	strb	r0, [r5, r1]
      _b = b;
    5774:	movw	r1, #4125	; 0x101d
    5778:	mvn.w	r0, #62	; 0x3e
    577c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    577e:	movw	r1, #4132	; 0x1024
    5782:	mvn.w	r0, #65	; 0x41
    5786:	strb	r0, [r5, r1]
      _b = b;
    5788:	movw	r1, #4133	; 0x1025
    578c:	mvn.w	r0, #62	; 0x3e
    5790:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5792:	add.w	r0, r5, #4096	; 0x1000
    5796:	movw	r1, #4136	; 0x1028
    579a:	str	r2, [r0, #64]	; 0x40
    579c:	str	r2, [r0, #96]	; 0x60
    579e:	movs	r0, #231	; 0xe7
    57a0:	str	r0, [r5, r1]
      _s = s;
    57a2:	movw	r1, #4140	; 0x102c
    57a6:	mvn.w	r0, #65	; 0x41
    57aa:	strb	r0, [r5, r1]
      _b = b;
    57ac:	movw	r1, #4141	; 0x102d
    57b0:	mvn.w	r0, #62	; 0x3e
    57b4:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57b6:	movw	r1, #4144	; 0x1030
    57ba:	movs	r0, #231	; 0xe7
    57bc:	str	r0, [r5, r1]
      _s = s;
    57be:	movw	r1, #4148	; 0x1034
    57c2:	mvn.w	r0, #65	; 0x41
    57c6:	strb	r0, [r5, r1]
      _b = b;
    57c8:	movw	r1, #4149	; 0x1035
    57cc:	mvn.w	r0, #62	; 0x3e
    57d0:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    57d2:	movw	r1, #4152	; 0x1038
    57d6:	movw	r0, #261	; 0x105
    57da:	str	r0, [r5, r1]
      _s = s;
    57dc:	movw	r1, #4156	; 0x103c
    57e0:	mvn.w	r0, #103	; 0x67
    57e4:	strb	r0, [r5, r1]
      _b = b;
    57e6:	movw	r1, #4157	; 0x103d
    57ea:	mov.w	r0, #104	; 0x68
    57ee:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    57f0:	movw	r1, #4164	; 0x1044
    57f4:	mov.w	r0, #4294967295
    57f8:	strb	r0, [r5, r1]
      _b = b;
    57fa:	movw	r1, #4165	; 0x1045
    57fe:	mov.w	r0, #0
    5802:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5804:	movw	r1, #4168	; 0x1048
      _s = s;
    5808:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    580c:	str	r2, [r5, r1]
      _s = s;
    580e:	movw	r1, #4172	; 0x104c
    5812:	strb	r0, [r5, r1]
      _b = b;
    5814:	movw	r1, #4173	; 0x104d
    5818:	mov.w	r0, #0
    581c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    581e:	movw	r1, #4176	; 0x1050
      _s = s;
    5822:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5826:	str	r2, [r5, r1]
      _s = s;
    5828:	movw	r1, #4180	; 0x1054
    582c:	strb	r0, [r5, r1]
      _b = b;
    582e:	movw	r1, #4181	; 0x1055
    5832:	mov.w	r0, #0
    5836:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5838:	movw	r1, #4184	; 0x1058
      _s = s;
    583c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5840:	str	r2, [r5, r1]
      _s = s;
    5842:	movw	r1, #4188	; 0x105c
    5846:	strb	r0, [r5, r1]
      _b = b;
    5848:	movw	r1, #4189	; 0x105d
    584c:	mov.w	r0, #1
    5850:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5852:	movw	r1, #4196	; 0x1064
    5856:	mov.w	r0, #4294967295
    585a:	strb	r0, [r5, r1]
      _b = b;
    585c:	movw	r1, #4197	; 0x1065
    5860:	mov.w	r0, #0
    5864:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5866:	movw	r1, #4200	; 0x1068
      _s = s;
    586a:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    586e:	str	r2, [r5, r1]
      _s = s;
    5870:	movw	r1, #4204	; 0x106c
    5874:	strb	r0, [r5, r1]
      _b = b;
    5876:	movw	r1, #4205	; 0x106d
    587a:	mov.w	r0, #0
    587e:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5880:	movw	r1, #4208	; 0x1070
      _s = s;
    5884:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5888:	str	r2, [r5, r1]
      _s = s;
    588a:	movw	r1, #4212	; 0x1074
    588e:	strb	r0, [r5, r1]
      _b = b;
    5890:	movw	r1, #4213	; 0x1075
    5894:	mov.w	r0, #0
    5898:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    589a:	movw	r1, #4216	; 0x1078
      _s = s;
    589e:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58a2:	str	r2, [r5, r1]
      _s = s;
    58a4:	movw	r1, #4220	; 0x107c
    58a8:	strb	r0, [r5, r1]
      _b = b;
    58aa:	movw	r1, #4221	; 0x107d
    58ae:	mov.w	r0, #0
    58b2:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58b4:	add.w	r0, r5, #4096	; 0x1000
    58b8:	movw	r1, #287	; 0x11f
    58bc:	str.w	r2, [r0, #128]	; 0x80
    58c0:	str.w	r1, [r0, #160]	; 0xa0
    58c4:	mov	r1, r0
    58c6:	movs	r0, #223	; 0xdf
    58c8:	str.w	r0, [r1, #192]	; 0xc0
      _s = s;
    58cc:	movw	r1, #4260	; 0x10a4
    58d0:	mov.w	r0, #4294967295
    58d4:	strb.w	r9, [r5, r1]
    58d8:	movw	r1, #4228	; 0x1084
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58dc:	mov.w	r9, #138	; 0x8a
      _s = s;
    58e0:	strb	r0, [r5, r1]
      _b = b;
    58e2:	movw	r1, #4229	; 0x1085
    58e6:	mov.w	r0, #0
    58ea:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58ec:	movw	r1, #4232	; 0x1088
      _s = s;
    58f0:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    58f4:	str	r2, [r5, r1]
      _s = s;
    58f6:	movw	r1, #4236	; 0x108c
    58fa:	strb	r0, [r5, r1]
      _b = b;
    58fc:	movw	r1, #4237	; 0x108d
    5900:	mov.w	r0, #0
    5904:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5906:	movw	r1, #4240	; 0x1090
      _s = s;
    590a:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    590e:	str	r2, [r5, r1]
      _s = s;
    5910:	movw	r1, #4244	; 0x1094
    5914:	strb	r0, [r5, r1]
      _b = b;
    5916:	movw	r1, #4245	; 0x1095
    591a:	mov.w	r0, #0
    591e:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5920:	movw	r0, #4248	; 0x1098
    5924:	movw	r1, #261	; 0x105
    5928:	str	r1, [r5, r0]
      _s = s;
    592a:	movw	r1, #4252	; 0x109c
    592e:	mvn.w	r0, #103	; 0x67
    5932:	strb	r0, [r5, r1]
      _b = b;
    5934:	movw	r1, #4253	; 0x109d
    5938:	mov.w	r0, #104	; 0x68
    593c:	strb	r0, [r5, r1]
    593e:	movw	r1, #4261	; 0x10a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5942:	movw	r0, #4264	; 0x10a8
      _s = s;
      _b = b;
    5946:	strb	r6, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5948:	movw	r1, #4276	; 0x10b4
    594c:	strb	r6, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    594e:	movs	r1, #231	; 0xe7
      _s = s;
    5950:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5954:	str	r1, [r5, r0]
      _s = s;
    5956:	mvn.w	r0, #65	; 0x41
    595a:	movw	r1, #4268	; 0x10ac
    595e:	strb	r0, [r5, r1]
    5960:	movw	r1, #4308	; 0x10d4
    5964:	strb	r0, [r5, r1]
      _b = b;
    5966:	movw	r1, #4269	; 0x10ad
    596a:	mvn.w	r0, #62	; 0x3e
    596e:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5970:	movw	r1, #4272	; 0x10b0
    5974:	movw	r0, #4280	; 0x10b8
    5978:	str	r3, [r5, r1]
      _s = s;
      _b = b;
    597a:	movw	r1, #4277	; 0x10b5
    597e:	strb.w	fp, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5982:	movw	r1, #261	; 0x105
    5986:	str	r1, [r5, r0]
      _s = s;
    5988:	movw	r1, #4284	; 0x10bc
    598c:	mvn.w	r0, #103	; 0x67
    5990:	strb	r0, [r5, r1]
      _b = b;
    5992:	movw	r1, #4285	; 0x10bd
    5996:	mov.w	r0, #104	; 0x68
    599a:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    599c:	movw	r1, #4292	; 0x10c4
      _b = b;
    59a0:	mvn.w	r0, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59a4:	strb	r7, [r5, r1]
      _b = b;
    59a6:	movw	r1, #4293	; 0x10c5
    59aa:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59ac:	movw	r0, #4296	; 0x10c8
    59b0:	movs	r1, #223	; 0xdf
    59b2:	str	r1, [r5, r0]
      _s = s;
    59b4:	movw	r1, #4300	; 0x10cc
      _b = b;
    59b8:	mvn.w	r0, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    59bc:	strb	r7, [r5, r1]
      _b = b;
    59be:	movw	r1, #4301	; 0x10cd
    59c2:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59c4:	movw	r0, #4304	; 0x10d0
    59c8:	movs	r1, #231	; 0xe7
    59ca:	str	r1, [r5, r0]
      _s = s;
      _b = b;
    59cc:	movw	r1, #4309	; 0x10d5
    59d0:	mvn.w	r0, #62	; 0x3e
    59d4:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    59d6:	add.w	r1, r5, #4096	; 0x1000
    59da:	movw	r0, #261	; 0x105
    59de:	str.w	r2, [r1, #256]	; 0x100
    59e2:	str.w	r0, [r1, #224]	; 0xe0
    59e6:	movw	r0, #4312	; 0x10d8
    59ea:	str.w	r2, [r1, #288]	; 0x120
    59ee:	movw	r1, #261	; 0x105
    59f2:	str	r1, [r5, r0]
      _s = s;
    59f4:	mvn.w	r0, #103	; 0x67
    59f8:	movw	r1, #4316	; 0x10dc
    59fc:	strb	r0, [r5, r1]
    59fe:	movw	r1, #4324	; 0x10e4
    5a02:	strb	r0, [r5, r1]
      _b = b;
    5a04:	mov.w	r0, #104	; 0x68
    5a08:	movw	r1, #4317	; 0x10dd
    5a0c:	strb	r0, [r5, r1]
    5a0e:	movw	r1, #4325	; 0x10e5
    5a12:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a14:	movw	r1, #4328	; 0x10e8
      _s = s;
    5a18:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a1c:	str	r2, [r5, r1]
      _s = s;
    5a1e:	movw	r1, #4332	; 0x10ec
    5a22:	strb	r0, [r5, r1]
      _b = b;
    5a24:	movw	r1, #4333	; 0x10ed
    5a28:	mov.w	r0, #0
    5a2c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a2e:	movw	r1, #4336	; 0x10f0
      _s = s;
    5a32:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a36:	str	r2, [r5, r1]
      _s = s;
    5a38:	movw	r1, #4340	; 0x10f4
    5a3c:	strb	r0, [r5, r1]
      _b = b;
    5a3e:	movw	r1, #4341	; 0x10f5
    5a42:	mov.w	r0, #0
    5a46:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a48:	movw	r1, #4344	; 0x10f8
      _s = s;
    5a4c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a50:	str	r2, [r5, r1]
      _s = s;
    5a52:	movw	r1, #4348	; 0x10fc
    5a56:	strb	r0, [r5, r1]
      _b = b;
    5a58:	movw	r1, #4349	; 0x10fd
    5a5c:	mov.w	r0, #0
    5a60:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5a62:	movw	r1, #4356	; 0x1104
    5a66:	mov.w	r0, #4294967295
    5a6a:	strb	r0, [r5, r1]
      _b = b;
    5a6c:	movw	r1, #4357	; 0x1105
    5a70:	mov.w	r0, #0
    5a74:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a76:	movw	r1, #4360	; 0x1108
      _s = s;
    5a7a:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a7e:	str	r2, [r5, r1]
      _s = s;
    5a80:	movw	r1, #4364	; 0x110c
    5a84:	strb	r0, [r5, r1]
      _b = b;
    5a86:	movw	r1, #4365	; 0x110d
    5a8a:	mov.w	r0, #0
    5a8e:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a90:	movw	r1, #4368	; 0x1110
      _s = s;
    5a94:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5a98:	str	r2, [r5, r1]
      _s = s;
    5a9a:	movw	r1, #4372	; 0x1114
    5a9e:	strb	r0, [r5, r1]
      _b = b;
    5aa0:	movw	r1, #4373	; 0x1115
    5aa4:	mov.w	r0, #0
    5aa8:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5aaa:	movw	r1, #4376	; 0x1118
      _s = s;
    5aae:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ab2:	str	r2, [r5, r1]
      _s = s;
    5ab4:	movw	r1, #4380	; 0x111c
    5ab8:	strb	r0, [r5, r1]
      _b = b;
    5aba:	movw	r1, #4381	; 0x111d
    5abe:	mov.w	r0, #0
    5ac2:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ac4:	movw	r1, #4388	; 0x1124
    5ac8:	mov.w	r0, #4294967295
    5acc:	strb	r0, [r5, r1]
      _b = b;
    5ace:	movw	r1, #4389	; 0x1125
    5ad2:	mov.w	r0, #0
    5ad6:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ad8:	movw	r1, #4392	; 0x1128
      _s = s;
    5adc:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ae0:	str	r2, [r5, r1]
      _s = s;
    5ae2:	movw	r1, #4396	; 0x112c
    5ae6:	strb	r0, [r5, r1]
      _b = b;
    5ae8:	movw	r1, #4397	; 0x112d
    5aec:	mov.w	r0, #0
    5af0:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5af2:	add.w	r1, r5, #4096	; 0x1000
      _s = s;
    5af6:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5afa:	str.w	r2, [r1, #320]	; 0x140
    5afe:	str.w	r2, [r1, #352]	; 0x160
    5b02:	str.w	r2, [r1, #384]	; 0x180
    5b06:	movw	r1, #4400	; 0x1130
    5b0a:	str	r2, [r5, r1]
      _s = s;
    5b0c:	movw	r1, #4404	; 0x1134
    5b10:	strb	r0, [r5, r1]
      _b = b;
    5b12:	movw	r1, #4405	; 0x1135
    5b16:	mov.w	r0, #0
    5b1a:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b1c:	movw	r1, #4408	; 0x1138
      _s = s;
    5b20:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b24:	str	r2, [r5, r1]
      _s = s;
    5b26:	movw	r1, #4412	; 0x113c
    5b2a:	strb	r0, [r5, r1]
      _b = b;
    5b2c:	movw	r1, #4413	; 0x113d
    5b30:	mov.w	r0, #1
    5b34:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b36:	movw	r1, #4420	; 0x1144
    5b3a:	mov.w	r0, #4294967295
    5b3e:	strb	r0, [r5, r1]
      _b = b;
    5b40:	movw	r1, #4421	; 0x1145
    5b44:	mov.w	r0, #0
    5b48:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b4a:	movw	r1, #4424	; 0x1148
      _s = s;
    5b4e:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b52:	str	r2, [r5, r1]
      _s = s;
    5b54:	movw	r1, #4428	; 0x114c
    5b58:	strb	r0, [r5, r1]
      _b = b;
    5b5a:	movw	r1, #4429	; 0x114d
    5b5e:	mov.w	r0, #0
    5b62:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b64:	movw	r1, #4432	; 0x1150
      _s = s;
    5b68:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b6c:	str	r2, [r5, r1]
      _s = s;
    5b6e:	movw	r1, #4436	; 0x1154
    5b72:	strb	r0, [r5, r1]
      _b = b;
    5b74:	movw	r1, #4437	; 0x1155
    5b78:	mov.w	r0, #0
    5b7c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b7e:	movw	r1, #4440	; 0x1158
      _s = s;
    5b82:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5b86:	str	r2, [r5, r1]
      _s = s;
    5b88:	movw	r1, #4444	; 0x115c
    5b8c:	strb	r0, [r5, r1]
      _b = b;
    5b8e:	movw	r1, #4445	; 0x115d
    5b92:	mov.w	r0, #0
    5b96:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5b98:	movw	r1, #4452	; 0x1164
    5b9c:	mov.w	r0, #4294967295
    5ba0:	strb	r0, [r5, r1]
      _b = b;
    5ba2:	movw	r1, #4453	; 0x1165
    5ba6:	mov.w	r0, #0
    5baa:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bac:	movw	r1, #4456	; 0x1168
      _s = s;
    5bb0:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bb4:	str	r2, [r5, r1]
      _s = s;
    5bb6:	movw	r1, #4460	; 0x116c
    5bba:	strb	r0, [r5, r1]
      _b = b;
    5bbc:	movw	r1, #4461	; 0x116d
    5bc0:	mov.w	r0, #0
    5bc4:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bc6:	movw	r1, #4464	; 0x1170
      _s = s;
    5bca:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5bce:	str	r2, [r5, r1]
      _s = s;
    5bd0:	movw	r1, #4468	; 0x1174
    5bd4:	strb	r0, [r5, r1]
      _b = b;
    5bd6:	movw	r1, #4469	; 0x1175
    5bda:	mov.w	r0, #0
    5bde:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be0:	movw	r1, #4472	; 0x1178
      _s = s;
    5be4:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5be8:	str	r2, [r5, r1]
      _s = s;
    5bea:	movw	r1, #4476	; 0x117c
    5bee:	strb	r0, [r5, r1]
      _b = b;
    5bf0:	movw	r1, #4477	; 0x117d
    5bf4:	mov.w	r0, #0
    5bf8:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5bfa:	movw	r1, #4484	; 0x1184
    5bfe:	mov.w	r0, #4294967295
    5c02:	strb	r0, [r5, r1]
      _b = b;
    5c04:	movw	r1, #4485	; 0x1185
    5c08:	mov.w	r0, #0
    5c0c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c0e:	add.w	r1, r5, #4096	; 0x1000
      _s = s;
    5c12:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c16:	str.w	r2, [r1, #416]	; 0x1a0
    5c1a:	str.w	r2, [r1, #448]	; 0x1c0
    5c1e:	movw	r1, #4488	; 0x1188
    5c22:	str	r2, [r5, r1]
      _s = s;
    5c24:	movw	r1, #4492	; 0x118c
    5c28:	strb	r0, [r5, r1]
      _b = b;
    5c2a:	movw	r1, #4493	; 0x118d
    5c2e:	mov.w	r0, #0
    5c32:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c34:	movw	r1, #4496	; 0x1190
      _s = s;
    5c38:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c3c:	str	r2, [r5, r1]
      _s = s;
    5c3e:	movw	r1, #4500	; 0x1194
    5c42:	strb	r0, [r5, r1]
      _b = b;
    5c44:	movw	r1, #4501	; 0x1195
    5c48:	mov.w	r0, #0
    5c4c:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c4e:	movw	r1, #4504	; 0x1198
      _s = s;
    5c52:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c56:	str	r2, [r5, r1]
      _s = s;
    5c58:	movw	r1, #4508	; 0x119c
    5c5c:	strb	r0, [r5, r1]
      _b = b;
    5c5e:	movw	r1, #4509	; 0x119d
    5c62:	mov.w	r0, #0
    5c66:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c68:	movw	r1, #4516	; 0x11a4
    5c6c:	mov.w	r0, #4294967295
    5c70:	strb	r0, [r5, r1]
      _b = b;
    5c72:	movw	r1, #4517	; 0x11a5
    5c76:	mov.w	r0, #0
    5c7a:	strb	r0, [r5, r1]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5c7c:	movw	r0, #4524	; 0x11ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c80:	movw	r1, #4520	; 0x11a8
      _s = s;
    5c84:	strb	r6, [r5, r0]
      _b = b;
    5c86:	movw	r0, #4525	; 0x11ad
    5c8a:	mov.w	r6, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c8e:	str	r2, [r5, r1]
    5c90:	movw	r1, #265	; 0x109
      _s = s;
      _b = b;
    5c94:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c96:	movw	r0, #4528	; 0x11b0
      _s = s;
    5c9a:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5c9e:	str	r2, [r5, r0]
      _s = s;
    5ca0:	movw	r0, #4532	; 0x11b4
    5ca4:	strb	r6, [r5, r0]
      _b = b;
    5ca6:	movw	r0, #4533	; 0x11b5
    5caa:	mov.w	r6, #0
    5cae:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cb0:	movw	r0, #4536	; 0x11b8
      _s = s;
    5cb4:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cb8:	str	r2, [r5, r0]
      _s = s;
    5cba:	movw	r0, #4540	; 0x11bc
    5cbe:	strb	r6, [r5, r0]
      _b = b;
    5cc0:	movw	r0, #4541	; 0x11bd
    5cc4:	mov.w	r6, #0
    5cc8:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5cca:	movw	r0, #4548	; 0x11c4
    5cce:	mov.w	r6, #4294967295
    5cd2:	strb	r6, [r5, r0]
      _b = b;
    5cd4:	movw	r0, #4549	; 0x11c5
    5cd8:	mov.w	r6, #1
    5cdc:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cde:	movw	r0, #4552	; 0x11c8
      _s = s;
    5ce2:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ce6:	str	r2, [r5, r0]
      _s = s;
    5ce8:	movw	r0, #4556	; 0x11cc
    5cec:	strb	r6, [r5, r0]
      _b = b;
    5cee:	movw	r0, #4557	; 0x11cd
    5cf2:	mov.w	r6, #0
    5cf6:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5cf8:	movw	r0, #4560	; 0x11d0
      _s = s;
    5cfc:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d00:	str	r2, [r5, r0]
      _s = s;
    5d02:	movw	r0, #4564	; 0x11d4
    5d06:	strb	r6, [r5, r0]
      _b = b;
    5d08:	movw	r0, #4565	; 0x11d5
    5d0c:	mov.w	r6, #0
    5d10:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d12:	movw	r0, #4568	; 0x11d8
      _s = s;
    5d16:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d1a:	str	r2, [r5, r0]
      _s = s;
    5d1c:	movw	r0, #4572	; 0x11dc
    5d20:	strb	r6, [r5, r0]
      _b = b;
    5d22:	mov.w	r6, #0
    5d26:	movw	r0, #4573	; 0x11dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d2a:	strb	r6, [r4, #4]
      _b = b;
    5d2c:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d2e:	add.w	r0, r5, #4096	; 0x1000
      _s = s;
      _b = b;
    5d32:	strb	r6, [r4, #5]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d34:	str.w	r2, [r0, #480]	; 0x1e0
    5d38:	movs	r0, #0
      _s = s;
    5d3a:	strb	r6, [r4, #12]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d3c:	str	r0, [r4, #0]
    5d3e:	movs	r0, #0
      _s = s;
      _b = b;
    5d40:	strb	r6, [r4, #13]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d42:	str	r0, [r4, #8]
    5d44:	movs	r0, #0
      _s = s;
    5d46:	strb	r6, [r4, #20]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d48:	str	r0, [r4, #16]
    5d4a:	movs	r0, #0
      _s = s;
      _b = b;
    5d4c:	strb	r6, [r4, #21]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d4e:	str	r0, [r4, #24]
    5d50:	movs	r0, #0
      _s = s;
    5d52:	strb	r6, [r4, #28]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d54:	str	r0, [r4, #32]
    5d56:	movs	r0, #0
      _s = s;
      _b = b;
    5d58:	strb	r6, [r4, #29]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d5a:	str	r0, [r4, #40]	; 0x28
    5d5c:	movs	r0, #0
      _s = s;
    5d5e:	strb.w	r6, [r4, #36]	; 0x24
      _b = b;
    5d62:	strb.w	r6, [r4, #37]	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5d66:	strb.w	r6, [r4, #44]	; 0x2c
      _b = b;
    5d6a:	strb.w	r6, [r4, #45]	; 0x2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d6e:	str	r0, [r4, #48]	; 0x30
      _s = s;
    5d70:	movw	r0, #4580	; 0x11e4
    5d74:	strb.w	r6, [r4, #52]	; 0x34
    5d78:	mov.w	r6, #4294967295
    5d7c:	strb	r6, [r5, r0]
      _b = b;
    5d7e:	movw	r0, #4581	; 0x11e5
    5d82:	mov.w	r6, #0
    5d86:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d88:	movw	r0, #4584	; 0x11e8
      _s = s;
    5d8c:	mov.w	r6, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5d90:	str	r2, [r5, r0]
      _s = s;
    5d92:	movw	r0, #4588	; 0x11ec
    5d96:	strb	r6, [r5, r0]
      _b = b;
    5d98:	mov.w	r6, #0
    5d9c:	movw	r0, #4589	; 0x11ed
    5da0:	strb	r6, [r5, r0]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5da2:	movw	r0, #4592	; 0x11f0
    5da6:	str	r2, [r5, r0]
    5da8:	movw	r0, #4600	; 0x11f8
    5dac:	str	r2, [r5, r0]
      _s = s;
    5dae:	movw	r2, #4596	; 0x11f4
    5db2:	mov.w	r0, #4294967295
    5db6:	strb	r0, [r5, r2]
      _b = b;
    5db8:	movw	r2, #4597	; 0x11f5
    5dbc:	mov.w	r0, #1
    5dc0:	strb	r0, [r5, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dc2:	movw	r2, #4604	; 0x11fc
    5dc6:	mov.w	r0, #4294967295
    5dca:	strb	r0, [r5, r2]
      _b = b;
    5dcc:	movw	r2, #4605	; 0x11fd
    5dd0:	mov	r0, r6
    5dd2:	strb	r6, [r5, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dd4:	movs	r2, #0
      _s = s;
      _b = b;
    5dd6:	strb.w	r6, [r4, #53]	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dda:	str	r2, [r4, #56]	; 0x38
    5ddc:	movs	r2, #0
      _s = s;
    5dde:	strb.w	r6, [r4, #60]	; 0x3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5de2:	str	r2, [r4, #64]	; 0x40
      _s = s;
    5de4:	mov.w	r2, #4294967295
      _b = b;
    5de8:	strb.w	r6, [r4, #61]	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5dec:	strb.w	r2, [r4, #100]	; 0x64
      _b = b;
    5df0:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5df4:	strb.w	r6, [r4, #68]	; 0x44
      _b = b;
    5df8:	strb.w	r2, [r4, #101]	; 0x65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5dfc:	mov.w	r2, #264	; 0x108
      _s = s;
      _b = b;
    5e00:	strb.w	r6, [r4, #69]	; 0x45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e04:	movs	r6, #182	; 0xb6
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e06:	str	r2, [r4, #80]	; 0x50
      _s = s;
      _b = b;
    5e08:	mov.w	r2, #100	; 0x64
    5e0c:	strb.w	r3, [r4, #109]	; 0x6d
    5e10:	strb.w	r2, [r4, #77]	; 0x4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e14:	mvn.w	r2, #122	; 0x7a
      _b = b;
    5e18:	strb.w	r3, [r4, #117]	; 0x75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e1c:	strb.w	r2, [r4, #84]	; 0x54
      _b = b;
    5e20:	mvn.w	r2, #38	; 0x26
    5e24:	strb.w	r3, [r4, #125]	; 0x7d
    5e28:	strb.w	r2, [r4, #93]	; 0x5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e2c:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    5e2e:	strb.w	r3, [r4, #133]	; 0x85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e32:	str	r2, [r4, #104]	; 0x68
    5e34:	str	r2, [r4, #112]	; 0x70
    5e36:	str	r2, [r4, #120]	; 0x78
    5e38:	str.w	r2, [r4, #128]	; 0x80
    5e3c:	str.w	r2, [r4, #136]	; 0x88
      _s = s;
    5e40:	mvn.w	r2, #53	; 0x35
    5e44:	strb.w	ip, [r4, #76]	; 0x4c
    5e48:	mov.w	ip, #213	; 0xd5
      _b = b;
    5e4c:	strb.w	r8, [r4, #85]	; 0x55
    5e50:	mov.w	r8, #154	; 0x9a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e54:	str	r1, [r4, #72]	; 0x48
    5e56:	str	r1, [r4, #88]	; 0x58
    5e58:	str.w	r9, [r4, #96]	; 0x60
      _s = s;
    5e5c:	strb.w	r2, [r4, #108]	; 0x6c
    5e60:	strb.w	r2, [r4, #116]	; 0x74
    5e64:	strb.w	r2, [r4, #124]	; 0x7c
    5e68:	strb.w	r2, [r4, #132]	; 0x84
    5e6c:	strb.w	sl, [r4, #92]	; 0x5c
    5e70:	strb.w	r2, [r4, #140]	; 0x8c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e74:	movs	r2, #189	; 0xbd
      _s = s;
    5e76:	strb.w	r0, [r4, #188]	; 0xbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5e7a:	str.w	r2, [r4, #144]	; 0x90
      _s = s;
    5e7e:	mvn.w	r2, #53	; 0x35
      _b = b;
    5e82:	strb.w	r0, [r4, #189]	; 0xbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5e86:	strb.w	r2, [r4, #148]	; 0x94
    5e8a:	mov.w	r2, #4294967295
    5e8e:	strb.w	r0, [r4, #196]	; 0xc4
    5e92:	strb.w	r2, [r4, #156]	; 0x9c
      _b = b;
    5e96:	mvn.w	r2, #74	; 0x4a
    5e9a:	strb.w	r0, [r4, #197]	; 0xc5
    5e9e:	strb.w	r2, [r4, #157]	; 0x9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5ea2:	mov.w	r2, #4294967295
    5ea6:	strb.w	r0, [r4, #204]	; 0xcc
    5eaa:	strb.w	r2, [r4, #164]	; 0xa4
      _b = b;
    5eae:	mvn.w	r2, #74	; 0x4a
    5eb2:	strb.w	r0, [r4, #205]	; 0xcd
    5eb6:	strb.w	r2, [r4, #165]	; 0xa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5eba:	strb.w	r2, [r4, #172]	; 0xac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ebe:	movs	r2, #0
      _s = s;
    5ec0:	strb.w	r0, [r4, #212]	; 0xd4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ec4:	str.w	r2, [r4, #184]	; 0xb8
    5ec8:	movs	r2, #0
      _s = s;
      _b = b;
    5eca:	strb.w	r0, [r4, #213]	; 0xd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ece:	str.w	r2, [r4, #192]	; 0xc0
    5ed2:	movs	r2, #0
      _s = s;
    5ed4:	strb.w	r0, [r4, #220]	; 0xdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ed8:	str.w	r2, [r4, #200]	; 0xc8
    5edc:	movs	r2, #0
      _s = s;
      _b = b;
    5ede:	strb.w	r0, [r4, #221]	; 0xdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ee2:	str.w	r2, [r4, #208]	; 0xd0
    5ee6:	movs	r2, #0
      _s = s;
    5ee8:	strb.w	r0, [r4, #228]	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5eec:	movs	r0, #159	; 0x9f
    5eee:	str.w	r2, [r4, #216]	; 0xd8
    5ef2:	movs	r2, #0
      _s = s;
      _b = b;
    5ef4:	strb.w	r3, [r4, #141]	; 0x8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ef8:	str.w	r2, [r4, #224]	; 0xe0
      _s = s;
      _b = b;
    5efc:	mvn.w	r2, #56	; 0x38
    5f00:	strb.w	r3, [r4, #149]	; 0x95
    5f04:	strb.w	r2, [r4, #173]	; 0xad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f08:	mvn.w	r2, #46	; 0x2e
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f0c:	str.w	r9, [r4, #152]	; 0x98
      _s = s;
    5f10:	strb.w	r2, [r4, #180]	; 0xb4
      _b = b;
    5f14:	mov.w	r2, #61	; 0x3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f18:	str.w	r9, [r4, #160]	; 0xa0
      _s = s;
      _b = b;
    5f1c:	strb.w	r2, [r4, #181]	; 0xb5
    5f20:	mov.w	r2, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f24:	str.w	r0, [r4, #168]	; 0xa8
    5f28:	str.w	r0, [r4, #176]	; 0xb0
    5f2c:	movs	r0, #189	; 0xbd
      _s = s;
      _b = b;
    5f2e:	strb.w	r2, [r4, #229]	; 0xe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f32:	movs	r2, #0
    5f34:	str.w	r0, [r4, #304]	; 0x130
    5f38:	str.w	r2, [r4, #232]	; 0xe8
      _s = s;
    5f3c:	strb.w	r2, [r4, #236]	; 0xec
      _b = b;
    5f40:	strb.w	r2, [r4, #237]	; 0xed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f44:	movs	r2, #0
    5f46:	str.w	r0, [r4, #312]	; 0x138
    5f4a:	movs	r0, #212	; 0xd4
    5f4c:	str.w	r2, [r4, #240]	; 0xf0
      _s = s;
    5f50:	strb.w	r2, [r4, #244]	; 0xf4
      _b = b;
    5f54:	strb.w	r2, [r4, #245]	; 0xf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f58:	mov.w	r2, #100	; 0x64
    5f5c:	strb.w	lr, [r4, #252]	; 0xfc
    5f60:	strb.w	r2, [r4, #260]	; 0x104
      _b = b;
    5f64:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f68:	str.w	r1, [r4, #264]	; 0x108
      _s = s;
      _b = b;
    5f6c:	strb.w	r2, [r4, #269]	; 0x10d
    5f70:	strb.w	r2, [r4, #277]	; 0x115
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f74:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f78:	str.w	r1, [r4, #272]	; 0x110
      _s = s;
    5f7c:	strb.w	r2, [r4, #284]	; 0x11c
      _b = b;
    5f80:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f84:	str.w	r9, [r4, #288]	; 0x120
      _s = s;
      _b = b;
    5f88:	strb.w	r2, [r4, #285]	; 0x11d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5f8c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5f90:	str.w	r9, [r4, #296]	; 0x128
      _s = s;
    5f94:	strb.w	r2, [r4, #292]	; 0x124
      _b = b;
    5f98:	mvn.w	r2, #74	; 0x4a
    5f9c:	strb.w	r3, [r4, #309]	; 0x135
    5fa0:	strb.w	r2, [r4, #293]	; 0x125
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fa4:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fa8:	str.w	r0, [r4, #248]	; 0xf8
    5fac:	movs	r0, #189	; 0xbd
      _s = s;
    5fae:	strb.w	r2, [r4, #300]	; 0x12c
      _b = b;
    5fb2:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fb6:	str.w	fp, [r4, #256]	; 0x100
      _s = s;
      _b = b;
    5fba:	strb.w	r2, [r4, #301]	; 0x12d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fbe:	mvn.w	r2, #53	; 0x35
    5fc2:	strb.w	sl, [r4, #268]	; 0x10c
    5fc6:	strb.w	r2, [r4, #308]	; 0x134
    5fca:	strb.w	r2, [r4, #316]	; 0x13c
      _b = b;
    5fce:	mov.w	r2, #56	; 0x38
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fd2:	strb.w	sl, [r4, #276]	; 0x114
      _b = b;
    5fd6:	strb.w	r2, [r4, #253]	; 0xfd
    5fda:	mvn.w	r2, #57	; 0x39
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fde:	str.w	fp, [r4, #280]	; 0x118
      _s = s;
      _b = b;
    5fe2:	strb.w	r2, [r4, #261]	; 0x105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    5fe6:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5fea:	str.w	r0, [r4, #320]	; 0x140
      _s = s;
    5fee:	strb.w	r2, [r4, #324]	; 0x144
    5ff2:	strb.w	r2, [r4, #332]	; 0x14c
    5ff6:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    5ffa:	str.w	r0, [r4, #328]	; 0x148
    5ffe:	movs	r0, #159	; 0x9f
      _s = s;
    6000:	strb.w	r2, [r4, #340]	; 0x154
      _b = b;
    6004:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6008:	str.w	r0, [r4, #360]	; 0x168
    600c:	movs	r0, #226	; 0xe2
      _s = s;
      _b = b;
    600e:	strb.w	r2, [r4, #341]	; 0x155
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6012:	mov.w	r2, #4294967295
      _b = b;
    6016:	strb.w	r3, [r4, #317]	; 0x13d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    601a:	strb.w	r2, [r4, #348]	; 0x15c
      _b = b;
    601e:	mvn.w	r2, #74	; 0x4a
    6022:	strb.w	r3, [r4, #325]	; 0x145
    6026:	strb.w	r2, [r4, #349]	; 0x15d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    602a:	mov.w	r2, #4294967295
      _b = b;
    602e:	strb.w	r3, [r4, #333]	; 0x14d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6032:	strb.w	r2, [r4, #356]	; 0x164
      _b = b;
    6036:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    603a:	str.w	r9, [r4, #336]	; 0x150
      _s = s;
      _b = b;
    603e:	strb.w	r2, [r4, #357]	; 0x165
    6042:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6046:	str.w	r9, [r4, #344]	; 0x158
      _s = s;
      _b = b;
    604a:	strb.w	r2, [r4, #365]	; 0x16d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    604e:	movs	r2, #0
    6050:	str.w	r9, [r4, #352]	; 0x160
    6054:	str.w	r2, [r4, #376]	; 0x178
      _s = s;
    6058:	strb.w	r2, [r4, #380]	; 0x17c
      _b = b;
    605c:	strb.w	r2, [r4, #381]	; 0x17d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6060:	movs	r2, #0
      _s = s;
      _b = b;
    6062:	strb.w	r8, [r4, #373]	; 0x175
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6066:	mov.w	r8, #262	; 0x106
    606a:	str.w	r2, [r4, #384]	; 0x180
      _s = s;
    606e:	strb.w	r2, [r4, #388]	; 0x184
      _b = b;
    6072:	strb.w	r2, [r4, #389]	; 0x185
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6076:	movs	r2, #0
      _s = s;
    6078:	strb.w	r6, [r4, #364]	; 0x16c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    607c:	str.w	r2, [r4, #392]	; 0x188
      _s = s;
    6080:	strb.w	r2, [r4, #396]	; 0x18c
      _b = b;
    6084:	strb.w	r2, [r4, #397]	; 0x18d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6088:	movs	r2, #0
    608a:	str.w	r0, [r4, #368]	; 0x170
    608e:	movs	r0, #189	; 0xbd
    6090:	str.w	r2, [r4, #400]	; 0x190
      _s = s;
    6094:	strb.w	r2, [r4, #404]	; 0x194
    6098:	mov.w	r2, #102	; 0x66
    609c:	strb.w	r2, [r4, #372]	; 0x174
      _b = b;
    60a0:	mov.w	r2, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60a4:	str.w	r0, [r4, #456]	; 0x1c8
    60a8:	movs	r0, #159	; 0x9f
      _s = s;
      _b = b;
    60aa:	strb.w	r2, [r4, #405]	; 0x195
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60ae:	movs	r2, #0
    60b0:	str.w	r0, [r4, #464]	; 0x1d0
    60b4:	mov.w	r0, #276	; 0x114
    60b8:	str.w	r2, [r4, #408]	; 0x198
      _s = s;
    60bc:	strb.w	r2, [r4, #412]	; 0x19c
      _b = b;
    60c0:	strb.w	r2, [r4, #413]	; 0x19d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60c4:	movs	r2, #0
    60c6:	str.w	r0, [r4, #424]	; 0x1a8
    60ca:	movs	r0, #141	; 0x8d
    60cc:	str.w	r2, [r4, #416]	; 0x1a0
      _s = s;
    60d0:	strb.w	r2, [r4, #420]	; 0x1a4
      _b = b;
    60d4:	strb.w	r2, [r4, #421]	; 0x1a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60d8:	mov.w	r2, #4294967295
      _b = b;
    60dc:	strb.w	r7, [r4, #429]	; 0x1ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60e0:	add.w	r7, r4, #4096	; 0x1000
      _s = s;
    60e4:	strb.w	r2, [r4, #436]	; 0x1b4
      _b = b;
    60e8:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60ec:	str.w	r9, [r4, #432]	; 0x1b0
      _s = s;
      _b = b;
    60f0:	strb.w	r2, [r4, #445]	; 0x1bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    60f4:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    60f8:	str.w	r9, [r4, #448]	; 0x1c0
      _s = s;
    60fc:	strb.w	r2, [r4, #452]	; 0x1c4
      _b = b;
    6100:	mvn.w	r2, #74	; 0x4a
    6104:	strb.w	r3, [r4, #461]	; 0x1cd
    6108:	strb.w	r2, [r4, #453]	; 0x1c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    610c:	mvn.w	r2, #53	; 0x35
    6110:	strb.w	r6, [r4, #468]	; 0x1d4
    6114:	strb.w	r2, [r4, #460]	; 0x1cc
      _b = b;
    6118:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    611c:	str.w	r9, [r4, #472]	; 0x1d8
      _s = s;
      _b = b;
    6120:	strb.w	r2, [r4, #469]	; 0x1d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6124:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6128:	str.w	r9, [r4, #488]	; 0x1e8
      _s = s;
    612c:	strb.w	r2, [r4, #476]	; 0x1dc
      _b = b;
    6130:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6134:	strb.w	ip, [r4, #428]	; 0x1ac
      _b = b;
    6138:	mov.w	ip, #156	; 0x9c
    613c:	strb.w	r2, [r4, #477]	; 0x1dd
    6140:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6144:	str.w	r0, [r4, #440]	; 0x1b8
      _s = s;
      _b = b;
    6148:	strb.w	r2, [r4, #485]	; 0x1e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    614c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6150:	str.w	r0, [r4, #480]	; 0x1e0
      _s = s;
    6154:	movs	r0, #135	; 0x87
    6156:	strb.w	r2, [r4, #492]	; 0x1ec
      _b = b;
    615a:	mvn.w	r2, #95	; 0x5f
    615e:	strb.w	r2, [r4, #437]	; 0x1b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6162:	mvn.w	r2, #11
    6166:	strb.w	r2, [r4, #444]	; 0x1bc
    616a:	strb.w	r2, [r4, #484]	; 0x1e4
      _b = b;
    616e:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6172:	str.w	r9, [r4, #496]	; 0x1f0
      _s = s;
      _b = b;
    6176:	strb.w	r2, [r4, #493]	; 0x1ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    617a:	mov.w	r2, #4294967295
      _b = b;
    617e:	strb.w	r3, [r4, #509]	; 0x1fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6182:	strb.w	r2, [r4, #500]	; 0x1f4
      _b = b;
    6186:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    618a:	str.w	r9, [r4, #512]	; 0x200
      _s = s;
      _b = b;
    618e:	strb.w	r2, [r4, #501]	; 0x1f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6192:	movs	r2, #189	; 0xbd
    6194:	str.w	r9, [r4, #520]	; 0x208
    6198:	str.w	r2, [r4, #504]	; 0x1f8
      _s = s;
    619c:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61a0:	str.w	r9, [r4, #528]	; 0x210
      _s = s;
    61a4:	strb.w	r2, [r4, #508]	; 0x1fc
    61a8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61ac:	str.w	r9, [r4, #536]	; 0x218
      _s = s;
    61b0:	strb.w	r2, [r4, #516]	; 0x204
      _b = b;
    61b4:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61b8:	strb.w	r6, [r4, #548]	; 0x224
      _b = b;
    61bc:	strb.w	r2, [r4, #517]	; 0x205
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61c0:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61c4:	str.w	r1, [r4, #560]	; 0x230
      _s = s;
    61c8:	strb.w	r2, [r4, #524]	; 0x20c
      _b = b;
    61cc:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61d0:	str.w	fp, [r4, #552]	; 0x228
      _s = s;
      _b = b;
    61d4:	strb.w	r2, [r4, #525]	; 0x20d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61d8:	mov.w	r2, #4294967295
    61dc:	strb.w	r2, [r4, #532]	; 0x214
      _b = b;
    61e0:	mvn.w	r2, #74	; 0x4a
    61e4:	strb.w	r2, [r4, #533]	; 0x215
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    61e8:	mov.w	r2, #4294967295
    61ec:	strb.w	r2, [r4, #540]	; 0x21c
      _b = b;
    61f0:	mvn.w	r2, #74	; 0x4a
    61f4:	strb.w	r2, [r4, #541]	; 0x21d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    61f8:	movs	r2, #159	; 0x9f
    61fa:	str.w	r2, [r4, #544]	; 0x220
      _s = s;
      _b = b;
    61fe:	mvn.w	r2, #52	; 0x34
    6202:	strb.w	r2, [r4, #549]	; 0x225
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6206:	mov.w	r2, #100	; 0x64
    620a:	strb.w	r2, [r4, #556]	; 0x22c
      _b = b;
    620e:	mvn.w	r2, #31
    6212:	strb.w	r2, [r4, #557]	; 0x22d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6216:	movs	r2, #0
    6218:	str.w	r2, [r4, #568]	; 0x238
      _s = s;
    621c:	strb.w	r2, [r4, #572]	; 0x23c
      _b = b;
    6220:	strb.w	r2, [r4, #573]	; 0x23d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6224:	movs	r2, #0
    6226:	str.w	r2, [r4, #576]	; 0x240
      _s = s;
    622a:	strb.w	r2, [r4, #580]	; 0x244
    622e:	mvn.w	r2, #121	; 0x79
    6232:	strb.w	r2, [r4, #564]	; 0x234
      _b = b;
    6236:	mvn.w	r2, #80	; 0x50
    623a:	strb.w	r2, [r4, #565]	; 0x235
    623e:	mov.w	r2, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6242:	str.w	r9, [r4, #624]	; 0x270
      _s = s;
      _b = b;
    6246:	strb.w	r2, [r4, #581]	; 0x245
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    624a:	movs	r2, #0
    624c:	str.w	r9, [r4, #632]	; 0x278
    6250:	str.w	r2, [r4, #584]	; 0x248
      _s = s;
    6254:	strb.w	r2, [r4, #588]	; 0x24c
      _b = b;
    6258:	strb.w	r2, [r4, #589]	; 0x24d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    625c:	movs	r2, #0
      _s = s;
    625e:	strb.w	r6, [r4, #644]	; 0x284
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6262:	str.w	r2, [r4, #592]	; 0x250
      _s = s;
    6266:	strb.w	r2, [r4, #596]	; 0x254
      _b = b;
    626a:	strb.w	r2, [r4, #597]	; 0x255
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    626e:	movs	r2, #0
      _s = s;
    6270:	strb.w	r6, [r4, #652]	; 0x28c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6274:	str.w	r2, [r4, #600]	; 0x258
      _s = s;
    6278:	strb.w	r2, [r4, #604]	; 0x25c
      _b = b;
    627c:	strb.w	r2, [r4, #605]	; 0x25d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6280:	mov.w	r2, #102	; 0x66
    6284:	strb.w	r6, [r4, #660]	; 0x294
    6288:	strb.w	r2, [r4, #612]	; 0x264
      _b = b;
    628c:	mvn.w	r2, #95	; 0x5f
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6290:	str.w	r9, [r4, #664]	; 0x298
      _s = s;
      _b = b;
    6294:	strb.w	r2, [r4, #613]	; 0x265
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6298:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    629c:	str.w	fp, [r4, #608]	; 0x260
      _s = s;
    62a0:	strb.w	r2, [r4, #620]	; 0x26c
      _b = b;
    62a4:	mov.w	r2, #54	; 0x36
    62a8:	strb.w	r2, [r4, #621]	; 0x26d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62ac:	mov.w	r2, #4294967295
    62b0:	strb.w	r2, [r4, #628]	; 0x274
      _b = b;
    62b4:	mvn.w	r2, #74	; 0x4a
    62b8:	strb.w	r2, [r4, #629]	; 0x275
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62bc:	mov.w	r2, #4294967295
    62c0:	strb.w	r2, [r4, #636]	; 0x27c
      _b = b;
    62c4:	mvn.w	r2, #74	; 0x4a
    62c8:	strb.w	r2, [r4, #637]	; 0x27d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62cc:	movs	r2, #159	; 0x9f
    62ce:	str.w	r2, [r4, #640]	; 0x280
      _s = s;
      _b = b;
    62d2:	mvn.w	r2, #52	; 0x34
    62d6:	strb.w	r2, [r4, #645]	; 0x285
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62da:	movs	r2, #159	; 0x9f
    62dc:	str.w	r2, [r4, #648]	; 0x288
      _s = s;
      _b = b;
    62e0:	mvn.w	r2, #52	; 0x34
    62e4:	strb.w	r2, [r4, #653]	; 0x28d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    62e8:	movs	r2, #159	; 0x9f
    62ea:	str.w	r2, [r4, #656]	; 0x290
      _s = s;
      _b = b;
    62ee:	mvn.w	r2, #52	; 0x34
    62f2:	strb.w	r2, [r4, #661]	; 0x295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    62f6:	mov.w	r2, #4294967295
    62fa:	strb.w	r2, [r4, #668]	; 0x29c
      _b = b;
    62fe:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6302:	str.w	r8, [r4, #616]	; 0x268
      _s = s;
      _b = b;
    6306:	strb.w	r2, [r4, #669]	; 0x29d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    630a:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    630e:	str.w	r9, [r4, #672]	; 0x2a0
      _s = s;
    6312:	strb.w	r2, [r4, #676]	; 0x2a4
      _b = b;
    6316:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    631a:	str.w	r9, [r4, #680]	; 0x2a8
      _s = s;
      _b = b;
    631e:	strb.w	r2, [r4, #677]	; 0x2a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6322:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6326:	str.w	r9, [r4, #688]	; 0x2b0
      _s = s;
    632a:	strb.w	r2, [r4, #684]	; 0x2ac
      _b = b;
    632e:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6332:	str.w	r9, [r4, #696]	; 0x2b8
      _s = s;
      _b = b;
    6336:	strb.w	r2, [r4, #685]	; 0x2ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    633a:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    633e:	str.w	r9, [r4, #704]	; 0x2c0
      _s = s;
    6342:	strb.w	r2, [r4, #692]	; 0x2b4
      _b = b;
    6346:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    634a:	str.w	r9, [r4, #712]	; 0x2c8
      _s = s;
      _b = b;
    634e:	strb.w	r2, [r4, #693]	; 0x2b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6352:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6356:	str.w	r9, [r4, #720]	; 0x2d0
      _s = s;
    635a:	strb.w	r2, [r4, #700]	; 0x2bc
      _b = b;
    635e:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6362:	strb.w	r6, [r4, #732]	; 0x2dc
      _b = b;
    6366:	strb.w	r2, [r4, #701]	; 0x2bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    636a:	mov.w	r2, #4294967295
    636e:	strb.w	r6, [r4, #740]	; 0x2e4
    6372:	strb.w	r2, [r4, #708]	; 0x2c4
      _b = b;
    6376:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    637a:	str.w	r1, [r4, #752]	; 0x2f0
      _s = s;
      _b = b;
    637e:	strb.w	r2, [r4, #709]	; 0x2c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6382:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6386:	str.w	fp, [r4, #744]	; 0x2e8
      _s = s;
    638a:	strb.w	r2, [r4, #716]	; 0x2cc
      _b = b;
    638e:	mvn.w	r2, #74	; 0x4a
    6392:	strb.w	r2, [r4, #717]	; 0x2cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6396:	mov.w	r2, #4294967295
    639a:	strb.w	r2, [r4, #724]	; 0x2d4
      _b = b;
    639e:	mvn.w	r2, #74	; 0x4a
    63a2:	strb.w	r2, [r4, #725]	; 0x2d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63a6:	movs	r2, #159	; 0x9f
    63a8:	str.w	r2, [r4, #728]	; 0x2d8
      _s = s;
      _b = b;
    63ac:	mvn.w	r2, #52	; 0x34
    63b0:	strb.w	r2, [r4, #733]	; 0x2dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63b4:	movs	r2, #159	; 0x9f
    63b6:	str.w	r2, [r4, #736]	; 0x2e0
      _s = s;
      _b = b;
    63ba:	mvn.w	r2, #52	; 0x34
    63be:	strb.w	r2, [r4, #741]	; 0x2e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    63c2:	mov.w	r2, #100	; 0x64
    63c6:	strb.w	r2, [r4, #748]	; 0x2ec
      _b = b;
    63ca:	mvn.w	r2, #31
    63ce:	strb.w	r2, [r4, #749]	; 0x2ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63d2:	movs	r2, #0
      _s = s;
    63d4:	strb.w	r0, [r4, #756]	; 0x2f4
      _b = b;
    63d8:	movs	r0, #103	; 0x67
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63da:	str.w	r2, [r4, #760]	; 0x2f8
      _s = s;
    63de:	strb.w	r2, [r4, #764]	; 0x2fc
      _b = b;
    63e2:	strb.w	r2, [r4, #765]	; 0x2fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63e6:	movs	r2, #0
      _s = s;
      _b = b;
    63e8:	strb.w	ip, [r4, #757]	; 0x2f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63ec:	movw	ip, #275	; 0x113
    63f0:	str.w	r2, [r4, #768]	; 0x300
      _s = s;
    63f4:	strb.w	r2, [r4, #772]	; 0x304
      _b = b;
    63f8:	strb.w	r2, [r4, #773]	; 0x305
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    63fc:	movs	r2, #0
    63fe:	str.w	r1, [r4, #800]	; 0x320
    6402:	str.w	r2, [r4, #776]	; 0x308
      _s = s;
    6406:	strb.w	r2, [r4, #780]	; 0x30c
      _b = b;
    640a:	strb.w	r2, [r4, #781]	; 0x30d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    640e:	movs	r2, #0
    6410:	str.w	r9, [r4, #816]	; 0x330
    6414:	str.w	r2, [r4, #784]	; 0x310
      _s = s;
    6418:	strb.w	r2, [r4, #788]	; 0x314
      _b = b;
    641c:	strb.w	r2, [r4, #789]	; 0x315
    6420:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6424:	str.w	r1, [r4, #832]	; 0x340
      _s = s;
      _b = b;
    6428:	strb.w	r2, [r4, #805]	; 0x325
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    642c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6430:	str.w	r1, [r4, #840]	; 0x348
      _s = s;
    6434:	strb.w	r2, [r4, #812]	; 0x32c
      _b = b;
    6438:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    643c:	str.w	fp, [r4, #792]	; 0x318
      _s = s;
      _b = b;
    6440:	strb.w	r2, [r4, #813]	; 0x32d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6444:	mov.w	r2, #4294967295
    6448:	strb.w	sl, [r4, #804]	; 0x324
    644c:	strb.w	r2, [r4, #820]	; 0x334
      _b = b;
    6450:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6454:	str.w	r8, [r4, #808]	; 0x328
      _s = s;
      _b = b;
    6458:	strb.w	r2, [r4, #821]	; 0x335
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    645c:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6460:	str.w	fp, [r4, #824]	; 0x338
      _s = s;
    6464:	strb.w	r2, [r4, #828]	; 0x33c
      _b = b;
    6468:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    646c:	strb.w	sl, [r4, #836]	; 0x344
      _b = b;
    6470:	strb.w	r2, [r4, #829]	; 0x33d
    6474:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6478:	strb.w	sl, [r4, #844]	; 0x34c
      _b = b;
    647c:	strb.w	r2, [r4, #837]	; 0x345
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6480:	mov.w	r2, #101	; 0x65
    6484:	strb.w	r2, [r4, #796]	; 0x31c
      _b = b;
    6488:	mvn.w	r2, #77	; 0x4d
    648c:	strb.w	r2, [r4, #797]	; 0x31d
    6490:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6494:	strb.w	r6, [r4, #860]	; 0x35c
      _b = b;
    6498:	strb.w	r2, [r4, #845]	; 0x34d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    649c:	mov.w	r2, #100	; 0x64
    64a0:	strb.w	r6, [r4, #868]	; 0x364
    64a4:	strb.w	r2, [r4, #852]	; 0x354
      _b = b;
    64a8:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ac:	str.w	r9, [r4, #872]	; 0x368
      _s = s;
      _b = b;
    64b0:	strb.w	r2, [r4, #853]	; 0x355
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64b4:	movs	r2, #159	; 0x9f
    64b6:	str.w	r9, [r4, #880]	; 0x370
    64ba:	str.w	r2, [r4, #856]	; 0x358
      _s = s;
      _b = b;
    64be:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64c2:	str.w	r9, [r4, #888]	; 0x378
      _s = s;
      _b = b;
    64c6:	strb.w	r2, [r4, #861]	; 0x35d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64ca:	movs	r2, #159	; 0x9f
    64cc:	str.w	r9, [r4, #896]	; 0x380
    64d0:	str.w	r2, [r4, #864]	; 0x360
      _s = s;
      _b = b;
    64d4:	mvn.w	r2, #52	; 0x34
    64d8:	strb.w	r3, [r4, #909]	; 0x38d
    64dc:	strb.w	r2, [r4, #869]	; 0x365
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64e0:	mov.w	r2, #4294967295
    64e4:	strb.w	r6, [r4, #924]	; 0x39c
    64e8:	strb.w	r2, [r4, #876]	; 0x36c
      _b = b;
    64ec:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64f0:	strb.w	r6, [r4, #932]	; 0x3a4
      _b = b;
    64f4:	strb.w	r2, [r4, #877]	; 0x36d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    64f8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    64fc:	str.w	fp, [r4, #848]	; 0x350
      _s = s;
    6500:	strb.w	r2, [r4, #884]	; 0x374
      _b = b;
    6504:	mvn.w	r2, #74	; 0x4a
    6508:	strb.w	r2, [r4, #885]	; 0x375
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    650c:	mov.w	r2, #4294967295
    6510:	strb.w	r2, [r4, #892]	; 0x37c
      _b = b;
    6514:	mvn.w	r2, #74	; 0x4a
    6518:	strb.w	r2, [r4, #893]	; 0x37d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    651c:	mov.w	r2, #4294967295
    6520:	strb.w	r2, [r4, #900]	; 0x384
      _b = b;
    6524:	mvn.w	r2, #74	; 0x4a
    6528:	strb.w	r2, [r4, #901]	; 0x385
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    652c:	movs	r2, #189	; 0xbd
    652e:	str.w	r2, [r4, #904]	; 0x388
      _s = s;
    6532:	mvn.w	r2, #53	; 0x35
    6536:	strb.w	r2, [r4, #908]	; 0x38c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    653a:	movs	r2, #159	; 0x9f
    653c:	str.w	r2, [r4, #920]	; 0x398
      _s = s;
      _b = b;
    6540:	mvn.w	r2, #52	; 0x34
    6544:	strb.w	r2, [r4, #925]	; 0x39d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6548:	movs	r2, #159	; 0x9f
    654a:	str.w	r2, [r4, #928]	; 0x3a0
    654e:	movs	r2, #246	; 0xf6
    6550:	str.w	r2, [r4, #912]	; 0x390
      _s = s;
    6554:	mvn.w	r2, #67	; 0x43
    6558:	strb.w	r2, [r4, #916]	; 0x394
      _b = b;
    655c:	mvn.w	r2, #72	; 0x48
    6560:	strb.w	r2, [r4, #917]	; 0x395
    6564:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6568:	str.w	r1, [r4, #936]	; 0x3a8
      _s = s;
      _b = b;
    656c:	strb.w	r2, [r4, #933]	; 0x3a5
    6570:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6574:	str.w	r1, [r4, #944]	; 0x3b0
      _s = s;
      _b = b;
    6578:	strb.w	r2, [r4, #941]	; 0x3ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    657c:	mvn.w	r2, #114	; 0x72
    6580:	strb.w	lr, [r4, #980]	; 0x3d4
    6584:	strb.w	r2, [r4, #948]	; 0x3b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6588:	movs	r2, #0
      _s = s;
      _b = b;
    658a:	strb.w	lr, [r4, #981]	; 0x3d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    658e:	str.w	r2, [r4, #952]	; 0x3b8
      _s = s;
    6592:	strb.w	r2, [r4, #956]	; 0x3bc
      _b = b;
    6596:	strb.w	r2, [r4, #957]	; 0x3bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    659a:	movs	r2, #0
      _s = s;
    659c:	strb.w	lr, [r4, #988]	; 0x3dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65a0:	str.w	r2, [r4, #960]	; 0x3c0
      _s = s;
    65a4:	strb.w	r2, [r4, #964]	; 0x3c4
      _b = b;
    65a8:	strb.w	r2, [r4, #965]	; 0x3c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65ac:	movs	r2, #0
      _s = s;
      _b = b;
    65ae:	strb.w	lr, [r4, #989]	; 0x3dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65b2:	str.w	r2, [r4, #968]	; 0x3c8
      _s = s;
    65b6:	strb.w	r2, [r4, #972]	; 0x3cc
      _b = b;
    65ba:	strb.w	r2, [r4, #973]	; 0x3cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65be:	mov.w	r2, #4294967295
    65c2:	strb.w	lr, [r4, #996]	; 0x3e4
    65c6:	strb.w	r2, [r4, #1004]	; 0x3ec
      _b = b;
    65ca:	mov.w	r2, #54	; 0x36
    65ce:	strb.w	lr, [r4, #997]	; 0x3e5
    65d2:	strb.w	r2, [r4, #1005]	; 0x3ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65d6:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    65d8:	strb.w	r3, [r4, #1013]	; 0x3f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65dc:	str.w	r2, [r4, #1008]	; 0x3f0
      _s = s;
    65e0:	mvn.w	r2, #53	; 0x35
      _b = b;
    65e4:	strb.w	r0, [r4, #949]	; 0x3b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    65e8:	movs	r0, #197	; 0xc5
    65ea:	strb.w	r2, [r4, #1012]	; 0x3f4
    65ee:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65f2:	str.w	ip, [r4, #976]	; 0x3d0
      _s = s;
    65f6:	strb.w	r2, [r4, #1020]	; 0x3fc
      _b = b;
    65fa:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    65fe:	str.w	ip, [r4, #984]	; 0x3d8
      _s = s;
    6602:	strb.w	sl, [r4, #940]	; 0x3ac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6606:	str.w	r8, [r4, #1000]	; 0x3e8
    660a:	str.w	fp, [r4, #1016]	; 0x3f8
    660e:	str.w	ip, [r4, #992]	; 0x3e0
      _s = s;
      _b = b;
    6612:	strb.w	r2, [r4, #1021]	; 0x3fd
    6616:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    661a:	str.w	r1, [r4, #1024]	; 0x400
      _s = s;
      _b = b;
    661e:	strb.w	r2, [r4, #1029]	; 0x405
    6622:	strb.w	r2, [r4, #1037]	; 0x40d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6626:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    662a:	str.w	r1, [r4, #1032]	; 0x408
      _s = s;
    662e:	strb.w	r2, [r4, #1044]	; 0x414
      _b = b;
    6632:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6636:	strb.w	r6, [r4, #1052]	; 0x41c
      _b = b;
    663a:	strb.w	r2, [r4, #1045]	; 0x415
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    663e:	movs	r2, #159	; 0x9f
    6640:	str.w	r9, [r4, #1056]	; 0x420
    6644:	str.w	r2, [r4, #1048]	; 0x418
      _s = s;
      _b = b;
    6648:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    664c:	str.w	r9, [r4, #1064]	; 0x428
      _s = s;
      _b = b;
    6650:	strb.w	r2, [r4, #1053]	; 0x41d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6654:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6658:	str.w	r9, [r4, #1072]	; 0x430
      _s = s;
    665c:	strb.w	r2, [r4, #1060]	; 0x424
      _b = b;
    6660:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6664:	str.w	ip, [r4, #1096]	; 0x448
      _s = s;
      _b = b;
    6668:	strb.w	r2, [r4, #1061]	; 0x425
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    666c:	mov.w	r2, #4294967295
    6670:	strb.w	lr, [r4, #1100]	; 0x44c
    6674:	strb.w	r2, [r4, #1068]	; 0x42c
      _b = b;
    6678:	mvn.w	r2, #74	; 0x4a
    667c:	strb.w	lr, [r4, #1101]	; 0x44d
    6680:	strb.w	r2, [r4, #1069]	; 0x42d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6684:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6688:	str.w	ip, [r4, #1104]	; 0x450
      _s = s;
    668c:	strb.w	r2, [r4, #1076]	; 0x434
      _b = b;
    6690:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6694:	strb.w	sl, [r4, #1028]	; 0x404
      _b = b;
    6698:	strb.w	r2, [r4, #1077]	; 0x435
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    669c:	movs	r2, #141	; 0x8d
      _s = s;
    669e:	strb.w	sl, [r4, #1036]	; 0x40c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66a2:	str.w	r2, [r4, #1080]	; 0x438
      _s = s;
    66a6:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66aa:	str.w	fp, [r4, #1040]	; 0x410
      _s = s;
    66ae:	strb.w	r2, [r4, #1084]	; 0x43c
      _b = b;
    66b2:	mov.w	r2, #100	; 0x64
    66b6:	strb.w	r2, [r4, #1085]	; 0x43d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ba:	movs	r2, #246	; 0xf6
    66bc:	str.w	r2, [r4, #1088]	; 0x440
      _s = s;
    66c0:	mvn.w	r2, #67	; 0x43
    66c4:	strb.w	r2, [r4, #1092]	; 0x444
      _b = b;
    66c8:	mvn.w	r2, #72	; 0x48
    66cc:	strb.w	r2, [r4, #1093]	; 0x445
    66d0:	mvn.w	r2, #33	; 0x21
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    66d4:	strb.w	lr, [r4, #1108]	; 0x454
      _b = b;
    66d8:	strb.w	r2, [r4, #1133]	; 0x46d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66dc:	movs	r2, #159	; 0x9f
      _s = s;
      _b = b;
    66de:	strb.w	lr, [r4, #1109]	; 0x455
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66e2:	str.w	r2, [r4, #1120]	; 0x460
      _s = s;
      _b = b;
    66e6:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66ea:	str.w	ip, [r4, #1112]	; 0x458
      _s = s;
      _b = b;
    66ee:	strb.w	r2, [r4, #1125]	; 0x465
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66f2:	movs	r2, #0
      _s = s;
    66f4:	strb.w	lr, [r4, #1116]	; 0x45c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    66f8:	str.w	r2, [r4, #1136]	; 0x470
      _s = s;
    66fc:	strb.w	r2, [r4, #1140]	; 0x474
      _b = b;
    6700:	strb.w	r2, [r4, #1141]	; 0x475
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6704:	movs	r2, #0
      _s = s;
      _b = b;
    6706:	strb.w	lr, [r4, #1117]	; 0x45d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    670a:	str.w	r2, [r4, #1144]	; 0x478
      _s = s;
    670e:	strb.w	r2, [r4, #1148]	; 0x47c
      _b = b;
    6712:	strb.w	r2, [r4, #1149]	; 0x47d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6716:	movs	r2, #0
      _s = s;
    6718:	strb.w	r6, [r4, #1124]	; 0x464
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    671c:	str.w	r2, [r4, #1152]	; 0x480
      _s = s;
    6720:	strb.w	r2, [r4, #1156]	; 0x484
      _b = b;
    6724:	strb.w	r2, [r4, #1157]	; 0x485
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6728:	movs	r2, #246	; 0xf6
    672a:	str.w	r1, [r4, #1128]	; 0x468
    672e:	str.w	r2, [r4, #1160]	; 0x488
      _s = s;
      _b = b;
    6732:	mov.w	r2, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6736:	str.w	ip, [r4, #1168]	; 0x490
      _s = s;
      _b = b;
    673a:	strb.w	r2, [r4, #1165]	; 0x48d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    673e:	mov.w	r2, #4294967295
    6742:	strb.w	lr, [r4, #1172]	; 0x494
    6746:	strb.w	r2, [r4, #1188]	; 0x4a4
      _b = b;
    674a:	mov.w	r2, #54	; 0x36
    674e:	strb.w	lr, [r4, #1173]	; 0x495
    6752:	strb.w	r2, [r4, #1189]	; 0x4a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6756:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    675a:	str.w	ip, [r4, #1176]	; 0x498
      _s = s;
    675e:	strb.w	r2, [r4, #1196]	; 0x4ac
    6762:	mvn.w	r2, #123	; 0x7b
    6766:	strb.w	lr, [r4, #1180]	; 0x49c
    676a:	strb.w	r2, [r4, #1132]	; 0x46c
    676e:	mvn.w	r2, #55	; 0x37
      _b = b;
    6772:	strb.w	lr, [r4, #1181]	; 0x49d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6776:	str.w	r8, [r4, #1184]	; 0x4a0
    677a:	str.w	r8, [r4, #1192]	; 0x4a8
      _s = s;
    677e:	strb.w	r2, [r4, #1164]	; 0x48c
      _b = b;
    6782:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6786:	str.w	r1, [r4, #1200]	; 0x4b0
      _s = s;
      _b = b;
    678a:	strb.w	r2, [r4, #1197]	; 0x4ad
    678e:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6792:	str.w	r1, [r4, #1208]	; 0x4b8
      _s = s;
      _b = b;
    6796:	strb.w	r2, [r4, #1205]	; 0x4b5
    679a:	strb.w	r2, [r4, #1213]	; 0x4bd
    679e:	strb.w	r2, [r4, #1221]	; 0x4c5
    67a2:	strb.w	r2, [r4, #1229]	; 0x4cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67a6:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67aa:	str.w	r1, [r4, #1216]	; 0x4c0
      _s = s;
    67ae:	strb.w	r2, [r4, #1236]	; 0x4d4
      _b = b;
    67b2:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67b6:	str.w	r1, [r4, #1224]	; 0x4c8
      _s = s;
      _b = b;
    67ba:	strb.w	r2, [r4, #1237]	; 0x4d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67be:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    67c0:	strb.w	r3, [r4, #1245]	; 0x4dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67c4:	str.w	r2, [r4, #1240]	; 0x4d8
      _s = s;
    67c8:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67cc:	str.w	r9, [r4, #1248]	; 0x4e0
      _s = s;
    67d0:	strb.w	r2, [r4, #1244]	; 0x4dc
    67d4:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67d8:	str.w	r9, [r4, #1256]	; 0x4e8
      _s = s;
    67dc:	strb.w	r2, [r4, #1252]	; 0x4e4
      _b = b;
    67e0:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67e4:	strb.w	r6, [r4, #1268]	; 0x4f4
      _b = b;
    67e8:	strb.w	r2, [r4, #1253]	; 0x4e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67ec:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    67f0:	str.w	ip, [r4, #1280]	; 0x500
      _s = s;
    67f4:	strb.w	r2, [r4, #1260]	; 0x4ec
      _b = b;
    67f8:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    67fc:	strb.w	lr, [r4, #1284]	; 0x504
      _b = b;
    6800:	strb.w	r2, [r4, #1261]	; 0x4ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6804:	movs	r2, #159	; 0x9f
      _s = s;
    6806:	strb.w	sl, [r4, #1204]	; 0x4b4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    680a:	str.w	r2, [r4, #1264]	; 0x4f0
      _s = s;
      _b = b;
    680e:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6812:	strb.w	sl, [r4, #1212]	; 0x4bc
      _b = b;
    6816:	strb.w	r2, [r4, #1269]	; 0x4f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    681a:	movs	r2, #212	; 0xd4
      _s = s;
    681c:	strb.w	sl, [r4, #1220]	; 0x4c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6820:	str.w	r2, [r4, #1272]	; 0x4f8
      _s = s;
    6824:	mvn.w	r2, #31
    6828:	strb.w	sl, [r4, #1228]	; 0x4cc
    682c:	strb.w	r2, [r4, #1276]	; 0x4fc
      _b = b;
    6830:	mov.w	r2, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6834:	str.w	fp, [r4, #1232]	; 0x4d0
      _s = s;
      _b = b;
    6838:	strb.w	r2, [r4, #1277]	; 0x4fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    683c:	movs	r2, #0
      _s = s;
      _b = b;
    683e:	strb.w	lr, [r4, #1285]	; 0x505
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6842:	str.w	r2, [r4, #1288]	; 0x508
      _s = s;
    6846:	strb.w	r2, [r4, #1292]	; 0x50c
      _b = b;
    684a:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    684e:	str.w	ip, [r4, #1304]	; 0x518
      _s = s;
      _b = b;
    6852:	strb.w	r2, [r4, #1293]	; 0x50d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6856:	movs	r2, #0
      _s = s;
    6858:	strb.w	lr, [r4, #1308]	; 0x51c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    685c:	str.w	r2, [r4, #1296]	; 0x510
      _s = s;
    6860:	strb.w	r2, [r4, #1300]	; 0x514
      _b = b;
    6864:	mov.w	r2, #4294967295
    6868:	strb.w	lr, [r4, #1309]	; 0x51d
    686c:	strb.w	r2, [r4, #1301]	; 0x515
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6870:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6874:	str.w	r9, [r4, #1352]	; 0x548
      _s = s;
    6878:	strb.w	r2, [r4, #1316]	; 0x524
      _b = b;
    687c:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6880:	str.w	fp, [r4, #1312]	; 0x520
      _s = s;
      _b = b;
    6884:	strb.w	r2, [r4, #1317]	; 0x525
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6888:	movs	r2, #189	; 0xbd
    688a:	str.w	r8, [r4, #1360]	; 0x550
    688e:	str.w	r2, [r4, #1320]	; 0x528
    6892:	movs	r2, #0
    6894:	str.w	r8, [r4, #1368]	; 0x558
    6898:	str.w	r2, [r4, #1328]	; 0x530
      _s = s;
    689c:	strb.w	r2, [r4, #1332]	; 0x534
      _b = b;
    68a0:	strb.w	r2, [r4, #1333]	; 0x535
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68a4:	movs	r2, #0
    68a6:	str.w	r2, [r4, #1336]	; 0x538
      _s = s;
    68aa:	strb.w	r2, [r4, #1340]	; 0x53c
      _b = b;
    68ae:	strb.w	r2, [r4, #1341]	; 0x53d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68b2:	movs	r2, #0
    68b4:	str.w	r2, [r4, #1344]	; 0x540
      _s = s;
    68b8:	strb.w	r2, [r4, #1348]	; 0x544
      _b = b;
    68bc:	strb.w	r2, [r4, #1349]	; 0x545
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68c0:	mov.w	r2, #4294967295
    68c4:	strb.w	r2, [r4, #1356]	; 0x54c
    68c8:	strb.w	r2, [r4, #1364]	; 0x554
      _b = b;
    68cc:	mov.w	r2, #54	; 0x36
    68d0:	strb.w	r2, [r4, #1365]	; 0x555
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68d4:	mov.w	r2, #4294967295
    68d8:	strb.w	r2, [r4, #1372]	; 0x55c
      _b = b;
    68dc:	mvn.w	r2, #110	; 0x6e
    68e0:	strb.w	r2, [r4, #1325]	; 0x52d
    68e4:	mvn.w	r2, #88	; 0x58
    68e8:	strb.w	r2, [r4, #1357]	; 0x54d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    68ec:	mvn.w	r2, #48	; 0x30
    68f0:	strb.w	r2, [r4, #1324]	; 0x52c
      _b = b;
    68f4:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    68f8:	str.w	r1, [r4, #1392]	; 0x570
      _s = s;
      _b = b;
    68fc:	strb.w	r2, [r4, #1373]	; 0x55d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6900:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6904:	str.w	ip, [r4, #1400]	; 0x578
      _s = s;
    6908:	strb.w	r2, [r4, #1380]	; 0x564
      _b = b;
    690c:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6910:	strb.w	lr, [r4, #1404]	; 0x57c
      _b = b;
    6914:	strb.w	r2, [r4, #1381]	; 0x565
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6918:	movs	r2, #246	; 0xf6
      _s = s;
      _b = b;
    691a:	strb.w	lr, [r4, #1405]	; 0x57d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    691e:	str.w	r2, [r4, #1384]	; 0x568
      _s = s;
    6922:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6926:	str.w	ip, [r4, #1408]	; 0x580
      _s = s;
    692a:	strb.w	r2, [r4, #1388]	; 0x56c
      _b = b;
    692e:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6932:	strb.w	lr, [r4, #1412]	; 0x584
      _b = b;
    6936:	strb.w	r2, [r4, #1389]	; 0x56d
    693a:	mvn.w	r2, #20
    693e:	strb.w	lr, [r4, #1413]	; 0x585
    6942:	strb.w	r2, [r4, #1397]	; 0x575
    6946:	strb.w	r2, [r4, #1429]	; 0x595
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    694a:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    694e:	str.w	ip, [r4, #1416]	; 0x588
      _s = s;
    6952:	strb.w	r2, [r4, #1436]	; 0x59c
      _b = b;
    6956:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    695a:	strb.w	lr, [r4, #1420]	; 0x58c
      _b = b;
    695e:	strb.w	r2, [r4, #1437]	; 0x59d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6962:	mov.w	r2, #4294967295
      _b = b;
    6966:	strb.w	lr, [r4, #1421]	; 0x58d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    696a:	strb.w	r2, [r4, #1444]	; 0x5a4
      _b = b;
    696e:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6972:	str.w	r1, [r4, #1424]	; 0x590
      _s = s;
      _b = b;
    6976:	strb.w	r2, [r4, #1445]	; 0x5a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    697a:	movs	r2, #159	; 0x9f
    697c:	str.w	r9, [r4, #1440]	; 0x5a0
    6980:	str.w	r2, [r4, #1448]	; 0x5a8
      _s = s;
      _b = b;
    6984:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6988:	strb.w	r6, [r4, #1452]	; 0x5ac
      _b = b;
    698c:	strb.w	r2, [r4, #1453]	; 0x5ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6990:	movs	r2, #159	; 0x9f
    6992:	str.w	r8, [r4, #1376]	; 0x560
    6996:	str.w	r2, [r4, #1456]	; 0x5b0
      _s = s;
      _b = b;
    699a:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    699e:	strb.w	sl, [r4, #1396]	; 0x574
    69a2:	strb.w	sl, [r4, #1428]	; 0x594
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69a6:	str.w	fp, [r4, #1432]	; 0x598
      _s = s;
    69aa:	strb.w	r6, [r4, #1460]	; 0x5b4
      _b = b;
    69ae:	strb.w	r2, [r4, #1461]	; 0x5b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69b2:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    69b4:	strb.w	r3, [r4, #1469]	; 0x5bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69b8:	str.w	r2, [r4, #1464]	; 0x5b8
      _s = s;
    69bc:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69c0:	str.w	ip, [r4, #1472]	; 0x5c0
      _s = s;
    69c4:	strb.w	r2, [r4, #1468]	; 0x5bc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69c8:	movs	r2, #0
      _s = s;
    69ca:	strb.w	lr, [r4, #1476]	; 0x5c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69ce:	str.w	r2, [r4, #1480]	; 0x5c8
      _s = s;
    69d2:	strb.w	r2, [r4, #1484]	; 0x5cc
      _b = b;
    69d6:	mov.w	r2, #4294967295
    69da:	strb.w	lr, [r4, #1477]	; 0x5c5
    69de:	strb.w	r2, [r4, #1485]	; 0x5cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    69e2:	movs	r2, #0
    69e4:	str.w	ip, [r4, #1496]	; 0x5d8
    69e8:	str.w	r2, [r4, #1488]	; 0x5d0
      _s = s;
    69ec:	strb.w	r2, [r4, #1492]	; 0x5d4
      _b = b;
    69f0:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69f4:	strb.w	lr, [r4, #1500]	; 0x5dc
      _b = b;
    69f8:	strb.w	r2, [r4, #1493]	; 0x5d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    69fc:	mov.w	r2, #100	; 0x64
      _b = b;
    6a00:	strb.w	lr, [r4, #1501]	; 0x5dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a04:	strb.w	r2, [r4, #1508]	; 0x5e4
      _b = b;
    6a08:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a0c:	strb.w	r0, [r4, #1516]	; 0x5ec
      _b = b;
    6a10:	movs	r0, #49	; 0x31
    6a12:	strb.w	r2, [r4, #1509]	; 0x5e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a16:	movs	r2, #159	; 0x9f
    6a18:	str.w	fp, [r4, #1504]	; 0x5e0
    6a1c:	str.w	r2, [r4, #1512]	; 0x5e8
    6a20:	movs	r2, #0
    6a22:	str.w	r8, [r4, #1536]	; 0x600
    6a26:	str.w	r2, [r4, #1520]	; 0x5f0
      _s = s;
    6a2a:	strb.w	r2, [r4, #1524]	; 0x5f4
      _b = b;
    6a2e:	strb.w	r2, [r4, #1525]	; 0x5f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a32:	movs	r2, #0
    6a34:	str.w	r8, [r4, #1544]	; 0x608
    6a38:	str.w	r2, [r4, #1528]	; 0x5f8
      _s = s;
    6a3c:	strb.w	r2, [r4, #1532]	; 0x5fc
      _b = b;
    6a40:	strb.w	r2, [r4, #1533]	; 0x5fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a44:	mov.w	r2, #4294967295
    6a48:	strb.w	r2, [r4, #1540]	; 0x604
      _b = b;
    6a4c:	mov.w	r2, #54	; 0x36
    6a50:	strb.w	r2, [r4, #1541]	; 0x605
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a54:	mov.w	r2, #4294967295
    6a58:	strb.w	r2, [r4, #1548]	; 0x60c
      _b = b;
    6a5c:	mov.w	r2, #84	; 0x54
    6a60:	strb.w	r2, [r4, #1517]	; 0x5ed
    6a64:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a68:	str.w	r9, [r4, #1552]	; 0x610
      _s = s;
      _b = b;
    6a6c:	strb.w	r2, [r4, #1549]	; 0x60d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a70:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a74:	str.w	r9, [r4, #1560]	; 0x618
      _s = s;
      _b = b;
    6a78:	mov.w	r9, #96	; 0x60
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a7c:	strb.w	r2, [r4, #1556]	; 0x614
      _b = b;
    6a80:	mvn.w	r2, #74	; 0x4a
    6a84:	strb.w	r3, [r4, #1573]	; 0x625
    6a88:	strb.w	r2, [r4, #1557]	; 0x615
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a8c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6a90:	str.w	ip, [r4, #1584]	; 0x630
      _s = s;
    6a94:	strb.w	r2, [r4, #1564]	; 0x61c
      _b = b;
    6a98:	mvn.w	r2, #74	; 0x4a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6a9c:	strb.w	lr, [r4, #1588]	; 0x634
      _b = b;
    6aa0:	strb.w	r2, [r4, #1565]	; 0x61d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aa4:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    6aa6:	strb.w	lr, [r4, #1589]	; 0x635
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aaa:	str.w	r2, [r4, #1568]	; 0x620
      _s = s;
    6aae:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ab2:	str.w	ip, [r4, #1592]	; 0x638
      _s = s;
    6ab6:	strb.w	r2, [r4, #1572]	; 0x624
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6aba:	movs	r2, #246	; 0xf6
      _s = s;
    6abc:	strb.w	lr, [r4, #1596]	; 0x63c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ac0:	str.w	r2, [r4, #1576]	; 0x628
      _s = s;
    6ac4:	mvn.w	r2, #67	; 0x43
      _b = b;
    6ac8:	strb.w	lr, [r4, #1597]	; 0x63d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6acc:	strb.w	r2, [r4, #1580]	; 0x62c
      _b = b;
    6ad0:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ad4:	str.w	ip, [r4, #1600]	; 0x640
      _s = s;
      _b = b;
    6ad8:	strb.w	r2, [r4, #1581]	; 0x62d
    6adc:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ae0:	strb.w	lr, [r4, #1604]	; 0x644
      _b = b;
    6ae4:	strb.w	r2, [r4, #1621]	; 0x655
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ae8:	mov.w	r2, #100	; 0x64
      _b = b;
    6aec:	strb.w	lr, [r4, #1605]	; 0x645
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6af0:	strb.w	r2, [r4, #1628]	; 0x65c
      _b = b;
    6af4:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6af8:	str.w	ip, [r4, #1608]	; 0x648
      _s = s;
      _b = b;
    6afc:	strb.w	r2, [r4, #1629]	; 0x65d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b00:	mov.w	r2, #4294967295
    6b04:	strb.w	lr, [r4, #1612]	; 0x64c
      _b = b;
    6b08:	strb.w	lr, [r4, #1613]	; 0x64d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b0c:	str.w	r1, [r4, #1616]	; 0x650
      _s = s;
    6b10:	strb.w	sl, [r4, #1620]	; 0x654
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b14:	str.w	fp, [r4, #1624]	; 0x658
    6b18:	str.w	r8, [r4, #1632]	; 0x660
      _s = s;
    6b1c:	strb.w	r2, [r4, #1636]	; 0x664
      _b = b;
    6b20:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b24:	str.w	r1, [r4, #1648]	; 0x670
      _s = s;
      _b = b;
    6b28:	strb.w	r2, [r4, #1637]	; 0x665
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b2c:	mvn.w	r2, #123	; 0x7b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b30:	str.w	ip, [r4, #1664]	; 0x680
      _s = s;
    6b34:	strb.w	r2, [r4, #1700]	; 0x6a4
    6b38:	mov.w	r2, #4294967295
    6b3c:	strb.w	lr, [r4, #1668]	; 0x684
    6b40:	strb.w	r2, [r4, #1644]	; 0x66c
      _b = b;
    6b44:	mov.w	r2, #54	; 0x36
    6b48:	strb.w	lr, [r4, #1669]	; 0x685
    6b4c:	strb.w	r2, [r4, #1645]	; 0x66d
    6b50:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b54:	str.w	ip, [r4, #1672]	; 0x688
      _s = s;
      _b = b;
    6b58:	strb.w	r2, [r4, #1653]	; 0x675
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6b5c:	mov.w	r2, #100	; 0x64
    6b60:	strb.w	lr, [r4, #1676]	; 0x68c
    6b64:	strb.w	r2, [r4, #1660]	; 0x67c
      _b = b;
    6b68:	mvn.w	r2, #31
    6b6c:	strb.w	lr, [r4, #1677]	; 0x68d
    6b70:	strb.w	r2, [r4, #1661]	; 0x67d
    6b74:	mvn.w	r2, #41	; 0x29
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b78:	str.w	ip, [r4, #1680]	; 0x690
      _s = s;
      _b = b;
    6b7c:	strb.w	r2, [r4, #1701]	; 0x6a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b80:	movs	r2, #0
      _s = s;
    6b82:	strb.w	lr, [r4, #1684]	; 0x694
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b86:	str.w	r2, [r4, #1704]	; 0x6a8
      _s = s;
    6b8a:	strb.w	r2, [r4, #1708]	; 0x6ac
      _b = b;
    6b8e:	strb.w	r2, [r4, #1709]	; 0x6ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b92:	movs	r2, #0
      _s = s;
      _b = b;
    6b94:	strb.w	lr, [r4, #1685]	; 0x695
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6b98:	str.w	r2, [r4, #1712]	; 0x6b0
      _s = s;
    6b9c:	strb.w	r2, [r4, #1716]	; 0x6b4
      _b = b;
    6ba0:	strb.w	r2, [r4, #1717]	; 0x6b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ba4:	movs	r2, #0
    6ba6:	str.w	ip, [r4, #1688]	; 0x698
      _s = s;
    6baa:	strb.w	lr, [r4, #1692]	; 0x69c
      _b = b;
    6bae:	strb.w	lr, [r4, #1693]	; 0x69d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bb2:	str.w	r1, [r4, #1696]	; 0x6a0
    6bb6:	str.w	r2, [r4, #1720]	; 0x6b8
    6bba:	str.w	r8, [r4, #1640]	; 0x668
      _s = s;
    6bbe:	strb.w	sl, [r4, #1652]	; 0x674
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bc2:	str.w	fp, [r4, #1656]	; 0x678
      _s = s;
    6bc6:	strb.w	r2, [r4, #1724]	; 0x6bc
      _b = b;
    6bca:	strb.w	r2, [r4, #1725]	; 0x6bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bce:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bd2:	str.w	ip, [r4, #1728]	; 0x6c0
      _s = s;
    6bd6:	strb.w	r2, [r4, #1748]	; 0x6d4
      _b = b;
    6bda:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6bde:	strb.w	lr, [r4, #1732]	; 0x6c4
      _b = b;
    6be2:	strb.w	r2, [r4, #1749]	; 0x6d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6be6:	movs	r2, #141	; 0x8d
      _s = s;
      _b = b;
    6be8:	strb.w	lr, [r4, #1733]	; 0x6c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bec:	str.w	r2, [r4, #1752]	; 0x6d8
      _s = s;
    6bf0:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6bf4:	str.w	ip, [r4, #1736]	; 0x6c8
      _s = s;
    6bf8:	strb.w	r2, [r4, #1756]	; 0x6dc
      _b = b;
    6bfc:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c00:	strb.w	lr, [r4, #1740]	; 0x6cc
      _b = b;
    6c04:	strb.w	r2, [r4, #1757]	; 0x6dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c08:	strb.w	r2, [r4, #1764]	; 0x6e4
      _b = b;
    6c0c:	mvn.w	r2, #31
    6c10:	strb.w	lr, [r4, #1741]	; 0x6cd
    6c14:	strb.w	r2, [r4, #1765]	; 0x6e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c18:	movs	r2, #246	; 0xf6
    6c1a:	str.w	ip, [r4, #1776]	; 0x6f0
    6c1e:	str.w	r2, [r4, #1768]	; 0x6e8
      _s = s;
    6c22:	mvn.w	r2, #67	; 0x43
    6c26:	strb.w	lr, [r4, #1780]	; 0x6f4
    6c2a:	strb.w	r2, [r4, #1772]	; 0x6ec
      _b = b;
    6c2e:	mvn.w	r2, #72	; 0x48
    6c32:	strb.w	lr, [r4, #1781]	; 0x6f5
    6c36:	strb.w	r2, [r4, #1773]	; 0x6ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c3a:	movs	r2, #0
    6c3c:	str.w	ip, [r4, #1800]	; 0x708
    6c40:	str.w	r2, [r4, #1784]	; 0x6f8
      _s = s;
    6c44:	strb.w	r2, [r4, #1788]	; 0x6fc
      _b = b;
    6c48:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c4c:	strb.w	lr, [r4, #1804]	; 0x70c
      _b = b;
    6c50:	strb.w	r2, [r4, #1789]	; 0x6fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c54:	movs	r2, #0
      _s = s;
      _b = b;
    6c56:	strb.w	lr, [r4, #1805]	; 0x70d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c5a:	str.w	r2, [r4, #1792]	; 0x700
      _s = s;
    6c5e:	strb.w	r2, [r4, #1796]	; 0x704
      _b = b;
    6c62:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c66:	str.w	r1, [r4, #1808]	; 0x710
      _s = s;
      _b = b;
    6c6a:	strb.w	r2, [r4, #1797]	; 0x705
    6c6e:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c72:	str.w	r8, [r4, #1744]	; 0x6d0
    6c76:	str.w	fp, [r4, #1760]	; 0x6e0
      _s = s;
    6c7a:	strb.w	sl, [r4, #1812]	; 0x714
      _b = b;
    6c7e:	strb.w	r2, [r4, #1813]	; 0x715
    6c82:	strb.w	r2, [r4, #1821]	; 0x71d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6c86:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c8a:	str.w	r1, [r4, #1816]	; 0x718
      _s = s;
    6c8e:	strb.w	r2, [r4, #1828]	; 0x724
      _b = b;
    6c92:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6c96:	str.w	ip, [r4, #1832]	; 0x728
      _s = s;
      _b = b;
    6c9a:	strb.w	r2, [r4, #1829]	; 0x725
    6c9e:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ca2:	strb.w	lr, [r4, #1836]	; 0x72c
      _b = b;
    6ca6:	strb.w	r2, [r4, #1853]	; 0x73d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6caa:	mov.w	r2, #100	; 0x64
      _b = b;
    6cae:	strb.w	lr, [r4, #1837]	; 0x72d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cb2:	strb.w	r2, [r4, #1860]	; 0x744
      _b = b;
    6cb6:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cba:	str.w	ip, [r4, #1840]	; 0x730
      _s = s;
      _b = b;
    6cbe:	strb.w	r2, [r4, #1861]	; 0x745
    6cc2:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cc6:	strb.w	lr, [r4, #1844]	; 0x734
      _b = b;
    6cca:	strb.w	r2, [r4, #1869]	; 0x74d
    6cce:	strb.w	r2, [r4, #1885]	; 0x75d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cd2:	mov.w	r2, #4294967295
      _b = b;
    6cd6:	strb.w	lr, [r4, #1845]	; 0x735
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6cda:	strb.w	r2, [r4, #1892]	; 0x764
      _b = b;
    6cde:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ce2:	str.w	r1, [r4, #1848]	; 0x738
      _s = s;
      _b = b;
    6ce6:	strb.w	r2, [r4, #1893]	; 0x765
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cea:	movs	r2, #0
    6cec:	str.w	r1, [r4, #1864]	; 0x748
    6cf0:	str.w	ip, [r4, #1872]	; 0x750
      _s = s;
    6cf4:	strb.w	lr, [r4, #1876]	; 0x754
      _b = b;
    6cf8:	strb.w	lr, [r4, #1877]	; 0x755
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6cfc:	str.w	r1, [r4, #1880]	; 0x758
    6d00:	str.w	r2, [r4, #1896]	; 0x768
      _s = s;
    6d04:	strb.w	sl, [r4, #1820]	; 0x71c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d08:	str.w	r8, [r4, #1824]	; 0x720
      _s = s;
    6d0c:	strb.w	sl, [r4, #1852]	; 0x73c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d10:	str.w	fp, [r4, #1856]	; 0x740
      _s = s;
    6d14:	strb.w	sl, [r4, #1868]	; 0x74c
    6d18:	strb.w	sl, [r4, #1884]	; 0x75c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d1c:	str.w	r8, [r4, #1888]	; 0x760
      _s = s;
    6d20:	strb.w	r2, [r4, #1900]	; 0x76c
      _b = b;
    6d24:	strb.w	r2, [r4, #1901]	; 0x76d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d28:	movs	r2, #0
    6d2a:	str.w	ip, [r4, #1920]	; 0x780
    6d2e:	str.w	r2, [r4, #1904]	; 0x770
      _s = s;
    6d32:	strb.w	r2, [r4, #1908]	; 0x774
      _b = b;
    6d36:	strb.w	r2, [r4, #1909]	; 0x775
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d3a:	movs	r2, #0
      _s = s;
    6d3c:	strb.w	lr, [r4, #1924]	; 0x784
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d40:	str.w	r2, [r4, #1912]	; 0x778
      _s = s;
    6d44:	strb.w	r2, [r4, #1916]	; 0x77c
      _b = b;
    6d48:	strb.w	r2, [r4, #1917]	; 0x77d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d4c:	mov.w	r2, #4294967295
      _b = b;
    6d50:	strb.w	lr, [r4, #1925]	; 0x785
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d54:	strb.w	r2, [r4, #1948]	; 0x79c
      _b = b;
    6d58:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d5c:	str.w	ip, [r4, #1928]	; 0x788
      _s = s;
      _b = b;
    6d60:	strb.w	r2, [r4, #1949]	; 0x79d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d64:	movs	r2, #246	; 0xf6
      _s = s;
    6d66:	strb.w	lr, [r4, #1932]	; 0x78c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d6a:	str.w	r2, [r4, #1952]	; 0x7a0
      _s = s;
    6d6e:	mvn.w	r2, #67	; 0x43
      _b = b;
    6d72:	strb.w	lr, [r4, #1933]	; 0x78d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6d76:	strb.w	r2, [r4, #1956]	; 0x7a4
      _b = b;
    6d7a:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d7e:	str.w	ip, [r4, #1936]	; 0x790
      _s = s;
      _b = b;
    6d82:	strb.w	r2, [r4, #1957]	; 0x7a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d86:	movs	r2, #0
      _s = s;
    6d88:	strb.w	lr, [r4, #1940]	; 0x794
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6d8c:	str.w	r2, [r4, #1976]	; 0x7b8
      _s = s;
    6d90:	strb.w	r2, [r4, #1980]	; 0x7bc
      _b = b;
    6d94:	mov.w	r2, #4294967295
    6d98:	strb.w	lr, [r4, #1941]	; 0x795
    6d9c:	strb.w	r2, [r4, #1981]	; 0x7bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6da0:	movs	r2, #0
    6da2:	str.w	ip, [r4, #1960]	; 0x7a8
      _s = s;
    6da6:	strb.w	lr, [r4, #1964]	; 0x7ac
      _b = b;
    6daa:	strb.w	lr, [r4, #1965]	; 0x7ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dae:	str.w	ip, [r4, #1968]	; 0x7b0
      _s = s;
    6db2:	strb.w	lr, [r4, #1972]	; 0x7b4
      _b = b;
    6db6:	strb.w	lr, [r4, #1973]	; 0x7b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dba:	str.w	r2, [r4, #1984]	; 0x7c0
    6dbe:	str.w	r8, [r4, #1944]	; 0x798
      _s = s;
    6dc2:	strb.w	r2, [r4, #1988]	; 0x7c4
      _b = b;
    6dc6:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dca:	str.w	ip, [r4, #1992]	; 0x7c8
      _s = s;
      _b = b;
    6dce:	strb.w	r2, [r4, #1989]	; 0x7c5
    6dd2:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dd6:	strb.w	lr, [r4, #1996]	; 0x7cc
      _b = b;
    6dda:	strb.w	r2, [r4, #2005]	; 0x7d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6dde:	mov.w	r2, #4294967295
      _b = b;
    6de2:	strb.w	lr, [r4, #1997]	; 0x7cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6de6:	strb.w	r2, [r4, #2012]	; 0x7dc
      _b = b;
    6dea:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dee:	str.w	r1, [r4, #2000]	; 0x7d0
      _s = s;
      _b = b;
    6df2:	strb.w	r2, [r4, #2013]	; 0x7dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6df6:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6dfa:	str.w	ip, [r4, #2024]	; 0x7e8
      _s = s;
    6dfe:	strb.w	r2, [r4, #2020]	; 0x7e4
      _b = b;
    6e02:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e06:	strb.w	lr, [r4, #2028]	; 0x7ec
      _b = b;
    6e0a:	strb.w	r2, [r4, #2021]	; 0x7e5
    6e0e:	mvn.w	r2, #20
    6e12:	strb.w	lr, [r4, #2029]	; 0x7ed
    6e16:	strb.w	r2, [r4, #2053]	; 0x805
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e1a:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e1e:	str.w	ip, [r4, #2032]	; 0x7f0
      _s = s;
    6e22:	strb.w	r2, [r4, #2060]	; 0x80c
      _b = b;
    6e26:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e2a:	strb.w	lr, [r4, #2036]	; 0x7f4
      _b = b;
    6e2e:	strb.w	r2, [r4, #2061]	; 0x80d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e32:	mvn.w	r2, #57	; 0x39
      _b = b;
    6e36:	strb.w	lr, [r4, #2037]	; 0x7f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e3a:	strb.w	r2, [r4, #2068]	; 0x814
    6e3e:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e42:	str.w	ip, [r4, #2040]	; 0x7f8
      _s = s;
    6e46:	strb.w	r2, [r4, #2076]	; 0x81c
      _b = b;
    6e4a:	mvn.w	r2, #19
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e4e:	strb.w	lr, [r4, #2044]	; 0x7fc
      _b = b;
    6e52:	strb.w	lr, [r4, #2045]	; 0x7fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e56:	str.w	r1, [r4, #2048]	; 0x800
    6e5a:	str.w	ip, [r4, #2064]	; 0x810
      _s = s;
    6e5e:	strb.w	sl, [r4, #2004]	; 0x7d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e62:	str.w	r8, [r4, #2008]	; 0x7d8
    6e66:	str.w	r8, [r4, #2016]	; 0x7e0
      _s = s;
    6e6a:	strb.w	sl, [r4, #2052]	; 0x804
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e6e:	str.w	fp, [r4, #2056]	; 0x808
    6e72:	str.w	r8, [r4, #2072]	; 0x818
      _s = s;
      _b = b;
    6e76:	strb.w	r2, [r4, #2069]	; 0x815
    6e7a:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e7e:	str.w	ip, [r4, #2112]	; 0x840
      _s = s;
      _b = b;
    6e82:	strb.w	r2, [r4, #2077]	; 0x81d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e86:	movs	r2, #246	; 0xf6
      _s = s;
    6e88:	strb.w	lr, [r4, #2116]	; 0x844
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6e8c:	str.w	r2, [r4, #2080]	; 0x820
      _s = s;
    6e90:	mvn.w	r2, #55	; 0x37
      _b = b;
    6e94:	strb.w	lr, [r4, #2117]	; 0x845
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6e98:	strb.w	r2, [r4, #2084]	; 0x824
      _b = b;
    6e9c:	mov.w	r2, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ea0:	str.w	ip, [r4, #2120]	; 0x848
      _s = s;
      _b = b;
    6ea4:	strb.w	r2, [r4, #2085]	; 0x825
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ea8:	movs	r2, #0
      _s = s;
    6eaa:	strb.w	lr, [r4, #2124]	; 0x84c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eae:	str.w	r2, [r4, #2088]	; 0x828
      _s = s;
    6eb2:	strb.w	r2, [r4, #2092]	; 0x82c
      _b = b;
    6eb6:	strb.w	r2, [r4, #2093]	; 0x82d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6eba:	movs	r2, #0
      _s = s;
      _b = b;
    6ebc:	strb.w	lr, [r4, #2125]	; 0x84d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ec0:	str.w	r2, [r4, #2096]	; 0x830
      _s = s;
    6ec4:	strb.w	r2, [r4, #2100]	; 0x834
      _b = b;
    6ec8:	strb.w	r2, [r4, #2101]	; 0x835
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ecc:	movs	r2, #0
    6ece:	str.w	ip, [r4, #2128]	; 0x850
    6ed2:	str.w	r2, [r4, #2104]	; 0x838
      _s = s;
    6ed6:	strb.w	r2, [r4, #2108]	; 0x83c
      _b = b;
    6eda:	strb.w	r2, [r4, #2109]	; 0x83d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ede:	mov.w	r2, #4294967295
    6ee2:	strb.w	lr, [r4, #2132]	; 0x854
    6ee6:	strb.w	r2, [r4, #2140]	; 0x85c
      _b = b;
    6eea:	mov.w	r2, #54	; 0x36
    6eee:	strb.w	lr, [r4, #2133]	; 0x855
    6ef2:	strb.w	r2, [r4, #2141]	; 0x85d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6ef6:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6efa:	str.w	ip, [r4, #2152]	; 0x868
      _s = s;
    6efe:	strb.w	r2, [r4, #2148]	; 0x864
      _b = b;
    6f02:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f06:	strb.w	lr, [r4, #2156]	; 0x86c
      _b = b;
    6f0a:	strb.w	r2, [r4, #2149]	; 0x865
    6f0e:	mvn.w	r2, #20
    6f12:	strb.w	lr, [r4, #2157]	; 0x86d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f16:	str.w	ip, [r4, #2160]	; 0x870
    6f1a:	str.w	r8, [r4, #2136]	; 0x858
    6f1e:	str.w	r8, [r4, #2144]	; 0x860
      _s = s;
    6f22:	strb.w	lr, [r4, #2164]	; 0x874
      _b = b;
    6f26:	strb.w	r2, [r4, #2197]	; 0x895
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f2a:	mov.w	r2, #4294967295
      _b = b;
    6f2e:	strb.w	lr, [r4, #2165]	; 0x875
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f32:	strb.w	r2, [r4, #2204]	; 0x89c
      _b = b;
    6f36:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f3a:	str.w	ip, [r4, #2168]	; 0x878
      _s = s;
      _b = b;
    6f3e:	strb.w	r2, [r4, #2205]	; 0x89d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6f42:	mov.w	r2, #4294967295
    6f46:	strb.w	lr, [r4, #2172]	; 0x87c
    6f4a:	strb.w	r2, [r4, #2212]	; 0x8a4
      _b = b;
    6f4e:	mov.w	r2, #54	; 0x36
    6f52:	strb.w	lr, [r4, #2173]	; 0x87d
    6f56:	strb.w	r2, [r4, #2213]	; 0x8a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f5a:	movs	r2, #189	; 0xbd
    6f5c:	str.w	ip, [r4, #2176]	; 0x880
    6f60:	str.w	r2, [r4, #2248]	; 0x8c8
      _s = s;
    6f64:	mvn.w	r2, #53	; 0x35
    6f68:	strb.w	lr, [r4, #2180]	; 0x884
      _b = b;
    6f6c:	strb.w	lr, [r4, #2181]	; 0x885
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f70:	str.w	ip, [r4, #2184]	; 0x888
      _s = s;
    6f74:	strb.w	lr, [r4, #2188]	; 0x88c
      _b = b;
    6f78:	strb.w	lr, [r4, #2189]	; 0x88d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f7c:	str.w	r1, [r4, #2192]	; 0x890
    6f80:	str.w	ip, [r4, #2216]	; 0x8a8
      _s = s;
    6f84:	strb.w	lr, [r4, #2220]	; 0x8ac
      _b = b;
    6f88:	strb.w	lr, [r4, #2221]	; 0x8ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f8c:	str.w	ip, [r4, #2224]	; 0x8b0
      _s = s;
    6f90:	strb.w	lr, [r4, #2228]	; 0x8b4
      _b = b;
    6f94:	strb.w	lr, [r4, #2229]	; 0x8b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6f98:	str.w	ip, [r4, #2232]	; 0x8b8
      _s = s;
    6f9c:	strb.w	lr, [r4, #2236]	; 0x8bc
      _b = b;
    6fa0:	strb.w	lr, [r4, #2237]	; 0x8bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fa4:	str.w	ip, [r4, #2240]	; 0x8c0
      _s = s;
    6fa8:	strb.w	lr, [r4, #2244]	; 0x8c4
      _b = b;
    6fac:	strb.w	lr, [r4, #2245]	; 0x8c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fb0:	strb.w	sl, [r4, #2196]	; 0x894
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fb4:	str.w	r8, [r4, #2200]	; 0x898
    6fb8:	str.w	r8, [r4, #2208]	; 0x8a0
      _s = s;
    6fbc:	strb.w	r2, [r4, #2252]	; 0x8cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fc0:	movs	r2, #159	; 0x9f
      _s = s;
      _b = b;
    6fc2:	strb.w	r3, [r4, #2253]	; 0x8cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fc6:	str.w	r2, [r4, #2256]	; 0x8d0
      _s = s;
      _b = b;
    6fca:	mvn.w	r2, #52	; 0x34
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fce:	strb.w	r6, [r4, #2260]	; 0x8d4
    6fd2:	movs	r6, #218	; 0xda
      _b = b;
    6fd4:	strb.w	r2, [r4, #2261]	; 0x8d5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fd8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6fdc:	str.w	ip, [r4, #2304]	; 0x900
      _s = s;
    6fe0:	strb.w	r2, [r4, #2268]	; 0x8dc
      _b = b;
    6fe4:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    6fe8:	strb.w	lr, [r4, #2308]	; 0x904
      _b = b;
    6fec:	strb.w	r2, [r4, #2269]	; 0x8dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ff0:	movs	r2, #0
      _s = s;
      _b = b;
    6ff2:	strb.w	lr, [r4, #2309]	; 0x905
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    6ff6:	str.w	r2, [r4, #2280]	; 0x8e8
      _s = s;
    6ffa:	strb.w	r2, [r4, #2284]	; 0x8ec
      _b = b;
    6ffe:	strb.w	r2, [r4, #2285]	; 0x8ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7002:	movs	r2, #0
    7004:	str.w	ip, [r4, #2312]	; 0x908
    7008:	str.w	r2, [r4, #2288]	; 0x8f0
      _s = s;
    700c:	strb.w	r2, [r4, #2292]	; 0x8f4
      _b = b;
    7010:	strb.w	r2, [r4, #2293]	; 0x8f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7014:	movs	r2, #0
      _s = s;
    7016:	strb.w	lr, [r4, #2316]	; 0x90c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    701a:	str.w	r2, [r4, #2296]	; 0x8f8
      _s = s;
    701e:	strb.w	r2, [r4, #2300]	; 0x8fc
      _b = b;
    7022:	strb.w	r2, [r4, #2301]	; 0x8fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7026:	mov.w	r2, #4294967295
      _b = b;
    702a:	strb.w	lr, [r4, #2317]	; 0x90d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    702e:	strb.w	r2, [r4, #2340]	; 0x924
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7032:	movs	r2, #215	; 0xd7
    7034:	str.w	ip, [r4, #2320]	; 0x910
    7038:	str.w	r2, [r4, #2272]	; 0x8e0
      _s = s;
    703c:	mvn.w	r2, #16
    7040:	strb.w	lr, [r4, #2324]	; 0x914
    7044:	strb.w	r2, [r4, #2276]	; 0x8e4
      _b = b;
    7048:	mov.w	r2, #54	; 0x36
    704c:	strb.w	lr, [r4, #2325]	; 0x915
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7050:	str.w	ip, [r4, #2328]	; 0x918
      _s = s;
    7054:	strb.w	lr, [r4, #2332]	; 0x91c
      _b = b;
    7058:	strb.w	lr, [r4, #2333]	; 0x91d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    705c:	str.w	r8, [r4, #2264]	; 0x8d8
    7060:	str.w	r8, [r4, #2336]	; 0x920
      _s = s;
      _b = b;
    7064:	strb.w	r0, [r4, #2277]	; 0x8e5
    7068:	strb.w	r2, [r4, #2341]	; 0x925
    706c:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7070:	str.w	ip, [r4, #2344]	; 0x928
      _s = s;
      _b = b;
    7074:	strb.w	r2, [r4, #2389]	; 0x955
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7078:	mov.w	r2, #4294967295
    707c:	strb.w	lr, [r4, #2348]	; 0x92c
    7080:	strb.w	r2, [r4, #2396]	; 0x95c
      _b = b;
    7084:	mov.w	r2, #54	; 0x36
    7088:	strb.w	lr, [r4, #2349]	; 0x92d
    708c:	strb.w	r2, [r4, #2397]	; 0x95d
    7090:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7094:	str.w	ip, [r4, #2352]	; 0x930
      _s = s;
    7098:	strb.w	lr, [r4, #2356]	; 0x934
      _b = b;
    709c:	strb.w	lr, [r4, #2357]	; 0x935
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70a0:	str.w	ip, [r4, #2360]	; 0x938
      _s = s;
    70a4:	strb.w	lr, [r4, #2364]	; 0x93c
      _b = b;
    70a8:	strb.w	lr, [r4, #2365]	; 0x93d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70ac:	str.w	ip, [r4, #2368]	; 0x940
      _s = s;
    70b0:	strb.w	lr, [r4, #2372]	; 0x944
      _b = b;
    70b4:	strb.w	lr, [r4, #2373]	; 0x945
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70b8:	str.w	ip, [r4, #2376]	; 0x948
      _s = s;
    70bc:	strb.w	lr, [r4, #2380]	; 0x94c
      _b = b;
    70c0:	strb.w	lr, [r4, #2381]	; 0x94d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70c4:	str.w	r1, [r4, #2384]	; 0x950
    70c8:	str.w	ip, [r4, #2400]	; 0x960
      _s = s;
    70cc:	strb.w	lr, [r4, #2404]	; 0x964
      _b = b;
    70d0:	strb.w	lr, [r4, #2405]	; 0x965
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70d4:	str.w	ip, [r4, #2408]	; 0x968
      _s = s;
    70d8:	strb.w	lr, [r4, #2412]	; 0x96c
      _b = b;
    70dc:	strb.w	lr, [r4, #2413]	; 0x96d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70e0:	str.w	r1, [r4, #2416]	; 0x970
      _s = s;
      _b = b;
    70e4:	strb.w	r2, [r4, #2421]	; 0x975
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70e8:	str.w	r1, [r4, #2424]	; 0x978
      _s = s;
    70ec:	strb.w	sl, [r4, #2388]	; 0x954
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    70f0:	str.w	r8, [r4, #2392]	; 0x958
      _s = s;
    70f4:	strb.w	sl, [r4, #2420]	; 0x974
    70f8:	strb.w	sl, [r4, #2428]	; 0x97c
      _b = b;
    70fc:	strb.w	r2, [r4, #2429]	; 0x97d
    7100:	strb.w	r2, [r4, #2437]	; 0x985
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7104:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7108:	str.w	r1, [r4, #2432]	; 0x980
      _s = s;
    710c:	strb.w	r2, [r4, #2444]	; 0x98c
      _b = b;
    7110:	mvn.w	r2, #31
    7114:	strb.w	r3, [r4, #2453]	; 0x995
    7118:	strb.w	r2, [r4, #2445]	; 0x98d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    711c:	movs	r2, #189	; 0xbd
      _s = s;
      _b = b;
    711e:	strb.w	r0, [r4, #2469]	; 0x9a5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7122:	movs	r0, #228	; 0xe4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7124:	str.w	r2, [r4, #2448]	; 0x990
      _s = s;
    7128:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    712c:	str.w	ip, [r4, #2496]	; 0x9c0
      _s = s;
    7130:	strb.w	r2, [r4, #2452]	; 0x994
    7134:	mov.w	r2, #4294967295
    7138:	strb.w	lr, [r4, #2500]	; 0x9c4
    713c:	strb.w	r2, [r4, #2460]	; 0x99c
      _b = b;
    7140:	mov.w	r2, #54	; 0x36
    7144:	strb.w	lr, [r4, #2501]	; 0x9c5
    7148:	strb.w	r2, [r4, #2461]	; 0x99d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    714c:	movs	r2, #215	; 0xd7
    714e:	str.w	ip, [r4, #2504]	; 0x9c8
    7152:	str.w	r2, [r4, #2464]	; 0x9a0
      _s = s;
    7156:	mvn.w	r2, #16
    715a:	strb.w	lr, [r4, #2508]	; 0x9cc
    715e:	strb.w	r2, [r4, #2468]	; 0x9a4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7162:	movs	r2, #0
      _s = s;
      _b = b;
    7164:	strb.w	lr, [r4, #2509]	; 0x9cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7168:	str.w	r2, [r4, #2472]	; 0x9a8
      _s = s;
    716c:	strb.w	r2, [r4, #2476]	; 0x9ac
      _b = b;
    7170:	strb.w	r2, [r4, #2477]	; 0x9ad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7174:	movs	r2, #0
    7176:	str.w	ip, [r4, #2512]	; 0x9d0
    717a:	str.w	r2, [r4, #2480]	; 0x9b0
      _s = s;
    717e:	strb.w	r2, [r4, #2484]	; 0x9b4
      _b = b;
    7182:	strb.w	r2, [r4, #2485]	; 0x9b5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7186:	movs	r2, #0
      _s = s;
    7188:	strb.w	sl, [r4, #2436]	; 0x984
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    718c:	str.w	r2, [r4, #2488]	; 0x9b8
      _s = s;
    7190:	strb.w	r2, [r4, #2492]	; 0x9bc
      _b = b;
    7194:	strb.w	r2, [r4, #2493]	; 0x9bd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7198:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    719c:	str.w	fp, [r4, #2440]	; 0x988
    71a0:	str.w	r8, [r4, #2456]	; 0x998
      _s = s;
    71a4:	strb.w	lr, [r4, #2516]	; 0x9d4
    71a8:	strb.w	r2, [r4, #2532]	; 0x9e4
      _b = b;
    71ac:	mov.w	r2, #54	; 0x36
    71b0:	strb.w	lr, [r4, #2517]	; 0x9d5
    71b4:	strb.w	r2, [r4, #2533]	; 0x9e5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71b8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71bc:	str.w	ip, [r4, #2520]	; 0x9d8
      _s = s;
    71c0:	strb.w	r2, [r4, #2588]	; 0xa1c
      _b = b;
    71c4:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    71c8:	strb.w	lr, [r4, #2524]	; 0x9dc
      _b = b;
    71cc:	strb.w	r2, [r4, #2589]	; 0xa1d
    71d0:	mvn.w	r2, #20
    71d4:	strb.w	lr, [r4, #2525]	; 0x9dd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71d8:	str.w	ip, [r4, #2536]	; 0x9e8
      _s = s;
    71dc:	strb.w	lr, [r4, #2540]	; 0x9ec
      _b = b;
    71e0:	strb.w	lr, [r4, #2541]	; 0x9ed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71e4:	str.w	ip, [r4, #2544]	; 0x9f0
      _s = s;
    71e8:	strb.w	lr, [r4, #2548]	; 0x9f4
      _b = b;
    71ec:	strb.w	lr, [r4, #2549]	; 0x9f5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71f0:	str.w	ip, [r4, #2552]	; 0x9f8
      _s = s;
    71f4:	strb.w	lr, [r4, #2556]	; 0x9fc
      _b = b;
    71f8:	strb.w	lr, [r4, #2557]	; 0x9fd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    71fc:	str.w	ip, [r4, #2560]	; 0xa00
      _s = s;
    7200:	strb.w	lr, [r4, #2564]	; 0xa04
      _b = b;
    7204:	strb.w	lr, [r4, #2565]	; 0xa05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7208:	str.w	ip, [r4, #2568]	; 0xa08
      _s = s;
    720c:	strb.w	lr, [r4, #2572]	; 0xa0c
      _b = b;
    7210:	strb.w	lr, [r4, #2573]	; 0xa0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7214:	str.w	ip, [r4, #2576]	; 0xa10
      _s = s;
    7218:	strb.w	lr, [r4, #2580]	; 0xa14
      _b = b;
    721c:	strb.w	lr, [r4, #2581]	; 0xa15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7220:	str.w	ip, [r4, #2592]	; 0xa20
      _s = s;
    7224:	strb.w	lr, [r4, #2596]	; 0xa24
      _b = b;
    7228:	strb.w	lr, [r4, #2597]	; 0xa25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    722c:	str.w	r1, [r4, #2600]	; 0xa28
    7230:	str.w	r8, [r4, #2528]	; 0x9e0
    7234:	str.w	r8, [r4, #2584]	; 0xa18
      _s = s;
    7238:	strb.w	sl, [r4, #2604]	; 0xa2c
      _b = b;
    723c:	strb.w	r2, [r4, #2605]	; 0xa2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7240:	movs	r2, #0
    7242:	str.w	r1, [r4, #2616]	; 0xa38
    7246:	str.w	r2, [r4, #2608]	; 0xa30
      _s = s;
    724a:	strb.w	r2, [r4, #2612]	; 0xa34
      _b = b;
    724e:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7252:	str.w	ip, [r4, #2624]	; 0xa40
      _s = s;
      _b = b;
    7256:	strb.w	r2, [r4, #2613]	; 0xa35
    725a:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    725e:	strb.w	lr, [r4, #2628]	; 0xa44
      _b = b;
    7262:	strb.w	r2, [r4, #2621]	; 0xa3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7266:	mov.w	r2, #4294967295
      _b = b;
    726a:	strb.w	lr, [r4, #2629]	; 0xa45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    726e:	strb.w	r2, [r4, #2644]	; 0xa54
      _b = b;
    7272:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7276:	str.w	ip, [r4, #2632]	; 0xa48
      _s = s;
      _b = b;
    727a:	strb.w	r2, [r4, #2645]	; 0xa55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    727e:	movs	r2, #141	; 0x8d
      _s = s;
    7280:	strb.w	lr, [r4, #2636]	; 0xa4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7284:	str.w	r2, [r4, #2648]	; 0xa58
      _s = s;
    7288:	mvn.w	r2, #11
      _b = b;
    728c:	strb.w	lr, [r4, #2637]	; 0xa4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7290:	strb.w	r2, [r4, #2652]	; 0xa5c
      _b = b;
    7294:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7298:	str.w	ip, [r4, #2688]	; 0xa80
      _s = s;
      _b = b;
    729c:	strb.w	r2, [r4, #2653]	; 0xa5d
    72a0:	mov.w	r2, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    72a4:	strb.w	lr, [r4, #2692]	; 0xa84
      _b = b;
    72a8:	strb.w	r2, [r4, #2661]	; 0xa65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72ac:	movs	r2, #0
      _s = s;
    72ae:	strb.w	r6, [r4, #2660]	; 0xa64
    72b2:	movs	r6, #205	; 0xcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72b4:	str.w	r2, [r4, #2664]	; 0xa68
      _s = s;
    72b8:	strb.w	r2, [r4, #2668]	; 0xa6c
      _b = b;
    72bc:	strb.w	r2, [r4, #2669]	; 0xa6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72c0:	movs	r2, #0
      _s = s;
    72c2:	strb.w	sl, [r4, #2620]	; 0xa3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72c6:	str.w	r2, [r4, #2672]	; 0xa70
      _s = s;
    72ca:	strb.w	r2, [r4, #2676]	; 0xa74
      _b = b;
    72ce:	strb.w	r2, [r4, #2677]	; 0xa75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72d2:	movs	r2, #0
    72d4:	str.w	r8, [r4, #2640]	; 0xa50
    72d8:	str.w	r2, [r4, #2680]	; 0xa78
      _s = s;
    72dc:	strb.w	r2, [r4, #2684]	; 0xa7c
      _b = b;
    72e0:	strb.w	r2, [r4, #2685]	; 0xa7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72e4:	movs	r2, #170	; 0xaa
    72e6:	str.w	r2, [r4, #2656]	; 0xa60
    72ea:	movs	r2, #246	; 0xf6
      _s = s;
      _b = b;
    72ec:	strb.w	lr, [r4, #2693]	; 0xa85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72f0:	str.w	r2, [r4, #2704]	; 0xa90
      _s = s;
    72f4:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    72f8:	str.w	ip, [r4, #2696]	; 0xa88
      _s = s;
    72fc:	strb.w	r2, [r4, #2708]	; 0xa94
      _b = b;
    7300:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7304:	strb.w	lr, [r4, #2700]	; 0xa8c
      _b = b;
    7308:	strb.w	r2, [r4, #2709]	; 0xa95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    730c:	movs	r2, #246	; 0xf6
      _s = s;
      _b = b;
    730e:	strb.w	lr, [r4, #2701]	; 0xa8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7312:	str.w	r2, [r4, #2712]	; 0xa98
      _s = s;
    7316:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    731a:	str.w	ip, [r4, #2752]	; 0xac0
      _s = s;
    731e:	strb.w	r2, [r4, #2716]	; 0xa9c
      _b = b;
    7322:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7326:	strb.w	lr, [r4, #2756]	; 0xac4
      _b = b;
    732a:	strb.w	r2, [r4, #2717]	; 0xa9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    732e:	mov.w	r2, #4294967295
      _b = b;
    7332:	strb.w	lr, [r4, #2757]	; 0xac5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7336:	strb.w	r2, [r4, #2724]	; 0xaa4
      _b = b;
    733a:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    733e:	str.w	ip, [r4, #2760]	; 0xac8
      _s = s;
      _b = b;
    7342:	strb.w	r2, [r4, #2725]	; 0xaa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7346:	movs	r2, #246	; 0xf6
      _s = s;
    7348:	strb.w	lr, [r4, #2764]	; 0xacc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    734c:	str.w	r2, [r4, #2728]	; 0xaa8
      _s = s;
    7350:	mvn.w	r2, #67	; 0x43
      _b = b;
    7354:	strb.w	lr, [r4, #2765]	; 0xacd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7358:	strb.w	r2, [r4, #2732]	; 0xaac
      _b = b;
    735c:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7360:	str.w	r8, [r4, #2720]	; 0xaa0
      _s = s;
      _b = b;
    7364:	strb.w	r2, [r4, #2733]	; 0xaad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7368:	movs	r2, #246	; 0xf6
    736a:	str.w	r8, [r4, #2768]	; 0xad0
    736e:	str.w	r2, [r4, #2736]	; 0xab0
      _s = s;
    7372:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7376:	str.w	r8, [r4, #2776]	; 0xad8
      _s = s;
    737a:	strb.w	r2, [r4, #2740]	; 0xab4
      _b = b;
    737e:	mvn.w	r2, #72	; 0x48
    7382:	strb.w	r2, [r4, #2741]	; 0xab5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7386:	movs	r2, #246	; 0xf6
    7388:	str.w	r2, [r4, #2744]	; 0xab8
      _s = s;
    738c:	mvn.w	r2, #67	; 0x43
    7390:	strb.w	r2, [r4, #2748]	; 0xabc
      _b = b;
    7394:	mvn.w	r2, #72	; 0x48
    7398:	strb.w	r2, [r4, #2749]	; 0xabd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    739c:	mov.w	r2, #4294967295
    73a0:	strb.w	r2, [r4, #2772]	; 0xad4
      _b = b;
    73a4:	mov.w	r2, #54	; 0x36
    73a8:	strb.w	r2, [r4, #2773]	; 0xad5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73ac:	mov.w	r2, #4294967295
    73b0:	strb.w	r2, [r4, #2780]	; 0xadc
      _b = b;
    73b4:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    73b8:	strb.w	r0, [r4, #2852]	; 0xb24
      _b = b;
    73bc:	mov.w	r0, #0
    73c0:	strb.w	r2, [r4, #2781]	; 0xadd
    73c4:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73c8:	str.w	ip, [r4, #2784]	; 0xae0
      _s = s;
      _b = b;
    73cc:	strb.w	r2, [r4, #2797]	; 0xaed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d0:	movs	r2, #0
      _s = s;
    73d2:	strb.w	lr, [r4, #2788]	; 0xae4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73d6:	str.w	r2, [r4, #2800]	; 0xaf0
      _s = s;
    73da:	strb.w	r2, [r4, #2804]	; 0xaf4
      _b = b;
    73de:	mov.w	r2, #4294967295
    73e2:	strb.w	lr, [r4, #2789]	; 0xae5
    73e6:	strb.w	r2, [r4, #2805]	; 0xaf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73ea:	movs	r2, #0
    73ec:	str.w	r1, [r4, #2792]	; 0xae8
    73f0:	str.w	r2, [r4, #2808]	; 0xaf8
      _s = s;
    73f4:	strb.w	r2, [r4, #2812]	; 0xafc
      _b = b;
    73f8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    73fc:	str.w	ip, [r4, #2816]	; 0xb00
      _s = s;
      _b = b;
    7400:	strb.w	r2, [r4, #2813]	; 0xafd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7404:	strb.w	r2, [r4, #2836]	; 0xb14
      _b = b;
    7408:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    740c:	strb.w	lr, [r4, #2820]	; 0xb04
      _b = b;
    7410:	strb.w	r2, [r4, #2837]	; 0xb15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7414:	movs	r2, #141	; 0x8d
      _s = s;
      _b = b;
    7416:	strb.w	lr, [r4, #2821]	; 0xb05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    741a:	str.w	r2, [r4, #2840]	; 0xb18
      _s = s;
    741e:	mvn.w	r2, #11
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7422:	str.w	ip, [r4, #2824]	; 0xb08
      _s = s;
    7426:	strb.w	r2, [r4, #2844]	; 0xb1c
      _b = b;
    742a:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    742e:	strb.w	lr, [r4, #2828]	; 0xb0c
      _b = b;
    7432:	strb.w	r2, [r4, #2845]	; 0xb1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7436:	movs	r2, #212	; 0xd4
      _s = s;
      _b = b;
    7438:	strb.w	lr, [r4, #2829]	; 0xb0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    743c:	str.w	r2, [r4, #2848]	; 0xb20
    7440:	movs	r2, #0
      _s = s;
    7442:	strb.w	sl, [r4, #2796]	; 0xaec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7446:	str.w	r2, [r4, #2856]	; 0xb28
      _s = s;
    744a:	strb.w	r2, [r4, #2860]	; 0xb2c
      _b = b;
    744e:	strb.w	r2, [r4, #2861]	; 0xb2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7452:	movs	r2, #0
    7454:	str.w	r8, [r4, #2832]	; 0xb10
    7458:	str.w	r2, [r4, #2864]	; 0xb30
      _s = s;
    745c:	strb.w	r2, [r4, #2868]	; 0xb34
      _b = b;
    7460:	movs	r2, #172	; 0xac
    7462:	strb.w	r9, [r4, #2853]	; 0xb25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7466:	mov.w	r9, #233	; 0xe9
      _b = b;
    746a:	strb.w	r0, [r4, #2869]	; 0xb35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    746e:	movs	r0, #0
    7470:	str.w	ip, [r4, #2880]	; 0xb40
    7474:	str.w	r0, [r4, #2872]	; 0xb38
      _s = s;
    7478:	strb.w	r0, [r4, #2876]	; 0xb3c
      _b = b;
    747c:	strb.w	r0, [r4, #2877]	; 0xb3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7480:	movs	r0, #246	; 0xf6
      _s = s;
    7482:	strb.w	lr, [r4, #2884]	; 0xb44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7486:	str.w	r0, [r4, #2896]	; 0xb50
      _s = s;
    748a:	mvn.w	r0, #67	; 0x43
      _b = b;
    748e:	strb.w	lr, [r4, #2885]	; 0xb45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7492:	strb.w	r0, [r4, #2900]	; 0xb54
      _b = b;
    7496:	mvn.w	r0, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    749a:	str.w	ip, [r4, #2888]	; 0xb48
      _s = s;
      _b = b;
    749e:	strb.w	r0, [r4, #2901]	; 0xb55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74a2:	movs	r0, #0
      _s = s;
    74a4:	strb.w	lr, [r4, #2892]	; 0xb4c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74a8:	str.w	r0, [r4, #2904]	; 0xb58
      _s = s;
    74ac:	strb.w	r0, [r4, #2908]	; 0xb5c
      _b = b;
    74b0:	mov.w	r0, #4294967295
    74b4:	strb.w	lr, [r4, #2893]	; 0xb4d
    74b8:	strb.w	r0, [r4, #2909]	; 0xb5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    74bc:	strb.w	r0, [r4, #2916]	; 0xb64
      _b = b;
    74c0:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74c4:	str.w	r1, [r4, #2952]	; 0xb88
      _s = s;
      _b = b;
    74c8:	strb.w	r0, [r4, #2917]	; 0xb65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74cc:	movs	r0, #246	; 0xf6
    74ce:	str.w	r8, [r4, #2912]	; 0xb60
    74d2:	str.w	r0, [r4, #2920]	; 0xb68
      _s = s;
    74d6:	mvn.w	r0, #67	; 0x43
    74da:	strb.w	r0, [r4, #2924]	; 0xb6c
      _b = b;
    74de:	mvn.w	r0, #72	; 0x48
    74e2:	strb.w	r0, [r4, #2925]	; 0xb6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74e6:	movs	r0, #246	; 0xf6
    74e8:	str.w	r0, [r4, #2928]	; 0xb70
      _s = s;
    74ec:	mvn.w	r0, #67	; 0x43
    74f0:	strb.w	r0, [r4, #2932]	; 0xb74
      _b = b;
    74f4:	mvn.w	r0, #72	; 0x48
    74f8:	strb.w	r0, [r4, #2933]	; 0xb75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    74fc:	movs	r0, #246	; 0xf6
    74fe:	str.w	r0, [r4, #2936]	; 0xb78
      _s = s;
    7502:	mvn.w	r0, #67	; 0x43
    7506:	strb.w	r0, [r4, #2940]	; 0xb7c
      _b = b;
    750a:	mvn.w	r0, #72	; 0x48
    750e:	strb.w	r0, [r4, #2941]	; 0xb7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7512:	movs	r0, #246	; 0xf6
    7514:	str.w	r0, [r4, #2944]	; 0xb80
      _s = s;
    7518:	mvn.w	r0, #67	; 0x43
    751c:	strb.w	r0, [r4, #2948]	; 0xb84
      _b = b;
    7520:	mvn.w	r0, #72	; 0x48
    7524:	strb.w	r0, [r4, #2949]	; 0xb85
    7528:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    752c:	strb.w	sl, [r4, #2956]	; 0xb8c
      _b = b;
    7530:	strb.w	r0, [r4, #2957]	; 0xb8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7534:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7538:	str.w	ip, [r4, #2976]	; 0xba0
      _s = s;
    753c:	strb.w	r0, [r4, #2964]	; 0xb94
      _b = b;
    7540:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7544:	strb.w	lr, [r4, #2980]	; 0xba4
      _b = b;
    7548:	strb.w	r0, [r4, #2965]	; 0xb95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    754c:	mov.w	r0, #4294967295
      _b = b;
    7550:	strb.w	lr, [r4, #2981]	; 0xba5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7554:	strb.w	r0, [r4, #2972]	; 0xb9c
      _b = b;
    7558:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    755c:	str.w	ip, [r4, #2984]	; 0xba8
      _s = s;
      _b = b;
    7560:	strb.w	r0, [r4, #2973]	; 0xb9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7564:	mov.w	r0, #4294967295
    7568:	strb.w	lr, [r4, #2988]	; 0xbac
    756c:	strb.w	r0, [r4, #3028]	; 0xbd4
      _b = b;
    7570:	mov.w	r0, #54	; 0x36
    7574:	strb.w	lr, [r4, #2989]	; 0xbad
    7578:	strb.w	r0, [r4, #3029]	; 0xbd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    757c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7580:	str.w	ip, [r4, #2992]	; 0xbb0
      _s = s;
    7584:	strb.w	r0, [r4, #3036]	; 0xbdc
      _b = b;
    7588:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    758c:	strb.w	lr, [r4, #2996]	; 0xbb4
      _b = b;
    7590:	strb.w	r0, [r4, #3037]	; 0xbdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7594:	mov.w	r0, #4294967295
      _b = b;
    7598:	strb.w	lr, [r4, #2997]	; 0xbb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    759c:	str.w	ip, [r4, #3000]	; 0xbb8
      _s = s;
    75a0:	strb.w	lr, [r4, #3004]	; 0xbbc
      _b = b;
    75a4:	strb.w	lr, [r4, #3005]	; 0xbbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75a8:	str.w	ip, [r4, #3008]	; 0xbc0
      _s = s;
    75ac:	strb.w	lr, [r4, #3012]	; 0xbc4
      _b = b;
    75b0:	strb.w	lr, [r4, #3013]	; 0xbc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75b4:	str.w	ip, [r4, #3016]	; 0xbc8
      _s = s;
    75b8:	strb.w	lr, [r4, #3020]	; 0xbcc
      _b = b;
    75bc:	strb.w	lr, [r4, #3021]	; 0xbcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75c0:	str.w	r8, [r4, #2960]	; 0xb90
    75c4:	str.w	r8, [r4, #2968]	; 0xb98
    75c8:	str.w	r8, [r4, #3024]	; 0xbd0
    75cc:	str.w	r8, [r4, #3032]	; 0xbd8
    75d0:	str.w	r8, [r4, #3040]	; 0xbe0
      _s = s;
    75d4:	strb.w	r0, [r4, #3044]	; 0xbe4
      _b = b;
    75d8:	mov.w	r0, #54	; 0x36
    75dc:	strb.w	r2, [r4, #3077]	; 0xc05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75e0:	movs	r2, #180	; 0xb4
      _s = s;
      _b = b;
    75e2:	strb.w	r0, [r4, #3045]	; 0xbe5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    75e6:	mvn.w	r0, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75ea:	str.w	r1, [r4, #3112]	; 0xc28
      _s = s;
    75ee:	strb.w	r0, [r4, #3052]	; 0xbec
      _b = b;
    75f2:	mov.w	r0, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75f6:	str.w	r8, [r4, #3104]	; 0xc20
      _s = s;
      _b = b;
    75fa:	strb.w	r0, [r4, #3053]	; 0xbed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    75fe:	movs	r0, #0
      _s = s;
    7600:	strb.w	sl, [r4, #3116]	; 0xc2c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7604:	str.w	r0, [r4, #3056]	; 0xbf0
      _s = s;
    7608:	strb.w	r0, [r4, #3060]	; 0xbf4
      _b = b;
    760c:	strb.w	r0, [r4, #3061]	; 0xbf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7610:	movs	r0, #0
    7612:	str.w	fp, [r4, #3128]	; 0xc38
    7616:	str.w	r0, [r4, #3064]	; 0xbf8
      _s = s;
    761a:	strb.w	r0, [r4, #3068]	; 0xbfc
      _b = b;
    761e:	strb.w	r0, [r4, #3069]	; 0xbfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7622:	movs	r0, #246	; 0xf6
    7624:	str.w	r0, [r4, #3072]	; 0xc00
      _s = s;
    7628:	mvn.w	r0, #67	; 0x43
    762c:	strb.w	r0, [r4, #3076]	; 0xc04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7630:	movs	r0, #246	; 0xf6
    7632:	str.w	r0, [r4, #3080]	; 0xc08
      _s = s;
    7636:	mvn.w	r0, #67	; 0x43
    763a:	strb.w	r0, [r4, #3084]	; 0xc0c
      _b = b;
    763e:	mvn.w	r0, #72	; 0x48
    7642:	strb.w	r0, [r4, #3085]	; 0xc0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7646:	movs	r0, #0
    7648:	str.w	r0, [r4, #3088]	; 0xc10
      _s = s;
    764c:	strb.w	r0, [r4, #3092]	; 0xc14
      _b = b;
    7650:	mov.w	r0, #4294967295
    7654:	strb.w	r0, [r4, #3093]	; 0xc15
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7658:	movs	r0, #0
    765a:	str.w	r0, [r4, #3096]	; 0xc18
      _s = s;
    765e:	strb.w	r0, [r4, #3100]	; 0xc1c
      _b = b;
    7662:	mov.w	r0, #4294967295
    7666:	strb.w	r0, [r4, #3101]	; 0xc1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    766a:	strb.w	r0, [r4, #3108]	; 0xc24
      _b = b;
    766e:	mov.w	r0, #54	; 0x36
    7672:	strb.w	r0, [r4, #3109]	; 0xc25
    7676:	mvn.w	r0, #20
    767a:	strb.w	r0, [r4, #3117]	; 0xc2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    767e:	movs	r0, #246	; 0xf6
    7680:	str.w	r0, [r4, #3120]	; 0xc30
      _s = s;
    7684:	mvn.w	r0, #67	; 0x43
    7688:	strb.w	r0, [r4, #3124]	; 0xc34
      _b = b;
    768c:	mvn.w	r0, #72	; 0x48
    7690:	strb.w	r0, [r4, #3125]	; 0xc35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7694:	mov.w	r0, #100	; 0x64
    7698:	strb.w	r0, [r4, #3132]	; 0xc3c
      _b = b;
    769c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76a0:	str.w	r2, [r4, #3048]	; 0xbe8
      _s = s;
      _b = b;
    76a4:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76a8:	str.w	ip, [r4, #3136]	; 0xc40
      _s = s;
      _b = b;
    76ac:	strb.w	r2, [r4, #3133]	; 0xc3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76b0:	movs	r2, #246	; 0xf6
      _s = s;
    76b2:	strb.w	lr, [r4, #3140]	; 0xc44
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76b6:	str.w	r2, [r4, #3144]	; 0xc48
      _s = s;
    76ba:	mvn.w	r2, #67	; 0x43
      _b = b;
    76be:	strb.w	lr, [r4, #3141]	; 0xc45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76c2:	strb.w	r2, [r4, #3148]	; 0xc4c
      _b = b;
    76c6:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76ca:	str.w	ip, [r4, #3176]	; 0xc68
      _s = s;
      _b = b;
    76ce:	strb.w	r2, [r4, #3149]	; 0xc4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76d2:	mov.w	r2, #4294967295
    76d6:	strb.w	lr, [r4, #3180]	; 0xc6c
    76da:	strb.w	r2, [r4, #3156]	; 0xc54
      _b = b;
    76de:	mov.w	r2, #54	; 0x36
    76e2:	strb.w	lr, [r4, #3181]	; 0xc6d
    76e6:	strb.w	r2, [r4, #3157]	; 0xc55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76ea:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    76ee:	str.w	ip, [r4, #3184]	; 0xc70
      _s = s;
    76f2:	strb.w	r2, [r4, #3164]	; 0xc5c
      _b = b;
    76f6:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    76fa:	strb.w	lr, [r4, #3188]	; 0xc74
      _b = b;
    76fe:	strb.w	r2, [r4, #3165]	; 0xc5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7702:	mov.w	r2, #4294967295
      _b = b;
    7706:	strb.w	lr, [r4, #3189]	; 0xc75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    770a:	strb.w	r2, [r4, #3172]	; 0xc64
      _b = b;
    770e:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7712:	str.w	ip, [r4, #3192]	; 0xc78
      _s = s;
      _b = b;
    7716:	strb.w	r2, [r4, #3173]	; 0xc65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    771a:	movs	r2, #22
      _s = s;
    771c:	strb.w	lr, [r4, #3196]	; 0xc7c
      _b = b;
    7720:	strb.w	lr, [r4, #3197]	; 0xc7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7724:	str.w	ip, [r4, #3200]	; 0xc80
      _s = s;
    7728:	strb.w	lr, [r4, #3204]	; 0xc84
      _b = b;
    772c:	strb.w	lr, [r4, #3205]	; 0xc85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7730:	str.w	ip, [r4, #3208]	; 0xc88
      _s = s;
    7734:	strb.w	lr, [r4, #3212]	; 0xc8c
      _b = b;
    7738:	strb.w	lr, [r4, #3213]	; 0xc8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    773c:	str.w	r2, [r4, #3216]	; 0xc90
    7740:	movs	r2, #243	; 0xf3
    7742:	str.w	r8, [r4, #3152]	; 0xc50
    7746:	str.w	r8, [r4, #3160]	; 0xc58
    774a:	str.w	r8, [r4, #3168]	; 0xc60
      _s = s;
    774e:	strb.w	r9, [r4, #3220]	; 0xc94
      _b = b;
    7752:	strb.w	r0, [r4, #3221]	; 0xc95
    7756:	mov.w	r0, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    775a:	strb.w	r3, [r4, #3268]	; 0xcc4
      _b = b;
    775e:	strb.w	r0, [r4, #3229]	; 0xc9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7762:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7766:	str.w	r1, [r4, #3304]	; 0xce8
      _s = s;
    776a:	strb.w	r0, [r4, #3236]	; 0xca4
      _b = b;
    776e:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7772:	str.w	r8, [r4, #3232]	; 0xca0
      _s = s;
      _b = b;
    7776:	strb.w	r0, [r4, #3237]	; 0xca5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    777a:	movs	r0, #212	; 0xd4
    777c:	str.w	fp, [r4, #3280]	; 0xcd0
    7780:	str.w	r0, [r4, #3240]	; 0xca8
      _s = s;
    7784:	mvn.w	r0, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7788:	str.w	fp, [r4, #3288]	; 0xcd8
      _s = s;
    778c:	strb.w	r0, [r4, #3244]	; 0xcac
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7790:	movs	r0, #0
    7792:	str.w	r8, [r4, #3296]	; 0xce0
    7796:	str.w	r0, [r4, #3248]	; 0xcb0
      _s = s;
    779a:	strb.w	r0, [r4, #3252]	; 0xcb4
      _b = b;
    779e:	strb.w	r0, [r4, #3253]	; 0xcb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77a2:	movs	r0, #0
      _s = s;
    77a4:	strb.w	sl, [r4, #3308]	; 0xcec
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77a8:	str.w	r0, [r4, #3256]	; 0xcb8
      _s = s;
    77ac:	strb.w	r0, [r4, #3260]	; 0xcbc
      _b = b;
    77b0:	strb.w	r0, [r4, #3261]	; 0xcbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    77b4:	movs	r0, #246	; 0xf6
    77b6:	str.w	r0, [r4, #3264]	; 0xcc0
    77ba:	str.w	r0, [r4, #3272]	; 0xcc8
      _s = s;
    77be:	mvn.w	r0, #67	; 0x43
    77c2:	strb.w	r0, [r4, #3276]	; 0xccc
      _b = b;
    77c6:	mvn.w	r0, #72	; 0x48
    77ca:	strb.w	r0, [r4, #3277]	; 0xccd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77ce:	mov.w	r0, #100	; 0x64
    77d2:	strb.w	r0, [r4, #3284]	; 0xcd4
      _b = b;
    77d6:	mvn.w	r0, #31
    77da:	strb.w	r0, [r4, #3285]	; 0xcd5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77de:	mov.w	r0, #100	; 0x64
    77e2:	strb.w	r0, [r4, #3292]	; 0xcdc
      _b = b;
    77e6:	mvn.w	r0, #31
    77ea:	strb.w	r0, [r4, #3293]	; 0xcdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    77ee:	mov.w	r0, #4294967295
    77f2:	strb.w	r0, [r4, #3300]	; 0xce4
      _b = b;
    77f6:	mov.w	r0, #54	; 0x36
    77fa:	strb.w	r0, [r4, #3301]	; 0xce5
    77fe:	mov.w	r0, #88	; 0x58
    7802:	strb.w	r0, [r4, #3245]	; 0xcad
    7806:	mov.w	r0, #126	; 0x7e
    780a:	strb.w	r0, [r4, #3269]	; 0xcc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    780e:	movs	r0, #2
    7810:	str.w	r0, [r4, #3224]	; 0xc98
      _s = s;
      _b = b;
    7814:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7818:	strb.w	r6, [r4, #3228]	; 0xc9c
      _b = b;
    781c:	strb.w	r0, [r4, #3309]	; 0xced
    7820:	strb.w	r0, [r4, #3333]	; 0xd05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7824:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7828:	str.w	ip, [r4, #3312]	; 0xcf0
      _s = s;
    782c:	strb.w	r0, [r4, #3340]	; 0xd0c
      _b = b;
    7830:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7834:	strb.w	lr, [r4, #3316]	; 0xcf4
      _b = b;
    7838:	strb.w	r0, [r4, #3341]	; 0xd0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    783c:	mov.w	r0, #4294967295
      _b = b;
    7840:	strb.w	lr, [r4, #3317]	; 0xcf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7844:	strb.w	r0, [r4, #3348]	; 0xd14
      _b = b;
    7848:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    784c:	str.w	ip, [r4, #3320]	; 0xcf8
      _s = s;
      _b = b;
    7850:	strb.w	r0, [r4, #3349]	; 0xd15
    7854:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7858:	strb.w	lr, [r4, #3324]	; 0xcfc
      _b = b;
    785c:	strb.w	r0, [r4, #3357]	; 0xd1d
    7860:	strb.w	r0, [r4, #3365]	; 0xd25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7864:	mov.w	r0, #4294967295
      _b = b;
    7868:	strb.w	lr, [r4, #3325]	; 0xcfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    786c:	strb.w	r0, [r4, #3372]	; 0xd2c
      _b = b;
    7870:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7874:	str.w	r1, [r4, #3328]	; 0xd00
      _s = s;
      _b = b;
    7878:	strb.w	r0, [r4, #3373]	; 0xd2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    787c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7880:	str.w	r1, [r4, #3352]	; 0xd18
      _s = s;
    7884:	strb.w	r0, [r4, #3380]	; 0xd34
      _b = b;
    7888:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    788c:	str.w	r1, [r4, #3360]	; 0xd20
      _s = s;
      _b = b;
    7890:	strb.w	r0, [r4, #3381]	; 0xd35
    7894:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7898:	str.w	r1, [r4, #3384]	; 0xd38
      _s = s;
      _b = b;
    789c:	strb.w	r0, [r4, #3389]	; 0xd3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78a0:	mov.w	r0, #100	; 0x64
    78a4:	strb.w	sl, [r4, #3332]	; 0xd04
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78a8:	str.w	r8, [r4, #3336]	; 0xd08
    78ac:	str.w	r8, [r4, #3344]	; 0xd10
      _s = s;
    78b0:	strb.w	sl, [r4, #3356]	; 0xd1c
    78b4:	strb.w	sl, [r4, #3364]	; 0xd24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78b8:	str.w	r8, [r4, #3368]	; 0xd28
    78bc:	str.w	r8, [r4, #3376]	; 0xd30
      _s = s;
    78c0:	strb.w	sl, [r4, #3388]	; 0xd3c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78c4:	str.w	fp, [r4, #3392]	; 0xd40
      _s = s;
    78c8:	strb.w	r0, [r4, #3396]	; 0xd44
      _b = b;
    78cc:	mvn.w	r0, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78d0:	str.w	r2, [r4, #3456]	; 0xd80
      _s = s;
    78d4:	mvn.w	r2, #28
      _b = b;
    78d8:	strb.w	r0, [r4, #3397]	; 0xd45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78dc:	mov.w	r0, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78e0:	str.w	ip, [r4, #3464]	; 0xd88
      _s = s;
    78e4:	strb.w	r0, [r4, #3404]	; 0xd4c
      _b = b;
    78e8:	mvn.w	r0, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    78ec:	strb.w	r2, [r4, #3460]	; 0xd84
      _b = b;
    78f0:	movs	r2, #95	; 0x5f
    78f2:	strb.w	r0, [r4, #3405]	; 0xd4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    78f6:	movs	r0, #22
    78f8:	str.w	fp, [r4, #3400]	; 0xd48
    78fc:	str.w	r0, [r4, #3408]	; 0xd50
      _s = s;
      _b = b;
    7900:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7904:	strb.w	r9, [r4, #3412]	; 0xd54
      _b = b;
    7908:	strb.w	r0, [r4, #3413]	; 0xd55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    790c:	movs	r0, #22
      _s = s;
    790e:	strb.w	r9, [r4, #3420]	; 0xd5c
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7912:	str.w	r0, [r4, #3416]	; 0xd58
      _s = s;
      _b = b;
    7916:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    791a:	str.w	r8, [r4, #3424]	; 0xd60
      _s = s;
      _b = b;
    791e:	strb.w	r0, [r4, #3421]	; 0xd5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7922:	strb.w	r0, [r4, #3428]	; 0xd64
      _b = b;
    7926:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    792a:	strb.w	r9, [r4, #3436]	; 0xd6c
      _b = b;
    792e:	strb.w	r0, [r4, #3429]	; 0xd65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7932:	movs	r0, #22
    7934:	str.w	fp, [r4, #3472]	; 0xd90
    7938:	str.w	r0, [r4, #3432]	; 0xd68
      _s = s;
      _b = b;
    793c:	mov.w	r0, #4294967295
    7940:	strb.w	r0, [r4, #3437]	; 0xd6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7944:	movs	r0, #0
    7946:	str.w	r0, [r4, #3440]	; 0xd70
      _s = s;
    794a:	strb.w	r0, [r4, #3444]	; 0xd74
      _b = b;
    794e:	strb.w	r0, [r4, #3445]	; 0xd75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7952:	movs	r0, #0
    7954:	str.w	r0, [r4, #3448]	; 0xd78
      _s = s;
    7958:	strb.w	r0, [r4, #3452]	; 0xd7c
      _b = b;
    795c:	strb.w	r0, [r4, #3453]	; 0xd7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7960:	mvn.w	r0, #57	; 0x39
    7964:	strb.w	r0, [r4, #3468]	; 0xd8c
      _b = b;
    7968:	mvn.w	r0, #32
    796c:	strb.w	r0, [r4, #3469]	; 0xd8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7970:	mov.w	r0, #100	; 0x64
    7974:	strb.w	r0, [r4, #3476]	; 0xd94
      _b = b;
    7978:	mvn.w	r0, #31
    797c:	strb.w	r0, [r4, #3477]	; 0xd95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7980:	movs	r0, #189	; 0xbd
    7982:	str.w	r0, [r4, #3480]	; 0xd98
      _s = s;
    7986:	mvn.w	r0, #53	; 0x35
    798a:	strb.w	r0, [r4, #3484]	; 0xd9c
      _b = b;
    798e:	mov.w	r0, #37	; 0x25
    7992:	strb.w	r0, [r4, #3461]	; 0xd85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7996:	mov.w	r0, #4294967295
      _b = b;
    799a:	strb.w	r3, [r4, #3485]	; 0xd9d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    799e:	strb.w	r0, [r4, #3492]	; 0xda4
      _b = b;
    79a2:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79a6:	str.w	r1, [r4, #3496]	; 0xda8
      _s = s;
      _b = b;
    79aa:	strb.w	r0, [r4, #3493]	; 0xda5
    79ae:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79b2:	str.w	r1, [r4, #3504]	; 0xdb0
      _s = s;
      _b = b;
    79b6:	strb.w	r0, [r4, #3501]	; 0xdad
    79ba:	strb.w	r0, [r4, #3509]	; 0xdb5
    79be:	strb.w	r0, [r4, #3517]	; 0xdbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79c2:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79c6:	str.w	r1, [r4, #3512]	; 0xdb8
      _s = s;
    79ca:	strb.w	r0, [r4, #3524]	; 0xdc4
      _b = b;
    79ce:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79d2:	str.w	r1, [r4, #3536]	; 0xdd0
      _s = s;
      _b = b;
    79d6:	strb.w	r0, [r4, #3525]	; 0xdc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    79da:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79de:	str.w	r1, [r4, #3544]	; 0xdd8
      _s = s;
    79e2:	strb.w	r0, [r4, #3532]	; 0xdcc
      _b = b;
    79e6:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79ea:	str.w	r1, [r4, #3552]	; 0xde0
      _s = s;
      _b = b;
    79ee:	strb.w	r0, [r4, #3533]	; 0xdcd
    79f2:	mvn.w	r0, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    79f6:	str.w	r8, [r4, #3488]	; 0xda0
      _s = s;
      _b = b;
    79fa:	strb.w	r0, [r4, #3541]	; 0xdd5
    79fe:	strb.w	r0, [r4, #3549]	; 0xddd
    7a02:	strb.w	r0, [r4, #3557]	; 0xde5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a06:	mov.w	r0, #100	; 0x64
    7a0a:	strb.w	sl, [r4, #3500]	; 0xdac
    7a0e:	strb.w	r0, [r4, #3564]	; 0xdec
      _b = b;
    7a12:	mvn.w	r0, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a16:	strb.w	sl, [r4, #3508]	; 0xdb4
      _b = b;
    7a1a:	strb.w	r0, [r4, #3565]	; 0xded
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a1e:	mov.w	r0, #4294967295
    7a22:	strb.w	sl, [r4, #3516]	; 0xdbc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a26:	str.w	r8, [r4, #3520]	; 0xdc0
    7a2a:	str.w	r8, [r4, #3528]	; 0xdc8
      _s = s;
    7a2e:	strb.w	sl, [r4, #3540]	; 0xdd4
    7a32:	strb.w	sl, [r4, #3548]	; 0xddc
    7a36:	strb.w	sl, [r4, #3556]	; 0xde4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a3a:	str.w	fp, [r4, #3560]	; 0xde8
    7a3e:	str.w	r8, [r4, #3568]	; 0xdf0
      _s = s;
    7a42:	strb.w	r0, [r4, #3572]	; 0xdf4
      _b = b;
    7a46:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a4a:	str.w	r8, [r4, #3576]	; 0xdf8
      _s = s;
      _b = b;
    7a4e:	strb.w	r0, [r4, #3573]	; 0xdf5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a52:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a56:	str.w	r8, [r4, #3616]	; 0xe20
      _s = s;
    7a5a:	strb.w	r0, [r4, #3580]	; 0xdfc
      _b = b;
    7a5e:	mov.w	r0, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a62:	str.w	r8, [r4, #3624]	; 0xe28
      _s = s;
      _b = b;
    7a66:	strb.w	r0, [r4, #3581]	; 0xdfd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a6a:	movs	r0, #212	; 0xd4
    7a6c:	str.w	r0, [r4, #3584]	; 0xe00
      _s = s;
    7a70:	mvn.w	r0, #31
    7a74:	strb.w	r0, [r4, #3588]	; 0xe04
      _b = b;
    7a78:	mov.w	r0, #109	; 0x6d
    7a7c:	strb.w	r0, [r4, #3589]	; 0xe05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7a80:	movs	r0, #2
    7a82:	str.w	r0, [r4, #3592]	; 0xe08
    7a86:	str.w	r0, [r4, #3600]	; 0xe10
    7a8a:	str.w	r0, [r4, #3608]	; 0xe18
      _s = s;
    7a8e:	mov.w	r0, #4294967295
    7a92:	strb.w	r0, [r4, #3620]	; 0xe24
      _b = b;
    7a96:	mov.w	r0, #54	; 0x36
    7a9a:	strb.w	r0, [r4, #3621]	; 0xe25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7a9e:	mov.w	r0, #4294967295
    7aa2:	strb.w	r0, [r4, #3628]	; 0xe2c
      _b = b;
    7aa6:	mov.w	r0, #54	; 0x36
    7aaa:	strb.w	r0, [r4, #3629]	; 0xe2d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aae:	movs	r0, #0
    7ab0:	str.w	r0, [r4, #3640]	; 0xe38
      _s = s;
    7ab4:	strb.w	r0, [r4, #3644]	; 0xe3c
      _b = b;
    7ab8:	strb.w	r0, [r4, #3645]	; 0xe3d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7abc:	movs	r0, #0
    7abe:	str.w	r0, [r4, #3648]	; 0xe40
      _s = s;
    7ac2:	strb.w	r0, [r4, #3652]	; 0xe44
      _b = b;
    7ac6:	strb.w	r0, [r4, #3653]	; 0xe45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7aca:	movs	r0, #246	; 0xf6
    7acc:	str.w	r0, [r4, #3656]	; 0xe48
      _s = s;
    7ad0:	mvn.w	r0, #89	; 0x59
    7ad4:	strb.w	r0, [r4, #3636]	; 0xe34
      _b = b;
    7ad8:	mov.w	r0, #115	; 0x73
    7adc:	strb.w	r0, [r4, #3637]	; 0xe35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ae0:	mvn.w	r0, #54	; 0x36
    7ae4:	strb.w	r0, [r4, #3660]	; 0xe4c
    7ae8:	mvn.w	r0, #2
    7aec:	strb.w	r0, [r4, #3596]	; 0xe0c
    7af0:	strb.w	r0, [r4, #3604]	; 0xe14
    7af4:	strb.w	r0, [r4, #3612]	; 0xe1c
      _b = b;
    7af8:	mvn.w	r0, #109	; 0x6d
    7afc:	strb.w	r0, [r4, #3597]	; 0xe0d
    7b00:	strb.w	r0, [r4, #3605]	; 0xe15
    7b04:	strb.w	r0, [r4, #3613]	; 0xe1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b08:	movs	r0, #21
    7b0a:	str.w	r0, [r4, #3632]	; 0xe30
    7b0e:	movs	r0, #226	; 0xe2
      _s = s;
      _b = b;
    7b10:	strb.w	r2, [r4, #3661]	; 0xe4d
    7b14:	mvn.w	r2, #24
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b18:	str.w	r1, [r4, #3664]	; 0xe50
      _s = s;
      _b = b;
    7b1c:	strb.w	r2, [r4, #3669]	; 0xe55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b20:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b24:	str.w	r1, [r4, #3744]	; 0xea0
      _s = s;
    7b28:	strb.w	r2, [r4, #3676]	; 0xe5c
      _b = b;
    7b2c:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b30:	strb.w	sl, [r4, #3668]	; 0xe54
      _b = b;
    7b34:	strb.w	r2, [r4, #3677]	; 0xe5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b38:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b3c:	str.w	fp, [r4, #3672]	; 0xe58
      _s = s;
    7b40:	strb.w	r2, [r4, #3684]	; 0xe64
      _b = b;
    7b44:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b48:	str.w	r8, [r4, #3680]	; 0xe60
      _s = s;
      _b = b;
    7b4c:	strb.w	r2, [r4, #3685]	; 0xe65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b50:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b54:	str.w	r8, [r4, #3688]	; 0xe68
      _s = s;
    7b58:	strb.w	r2, [r4, #3692]	; 0xe6c
      _b = b;
    7b5c:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b60:	str.w	r8, [r4, #3696]	; 0xe70
      _s = s;
      _b = b;
    7b64:	strb.w	r2, [r4, #3693]	; 0xe6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b68:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b6c:	str.w	r8, [r4, #3704]	; 0xe78
      _s = s;
    7b70:	strb.w	r2, [r4, #3700]	; 0xe74
      _b = b;
    7b74:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b78:	str.w	r8, [r4, #3712]	; 0xe80
      _s = s;
      _b = b;
    7b7c:	strb.w	r2, [r4, #3701]	; 0xe75
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b80:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7b84:	str.w	r8, [r4, #3720]	; 0xe88
      _s = s;
    7b88:	strb.w	r2, [r4, #3708]	; 0xe7c
      _b = b;
    7b8c:	mov.w	r2, #54	; 0x36
    7b90:	strb.w	r2, [r4, #3709]	; 0xe7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7b94:	mov.w	r2, #4294967295
    7b98:	strb.w	r2, [r4, #3716]	; 0xe84
      _b = b;
    7b9c:	mov.w	r2, #54	; 0x36
    7ba0:	strb.w	r2, [r4, #3717]	; 0xe85
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ba4:	mov.w	r2, #4294967295
    7ba8:	strb.w	r2, [r4, #3724]	; 0xe8c
      _b = b;
    7bac:	mov.w	r2, #54	; 0x36
    7bb0:	strb.w	r2, [r4, #3725]	; 0xe8d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bb4:	movs	r2, #246	; 0xf6
    7bb6:	str.w	r2, [r4, #3728]	; 0xe90
      _s = s;
    7bba:	mvn.w	r2, #67	; 0x43
    7bbe:	strb.w	r2, [r4, #3732]	; 0xe94
      _b = b;
    7bc2:	mvn.w	r2, #72	; 0x48
    7bc6:	strb.w	r2, [r4, #3733]	; 0xe95
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bca:	movs	r2, #246	; 0xf6
    7bcc:	str.w	r2, [r4, #3736]	; 0xe98
      _s = s;
    7bd0:	mvn.w	r2, #67	; 0x43
    7bd4:	strb.w	r2, [r4, #3740]	; 0xe9c
      _b = b;
    7bd8:	mvn.w	r2, #72	; 0x48
    7bdc:	strb.w	r2, [r4, #3741]	; 0xe9d
    7be0:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7be4:	strb.w	sl, [r4, #3748]	; 0xea4
      _b = b;
    7be8:	strb.w	r2, [r4, #3749]	; 0xea5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bec:	movs	r2, #1
      _s = s;
    7bee:	strb.w	r6, [r4, #3772]	; 0xebc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7bf2:	str.w	r2, [r4, #3824]	; 0xef0
      _s = s;
    7bf6:	mov.w	r2, #100	; 0x64
    7bfa:	strb.w	r6, [r4, #3780]	; 0xec4
    7bfe:	strb.w	r2, [r4, #3756]	; 0xeac
      _b = b;
    7c02:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c06:	strb.w	r6, [r4, #3804]	; 0xedc
      _b = b;
    7c0a:	strb.w	r2, [r4, #3757]	; 0xead
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c0e:	mov.w	r2, #100	; 0x64
    7c12:	strb.w	r6, [r4, #3820]	; 0xeec
    7c16:	strb.w	r2, [r4, #3764]	; 0xeb4
      _b = b;
    7c1a:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c1e:	str.w	fp, [r4, #3752]	; 0xea8
      _s = s;
      _b = b;
    7c22:	strb.w	r2, [r4, #3765]	; 0xeb5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c26:	movs	r2, #2
    7c28:	str.w	fp, [r4, #3760]	; 0xeb0
    7c2c:	str.w	r2, [r4, #3768]	; 0xeb8
      _s = s;
      _b = b;
    7c30:	mov.w	r2, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c34:	strb.w	r9, [r4, #3796]	; 0xed4
      _b = b;
    7c38:	strb.w	r2, [r4, #3773]	; 0xebd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c3c:	movs	r2, #2
    7c3e:	str.w	r8, [r4, #3808]	; 0xee0
    7c42:	str.w	r2, [r4, #3776]	; 0xec0
      _s = s;
      _b = b;
    7c46:	mov.w	r2, #102	; 0x66
    7c4a:	strb.w	r2, [r4, #3781]	; 0xec5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c4e:	movs	r2, #2
    7c50:	str.w	r2, [r4, #3784]	; 0xec8
      _s = s;
    7c54:	mvn.w	r2, #2
    7c58:	strb.w	r2, [r4, #3788]	; 0xecc
      _b = b;
    7c5c:	mvn.w	r2, #109	; 0x6d
    7c60:	strb.w	r2, [r4, #3789]	; 0xecd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c64:	movs	r2, #22
    7c66:	str.w	r2, [r4, #3792]	; 0xed0
      _s = s;
      _b = b;
    7c6a:	mov.w	r2, #4294967295
    7c6e:	strb.w	r2, [r4, #3797]	; 0xed5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c72:	movs	r2, #2
    7c74:	str.w	r2, [r4, #3800]	; 0xed8
      _s = s;
      _b = b;
    7c78:	mov.w	r2, #102	; 0x66
    7c7c:	strb.w	r2, [r4, #3805]	; 0xedd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c80:	mov.w	r2, #4294967295
    7c84:	strb.w	r2, [r4, #3812]	; 0xee4
      _b = b;
    7c88:	mov.w	r2, #54	; 0x36
    7c8c:	strb.w	r2, [r4, #3813]	; 0xee5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7c90:	movs	r2, #2
    7c92:	str.w	r2, [r4, #3816]	; 0xee8
      _s = s;
      _b = b;
    7c96:	mov.w	r2, #102	; 0x66
    7c9a:	strb.w	r2, [r4, #3821]	; 0xeed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7c9e:	mvn.w	r2, #29
    7ca2:	strb.w	r2, [r4, #3828]	; 0xef4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ca6:	movs	r2, #0
    7ca8:	str.w	r2, [r4, #3832]	; 0xef8
      _s = s;
    7cac:	strb.w	r2, [r4, #3836]	; 0xefc
      _b = b;
    7cb0:	mov.w	r2, #45	; 0x2d
    7cb4:	strb.w	r2, [r4, #3829]	; 0xef5
    7cb8:	mov.w	r2, #0
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cbc:	str.w	r0, [r4, #3856]	; 0xf10
    7cc0:	movs	r0, #189	; 0xbd
      _s = s;
      _b = b;
    7cc2:	strb.w	r2, [r4, #3837]	; 0xefd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cc6:	mov.w	r2, #104	; 0x68
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cca:	str.w	r0, [r4, #3896]	; 0xf38
      _s = s;
    7cce:	strb.w	r2, [r4, #3860]	; 0xf14
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cd2:	movs	r2, #0
    7cd4:	str.w	r0, [r4, #3904]	; 0xf40
    7cd8:	movs	r0, #246	; 0xf6
    7cda:	str.w	r2, [r4, #3840]	; 0xf00
      _s = s;
    7cde:	strb.w	r2, [r4, #3844]	; 0xf04
      _b = b;
    7ce2:	strb.w	r2, [r4, #3845]	; 0xf05
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ce6:	movs	r2, #0
    7ce8:	str.w	r1, [r4, #3880]	; 0xf28
    7cec:	str.w	r2, [r4, #3848]	; 0xf08
      _s = s;
    7cf0:	strb.w	r2, [r4, #3852]	; 0xf0c
      _b = b;
    7cf4:	strb.w	r2, [r4, #3853]	; 0xf0d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7cf8:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7cfc:	str.w	r1, [r4, #3888]	; 0xf30
      _s = s;
    7d00:	strb.w	r2, [r4, #3868]	; 0xf1c
      _b = b;
    7d04:	mov.w	r2, #54	; 0x36
    7d08:	strb.w	r3, [r4, #3901]	; 0xf3d
    7d0c:	strb.w	r2, [r4, #3869]	; 0xf1d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d10:	mov.w	r2, #4294967295
      _b = b;
    7d14:	strb.w	r3, [r4, #3909]	; 0xf45
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d18:	strb.w	r2, [r4, #3876]	; 0xf24
      _b = b;
    7d1c:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d20:	str.w	r0, [r4, #3920]	; 0xf50
      _s = s;
      _b = b;
    7d24:	strb.w	r2, [r4, #3877]	; 0xf25
    7d28:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d2c:	str.w	r8, [r4, #3864]	; 0xf18
      _s = s;
      _b = b;
    7d30:	strb.w	r2, [r4, #3885]	; 0xf2d
    7d34:	strb.w	r2, [r4, #3893]	; 0xf35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d38:	mvn.w	r2, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d3c:	str.w	r8, [r4, #3872]	; 0xf20
      _s = s;
    7d40:	strb.w	r2, [r4, #3900]	; 0xf3c
    7d44:	strb.w	r2, [r4, #3908]	; 0xf44
    7d48:	mov.w	r2, #4294967295
    7d4c:	strb.w	sl, [r4, #3884]	; 0xf2c
    7d50:	strb.w	r2, [r4, #3916]	; 0xf4c
      _b = b;
    7d54:	mov.w	r2, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d58:	strb.w	sl, [r4, #3892]	; 0xf34
      _b = b;
    7d5c:	strb.w	r2, [r4, #3917]	; 0xf4d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d60:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d64:	str.w	r8, [r4, #3912]	; 0xf48
      _s = s;
    7d68:	strb.w	r2, [r4, #3924]	; 0xf54
      _b = b;
    7d6c:	mov.w	r2, #117	; 0x75
    7d70:	strb.w	r2, [r4, #3861]	; 0xf15
    7d74:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d78:	str.w	r0, [r4, #3928]	; 0xf58
    7d7c:	movs	r0, #2
      _s = s;
      _b = b;
    7d7e:	strb.w	r2, [r4, #3925]	; 0xf55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d82:	mvn.w	r2, #67	; 0x43
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d86:	str.w	r0, [r4, #3960]	; 0xf78
      _s = s;
    7d8a:	strb.w	r2, [r4, #3932]	; 0xf5c
      _b = b;
    7d8e:	mvn.w	r2, #72	; 0x48
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7d92:	str.w	r0, [r4, #3968]	; 0xf80
    7d96:	movs	r0, #22
      _s = s;
      _b = b;
    7d98:	strb.w	r2, [r4, #3933]	; 0xf5d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7d9c:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7da0:	str.w	r0, [r4, #3976]	; 0xf88
      _s = s;
    7da4:	strb.w	r2, [r4, #3940]	; 0xf64
      _b = b;
    7da8:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dac:	str.w	r0, [r4, #3984]	; 0xf90
      _s = s;
      _b = b;
    7db0:	strb.w	r2, [r4, #3941]	; 0xf65
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7db4:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7db8:	str.w	r0, [r4, #3992]	; 0xf98
    7dbc:	movs	r0, #2
      _s = s;
    7dbe:	strb.w	r2, [r4, #3948]	; 0xf6c
      _b = b;
    7dc2:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dc6:	strb.w	r6, [r4, #3964]	; 0xf7c
      _b = b;
    7dca:	strb.w	r2, [r4, #3949]	; 0xf6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dce:	mov.w	r2, #100	; 0x64
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dd2:	str.w	r0, [r4, #4000]	; 0xfa0
      _s = s;
    7dd6:	strb.w	r2, [r4, #3956]	; 0xf74
      _b = b;
    7dda:	mvn.w	r2, #31
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7dde:	strb.w	r6, [r4, #4004]	; 0xfa4
      _b = b;
    7de2:	strb.w	r2, [r4, #3957]	; 0xf75
    7de6:	mov.w	r2, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7dea:	str.w	r0, [r4, #4008]	; 0xfa8
    7dee:	movs	r0, #21
      _s = s;
      _b = b;
    7df0:	strb.w	r2, [r4, #3965]	; 0xf7d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7df4:	mvn.w	r2, #2
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7df8:	str.w	fp, [r4, #3936]	; 0xf60
      _s = s;
    7dfc:	strb.w	r2, [r4, #3972]	; 0xf84
      _b = b;
    7e00:	mvn.w	r2, #109	; 0x6d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e04:	str.w	fp, [r4, #3944]	; 0xf68
      _s = s;
      _b = b;
    7e08:	strb.w	r2, [r4, #3973]	; 0xf85
    7e0c:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e10:	str.w	fp, [r4, #3952]	; 0xf70
      _s = s;
      _b = b;
    7e14:	strb.w	r2, [r4, #3981]	; 0xf8d
    7e18:	strb.w	r2, [r4, #3989]	; 0xf95
    7e1c:	strb.w	r2, [r4, #3997]	; 0xf9d
    7e20:	mov.w	r2, #102	; 0x66
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e24:	strb.w	r9, [r4, #3980]	; 0xf8c
      _b = b;
    7e28:	strb.w	r2, [r4, #4005]	; 0xfa5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e2c:	strb.w	r9, [r4, #3988]	; 0xf94
    7e30:	strb.w	r9, [r4, #3996]	; 0xf9c
    7e34:	strb.w	r6, [r4, #4012]	; 0xfac
      _b = b;
    7e38:	movs	r6, #13
    7e3a:	strb.w	r2, [r4, #4013]	; 0xfad
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7e3e:	mvn.w	r2, #85	; 0x55
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e42:	str.w	r0, [r4, #4016]	; 0xfb0
    7e46:	movs	r0, #217	; 0xd9
      _s = s;
    7e48:	strb.w	r2, [r4, #4020]	; 0xfb4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e4c:	movs	r2, #0
    7e4e:	str.w	r0, [r4, #4056]	; 0xfd8
    7e52:	movs	r0, #189	; 0xbd
    7e54:	str.w	r2, [r4, #4024]	; 0xfb8
      _s = s;
    7e58:	strb.w	r2, [r4, #4028]	; 0xfbc
      _b = b;
    7e5c:	strb.w	r2, [r4, #4029]	; 0xfbd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e60:	movs	r2, #0
    7e62:	str.w	r0, [r4, #4088]	; 0xff8
      _s = s;
    7e66:	mvn.w	r0, #53	; 0x35
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e6a:	str.w	r2, [r4, #4032]	; 0xfc0
      _s = s;
    7e6e:	strb.w	r2, [r4, #4036]	; 0xfc4
      _b = b;
    7e72:	strb.w	r2, [r4, #4037]	; 0xfc5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e76:	movs	r2, #0
      _s = s;
    7e78:	strb.w	lr, [r4, #4060]	; 0xfdc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e7c:	str.w	r2, [r4, #4040]	; 0xfc8
      _s = s;
    7e80:	strb.w	r2, [r4, #4044]	; 0xfcc
      _b = b;
    7e84:	strb.w	r2, [r4, #4045]	; 0xfcd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e88:	movs	r2, #0
    7e8a:	str.w	r1, [r4, #4064]	; 0xfe0
    7e8e:	str.w	r2, [r4, #4048]	; 0xfd0
      _s = s;
    7e92:	strb.w	r2, [r4, #4052]	; 0xfd4
      _b = b;
    7e96:	strb.w	r2, [r4, #4053]	; 0xfd5
    7e9a:	mov.w	r2, #37	; 0x25
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7e9e:	str.w	r1, [r4, #4072]	; 0xfe8
      _s = s;
      _b = b;
    7ea2:	strb.w	r2, [r4, #4061]	; 0xfdd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ea6:	mvn.w	r2, #122	; 0x7a
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eaa:	str.w	ip, [r4, #4080]	; 0xff0
      _s = s;
    7eae:	strb.w	r2, [r4, #4068]	; 0xfe4
      _b = b;
    7eb2:	mvn.w	r2, #52	; 0x34
    7eb6:	strb.w	r3, [r4, #4093]	; 0xffd
    7eba:	strb.w	r2, [r4, #4069]	; 0xfe5
    7ebe:	mvn.w	r2, #20
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ec2:	strb.w	sl, [r4, #4076]	; 0xfec
      _b = b;
    7ec6:	strb.w	r2, [r4, #4077]	; 0xfed
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eca:	mvn.w	r2, #57	; 0x39
    7ece:	strb.w	r2, [r4, #4084]	; 0xff4
      _b = b;
    7ed2:	mvn.w	r2, #19
    7ed6:	strb.w	r2, [r4, #4085]	; 0xff5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7eda:	mvn.w	r2, #53	; 0x35
    7ede:	strb.w	r2, [r4, #4092]	; 0xffc
    7ee2:	movw	r2, #4100	; 0x1004
    7ee6:	strb	r0, [r4, r2]
      _b = b;
    7ee8:	mov.w	r2, #91	; 0x5b
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7eec:	movs	r0, #189	; 0xbd
      _s = s;
      _b = b;
    7eee:	strb.w	r2, [r4, #4021]	; 0xfb5
    7ef2:	movw	r2, #4101	; 0x1005
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7ef6:	str.w	r0, [r7], #32
    7efa:	add.w	r0, r4, #4096	; 0x1000
      _s = s;
      _b = b;
    7efe:	strb	r3, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f00:	movs	r2, #22
    7f02:	str.w	fp, [r7]
      _s = s;
      _b = b;
    7f06:	mov.w	r7, #16
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f0a:	str	r2, [r0, #64]	; 0x40
    7f0c:	movw	r2, #4104	; 0x1008
      _s = s;
    7f10:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f14:	str.w	r8, [r4, r2]
      _s = s;
    7f18:	movw	r2, #4108	; 0x100c
    7f1c:	strb	r0, [r4, r2]
      _b = b;
    7f1e:	movw	r2, #4109	; 0x100d
    7f22:	mov.w	r0, #54	; 0x36
    7f26:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f28:	movw	r0, #4112	; 0x1010
    7f2c:	movs	r2, #246	; 0xf6
    7f2e:	str	r2, [r4, r0]
      _s = s;
    7f30:	movw	r2, #4116	; 0x1014
    7f34:	mvn.w	r0, #67	; 0x43
    7f38:	strb	r0, [r4, r2]
      _b = b;
    7f3a:	movw	r2, #4117	; 0x1015
    7f3e:	mvn.w	r0, #72	; 0x48
    7f42:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f44:	movw	r0, #4120	; 0x1018
    7f48:	movs	r2, #212	; 0xd4
    7f4a:	str	r2, [r4, r0]
      _s = s;
    7f4c:	movw	r2, #4124	; 0x101c
    7f50:	mvn.w	r0, #31
    7f54:	strb	r0, [r4, r2]
      _b = b;
    7f56:	movw	r2, #4125	; 0x101d
    7f5a:	mov.w	r0, #109	; 0x6d
    7f5e:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7f60:	movw	r2, #4132	; 0x1024
    7f64:	mov.w	r0, #100	; 0x64
    7f68:	strb	r0, [r4, r2]
      _b = b;
    7f6a:	movw	r2, #4133	; 0x1025
    7f6e:	mvn.w	r0, #31
    7f72:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f74:	movw	r0, #4136	; 0x1028
    7f78:	movs	r2, #189	; 0xbd
    7f7a:	str	r2, [r4, r0]
      _s = s;
    7f7c:	movw	r2, #4140	; 0x102c
    7f80:	mvn.w	r0, #53	; 0x35
    7f84:	strb	r0, [r4, r2]
      _b = b;
    7f86:	movw	r2, #4141	; 0x102d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f8a:	movw	r0, #4144	; 0x1030
      _s = s;
      _b = b;
    7f8e:	strb	r3, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7f90:	movs	r2, #189	; 0xbd
    7f92:	str	r2, [r4, r0]
      _s = s;
    7f94:	movw	r2, #4148	; 0x1034
    7f98:	mvn.w	r0, #53	; 0x35
    7f9c:	strb	r0, [r4, r2]
      _b = b;
    7f9e:	movw	r2, #4149	; 0x1035
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fa2:	mov.w	r0, #4294967295
      _b = b;
    7fa6:	strb	r3, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fa8:	movw	r2, #4152	; 0x1038
    7fac:	str.w	r8, [r4, r2]
      _s = s;
    7fb0:	movw	r2, #4156	; 0x103c
    7fb4:	strb	r0, [r4, r2]
      _b = b;
    7fb6:	movw	r2, #4157	; 0x103d
    7fba:	mov.w	r0, #54	; 0x36
    7fbe:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fc0:	movw	r2, #4164	; 0x1044
      _b = b;
    7fc4:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fc8:	strb.w	r9, [r4, r2]
      _b = b;
    7fcc:	movw	r2, #4165	; 0x1045
    7fd0:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fd2:	movw	r0, #4168	; 0x1048
    7fd6:	movs	r2, #22
    7fd8:	str	r2, [r4, r0]
      _s = s;
    7fda:	movw	r2, #4172	; 0x104c
      _b = b;
    7fde:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7fe2:	strb.w	r9, [r4, r2]
      _b = b;
    7fe6:	movw	r2, #4173	; 0x104d
    7fea:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    7fec:	movw	r0, #4176	; 0x1050
    7ff0:	movs	r2, #22
    7ff2:	str	r2, [r4, r0]
      _s = s;
    7ff4:	movw	r2, #4180	; 0x1054
      _b = b;
    7ff8:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    7ffc:	strb.w	r9, [r4, r2]
      _b = b;
    8000:	movw	r2, #4181	; 0x1055
    8004:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8006:	movw	r0, #4184	; 0x1058
    800a:	movs	r2, #22
    800c:	str	r2, [r4, r0]
      _s = s;
    800e:	movw	r2, #4188	; 0x105c
      _b = b;
    8012:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8016:	strb.w	r9, [r4, r2]
      _b = b;
    801a:	movw	r2, #4189	; 0x105d
    801e:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8020:	add.w	r2, r4, #4096	; 0x1000
    8024:	movs	r0, #22
    8026:	str	r0, [r2, #96]	; 0x60
      _s = s;
    8028:	movw	r2, #4196	; 0x1064
      _b = b;
    802c:	mov.w	r0, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8030:	strb.w	r9, [r4, r2]
      _b = b;
    8034:	movw	r2, #4197	; 0x1065
    8038:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    803a:	movw	r2, #4204	; 0x106c
    803e:	mvn.w	r0, #40	; 0x28
    8042:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8044:	movs	r0, #0
    8046:	movw	r2, #4208	; 0x1070
    804a:	str	r0, [r4, r2]
      _s = s;
    804c:	movw	r2, #4212	; 0x1074
    8050:	strb	r0, [r4, r2]
      _b = b;
    8052:	movw	r2, #4213	; 0x1075
    8056:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8058:	movs	r0, #0
    805a:	movw	r2, #4216	; 0x1078
    805e:	str	r0, [r4, r2]
      _s = s;
    8060:	movw	r2, #4220	; 0x107c
    8064:	strb	r0, [r4, r2]
      _b = b;
    8066:	movw	r2, #4221	; 0x107d
    806a:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    806c:	movw	r2, #4228	; 0x1084
    8070:	strb	r0, [r4, r2]
      _b = b;
    8072:	movw	r2, #4229	; 0x1085
    8076:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8078:	movs	r0, #0
    807a:	movw	r2, #4232	; 0x1088
    807e:	str	r0, [r4, r2]
      _s = s;
    8080:	movw	r2, #4236	; 0x108c
    8084:	strb	r0, [r4, r2]
      _b = b;
    8086:	movw	r2, #4237	; 0x108d
    808a:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    808c:	movs	r0, #0
    808e:	movw	r2, #4240	; 0x1090
    8092:	str	r0, [r4, r2]
      _s = s;
    8094:	movw	r2, #4244	; 0x1094
    8098:	strb	r0, [r4, r2]
      _b = b;
    809a:	movw	r2, #4245	; 0x1095
    809e:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80a0:	movs	r0, #0
    80a2:	movw	r2, #4248	; 0x1098
    80a6:	str	r0, [r4, r2]
      _s = s;
    80a8:	movw	r2, #4252	; 0x109c
    80ac:	strb	r0, [r4, r2]
      _b = b;
    80ae:	movw	r2, #4253	; 0x109d
    80b2:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    80b4:	movw	r2, #4260	; 0x10a4
    80b8:	strb	r0, [r4, r2]
      _b = b;
    80ba:	movw	r2, #4261	; 0x10a5
    80be:	strb	r0, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80c0:	movw	r2, #4264	; 0x10a8
    80c4:	movw	r0, #4360	; 0x1108
    80c8:	str	r1, [r4, r2]
      _s = s;
      _b = b;
    80ca:	movw	r2, #4269	; 0x10ad
    80ce:	mvn.w	r1, #122	; 0x7a
    80d2:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80d4:	movw	r2, #4272	; 0x10b0
      _s = s;
    80d8:	mvn.w	r1, #55	; 0x37
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80dc:	str.w	ip, [r4, r2]
      _s = s;
    80e0:	movw	r2, #4276	; 0x10b4
    80e4:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80e6:	movw	r1, #4200	; 0x1068
    80ea:	movs	r2, #174	; 0xae
    80ec:	str	r2, [r4, r1]
      _s = s;
      _b = b;
    80ee:	movw	r2, #4205	; 0x106d
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f2:	movs	r1, #0
      _s = s;
      _b = b;
    80f4:	strb	r6, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80f6:	add.w	r2, r4, #4224	; 0x1080
      _s = s;
      _b = b;
    80fa:	movw	r6, #4301	; 0x10cd
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    80fe:	str	r1, [r2, #0]
    8100:	str	r1, [r2, #32]
      _s = s;
    8102:	movw	r2, #4268	; 0x10ac
    8106:	mvn.w	r1, #119	; 0x77
    810a:	strb	r1, [r4, r2]
      _b = b;
    810c:	movw	r2, #4277	; 0x10b5
    8110:	mvn.w	r1, #44	; 0x2c
    8114:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8116:	movw	r1, #4280	; 0x10b8
    811a:	movs	r2, #246	; 0xf6
    811c:	str	r2, [r4, r1]
    811e:	add.w	r2, r4, #4096	; 0x1000
    8122:	movs	r1, #22
    8124:	str.w	r1, [r2, #256]	; 0x100
      _s = s;
    8128:	movw	r2, #4284	; 0x10bc
    812c:	mvn.w	r1, #67	; 0x43
    8130:	strb	r1, [r4, r2]
      _b = b;
    8132:	movw	r2, #4285	; 0x10bd
    8136:	mvn.w	r1, #72	; 0x48
    813a:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    813c:	add.w	r2, r4, #4096	; 0x1000
    8140:	movs	r1, #189	; 0xbd
    8142:	str.w	r1, [r2, #192]	; 0xc0
      _s = s;
    8146:	movw	r2, #4292	; 0x10c4
    814a:	mvn.w	r1, #53	; 0x35
    814e:	strb	r1, [r4, r2]
      _b = b;
    8150:	movw	r2, #4293	; 0x10c5
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8154:	movw	r1, #4296	; 0x10c8
      _s = s;
      _b = b;
    8158:	strb	r3, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    815a:	movs	r2, #175	; 0xaf
    815c:	str	r2, [r4, r1]
      _s = s;
    815e:	movw	r2, #4300	; 0x10cc
    8162:	mvn.w	r1, #48	; 0x30
    8166:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8168:	movw	r2, #4304	; 0x10d0
      _s = s;
    816c:	mov.w	r1, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8170:	str.w	r8, [r4, r2]
      _s = s;
    8174:	movw	r2, #4308	; 0x10d4
    8178:	strb	r1, [r4, r2]
      _b = b;
    817a:	movw	r2, #4309	; 0x10d5
    817e:	mov.w	r1, #54	; 0x36
    8182:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8184:	movw	r1, #4312	; 0x10d8
    8188:	movs	r2, #189	; 0xbd
    818a:	str	r2, [r4, r1]
      _s = s;
    818c:	movw	r2, #4316	; 0x10dc
    8190:	mvn.w	r1, #53	; 0x35
    8194:	strb	r1, [r4, r2]
      _b = b;
    8196:	movw	r2, #4317	; 0x10dd
    819a:	mov.w	r1, #4294967295
    819e:	strb	r3, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81a0:	add.w	r3, r4, #4096	; 0x1000
    81a4:	movs	r2, #212	; 0xd4
    81a6:	str.w	r2, [r3, #224]	; 0xe0
      _s = s;
    81aa:	movw	r3, #4324	; 0x10e4
    81ae:	mvn.w	r2, #31
    81b2:	strb	r2, [r4, r3]
      _b = b;
    81b4:	movw	r3, #4325	; 0x10e5
    81b8:	mov.w	r2, #109	; 0x6d
    81bc:	strb	r2, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81be:	movw	r2, #4328	; 0x10e8
    81c2:	movs	r3, #246	; 0xf6
    81c4:	str	r3, [r4, r2]
      _s = s;
    81c6:	movw	r3, #4332	; 0x10ec
    81ca:	mvn.w	r2, #67	; 0x43
    81ce:	strb	r2, [r4, r3]
      _b = b;
    81d0:	movw	r3, #4333	; 0x10ed
    81d4:	mvn.w	r2, #72	; 0x48
    81d8:	strb	r2, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81da:	movw	r2, #4336	; 0x10f0
    81de:	movs	r3, #212	; 0xd4
    81e0:	str	r3, [r4, r2]
      _s = s;
    81e2:	movw	r3, #4340	; 0x10f4
    81e6:	mvn.w	r2, #31
    81ea:	strb	r2, [r4, r3]
      _b = b;
    81ec:	movw	r3, #4341	; 0x10f5
    81f0:	mov.w	r2, #109	; 0x6d
    81f4:	strb	r2, [r4, r3]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81f6:	movw	r3, #4344	; 0x10f8
      _s = s;
    81fa:	mov.w	r2, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    81fe:	str.w	r8, [r4, r3]
      _s = s;
    8202:	movw	r3, #4348	; 0x10fc
    8206:	strb	r2, [r4, r3]
      _b = b;
    8208:	movw	r3, #4349	; 0x10fd
    820c:	mov.w	r2, #54	; 0x36
    8210:	strb	r2, [r4, r3]
    8212:	movw	r2, #4357	; 0x1105
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8216:	movw	r3, #4356	; 0x1104
      _b = b;
    821a:	strb	r1, [r4, r2]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    821c:	movs	r1, #22
      _s = s;
    821e:	strb.w	r9, [r4, r3]

#if POD_ID == 1
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
#elif POD_ID == 2
  Adafruit_NeoPixel matrix_A = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
    8222:	movs	r2, #7
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8224:	str	r1, [r4, r0]
      _s = s;
    8226:	movw	r0, #4364	; 0x110c
    822a:	movs	r3, #82	; 0x52
    822c:	mov.w	r1, #576	; 0x240
    8230:	strb.w	r9, [r4, r0]
      _b = b;
    8234:	strb	r7, [r4, r6]
    8236:	movw	r6, #4365	; 0x110d
    823a:	mov.w	r7, #4294967295
    823e:	ldr	r0, [pc, #896]	; (85c0 <_GLOBAL__sub_I_bri_level+0x50d0>)
    8240:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8242:	movw	r6, #4368	; 0x1110
    8246:	movs	r7, #22
    8248:	str	r7, [r4, r6]
    824a:	add.w	r7, r4, #4096	; 0x1000
    824e:	movs	r6, #22
    8250:	str.w	r6, [r7, #288]	; 0x120
      _s = s;
    8254:	movw	r6, #4372	; 0x1114
      _b = b;
    8258:	mov.w	r7, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    825c:	strb.w	r9, [r4, r6]
      _b = b;
    8260:	movw	r6, #4373	; 0x1115
    8264:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8266:	movw	r7, #4376	; 0x1118
    826a:	movs	r6, #22
    826c:	str	r6, [r4, r7]
      _s = s;
    826e:	movw	r6, #4380	; 0x111c
      _b = b;
    8272:	mov.w	r7, #4294967295
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8276:	strb.w	r9, [r4, r6]
      _b = b;
    827a:	movw	r6, #4381	; 0x111d
    827e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8280:	movw	r6, #4388	; 0x1124
    8284:	strb.w	r9, [r4, r6]
      _b = b;
    8288:	movw	r6, #4389	; 0x1125
    828c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    828e:	movw	r7, #4392	; 0x1128
    8292:	movs	r6, #180	; 0xb4
    8294:	str	r6, [r4, r7]
      _s = s;
    8296:	movw	r6, #4396	; 0x112c
    829a:	mvn.w	r7, #85	; 0x55
    829e:	strb	r7, [r4, r6]
      _b = b;
    82a0:	movw	r6, #4397	; 0x112d
    82a4:	mov.w	r7, #0
    82a8:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82aa:	movs	r7, #0
    82ac:	movw	r6, #4400	; 0x1130
    82b0:	str	r7, [r4, r6]
      _s = s;
    82b2:	movw	r6, #4404	; 0x1134
    82b6:	strb	r7, [r4, r6]
      _b = b;
    82b8:	movw	r6, #4405	; 0x1135
    82bc:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82be:	movs	r7, #0
    82c0:	movw	r6, #4408	; 0x1138
    82c4:	str	r7, [r4, r6]
      _s = s;
    82c6:	movw	r6, #4412	; 0x113c
    82ca:	strb	r7, [r4, r6]
      _b = b;
    82cc:	movw	r6, #4413	; 0x113d
    82d0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    82d2:	movw	r6, #4420	; 0x1144
    82d6:	strb	r7, [r4, r6]
      _b = b;
    82d8:	movw	r6, #4421	; 0x1145
    82dc:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82de:	movs	r7, #0
    82e0:	movw	r6, #4424	; 0x1148
    82e4:	str	r7, [r4, r6]
      _s = s;
    82e6:	movw	r6, #4428	; 0x114c
    82ea:	strb	r7, [r4, r6]
      _b = b;
    82ec:	movw	r6, #4429	; 0x114d
    82f0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    82f2:	movs	r7, #0
    82f4:	movw	r6, #4432	; 0x1150
    82f8:	str	r7, [r4, r6]
      _s = s;
    82fa:	movw	r6, #4436	; 0x1154
    82fe:	strb	r7, [r4, r6]
      _b = b;
    8300:	movw	r6, #4437	; 0x1155
    8304:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8306:	movs	r7, #0
    8308:	movw	r6, #4440	; 0x1158
    830c:	str	r7, [r4, r6]
      _s = s;
    830e:	movw	r6, #4444	; 0x115c
    8312:	strb	r7, [r4, r6]
      _b = b;
    8314:	movw	r6, #4445	; 0x115d
    8318:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    831a:	movw	r6, #4452	; 0x1164
    831e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8320:	movs	r7, #0
    8322:	add.w	r6, r4, #4416	; 0x1140
    8326:	str	r7, [r6, #0]
    8328:	str	r7, [r6, #32]
      _s = s;
      _b = b;
    832a:	movw	r6, #4453	; 0x1165
    832e:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8330:	add.w	r6, r4, #4096	; 0x1000
    8334:	movs	r7, #159	; 0x9f
    8336:	str.w	ip, [r6, #416]	; 0x1a0
    833a:	str.w	r7, [r6, #384]	; 0x180
      _s = s;
    833e:	movw	r6, #4476	; 0x117c
    8342:	mvn.w	r7, #16
    8346:	strb	r7, [r4, r6]
      _b = b;
    8348:	movw	r6, #4485	; 0x1185
    834c:	mvn.w	r7, #95	; 0x5f
    8350:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8352:	movw	r6, #4488	; 0x1188
      _s = s;
      _b = b;
    8356:	mov.w	r7, #54	; 0x36
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    835a:	str.w	r8, [r4, r6]
      _s = s;
      _b = b;
    835e:	movw	r6, #4493	; 0x118d
    8362:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8364:	movw	r6, #4496	; 0x1190
    8368:	str.w	r8, [r4, r6]
      _s = s;
      _b = b;
    836c:	movw	r6, #4501	; 0x1195
    8370:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8372:	movw	r6, #4504	; 0x1198
    8376:	movw	r7, #4528	; 0x11b0
    837a:	str.w	ip, [r4, r6]
    837e:	movw	r6, #4520	; 0x11a8
    8382:	str.w	ip, [r4, r6]
    8386:	movs	r6, #246	; 0xf6
    8388:	str	r6, [r4, r7]
      _s = s;
    838a:	movw	r6, #4532	; 0x11b4
    838e:	mvn.w	r7, #67	; 0x43
    8392:	strb	r7, [r4, r6]
      _b = b;
    8394:	movw	r6, #4533	; 0x11b5
    8398:	mvn.w	r7, #72	; 0x48
    839c:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    839e:	movw	r6, #4536	; 0x11b8
    83a2:	movw	r7, #4472	; 0x1178
    83a6:	str.w	r8, [r4, r6]
      _s = s;
    83aa:	movw	r6, #4508	; 0x119c
    83ae:	strb.w	lr, [r4, r6]
      _b = b;
    83b2:	movw	r6, #4509	; 0x119d
    83b6:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83ba:	movw	r6, #4516	; 0x11a4
    83be:	strb.w	lr, [r4, r6]
      _b = b;
    83c2:	movw	r6, #4517	; 0x11a5
    83c6:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    83ca:	movw	r6, #4524	; 0x11ac
    83ce:	strb.w	lr, [r4, r6]
      _b = b;
    83d2:	movw	r6, #4525	; 0x11ad
    83d6:	strb.w	lr, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83da:	movs	r6, #214	; 0xd6
    83dc:	str	r6, [r4, r7]
    83de:	movs	r7, #0
    83e0:	movw	r6, #4456	; 0x1168
    83e4:	str	r7, [r4, r6]
      _s = s;
    83e6:	movw	r6, #4460	; 0x116c
    83ea:	strb	r7, [r4, r6]
      _b = b;
    83ec:	movw	r6, #4461	; 0x116d
    83f0:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    83f2:	movs	r7, #0
    83f4:	movw	r6, #4464	; 0x1170
    83f8:	str	r7, [r4, r6]
      _s = s;
    83fa:	movw	r6, #4468	; 0x1174
    83fe:	strb	r7, [r4, r6]
      _b = b;
    8400:	movw	r6, #4469	; 0x1175
    8404:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8406:	mov.w	r7, #4294967295
    840a:	movw	r6, #4492	; 0x118c
    840e:	strb	r7, [r4, r6]
    8410:	movw	r6, #4500	; 0x1194
    8414:	strb	r7, [r4, r6]
    8416:	movw	r6, #4540	; 0x11bc
    841a:	strb	r7, [r4, r6]
      _b = b;
    841c:	movw	r6, #4477	; 0x117d
    8420:	mov.w	r7, #48	; 0x30
    8424:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
      _s = s;
    8426:	movw	r6, #4484	; 0x1184
    842a:	mvn.w	r7, #71	; 0x47
    842e:	strb	r7, [r4, r6]
      _b = b;
    8430:	movw	r6, #4541	; 0x11bd
    8434:	mov.w	r7, #54	; 0x36
    8438:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    843a:	add.w	r6, r4, #4096	; 0x1000
    843e:	movs	r7, #22
    8440:	str.w	r7, [r6, #448]	; 0x1c0
    8444:	str.w	r7, [r6, #480]	; 0x1e0
      _s = s;
    8448:	movw	r6, #4548	; 0x11c4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    844c:	movw	r7, #4552	; 0x11c8
      _s = s;
    8450:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8454:	movs	r6, #22
    8456:	str	r6, [r4, r7]
      _s = s;
    8458:	movw	r6, #4556	; 0x11cc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    845c:	movw	r7, #4560	; 0x11d0
      _s = s;
    8460:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8464:	movs	r6, #22
    8466:	str	r6, [r4, r7]
      _s = s;
    8468:	movw	r6, #4564	; 0x11d4
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    846c:	movw	r7, #4568	; 0x11d8
      _s = s;
    8470:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    8474:	movs	r6, #22
    8476:	str	r6, [r4, r7]
      _s = s;
    8478:	movw	r6, #4572	; 0x11dc
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    847c:	movs	r7, #0
      _s = s;
    847e:	strb.w	r9, [r4, r6]
    8482:	movw	r6, #4580	; 0x11e4
    8486:	strb.w	r9, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    848a:	movw	r6, #4584	; 0x11e8
    848e:	str	r7, [r4, r6]
      _s = s;
    8490:	movw	r6, #4588	; 0x11ec
    8494:	strb	r7, [r4, r6]
      _b = b;
    8496:	movw	r6, #4589	; 0x11ed
    849a:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    849c:	movs	r7, #0
    849e:	movw	r6, #4592	; 0x11f0
    84a2:	str	r7, [r4, r6]
      _s = s;
    84a4:	movw	r6, #4596	; 0x11f4
    84a8:	strb	r7, [r4, r6]
      _b = b;
    84aa:	movw	r6, #4597	; 0x11f5
    84ae:	strb	r7, [r4, r6]
class Cellmask {

  public:
    Cellmask(int h, byte s, byte b){
      _h = h;
    84b0:	movs	r7, #0
    84b2:	movw	r6, #4600	; 0x11f8
    84b6:	str	r7, [r4, r6]
      _s = s;
    84b8:	movw	r6, #4604	; 0x11fc
    84bc:	strb	r7, [r4, r6]
      _b = b;
    84be:	movw	r6, #4605	; 0x11fd
    84c2:	strb	r7, [r4, r6]
    84c4:	mov.w	r7, #4294967295
    84c8:	movw	r6, #4549	; 0x11c5
    84cc:	strb	r7, [r4, r6]
    84ce:	movw	r6, #4557	; 0x11cd
    84d2:	strb	r7, [r4, r6]
    84d4:	movw	r6, #4565	; 0x11d5
    84d8:	strb	r7, [r4, r6]
    84da:	movw	r6, #4573	; 0x11dd
    84de:	strb	r7, [r4, r6]
    84e0:	movw	r6, #4581	; 0x11e5
    84e4:	strb	r7, [r4, r6]
    84e6:	bl	9a30 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    84ea:	ldr	r2, [pc, #216]	; (85c4 <_GLOBAL__sub_I_bri_level+0x50d4>)
    84ec:	ldr	r1, [pc, #216]	; (85c8 <_GLOBAL__sub_I_bri_level+0x50d8>)
    84ee:	ldr	r0, [pc, #208]	; (85c0 <_GLOBAL__sub_I_bri_level+0x50d0>)
    84f0:	bl	c0d8 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_B, NEO_GRB + NEO_KHZ800);
    84f4:	movs	r3, #82	; 0x52
    84f6:	movs	r2, #8
    84f8:	mov.w	r1, #576	; 0x240
    84fc:	ldr	r0, [pc, #204]	; (85cc <_GLOBAL__sub_I_bri_level+0x50dc>)
    84fe:	bl	9a30 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8502:	ldr	r2, [pc, #192]	; (85c4 <_GLOBAL__sub_I_bri_level+0x50d4>)
    8504:	ldr	r1, [pc, #192]	; (85c8 <_GLOBAL__sub_I_bri_level+0x50d8>)
    8506:	ldr	r0, [pc, #196]	; (85cc <_GLOBAL__sub_I_bri_level+0x50dc>)
    8508:	bl	c0d8 <__aeabi_atexit>
  Adafruit_NeoPixel matrix_B = Adafruit_NeoPixel(NUM_LEDS_SCREEN, CHANNEL_A, NEO_GRB + NEO_KHZ800);
#endif

//--------------------------------------------Screens

Adafruit_NeoPixel synapse_A = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_A, SYNAPSE_1, NEO_GRB + NEO_KHZ800);
    850c:	movs	r3, #82	; 0x52
    850e:	movs	r2, #2
    8510:	movs	r1, #0
    8512:	ldr	r0, [pc, #188]	; (85d0 <_GLOBAL__sub_I_bri_level+0x50e0>)
    8514:	bl	9a30 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    8518:	ldr	r2, [pc, #168]	; (85c4 <_GLOBAL__sub_I_bri_level+0x50d4>)
    851a:	ldr	r1, [pc, #172]	; (85c8 <_GLOBAL__sub_I_bri_level+0x50d8>)
    851c:	ldr	r0, [pc, #176]	; (85d0 <_GLOBAL__sub_I_bri_level+0x50e0>)
    851e:	bl	c0d8 <__aeabi_atexit>
Adafruit_NeoPixel synapse_B = Adafruit_NeoPixel(NUM_LEDS_SYNAPSE_B, SYNAPSE_2, NEO_GRB + NEO_KHZ800);
    8522:	movs	r3, #82	; 0x52
    8524:	movs	r2, #14
    8526:	movs	r1, #0
    8528:	ldr	r0, [pc, #168]	; (85d4 <_GLOBAL__sub_I_bri_level+0x50e4>)
    852a:	bl	9a30 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>
    852e:	ldr	r2, [pc, #148]	; (85c4 <_GLOBAL__sub_I_bri_level+0x50d4>)
    8530:	ldr	r1, [pc, #148]	; (85c8 <_GLOBAL__sub_I_bri_level+0x50d8>)
    8532:	ldr	r0, [pc, #160]	; (85d4 <_GLOBAL__sub_I_bri_level+0x50e4>)
    8534:	bl	c0d8 <__aeabi_atexit>
    8538:	ldr	r3, [pc, #156]	; (85d8 <_GLOBAL__sub_I_bri_level+0x50e8>)

	public:
		

Color(){
	RGB_updated = false;
    853a:	movs	r2, #0
    853c:	add.w	r1, r3, #440	; 0x1b8
    8540:	strb.w	r2, [r3, #-20]
    8544:	adds	r3, #44	; 0x2c
	HSB_updated = false;
    8546:	strb.w	r2, [r3, #-63]
		

		

Beam() {
	active = false;
    854a:	strb.w	r2, [r3, #-88]
#define BEAM_AM 10

Beam beams[BEAM_AM];
    854e:	cmp	r3, r1
    8550:	bne.n	8540 <_GLOBAL__sub_I_bri_level+0x5050>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    8552:	ldr	r3, [pc, #136]	; (85dc <_GLOBAL__sub_I_bri_level+0x50ec>)
    8554:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8556:	mov	r7, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    8558:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    855a:	ldr	r2, [r7, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    855c:	ldr	r3, [r7, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    855e:	ldr	r6, [pc, #124]	; (85dc <_GLOBAL__sub_I_bri_level+0x50ec>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    8560:	cmp	r3, r1
    8562:	it	eq
    8564:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8566:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    8568:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    856a:	ite	eq
    856c:	moveq.w	lr, #1
    8570:	movne.w	lr, #0
    8574:	cmp.w	lr, #0
    8578:	beq.n	855a <_GLOBAL__sub_I_bri_level+0x506a>
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = rtcMillis(); }
    857a:	lsrs	r1, r3, #5
Automaton grow_automaton_B; 
Automaton sat_automaton_B; 


//-----------------------------------------------------------------------------------------
Screen screen_A = Screen(&fg_automaton_A, &bg_automaton_A, &grow_automaton_A, &sat_automaton_A, &matrix_A, &mask_A, &background_A);
    857c:	str	r5, [sp, #8]
    857e:	ldr	r2, [pc, #64]	; (85c0 <_GLOBAL__sub_I_bri_level+0x50d0>)
    8580:	orr.w	r1, r1, r0, lsl #27
    8584:	ldr	r3, [pc, #88]	; (85e0 <_GLOBAL__sub_I_bri_level+0x50f0>)
    8586:	ldr	r7, [pc, #92]	; (85e4 <_GLOBAL__sub_I_bri_level+0x50f4>)
    8588:	vmov	s15, r1
    858c:	ldr	r5, [pc, #88]	; (85e8 <_GLOBAL__sub_I_bri_level+0x50f8>)
    858e:	str	r2, [sp, #4]
    8590:	vcvt.f64.u32	d7, s15
    8594:	str	r3, [sp, #0]
    8596:	str	r7, [sp, #12]
    8598:	ldr	r3, [pc, #80]	; (85ec <_GLOBAL__sub_I_bri_level+0x50fc>)
    859a:	ldr	r2, [pc, #84]	; (85f0 <_GLOBAL__sub_I_bri_level+0x5100>)
    859c:	ldr	r1, [pc, #84]	; (85f4 <_GLOBAL__sub_I_bri_level+0x5104>)
    859e:	ldr	r0, [pc, #88]	; (85f8 <_GLOBAL__sub_I_bri_level+0x5108>)
    85a0:	vldr	d5, [pc, #20]	; 85b8 <_GLOBAL__sub_I_bri_level+0x50c8>
    85a4:	vdiv.f64	d6, d7, d5
    85a8:	vcvt.u32.f64	s12, d6
    85ac:	vstr	s12, [r5]
    85b0:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
    85b4:	b.n	85fc <_GLOBAL__sub_I_bri_level+0x510c>
    85b6:	nop
    85b8:	.word	0xd2f1a9fc
    85bc:	.word	0x3ff0624d
    85c0:	.word	0x20003bb0
    85c4:	.word	0x2000093c
    85c8:	.word	0x00009749
    85cc:	.word	0x20003bc4
    85d0:	.word	0x200089c0
    85d4:	.word	0x200089d4
    85d8:	.word	0x200051b4
    85dc:	.word	0x400d4000
    85e0:	.word	0x2000778c
    85e4:	.word	0x20000b84
    85e8:	.word	0x20001764
    85ec:	.word	0x200089e8
    85f0:	.word	0x2000ae0c
    85f4:	.word	0x20001768
    85f8:	.word	0x20004dd8
Screen screen_B = Screen(&fg_automaton_B, &bg_automaton_B, &grow_automaton_B, &sat_automaton_B, &matrix_B, &mask_B, &background_B);
    85fc:	ldr	r1, [pc, #184]	; (86b8 <_GLOBAL__sub_I_bri_level+0x51c8>)
    85fe:	ldr	r2, [pc, #188]	; (86bc <_GLOBAL__sub_I_bri_level+0x51cc>)
    8600:	ldr	r3, [pc, #188]	; (86c0 <_GLOBAL__sub_I_bri_level+0x51d0>)
    8602:	str	r4, [sp, #8]
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8604:	mov	r4, r6
    8606:	str	r1, [sp, #12]
    8608:	str	r2, [sp, #4]
    860a:	str	r3, [sp, #0]
    860c:	ldr	r1, [pc, #180]	; (86c4 <_GLOBAL__sub_I_bri_level+0x51d4>)
    860e:	ldr	r3, [pc, #184]	; (86c8 <_GLOBAL__sub_I_bri_level+0x51d8>)
    8610:	ldr	r2, [pc, #184]	; (86cc <_GLOBAL__sub_I_bri_level+0x51dc>)
    8612:	ldr	r0, [pc, #188]	; (86d0 <_GLOBAL__sub_I_bri_level+0x51e0>)
    8614:	bl	7c <Screen::Screen(Automaton*, Automaton*, Automaton*, Automaton*, Adafruit_NeoPixel*, Cellmask (*) [24][24], bool (*) [24][24])>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    8618:	ldr	r0, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    861a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    861c:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    861e:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8620:	ldr	r6, [pc, #176]	; (86d4 <_GLOBAL__sub_I_bri_level+0x51e4>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    8622:	cmp	r3, r1
    8624:	it	eq
    8626:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8628:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    862a:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    862c:	ite	eq
    862e:	moveq	r5, #1
    8630:	movne	r5, #0
    8632:	cmp	r5, #0
    8634:	beq.n	861c <_GLOBAL__sub_I_bri_level+0x512c>
    8636:	lsrs	r1, r3, #5
    8638:	ldr	r3, [pc, #156]	; (86d8 <_GLOBAL__sub_I_bri_level+0x51e8>)
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    863a:	mov	r5, r6
    863c:	orr.w	r1, r1, r2, lsl #27
    8640:	vmov	s15, r1
    8644:	vldr	d5, [pc, #104]	; 86b0 <_GLOBAL__sub_I_bri_level+0x51c0>
    8648:	vcvt.f64.u32	d7, s15
    864c:	vdiv.f64	d6, d7, d5
    8650:	vcvt.u32.f64	s12, d6
    8654:	vstr	s12, [r3]
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    8658:	ldr	r4, [r6, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
    865a:	ldr	r1, [r6, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    865c:	ldr	r2, [r5, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    865e:	ldr	r3, [r5, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    8660:	cmp	r3, r1
    8662:	it	eq
    8664:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8666:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    8668:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    866a:	ite	eq
    866c:	moveq	r0, #1
    866e:	movne	r0, #0
    8670:	cmp	r0, #0
    8672:	beq.n	865c <_GLOBAL__sub_I_bri_level+0x516c>
    8674:	lsrs	r3, r3, #5
    8676:	ldr	r2, [pc, #100]	; (86dc <_GLOBAL__sub_I_bri_level+0x51ec>)
  screen_B.updateFade();
}


byte incomingByte;
String readBuffer;  
    8678:	movs	r1, #0
    867a:	ldr	r0, [pc, #100]	; (86e0 <_GLOBAL__sub_I_bri_level+0x51f0>)
    867c:	orr.w	r3, r3, r4, lsl #27
    8680:	vmov	s15, r3
    8684:	vldr	d5, [pc, #40]	; 86b0 <_GLOBAL__sub_I_bri_level+0x51c0>
    8688:	vcvt.f64.u32	d7, s15
    868c:	vdiv.f64	d6, d7, d5
    8690:	vcvt.u32.f64	s12, d6
    8694:	vstr	s12, [r2]
    8698:	bl	b53c <String::String(char const*)>
    869c:	ldr	r2, [pc, #68]	; (86e4 <_GLOBAL__sub_I_bri_level+0x51f4>)
    869e:	ldr	r1, [pc, #72]	; (86e8 <_GLOBAL__sub_I_bri_level+0x51f8>)
    86a0:	ldr	r0, [pc, #60]	; (86e0 <_GLOBAL__sub_I_bri_level+0x51f0>)

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt();
}
    86a2:	add	sp, #20
    86a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  screen_B.updateFade();
}


byte incomingByte;
String readBuffer;  
    86a8:	b.w	c0d8 <__aeabi_atexit>
    86ac:	nop.w
    86b0:	.word	0xd2f1a9fc
    86b4:	.word	0x3ff0624d
    86b8:	.word	0x20000944
    86bc:	.word	0x20003bc4
    86c0:	.word	0x20005344
    86c4:	.word	0x2000298c
    86c8:	.word	0x20006568
    86cc:	.word	0x2000c030
    86d0:	.word	0x20004fb0
    86d4:	.word	0x400d4000
    86d8:	.word	0x20001760
    86dc:	.word	0x20005340
    86e0:	.word	0x200089b0
    86e4:	.word	0x2000093c
    86e8:	.word	0x0000b4bd

000086ec <readMessages()>:

void readMessages(){
    86ec:	push	{r4, lr}
  if(Serial1.available()){
    86ee:	ldr	r0, [pc, #196]	; (87b4 <readMessages()+0xc8>)
    86f0:	bl	aef4 <HardwareSerial::available()>
    86f4:	cmp	r0, #0
    86f6:	beq.n	8752 <readMessages()+0x66>
    while (Serial1.available()){
      incomingByte = Serial1.read();
    86f8:	ldr	r4, [pc, #188]	; (87b8 <readMessages()+0xcc>)
    86fa:	b.n	870e <readMessages()+0x22>
    86fc:	ldr	r0, [pc, #180]	; (87b4 <readMessages()+0xc8>)
    86fe:	bl	af48 <HardwareSerial::read()>
    8702:	uxtb	r3, r0
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    8704:	ldr	r0, [pc, #180]	; (87bc <readMessages()+0xd0>)
    8706:	mov	r1, r3
    8708:	strb	r3, [r4, #0]
    870a:	bl	b604 <String::append(char)>
byte incomingByte;
String readBuffer;  

void readMessages(){
  if(Serial1.available()){
    while (Serial1.available()){
    870e:	ldr	r0, [pc, #164]	; (87b4 <readMessages()+0xc8>)
    8710:	bl	aef4 <HardwareSerial::available()>
    8714:	cmp	r0, #0
    8716:	bne.n	86fc <readMessages()+0x10>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
    8718:	ldr	r1, [pc, #160]	; (87bc <readMessages()+0xd0>)
    871a:	ldr	r0, [pc, #164]	; (87c0 <readMessages()+0xd4>)
    871c:	bl	ba58 <Print::print(String const&)>
    8720:	ldr	r0, [pc, #156]	; (87c0 <readMessages()+0xd4>)
    8722:	bl	baa4 <Print::println()>
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
    8726:	ldr	r1, [pc, #156]	; (87c4 <readMessages()+0xd8>)
    8728:	ldr	r0, [pc, #144]	; (87bc <readMessages()+0xd0>)
    872a:	bl	b624 <String::equals(char const*) const>
    872e:	cbz	r0, 875e <readMessages()+0x72>
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    8730:	ldr	r4, [pc, #148]	; (87c8 <readMessages()+0xdc>)
    8732:	ldr	r3, [r4, #0]
    8734:	adds	r3, #50	; 0x32
    8736:	cmp	r3, #89	; 0x59
    8738:	ble.n	87a6 <readMessages()+0xba>
    873a:	cmp	r3, #255	; 0xff
    873c:	it	ge
    873e:	movge	r3, #255	; 0xff
    8740:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    8742:	ldr	r0, [pc, #136]	; (87cc <readMessages()+0xe0>)
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    8744:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    8746:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    874a:	ldrb	r1, [r4, #0]
    874c:	ldr	r0, [pc, #128]	; (87d0 <readMessages()+0xe4>)
    874e:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      Serial.println("down");
    }


  }
  readBuffer = "";
    8752:	ldr	r1, [pc, #128]	; (87d4 <readMessages()+0xe8>)
    8754:	ldr	r0, [pc, #100]	; (87bc <readMessages()+0xd0>)
}
    8756:	ldmia.w	sp!, {r4, lr}
      Serial.println("down");
    }


  }
  readBuffer = "";
    875a:	b.w	b580 <String::operator=(char const*)>
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
    875e:	ldr	r1, [pc, #120]	; (87d8 <readMessages()+0xec>)
    8760:	ldr	r0, [pc, #88]	; (87bc <readMessages()+0xd0>)
    8762:	bl	b624 <String::equals(char const*) const>
    8766:	cmp	r0, #0
    8768:	beq.n	8752 <readMessages()+0x66>
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    876a:	ldr	r4, [pc, #92]	; (87c8 <readMessages()+0xdc>)
    876c:	ldr	r3, [r4, #0]
    876e:	subs	r3, #50	; 0x32
    8770:	cmp	r3, #89	; 0x59
    8772:	ble.n	87ac <readMessages()+0xc0>
    8774:	cmp	r3, #255	; 0xff
    8776:	it	ge
    8778:	movge	r3, #255	; 0xff
    877a:	uxtb	r1, r3
      matrix_A.setBrightness(bri_level);
    877c:	ldr	r0, [pc, #76]	; (87cc <readMessages()+0xe0>)
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    877e:	str	r3, [r4, #0]
      matrix_A.setBrightness(bri_level);
    8780:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
      matrix_B.setBrightness(bri_level);
    8784:	ldrb	r1, [r4, #0]
    8786:	ldr	r0, [pc, #72]	; (87d0 <readMessages()+0xe4>)
    8788:	bl	9b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    878c:	movs	r1, #4
    878e:	ldr	r0, [pc, #76]	; (87dc <readMessages()+0xf0>)
    8790:	bl	a0fc <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    8794:	ldr	r0, [pc, #40]	; (87c0 <readMessages()+0xd4>)
    8796:	bl	baa4 <Print::println()>
      Serial.println("down");
    }


  }
  readBuffer = "";
    879a:	ldr	r1, [pc, #56]	; (87d4 <readMessages()+0xe8>)
    879c:	ldr	r0, [pc, #28]	; (87bc <readMessages()+0xd0>)
}
    879e:	ldmia.w	sp!, {r4, lr}
      Serial.println("down");
    }


  }
  readBuffer = "";
    87a2:	b.w	b580 <String::operator=(char const*)>
    87a6:	movs	r1, #90	; 0x5a
      incomingByte = Serial1.read();
      readBuffer += char(incomingByte);
    }
    Serial.println(readBuffer);
    if (readBuffer.equals("incb")){
      bri_level = constrain(bri_level + 50, LOW_BRI, HIGH_BRI);
    87a8:	mov	r3, r1
    87aa:	b.n	8742 <readMessages()+0x56>
    87ac:	movs	r1, #90	; 0x5a
      matrix_A.setBrightness(bri_level);
      matrix_B.setBrightness(bri_level);
    } else if (readBuffer.equals("decb")){
      bri_level = constrain(bri_level - 50, LOW_BRI, HIGH_BRI);
    87ae:	mov	r3, r1
    87b0:	b.n	877c <readMessages()+0x90>
    87b2:	nop
    87b4:	.word	0x20000e7c
    87b8:	.word	0x2000175c
    87bc:	.word	0x200089b0
    87c0:	.word	0x20000ee0
    87c4:	.word	0x2000015c
    87c8:	.word	0x20000940
    87cc:	.word	0x20003bb0
    87d0:	.word	0x20003bc4
    87d4:	.word	0x20000168
    87d8:	.word	0x20000164
    87dc:	.word	0x2000016c

000087e0 <loop>:
  
}



void loop() {
    87e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87e4:	vpush	{d8-d9}
    87e8:	sub	sp, #44	; 0x2c
  readMessages();
    87ea:	bl	86ec <readMessages()>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    87ee:	ldr	r3, [pc, #768]	; (8af0 <loop+0x310>)
    87f0:	ldr	r0, [r3, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    87f2:	mov	r4, r3

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    87f4:	ldr	r1, [r3, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    87f6:	ldr	r2, [r4, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    87f8:	ldr	r3, [r4, #40]	; 0x28
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    87fa:	ldr	r7, [pc, #756]	; (8af0 <loop+0x310>)
    uint32_t lo2 = SNVS_HPRTCLR;
    if (lo1 == lo2 && hi1 == hi2) {
    87fc:	cmp	r3, r1
    87fe:	it	eq
    8800:	cmpeq	r2, r0
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8802:	mov	r0, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    8804:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    8806:	ite	eq
    8808:	moveq	r5, #1
    880a:	movne	r5, #0
    880c:	cmp	r5, #0
    880e:	beq.n	87f6 <loop+0x16>
  if(sinceBeam > BEAM_FREQUENCY_INTERVAL){
    8810:	lsrs	r1, r3, #5
	elapsedMillis(unsigned long val) { ms = rtcMillis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return  rtcMillis() - ms; }
    8812:	ldr	r6, [pc, #736]	; (8af4 <loop+0x314>)
    8814:	orr.w	r1, r1, r2, lsl #27
    8818:	ldr	r3, [r6, #0]
    881a:	vmov	s15, r1
    881e:	vldr	d5, [pc, #712]	; 8ae8 <loop+0x308>
    8822:	vcvt.f64.u32	d7, s15
    8826:	vdiv.f64	d6, d7, d5
    882a:	vcvt.u32.f64	s12, d6
    882e:	vmov	r2, s12
    8832:	subs	r3, r2, r3
    8834:	cmp.w	r3, #800	; 0x320
    8838:	bls.w	897c <loop+0x19c>
}

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
    883c:	ldr	r4, [r7, #36]	; 0x24
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    883e:	mov	r0, r7

static inline uint32_t rtcMillis(void) __attribute__((always_inline, unused));
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
    8840:	ldr	r1, [r7, #40]	; 0x28
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    8842:	ldr	r2, [r0, #36]	; 0x24
    uint32_t lo2 = SNVS_HPRTCLR;
    8844:	ldr	r3, [r0, #40]	; 0x28
    if (lo1 == lo2 && hi1 == hi2) {
    8846:	cmp	r3, r1
    8848:	it	eq
    884a:	cmpeq	r2, r4
static inline uint32_t rtcMillis(void)
{
  uint32_t hi1 = SNVS_HPRTCMR;
  uint32_t lo1 = SNVS_HPRTCLR;
  while (1) {
    uint32_t hi2 = SNVS_HPRTCMR;
    884c:	mov	r4, r2
    uint32_t lo2 = SNVS_HPRTCLR;
    884e:	mov	r1, r3
    if (lo1 == lo2 && hi1 == hi2) {
    8850:	ite	eq
    8852:	moveq	r5, #1
    8854:	movne	r5, #0
    8856:	cmp	r5, #0
    8858:	beq.n	8842 <loop+0x62>
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms =  rtcMillis() - val; return *this; }
    885a:	lsrs	r3, r3, #5
    sinceBeam = 0;
    newBeam(&synapse_B, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    885c:	movs	r0, #0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    885e:	mov.w	r9, #360	; 0x168
    8862:	movs	r1, #2
    8864:	orr.w	r3, r3, r2, lsl #27
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    8868:	mov	r7, r0
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    886a:	ldr.w	r8, [pc, #668]	; 8b08 <loop+0x328>
	HSB_color.s = s;
	HSB_color.b = b;
    886e:	mov.w	sl, #100	; 0x64
    8872:	vmov	s15, r3
	RGB_updated = false;
	HSB_updated = true;
    8876:	mov.w	fp, #1
    887a:	add	r5, sp, #32
    887c:	add	r4, sp, #24
    887e:	vcvt.f64.u32	d7, s15
    8882:	vldr	d5, [pc, #612]	; 8ae8 <loop+0x308>
    8886:	vdiv.f64	d6, d7, d5
    888a:	vcvt.u32.f64	s12, d6
    888e:	vstr	s12, [r6]
    8892:	bl	b7b4 <random(long, long)>
    8896:	mov	r1, r9
    8898:	mov	r6, r0
    889a:	mov	r0, r7
    889c:	bl	b7b4 <random(long, long)>
    88a0:	movs	r1, #101	; 0x65
    88a2:	str	r0, [sp, #20]
    88a4:	movs	r0, #80	; 0x50
    88a6:	bl	b7b4 <random(long, long)>
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    88aa:	ldr	r3, [sp, #20]
	HSB_color.s = s;
    88ac:	strb.w	r0, [sp, #32]
    88b0:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    88b2:	add.w	r2, r3, #720	; 0x2d0
    88b6:	movs	r0, #8
	HSB_color.s = s;
	HSB_color.b = b;
    88b8:	strb.w	sl, [sp, #33]	; 0x21
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    88bc:	lsrs	r3, r2, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    88be:	strb.w	r7, [sp, #36]	; 0x24
	HSB_updated = true;
    88c2:	strb.w	fp, [sp, #37]	; 0x25
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    88c6:	umull	lr, r3, r8, r3
    88ca:	lsrs	r3, r3, #2
    88cc:	mls	r3, r9, r3, r2
    88d0:	str	r3, [sp, #28]
    88d2:	bl	b7b4 <random(long, long)>
    88d6:	movw	r1, #6000	; 0x1770
    88da:	vmov	s16, r0
    88de:	mov.w	r0, #2000	; 0x7d0
    88e2:	bl	b7b4 <random(long, long)>
    88e6:	str	r0, [sp, #8]
    88e8:	vcvt.f32.s32	s0, s16
    88ec:	ldmia.w	r5, {r0, r1}
    88f0:	ldmia.w	r4, {r2, r3}
    88f4:	stmia.w	sp, {r0, r1}
    88f8:	subs	r1, r6, r7
    88fa:	ldr	r0, [pc, #508]	; (8af8 <loop+0x318>)
    88fc:	it	ne
    88fe:	movne	r1, #1
    8900:	bl	1d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
    newBeam(&synapse_A, random(0,2), Color(random(0,360), random(80, 101), 100, HSB_MODE),random(8,40),random(2000,6000));
    8904:	movs	r1, #2
    8906:	mov	r0, r7
    8908:	bl	b7b4 <random(long, long)>
    890c:	mov	r1, r9
    890e:	mov	r6, r0
    8910:	mov	r0, r7
    8912:	bl	b7b4 <random(long, long)>
    8916:	movs	r1, #101	; 0x65
    8918:	str	r0, [sp, #20]
    891a:	movs	r0, #80	; 0x50
    891c:	bl	b7b4 <random(long, long)>
    8920:	ldr	r3, [sp, #20]
	HSB_color.s = s;
    8922:	strb.w	r0, [sp, #32]
    8926:	movs	r1, #40	; 0x28
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    8928:	add.w	r3, r3, #720	; 0x2d0
    892c:	movs	r0, #8
	HSB_color.s = s;
	HSB_color.b = b;
    892e:	strb.w	sl, [sp, #33]	; 0x21
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    8932:	lsrs	r2, r3, #3
	HSB_color.s = s;
	HSB_color.b = b;
	RGB_updated = false;
    8934:	strb.w	r7, [sp, #36]	; 0x24
	HSB_updated = true;
    8938:	strb.w	fp, [sp, #37]	; 0x25
	RGB_updated = true;
	HSB_updated = false;
}

void setHSB(unsigned int h, byte s, byte b){
	HSB_color.h = (h+720)%360;
    893c:	umull	r2, r8, r8, r2
    8940:	mov.w	r8, r8, lsr #2
    8944:	mls	r3, r9, r8, r3
    8948:	str	r3, [sp, #28]
    894a:	bl	b7b4 <random(long, long)>
    894e:	movw	r1, #6000	; 0x1770
    8952:	vmov	s16, r0
    8956:	mov.w	r0, #2000	; 0x7d0
    895a:	bl	b7b4 <random(long, long)>
    895e:	str	r0, [sp, #8]
    8960:	vcvt.f32.s32	s0, s16
    8964:	ldmia.w	r5, {r0, r1}
    8968:	ldmia.w	r4, {r2, r3}
    896c:	stmia.w	sp, {r0, r1}
    8970:	subs	r1, r6, r7
    8972:	ldr	r0, [pc, #392]	; (8afc <loop+0x31c>)
    8974:	it	ne
    8976:	movne	r1, #1
    8978:	bl	1d8 <newBeam(Adafruit_NeoPixel*, bool, Color, float, int)>
	}


	
	void iterate_animation() {
		if (allZero(_grow_automaton)){
    897c:	ldr	r3, [pc, #384]	; (8b00 <loop+0x320>)
    897e:	ldr.w	r5, [r3, #416]	; 0x1a0
    8982:	add.w	r2, r5, #120	; 0x78
    8986:	addw	r1, r5, #2424	; 0x978
    898a:	sub.w	r3, r2, #96	; 0x60
    898e:	b.n	8996 <loop+0x1b6>
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    8990:	cmp	r2, r3
    8992:	beq.w	8aa6 <loop+0x2c6>
				if ((*automaton).cells[i][j] != 0){
    8996:	ldr.w	r0, [r3, #4]!
    899a:	cmp	r0, #0
    899c:	beq.n	8990 <loop+0x1b0>
		if (allZero(_grow_automaton)){
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			Serial.println("Restart");
		}

		if (allZero(_sat_automaton)){
    899e:	ldr	r3, [pc, #352]	; (8b00 <loop+0x320>)
    89a0:	ldr.w	r5, [r3, #420]	; 0x1a4
    89a4:	add.w	r2, r5, #120	; 0x78
    89a8:	addw	r1, r5, #2424	; 0x978
    89ac:	sub.w	r3, r2, #96	; 0x60
    89b0:	b.n	89b8 <loop+0x1d8>
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    89b2:	cmp	r3, r2
    89b4:	beq.w	8b0c <loop+0x32c>
				if ((*automaton).cells[i][j] != 0){
    89b8:	ldr.w	r0, [r3, #4]!
    89bc:	cmp	r0, #0
    89be:	beq.n	89b2 <loop+0x1d2>
		}

		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
		}
		if (newFrameReady) return;
    89c0:	ldr	r3, [pc, #316]	; (8b00 <loop+0x320>)
    89c2:	ldrb.w	r3, [r3, #436]	; 0x1b4
    89c6:	cbnz	r3, 89ce <loop+0x1ee>
    89c8:	ldr	r0, [pc, #308]	; (8b00 <loop+0x320>)
    89ca:	bl	f3c <Screen::iterate_animation() [clone .part.16]>
	}


	
	void iterate_animation() {
		if (allZero(_grow_automaton)){
    89ce:	ldr	r3, [pc, #308]	; (8b04 <loop+0x324>)
    89d0:	ldr.w	r5, [r3, #416]	; 0x1a0
    89d4:	add.w	r2, r5, #120	; 0x78
    89d8:	addw	r1, r5, #2424	; 0x978
    89dc:	sub.w	r3, r2, #96	; 0x60
    89e0:	b.n	89e6 <loop+0x206>
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    89e2:	cmp	r3, r2
    89e4:	beq.n	8a6a <loop+0x28a>
				if ((*automaton).cells[i][j] != 0){
    89e6:	ldr.w	r0, [r3, #4]!
    89ea:	cmp	r0, #0
    89ec:	beq.n	89e2 <loop+0x202>
		if (allZero(_grow_automaton)){
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			Serial.println("Restart");
		}

		if (allZero(_sat_automaton)){
    89ee:	ldr	r3, [pc, #276]	; (8b04 <loop+0x324>)
    89f0:	ldr.w	r5, [r3, #420]	; 0x1a4
    89f4:	add.w	r2, r5, #120	; 0x78
    89f8:	addw	r1, r5, #2424	; 0x978
    89fc:	sub.w	r3, r2, #96	; 0x60
    8a00:	b.n	8a06 <loop+0x226>
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
			for(int j = 0; j < SIZE_SCREEN; j++){
    8a02:	cmp	r3, r2
    8a04:	beq.n	8a2e <loop+0x24e>
				if ((*automaton).cells[i][j] != 0){
    8a06:	ldr.w	r0, [r3, #4]!
    8a0a:	cmp	r0, #0
    8a0c:	beq.n	8a02 <loop+0x222>
		}

		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
		}
		if (newFrameReady) return;
    8a0e:	ldr	r3, [pc, #244]	; (8b04 <loop+0x324>)
    8a10:	ldrb.w	r3, [r3, #436]	; 0x1b4
    8a14:	cbnz	r3, 8a1c <loop+0x23c>
    8a16:	ldr	r0, [pc, #236]	; (8b04 <loop+0x324>)
    8a18:	bl	f3c <Screen::iterate_animation() [clone .part.16]>


void renderInterrupt() {
 

  updateBeams();
    8a1c:	bl	4f0 <updateBeams()>

  screen_A.iterate_animation();
  screen_B.iterate_animation();
 
  renderInterrupt();
}
    8a20:	add	sp, #44	; 0x2c
    8a22:	vpop	{d8-d9}
    8a26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

void renderInterrupt() {
 

  updateBeams();
  updateScreensFade();
    8a2a:	b.w	a88 <updateScreensFade()>
    8a2e:	add.w	r2, r3, #96	; 0x60
		newFrameReady = true;
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    8a32:	cmp	r2, r1
    8a34:	bne.n	89fc <loop+0x21c>
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			Serial.println("Restart");
		}

		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    8a36:	movs	r1, #5
    8a38:	bl	b7b4 <random(long, long)>
    8a3c:	ldr	r3, [pc, #196]	; (8b04 <loop+0x324>)
    8a3e:	add.w	r0, r0, r0, lsl #1
    8a42:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    8a46:	ldr.w	r2, [r3, #348]	; 0x15c
    8a4a:	add.w	r3, r3, #348	; 0x15c
    8a4e:	subs	r2, #1
    8a50:	ldr	r6, [r3, #4]
    8a52:	ldrb.w	sl, [r3, #8]
    8a56:	cmp	r2, #4
    8a58:	bhi.w	95e6 <loop+0xe06>
    8a5c:	tbh	[pc, r2, lsl #1]
    8a60:	.word	0x01360171
    8a64:	.word	0x00b200e1
    8a68:	.short	0x0075
    8a6a:	add.w	r2, r3, #96	; 0x60
		newFrameReady = true;
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    8a6e:	cmp	r2, r1
    8a70:	bne.n	89dc <loop+0x1fc>


	
	void iterate_animation() {
		if (allZero(_grow_automaton)){
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    8a72:	movs	r1, #5
    8a74:	bl	b7b4 <random(long, long)>
    8a78:	ldr	r3, [pc, #136]	; (8b04 <loop+0x324>)
    8a7a:	add.w	r0, r0, r0, lsl #1
    8a7e:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    8a82:	ldr.w	r2, [r3, #348]	; 0x15c
    8a86:	add.w	r3, r3, #348	; 0x15c
    8a8a:	subs	r2, #1
    8a8c:	ldr	r6, [r3, #4]
    8a8e:	ldrb.w	sl, [r3, #8]
    8a92:	cmp	r2, #4
    8a94:	bhi.w	94ac <loop+0xccc>
    8a98:	tbh	[pc, r2, lsl #1]
    8a9c:	.word	0x0223025e
    8aa0:	.word	0x019a01ce
    8aa4:	.short	0x017f
    8aa6:	adds	r2, #96	; 0x60
		newFrameReady = true;
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    8aa8:	cmp	r2, r1
    8aaa:	bne.w	898a <loop+0x1aa>


	
	void iterate_animation() {
		if (allZero(_grow_automaton)){
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
    8aae:	movs	r1, #5
    8ab0:	bl	b7b4 <random(long, long)>
    8ab4:	ldr	r3, [pc, #72]	; (8b00 <loop+0x320>)
    8ab6:	add.w	r0, r0, r0, lsl #1
    8aba:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    8abe:	ldr.w	r2, [r3, #348]	; 0x15c
    8ac2:	add.w	r3, r3, #348	; 0x15c
    8ac6:	subs	r2, #1
    8ac8:	ldr	r6, [r3, #4]
    8aca:	ldrb.w	sl, [r3, #8]
    8ace:	cmp	r2, #4
    8ad0:	bhi.w	9514 <loop+0xd34>
    8ad4:	tbh	[pc, r2, lsl #1]
    8ad8:	.word	0x046102b4
    8adc:	.word	0x0287040c
    8ae0:	.short	0x026c
    8ae2:	nop
    8ae4:	nop.w
    8ae8:	.word	0xd2f1a9fc
    8aec:	.word	0x3ff0624d
    8af0:	.word	0x400d4000
    8af4:	.word	0x20001760
    8af8:	.word	0x200089d4
    8afc:	.word	0x200089c0
    8b00:	.word	0x20004dd8
    8b04:	.word	0x20004fb0
    8b08:	.word	0x16c16c17
    8b0c:	add.w	r2, r3, #96	; 0x60
		newFrameReady = true;
    //Serial.println("newFrameReady");
	}

	bool allZero(Automaton * automaton){
		for (int i = 0; i< SIZE_SCREEN; i++){
    8b10:	cmp	r2, r1
    8b12:	bne.w	89ac <loop+0x1cc>
			initialize_seed(_grow_automaton, bri_seeds[random(0, 5)]);
			Serial.println("Restart");
		}

		if (allZero(_sat_automaton)){
			initialize_seed(_sat_automaton, bri_seeds[random(0, 5)]);
    8b16:	movs	r1, #5
    8b18:	bl	b7b4 <random(long, long)>
    8b1c:	ldr	r3, [pc, #780]	; (8e2c <loop+0x64c>)
    8b1e:	add.w	r0, r0, r0, lsl #1
    8b22:	add.w	r3, r3, r0, lsl #2
	void initialize_automaton(Automaton * automaton, AutomatonValues * val, bool bg){
		*automaton = Automaton((*val).target, (*val).penalty, (*val).reward, (*val).floorInit, (*val).minInit, (*val).maxInit, bg, *_mask, *_bg_mask);
	}

	void initialize_seed(Automaton * automaton, Seed init_seed){
		switch (init_seed.seed){
    8b26:	ldr.w	r2, [r3, #348]	; 0x15c
    8b2a:	add.w	r3, r3, #348	; 0x15c
    8b2e:	subs	r2, #1
    8b30:	ldr	r6, [r3, #4]
    8b32:	ldrb.w	sl, [r3, #8]
    8b36:	cmp	r2, #4
    8b38:	bhi.w	957c <loop+0xd9c>
    8b3c:	tbh	[pc, r2, lsl #1]
    8b40:	.word	0x036c03a8
    8b44:	.word	0x02e70316
    8b48:	.short	0x02aa
    8b4a:	add.w	r6, r5, #28
    8b4e:	mov	r4, r5
    8b50:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    8b54:	cmp.w	sl, #0
    8b58:	bne.n	8b76 <loop+0x396>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    8b5a:	ldr	r3, [r5, #0]
    8b5c:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    8b5e:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    8b62:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    8b64:	str	r3, [r4, #120]	; 0x78
    8b66:	adds	r4, #96	; 0x60
    8b68:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    8b6a:	cmp	r4, r7
    8b6c:	beq.w	8a0e <loop+0x22e>
    if (rand){
    8b70:	cmp.w	sl, #0
    8b74:	beq.n	8b5a <loop+0x37a>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8b76:	ldr	r3, [r5, #20]
    8b78:	ldr	r2, [r5, #16]
    8b7a:	subs	r0, r3, r2
    8b7c:	adds	r0, #2
    8b7e:	bl	b7ac <random(unsigned long)>
    8b82:	ldr	r1, [r5, #16]
    8b84:	subs	r2, r1, #1
    8b86:	add	r0, r2
    8b88:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8b8a:	ldr	r3, [r5, #20]
    8b8c:	subs	r0, r3, r1
    8b8e:	adds	r0, #2
    8b90:	bl	b7ac <random(unsigned long)>
    8b94:	ldr	r1, [r5, #16]
    8b96:	subs	r2, r1, #1
    8b98:	add	r0, r2
    8b9a:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8b9e:	ldr	r3, [r5, #20]
    8ba0:	subs	r0, r3, r1
    8ba2:	adds	r0, #2
    8ba4:	bl	b7ac <random(unsigned long)>
    8ba8:	ldr	r1, [r5, #16]
    8baa:	subs	r2, r1, #1
    8bac:	add	r0, r2
    8bae:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8bb0:	ldr	r3, [r5, #20]
    8bb2:	subs	r0, r3, r1
    8bb4:	adds	r0, #2
    8bb6:	bl	b7ac <random(unsigned long)>
    8bba:	ldr	r3, [r5, #16]
    8bbc:	subs	r3, #1
    8bbe:	add	r0, r3
    8bc0:	str	r0, [r4, #120]	; 0x78
    8bc2:	b.n	8b66 <loop+0x386>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8bc4:	cmp	r6, #0
    8bc6:	ble.w	8a0e <loop+0x22e>
    8bca:	movs	r7, #0
    8bcc:	b.n	8be2 <loop+0x402>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    8bce:	add.w	r3, r4, r3, lsl #3
    8bd2:	ldr	r2, [r5, #0]
    8bd4:	add.w	r3, r5, r3, lsl #2
    8bd8:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8bda:	adds	r7, #1
    8bdc:	cmp	r7, r6
    8bde:	beq.w	8a0e <loop+0x22e>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8be2:	movs	r0, #8
    8be4:	bl	b7ac <random(unsigned long)>
    8be8:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8bec:	movs	r0, #8
    8bee:	bl	b7ac <random(unsigned long)>
    8bf2:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    8bf6:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    8bfa:	cmp.w	sl, #0
    8bfe:	beq.n	8bce <loop+0x3ee>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    8c00:	ldr	r3, [r5, #20]
    8c02:	add.w	r8, r8, r8, lsl #1
    8c06:	ldr	r2, [r5, #16]
    8c08:	add.w	r4, r4, r8, lsl #3
    8c0c:	subs	r0, r3, r2
    8c0e:	add.w	r4, r5, r4, lsl #2
    8c12:	adds	r0, #2
    8c14:	bl	b7ac <random(unsigned long)>
    8c18:	ldr	r3, [r5, #16]
    8c1a:	subs	r3, #1
    8c1c:	add	r0, r3
    8c1e:	str	r0, [r4, #28]
    8c20:	b.n	8bda <loop+0x3fa>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8c22:	movs	r0, #8
    8c24:	mov	r7, r5
    8c26:	bl	b7ac <random(unsigned long)>
    8c2a:	add.w	r3, r5, #96	; 0x60
    8c2e:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8c30:	movs	r0, #8
    8c32:	mov	fp, r3
    8c34:	bl	b7ac <random(unsigned long)>
    8c38:	vmov	s15, r6
    8c3c:	adds	r4, #8
    8c3e:	add.w	r3, r0, #8
    8c42:	rsb	r9, r0, #16
    8c46:	vcvt.f64.s32	d9, s15
    8c4a:	rsb	r8, r4, #0
    8c4e:	negs	r3, r3
    8c50:	str	r3, [sp, #20]
    8c52:	vmov	s15, r8
    8c56:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    8c58:	mov	r6, r7
    8c5a:	vcvt.f64.s32	d8, s15
    8c5e:	vmul.f64	d8, d8, d8
    8c62:	b.n	8c70 <loop+0x490>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    8c64:	ldr	r3, [r5, #0]
    8c66:	str	r3, [r6, #28]
    8c68:	adds	r4, #1
    8c6a:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8c6c:	cmp	r9, r4
    8c6e:	beq.n	8cc0 <loop+0x4e0>
      double xx = x-midPoint_y;
    8c70:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    8c74:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    8c78:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    8c7c:	vfma.f64	d0, d7, d7
    8c80:	vsqrt.f64	d7, d0
    8c84:	vcmp.f64	d7, d7
    8c88:	vmrs	APSR_nzcv, fpscr
    8c8c:	bne.w	96d2 <loop+0xef2>
    8c90:	vcmpe.f64	d7, d9
    8c94:	vmrs	APSR_nzcv, fpscr
    8c98:	bhi.n	8c68 <loop+0x488>
        if (rand){
    8c9a:	cmp.w	sl, #0
    8c9e:	beq.n	8c64 <loop+0x484>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8ca0:	ldr	r3, [r5, #20]
    8ca2:	adds	r4, #1
    8ca4:	ldr	r0, [r5, #16]
    8ca6:	adds	r6, #96	; 0x60
    8ca8:	subs	r0, r3, r0
    8caa:	adds	r0, #2
    8cac:	bl	b7ac <random(unsigned long)>
    8cb0:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8cb2:	cmp	r9, r4
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8cb4:	add.w	r3, r3, #4294967295
    8cb8:	add	r0, r3
    8cba:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8cbe:	bne.n	8c70 <loop+0x490>
    8cc0:	adds	r7, #4
    8cc2:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    8cc6:	cmp	r7, fp
    8cc8:	bne.n	8c52 <loop+0x472>
    8cca:	b.n	8a0e <loop+0x22e>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8ccc:	movs	r0, #8
    8cce:	bl	b7ac <random(unsigned long)>
    8cd2:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8cd6:	movs	r0, #8
    8cd8:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8cdc:	cmp	r6, #0
    8cde:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8ce0:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8ce4:	it	lt
    8ce6:	addlt	r3, r6, #1
    8ce8:	cmp	r6, #0
    8cea:	mov.w	r3, r3, asr #1
    8cee:	it	lt
    8cf0:	addlt	r6, #1
    8cf2:	negs	r3, r3
    8cf4:	asrs	r6, r6, #1
    8cf6:	adds	r7, r0, r3
    8cf8:	adds	r2, r0, r6
    8cfa:	cmp	r7, r2
    8cfc:	str	r2, [sp, #20]
    8cfe:	bge.w	8a0e <loop+0x22e>
    8d02:	adds	r3, r4, r3
    8d04:	add	r4, r6
    8d06:	add.w	r6, r3, r3, lsl #1
    8d0a:	mov	fp, r3
    8d0c:	add.w	r6, r7, r6, lsl #3
    8d10:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    8d14:	cmp	r4, fp
    8d16:	ble.n	8d36 <loop+0x556>
    8d18:	mov	r9, r6
    8d1a:	mov	r8, fp
        if (rand){
    8d1c:	cmp.w	sl, #0
    8d20:	bne.w	9668 <loop+0xe88>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    8d24:	ldr	r3, [r5, #0]
    8d26:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    8d2a:	add.w	r8, r8, #1
    8d2e:	add.w	r9, r9, #96	; 0x60
    8d32:	cmp	r8, r4
    8d34:	bne.n	8d1c <loop+0x53c>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8d36:	adds	r7, #1
    8d38:	ldr	r3, [sp, #20]
    8d3a:	adds	r6, #4
    8d3c:	cmp	r7, r3
    8d3e:	bne.n	8d14 <loop+0x534>
    8d40:	b.n	8a0e <loop+0x22e>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8d42:	movs	r0, #8
    8d44:	bl	b7ac <random(unsigned long)>
    8d48:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8d4c:	movs	r0, #8
    8d4e:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    8d52:	cmp	r6, #0
    8d54:	ble.w	8a0e <loop+0x22e>
    8d58:	add.w	r4, r4, r4, lsl #1
    8d5c:	add.w	r3, r0, #15
    8d60:	movs	r7, #0
    8d62:	add.w	r4, r3, r4, lsl #3
    8d66:	add.w	r4, r5, r4, lsl #2
      if (rand){
    8d6a:	cmp.w	sl, #0
    8d6e:	bne.n	8d84 <loop+0x5a4>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    8d70:	ldr	r3, [r5, #0]
    8d72:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    8d74:	adds	r7, #1
    8d76:	adds	r4, #4
    8d78:	cmp	r7, r6
    8d7a:	beq.w	8a0e <loop+0x22e>
      if (rand){
    8d7e:	cmp.w	sl, #0
    8d82:	beq.n	8d70 <loop+0x590>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8d84:	ldr	r3, [r5, #20]
    8d86:	ldr	r2, [r5, #16]
    8d88:	subs	r0, r3, r2
    8d8a:	adds	r0, #2
    8d8c:	bl	b7ac <random(unsigned long)>
    8d90:	ldr	r3, [r5, #16]
    8d92:	subs	r3, #1
    8d94:	add	r0, r3
    8d96:	str	r0, [r4, #0]
    8d98:	b.n	8d74 <loop+0x594>
    8d9a:	add.w	r6, r5, #28
    8d9e:	mov	r4, r5
    8da0:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    8da4:	cmp.w	sl, #0
    8da8:	bne.w	945e <loop+0xc7e>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    8dac:	ldr	r3, [r5, #0]
    8dae:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    8db0:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    8db4:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    8db6:	str	r3, [r4, #120]	; 0x78
    8db8:	adds	r4, #96	; 0x60
    8dba:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    8dbc:	cmp	r4, r7
    8dbe:	bne.n	8da4 <loop+0x5c4>
    8dc0:	movs	r1, #7
    8dc2:	ldr	r0, [pc, #108]	; (8e30 <loop+0x650>)
    8dc4:	bl	a0fc <usb_serial_write>
    8dc8:	ldr	r0, [pc, #104]	; (8e34 <loop+0x654>)
    8dca:	bl	baa4 <Print::println()>
    8dce:	b.n	89ee <loop+0x20e>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8dd0:	cmp	r6, #0
    8dd2:	ble.n	8dc0 <loop+0x5e0>
    8dd4:	movs	r7, #0
    8dd6:	b.n	8dea <loop+0x60a>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    8dd8:	add.w	r3, r4, r3, lsl #3
    8ddc:	ldr	r2, [r5, #0]
    8dde:	add.w	r3, r5, r3, lsl #2
    8de2:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8de4:	adds	r7, #1
    8de6:	cmp	r7, r6
    8de8:	beq.n	8dc0 <loop+0x5e0>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8dea:	movs	r0, #8
    8dec:	bl	b7ac <random(unsigned long)>
    8df0:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8df4:	movs	r0, #8
    8df6:	bl	b7ac <random(unsigned long)>
    8dfa:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    8dfe:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    8e02:	cmp.w	sl, #0
    8e06:	beq.n	8dd8 <loop+0x5f8>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    8e08:	ldr	r3, [r5, #20]
    8e0a:	add.w	r8, r8, r8, lsl #1
    8e0e:	ldr	r2, [r5, #16]
    8e10:	add.w	r4, r4, r8, lsl #3
    8e14:	subs	r0, r3, r2
    8e16:	add.w	r4, r5, r4, lsl #2
    8e1a:	adds	r0, #2
    8e1c:	bl	b7ac <random(unsigned long)>
    8e20:	ldr	r3, [r5, #16]
    8e22:	subs	r3, #1
    8e24:	add	r0, r3
    8e26:	str	r0, [r4, #28]
    8e28:	b.n	8de4 <loop+0x604>
    8e2a:	nop
    8e2c:	.word	0x20004dd8
    8e30:	.word	0x20000174
    8e34:	.word	0x20000ee0
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8e38:	movs	r0, #8
    8e3a:	mov	r7, r5
    8e3c:	bl	b7ac <random(unsigned long)>
    8e40:	add.w	r3, r5, #96	; 0x60
    8e44:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8e46:	movs	r0, #8
    8e48:	mov	fp, r3
    8e4a:	bl	b7ac <random(unsigned long)>
    8e4e:	vmov	s15, r6
    8e52:	adds	r4, #8
    8e54:	add.w	r3, r0, #8
    8e58:	rsb	r9, r0, #16
    8e5c:	vcvt.f64.s32	d9, s15
    8e60:	rsb	r8, r4, #0
    8e64:	negs	r3, r3
    8e66:	str	r3, [sp, #20]
    8e68:	vmov	s15, r8
    8e6c:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    8e6e:	mov	r6, r7
    8e70:	vcvt.f64.s32	d8, s15
    8e74:	vmul.f64	d8, d8, d8
    8e78:	b.n	8e86 <loop+0x6a6>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    8e7a:	ldr	r3, [r5, #0]
    8e7c:	str	r3, [r6, #28]
    8e7e:	adds	r4, #1
    8e80:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8e82:	cmp	r4, r9
    8e84:	beq.n	8ed6 <loop+0x6f6>
      double xx = x-midPoint_y;
    8e86:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    8e8a:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    8e8e:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    8e92:	vfma.f64	d0, d7, d7
    8e96:	vsqrt.f64	d7, d0
    8e9a:	vcmp.f64	d7, d7
    8e9e:	vmrs	APSR_nzcv, fpscr
    8ea2:	bne.w	96bc <loop+0xedc>
    8ea6:	vcmpe.f64	d7, d9
    8eaa:	vmrs	APSR_nzcv, fpscr
    8eae:	bhi.n	8e7e <loop+0x69e>
        if (rand){
    8eb0:	cmp.w	sl, #0
    8eb4:	beq.n	8e7a <loop+0x69a>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8eb6:	ldr	r3, [r5, #20]
    8eb8:	adds	r4, #1
    8eba:	ldr	r0, [r5, #16]
    8ebc:	adds	r6, #96	; 0x60
    8ebe:	subs	r0, r3, r0
    8ec0:	adds	r0, #2
    8ec2:	bl	b7ac <random(unsigned long)>
    8ec6:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8ec8:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8eca:	add.w	r3, r3, #4294967295
    8ece:	add	r0, r3
    8ed0:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    8ed4:	bne.n	8e86 <loop+0x6a6>
    8ed6:	adds	r7, #4
    8ed8:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    8edc:	cmp	r7, fp
    8ede:	bne.n	8e68 <loop+0x688>
    8ee0:	b.n	8dc0 <loop+0x5e0>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8ee2:	movs	r0, #8
    8ee4:	bl	b7ac <random(unsigned long)>
    8ee8:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8eec:	movs	r0, #8
    8eee:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8ef2:	cmp	r6, #0
    8ef4:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8ef6:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8efa:	it	lt
    8efc:	addlt	r3, r6, #1
    8efe:	cmp	r6, #0
    8f00:	mov.w	r3, r3, asr #1
    8f04:	it	lt
    8f06:	addlt	r6, #1
    8f08:	negs	r3, r3
    8f0a:	asrs	r6, r6, #1
    8f0c:	adds	r7, r0, r3
    8f0e:	adds	r2, r0, r6
    8f10:	cmp	r7, r2
    8f12:	str	r2, [sp, #20]
    8f14:	bge.w	8dc0 <loop+0x5e0>
    8f18:	adds	r3, r4, r3
    8f1a:	add	r4, r6
    8f1c:	add.w	r6, r3, r3, lsl #1
    8f20:	mov	fp, r3
    8f22:	add.w	r6, r7, r6, lsl #3
    8f26:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    8f2a:	cmp	fp, r4
    8f2c:	bge.n	8f4c <loop+0x76c>
    8f2e:	mov	r9, r6
    8f30:	mov	r8, fp
        if (rand){
    8f32:	cmp.w	sl, #0
    8f36:	bne.w	9682 <loop+0xea2>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    8f3a:	ldr	r3, [r5, #0]
    8f3c:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    8f40:	add.w	r8, r8, #1
    8f44:	add.w	r9, r9, #96	; 0x60
    8f48:	cmp	r8, r4
    8f4a:	bne.n	8f32 <loop+0x752>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    8f4c:	adds	r7, #1
    8f4e:	ldr	r3, [sp, #20]
    8f50:	adds	r6, #4
    8f52:	cmp	r7, r3
    8f54:	bne.n	8f2a <loop+0x74a>
    8f56:	b.n	8dc0 <loop+0x5e0>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8f58:	movs	r0, #8
    8f5a:	bl	b7ac <random(unsigned long)>
    8f5e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    8f62:	movs	r0, #8
    8f64:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    8f68:	cmp	r6, #0
    8f6a:	ble.w	8dc0 <loop+0x5e0>
    8f6e:	add.w	r3, r0, #15
    8f72:	add.w	r4, r4, r4, lsl #1
    8f76:	movs	r7, #0
    8f78:	add.w	r4, r3, r4, lsl #3
    8f7c:	add.w	r4, r5, r4, lsl #2
      if (rand){
    8f80:	cmp.w	sl, #0
    8f84:	bne.n	8f9a <loop+0x7ba>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    8f86:	ldr	r3, [r5, #0]
    8f88:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    8f8a:	adds	r7, #1
    8f8c:	adds	r4, #4
    8f8e:	cmp	r7, r6
    8f90:	beq.w	8dc0 <loop+0x5e0>
      if (rand){
    8f94:	cmp.w	sl, #0
    8f98:	beq.n	8f86 <loop+0x7a6>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    8f9a:	ldr	r3, [r5, #20]
    8f9c:	ldr	r2, [r5, #16]
    8f9e:	subs	r0, r3, r2
    8fa0:	adds	r0, #2
    8fa2:	bl	b7ac <random(unsigned long)>
    8fa6:	ldr	r3, [r5, #16]
    8fa8:	subs	r3, #1
    8faa:	add	r0, r3
    8fac:	str	r0, [r4, #0]
    8fae:	b.n	8f8a <loop+0x7aa>
    8fb0:	add.w	r6, r5, #28
    8fb4:	mov	r4, r5
    8fb6:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    8fba:	cmp.w	sl, #0
    8fbe:	bne.w	9410 <loop+0xc30>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    8fc2:	ldr	r3, [r5, #0]
    8fc4:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    8fc6:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    8fca:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    8fcc:	str	r3, [r4, #120]	; 0x78
    8fce:	adds	r4, #96	; 0x60
    8fd0:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    8fd2:	cmp	r4, r7
    8fd4:	bne.n	8fba <loop+0x7da>
    8fd6:	movs	r1, #7
    8fd8:	ldr	r0, [pc, #780]	; (92e8 <loop+0xb08>)
    8fda:	bl	a0fc <usb_serial_write>
    8fde:	ldr	r0, [pc, #780]	; (92ec <loop+0xb0c>)
    8fe0:	bl	baa4 <Print::println()>
    8fe4:	b.n	899e <loop+0x1be>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8fe6:	cmp	r6, #0
    8fe8:	ble.n	8fd6 <loop+0x7f6>
    8fea:	movs	r7, #0
    8fec:	b.n	9000 <loop+0x820>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    8fee:	add.w	r3, r4, r3, lsl #3
    8ff2:	ldr	r2, [r5, #0]
    8ff4:	add.w	r3, r5, r3, lsl #2
    8ff8:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    8ffa:	adds	r7, #1
    8ffc:	cmp	r7, r6
    8ffe:	beq.n	8fd6 <loop+0x7f6>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9000:	movs	r0, #8
    9002:	bl	b7ac <random(unsigned long)>
    9006:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    900a:	movs	r0, #8
    900c:	bl	b7ac <random(unsigned long)>
    9010:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    9014:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    9018:	cmp.w	sl, #0
    901c:	beq.n	8fee <loop+0x80e>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    901e:	ldr	r3, [r5, #20]
    9020:	add.w	r8, r8, r8, lsl #1
    9024:	ldr	r2, [r5, #16]
    9026:	add.w	r4, r4, r8, lsl #3
    902a:	subs	r0, r3, r2
    902c:	add.w	r4, r5, r4, lsl #2
    9030:	adds	r0, #2
    9032:	bl	b7ac <random(unsigned long)>
    9036:	ldr	r3, [r5, #16]
    9038:	subs	r3, #1
    903a:	add	r0, r3
    903c:	str	r0, [r4, #28]
    903e:	b.n	8ffa <loop+0x81a>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9040:	movs	r0, #8
    9042:	bl	b7ac <random(unsigned long)>
    9046:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    904a:	movs	r0, #8
    904c:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    9050:	cmp	r6, #0
    9052:	ble.n	8fd6 <loop+0x7f6>
    9054:	add.w	r3, r0, #15
    9058:	add.w	r4, r4, r4, lsl #1
    905c:	movs	r7, #0
    905e:	add.w	r4, r3, r4, lsl #3
    9062:	add.w	r4, r5, r4, lsl #2
      if (rand){
    9066:	cmp.w	sl, #0
    906a:	bne.n	907e <loop+0x89e>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    906c:	ldr	r3, [r5, #0]
    906e:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    9070:	adds	r7, #1
    9072:	adds	r4, #4
    9074:	cmp	r7, r6
    9076:	beq.n	8fd6 <loop+0x7f6>
      if (rand){
    9078:	cmp.w	sl, #0
    907c:	beq.n	906c <loop+0x88c>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    907e:	ldr	r3, [r5, #20]
    9080:	ldr	r2, [r5, #16]
    9082:	subs	r0, r3, r2
    9084:	adds	r0, #2
    9086:	bl	b7ac <random(unsigned long)>
    908a:	ldr	r3, [r5, #16]
    908c:	subs	r3, #1
    908e:	add	r0, r3
    9090:	str	r0, [r4, #0]
    9092:	b.n	9070 <loop+0x890>
    9094:	add.w	r6, r5, #28
    9098:	mov	r4, r5
    909a:	add.w	r7, r5, #2304	; 0x900
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
    909e:	cmp.w	sl, #0
    90a2:	bne.n	90c0 <loop+0x8e0>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    } else {
      cells[0][i] = _target;
    90a4:	ldr	r3, [r5, #0]
    90a6:	str	r3, [r6, #0]
      cells[SIZE_SCREEN-1][i] = _target;
    90a8:	str.w	r3, [r6, #2208]	; 0x8a0
      cells[i][0] = _target;
    90ac:	str	r3, [r4, #28]
      cells[i][SIZE_SCREEN-1] = _target;
    90ae:	str	r3, [r4, #120]	; 0x78
    90b0:	adds	r4, #96	; 0x60
    90b2:	adds	r6, #4
    }
  }
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    90b4:	cmp	r4, r7
    90b6:	beq.w	89c0 <loop+0x1e0>
    if (rand){
    90ba:	cmp.w	sl, #0
    90be:	beq.n	90a4 <loop+0x8c4>
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    90c0:	ldr	r3, [r5, #20]
    90c2:	ldr	r2, [r5, #16]
    90c4:	subs	r0, r3, r2
    90c6:	adds	r0, #2
    90c8:	bl	b7ac <random(unsigned long)>
    90cc:	ldr	r1, [r5, #16]
    90ce:	subs	r2, r1, #1
    90d0:	add	r0, r2
    90d2:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    90d4:	ldr	r3, [r5, #20]
    90d6:	subs	r0, r3, r1
    90d8:	adds	r0, #2
    90da:	bl	b7ac <random(unsigned long)>
    90de:	ldr	r1, [r5, #16]
    90e0:	subs	r2, r1, #1
    90e2:	add	r0, r2
    90e4:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    90e8:	ldr	r3, [r5, #20]
    90ea:	subs	r0, r3, r1
    90ec:	adds	r0, #2
    90ee:	bl	b7ac <random(unsigned long)>
    90f2:	ldr	r1, [r5, #16]
    90f4:	subs	r2, r1, #1
    90f6:	add	r0, r2
    90f8:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    90fa:	ldr	r3, [r5, #20]
    90fc:	subs	r0, r3, r1
    90fe:	adds	r0, #2
    9100:	bl	b7ac <random(unsigned long)>
    9104:	ldr	r3, [r5, #16]
    9106:	subs	r3, #1
    9108:	add	r0, r3
    910a:	str	r0, [r4, #120]	; 0x78
    910c:	b.n	90b0 <loop+0x8d0>
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    910e:	cmp	r6, #0
    9110:	ble.w	89c0 <loop+0x1e0>
    9114:	movs	r7, #0
    9116:	b.n	912c <loop+0x94c>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    9118:	add.w	r3, r4, r3, lsl #3
    911c:	ldr	r2, [r5, #0]
    911e:	add.w	r3, r5, r3, lsl #2
    9122:	str	r2, [r3, #28]
    }
  }

  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
    9124:	adds	r7, #1
    9126:	cmp	r7, r6
    9128:	beq.w	89c0 <loop+0x1e0>
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    912c:	movs	r0, #8
    912e:	bl	b7ac <random(unsigned long)>
    9132:	add.w	r8, r0, #8
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9136:	movs	r0, #8
    9138:	bl	b7ac <random(unsigned long)>
    913c:	add.w	r4, r0, #8
      if(rand){
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
      } else {
        cells[cx][cy] = _target;
    9140:	add.w	r3, r8, r8, lsl #1
  void init_multiple(int num, bool rand){
    int cx, cy;
    for(int k = 0; k < num; k++){
      cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
      if(rand){
    9144:	cmp.w	sl, #0
    9148:	beq.n	9118 <loop+0x938>
        cells[cx][cy] = int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    914a:	ldr	r3, [r5, #20]
    914c:	add.w	r8, r8, r8, lsl #1
    9150:	ldr	r2, [r5, #16]
    9152:	add.w	r4, r4, r8, lsl #3
    9156:	subs	r0, r3, r2
    9158:	add.w	r4, r5, r4, lsl #2
    915c:	adds	r0, #2
    915e:	bl	b7ac <random(unsigned long)>
    9162:	ldr	r3, [r5, #16]
    9164:	subs	r3, #1
    9166:	add	r0, r3
    9168:	str	r0, [r4, #28]
    916a:	b.n	9124 <loop+0x944>
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    916c:	movs	r0, #8
    916e:	mov	r7, r5
    9170:	bl	b7ac <random(unsigned long)>
    9174:	add.w	r3, r5, #96	; 0x60
    9178:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    917a:	movs	r0, #8
    917c:	mov	fp, r3
    917e:	bl	b7ac <random(unsigned long)>
    9182:	vmov	s15, r6
    9186:	adds	r4, #8
    9188:	add.w	r3, r0, #8
    918c:	rsb	r9, r0, #16
    9190:	vcvt.f64.s32	d9, s15
    9194:	rsb	r8, r4, #0
    9198:	negs	r3, r3
    919a:	str	r3, [sp, #20]
    919c:	vmov	s15, r8
    91a0:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    91a2:	mov	r6, r7
    91a4:	vcvt.f64.s32	d8, s15
    91a8:	vmul.f64	d8, d8, d8
    91ac:	b.n	91ba <loop+0x9da>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    91ae:	ldr	r3, [r5, #0]
    91b0:	str	r3, [r6, #28]
    91b2:	adds	r4, #1
    91b4:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    91b6:	cmp	r4, r9
    91b8:	beq.n	920a <loop+0xa2a>
      double xx = x-midPoint_y;
    91ba:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    91be:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    91c2:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    91c6:	vfma.f64	d0, d7, d7
    91ca:	vsqrt.f64	d7, d0
    91ce:	vcmp.f64	d7, d7
    91d2:	vmrs	APSR_nzcv, fpscr
    91d6:	bne.w	96b2 <loop+0xed2>
    91da:	vcmpe.f64	d7, d9
    91de:	vmrs	APSR_nzcv, fpscr
    91e2:	bhi.n	91b2 <loop+0x9d2>
        if (rand){
    91e4:	cmp.w	sl, #0
    91e8:	beq.n	91ae <loop+0x9ce>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    91ea:	ldr	r3, [r5, #20]
    91ec:	adds	r4, #1
    91ee:	ldr	r0, [r5, #16]
    91f0:	adds	r6, #96	; 0x60
    91f2:	subs	r0, r3, r0
    91f4:	adds	r0, #2
    91f6:	bl	b7ac <random(unsigned long)>
    91fa:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    91fc:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    91fe:	add.w	r3, r3, #4294967295
    9202:	add	r0, r3
    9204:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    9208:	bne.n	91ba <loop+0x9da>
    920a:	adds	r7, #4
    920c:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    9210:	cmp	r7, fp
    9212:	bne.n	919c <loop+0x9bc>
    9214:	b.w	89c0 <loop+0x1e0>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9218:	movs	r0, #8
    921a:	bl	b7ac <random(unsigned long)>
    921e:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9222:	movs	r0, #8
    9224:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    9228:	cmp	r6, #0
    922a:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    922c:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    9230:	it	lt
    9232:	addlt	r3, r6, #1
    9234:	cmp	r6, #0
    9236:	mov.w	r3, r3, asr #1
    923a:	it	lt
    923c:	addlt	r6, #1
    923e:	negs	r3, r3
    9240:	asrs	r6, r6, #1
    9242:	adds	r7, r0, r3
    9244:	adds	r2, r0, r6
    9246:	cmp	r7, r2
    9248:	str	r2, [sp, #20]
    924a:	bge.w	89c0 <loop+0x1e0>
    924e:	adds	r3, r4, r3
    9250:	add	r4, r6
    9252:	add.w	r6, r3, r3, lsl #1
    9256:	mov	fp, r3
    9258:	add.w	r6, r7, r6, lsl #3
    925c:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    9260:	cmp	r4, fp
    9262:	ble.n	9282 <loop+0xaa2>
    9264:	mov	r9, r6
    9266:	mov	r8, fp
        if (rand){
    9268:	cmp.w	sl, #0
    926c:	bne.w	969a <loop+0xeba>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    9270:	ldr	r3, [r5, #0]
    9272:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    9276:	add.w	r8, r8, #1
    927a:	add.w	r9, r9, #96	; 0x60
    927e:	cmp	r8, r4
    9280:	bne.n	9268 <loop+0xa88>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    9282:	adds	r7, #1
    9284:	ldr	r3, [sp, #20]
    9286:	adds	r6, #4
    9288:	cmp	r7, r3
    928a:	bne.n	9260 <loop+0xa80>
    928c:	b.w	89c0 <loop+0x1e0>
    }
  }

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    9290:	movs	r0, #8
    9292:	bl	b7ac <random(unsigned long)>
    9296:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    929a:	movs	r0, #8
    929c:	bl	b7ac <random(unsigned long)>
    for (int y = 0 ; y < size; y++){
    92a0:	cmp	r6, #0
    92a2:	ble.w	89c0 <loop+0x1e0>
    92a6:	add.w	r3, r0, #15
    92aa:	add.w	r4, r4, r4, lsl #1
    92ae:	movs	r7, #0
    92b0:	add.w	r4, r3, r4, lsl #3
    92b4:	add.w	r4, r5, r4, lsl #2
      if (rand){
    92b8:	cmp.w	sl, #0
    92bc:	bne.n	92d2 <loop+0xaf2>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
      } else {
        cells[cx][cy + y] = _target;
    92be:	ldr	r3, [r5, #0]
    92c0:	str	r3, [r4, #0]

  void init_line(int size, bool rand) {
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = 0 ; y < size; y++){
    92c2:	adds	r7, #1
    92c4:	adds	r4, #4
    92c6:	cmp	r7, r6
    92c8:	beq.w	89c0 <loop+0x1e0>
      if (rand){
    92cc:	cmp.w	sl, #0
    92d0:	beq.n	92be <loop+0xade>
        cells[cx][cy + y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    92d2:	ldr	r3, [r5, #20]
    92d4:	ldr	r2, [r5, #16]
    92d6:	subs	r0, r3, r2
    92d8:	adds	r0, #2
    92da:	bl	b7ac <random(unsigned long)>
    92de:	ldr	r3, [r5, #16]
    92e0:	subs	r3, #1
    92e2:	add	r0, r3
    92e4:	str	r0, [r4, #0]
    92e6:	b.n	92c2 <loop+0xae2>
    92e8:	.word	0x20000174
    92ec:	.word	0x20000ee0
      }
    } 
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    92f0:	movs	r0, #8
    92f2:	mov	r7, r5
    92f4:	bl	b7ac <random(unsigned long)>
    92f8:	add.w	r3, r5, #96	; 0x60
    92fc:	mov	r4, r0
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    92fe:	movs	r0, #8
    9300:	mov	fp, r3
    9302:	bl	b7ac <random(unsigned long)>
    9306:	vmov	s15, r6
    930a:	adds	r4, #8
    930c:	add.w	r3, r0, #8
    9310:	rsb	r9, r0, #16
    9314:	vcvt.f64.s32	d9, s15
    9318:	rsb	r8, r4, #0
    931c:	negs	r3, r3
    931e:	str	r3, [sp, #20]
    9320:	vmov	s15, r8
    9324:	ldr	r4, [sp, #20]
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    9326:	mov	r6, r7
    9328:	vcvt.f64.s32	d8, s15
    932c:	vmul.f64	d8, d8, d8
    9330:	b.n	933e <loop+0xb5e>
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
        cells[x][col] = _target;
    9332:	ldr	r3, [r5, #0]
    9334:	str	r3, [r6, #28]
    9336:	adds	r4, #1
    9338:	adds	r6, #96	; 0x60
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    933a:	cmp	r4, r9
    933c:	beq.n	938e <loop+0xbae>
      double xx = x-midPoint_y;
    933e:	vmov	s15, r4
      if (sqrt(xx*xx+yy*yy) <= size){
    9342:	vmov.f64	d0, d8
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
    9346:	vcvt.f64.s32	d7, s15
      if (sqrt(xx*xx+yy*yy) <= size){
    934a:	vfma.f64	d0, d7, d7
    934e:	vsqrt.f64	d7, d0
    9352:	vcmp.f64	d7, d7
    9356:	vmrs	APSR_nzcv, fpscr
    935a:	bne.w	96c8 <loop+0xee8>
    935e:	vcmpe.f64	d7, d9
    9362:	vmrs	APSR_nzcv, fpscr
    9366:	bhi.n	9336 <loop+0xb56>
        if (rand){
    9368:	cmp.w	sl, #0
    936c:	beq.n	9332 <loop+0xb52>
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    936e:	ldr	r3, [r5, #20]
    9370:	adds	r4, #1
    9372:	ldr	r0, [r5, #16]
    9374:	adds	r6, #96	; 0x60
    9376:	subs	r0, r3, r0
    9378:	adds	r0, #2
    937a:	bl	b7ac <random(unsigned long)>
    937e:	ldr	r3, [r5, #16]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    9380:	cmp	r4, r9
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
        if (rand){
        cells[x][col] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9382:	add.w	r3, r3, #4294967295
    9386:	add	r0, r3
    9388:	str.w	r0, [r6, #-68]
void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
    938c:	bne.n	933e <loop+0xb5e>
    938e:	adds	r7, #4
    9390:	add.w	r8, r8, #1
  }

void init_circle(int size, boolean rand){
  int midPoint_x = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    9394:	cmp	r7, fp
    9396:	bne.n	9320 <loop+0xb40>
    9398:	b.n	8fd6 <loop+0x7f6>
    }
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    939a:	movs	r0, #8
    939c:	bl	b7ac <random(unsigned long)>
    93a0:	add.w	r4, r0, #8
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    93a4:	movs	r0, #8
    93a6:	bl	b7ac <random(unsigned long)>
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    93aa:	cmp	r6, #0
    93ac:	mov	r3, r6
  }

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    93ae:	add.w	r0, r0, #8
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    93b2:	it	lt
    93b4:	addlt	r3, r6, #1
    93b6:	cmp	r6, #0
    93b8:	mov.w	r3, r3, asr #1
    93bc:	it	lt
    93be:	addlt	r6, #1
    93c0:	negs	r3, r3
    93c2:	asrs	r6, r6, #1
    93c4:	adds	r7, r0, r3
    93c6:	adds	r2, r0, r6
    93c8:	cmp	r7, r2
    93ca:	str	r2, [sp, #20]
    93cc:	bge.w	8fd6 <loop+0x7f6>
    93d0:	adds	r3, r4, r3
    93d2:	add	r4, r6
    93d4:	add.w	r6, r3, r3, lsl #1
    93d8:	mov	fp, r3
    93da:	add.w	r6, r7, r6, lsl #3
    93de:	add.w	r6, r5, r6, lsl #2
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    93e2:	cmp	fp, r4
    93e4:	bge.n	9404 <loop+0xc24>
    93e6:	mov	r9, r6
    93e8:	mov	r8, fp
        if (rand){
    93ea:	cmp.w	sl, #0
    93ee:	bne.w	9650 <loop+0xe70>
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
        } else {
          cells[x][y] = _target;
    93f2:	ldr	r3, [r5, #0]
    93f4:	str.w	r3, [r9, #28]
  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
    93f8:	add.w	r8, r8, #1
    93fc:	add.w	r9, r9, #96	; 0x60
    9400:	cmp	r8, r4
    9402:	bne.n	93ea <loop+0xc0a>

  void init_square(int size, bool rand){
    int cx, cy;
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
    9404:	adds	r7, #1
    9406:	ldr	r3, [sp, #20]
    9408:	adds	r6, #4
    940a:	cmp	r7, r3
    940c:	bne.n	93e2 <loop+0xc02>
    940e:	b.n	8fd6 <loop+0x7f6>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9410:	ldr	r3, [r5, #20]
    9412:	ldr	r2, [r5, #16]
    9414:	subs	r0, r3, r2
    9416:	adds	r0, #2
    9418:	bl	b7ac <random(unsigned long)>
    941c:	ldr	r1, [r5, #16]
    941e:	subs	r2, r1, #1
    9420:	add	r0, r2
    9422:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9424:	ldr	r3, [r5, #20]
    9426:	subs	r0, r3, r1
    9428:	adds	r0, #2
    942a:	bl	b7ac <random(unsigned long)>
    942e:	ldr	r1, [r5, #16]
    9430:	subs	r2, r1, #1
    9432:	add	r0, r2
    9434:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9438:	ldr	r3, [r5, #20]
    943a:	subs	r0, r3, r1
    943c:	adds	r0, #2
    943e:	bl	b7ac <random(unsigned long)>
    9442:	ldr	r1, [r5, #16]
    9444:	subs	r2, r1, #1
    9446:	add	r0, r2
    9448:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    944a:	ldr	r3, [r5, #20]
    944c:	subs	r0, r3, r1
    944e:	adds	r0, #2
    9450:	bl	b7ac <random(unsigned long)>
    9454:	ldr	r3, [r5, #16]
    9456:	subs	r3, #1
    9458:	add	r0, r3
    945a:	str	r0, [r4, #120]	; 0x78
    945c:	b.n	8fce <loop+0x7ee>
}

void init_implosion(boolean rand){
  for (int i = 0; i < SIZE_SCREEN; i++){
    if (rand){
      cells[0][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    945e:	ldr	r3, [r5, #20]
    9460:	ldr	r2, [r5, #16]
    9462:	subs	r0, r3, r2
    9464:	adds	r0, #2
    9466:	bl	b7ac <random(unsigned long)>
    946a:	ldr	r1, [r5, #16]
    946c:	subs	r2, r1, #1
    946e:	add	r0, r2
    9470:	str	r0, [r6, #0]
      cells[SIZE_SCREEN-1][i] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9472:	ldr	r3, [r5, #20]
    9474:	subs	r0, r3, r1
    9476:	adds	r0, #2
    9478:	bl	b7ac <random(unsigned long)>
    947c:	ldr	r1, [r5, #16]
    947e:	subs	r2, r1, #1
    9480:	add	r0, r2
    9482:	str.w	r0, [r6, #2208]	; 0x8a0
      cells[i][0] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9486:	ldr	r3, [r5, #20]
    9488:	subs	r0, r3, r1
    948a:	adds	r0, #2
    948c:	bl	b7ac <random(unsigned long)>
    9490:	ldr	r1, [r5, #16]
    9492:	subs	r2, r1, #1
    9494:	add	r0, r2
    9496:	str	r0, [r4, #28]
      cells[i][SIZE_SCREEN-1] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9498:	ldr	r3, [r5, #20]
    949a:	subs	r0, r3, r1
    949c:	adds	r0, #2
    949e:	bl	b7ac <random(unsigned long)>
    94a2:	ldr	r3, [r5, #16]
    94a4:	subs	r3, #1
    94a6:	add	r0, r3
    94a8:	str	r0, [r4, #120]	; 0x78
    94aa:	b.n	8db8 <loop+0x5d8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    94ac:	movw	sl, #4636	; 0x121c
    94b0:	add.w	r3, r5, #28
    94b4:	movs	r7, #0
    94b6:	add.w	r9, r5, #4640	; 0x1220
    94ba:	add	sl, r5
    94bc:	str	r3, [sp, #20]
    94be:	mov.w	r8, r7, lsl #3
    94c2:	ldr	r6, [sp, #20]
    94c4:	movs	r4, #0
    94c6:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    94ca:	ldrb	r2, [r5, #24]
      return _background[x][y];
    94cc:	add	r3, r4
    94ce:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    94d0:	cbnz	r2, 94d6 <loop+0xcf6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    94d2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    94d6:	cbnz	r3, 94f0 <loop+0xd10>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    94d8:	adds	r4, #1
    94da:	adds	r6, #4
    94dc:	cmp	r4, #24
    94de:	bne.n	94c6 <loop+0xce6>
    94e0:	ldr	r3, [sp, #20]
    94e2:	adds	r7, #24
    94e4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    94e6:	cmp.w	r7, #576	; 0x240
    94ea:	str	r3, [sp, #20]
    94ec:	bne.n	94be <loop+0xcde>
    94ee:	b.n	8dc0 <loop+0x5e0>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    94f0:	ldr	r2, [r5, #20]
    94f2:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    94f4:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    94f8:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    94fa:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    94fc:	adds	r0, #2
    94fe:	ldr.w	fp, [r3, r4, lsl #3]
    9502:	bl	b7ac <random(unsigned long)>
    9506:	ldr	r3, [r5, #16]
    9508:	rsb	r3, r3, fp
    950c:	adds	r3, #1
    950e:	subs	r0, r3, r0
    9510:	str	r0, [r6, #0]
    9512:	b.n	94d8 <loop+0xcf8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    9514:	movw	sl, #4636	; 0x121c
    9518:	add.w	r3, r5, #28
    951c:	movs	r7, #0
    951e:	add.w	r9, r5, #4640	; 0x1220
    9522:	add	sl, r5
    9524:	str	r3, [sp, #20]
    9526:	mov.w	r8, r7, lsl #3
    952a:	ldr	r6, [sp, #20]
    952c:	movs	r4, #0
    952e:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    9532:	ldrb	r2, [r5, #24]
      return _background[x][y];
    9534:	add	r3, r4
    9536:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    9538:	cbnz	r2, 953e <loop+0xd5e>
      return _background[x][y];
    } else {
      return !_background[x][y];
    953a:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    953e:	cbnz	r3, 9558 <loop+0xd78>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    9540:	adds	r4, #1
    9542:	adds	r6, #4
    9544:	cmp	r4, #24
    9546:	bne.n	952e <loop+0xd4e>
    9548:	ldr	r3, [sp, #20]
    954a:	adds	r7, #24
    954c:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    954e:	cmp.w	r7, #576	; 0x240
    9552:	str	r3, [sp, #20]
    9554:	bne.n	9526 <loop+0xd46>
    9556:	b.n	8fd6 <loop+0x7f6>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    9558:	ldr	r2, [r5, #20]
    955a:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    955c:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    9560:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    9562:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    9564:	adds	r0, #2
    9566:	ldr.w	fp, [r3, r4, lsl #3]
    956a:	bl	b7ac <random(unsigned long)>
    956e:	ldr	r3, [r5, #16]
    9570:	rsb	r3, r3, fp
    9574:	adds	r3, #1
    9576:	subs	r0, r3, r0
    9578:	str	r0, [r6, #0]
    957a:	b.n	9540 <loop+0xd60>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    957c:	movw	sl, #4636	; 0x121c
    9580:	add.w	r3, r5, #28
    9584:	movs	r7, #0
    9586:	add.w	r9, r5, #4640	; 0x1220
    958a:	add	sl, r5
    958c:	str	r3, [sp, #20]
    958e:	mov.w	r8, r7, lsl #3
    9592:	ldr	r6, [sp, #20]
    9594:	movs	r4, #0
    9596:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    959a:	ldrb	r2, [r5, #24]
      return _background[x][y];
    959c:	add	r3, r4
    959e:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    95a0:	cbnz	r2, 95a6 <loop+0xdc6>
      return _background[x][y];
    } else {
      return !_background[x][y];
    95a2:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    95a6:	cbnz	r3, 95c2 <loop+0xde2>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    95a8:	adds	r4, #1
    95aa:	adds	r6, #4
    95ac:	cmp	r4, #24
    95ae:	bne.n	9596 <loop+0xdb6>
    95b0:	ldr	r3, [sp, #20]
    95b2:	adds	r7, #24
    95b4:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    95b6:	cmp.w	r7, #576	; 0x240
    95ba:	str	r3, [sp, #20]
    95bc:	bne.n	958e <loop+0xdae>
    95be:	b.w	89c0 <loop+0x1e0>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    95c2:	ldr	r2, [r5, #20]
    95c4:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    95c6:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    95ca:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    95cc:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    95ce:	adds	r0, #2
    95d0:	ldr.w	fp, [r3, r4, lsl #3]
    95d4:	bl	b7ac <random(unsigned long)>
    95d8:	ldr	r3, [r5, #16]
    95da:	rsb	r3, r3, fp
    95de:	adds	r3, #1
    95e0:	subs	r0, r3, r0
    95e2:	str	r0, [r6, #0]
    95e4:	b.n	95a8 <loop+0xdc8>
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    95e6:	movw	sl, #4636	; 0x121c
    95ea:	add.w	r3, r5, #28
    95ee:	movs	r7, #0
    95f0:	add.w	r9, r5, #4640	; 0x1220
    95f4:	add	sl, r5
    95f6:	str	r3, [sp, #20]
    95f8:	mov.w	r8, r7, lsl #3
    95fc:	ldr	r6, [sp, #20]
    95fe:	movs	r4, #0
    9600:	ldr.w	r3, [r9]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    9604:	ldrb	r2, [r5, #24]
      return _background[x][y];
    9606:	add	r3, r4
    9608:	ldrb	r3, [r3, r7]
    }
    return true;
  }

  boolean can_color(int x, int y){
    if (_isBg){
    960a:	cbnz	r2, 9610 <loop+0xe30>
      return _background[x][y];
    } else {
      return !_background[x][y];
    960c:	eor.w	r3, r3, #1
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
    9610:	cbnz	r3, 962c <loop+0xe4c>
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
    9612:	adds	r4, #1
    9614:	adds	r6, #4
    9616:	cmp	r4, #24
    9618:	bne.n	9600 <loop+0xe20>
    961a:	ldr	r3, [sp, #20]
    961c:	adds	r7, #24
    961e:	adds	r3, #96	; 0x60
  Automaton(){
    
  };
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
    9620:	cmp.w	r7, #576	; 0x240
    9624:	str	r3, [sp, #20]
    9626:	bne.n	95f8 <loop+0xe18>
    9628:	b.w	8a0e <loop+0x22e>
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    962c:	ldr	r2, [r5, #20]
    962e:	ldr	r0, [r5, #16]
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    9630:	ldr.w	r3, [sl]
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    9634:	subs	r0, r2, r0
    
    void init(){
      for (int x = 0; x < SIZE_SCREEN; x++){
        for (int y = 0; y < SIZE_SCREEN; y++){
          if (can_color(x, y)){
            int hue_val = _cellmask[x][y].getHue();
    9636:	add	r3, r8
            cells[x][y] = hue_val - int(random(_maxInit - _minInit + 2) + _minInit - 1);   
    9638:	adds	r0, #2
    963a:	ldr.w	fp, [r3, r4, lsl #3]
    963e:	bl	b7ac <random(unsigned long)>
    9642:	ldr	r3, [r5, #16]
    9644:	rsb	r3, r3, fp
    9648:	adds	r3, #1
    964a:	subs	r0, r3, r0
    964c:	str	r0, [r6, #0]
    964e:	b.n	9612 <loop+0xe32>
    cx = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    cy = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
    for (int y = cy - int(size/2) ; y < cy + int(size/2); y++){
      for (int x = cx - int(size/2); x < cx + int(size/2); x++){
        if (rand){
          cells[x][y] = int(random(_maxInit - _minInit + 2) + _minInit - 1);
    9650:	ldr	r3, [r5, #20]
    9652:	ldr	r0, [r5, #16]
    9654:	subs	r0, r3, r0
    9656:	adds	r0, #2
    9658:	bl	b7ac <random(unsigned long)>
    965c:	ldr	r3, [r5, #16]
    965e:	subs	r3, #1
    9660:	add	r0, r3
    9662:	str.w	r0, [r9, #28]
    9666:	b.n	93f8 <loop+0xc18>
    9668:	ldr	r3, [r5, #20]
    966a:	ldr	r0, [r5, #16]
    966c:	subs	r0, r3, r0
    966e:	adds	r0, #2
    9670:	bl	b7ac <random(unsigned long)>
    9674:	ldr	r3, [r5, #16]
    9676:	subs	r3, #1
    9678:	add	r0, r3
    967a:	str.w	r0, [r9, #28]
    967e:	b.w	8d2a <loop+0x54a>
    9682:	ldr	r3, [r5, #20]
    9684:	ldr	r0, [r5, #16]
    9686:	subs	r0, r3, r0
    9688:	adds	r0, #2
    968a:	bl	b7ac <random(unsigned long)>
    968e:	ldr	r3, [r5, #16]
    9690:	subs	r3, #1
    9692:	add	r0, r3
    9694:	str.w	r0, [r9, #28]
    9698:	b.n	8f40 <loop+0x760>
    969a:	ldr	r3, [r5, #20]
    969c:	ldr	r0, [r5, #16]
    969e:	subs	r0, r3, r0
    96a0:	adds	r0, #2
    96a2:	bl	b7ac <random(unsigned long)>
    96a6:	ldr	r3, [r5, #16]
    96a8:	subs	r3, #1
    96aa:	add	r0, r3
    96ac:	str.w	r0, [r9, #28]
    96b0:	b.n	9276 <loop+0xa96>
  int midPoint_y = int(random(MAX_INIT - MIN_INIT + 2) + MIN_INIT - 1);
  for (int col = 0; col < SIZE_SCREEN; col++){
    double yy = col-midPoint_x;
    for (int x= 0; x< SIZE_SCREEN; x++){
      double xx = x-midPoint_y;
      if (sqrt(xx*xx+yy*yy) <= size){
    96b2:	bl	bea8 <sqrt>
    96b6:	vmov.f64	d7, d0
    96ba:	b.n	91da <loop+0x9fa>
    96bc:	bl	bea8 <sqrt>
    96c0:	vmov.f64	d7, d0
    96c4:	b.w	8ea6 <loop+0x6c6>
    96c8:	bl	bea8 <sqrt>
    96cc:	vmov.f64	d7, d0
    96d0:	b.n	935e <loop+0xb7e>
    96d2:	bl	bea8 <sqrt>
    96d6:	vmov.f64	d7, d0
    96da:	b.w	8c90 <loop+0x4b0>
    96de:	nop

000096e0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>:
    p[bOffset] = b;
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    96e0:	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    96e2:	ldrb	r3, [r0, #7]

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    96e4:	lsrs	r6, r2, #16
      g = (uint8_t)(c >>  8),
    96e6:	lsrs	r5, r2, #8
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    96e8:	uxtb	r6, r6
      g = (g * brightness) >> 8;
    96ea:	uxtb	r5, r5
      b = (b * brightness) >> 8;
    96ec:	uxtb.w	lr, r2
  if(n < numLEDs) {
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
    96f0:	cbz	r3, 970a <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x2a>
      r = (r * brightness) >> 8;
    96f2:	mul.w	r6, r3, r6
      g = (g * brightness) >> 8;
    96f6:	mul.w	r5, r3, r5
      b = (b * brightness) >> 8;
    96fa:	mul.w	lr, r3, lr
    uint8_t *p,
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    96fe:	ubfx	r6, r6, #8, #8
      g = (g * brightness) >> 8;
    9702:	ubfx	r5, r5, #8, #8
      b = (b * brightness) >> 8;
    9706:	ubfx	lr, lr, #8, #8
    }
    if(wOffset == rOffset) {
    970a:	ldrb	r7, [r0, #15]
    970c:	ldrb	r4, [r0, #12]
    970e:	cmp	r4, r7
    9710:	beq.n	973c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x5c>
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    9712:	ldr	r4, [r0, #8]
      uint8_t w = (uint8_t)(c >> 24);
    9714:	lsrs	r2, r2, #24
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    9716:	add.w	r1, r4, r1, lsl #2
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    971a:	add	r7, r1
    971c:	cbnz	r3, 9732 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x52>
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
    971e:	uxtb	r3, r2
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    9720:	strb	r3, [r7, #0]
    9722:	ldrb	r7, [r0, #12]
    }
    p[rOffset] = r;
    9724:	strb	r6, [r1, r7]
    p[gOffset] = g;
    9726:	ldrb	r3, [r0, #13]
    9728:	strb	r5, [r1, r3]
    p[bOffset] = b;
    972a:	ldrb	r3, [r0, #14]
    972c:	strb.w	lr, [r1, r3]
    9730:	pop	{r4, r5, r6, r7, pc}
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    9732:	mul.w	r3, r3, r2
    9736:	ubfx	r3, r3, #8, #8
    973a:	b.n	9720 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x40>
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    973c:	add.w	r1, r1, r1, lsl #1
    9740:	ldr	r3, [r0, #8]
    9742:	add	r1, r3
    9744:	b.n	9724 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]+0x44>
    9746:	nop

00009748 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
  begun(false), numLEDs(0), numBytes(0), pin(-1), brightness(0), pixels(NULL),
  rOffset(1), gOffset(0), bOffset(2), wOffset(1), endTime(0)
{
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
    9748:	push	{r4, lr}
    974a:	mov	r4, r0
  if(pixels)   free(pixels);
    974c:	ldr	r0, [r0, #8]
    974e:	cbz	r0, 9754 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0xc>
    9750:	bl	c1cc <free>
  if(pin >= 0) pinMode(pin, INPUT);
    9754:	ldrsb.w	r0, [r4, #6]
    9758:	cmp	r0, #0
    975a:	blt.n	9764 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1c>
    975c:	uxtb	r0, r0
    975e:	movs	r1, #0
    9760:	bl	adfc <pinMode>
}
    9764:	mov	r0, r4
    9766:	pop	{r4, pc}

00009768 <Adafruit_NeoPixel::begin()>:

void Adafruit_NeoPixel::begin(void) {
    9768:	push	{r4, lr}
    976a:	mov	r4, r0
  if(pin >= 0) {
    976c:	ldrsb.w	r0, [r0, #6]
    9770:	cmp	r0, #0
    9772:	blt.n	9784 <Adafruit_NeoPixel::begin()+0x1c>
    pinMode(pin, OUTPUT);
    9774:	uxtb	r0, r0
    9776:	movs	r1, #1
    9778:	bl	adfc <pinMode>
    digitalWrite(pin, LOW);
    977c:	movs	r1, #0
    977e:	ldrb	r0, [r4, #6]
    9780:	bl	adf0 <digitalWrite>
  }
  begun = true;
    9784:	movs	r3, #1
    9786:	strb	r3, [r4, #1]
    9788:	pop	{r4, pc}
    978a:	nop

0000978c <Adafruit_NeoPixel::updateLength(unsigned short)>:

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    978c:	push	{r3, r4, r5, lr}
    978e:	mov	r4, r0
  if(pixels) free(pixels); // Free existing data (if any)
    9790:	ldr	r0, [r0, #8]
  }
  begun = true;

}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
    9792:	mov	r5, r1
  if(pixels) free(pixels); // Free existing data (if any)
    9794:	cbz	r0, 979a <Adafruit_NeoPixel::updateLength(unsigned short)+0xe>
    9796:	bl	c1cc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    979a:	ldrb	r3, [r4, #15]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    979c:	movs	r1, #1

void Adafruit_NeoPixel::updateLength(uint16_t n) {
  if(pixels) free(pixels); // Free existing data (if any)

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((wOffset == rOffset) ? 3 : 4);
    979e:	ldrb	r0, [r4, #12]
    97a0:	cmp	r3, r0
    97a2:	ite	eq
    97a4:	moveq	r0, #3
    97a6:	movne	r0, #4
    97a8:	smulbb	r0, r0, r5
    97ac:	uxth	r0, r0
    97ae:	strh	r0, [r4, #4]
  if((pixels = (uint8_t *)malloc(numBytes))) {
    97b0:	bl	c0e4 <calloc>
    97b4:	str	r0, [r4, #8]
    97b6:	cbz	r0, 97bc <Adafruit_NeoPixel::updateLength(unsigned short)+0x30>
    memset(pixels, 0, numBytes);
    numLEDs = n;
    97b8:	strh	r5, [r4, #2]
    97ba:	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
    97bc:	strh	r0, [r4, #4]
    97be:	strh	r0, [r4, #2]
    97c0:	pop	{r3, r4, r5, pc}
    97c2:	nop

000097c4 <Adafruit_NeoPixel::updateType(unsigned short)>:
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
    97c4:	push	{r4, r5, r6, r7, lr}
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    97c6:	ldrb	r4, [r0, #15]

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    97c8:	ubfx	r5, r1, #2, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    97cc:	ldrb.w	lr, [r0, #12]
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    97d0:	cmp	r1, #255	; 0xff
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    97d2:	ubfx	r2, r1, #6, #2
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    97d6:	and.w	r7, r1, #3
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    97da:	rsb	r4, lr, r4
  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    97de:	ite	hi
    97e0:	movhi	r6, #0
    97e2:	movls	r6, #1

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    97e4:	ubfx	r1, r1, #4, #2
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    97e8:	clz	r4, r4

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
    97ec:	strb	r5, [r0, #13]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    97ee:	ldr	r5, [r0, #8]
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
    97f0:	strb	r2, [r0, #15]
    numLEDs = numBytes = 0;
  }
}

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW
    97f2:	lsrs	r4, r4, #5

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
  gOffset = (t >> 2) & 0b11;
  bOffset =  t       & 0b11;
    97f4:	strb	r7, [r0, #14]
#ifdef NEO_KHZ400
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
    97f6:	strb	r6, [r0, #0]

void Adafruit_NeoPixel::updateType(neoPixelType t) {
  boolean oldThreeBytesPerPixel = (wOffset == rOffset); // false if RGBW

  wOffset = (t >> 6) & 0b11; // See notes in header file
  rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
    97f8:	strb	r1, [r0, #12]
  is800KHz = (t < 256);      // 400 KHz flag is 1<<8
#endif

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    97fa:	cbz	r5, 9812 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    97fc:	subs	r1, r2, r1
    97fe:	clz	r1, r1
    9802:	lsrs	r1, r1, #5
    9804:	cmp	r1, r4
    9806:	beq.n	9812 <Adafruit_NeoPixel::updateType(unsigned short)+0x4e>
    9808:	ldrh	r1, [r0, #2]
  }
}
    980a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

  // If bytes-per-pixel has changed (and pixel data was previously
  // allocated), re-allocate to new size.  Will clear any data.
  if(pixels) {
    boolean newThreeBytesPerPixel = (wOffset == rOffset);
    if(newThreeBytesPerPixel != oldThreeBytesPerPixel) updateLength(numLEDs);
    980e:	b.w	978c <Adafruit_NeoPixel::updateLength(unsigned short)>
    9812:	pop	{r4, r5, r6, r7, pc}

00009814 <Adafruit_NeoPixel::show()>:
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    9814:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(!pixels) return;
    9818:	ldr	r3, [r0, #8]
#elif defined(ESP32)
extern "C" void espShow(
  uint8_t pin, uint8_t *pixels, uint32_t numBytes, uint8_t type);
#endif // ESP8266

void Adafruit_NeoPixel::show(void) {
    981a:	sub	sp, #20
    981c:	str	r0, [sp, #12]

  if(!pixels) return;
    981e:	cmp	r3, #0
    9820:	beq.n	9906 <Adafruit_NeoPixel::show()+0xf2>
    9822:	mov	r4, r0
    Color(uint8_t r, uint8_t g, uint8_t b),
    Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w);
  uint32_t
    getPixelColor(uint16_t n) const;
  inline bool
    canShow(void) { return (micros() - endTime) >= 300L; }
    9824:	bl	ad1c <micros>
  // put a delay at the end of the function, the ending time is noted and
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  while(!canShow());
    9828:	ldr	r3, [r4, #16]
    982a:	subs	r0, r0, r3
    982c:	cmp.w	r0, #300	; 0x12c
    9830:	bcc.n	9824 <Adafruit_NeoPixel::show()+0x10>
  // state, computes 'pin high' and 'pin low' values, and writes these back
  // to the PORT register as needed.

  // NRF52 may use PWM + DMA (if available), may not need to disable interrupt
#if !( defined(NRF52) || defined(NRF52_SERIES) )
  noInterrupts(); // Need 100% focus on instruction timing
    9832:	cpsid	i
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9834:	ldr	r6, [sp, #12]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9836:	ldr	r0, [pc, #408]	; (99d0 <Adafruit_NeoPixel::show()+0x1bc>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9838:	ldrsb.w	r3, [r6, #6]
    983c:	ldr	r4, [pc, #404]	; (99d4 <Adafruit_NeoPixel::show()+0x1c0>)
    983e:	lsls	r3, r3, #4
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    9840:	ldr	r2, [r0, #0]
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9842:	ldr	r1, [pc, #404]	; (99d8 <Adafruit_NeoPixel::show()+0x1c4>)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
    9844:	ldr.w	ip, [r4, r3]
    9848:	adds	r5, r4, r3
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    984a:	ldr	r3, [r6, #8]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    984c:	orr.w	r2, r2, #16777216	; 0x1000000
  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);
    9850:	ldr.w	r8, [r5, #12]
#define CYCLES_800      (F_CPU_ACTUAL /  800000)
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
    9854:	mov	r5, r6
    9856:	mov	r6, r3
    9858:	str	r3, [sp, #4]
                    *end = p + numBytes, pix, mask;
    985a:	ldrh	r4, [r5, #4]
  volatile uint32_t *set = portSetRegister(pin),
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    985c:	str	r2, [r0, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    985e:	mov	r2, r6
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9860:	ldr	r3, [r1, #0]
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    9862:	add	r2, r4
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9864:	ldr	r4, [pc, #372]	; (99dc <Adafruit_NeoPixel::show()+0x1c8>)
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9866:	orr.w	r3, r3, #1
#define CYCLES_400_T0H  (F_CPU_ACTUAL / 2000000)
#define CYCLES_400_T1H  (F_CPU_ACTUAL /  833333)
#define CYCLES_400      (F_CPU_ACTUAL /  400000)

  uint8_t           *p   = pixels,
                    *end = p + numBytes, pix, mask;
    986a:	str	r2, [sp, #8]
    986c:	mov	r7, r2

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    986e:	ldrb	r2, [r5, #0]
                    *clr = portClearRegister(pin);
  uint32_t          cyc,
                    msk = digitalPinToBitMask(pin);

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    9870:	str	r3, [r1, #0]

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9872:	ldr	r1, [pc, #364]	; (99e0 <Adafruit_NeoPixel::show()+0x1cc>)
    9874:	ldr	r0, [r4, #0]
    9876:	ldr	r3, [r1, #0]

  ARM_DEMCR    |= ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
    9878:	cmp	r2, #0
    987a:	beq.n	990c <Adafruit_NeoPixel::show()+0xf8>
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    987c:	ldr	r5, [pc, #356]	; (99e4 <Adafruit_NeoPixel::show()+0x1d0>)
    987e:	lsrs	r3, r3, #8
    while(p < end) {
    9880:	cmp	r6, r7
  ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    9882:	umull	r2, r3, r5, r3
    9886:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    988a:	bcs.n	98e6 <Adafruit_NeoPixel::show()+0xd2>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    988c:	ldr	r7, [pc, #344]	; (99e8 <Adafruit_NeoPixel::show()+0x1d4>)
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    988e:	ldr	r6, [pc, #348]	; (99ec <Adafruit_NeoPixel::show()+0x1d8>)
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    9890:	ldr	r3, [sp, #4]
    9892:	mov.w	r9, #8
      for(mask = 0x80; mask; mask >>= 1) {
    9896:	mov.w	lr, #128	; 0x80
#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
    989a:	ldrb.w	sl, [r3], #1
    989e:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    98a0:	ldr	r2, [r4, #0]
    98a2:	ldr	r3, [r1, #0]
    98a4:	subs	r2, r2, r0
    98a6:	lsrs	r3, r3, #8
    98a8:	umull	fp, r3, r5, r3
    98ac:	cmp.w	r2, r3, lsr #4
    98b0:	bcc.n	98a0 <Adafruit_NeoPixel::show()+0x8c>
        cyc  = ARM_DWT_CYCCNT;
    98b2:	ldr	r3, [pc, #296]	; (99dc <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    98b4:	tst.w	sl, lr
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
        cyc  = ARM_DWT_CYCCNT;
    98b8:	ldr	r0, [r3, #0]
        *set = msk;
    98ba:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    98be:	beq.n	99be <Adafruit_NeoPixel::show()+0x1aa>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
    98c0:	ldr	r3, [r4, #0]
    98c2:	ldr	r2, [r1, #0]
    98c4:	subs	r3, r3, r0
    98c6:	umull	fp, r2, r7, r2
    98ca:	cmp.w	r3, r2, lsr #19
    98ce:	bcc.n	98c0 <Adafruit_NeoPixel::show()+0xac>
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    98d0:	subs.w	r9, r9, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
    98d4:	str.w	r8, [ip, #136]	; 0x88
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    98d8:	mov.w	lr, lr, lsr #1
    98dc:	bne.n	98a0 <Adafruit_NeoPixel::show()+0x8c>

#ifdef NEO_KHZ400 // 800 KHz check needed only if 400 KHz support enabled
  if(is800KHz) {
#endif
    cyc = ARM_DWT_CYCCNT + CYCLES_800;
    while(p < end) {
    98de:	ldr	r3, [sp, #8]
    98e0:	ldr	r2, [sp, #4]
    98e2:	cmp	r3, r2
    98e4:	bne.n	9890 <Adafruit_NeoPixel::show()+0x7c>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
    98e6:	ldr	r5, [pc, #244]	; (99dc <Adafruit_NeoPixel::show()+0x1c8>)
    98e8:	ldr	r4, [pc, #248]	; (99e4 <Adafruit_NeoPixel::show()+0x1d0>)
    98ea:	ldr	r2, [r5, #0]
    98ec:	ldr	r3, [r1, #0]
    98ee:	subs	r2, r2, r0
    98f0:	lsrs	r3, r3, #8
    98f2:	umull	r6, r3, r4, r3
    98f6:	cmp.w	r2, r3, lsr #4
    98fa:	bcc.n	98ea <Adafruit_NeoPixel::show()+0xd6>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    98fc:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    98fe:	bl	ad1c <micros>
    9902:	ldr	r3, [sp, #12]
    9904:	str	r0, [r3, #16]
}
    9906:	add	sp, #20
    9908:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    990c:	ldr	r6, [pc, #212]	; (99e4 <Adafruit_NeoPixel::show()+0x1d0>)
    990e:	lsrs	r3, r3, #7
    9910:	umull	r2, r3, r6, r3
    while(p < end) {
    9914:	ldr	r2, [sp, #8]
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    9916:	add.w	r0, r0, r3, lsr #4
    while(p < end) {
    991a:	ldr	r3, [sp, #4]
    991c:	cmp	r3, r2
    991e:	bcs.n	998a <Adafruit_NeoPixel::show()+0x176>
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    9920:	ldr.w	lr, [pc, #204]	; 99f0 <Adafruit_NeoPixel::show()+0x1dc>
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    9924:	ldr	r7, [pc, #196]	; (99ec <Adafruit_NeoPixel::show()+0x1d8>)
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    9926:	ldr	r3, [sp, #4]
    9928:	mov.w	sl, #8
      for(mask = 0x80; mask; mask >>= 1) {
    992c:	mov.w	r9, #128	; 0x80
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
    9930:	ldrb.w	fp, [r3], #1
    9934:	str	r3, [sp, #4]
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    9936:	ldr	r2, [r4, #0]
    9938:	ldr	r3, [r1, #0]
    993a:	subs	r2, r2, r0
    993c:	lsrs	r3, r3, #7
    993e:	umull	r5, r3, r6, r3
    9942:	cmp.w	r2, r3, lsr #4
    9946:	bcc.n	9936 <Adafruit_NeoPixel::show()+0x122>
        cyc  = ARM_DWT_CYCCNT;
    9948:	ldr	r3, [pc, #144]	; (99dc <Adafruit_NeoPixel::show()+0x1c8>)
        *set = msk;
        if(pix & mask) {
    994a:	tst.w	fp, r9
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
        while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
        cyc  = ARM_DWT_CYCCNT;
    994e:	ldr	r0, [r3, #0]
        *set = msk;
    9950:	str.w	r8, [ip, #132]	; 0x84
        if(pix & mask) {
    9954:	beq.n	99ac <Adafruit_NeoPixel::show()+0x198>
    9956:	str.w	ip, [sp]
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
    995a:	ldr	r2, [r4, #0]
    995c:	ldr	r5, [r1, #0]
    995e:	subs	r2, r2, r0
    9960:	umull	ip, r3, lr, r5
    9964:	subs	r5, r5, r3
    9966:	add.w	r3, r3, r5, lsr #1
    996a:	cmp.w	r2, r3, lsr #19
    996e:	bcc.n	995a <Adafruit_NeoPixel::show()+0x146>
    9970:	ldr.w	ip, [sp]
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    9974:	subs.w	sl, sl, #1
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
    9978:	str.w	r8, [ip, #136]	; 0x88
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
      pix = *p++;
      for(mask = 0x80; mask; mask >>= 1) {
    997c:	mov.w	r9, r9, lsr #1
    9980:	bne.n	9936 <Adafruit_NeoPixel::show()+0x122>
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_800);
#ifdef NEO_KHZ400
  } else { // 400 kHz bitstream
    cyc = ARM_DWT_CYCCNT + CYCLES_400;
    while(p < end) {
    9982:	ldr	r3, [sp, #8]
    9984:	ldr	r2, [sp, #4]
    9986:	cmp	r3, r2
    9988:	bne.n	9926 <Adafruit_NeoPixel::show()+0x112>
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
        }
        *clr = msk;
      }
    }
    while(ARM_DWT_CYCCNT - cyc < CYCLES_400);
    998a:	ldr	r5, [pc, #80]	; (99dc <Adafruit_NeoPixel::show()+0x1c8>)
    998c:	ldr	r4, [pc, #84]	; (99e4 <Adafruit_NeoPixel::show()+0x1d0>)
    998e:	ldr	r2, [r5, #0]
    9990:	ldr	r3, [r1, #0]
    9992:	subs	r2, r2, r0
    9994:	lsrs	r3, r3, #7
    9996:	umull	r6, r3, r4, r3
    999a:	cmp.w	r2, r3, lsr #4
    999e:	bcc.n	998e <Adafruit_NeoPixel::show()+0x17a>


// END ARCHITECTURE SELECT ------------------------------------------------

#if !( defined(NRF52) || defined(NRF52_SERIES) )
  interrupts();
    99a0:	cpsie	i
#endif

  endTime = micros(); // Save EOD time for latch on next call
    99a2:	bl	ad1c <micros>
    99a6:	ldr	r3, [sp, #12]
    99a8:	str	r0, [r3, #16]
    99aa:	b.n	9906 <Adafruit_NeoPixel::show()+0xf2>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_400_T0H);
    99ac:	ldr	r3, [r4, #0]
    99ae:	ldr	r2, [r1, #0]
    99b0:	subs	r3, r3, r0
    99b2:	umull	r5, r2, r7, r2
    99b6:	cmp.w	r3, r2, lsr #19
    99ba:	bcc.n	99ac <Adafruit_NeoPixel::show()+0x198>
    99bc:	b.n	9974 <Adafruit_NeoPixel::show()+0x160>
        cyc  = ARM_DWT_CYCCNT;
        *set = msk;
        if(pix & mask) {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T1H);
        } else {
          while(ARM_DWT_CYCCNT - cyc < CYCLES_800_T0H);
    99be:	ldr	r3, [r4, #0]
    99c0:	ldr	r2, [r1, #0]
    99c2:	subs	r3, r3, r0
    99c4:	umull	fp, r2, r6, r2
    99c8:	cmp.w	r3, r2, lsr #20
    99cc:	bcc.n	99be <Adafruit_NeoPixel::show()+0x1aa>
    99ce:	b.n	98d0 <Adafruit_NeoPixel::show()+0xbc>
    99d0:	.word	0xe000edfc
    99d4:	.word	0x20000598
    99d8:	.word	0xe0001000
    99dc:	.word	0xe0001004
    99e0:	.word	0x20000dc8
    99e4:	.word	0x014f8b59
    99e8:	.word	0x6b5fca6b
    99ec:	.word	0x431bde83
    99f0:	.word	0x421f67b3

000099f4 <Adafruit_NeoPixel::setPin(unsigned char)>:

  endTime = micros(); // Save EOD time for latch on next call
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    99f4:	push	{r3, r4, r5, lr}
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    99f6:	ldrb	r3, [r0, #1]
    99f8:	cbz	r3, 9a16 <Adafruit_NeoPixel::setPin(unsigned char)+0x22>
    99fa:	mov	r4, r0
    99fc:	ldrsb.w	r0, [r0, #6]
    9a00:	mov	r5, r1
    9a02:	cmp	r0, #0
    9a04:	blt.n	9a1a <Adafruit_NeoPixel::setPin(unsigned char)+0x26>
    9a06:	uxtb	r0, r0
    9a08:	movs	r1, #0
    9a0a:	bl	adfc <pinMode>
    9a0e:	ldrb	r3, [r4, #1]
    pin = p;
    9a10:	strb	r5, [r4, #6]
    if(begun) {
    9a12:	cbnz	r3, 9a1c <Adafruit_NeoPixel::setPin(unsigned char)+0x28>
    9a14:	pop	{r3, r4, r5, pc}
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    9a16:	strb	r1, [r0, #6]
    9a18:	pop	{r3, r4, r5, pc}
    9a1a:	strb	r1, [r4, #6]
    if(begun) {
      pinMode(p, OUTPUT);
    9a1c:	mov	r0, r5
    9a1e:	movs	r1, #1
    9a20:	bl	adfc <pinMode>
      digitalWrite(p, LOW);
    9a24:	mov	r0, r5
    9a26:	movs	r1, #0
    }
#ifdef __AVR__
    port    = portOutputRegister(digitalPinToPort(p));
    pinMask = digitalPinToBitMask(p);
#endif
}
    9a28:	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_NeoPixel::setPin(uint8_t p) {
  if(begun && (pin >= 0)) pinMode(pin, INPUT);
    pin = p;
    if(begun) {
      pinMode(p, OUTPUT);
      digitalWrite(p, LOW);
    9a2c:	b.w	adf0 <digitalWrite>

00009a30 <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned short, unsigned char, unsigned short)>:
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9a30:	push	{r3, r4, r5, r6, r7, lr}
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9a32:	movs	r5, #0
// Note: Adafruit Bluefruit nrf52 does not use this option
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
    9a34:	mov	r4, r0
    9a36:	mov	r7, r1
    9a38:	mov	r6, r2
  begun(false), brightness(0), pixels(NULL), endTime(0)
{
  updateType(t);
    9a3a:	mov	r1, r3
//#define NRF52_DISABLE_INT
#endif

// Constructor when length, pin and type are known at compile-time:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, neoPixelType t) :
  begun(false), brightness(0), pixels(NULL), endTime(0)
    9a3c:	strb	r5, [r0, #1]
    9a3e:	strb	r5, [r0, #7]
    9a40:	str	r5, [r0, #8]
    9a42:	str	r5, [r0, #16]
{
  updateType(t);
    9a44:	bl	97c4 <Adafruit_NeoPixel::updateType(unsigned short)>
  updateLength(n);
    9a48:	mov	r1, r7
    9a4a:	mov	r0, r4
    9a4c:	bl	978c <Adafruit_NeoPixel::updateLength(unsigned short)>
  setPin(p);
    9a50:	mov	r0, r4
    9a52:	mov	r1, r6
    9a54:	bl	99f4 <Adafruit_NeoPixel::setPin(unsigned char)>
}
    9a58:	mov	r0, r4
    9a5a:	pop	{r3, r4, r5, r6, r7, pc}

00009a5c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)>:
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9a5c:	push	{r4, r5, r6, r7}

  if(n < numLEDs) {
    9a5e:	ldrh	r4, [r0, #2]
#endif
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
    9a60:	ldrb.w	r6, [sp, #16]

  if(n < numLEDs) {
    9a64:	cmp	r4, r1
    9a66:	bls.n	9a9c <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x40>
    if(brightness) { // See notes in setBrightness()
    9a68:	ldrb	r4, [r0, #7]
    9a6a:	cbz	r4, 9a7e <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x22>
      r = (r * brightness) >> 8;
    9a6c:	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
    9a70:	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
    9a74:	smulbb	r4, r4, r6
void Adafruit_NeoPixel::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {

  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
    9a78:	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
    9a7a:	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
    9a7c:	lsrs	r6, r4, #8
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
    9a7e:	ldrb	r5, [r0, #15]
    9a80:	ldrb	r4, [r0, #12]
    9a82:	cmp	r4, r5
    9a84:	beq.n	9aa0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x44>
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9a86:	ldr	r4, [r0, #8]
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9a88:	movs	r7, #0
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
    9a8a:	add.w	r1, r4, r1, lsl #2
      p[wOffset] = 0;        // But only R,G,B passed -- set W to 0
    9a8e:	strb	r7, [r1, r5]
    9a90:	ldrb	r5, [r0, #12]
    }
    p[rOffset] = r;          // R,G,B always stored
    9a92:	strb	r2, [r1, r5]
    p[gOffset] = g;
    9a94:	ldrb	r2, [r0, #13]
    9a96:	strb	r3, [r1, r2]
    p[bOffset] = b;
    9a98:	ldrb	r3, [r0, #14]
    9a9a:	strb	r6, [r1, r3]
  }
}
    9a9c:	pop	{r4, r5, r6, r7}
    9a9e:	bx	lr
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel
    9aa0:	add.w	r1, r1, r1, lsl #1
    9aa4:	ldr	r4, [r0, #8]
    9aa6:	add	r1, r4
    9aa8:	b.n	9a92 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned char, unsigned char, unsigned char)+0x36>
    9aaa:	nop

00009aac <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)>:
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
    9aac:	ldrh	r3, [r0, #2]
    9aae:	cmp	r3, r1
    9ab0:	bls.n	9ab6 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long)+0xa>
    9ab2:	b.w	96e0 <Adafruit_NeoPixel::setPixelColor(unsigned short, unsigned long) [clone .part.3]>
    9ab6:	bx	lr

00009ab8 <Adafruit_NeoPixel::getPixelColor(unsigned short) const>:
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9ab8:	ldrh	r3, [r0, #2]
    9aba:	cmp	r3, r1
    9abc:	bls.n	9aee <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x36>
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
    9abe:	push	{r4, r5}
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    9ac0:	ldrb	r2, [r0, #15]
    9ac2:	ldrb	r3, [r0, #12]
    9ac4:	cmp	r2, r3
    9ac6:	beq.n	9af2 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x3a>
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9ac8:	ldr	r5, [r0, #8]
    if(brightness) { // Return scaled color
    9aca:	ldrb	r4, [r0, #7]
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    9acc:	add.w	r1, r5, r1, lsl #2
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9ad0:	ldrb	r3, [r1, r3]
    9ad2:	ldrb	r5, [r1, r2]
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
    9ad4:	cbnz	r4, 9b24 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x6c>
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    9ad6:	lsls	r3, r3, #16
    9ad8:	ldrb	r4, [r0, #14]
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else { // Return raw color
      return ((uint32_t)p[wOffset] << 24) |
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9ada:	ldrb	r2, [r0, #13]
              (uint32_t)p[bOffset];
    9adc:	orr.w	r0, r3, r5, lsl #24
    9ae0:	ldrb	r3, [r1, r4]
    9ae2:	ldrb	r2, [r1, r2]
    9ae4:	orrs	r3, r0
    9ae6:	orr.w	r0, r3, r2, lsl #8
    }
  }
}
    9aea:	pop	{r4, r5}
    9aec:	bx	lr
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
  if(n >= numLEDs) return 0; // Out of bounds, return no color.
    9aee:	movs	r0, #0
    9af0:	bx	lr

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9af2:	add.w	r1, r1, r1, lsl #1
    9af6:	ldr	r3, [r0, #8]
    if(brightness) {
    9af8:	ldrb	r4, [r0, #7]
  if(n >= numLEDs) return 0; // Out of bounds, return no color.

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    9afa:	add	r1, r3
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9afc:	ldrb	r2, [r1, r2]

  uint8_t *p;

  if(wOffset == rOffset) { // Is RGB-type device
    p = &pixels[n * 3];
    if(brightness) {
    9afe:	cbz	r4, 9b54 <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x9c>
      // attempts to scale back to an approximation of the original 24-bit
      // value used when setting the pixel color, but there will always be
      // some error -- those bits are simply gone.  Issue is most
      // pronounced at low brightness levels.
      return (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9b00:	ldrb	r5, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b02:	lsls	r2, r2, #8
    9b04:	ldrb	r3, [r0, #14]
    9b06:	ldrb	r0, [r1, r5]
    9b08:	ldrb	r3, [r1, r3]
    9b0a:	lsls	r0, r0, #8
    9b0c:	lsls	r3, r3, #8
    9b0e:	udiv	r2, r2, r4
    9b12:	udiv	r0, r0, r4
    9b16:	lsls	r2, r2, #16
    9b18:	udiv	r3, r3, r4
    9b1c:	orr.w	r0, r2, r0, lsl #8
    9b20:	orrs	r0, r3
    9b22:	b.n	9aea <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b24:	lsls	r3, r3, #8
    9b26:	ldrb	r2, [r0, #14]
  } else {                 // Is RGBW-type device
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
    9b28:	ldrb	r0, [r0, #13]
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b2a:	lsls	r5, r5, #8
    9b2c:	ldrb	r2, [r1, r2]
    9b2e:	ldrb	r0, [r1, r0]
    9b30:	lsls	r2, r2, #8
    9b32:	lsls	r0, r0, #8
    9b34:	udiv	r1, r3, r4
    9b38:	udiv	r5, r5, r4
    9b3c:	udiv	r2, r2, r4
    9b40:	lsls	r3, r1, #16
    9b42:	udiv	r0, r0, r4
    9b46:	orr.w	r3, r3, r5, lsl #24
    9b4a:	orrs	r3, r2
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9b4c:	pop	{r4, r5}
    p = &pixels[n * 4];
    if(brightness) { // Return scaled color
      return (((uint32_t)(p[wOffset] << 8) / brightness) << 24) |
             (((uint32_t)(p[rOffset] << 8) / brightness) << 16) |
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    9b4e:	orr.w	r0, r3, r0, lsl #8
             ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
              (uint32_t)p[bOffset];
    }
  }
}
    9b52:	bx	lr
             (((uint32_t)(p[gOffset] << 8) / brightness) <<  8) |
             ( (uint32_t)(p[bOffset] << 8) / brightness       );
    } else {
      // No brightness adjustment has been made -- return 'raw' color
      return ((uint32_t)p[rOffset] << 16) |
             ((uint32_t)p[gOffset] <<  8) |
    9b54:	ldrb	r4, [r0, #13]
              (uint32_t)p[bOffset];
    9b56:	lsls	r2, r2, #16
    9b58:	ldrb	r3, [r0, #14]
    9b5a:	ldrb	r0, [r1, r4]
    9b5c:	ldrb	r3, [r1, r3]
    9b5e:	orr.w	r0, r2, r0, lsl #8
    9b62:	orrs	r0, r3
    9b64:	b.n	9aea <Adafruit_NeoPixel::getPixelColor(unsigned short) const+0x32>
    9b66:	nop

00009b68 <Adafruit_NeoPixel::numPixels() const>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
    9b68:	ldrh	r0, [r0, #2]
    9b6a:	bx	lr

00009b6c <Adafruit_NeoPixel::setBrightness(unsigned char)>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
    9b6c:	push	{r4, r5, r6}
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9b6e:	adds	r6, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
    9b70:	ldrb	r4, [r0, #7]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
    9b72:	uxtb	r6, r6
  if(newBrightness != brightness) { // Compare against prior value
    9b74:	cmp	r6, r4
    9b76:	beq.n	9ba0 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x34>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    9b78:	subs	r4, #1
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
    9b7a:	ldr	r5, [r0, #8]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    9b7c:	ands.w	r4, r4, #255	; 0xff
    9b80:	bne.n	9ba4 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x38>
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9b82:	ldrh	r3, [r0, #4]
    9b84:	cbz	r3, 9b9e <Adafruit_NeoPixel::setBrightness(unsigned char)+0x32>
    9b86:	mov	r2, r5
      c      = *ptr;
    9b88:	ldrb	r3, [r2, #0]
      *ptr++ = (c * scale) >> 8;
    9b8a:	mul.w	r3, r4, r3
    9b8e:	asrs	r3, r3, #8
    9b90:	strb.w	r3, [r2], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
    9b94:	subs	r3, r2, r5
    9b96:	ldrh	r1, [r0, #4]
    9b98:	uxth	r3, r3
    9b9a:	cmp	r1, r3
    9b9c:	bhi.n	9b88 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x1c>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
    9b9e:	strb	r6, [r0, #7]
  }
}
    9ba0:	pop	{r4, r5, r6}
    9ba2:	bx	lr
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9ba4:	cmp	r1, #255	; 0xff
    9ba6:	beq.n	9bb4 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x48>
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    9ba8:	lsls	r3, r6, #8
    9baa:	subs	r3, #1
    9bac:	sdiv	r4, r3, r4
    9bb0:	uxth	r4, r4
    9bb2:	b.n	9b82 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    9bb4:	movw	r3, #65535	; 0xffff
    9bb8:	sdiv	r4, r3, r4
    9bbc:	b.n	9b82 <Adafruit_NeoPixel::setBrightness(unsigned char)+0x16>
    9bbe:	nop

00009bc0 <Adafruit_NeoPixel::clear()>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear() {
  memset(pixels, 0, numBytes);
    9bc0:	ldrh	r2, [r0, #4]
    9bc2:	movs	r1, #0
    9bc4:	ldr	r0, [r0, #8]
    9bc6:	b.w	c814 <memset>
    9bca:	nop

00009bcc <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9bcc:	push	{r4, r5, r6}

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9bce:	movs	r1, #0
    9bd0:	mov	r3, r0
    9bd2:	add.w	r5, r0, #192	; 0xc0
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    9bd6:	ldrb	r2, [r3, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    9bd8:	movs	r4, #0
    9bda:	str	r1, [r3, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9bdc:	and.w	r2, r2, #207	; 0xcf
  value = nextTrigger = 0;
    9be0:	str	r1, [r3, #4]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    9be2:	bfc	r2, #0, #4
    9be6:	strb	r2, [r3, #12]
  value = nextTrigger = 0;
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    9be8:	str.w	r1, [r3], #16
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    9bec:	cmp	r3, r5
    9bee:	bne.n	9bd6 <TimeAlarmsClass::TimeAlarmsClass()+0xa>
{
  isServicing = false;
    9bf0:	mov	r2, r4
    9bf2:	mov	r1, r0
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    9bf4:	mov	r6, r4
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    9bf6:	strb.w	r4, [r0, #192]	; 0xc0
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9bfa:	add.w	r3, r0, r2, lsl #4
    9bfe:	adds	r3, #8
    9c00:	ldrb	r4, [r3, #4]

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c02:	and.w	r5, r4, #239	; 0xef
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9c06:	tst.w	r4, #15

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c0a:	bfc	r5, #0, #4
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    9c0e:	beq.n	9c18 <TimeAlarmsClass::TimeAlarmsClass()+0x4c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    9c10:	strb	r5, [r3, #4]
    Alarm[ID].onTickHandler = NULL;
    9c12:	str	r6, [r1, #0]
    Alarm[ID].value = 0;
    9c14:	str	r6, [r1, #4]
    Alarm[ID].nextTrigger = 0;
    9c16:	str	r6, [r1, #8]
    9c18:	adds	r2, #1
    9c1a:	adds	r1, #16
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    9c1c:	cmp	r2, #12
    9c1e:	bne.n	9bfa <TimeAlarmsClass::TimeAlarmsClass()+0x2e>
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    9c20:	pop	{r4, r5, r6}
    9c22:	bx	lr

00009c24 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    9c24:	ldr	r0, [pc, #4]	; (9c2c <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    9c26:	b.w	9bcc <TimeAlarmsClass::TimeAlarmsClass()>
    9c2a:	nop
    9c2c:	.word	0x2000d254

00009c30 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9c30:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9c32:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9c36:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9c3a:	bne.n	9d18 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9c3c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9c3e:	bcc.n	9cc4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9c40:	ldr.w	r3, [r1], #4
    9c44:	str.w	r3, [r0], #4
    9c48:	ldr.w	r3, [r1], #4
    9c4c:	str.w	r3, [r0], #4
    9c50:	ldr.w	r3, [r1], #4
    9c54:	str.w	r3, [r0], #4
    9c58:	ldr.w	r3, [r1], #4
    9c5c:	str.w	r3, [r0], #4
    9c60:	ldr.w	r3, [r1], #4
    9c64:	str.w	r3, [r0], #4
    9c68:	ldr.w	r3, [r1], #4
    9c6c:	str.w	r3, [r0], #4
    9c70:	ldr.w	r3, [r1], #4
    9c74:	str.w	r3, [r0], #4
    9c78:	ldr.w	r3, [r1], #4
    9c7c:	str.w	r3, [r0], #4
    9c80:	ldr.w	r3, [r1], #4
    9c84:	str.w	r3, [r0], #4
    9c88:	ldr.w	r3, [r1], #4
    9c8c:	str.w	r3, [r0], #4
    9c90:	ldr.w	r3, [r1], #4
    9c94:	str.w	r3, [r0], #4
    9c98:	ldr.w	r3, [r1], #4
    9c9c:	str.w	r3, [r0], #4
    9ca0:	ldr.w	r3, [r1], #4
    9ca4:	str.w	r3, [r0], #4
    9ca8:	ldr.w	r3, [r1], #4
    9cac:	str.w	r3, [r0], #4
    9cb0:	ldr.w	r3, [r1], #4
    9cb4:	str.w	r3, [r0], #4
    9cb8:	ldr.w	r3, [r1], #4
    9cbc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9cc0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9cc2:	bcs.n	9c40 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9cc4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9cc6:	bcc.n	9cec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9cc8:	ldr.w	r3, [r1], #4
    9ccc:	str.w	r3, [r0], #4
    9cd0:	ldr.w	r3, [r1], #4
    9cd4:	str.w	r3, [r0], #4
    9cd8:	ldr.w	r3, [r1], #4
    9cdc:	str.w	r3, [r0], #4
    9ce0:	ldr.w	r3, [r1], #4
    9ce4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9ce8:	subs	r2, #16
	bhs	.Lmid_block_loop
    9cea:	bcs.n	9cc8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9cec:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9cee:	bcc.n	9cfc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9cf0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9cf4:	str.w	r3, [r0], #4
	subs	r2, #4
    9cf8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9cfa:	bcs.n	9cf0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9cfc:	adds	r2, #4
	beq	.Ldone
    9cfe:	beq.n	9d12 <memcpy+0xe2>

	lsls	r2, r2, #31
    9d00:	lsls	r2, r2, #31
	itt ne
    9d02:	itt	ne
	ldrbne  r3, [r1], #1
    9d04:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d08:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9d0c:	bcc.n	9d12 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9d0e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9d10:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d12:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d14:	bx	lr
    9d16:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9d18:	cmp	r2, #8
	blo	.Lbyte_copy
    9d1a:	bcc.n	9d44 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9d1c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9d1e:	beq.n	9c3c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9d20:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9d24:	beq.n	9c3c <memcpy+0xc>

	rsb	r3, #4
    9d26:	rsb	r3, r3, #4
	subs	r2, r3
    9d2a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9d2c:	lsls	r3, r3, #31
	itt ne
    9d2e:	itt	ne
	ldrbne  r3, [r1], #1
    9d30:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9d34:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9d38:	bcc.n	9c3c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9d3a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9d3e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9d42:	b.n	9c3c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9d44:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9d46:	bcc.n	9cfc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9d48:	subs	r2, #1
	ldrb    r3, [r1], #1
    9d4a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9d4e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9d52:	bcs.n	9d48 <memcpy+0x118>

	ldrb	r3, [r1]
    9d54:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9d56:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9d58:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9d5a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9d5c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9d5e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9d60:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9d62:	bx	lr

00009d64 <rx_event>:
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
    9d64:	ldr	r3, [r0, #4]
	int index = t->callback_param;
    9d66:	ldr	r2, [r0, #28]
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9d68:	ubfx	r3, r3, #16, #15
    9d6c:	ldr	r1, [pc, #20]	; (9d84 <rx_event+0x20>)
static uint8_t rx_buffer[RX_NUM * CDC_RX_SIZE];
static uint16_t rx_count[RX_NUM];
static uint16_t rx_index[RX_NUM];

static void rx_event(transfer_t *t)
{
    9d6e:	push	{r4, r5}
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9d70:	rsb	r3, r3, #64	; 0x40
	rx_index[index] = 0;
    9d74:	ldr	r4, [pc, #16]	; (9d88 <rx_event+0x24>)
    9d76:	movs	r5, #0
static void rx_event(transfer_t *t)
{
	int len = CDC_RX_SIZE - ((t->status >> 16) & 0x7FFF);
	int index = t->callback_param;
	//printf("rx event, len=%d, i=%d\n", len, index);
	rx_count[index] = len;
    9d78:	strh.w	r3, [r1, r2, lsl #1]
	rx_index[index] = 0;
    9d7c:	strh.w	r5, [r4, r2, lsl #1]
}
    9d80:	pop	{r4, r5}
    9d82:	bx	lr
    9d84:	.word	0x2000dae4
    9d88:	.word	0x2000dadc

00009d8c <usb_serial_flush_callback>:
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9d8c:	push	{r3, r4, r5, r6, r7, lr}
	if (tx_noautoflush) return;
    9d8e:	ldr	r3, [pc, #84]	; (9de4 <usb_serial_flush_callback+0x58>)
    9d90:	ldrb	r3, [r3, #0]
    9d92:	cbnz	r3, 9da4 <usb_serial_flush_callback+0x18>
    9d94:	and.w	r4, r3, #255	; 0xff
	if (!usb_configuration) return;
    9d98:	ldr	r3, [pc, #76]	; (9de8 <usb_serial_flush_callback+0x5c>)
    9d9a:	ldrb	r3, [r3, #0]
    9d9c:	cbz	r3, 9da4 <usb_serial_flush_callback+0x18>
	if (tx_available == 0) return;
    9d9e:	ldr	r5, [pc, #76]	; (9dec <usb_serial_flush_callback+0x60>)
    9da0:	ldrh	r2, [r5, #0]
    9da2:	cbnz	r2, 9da6 <usb_serial_flush_callback+0x1a>
    9da4:	pop	{r3, r4, r5, r6, r7, pc}
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9da6:	ldr	r7, [pc, #72]	; (9df0 <usb_serial_flush_callback+0x64>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9da8:	mov	r3, r4
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9daa:	ldr	r6, [pc, #72]	; (9df4 <usb_serial_flush_callback+0x68>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9dac:	rsb	r2, r2, #256	; 0x100
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9db0:	ldrb	r1, [r7, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9db2:	ldr	r0, [pc, #68]	; (9df8 <usb_serial_flush_callback+0x6c>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9db4:	add.w	r6, r6, r1, lsl #5
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    9db8:	add.w	r1, r0, r1, lsl #8
    9dbc:	mov	r0, r6
    9dbe:	bl	ab8c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9dc2:	mov	r1, r6
    9dc4:	movs	r0, #4
    9dc6:	bl	abbc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9dca:	ldrb	r3, [r7, #0]
    9dcc:	adds	r3, #1
    9dce:	uxtb	r3, r3
    9dd0:	cmp	r3, #6
    9dd2:	it	ls
    9dd4:	strbls	r3, [r7, #0]
	tx_available = 0;
    9dd6:	mov.w	r3, #0
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    9dda:	it	hi
    9ddc:	strbhi	r4, [r7, #0]
	tx_available = 0;
    9dde:	strh	r3, [r5, #0]
    9de0:	pop	{r3, r4, r5, r6, r7, pc}
    9de2:	nop
    9de4:	.word	0x2000da18
    9de8:	.word	0x2000dc90
    9dec:	.word	0x2000db60
    9df0:	.word	0x2000da19
    9df4:	.word	0x2000db80
    9df8:	.word	0x2000d318

00009dfc <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9dfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e00:	sub	sp, #20
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9e02:	mov	fp, r1
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9e04:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9e06:	cmp	r1, #0
    9e08:	beq.w	9f34 <usb_serial_write.part.1+0x138>
    9e0c:	movs	r3, #0
    9e0e:	ldr.w	r8, [pc, #320]	; 9f50 <usb_serial_write.part.1+0x154>
    9e12:	ldr.w	r9, [pc, #304]	; 9f44 <usb_serial_write.part.1+0x148>
    9e16:	str	r3, [sp, #4]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9e18:	ldr	r6, [pc, #284]	; (9f38 <usb_serial_write.part.1+0x13c>)
    9e1a:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9e1e:	ldr.w	sl, [pc, #308]	; 9f54 <usb_serial_write.part.1+0x158>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9e22:	ldr	r2, [pc, #280]	; (9f3c <usb_serial_write.part.1+0x140>)
    9e24:	ldrb	r4, [r2, #0]
    9e26:	ldr	r2, [pc, #280]	; (9f40 <usb_serial_write.part.1+0x144>)
    9e28:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9e2c:	cmp	r3, #0
    9e2e:	bne.n	9eec <usb_serial_write.part.1+0xf0>
    9e30:	mov	r5, r3
    9e32:	mov	r4, r3
    9e34:	b.n	9e60 <usb_serial_write.part.1+0x64>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9e36:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9e3a:	cbnz	r4, 9e3e <usb_serial_write.part.1+0x42>
				wait_begin_at = systick_millis_count;
    9e3c:	ldr	r5, [r6, #0]
    9e3e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9e40:	cmp	r3, #0
    9e42:	bne.n	9ee0 <usb_serial_write.part.1+0xe4>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9e44:	ldr	r3, [r6, #0]
    9e46:	subs	r3, r3, r5
    9e48:	cmp	r3, #120	; 0x78
    9e4a:	bhi.n	9f28 <usb_serial_write.part.1+0x12c>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9e4c:	ldrb.w	r3, [sl]
    9e50:	cmp	r3, #0
    9e52:	beq.n	9ee0 <usb_serial_write.part.1+0xe4>
			yield();
    9e54:	bl	b684 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9e58:	ldrh.w	r3, [r8]
    9e5c:	cmp	r3, #0
    9e5e:	bne.n	9ee8 <usb_serial_write.part.1+0xec>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9e60:	mov	r0, r7
    9e62:	bl	ac08 <usb_transfer_status>
			if (!(status & 0x80)) {
    9e66:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9e6a:	ldr	r2, [pc, #216]	; (9f44 <usb_serial_write.part.1+0x148>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    9e6c:	bne.n	9e36 <usb_serial_write.part.1+0x3a>
    9e6e:	ldr	r2, [pc, #204]	; (9f3c <usb_serial_write.part.1+0x140>)
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9e70:	mov.w	r3, #256	; 0x100
				transmit_previous_timeout = 0;
    9e74:	strb.w	r0, [r9]
    9e78:	ldrb	r4, [r2, #0]
    9e7a:	mov	r2, r3
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9e7c:	ldr	r1, [pc, #200]	; (9f48 <usb_serial_write.part.1+0x14c>)
    9e7e:	lsls	r4, r4, #8
		if (size >= tx_available) {
    9e80:	cmp	fp, r2
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9e82:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9e86:	add	r0, r4
    9e88:	add	r0, r1
		if (size >= tx_available) {
    9e8a:	bcc.n	9efe <usb_serial_write.part.1+0x102>
			memcpy(txdata, data, tx_available);
    9e8c:	ldr	r1, [sp, #8]
    9e8e:	bl	9c30 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
    9e92:	ldr	r3, [pc, #180]	; (9f48 <usb_serial_write.part.1+0x14c>)
    9e94:	mov.w	r2, #256	; 0x100
    9e98:	mov	r0, r7
    9e9a:	adds	r1, r3, r4
    9e9c:	movs	r3, #0
    9e9e:	bl	ab8c <usb_prepare_transfer>
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9ea2:	mov	r1, r7
    9ea4:	movs	r0, #4
    9ea6:	bl	abbc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9eaa:	ldr	r3, [pc, #144]	; (9f3c <usb_serial_write.part.1+0x140>)
    9eac:	ldr	r2, [pc, #140]	; (9f3c <usb_serial_write.part.1+0x140>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9eae:	movs	r1, #0
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9eb0:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9eb2:	ldr	r0, [pc, #152]	; (9f4c <usb_serial_write.part.1+0x150>)
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9eb4:	adds	r3, #1
    9eb6:	uxtb	r3, r3
    9eb8:	cmp	r3, #6
    9eba:	it	hi
    9ebc:	movhi	r3, #0
    9ebe:	strb	r3, [r2, #0]
			size -= tx_available;
    9ec0:	ldrh.w	r2, [r8]
			sent += tx_available;
    9ec4:	ldr	r3, [sp, #4]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9ec6:	subs.w	fp, fp, r2
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9eca:	strh.w	r1, [r8]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE, 0);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    9ece:	add	r3, r2
    9ed0:	str	r3, [sp, #4]
			data += tx_available;
    9ed2:	ldr	r3, [sp, #8]
    9ed4:	add	r3, r2
    9ed6:	str	r3, [sp, #8]
    9ed8:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9eda:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9ede:	bne.n	9e22 <usb_serial_write.part.1+0x26>
    9ee0:	ldr	r0, [sp, #4]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9ee2:	add	sp, #20
    9ee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ee8:	ldr	r2, [pc, #80]	; (9f3c <usb_serial_write.part.1+0x140>)
    9eea:	ldrb	r4, [r2, #0]
    9eec:	mov	r2, r3
    9eee:	rsb	r0, r3, #256	; 0x100
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9ef2:	lsls	r4, r4, #8
    9ef4:	ldr	r1, [pc, #80]	; (9f48 <usb_serial_write.part.1+0x14c>)
		if (size >= tx_available) {
    9ef6:	cmp	fp, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9ef8:	add	r0, r4
    9efa:	add	r0, r1
		if (size >= tx_available) {
    9efc:	bcs.n	9e8c <usb_serial_write.part.1+0x90>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9efe:	ldr	r1, [sp, #8]
    9f00:	mov	r2, fp
    9f02:	str	r3, [sp, #12]
    9f04:	bl	9c30 <memcpy>
			tx_available -= size;
    9f08:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f0a:	mov.w	r1, #3221225472	; 0xc0000000
    9f0e:	ldr	r2, [pc, #60]	; (9f4c <usb_serial_write.part.1+0x150>)
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9f10:	rsb	r3, fp, r3
    9f14:	strh.w	r3, [r8]
    9f18:	ldr	r3, [sp, #4]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f1a:	str.w	r1, [r2, #132]	; 0x84
    9f1e:	add	r3, fp
    9f20:	mov	r0, r3
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9f22:	add	sp, #20
    9f24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9f28:	movs	r3, #1
				return sent;
    9f2a:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9f2c:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9f2e:	add	sp, #20
    9f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9f34:	mov	r0, r1
    9f36:	b.n	9ee2 <usb_serial_write.part.1+0xe6>
    9f38:	.word	0x2000dc98
    9f3c:	.word	0x2000da19
    9f40:	.word	0x2000db80
    9f44:	.word	0x2000dc60
    9f48:	.word	0x2000d318
    9f4c:	.word	0x402e0000
    9f50:	.word	0x2000db60
    9f54:	.word	0x2000dc90

00009f58 <usb_serial_reset>:
	rx_count[index] = len;
	rx_index[index] = 0;
}

void usb_serial_reset(void)
{
    9f58:	bx	lr
    9f5a:	nop

00009f5c <usb_serial_configure>:
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f5c:	movs	r1, #0
    9f5e:	movs	r2, #224	; 0xe0
    9f60:	ldr	r0, [pc, #128]	; (9fe4 <usb_serial_configure+0x88>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    9f62:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9f64:	mov	r4, r1
    9f66:	ldr	r6, [pc, #128]	; (9fe8 <usb_serial_configure+0x8c>)
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f68:	ldr	r5, [pc, #128]	; (9fec <usb_serial_configure+0x90>)
}

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9f6a:	bl	c814 <memset>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9f6e:	ldr	r7, [pc, #128]	; (9ff0 <usb_serial_configure+0x94>)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f70:	mov	r1, r4
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9f72:	ldr	r3, [pc, #128]	; (9ff4 <usb_serial_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f74:	movs	r2, #96	; 0x60

void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9f76:	strb	r4, [r6, #0]
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f78:	mov	r0, r5
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9f7a:	ldr	r6, [pc, #124]	; (9ff8 <usb_serial_configure+0x9c>)
void usb_serial_configure(void)
{
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9f7c:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9f7e:	bl	c814 <memset>
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    9f82:	mov	r3, r4
    9f84:	mov	r2, r4
    9f86:	movs	r1, #16
    9f88:	movs	r0, #2
	printf("usb_serial_configure\n");
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9f8a:	str	r4, [r7, #0]
    9f8c:	strh	r4, [r7, #4]
	memset(rx_index, 0, sizeof(rx_index));
    9f8e:	str	r4, [r6, #0]
    9f90:	strh	r4, [r6, #4]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL);
    9f92:	bl	ab24 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, CDC_RX_SIZE, 0, rx_event);
    9f96:	mov	r2, r4
    9f98:	ldr	r3, [pc, #96]	; (9ffc <usb_serial_configure+0xa0>)
    9f9a:	movs	r1, #64	; 0x40
    9f9c:	movs	r0, #3
    9f9e:	bl	aac0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, CDC_TX_SIZE, 0, NULL);
    9fa2:	mov	r3, r4
    9fa4:	mov	r2, r4
    9fa6:	movs	r1, #64	; 0x40
    9fa8:	movs	r0, #4
    9faa:	bl	ab24 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    9fae:	mov	r3, r4
    9fb0:	movs	r2, #64	; 0x40
    9fb2:	mov	r0, r5
    9fb4:	ldr	r1, [pc, #72]	; (a000 <usb_serial_configure+0xa4>)
    9fb6:	bl	ab8c <usb_prepare_transfer>
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    9fba:	mov	r1, r5
    9fbc:	movs	r0, #3
    9fbe:	bl	abe4 <usb_receive>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    9fc2:	ldr	r3, [pc, #64]	; (a004 <usb_serial_configure+0xa8>)
	USB1_GPTIMER0LD = microseconds - 1;
    9fc4:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9fc6:	ldr	r1, [pc, #64]	; (a008 <usb_serial_configure+0xac>)
    9fc8:	ldr	r0, [pc, #64]	; (a00c <usb_serial_configure+0xb0>)
    9fca:	str	r0, [r1, #0]
	USB1_GPTIMER0CTRL = 0;
    9fcc:	str.w	r4, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9fd0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9fd4:	ldr.w	r2, [r3, #328]	; 0x148
    9fd8:	orr.w	r2, r2, #16777216	; 0x1000000
    9fdc:	str.w	r2, [r3, #328]	; 0x148
    9fe0:	pop	{r3, r4, r5, r6, r7, pc}
    9fe2:	nop
    9fe4:	.word	0x2000db80
    9fe8:	.word	0x2000da19
    9fec:	.word	0x2000db00
    9ff0:	.word	0x2000dae4
    9ff4:	.word	0x2000db60
    9ff8:	.word	0x2000dadc
    9ffc:	.word	0x00009d65
    a000:	.word	0x2000da1c
    a004:	.word	0x402e0000
    a008:	.word	0x2000dc64
    a00c:	.word	0x00009d8d

0000a010 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a010:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a012:	ldr	r5, [pc, #56]	; (a04c <usb_serial_getchar+0x3c>)
    a014:	ldr	r3, [pc, #56]	; (a050 <usb_serial_getchar+0x40>)
    a016:	ldrh	r2, [r5, #0]
    a018:	ldrh	r0, [r3, #0]
    a01a:	cmp	r2, r0
    a01c:	bcs.n	a046 <usb_serial_getchar+0x36>
		int c = rx_buffer[rx_index[0]++];
    a01e:	adds	r3, r2, #1
    a020:	ldr	r1, [pc, #48]	; (a054 <usb_serial_getchar+0x44>)
    a022:	uxth	r3, r3
    a024:	ldrb	r4, [r1, r2]
		if (rx_index[0] >= rx_count[0]) {
    a026:	cmp	r0, r3

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
    a028:	strh	r3, [r5, #0]
		if (rx_index[0] >= rx_count[0]) {
    a02a:	bls.n	a030 <usb_serial_getchar+0x20>
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
		}
		return c;
    a02c:	mov	r0, r4
	}
	return -1;
}
    a02e:	pop	{r3, r4, r5, pc}
{
	if (rx_index[0] < rx_count[0]) {
		int c = rx_buffer[rx_index[0]++];
		if (rx_index[0] >= rx_count[0]) {
			// reschedule transfer
			usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a030:	movs	r3, #0
    a032:	movs	r2, #64	; 0x40
    a034:	ldr	r0, [pc, #32]	; (a058 <usb_serial_getchar+0x48>)
    a036:	bl	ab8c <usb_prepare_transfer>
			usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a03a:	ldr	r1, [pc, #28]	; (a058 <usb_serial_getchar+0x48>)
    a03c:	movs	r0, #3
    a03e:	bl	abe4 <usb_receive>
		}
		return c;
    a042:	mov	r0, r4
    a044:	pop	{r3, r4, r5, pc}
	}
	return -1;
    a046:	mov.w	r0, #4294967295
    a04a:	pop	{r3, r4, r5, pc}
    a04c:	.word	0x2000dadc
    a050:	.word	0x2000dae4
    a054:	.word	0x2000da1c
    a058:	.word	0x2000db00

0000a05c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (rx_index[0] < rx_count[0]) {
    a05c:	ldr	r3, [pc, #20]	; (a074 <usb_serial_peekchar+0x18>)
    a05e:	ldr	r2, [pc, #24]	; (a078 <usb_serial_peekchar+0x1c>)
    a060:	ldrh	r3, [r3, #0]
    a062:	ldrh	r2, [r2, #0]
    a064:	cmp	r2, r3
    a066:	bls.n	a06e <usb_serial_peekchar+0x12>
		return rx_buffer[rx_index[0]];
    a068:	ldr	r2, [pc, #16]	; (a07c <usb_serial_peekchar+0x20>)
    a06a:	ldrb	r0, [r2, r3]
    a06c:	bx	lr
	}

	return -1;
    a06e:	mov.w	r0, #4294967295
}
    a072:	bx	lr
    a074:	.word	0x2000dadc
    a078:	.word	0x2000dae4
    a07c:	.word	0x2000da1c

0000a080 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_count[0] - rx_index[0];
    a080:	ldr	r2, [pc, #8]	; (a08c <usb_serial_available+0xc>)
    a082:	ldr	r3, [pc, #12]	; (a090 <usb_serial_available+0x10>)
    a084:	ldrh	r0, [r2, #0]
    a086:	ldrh	r3, [r3, #0]
}
    a088:	subs	r0, r0, r3
    a08a:	bx	lr
    a08c:	.word	0x2000dae4
    a090:	.word	0x2000dadc

0000a094 <usb_serial_flush_input>:
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    a094:	push	{r3, r4, r5, lr}
	if (rx_index[0] < rx_count[0]) {
    a096:	ldr	r3, [pc, #40]	; (a0c0 <usb_serial_flush_input+0x2c>)
    a098:	ldr	r4, [pc, #40]	; (a0c4 <usb_serial_flush_input+0x30>)
    a09a:	ldrh	r5, [r3, #0]
    a09c:	ldrh	r3, [r4, #0]
    a09e:	cmp	r3, r5
    a0a0:	bcc.n	a0a4 <usb_serial_flush_input+0x10>
    a0a2:	pop	{r3, r4, r5, pc}
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a0a4:	movs	r3, #0
    a0a6:	ldr	r1, [pc, #32]	; (a0c8 <usb_serial_flush_input+0x34>)
    a0a8:	ldr	r0, [pc, #32]	; (a0cc <usb_serial_flush_input+0x38>)
    a0aa:	movs	r2, #64	; 0x40

// discard any buffered input
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
    a0ac:	strh	r5, [r4, #0]
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
    a0ae:	bl	ab8c <usb_prepare_transfer>
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a0b2:	ldr	r1, [pc, #24]	; (a0cc <usb_serial_flush_input+0x38>)
    a0b4:	movs	r0, #3
	}
}
    a0b6:	ldmia.w	sp!, {r3, r4, r5, lr}
void usb_serial_flush_input(void)
{
	if (rx_index[0] < rx_count[0]) {
		rx_index[0] = rx_count[0];
		usb_prepare_transfer(rx_transfer + 0, rx_buffer + 0, CDC_RX_SIZE, 0);
		usb_receive(CDC_RX_ENDPOINT, rx_transfer + 0);
    a0ba:	b.w	abe4 <usb_receive>
    a0be:	nop
    a0c0:	.word	0x2000dae4
    a0c4:	.word	0x2000dadc
    a0c8:	.word	0x2000da1c
    a0cc:	.word	0x2000db00

0000a0d0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a0d0:	ldr	r3, [pc, #36]	; (a0f8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a0d2:	push	{lr}
    a0d4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a0d6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a0d8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a0dc:	cbnz	r3, a0e8 <usb_serial_putchar+0x18>
    a0de:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a0e2:	add	sp, #12
    a0e4:	ldr.w	pc, [sp], #4
    a0e8:	movs	r1, #1
    a0ea:	add.w	r0, sp, #7
    a0ee:	bl	9dfc <usb_serial_write.part.1>
    a0f2:	add	sp, #12
    a0f4:	ldr.w	pc, [sp], #4
    a0f8:	.word	0x2000dc90

0000a0fc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a0fc:	ldr	r3, [pc, #16]	; (a110 <usb_serial_write+0x14>)
    a0fe:	ldrb	r3, [r3, #0]
    a100:	and.w	r2, r3, #255	; 0xff
    a104:	cbz	r3, a10a <usb_serial_write+0xe>
    a106:	b.w	9dfc <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a10a:	mov	r0, r2
    a10c:	bx	lr
    a10e:	nop
    a110:	.word	0x2000dc90

0000a114 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a114:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a118:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a11a:	ldr.w	r8, [pc, #64]	; a15c <usb_serial_write_buffer_free+0x48>
    a11e:	movs	r3, #1
    a120:	ldr	r5, [pc, #48]	; (a154 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a122:	mov	r7, r4
    a124:	ldr	r6, [pc, #48]	; (a158 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a126:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a12a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a12c:	mov	r0, r5
    a12e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a130:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a132:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a136:	beq.n	a144 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a138:	bl	ac08 <usb_transfer_status>
    a13c:	lsls	r3, r0, #24
    a13e:	it	pl
    a140:	addpl.w	r7, r7, #256	; 0x100

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a144:	cmp	r4, #7
    a146:	bne.n	a12a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a148:	movs	r3, #0
	return sum;
}
    a14a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a14c:	strb.w	r3, [r8]
	return sum;
}
    a150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a154:	.word	0x2000db80
    a158:	.word	0x2000da19
    a15c:	.word	0x2000da18

0000a160 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a160:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    a162:	ldr	r3, [pc, #80]	; (a1b4 <usb_serial_flush_output+0x54>)
    a164:	ldrb	r3, [r3, #0]
    a166:	cbz	r3, a16e <usb_serial_flush_output+0xe>
	if (tx_available == 0) return;
    a168:	ldr	r4, [pc, #76]	; (a1b8 <usb_serial_flush_output+0x58>)
    a16a:	ldrh	r2, [r4, #0]
    a16c:	cbnz	r2, a170 <usb_serial_flush_output+0x10>
    a16e:	pop	{r3, r4, r5, r6, r7, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a170:	ldr	r6, [pc, #72]	; (a1bc <usb_serial_flush_output+0x5c>)

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a172:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a176:	ldr	r5, [pc, #72]	; (a1c0 <usb_serial_flush_output+0x60>)
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a178:	movs	r3, #0
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a17a:	ldrb	r1, [r6, #0]
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a17c:	rsb	r2, r2, #256	; 0x100
    a180:	ldr	r0, [pc, #64]	; (a1c4 <usb_serial_flush_output+0x64>)
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a182:	add.w	r5, r5, r1, lsl #5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a186:	ldr	r7, [pc, #64]	; (a1c8 <usb_serial_flush_output+0x68>)
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a188:	add.w	r1, r0, r1, lsl #8
    a18c:	mov	r0, r5

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a18e:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	usb_prepare_transfer(xfer, txbuffer + (tx_head * TX_SIZE), TX_SIZE - tx_available, 0);
    a192:	bl	ab8c <usb_prepare_transfer>
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a196:	mov	r1, r5
    a198:	movs	r0, #4
    a19a:	bl	abbc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a19e:	ldrb	r3, [r6, #0]
    a1a0:	adds	r3, #1
    a1a2:	uxtb	r3, r3
    a1a4:	cmp	r3, #6
    a1a6:	it	hi
    a1a8:	movhi	r3, #0
    a1aa:	strb	r3, [r6, #0]
	tx_available = 0;
    a1ac:	movs	r3, #0
    a1ae:	strh	r3, [r4, #0]
	tx_noautoflush = 0;
    a1b0:	strb	r3, [r7, #0]
    a1b2:	pop	{r3, r4, r5, r6, r7, pc}
    a1b4:	.word	0x2000dc90
    a1b8:	.word	0x2000db60
    a1bc:	.word	0x2000da19
    a1c0:	.word	0x2000db80
    a1c4:	.word	0x2000d318
    a1c8:	.word	0x2000da18

0000a1cc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1cc:	ldr	r2, [pc, #556]	; (a3fc <set_arm_clock+0x230>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1ce:	ldr	r3, [pc, #560]	; (a400 <set_arm_clock+0x234>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1d0:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a1d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a1d6:	ldr	r5, [pc, #556]	; (a404 <set_arm_clock+0x238>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a1d8:	ldr	r4, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a1da:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a1dc:	ldr	r7, [r5, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a1de:	bls.n	a21c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a1e0:	ldr	r3, [pc, #548]	; (a408 <set_arm_clock+0x23c>)
    a1e2:	cmp	r0, r3
    a1e4:	bls.w	a3e8 <set_arm_clock+0x21c>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a1e8:	ldr	r3, [pc, #544]	; (a40c <set_arm_clock+0x240>)
    a1ea:	movw	r6, #1300	; 0x514
    a1ee:	ldr.w	lr, [pc, #600]	; a448 <set_arm_clock+0x27c>
    a1f2:	add	r3, r0
    a1f4:	ldr	r5, [pc, #536]	; (a410 <set_arm_clock+0x244>)
    a1f6:	lsrs	r2, r3, #8
    a1f8:	umull	r3, r2, lr, r2
    a1fc:	lsrs	r3, r2, #7
    a1fe:	add.w	r3, r3, r3, lsl #2
    a202:	add.w	r2, r3, r3, lsl #2
    a206:	addw	r3, r2, #1250	; 0x4e2
    a20a:	cmp	r3, r6
    a20c:	it	cs
    a20e:	movcs	r3, r6
    a210:	sub.w	r3, r3, #800	; 0x320
    a214:	umull	r3, r6, r5, r3
    a218:	lsrs	r6, r6, #3
    a21a:	b.n	a224 <set_arm_clock+0x58>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24) {
    a21c:	cmp	r0, #25
    a21e:	ite	cc
    a220:	movcc	r6, #6
    a222:	movcs	r6, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a224:	ldr	r2, [pc, #472]	; (a400 <set_arm_clock+0x234>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a226:	and.w	lr, r7, #31
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a22a:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a22e:	cmp	lr, r6
	} else if (frequency <= 24) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a230:	orr.w	r3, r3, #192	; 0xc0
    a234:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a238:	bcs.n	a250 <set_arm_clock+0x84>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a23a:	ldr	r3, [pc, #456]	; (a404 <set_arm_clock+0x238>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a23c:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a240:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a242:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a244:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a246:	ldr	r3, [r2, #0]
    a248:	cmp	r3, #0
    a24a:	bge.n	a246 <set_arm_clock+0x7a>
    a24c:	and.w	lr, r7, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a250:	ands.w	r3, r4, #33554432	; 0x2000000
    a254:	bne.n	a2b4 <set_arm_clock+0xe8>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a256:	ldr	r5, [pc, #444]	; (a414 <set_arm_clock+0x248>)
    a258:	ldr	r2, [pc, #444]	; (a418 <set_arm_clock+0x24c>)
    a25a:	ldr.w	ip, [r5, #16]
    a25e:	mov	r5, r2
    a260:	and.w	r2, ip, r2
    a264:	cmp	r2, r5
    a266:	itet	eq
    a268:	moveq.w	r3, #402653184	; 0x18000000
    a26c:	movne.w	r2, #4096	; 0x1000
    a270:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a272:	eor.w	r5, r4, r3
    a276:	tst.w	r5, #939524096	; 0x38000000
    a27a:	beq.n	a28a <set_arm_clock+0xbe>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a27c:	bic.w	r4, r4, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a280:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a284:	ldr	r5, [pc, #376]	; (a400 <set_arm_clock+0x234>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a286:	orrs	r4, r3
			CCM_CBCDR = cbcdr;
    a288:	str	r4, [r5, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a28a:	eor.w	r3, r1, r2
    a28e:	tst.w	r3, #12288	; 0x3000
    a292:	beq.n	a2a6 <set_arm_clock+0xda>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a294:	ldr	r3, [pc, #360]	; (a400 <set_arm_clock+0x234>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a296:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a29a:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a29c:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a29e:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a2a0:	ldr	r3, [r2, #72]	; 0x48
    a2a2:	lsls	r5, r3, #28
    a2a4:	bmi.n	a2a0 <set_arm_clock+0xd4>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a2a6:	orr.w	r4, r4, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a2aa:	ldr	r2, [pc, #340]	; (a400 <set_arm_clock+0x234>)
    a2ac:	str	r4, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a2ae:	ldr	r3, [r2, #72]	; 0x48
    a2b0:	lsls	r1, r3, #26
    a2b2:	bmi.n	a2ae <set_arm_clock+0xe2>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a2b4:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a2b6:	ldr	r5, [pc, #356]	; (a41c <set_arm_clock+0x250>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a2b8:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2ba:	mul.w	r3, r1, r2
    a2be:	mul.w	r3, r0, r3
    a2c2:	cmp	r3, r5
    a2c4:	bhi.n	a2da <set_arm_clock+0x10e>
		if (div_arm < 8) {
    a2c6:	cmp	r2, #7
    a2c8:	bhi.w	a3d4 <set_arm_clock+0x208>
			div_arm = div_arm + 1;
    a2cc:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a2ce:	mul.w	r3, r1, r2
    a2d2:	mul.w	r3, r0, r3
    a2d6:	cmp	r3, r5
    a2d8:	bls.n	a2c6 <set_arm_clock+0xfa>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a2da:	ldr	r0, [pc, #324]	; (a420 <set_arm_clock+0x254>)
    a2dc:	ldr	r5, [pc, #324]	; (a424 <set_arm_clock+0x258>)
    a2de:	add	r0, r3
    a2e0:	umull	r3, r0, r5, r0
    a2e4:	lsrs	r3, r0, #20
	if (mult > 108) mult = 108;
    a2e6:	cmp	r3, #108	; 0x6c
    a2e8:	bhi.n	a3de <set_arm_clock+0x212>
	if (mult < 54) mult = 54;
    a2ea:	cmp	r3, #53	; 0x35
    a2ec:	bhi.n	a3ec <set_arm_clock+0x220>
    a2ee:	ldr.w	r8, [pc, #348]	; a44c <set_arm_clock+0x280>
    a2f2:	movs	r3, #54	; 0x36
    a2f4:	ldr	r0, [pc, #304]	; (a428 <set_arm_clock+0x25c>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a2f6:	ldr.w	ip, [pc, #284]	; a414 <set_arm_clock+0x248>
    a2fa:	ldr	r5, [pc, #304]	; (a42c <set_arm_clock+0x260>)
    a2fc:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a300:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a304:	and.w	r5, r9, r5
    a308:	cmp	r5, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a30a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a30e:	beq.n	a328 <set_arm_clock+0x15c>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a310:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a314:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a318:	mov	r5, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a31a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a31e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a322:	ldr	r3, [r5, #0]
    a324:	cmp	r3, #0
    a326:	bge.n	a322 <set_arm_clock+0x156>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a328:	ldr.w	ip, [pc, #212]	; a400 <set_arm_clock+0x234>
    a32c:	subs	r2, #1
    a32e:	ldr.w	r3, [ip, #16]
    a332:	and.w	r3, r3, #7
    a336:	cmp	r3, r2
    a338:	beq.n	a34a <set_arm_clock+0x17e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a33a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a33e:	mov	r5, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a340:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a344:	ldr	r3, [r5, #72]	; 0x48
    a346:	lsls	r3, r3, #15
    a348:	bmi.n	a344 <set_arm_clock+0x178>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a34a:	subs	r1, #1
    a34c:	lsls	r1, r1, #10
    a34e:	eor.w	r3, r4, r1
    a352:	tst.w	r3, #7168	; 0x1c00
    a356:	beq.n	a36e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a358:	ldr	r3, [pc, #164]	; (a400 <set_arm_clock+0x234>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a35a:	bic.w	r4, r4, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a35e:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a362:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a364:	orrs	r4, r1
		CCM_CBCDR = cbcdr;
    a366:	str	r4, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a368:	ldr	r3, [r2, #72]	; 0x48
    a36a:	lsls	r1, r3, #30
    a36c:	bmi.n	a368 <set_arm_clock+0x19c>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a36e:	ldr	r3, [pc, #192]	; (a430 <set_arm_clock+0x264>)
    a370:	ldr	r1, [pc, #192]	; (a434 <set_arm_clock+0x268>)
    a372:	add	r3, r0
    a374:	lsrs	r3, r3, #7
    a376:	umull	r3, r1, r1, r3
    a37a:	lsrs	r1, r1, #12
    a37c:	cmp	r1, #4
    a37e:	it	cs
    a380:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a382:	subs	r3, r1, #1
    a384:	lsls	r3, r3, #8
    a386:	eor.w	r2, r4, r3
    a38a:	tst.w	r2, #768	; 0x300
    a38e:	beq.n	a39e <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a390:	bic.w	r4, r4, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a394:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a398:	ldr	r2, [pc, #100]	; (a400 <set_arm_clock+0x234>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a39a:	orrs	r4, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a39c:	str	r4, [r2, #20]
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a39e:	ldr	r3, [pc, #96]	; (a400 <set_arm_clock+0x234>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a3a0:	bic.w	r4, r4, #33554432	; 0x2000000
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3a4:	mov	r2, r3
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
	}

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
    a3a6:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a3a8:	ldr	r3, [r2, #72]	; 0x48
    a3aa:	lsls	r3, r3, #26
    a3ac:	bmi.n	a3a8 <set_arm_clock+0x1dc>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3ae:	udiv	r1, r0, r1

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3b2:	ldr	r2, [pc, #132]	; (a438 <set_arm_clock+0x26c>)
	F_BUS_ACTUAL = frequency / div_ipg;

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3b4:	cmp	r6, lr
	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a3b6:	ldr	r3, [pc, #132]	; (a43c <set_arm_clock+0x270>)

	cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	CCM_CBCDR = cbcdr;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a3b8:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a3ba:	str	r1, [r3, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a3bc:	bcs.n	a3d0 <set_arm_clock+0x204>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a3be:	ldr	r3, [pc, #68]	; (a404 <set_arm_clock+0x238>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a3c0:	bic.w	r7, r7, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a3c4:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a3c6:	orrs	r7, r6
		DCDC_REG3 = dcdc;
    a3c8:	str	r7, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a3ca:	ldr	r3, [r2, #0]
    a3cc:	cmp	r3, #0
    a3ce:	bge.n	a3ca <set_arm_clock+0x1fe>
	}

	return frequency;
}
    a3d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a3d4:	cmp	r1, #4
    a3d6:	bhi.n	a2da <set_arm_clock+0x10e>
				div_ahb = div_ahb + 1;
    a3d8:	adds	r1, #1
				div_arm = 1;
    a3da:	movs	r2, #1
    a3dc:	b.n	a2ba <set_arm_clock+0xee>
    a3de:	ldr.w	r8, [pc, #112]	; a450 <set_arm_clock+0x284>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a3e2:	movs	r3, #108	; 0x6c
    a3e4:	ldr	r0, [pc, #88]	; (a440 <set_arm_clock+0x274>)
    a3e6:	b.n	a2f6 <set_arm_clock+0x12a>
    a3e8:	movs	r6, #18
    a3ea:	b.n	a224 <set_arm_clock+0x58>
    a3ec:	ldr	r0, [pc, #84]	; (a444 <set_arm_clock+0x278>)
    a3ee:	ldr.w	r8, [pc, #100]	; a454 <set_arm_clock+0x288>
    a3f2:	mul.w	r0, r0, r3
    a3f6:	orr.w	r8, r3, r8
    a3fa:	b.n	a2f6 <set_arm_clock+0x12a>
    a3fc:	.word	0x1f78a400
    a400:	.word	0x400fc000
    a404:	.word	0x40080000
    a408:	.word	0x23c34600
    a40c:	.word	0xdc3cba00
    a410:	.word	0x51eb851f
    a414:	.word	0x400d8000
    a418:	.word	0x80003040
    a41c:	.word	0x269fb1ff
    a420:	.word	0x005b8d80
    a424:	.word	0x165e9f81
    a428:	.word	0x269fb200
    a42c:	.word	0x8001307f
    a430:	.word	0x08f0d17f
    a434:	.word	0x00e5109f
    a438:	.word	0x20000dc8
    a43c:	.word	0x20000dc4
    a440:	.word	0x4d3f6400
    a444:	.word	0x00b71b00
    a448:	.word	0x004cb223
    a44c:	.word	0x80002036
    a450:	.word	0x8000206c
    a454:	.word	0x80002000

0000a458 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a458:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    a45a:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a45c:	cbz	r3, a466 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a45e:	ldr	r3, [r2, #4]
    a460:	orr.w	r3, r3, #32768	; 0x8000
    a464:	str	r3, [r2, #4]
	}
	__disable_irq();
    a466:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a468:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a46a:	cbz	r4, a494 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a46c:	ldr	r3, [pc, #64]	; (a4b0 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    a46e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a470:	ldr.w	r4, [r3, #432]	; 0x1b0
    a474:	tst	r4, r1
    a476:	bne.n	a4a8 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a478:	ldr.w	r4, [r3, #320]	; 0x140
    a47c:	orr.w	r4, r4, #16384	; 0x4000
    a480:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a484:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    a488:	ldr.w	r4, [r3, #320]	; 0x140
    a48c:	lsls	r4, r4, #17
    a48e:	bpl.n	a478 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a490:	tst	r1, r5
    a492:	bne.n	a4a8 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    a494:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    a496:	ldr	r4, [pc, #24]	; (a4b0 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    a498:	str	r2, [r0, #8]
	endpoint->status = 0;
    a49a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    a49c:	ldr.w	r3, [r4, #432]	; 0x1b0
    a4a0:	orrs	r1, r3
    a4a2:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a4a6:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    a4a8:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a4aa:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a4ac:	pop	{r4, r5}
    a4ae:	bx	lr
    a4b0:	.word	0x402e0000

0000a4b4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a4b4:	push	{r3, r4, r5, lr}
    a4b6:	mov	r5, r0
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
    a4b8:	ldr	r3, [r0, #48]	; 0x30
	while (t && (uint32_t)t != 1) {
    a4ba:	b.n	a4ca <run_callbacks+0x16>
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a4bc:	ldr	r2, [r5, #56]	; 0x38
	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
    a4be:	ldr	r4, [r3, #0]
			ep->callback_function(t);
    a4c0:	blx	r2
		} else {
			// transfer still active
			ep->first_transfer = t;
			return;
		}
		if (next == ep->last_transfer) break;
    a4c2:	ldr	r2, [r5, #52]	; 0x34
    a4c4:	mov	r3, r4
    a4c6:	cmp	r4, r2
    a4c8:	beq.n	a4dc <run_callbacks+0x28>
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
		if (!(t->status & (1<<7))) {
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
    a4ca:	mov	r0, r3
{
	transfer_t *t, *next;

	//printf("run_callbacks\n");
	t = ep->first_transfer;
	while (t && (uint32_t)t != 1) {
    a4cc:	cbz	r3, a4dc <run_callbacks+0x28>
    a4ce:	cmp	r3, #1
    a4d0:	beq.n	a4dc <run_callbacks+0x28>
		if (!(t->status & (1<<7))) {
    a4d2:	ldr	r2, [r3, #4]
    a4d4:	lsls	r2, r2, #24
    a4d6:	bpl.n	a4bc <run_callbacks+0x8>
			// transfer not active anymore
			next = (transfer_t *)t->next;
			ep->callback_function(t);
		} else {
			// transfer still active
			ep->first_transfer = t;
    a4d8:	str	r3, [r5, #48]	; 0x30
			return;
    a4da:	pop	{r3, r4, r5, pc}
		}
		if (next == ep->last_transfer) break;
		t = next;
	}
	// all transfers completed
	ep->first_transfer = NULL;
    a4dc:	movs	r3, #0
    a4de:	str	r3, [r5, #48]	; 0x30
	ep->last_transfer = NULL;
    a4e0:	str	r3, [r5, #52]	; 0x34
    a4e2:	pop	{r3, r4, r5, pc}

0000a4e4 <endpoint0_transmit.constprop.0>:
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a4e4:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    a4e6:	cbnz	r1, a51a <endpoint0_transmit.constprop.0+0x36>
    a4e8:	ldr	r4, [pc, #124]	; (a568 <endpoint0_transmit.constprop.0+0x84>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4ea:	ldr	r3, [pc, #128]	; (a56c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a4ec:	movs	r1, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a4ee:	ldr	r0, [pc, #128]	; (a570 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4f0:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a4f2:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    a4f4:	str	r3, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a4f6:	str	r2, [r3, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    a4f8:	mov	r2, r0
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a4fa:	str	r5, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    a4fc:	str	r1, [r4, #12]
	USB1_ENDPTPRIME |= (1<<0);
    a4fe:	ldr.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a502:	ldr	r5, [pc, #112]	; (a574 <endpoint0_transmit.constprop.0+0x90>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a504:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    a508:	str	r1, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTPRIME |= (1<<0);
    a50a:	str.w	r4, [r0, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a50e:	str	r1, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    a510:	ldr.w	r3, [r2, #432]	; 0x1b0
    a514:	cmp	r3, #0
    a516:	bne.n	a510 <endpoint0_transmit.constprop.0+0x2c>
}
    a518:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a51a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a51c:	ldr	r3, [pc, #88]	; (a578 <endpoint0_transmit.constprop.0+0x94>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a51e:	ldr	r5, [pc, #80]	; (a570 <endpoint0_transmit.constprop.0+0x8c>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a520:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a522:	ldr	r4, [pc, #68]	; (a568 <endpoint0_transmit.constprop.0+0x84>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a524:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a528:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a52a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a52c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a52e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    a532:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a534:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a538:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a53a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a53e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a542:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    a546:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a548:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a54a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a54e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a552:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a556:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a558:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    a55a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a55e:	ldr.w	r3, [r2, #432]	; 0x1b0
    a562:	cmp	r3, #0
    a564:	bne.n	a55e <endpoint0_transmit.constprop.0+0x7a>
    a566:	b.n	a4ea <endpoint0_transmit.constprop.0+0x6>
    a568:	.word	0x20010000
    a56c:	.word	0x2000f020
    a570:	.word	0x402e0000
    a574:	.word	0x2000dc70
    a578:	.word	0x2000f000

0000a57c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    a57c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a580:	ldr	r4, [pc, #696]	; (a83c <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    a582:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    a584:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a588:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    a58c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    a590:	beq.n	a650 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a592:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a596:	cmp	r3, #0
    a598:	beq.n	a646 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a59a:	mov.w	r9, #65537	; 0x10001
    a59e:	ldr.w	fp, [pc, #700]	; a85c <isr+0x2e0>
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a5a2:	mov	r6, r4
    a5a4:	ldr	r7, [pc, #664]	; (a840 <isr+0x2c4>)
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a5a6:	mov	sl, r9
    a5a8:	ldr	r1, [r7, #40]	; 0x28
    a5aa:	ldr	r2, [r7, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    a5ac:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a5b0:	ldr.w	r3, [r4, #320]	; 0x140
    a5b4:	orr.w	r3, r3, #8192	; 0x2000
    a5b8:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a5bc:	ldr.w	r3, [r4, #320]	; 0x140
    a5c0:	lsls	r5, r3, #18
    a5c2:	bpl.n	a5b0 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a5c4:	ldr.w	r3, [r6, #320]	; 0x140
    a5c8:	bic.w	r3, r3, #8192	; 0x2000
    a5cc:	str.w	r3, [r6, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a5d0:	str.w	sl, [r6, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a5d4:	ldr.w	r3, [r4, #436]	; 0x1b4
    a5d8:	ands.w	r3, r3, #65537	; 0x10001
    a5dc:	bne.n	a5d4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a5de:	uxth	r0, r1
    a5e0:	movw	r5, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    a5e4:	str.w	r3, [fp]
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a5e8:	cmp	r0, r5
    a5ea:	bhi.w	a70e <isr+0x192>
    a5ee:	cmp.w	r0, #1664	; 0x680
    a5f2:	bcs.w	a958 <isr+0x3dc>
    a5f6:	cmp.w	r0, #258	; 0x102
    a5fa:	beq.w	a878 <isr+0x2fc>
    a5fe:	bhi.w	a794 <isr+0x218>
    a602:	cmp	r0, #128	; 0x80
    a604:	beq.w	a822 <isr+0x2a6>
    a608:	cmp	r0, #130	; 0x82
    a60a:	bne.w	a784 <isr+0x208>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a60e:	uxth	r2, r2
    a610:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a614:	cmp	r1, #7
    a616:	bhi.w	a784 <isr+0x208>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a61a:	lsls	r1, r1, #2
    a61c:	ldr	r0, [pc, #548]	; (a844 <isr+0x2c8>)
		reply_buffer[0] = 0;
    a61e:	ldr	r5, [pc, #552]	; (a848 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a620:	add	r0, r1
    a622:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a624:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    a626:	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    a628:	strb	r3, [r5, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a62a:	bpl.w	a9aa <isr+0x42e>
    a62e:	lsls	r2, r1, #15
    a630:	bpl.n	a636 <isr+0xba>
			reply_buffer[0] = 1;
    a632:	movs	r3, #1
    a634:	strb	r3, [r5, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    a636:	movs	r1, #2
    a638:	ldr	r0, [pc, #524]	; (a848 <isr+0x2cc>)
    a63a:	bl	a4e4 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a63e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a642:	cmp	r3, #0
    a644:	bne.n	a5a8 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a646:	ldr	r2, [pc, #500]	; (a83c <isr+0x2c0>)
    a648:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a64c:	cmp	r3, #0
    a64e:	bne.n	a6da <isr+0x15e>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    a650:	tst.w	r8, #64	; 0x40
    a654:	beq.n	a688 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a656:	ldr	r3, [pc, #484]	; (a83c <isr+0x2c0>)
    a658:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a65c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a65e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a662:	ldr.w	r1, [r3, #444]	; 0x1bc
    a666:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a66a:	ldr.w	r4, [r2, #432]	; 0x1b0
    a66e:	ldr	r3, [pc, #460]	; (a83c <isr+0x2c0>)
    a670:	cmp	r4, #0
    a672:	bne.n	a66a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a674:	mov.w	r2, #4294967295
    a678:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a67c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    a680:	bl	9f58 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    a684:	ldr	r3, [pc, #452]	; (a84c <isr+0x2d0>)
    a686:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    a688:	tst.w	r8, #16777216	; 0x1000000
    a68c:	beq.n	a696 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a68e:	ldr	r3, [pc, #448]	; (a850 <isr+0x2d4>)
    a690:	ldr	r3, [r3, #0]
    a692:	cbz	r3, a696 <isr+0x11a>
    a694:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    a696:	tst.w	r8, #33554432	; 0x2000000
    a69a:	beq.n	a6a4 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a69c:	ldr	r3, [pc, #436]	; (a854 <isr+0x2d8>)
    a69e:	ldr	r3, [r3, #0]
    a6a0:	cbz	r3, a6a4 <isr+0x128>
    a6a2:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    a6a4:	tst.w	r8, #4
    a6a8:	beq.n	a6b0 <isr+0x134>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a6aa:	ldr	r3, [pc, #400]	; (a83c <isr+0x2c0>)
    a6ac:	ldr.w	r3, [r3, #388]	; 0x184
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a6b0:	ldr	r3, [pc, #392]	; (a83c <isr+0x2c0>)
    a6b2:	ldr.w	r2, [r3, #328]	; 0x148
    a6b6:	lsls	r2, r2, #24
    a6b8:	bpl.n	a6d4 <isr+0x158>
    a6ba:	tst.w	r8, #128	; 0x80
    a6be:	beq.n	a6d4 <isr+0x158>
		printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    a6c0:	ldr	r1, [pc, #404]	; (a858 <isr+0x2dc>)
    a6c2:	ldrb	r2, [r1, #0]
    a6c4:	cmp	r2, #0
    a6c6:	beq.w	a998 <isr+0x41c>
			if (--usb_reboot_timer == 0) {
    a6ca:	subs	r3, r2, #1
    a6cc:	uxtb	r3, r3
    a6ce:	strb	r3, [r1, #0]
    a6d0:	cbnz	r3, a6d4 <isr+0x158>
				asm("bkpt #251"); // run bootloader
    a6d2:	bkpt	0x00fb
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
		}
	}
}
    a6d4:	add	sp, #12
    a6d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a6da:	ldr	r1, [pc, #384]	; (a85c <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    a6dc:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    a6e0:	ldr	r0, [r1, #0]
    a6e2:	tst	r3, r0
    a6e4:	bne.w	aa26 <isr+0x4aa>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    a6e8:	ldr	r2, [pc, #352]	; (a84c <isr+0x2d0>)
    a6ea:	ldr	r4, [r2, #0]
			if (completestatus) {
    a6ec:	ands	r4, r3
    a6ee:	beq.n	a650 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a6f0:	lsls	r6, r4, #29
    a6f2:	bmi.w	aa60 <isr+0x4e4>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a6f6:	lsls	r5, r4, #13
    a6f8:	bmi.w	aa70 <isr+0x4f4>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    a6fc:	lsls	r0, r4, #28
    a6fe:	bmi.w	aa68 <isr+0x4ec>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    a702:	lsls	r1, r4, #12
    a704:	bpl.n	a650 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    a706:	ldr	r0, [pc, #344]	; (a860 <isr+0x2e4>)
    a708:	bl	a4b4 <run_callbacks>
    a70c:	b.n	a650 <isr+0xd4>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a70e:	movw	r5, #8225	; 0x2021
    a712:	cmp	r0, r5
    a714:	beq.n	a77c <isr+0x200>
    a716:	bhi.n	a7e0 <isr+0x264>
    a718:	cmp.w	r0, #2176	; 0x880
    a71c:	beq.w	a93c <isr+0x3c0>
    a720:	cmp.w	r0, #2304	; 0x900
    a724:	bne.n	a784 <isr+0x208>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a726:	ubfx	r1, r1, #16, #8
    a72a:	ldr	r2, [pc, #312]	; (a864 <isr+0x2e8>)
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a72c:	ldr	r0, [pc, #312]	; (a868 <isr+0x2ec>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    a72e:	strb	r1, [r2, #0]
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a730:	ldr	r1, [pc, #312]	; (a86c <isr+0x2f0>)
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a732:	ldr	r2, [pc, #316]	; (a870 <isr+0x2f4>)
    a734:	str	r3, [sp, #4]
			//printf(" ep=%d: cfg=%08lX - %08lX - %08lX\n", i + 1, n, m, p);
			reg++;
		}
#else
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a736:	str.w	r0, [r6, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a73a:	str.w	r1, [r6, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a73e:	str.w	r2, [r6, #464]	; 0x1d0
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    a742:	bl	9f5c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a746:	ldr	r2, [pc, #300]	; (a874 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a748:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a74a:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a74c:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    a74e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a750:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a752:	str	r3, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a754:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a758:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a75a:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a75c:	orr.w	r1, r1, #65536	; 0x10000
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a760:	ldr	r2, [pc, #248]	; (a85c <isr+0x2e0>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a762:	str.w	r1, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a766:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a768:	ldr.w	r3, [r4, #432]	; 0x1b0
    a76c:	cmp	r3, #0
    a76e:	bne.n	a768 <isr+0x1ec>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a770:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a774:	cmp	r3, #0
    a776:	bne.w	a5a8 <isr+0x2c>
    a77a:	b.n	a646 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    a77c:	lsrs	r0, r2, #16
    a77e:	cmp	r0, #7
    a780:	beq.w	a9b2 <isr+0x436>
		endpoint0_setupdata.bothwords = setupdata;
		endpoint0_receive(endpoint0_buffer, 7, 1);
		return;
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a784:	str.w	r9, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a788:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a78c:	cmp	r3, #0
    a78e:	bne.w	a5a8 <isr+0x2c>
    a792:	b.n	a646 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a794:	movw	r5, #770	; 0x302
    a798:	cmp	r0, r5
    a79a:	beq.w	a8e2 <isr+0x366>
    a79e:	cmp.w	r0, #1280	; 0x500
    a7a2:	bne.n	a784 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7a4:	ldr	r2, [pc, #204]	; (a874 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7);
    a7a6:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7a8:	movs	r5, #1
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a7aa:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a7ac:	str	r0, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7ae:	str	r5, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7b0:	ldr.w	r0, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a7b4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7b6:	orr.w	r3, r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a7ba:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7bc:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a7c0:	ldr.w	r3, [r4, #432]	; 0x1b0
    a7c4:	cmp	r3, #0
    a7c6:	bne.n	a7c0 <isr+0x244>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a7c8:	lsrs	r3, r1, #16
    a7ca:	lsls	r3, r3, #25
    a7cc:	orr.w	r3, r3, #16777216	; 0x1000000
    a7d0:	str.w	r3, [r6, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a7d4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a7d8:	cmp	r3, #0
    a7da:	bne.w	a5a8 <isr+0x2c>
    a7de:	b.n	a646 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl, datalen = 0;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    a7e0:	movw	r3, #8737	; 0x2221
    a7e4:	cmp	r0, r3
    a7e6:	beq.n	a8d0 <isr+0x354>
    a7e8:	movw	r3, #8993	; 0x2321
    a7ec:	cmp	r0, r3
    a7ee:	bne.n	a784 <isr+0x208>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7f0:	ldr	r3, [pc, #128]	; (a874 <isr+0x2f8>)
    a7f2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7);
    a7f4:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a7f6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a7f8:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a7fa:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a7fc:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a800:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a802:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a806:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a808:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a80a:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a80e:	ldr.w	r3, [r4, #432]	; 0x1b0
    a812:	cmp	r3, #0
    a814:	bne.n	a80e <isr+0x292>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a816:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a81a:	cmp	r3, #0
    a81c:	bne.w	a5a8 <isr+0x2c>
    a820:	b.n	a646 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a822:	ldr	r2, [pc, #36]	; (a848 <isr+0x2cc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    a824:	movs	r1, #2
    a826:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a828:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a82a:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a82c:	bl	a4e4 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a830:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a834:	cmp	r3, #0
    a836:	bne.w	a5a8 <isr+0x2c>
    a83a:	b.n	a646 <isr+0xca>
    a83c:	.word	0x402e0000
    a840:	.word	0x20010000
    a844:	.word	0x402e01c0
    a848:	.word	0x2000dc80
    a84c:	.word	0x2000dc68
    a850:	.word	0x2000dc64
    a854:	.word	0x2000dc6c
    a858:	.word	0x2000dc74
    a85c:	.word	0x2000dc70
    a860:	.word	0x200101c0
    a864:	.word	0x2000dc90
    a868:	.word	0x00cc0002
    a86c:	.word	0x000200c8
    a870:	.word	0x00c80002
    a874:	.word	0x2000f020
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a878:	uxth	r2, r2
    a87a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a87e:	cmp	r3, #7
    a880:	bhi.n	a784 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a882:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a886:	mov.w	r3, r3, lsl #2
    a88a:	ldr	r2, [pc, #492]	; (aa78 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a88c:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a890:	add	r2, r3
    a892:	ldr	r3, [r2, #0]
    a894:	ite	ne
    a896:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a89a:	biceq.w	r3, r3, #1
    a89e:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a8a0:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8a2:	ldr	r3, [pc, #472]	; (aa7c <isr+0x500>)
    a8a4:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a8a6:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a8a8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a8aa:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a8ae:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a8b0:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a8b4:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a8b6:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a8b8:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a8bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    a8c0:	cmp	r3, #0
    a8c2:	bne.n	a8bc <isr+0x340>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a8c4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a8c8:	cmp	r3, #0
    a8ca:	bne.w	a5a8 <isr+0x2c>
    a8ce:	b.n	a646 <isr+0xca>
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a8d0:	ldr	r3, [pc, #428]	; (aa80 <isr+0x504>)
		usb_cdc_line_rtsdtr = setup.wValue;
    a8d2:	ubfx	r1, r1, #16, #8
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a8d6:	ldr	r2, [pc, #428]	; (aa84 <isr+0x508>)
    a8d8:	ldr	r0, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a8da:	ldr	r3, [pc, #428]	; (aa88 <isr+0x50c>)
				return;
			}
		}
		break;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a8dc:	str	r0, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    a8de:	strb	r1, [r3, #0]
    a8e0:	b.n	a7f0 <isr+0x274>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    a8e2:	uxth	r2, r2
    a8e4:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    a8e8:	cmp	r3, #7
    a8ea:	bhi.w	a784 <isr+0x208>
		dir = setup.wIndex & 0x80;
		if (dir) {
    a8ee:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a8f2:	mov.w	r3, r3, lsl #2
    a8f6:	ldr	r2, [pc, #384]	; (aa78 <isr+0x4fc>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a8f8:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a8fc:	add	r2, r3
    a8fe:	ldr	r3, [r2, #0]
    a900:	ite	ne
    a902:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a906:	orreq.w	r3, r3, #1
    a90a:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a90c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    a90e:	ldr	r3, [pc, #364]	; (aa7c <isr+0x500>)
    a910:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a912:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    a914:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a916:	ldr.w	r2, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a91a:	str	r3, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    a91c:	orr.w	r2, r2, #65536	; 0x10000
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    a920:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a922:	str	r1, [r7, #76]	; 0x4c
	USB1_ENDPTPRIME |= (1<<16);
    a924:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    a928:	ldr.w	r3, [r4, #432]	; 0x1b0
    a92c:	cmp	r3, #0
    a92e:	bne.n	a928 <isr+0x3ac>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a930:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a934:	cmp	r3, #0
    a936:	bne.w	a5a8 <isr+0x2c>
    a93a:	b.n	a646 <isr+0xca>
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a93c:	ldr	r2, [pc, #332]	; (aa8c <isr+0x510>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a93e:	movs	r1, #1
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a940:	ldr	r3, [pc, #332]	; (aa90 <isr+0x514>)
    a942:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a944:	mov	r0, r3
		usb_serial_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a946:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a948:	bl	a4e4 <endpoint0_transmit.constprop.0>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a94c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    a950:	cmp	r3, #0
    a952:	bne.w	a5a8 <isr+0x2c>
    a956:	b.n	a646 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a958:	ldr	r3, [pc, #312]	; (aa94 <isr+0x518>)
    a95a:	ldr	r0, [r3, #4]
    a95c:	cmp	r0, #0
    a95e:	beq.w	a784 <isr+0x208>
    a962:	lsrs	r1, r1, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a964:	uxth.w	lr, r2
    a968:	b.n	a974 <isr+0x3f8>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a96a:	adds	r3, #12
    a96c:	ldr	r0, [r3, #4]
    a96e:	cmp	r0, #0
    a970:	beq.w	a784 <isr+0x208>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a974:	ldrh	r5, [r3, #0]
    a976:	cmp	r5, r1
    a978:	bne.n	a96a <isr+0x3ee>
    a97a:	ldrh	r5, [r3, #2]
    a97c:	cmp	r5, lr
    a97e:	bne.n	a96a <isr+0x3ee>
				if ((setup.wValue >> 8) == 3) {
    a980:	lsrs	r1, r1, #8
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    a982:	lsrs	r2, r2, #16
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				if ((setup.wValue >> 8) == 3) {
    a984:	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    a986:	ite	eq
    a988:	ldrbeq	r1, [r0, #0]
				} else {
					datalen = list->length;
    a98a:	ldrhne	r1, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
				endpoint0_transmit(list->addr, datalen, 0);
    a98c:	cmp	r1, r2
    a98e:	it	cs
    a990:	movcs	r1, r2
    a992:	bl	a4e4 <endpoint0_transmit.constprop.0>
    a996:	b.n	a63e <isr+0xc2>
			if (--usb_reboot_timer == 0) {
				asm("bkpt #251"); // run bootloader
			}
		} else {
			// turn off the SOF interrupt if nothing using it
			USB1_USBINTR &= ~USB_USBINTR_SRE;
    a998:	ldr.w	r2, [r3, #328]	; 0x148
    a99c:	bic.w	r2, r2, #128	; 0x80
    a9a0:	str.w	r2, [r3, #328]	; 0x148
		}
	}
}
    a9a4:	add	sp, #12
    a9a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a9aa:	lsls	r3, r1, #31
    a9ac:	bpl.w	a636 <isr+0xba>
    a9b0:	b.n	a632 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    a9b2:	ldr	r5, [pc, #228]	; (aa98 <isr+0x51c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a9b4:	movs	r0, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    a9b6:	str	r3, [r7, #12]
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    a9b8:	str	r1, [r5, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a9ba:	ldr	r3, [pc, #224]	; (aa9c <isr+0x520>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    a9bc:	ldr	r1, [pc, #224]	; (aaa0 <isr+0x524>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    a9be:	str	r0, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
    a9c0:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a9c2:	ldr	r1, [pc, #224]	; (aaa4 <isr+0x528>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    a9c4:	ldr.w	r0, [r6, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    a9c8:	str	r2, [r5, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a9ca:	add.w	lr, r1, #8192	; 0x2000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    a9ce:	orr.w	r2, r0, #1
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a9d2:	sub.w	r0, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a9d6:	add.w	r5, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a9da:	str	r3, [r7, #8]
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a9dc:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a9de:	sub.w	r0, r1, #4096	; 0x1000
    a9e2:	str	r0, [r3, #12]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    a9e4:	str.w	r2, [r6, #432]	; 0x1b0
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7) | (notify ? (1 << 15) : 0);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a9e8:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a9ea:	str	r5, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a9ec:	str.w	lr, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    a9f0:	ldr.w	r3, [r4, #432]	; 0x1b0
    a9f4:	cmp	r3, #0
    a9f6:	bne.n	a9f0 <isr+0x474>
	}
	endpoint0_transfer_ack.next = 1;
    a9f8:	ldr	r2, [pc, #128]	; (aa7c <isr+0x500>)
    a9fa:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7);
    a9fc:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    a9fe:	str	r3, [r7, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    aa00:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa02:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
    aa06:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa08:	ldr.w	r1, [r6, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
    aa0c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa0e:	orr.w	r3, r1, r0
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa12:	str	r2, [r7, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTPRIME |= (1<<16);
    aa14:	str.w	r3, [r6, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aa18:	str.w	r0, [fp]
	while (USB1_ENDPTPRIME) ;
    aa1c:	ldr.w	r3, [r4, #432]	; 0x1b0
    aa20:	cmp	r3, #0
    aa22:	bne.n	aa1c <isr+0x4a0>
    aa24:	b.n	a63e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    aa26:	ldr	r4, [pc, #112]	; (aa98 <isr+0x51c>)
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa28:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aa2c:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa2e:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    aa30:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aa32:	cmp	r4, r0
    aa34:	bne.w	a6e8 <isr+0x16c>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa38:	ldr	r1, [pc, #108]	; (aaa8 <isr+0x52c>)
    aa3a:	ldr	r4, [pc, #112]	; (aaac <isr+0x530>)
    aa3c:	ldmia	r1, {r0, r1}
    aa3e:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aa40:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete\n");
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa42:	str	r0, [r4, #0]
    aa44:	strh	r1, [r4, #4]
    aa46:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    aa48:	bne.w	a6e8 <isr+0x16c>
			USB1_USBINTR |= USB_USBINTR_SRE;
    aa4c:	ldr.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aa50:	movs	r4, #80	; 0x50
    aa52:	ldr	r0, [pc, #92]	; (aab0 <isr+0x534>)
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			USB1_USBINTR |= USB_USBINTR_SRE;
    aa54:	orr.w	r1, r1, #128	; 0x80
    aa58:	str.w	r1, [r2, #328]	; 0x148
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aa5c:	strb	r4, [r0, #0]
    aa5e:	b.n	a6e8 <isr+0x16c>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i < NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    aa60:	ldr	r0, [pc, #80]	; (aab4 <isr+0x538>)
    aa62:	bl	a4b4 <run_callbacks>
    aa66:	b.n	a6f6 <isr+0x17a>
    aa68:	ldr	r0, [pc, #76]	; (aab8 <isr+0x53c>)
    aa6a:	bl	a4b4 <run_callbacks>
    aa6e:	b.n	a702 <isr+0x186>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    aa70:	ldr	r0, [pc, #72]	; (aabc <isr+0x540>)
    aa72:	bl	a4b4 <run_callbacks>
    aa76:	b.n	a6fc <isr+0x180>
    aa78:	.word	0x402e01c0
    aa7c:	.word	0x2000f020
    aa80:	.word	0x2000dc98
    aa84:	.word	0x2000e52c
    aa88:	.word	0x2000dc61
    aa8c:	.word	0x2000dc90
    aa90:	.word	0x2000dc80
    aa94:	.word	0x20000818
    aa98:	.word	0x2000dc78
    aa9c:	.word	0x2000f000
    aaa0:	.word	0x00078080
    aaa4:	.word	0x2000fc88
    aaa8:	.word	0x2000dc88
    aaac:	.word	0x2000e524
    aab0:	.word	0x2000dc74
    aab4:	.word	0x20010100
    aab8:	.word	0x20010180
    aabc:	.word	0x20010140

0000aac0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    aac0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    aac2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    aac6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    aaca:	ite	ne
    aacc:	movne	r7, #0
    aace:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    aad2:	cmp	r2, #2
    aad4:	bls.n	aada <usb_config_rx+0x1a>
    aad6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    aada:	mov.w	sl, r0, lsl #7
    aade:	ldr.w	r9, [pc, #64]	; ab20 <usb_config_rx+0x60>
    aae2:	mov	r5, r1
    aae4:	mov	r4, r0
    aae6:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    aaea:	movs	r1, #0
    aaec:	movs	r2, #64	; 0x40
    aaee:	mov	r8, r3
    aaf0:	mov	r0, r6
    aaf2:	bl	c814 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    aaf6:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    aaf8:	orr.w	r1, r7, r5, lsl #16
    aafc:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ab00:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab04:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    ab06:	cmp.w	r8, #0
    ab0a:	beq.n	aad6 <usb_config_rx+0x16>
    ab0c:	ldr	r3, [pc, #12]	; (ab1c <usb_config_rx+0x5c>)
    ab0e:	lsls	r0, r4
    ab10:	ldr	r4, [r3, #0]
    ab12:	orrs	r0, r4
    ab14:	str	r0, [r3, #0]
    ab16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab1a:	nop
    ab1c:	.word	0x2000dc68
    ab20:	.word	0x20010000

0000ab24 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab24:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab26:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    ab2a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab2e:	ite	ne
    ab30:	movne	r7, #0
    ab32:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab36:	cmp	r2, #2
    ab38:	bls.n	ab3e <usb_config_tx+0x1a>
    ab3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ab3e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ab40:	lsls	r5, r0, #7
    ab42:	ldr.w	r9, [pc, #68]	; ab88 <usb_config_tx+0x64>
    ab46:	mov	r8, r1
    ab48:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ab4a:	movs	r1, #0
    ab4c:	mov	r4, r0
    ab4e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ab50:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    ab54:	mov	r0, sl
    ab56:	bl	c814 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab5a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    ab5c:	orr.w	r1, r7, r8, lsl #16
    ab60:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    ab64:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    ab68:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ab6c:	cmp	r6, #0
    ab6e:	beq.n	ab3a <usb_config_tx+0x16>
    ab70:	add.w	r0, r4, #16
    ab74:	ldr	r3, [pc, #12]	; (ab84 <usb_config_tx+0x60>)
    ab76:	lsls	r2, r0
    ab78:	ldr	r0, [r3, #0]
    ab7a:	orrs	r2, r0
    ab7c:	str	r2, [r3, #0]
    ab7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab82:	nop
    ab84:	.word	0x2000dc68
    ab88:	.word	0x20010000

0000ab8c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ab8c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    ab8e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    ab90:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ab92:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    ab96:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    ab98:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    ab9a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    ab9c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    aba0:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    aba4:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    aba8:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    abac:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    abae:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    abb0:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    abb2:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    abb4:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    abb6:	pop	{r4, r5, r6, r7}
    abb8:	bx	lr
    abba:	nop

0000abbc <usb_transmit>:
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    abbc:	subs	r3, r0, #2
    abbe:	cmp	r3, #2
    abc0:	bls.n	abc4 <usb_transmit+0x8>
    abc2:	bx	lr
	ep->first_transfer = NULL;
	ep->last_transfer = NULL;
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    abc4:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    abc6:	ldr	r3, [pc, #24]	; (abe0 <usb_transmit+0x24>)
    abc8:	add.w	r4, r0, #16
    abcc:	movs	r5, #1
    abce:	mov	r2, r1
    abd0:	add.w	r0, r3, r0, lsl #7
    abd4:	lsl.w	r1, r5, r4
}
    abd8:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    abda:	b.w	a458 <schedule_transfer>
    abde:	nop
    abe0:	.word	0x20010040

0000abe4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    abe4:	subs	r3, r0, #2
    abe6:	cmp	r3, #2
    abe8:	bls.n	abec <usb_receive+0x8>
    abea:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    abec:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    abee:	ldr	r3, [pc, #20]	; (ac04 <usb_receive+0x20>)
    abf0:	movs	r4, #1
    abf2:	mov	r2, r1
    abf4:	lsl.w	r1, r4, r0
    abf8:	add.w	r0, r3, r0, lsl #7
}
    abfc:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    ac00:	b.w	a458 <schedule_transfer>
    ac04:	.word	0x20010000

0000ac08 <usb_transfer_status>:

uint32_t usb_transfer_status(const transfer_t *transfer)
{
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    ac08:	ldr	r2, [pc, #32]	; (ac2c <usb_transfer_status+0x24>)
    ac0a:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    ac0e:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    ac10:	orr.w	r3, r3, #16384	; 0x4000
    ac14:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    ac18:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    ac1a:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    ac1e:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    ac20:	tst.w	r3, #16384	; 0x4000
    ac24:	beq.n	ac0e <usb_transfer_status+0x6>
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
}
    ac26:	mov	r0, r1
    ac28:	bx	lr
    ac2a:	nop
    ac2c:	.word	0x402e0000

0000ac30 <rtc_set>:
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    ac30:	ldr	r3, [pc, #36]	; (ac58 <rtc_set+0x28>)
    ac32:	ldr	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    ac34:	mov	r1, r3
	}
}

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
    ac36:	bic.w	r2, r2, #1
    ac3a:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
    ac3c:	ldr	r3, [r1, #8]
    ac3e:	ldr	r2, [pc, #24]	; (ac58 <rtc_set+0x28>)
    ac40:	lsls	r3, r3, #31
    ac42:	bmi.n	ac3c <rtc_set+0xc>
	SNVS_HPRTCLR = t << 15;
    ac44:	lsls	r3, r0, #15
	SNVS_HPRTCMR = t >> 17;
    ac46:	lsrs	r0, r0, #17

void rtc_set(unsigned long t)
{
	SNVS_HPCR &= ~SNVS_HPCR_RTC_EN;
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN) ; // wait
	SNVS_HPRTCLR = t << 15;
    ac48:	str	r3, [r2, #40]	; 0x28
	SNVS_HPRTCMR = t >> 17;
    ac4a:	str	r0, [r2, #36]	; 0x24
	SNVS_HPCR |= SNVS_HPCR_RTC_EN;
    ac4c:	ldr	r3, [r2, #8]
    ac4e:	orr.w	r3, r3, #1
    ac52:	str	r3, [r2, #8]
    ac54:	bx	lr
    ac56:	nop
    ac58:	.word	0x400d4000

0000ac5c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    ac5c:	cmp	r0, #0
    ac5e:	beq.n	ad06 <delay+0xaa>
{

}*/

void delay(uint32_t msec)
{
    ac60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac64:	mov	r9, r0
    ac66:	sub	sp, #12
    ac68:	ldr	r4, [pc, #156]	; (ad08 <delay+0xac>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ac6a:	movs	r0, #1
    ac6c:	ldr	r5, [pc, #156]	; (ad0c <delay+0xb0>)
    ac6e:	ldr	r6, [pc, #160]	; (ad10 <delay+0xb4>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ac70:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ac74:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    ac76:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ac78:	strex	r3, r0, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    ac7c:	cmp	r3, #0
    ac7e:	bne.n	ac70 <delay+0x14>
	ccdelta = ARM_DWT_CYCCNT - scc;
    ac80:	ldr	r7, [pc, #144]	; (ad14 <delay+0xb8>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ac82:	mov.w	lr, #1000	; 0x3e8
    ac86:	ldr	r0, [pc, #144]	; (ad18 <delay+0xbc>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    ac88:	ldr.w	ip, [r7]
    ac8c:	mov	fp, r7
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ac8e:	add.w	r7, r7, #1660944384	; 0x63000000
    ac92:	ldr	r3, [r0, #0]
    ac94:	rsb	r1, r1, ip
    ac98:	add.w	r7, r7, #1818624	; 0x1bc000
    ac9c:	addw	r7, r7, #3711	; 0xe7f
    aca0:	umull	ip, r3, r7, r3
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    aca4:	mov	sl, r7
    aca6:	movs	r7, #1
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    aca8:	lsrs	r3, r3, #18
    acaa:	udiv	r3, r1, r3
    acae:	mla	r8, lr, r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    acb2:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    acb6:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    acb8:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    acba:	strex	r3, r7, [r4]
  } while ( __STREXW(1, &systick_safe_read));
    acbe:	cmp	r3, #0
    acc0:	bne.n	acb2 <delay+0x56>
	ccdelta = ARM_DWT_CYCCNT - scc;
    acc2:	ldr.w	ip, [fp]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    acc6:	mov.w	lr, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    acca:	ldr	r3, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    accc:	mul.w	r2, lr, r2
    acd0:	rsb	r1, r1, ip
    acd4:	umull	r3, lr, sl, r3
    acd8:	rsb	r3, r8, r2
    acdc:	mov.w	r2, lr, lsr #18
    ace0:	udiv	r1, r1, r2
    ace4:	adds	r2, r1, r3
    ace6:	cmp.w	r2, #1000	; 0x3e8
    acea:	bcc.n	acfc <delay+0xa0>
			if (--msec == 0) return;
    acec:	subs.w	r9, r9, #1
			start += 1000;
    acf0:	add.w	r8, r8, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    acf4:	bne.n	acb2 <delay+0x56>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    acf6:	add	sp, #12
    acf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acfc:	str	r0, [sp, #4]
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    acfe:	bl	b684 <yield>
	}
    ad02:	ldr	r0, [sp, #4]
    ad04:	b.n	acb2 <delay+0x56>
    ad06:	bx	lr
    ad08:	.word	0x20010280
    ad0c:	.word	0x2000dc98
    ad10:	.word	0x2000dc94
    ad14:	.word	0xe0001004
    ad18:	.word	0x20000dc8

0000ad1c <micros>:
	// TODO...
}

uint32_t micros(void)
{
    ad1c:	push	{r4, r5, r6}
    ad1e:	ldr	r3, [pc, #56]	; (ad58 <micros+0x3c>)
    ad20:	movs	r6, #1
    ad22:	ldr	r5, [pc, #56]	; (ad5c <micros+0x40>)
    ad24:	ldr	r0, [pc, #56]	; (ad60 <micros+0x44>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ad26:	ldrex	r2, [r3]
	uint32_t ccdelta, usec, smc, scc;
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ad2a:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    ad2c:	ldr	r4, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ad2e:	strex	r2, r6, [r3]
  } while ( __STREXW(1, &systick_safe_read));
    ad32:	cmp	r2, #0
    ad34:	bne.n	ad26 <micros+0xa>
	ccdelta = ARM_DWT_CYCCNT - scc;
    ad36:	ldr	r3, [pc, #44]	; (ad64 <micros+0x48>)
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    ad38:	mov.w	r0, #1000	; 0x3e8
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad3c:	ldr	r2, [pc, #40]	; (ad68 <micros+0x4c>)
  do {
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
    ad3e:	ldr	r3, [r3, #0]
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
	return usec;
    ad40:	ldr	r5, [pc, #40]	; (ad6c <micros+0x50>)
    __LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
  } while ( __STREXW(1, &systick_safe_read));
	ccdelta = ARM_DWT_CYCCNT - scc;
	usec = 1000*smc + (ccdelta/(F_CPU_ACTUAL/1000000));
    ad42:	ldr	r2, [r2, #0]
	return usec;
    ad44:	subs	r4, r3, r4
    ad46:	umull	r2, r3, r5, r2
    ad4a:	lsrs	r3, r3, #18
    ad4c:	udiv	r4, r4, r3
}
    ad50:	mla	r0, r0, r1, r4
    ad54:	pop	{r4, r5, r6}
    ad56:	bx	lr
    ad58:	.word	0x20010280
    ad5c:	.word	0x2000dc98
    ad60:	.word	0x2000dc94
    ad64:	.word	0xe0001004
    ad68:	.word	0x20000dc8
    ad6c:	.word	0x431bde83

0000ad70 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    ad70:	cmp	r0, #28
    ad72:	bhi.n	ada0 <analogRead+0x30>
	if (calibrating) wait_for_cal();
    ad74:	ldr	r1, [pc, #68]	; (adbc <analogRead+0x4c>)
    ad76:	ldrb	r3, [r1, #0]
    ad78:	cbz	r3, ad86 <analogRead+0x16>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    ad7a:	ldr	r2, [pc, #68]	; (adc0 <analogRead+0x50>)
    ad7c:	ldr	r3, [r2, #72]	; 0x48
    ad7e:	ands.w	r3, r3, #128	; 0x80
    ad82:	bne.n	ad7c <analogRead+0xc>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    ad84:	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    ad86:	ldr	r3, [pc, #60]	; (adc4 <analogRead+0x54>)
    ad88:	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    ad8a:	lsls	r2, r3, #24
    ad8c:	bmi.n	ada4 <analogRead+0x34>
		ADC1_HC0 = ch;
    ad8e:	ldr	r2, [pc, #48]	; (adc0 <analogRead+0x50>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    ad90:	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    ad92:	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    ad94:	ldr	r3, [r1, #32]
    ad96:	ldr	r2, [pc, #40]	; (adc0 <analogRead+0x50>)
    ad98:	lsls	r0, r3, #31
    ad9a:	bpl.n	ad94 <analogRead+0x24>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    ad9c:	ldr	r0, [r2, #36]	; 0x24
    ad9e:	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    ada0:	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
    ada2:	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    ada4:	ldr	r2, [pc, #32]	; (adc8 <analogRead+0x58>)
    ada6:	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    adaa:	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    adac:	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    adae:	ldr	r3, [r1, #32]
    adb0:	ldr	r2, [pc, #20]	; (adc8 <analogRead+0x58>)
    adb2:	lsls	r3, r3, #31
    adb4:	bpl.n	adae <analogRead+0x3e>
		return ADC2_R0;
    adb6:	ldr	r0, [r2, #36]	; 0x24
    adb8:	bx	lr
    adba:	nop
    adbc:	.word	0x2000dc9c
    adc0:	.word	0x400c4000
    adc4:	.word	0x2000057c
    adc8:	.word	0x400c8000

0000adcc <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    adcc:	lsls	r0, r0, #4
    adce:	ldr	r3, [pc, #28]	; (adec <digitalWrite.part.0+0x20>)
    add0:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    add2:	ldr	r3, [r3, r0]
	mask = p->mask;
    add4:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    add6:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    add8:	tst	r0, r2
    adda:	beq.n	ade2 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    addc:	cbnz	r1, ade4 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    adde:	str.w	r2, [r3, #136]	; 0x88
    ade2:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    ade4:	str.w	r2, [r3, #132]	; 0x84
    ade8:	bx	lr
    adea:	nop
    adec:	.word	0x20000598

0000adf0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    adf0:	cmp	r0, #39	; 0x27
    adf2:	bhi.n	adf8 <digitalWrite+0x8>
    adf4:	b.w	adcc <digitalWrite.part.0>
    adf8:	bx	lr
    adfa:	nop

0000adfc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    adfc:	cmp	r0, #39	; 0x27
    adfe:	bhi.n	ae3a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    ae00:	lsls	r0, r0, #4
    ae02:	ldr	r2, [pc, #104]	; (ae6c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ae04:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    ae06:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ae0a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    ae0c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ae0e:	beq.n	ae3c <pinMode+0x40>
    ae10:	cmp	r1, #4
    ae12:	beq.n	ae3c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ae14:	ldr	r4, [r3, #12]
    ae16:	ldr	r2, [r0, #4]
    ae18:	bic.w	r2, r2, r4
    ae1c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ae1e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    ae20:	cbz	r1, ae5e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    ae22:	cmp	r1, #2
    ae24:	beq.n	ae64 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    ae26:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ae28:	ldr	r3, [r3, #4]
}
    ae2a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ae2e:	ite	eq
    ae30:	ldreq	r1, [pc, #60]	; (ae70 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ae32:	ldrne	r1, [pc, #64]	; (ae74 <pinMode+0x78>)
    ae34:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    ae36:	movs	r2, #21
    ae38:	str	r2, [r3, #0]
}
    ae3a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ae3c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    ae3e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ae40:	ldr	r4, [r0, #4]
    ae42:	orr.w	r2, r2, r4
    ae46:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ae48:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    ae4a:	beq.n	ae5e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ae4c:	movw	r1, #2104	; 0x838
    ae50:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ae52:	ldr	r3, [r3, #4]
    ae54:	movs	r2, #21
}
    ae56:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ae5a:	str	r2, [r3, #0]
}
    ae5c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ae5e:	movs	r1, #56	; 0x38
    ae60:	str	r1, [r2, #0]
    ae62:	b.n	ae52 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ae64:	ldr	r1, [pc, #16]	; (ae78 <pinMode+0x7c>)
    ae66:	str	r1, [r2, #0]
    ae68:	b.n	ae52 <pinMode+0x56>
    ae6a:	nop
    ae6c:	.word	0x20000598
    ae70:	.word	0x00013038
    ae74:	.word	0x00010038
    ae78:	.word	0x0001f038

0000ae7c <usb_init_serialnumber>:
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ae7c:	ldr	r2, [pc, #72]	; (aec8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ae7e:	ldr	r3, [pc, #76]	; (aecc <usb_init_serialnumber+0x50>)
{
#if 1
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ae80:	ldr.w	r0, [r2, #544]	; 0x220
    ae84:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ae88:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ae8a:	push	{r4, lr}
    ae8c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ae8e:	bhi.n	ae96 <usb_init_serialnumber+0x1a>
    ae90:	add.w	r0, r0, r0, lsl #2
    ae94:	lsls	r0, r0, #1
    ae96:	ldr	r4, [pc, #56]	; (aed0 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    ae98:	add	r1, sp, #4
    ae9a:	movs	r2, #10
    ae9c:	bl	bb9c <ultoa>
    aea0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    aea2:	movs	r3, #0
    aea4:	mov	r0, r4
		char c = buf[i];
    aea6:	ldrb.w	r2, [r1], #1
    aeaa:	adds	r3, #1
		if (!c) break;
    aeac:	cbz	r2, aebe <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aeae:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    aeb0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aeb4:	bne.n	aea6 <usb_init_serialnumber+0x2a>
    aeb6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aeb8:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    aeba:	add	sp, #16
    aebc:	pop	{r4, pc}
    aebe:	lsls	r3, r3, #1
    aec0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aec2:	strb	r3, [r4, #0]
	usb_string_serial_number_default.wString[0] = '1';
	usb_string_serial_number_default.wString[1] = '2';
	usb_string_serial_number_default.wString[2] = '3';
	usb_string_serial_number_default.bLength = 3 * 2 + 2;
#endif
}
    aec4:	add	sp, #16
    aec6:	pop	{r4, pc}
    aec8:	.word	0x401f4400
    aecc:	.word	0x0098967f
    aed0:	.word	0x20000e64

0000aed4 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    aed4:	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    aed8:	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    aedc:	uxth	r3, r3
	tail = tx_buffer_tail_;
    aede:	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    aee0:	cmp	r3, r2
    aee2:	bcs.n	aeea <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    aee4:	subs	r0, r2, #1
    aee6:	subs	r0, r0, r3
}
    aee8:	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    aeea:	ldr	r0, [r0, #52]	; 0x34
    aeec:	subs	r0, #1
    aeee:	add	r0, r2
    aef0:	subs	r0, r0, r3
    aef2:	bx	lr

0000aef4 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    aef4:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    aef8:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    aefc:	uxth	r2, r2
	tail = rx_buffer_tail_;
    aefe:	uxth	r3, r3
	if (head >= tail) return head - tail;
    af00:	cmp	r2, r3
    af02:	bcs.n	af0c <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    af04:	ldr	r0, [r0, #56]	; 0x38
    af06:	add	r0, r2
    af08:	subs	r0, r0, r3
}
    af0a:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    af0c:	subs	r0, r2, r3
    af0e:	bx	lr

0000af10 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    af10:	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    af14:	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    af18:	uxth	r2, r2
	tail = rx_buffer_tail_;
    af1a:	uxth	r3, r3
	if (head == tail) return -1;
    af1c:	cmp	r2, r3
    af1e:	beq.n	af42 <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af20:	adds	r3, #1
    af22:	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    af24:	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af26:	cmp	r3, r1
    af28:	it	cs
    af2a:	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    af2c:	cmp	r3, r2
    af2e:	bcc.n	af3a <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    af30:	subs	r3, r3, r2
    af32:	ldr	r2, [r0, #36]	; 0x24
    af34:	ldrb	r0, [r2, r3]
    af36:	uxtb	r0, r0
    af38:	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    af3a:	ldr	r2, [r0, #32]
    af3c:	ldrb	r0, [r2, r3]
    af3e:	uxtb	r0, r0
    af40:	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    af42:	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    af46:	bx	lr

0000af48 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    af48:	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    af4c:	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    af50:	uxth	r1, r1
	tail = rx_buffer_tail_;
    af52:	uxth	r3, r3
	if (head == tail) return -1;
    af54:	cmp	r1, r3
    af56:	beq.n	afac <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af58:	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    af5a:	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af5c:	ldr	r4, [r0, #56]	; 0x38
    af5e:	cmp	r3, r4
    af60:	bcs.n	af92 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    af62:	ldr	r2, [r0, #48]	; 0x30
    af64:	uxth	r6, r3
    af66:	cmp	r3, r2
    af68:	bcs.n	af9c <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    af6a:	ldr	r2, [r0, #32]
    af6c:	ldrb	r2, [r2, r3]
    af6e:	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    af70:	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    af72:	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    af76:	cbz	r5, afa6 <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    af78:	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    af7a:	it	hi
    af7c:	addhi	r1, r1, r4
    af7e:	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    af80:	ldr	r1, [r0, #60]	; 0x3c
    af82:	cmp	r3, r1
    af84:	bhi.n	afa6 <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    af86:	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    af88:	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    af8a:	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    af8e:	pop	{r4, r5, r6}
    af90:	bx	lr
    af92:	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    af94:	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af96:	mov	r3, r6
	if (tail < rx_buffer_size_) {
    af98:	cmp	r3, r2
    af9a:	bcc.n	af6a <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    af9c:	subs	r2, r3, r2
    af9e:	ldr	r5, [r0, #36]	; 0x24
    afa0:	ldrb	r2, [r5, r2]
    afa2:	uxtb	r2, r2
    afa4:	b.n	af70 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    afa6:	mov	r0, r2
}	
    afa8:	pop	{r4, r5, r6}
    afaa:	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    afac:	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    afb0:	bx	lr
    afb2:	nop

0000afb4 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    afb4:	ldrb.w	r3, [r0, #68]	; 0x44
    afb8:	cbz	r3, afcc <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    afba:	push	{r4, lr}
    afbc:	mov	r4, r0
	while (transmitting_) yield(); // wait
    afbe:	bl	b684 <yield>
    afc2:	ldrb.w	r3, [r4, #68]	; 0x44
    afc6:	cmp	r3, #0
    afc8:	bne.n	afbe <HardwareSerial::flush()+0xa>
    afca:	pop	{r4, pc}
    afcc:	bx	lr
    afce:	nop

0000afd0 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    afd0:	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    afd4:	cbnz	r0, b006 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    afd6:	mrs	r3, PRIMASK
	if (primask) return 0;
    afda:	cbnz	r3, aff0 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    afdc:	mrs	r2, IPSR
	if (ipsr) {
    afe0:	cbnz	r2, aff2 <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    afe2:	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    afe6:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    afea:	cbz	r0, b002 <nvic_execution_priority()+0x32>
    afec:	cmp	r0, r3
    afee:	bcs.n	b002 <nvic_execution_priority()+0x32>
	return priority;
}
    aff0:	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    aff2:	cmp	r2, #15
    aff4:	bls.n	afe6 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    aff6:	ldr	r3, [pc, #20]	; (b00c <nvic_execution_priority()+0x3c>)
    aff8:	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    affa:	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    affe:	cmp	r0, #0
    b000:	bne.n	afec <nvic_execution_priority()+0x1c>
    b002:	mov	r0, r3
    b004:	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    b006:	mov.w	r0, #4294967295
    b00a:	b.n	aff0 <nvic_execution_priority()+0x20>
    b00c:	.word	0xe000e3f0

0000b010 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    b010:	vmov	s15, r1
    b014:	vldr	s14, [pc, #528]	; b228 <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    b018:	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    b01a:	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    b01e:	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    b022:	vldr	s12, [pc, #520]	; b22c <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    b026:	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    b028:	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    b02c:	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    b02e:	movs	r6, #1
    b030:	movw	r5, #8191	; 0x1fff
    b034:	b.n	b072 <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    b036:	cmp	r3, r5
    b038:	it	ge
    b03a:	movge	r3, r5
    b03c:	vmov	s15, r3
    b040:	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    b044:	vsub.f32	s13, s13, s14
    b048:	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    b04c:	vcmpe.f32	s15, #0.0
    b050:	vmrs	APSR_nzcv, fpscr
    b054:	it	mi
    b056:	vnegmi.f32	s15, s15
		if (err <= besterr) {
    b05a:	vcmpe.f32	s15, s12
    b05e:	vmrs	APSR_nzcv, fpscr
    b062:	bhi.n	b06c <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    b064:	vmov.f32	s12, s15
    b068:	mov	r4, r1
			bestdiv = divint;
    b06a:	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    b06c:	adds	r1, #1
    b06e:	cmp	r1, #33	; 0x21
    b070:	beq.n	b096 <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    b072:	vmov	s15, r1
    b076:	vcvt.f32.s32	s15, s15
    b07a:	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    b07e:	vadd.f32	s15, s14, s10
    b082:	vcvt.s32.f32	s15, s15
    b086:	vmov	r3, s15
		if (divint < 1) divint = 1;
    b08a:	cmp	r3, #0
    b08c:	bgt.n	b036 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    b08e:	vmov.f32	s13, #112	; 0x3f800000  1.0
    b092:	movs	r3, #1
    b094:	b.n	b044 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    b096:	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    b098:	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    b09a:	ldr	r5, [r0, #56]	; 0x38
    b09c:	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    b0a0:	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    b0a4:	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    b0a8:	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    b0aa:	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    b0ae:	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    b0b2:	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    b0b6:	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    b0ba:	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    b0be:	ldr.w	lr, [r1, #12]
    b0c2:	ldr	r3, [r1, #16]
    b0c4:	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    b0c8:	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    b0ca:	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    b0ce:	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b0d0:	ldr	r5, [pc, #348]	; (b230 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    b0d2:	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    b0d6:	ldrb	r3, [r0, #24]
    b0d8:	ldr	r7, [pc, #344]	; (b234 <HardwareSerial::begin(unsigned long, unsigned short)+0x224>)
    b0da:	add.w	r3, r1, r3, lsl #4
    b0de:	ldrb	r3, [r3, #20]
    b0e0:	add.w	r3, r5, r3, lsl #4
    b0e4:	ldr	r3, [r3, #8]
    b0e6:	str	r7, [r3, #0]
    b0e8:	ldrb	r3, [r0, #24]
    b0ea:	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    b0ee:	ldrb	r7, [r3, #20]
    b0f0:	ldr.w	lr, [r3, #24]
    b0f4:	add.w	r3, r5, r7, lsl #4
    b0f8:	ldr	r3, [r3, #4]
    b0fa:	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    b0fe:	ldrb	r3, [r0, #24]
    b100:	add.w	r3, r1, r3, lsl #4
    b104:	ldr	r7, [r3, #28]
    b106:	cbz	r7, b10c <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    b108:	ldr	r3, [r3, #32]
    b10a:	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b10c:	ldrb.w	lr, [r0, #25]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b110:	subs	r3, r4, #1
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b112:	movs	r7, #217	; 0xd9
    b114:	add.w	r4, r1, lr, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;
    b118:	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b11c:	lsls	r3, r3, #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b11e:	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b122:	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b126:	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b12a:	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b12c:	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b12e:	ldr	r4, [r4, #8]
    b130:	adds	r6, #16
    b132:	str	r7, [r4, #0]
    b134:	ldrb	r4, [r0, #25]

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    b136:	ldr	r7, [r1, #4]
    b138:	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    b13c:	ldrb.w	r1, [r4, #52]	; 0x34
    b140:	ldr.w	ip, [r4, #56]	; 0x38
    b144:	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b148:	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    b14a:	ldr	r4, [r5, #4]
    b14c:	str.w	ip, [r4]
    b150:	ldr	r4, [pc, #228]	; (b238 <HardwareSerial::begin(unsigned long, unsigned short)+0x228>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
    b152:	str	r3, [r1, #16]
	port->PINCFG = 0;
    b154:	str.w	lr, [r1, #12]
    b158:	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    b15c:	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    b15e:	movs	r5, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    b160:	ldr	r1, [pc, #216]	; (b23c <HardwareSerial::begin(unsigned long, unsigned short)+0x22c>)
    b162:	ldrb	r4, [r3, #1]
    b164:	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    b168:	ldr	r6, [pc, #212]	; (b240 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>)
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    b16a:	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    b16c:	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    b16e:	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    b170:	ldrb	r3, [r4, #1]
    b172:	and.w	r0, r3, #31
    b176:	asrs	r3, r3, #5
    b178:	lsl.w	r0, r5, r0
    b17c:	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    b180:	ldr	r3, [r1, #40]	; 0x28
    b182:	lsrs	r3, r3, #2
    b184:	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    b188:	cmp	r3, #15
    b18a:	bhi.n	b20e <HardwareSerial::begin(unsigned long, unsigned short)+0x1fe>
    b18c:	asrs	r3, r5
    b18e:	and.w	r3, r3, #3
    b192:	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    b194:	ldr	r3, [r1, #40]	; 0x28
    b196:	lsls	r3, r3, #2
    b198:	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    b19c:	cmp	r3, #15
    b19e:	bhi.n	b208 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f8>
    b1a0:	lsls	r3, r3, #15
    b1a2:	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    b1a6:	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    b1a8:	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    b1aa:	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    b1ae:	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    b1b0:	ldr	r3, [r1, #40]	; 0x28
    b1b2:	orr.w	r3, r3, #136	; 0x88
    b1b6:	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    b1b8:	bmi.n	b212 <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    b1ba:	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    b1be:	and.w	r0, r2, #15
    b1c2:	cmp	r0, #4
    b1c4:	it	eq
    b1c6:	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    b1ca:	lsls	r6, r2, #26
    b1cc:	it	mi
    b1ce:	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    b1d2:	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    b1d4:	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    b1d6:	bpl.n	b1e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1d0>
    b1d8:	ldr	r3, [r1, #16]
    b1da:	orr.w	r3, r3, #536870912	; 0x20000000
    b1de:	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    b1e0:	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    b1e2:	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    b1e4:	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    b1e8:	it	mi
    b1ea:	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    b1ee:	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    b1f0:	lsls	r3, r2, #23
    b1f2:	bpl.n	b1fc <HardwareSerial::begin(unsigned long, unsigned short)+0x1ec>
    b1f4:	ldr	r3, [r1, #16]
    b1f6:	orr.w	r3, r3, #8192	; 0x2000
    b1fa:	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    b1fc:	ldrb	r2, [r4, #0]
    b1fe:	ldr	r3, [pc, #68]	; (b244 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>)
    b200:	ldr.w	r1, [r3, r2, lsl #2]
    b204:	cbz	r1, b218 <HardwareSerial::begin(unsigned long, unsigned short)+0x208>
    b206:	pop	{r4, r5, r6, r7, pc}
    b208:	mov.w	r3, #196608	; 0x30000
    b20c:	b.n	b1a6 <HardwareSerial::begin(unsigned long, unsigned short)+0x196>
    b20e:	movs	r0, #3
    b210:	b.n	b194 <HardwareSerial::begin(unsigned long, unsigned short)+0x184>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    b212:	ldr	r3, [pc, #52]	; (b248 <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
    b214:	orrs	r3, r0
    b216:	b.n	b1be <HardwareSerial::begin(unsigned long, unsigned short)+0x1ae>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    b218:	ldr	r0, [pc, #48]	; (b24c <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    b21a:	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    b21c:	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    b21e:	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    b222:	adds	r3, r1, #1
    b224:	strb	r3, [r0, #0]
    b226:	pop	{r4, r5, r6, r7, pc}
    b228:	.word	0x4bb71b00
    b22c:	.word	0x60ad78ec
    b230:	.word	0x20000598
    b234:	.word	0x0001f038
    b238:	.word	0x20010400
    b23c:	.word	0xe000e400
    b240:	.word	0xe000e100
    b244:	.word	0x2000dca0
    b248:	.word	0x003c0010
    b24c:	.word	0x2000dcbc

0000b250 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    b250:	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    b252:	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    b254:	mov	r4, r0
    b256:	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    b258:	cbz	r3, b260 <HardwareSerial::write9bit(unsigned long)+0x10>
    b25a:	ldr	r2, [r0, #84]	; 0x54
    b25c:	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    b260:	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    b264:	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    b266:	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    b268:	adds	r5, #1
    b26a:	cmp	r5, r3
    b26c:	bcs.n	b302 <HardwareSerial::write9bit(unsigned long)+0xb2>
    b26e:	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    b270:	ldrh.w	r3, [r4, #72]	; 0x48
    b274:	uxth	r3, r3
    b276:	cmp	r3, r5
    b278:	bne.n	b2bc <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    b27a:	bl	afd0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    b27e:	ldr	r3, [r4, #20]
    b280:	ldrh.w	r3, [r3, #86]	; 0x56
    b284:	cmp	r0, r3
    b286:	bgt.n	b2e4 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    b288:	ldr	r1, [r4, #16]
    b28a:	ldr	r3, [r1, #20]
    b28c:	lsls	r3, r3, #8
    b28e:	bpl.n	b270 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    b290:	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b294:	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    b296:	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b298:	adds	r3, #1
    b29a:	cmp	r3, r2
    b29c:	bcs.n	b2ee <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    b29e:	ldr	r2, [r4, #44]	; 0x2c
    b2a0:	uxth	r0, r3
    b2a2:	cmp	r3, r2
    b2a4:	bcs.n	b2f8 <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    b2a6:	ldr	r2, [r4, #28]
    b2a8:	ldrb	r3, [r2, r3]
    b2aa:	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    b2ac:	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    b2ae:	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    b2b2:	ldrh.w	r3, [r4, #72]	; 0x48
    b2b6:	uxth	r3, r3
    b2b8:	cmp	r3, r5
    b2ba:	beq.n	b27a <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    b2bc:	ldr	r3, [r4, #44]	; 0x2c
    b2be:	cmp	r5, r3
    b2c0:	bcc.n	b308 <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    b2c2:	subs	r5, r5, r3
    b2c4:	uxtb	r6, r6
    b2c6:	ldr	r3, [r4, #40]	; 0x28
    b2c8:	strb	r6, [r3, r5]
	}
	__disable_irq();
    b2ca:	cpsid	i
	transmitting_ = 1;
    b2cc:	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    b2ce:	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    b2d0:	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    b2d4:	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    b2d8:	ldr	r3, [r2, #24]
    b2da:	orr.w	r3, r3, #8388608	; 0x800000
    b2de:	str	r3, [r2, #24]
	__enable_irq();
    b2e0:	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    b2e2:	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    b2e4:	cmp	r0, #255	; 0xff
    b2e6:	ble.n	b270 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    b2e8:	bl	b684 <yield>
    b2ec:	b.n	b270 <HardwareSerial::write9bit(unsigned long)+0x20>
    b2ee:	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    b2f0:	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b2f2:	mov	r3, r0
				if (tail < tx_buffer_size_) {
    b2f4:	cmp	r3, r2
    b2f6:	bcc.n	b2a6 <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    b2f8:	subs	r3, r3, r2
    b2fa:	ldr	r2, [r4, #40]	; 0x28
    b2fc:	ldrb	r3, [r2, r3]
    b2fe:	uxtb	r3, r3
    b300:	b.n	b2ac <HardwareSerial::write9bit(unsigned long)+0x5c>
    b302:	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    b304:	mov	r5, r7
    b306:	b.n	b270 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    b308:	uxtb	r6, r6
    b30a:	ldr	r3, [r4, #28]
    b30c:	strb	r6, [r3, r5]
    b30e:	b.n	b2ca <HardwareSerial::write9bit(unsigned long)+0x7a>

0000b310 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    b310:	b.w	b250 <HardwareSerial::write9bit(unsigned long)>

0000b314 <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    b314:	ldr	r2, [r0, #16]
    b316:	ldr	r3, [r2, #20]
    b318:	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    b31c:	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    b31e:	beq.n	b3a6 <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    b320:	ldr	r3, [r2, #44]	; 0x2c
    b322:	ubfx	r5, r3, #24, #3
		if (avail) {
    b326:	cmp	r5, #0
    b328:	beq.n	b3a0 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    b32a:	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    b32e:	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    b332:	uxth	r7, r7
			tail = rx_buffer_tail_;
    b334:	uxth.w	lr, lr
    b338:	b.n	b348 <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    b33a:	ldr	r2, [r0, #32]
    b33c:	strb	r6, [r2, r3]
    b33e:	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    b340:	subs	r3, r5, #1
    b342:	ands.w	r5, r3, #255	; 0xff
    b346:	beq.n	b37e <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    b348:	ldr	r1, [r2, #28]
				newhead = head + 1;
    b34a:	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b34c:	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    b34e:	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    b352:	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    b356:	cmp	r3, r6
    b358:	it	cs
    b35a:	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    b35c:	uxth	r4, r4
    b35e:	cmp	r3, r4
    b360:	beq.n	b340 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    b362:	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    b364:	uxtb	r6, r1
    b366:	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    b368:	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    b36a:	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    b36e:	bcc.n	b33a <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    b370:	ldr	r3, [r0, #36]	; 0x24
    b372:	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    b374:	subs	r3, r5, #1
    b376:	ldr	r2, [r0, #16]
    b378:	ands.w	r5, r3, #255	; 0xff
    b37c:	bne.n	b348 <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    b37e:	uxth	r3, r7
			if (rts_pin_baseReg_) {
    b380:	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    b382:	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    b386:	cbz	r1, b3a0 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    b388:	cmp	r7, lr
    b38a:	bcs.n	b460 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    b38c:	ldr	r3, [r0, #56]	; 0x38
    b38e:	rsb	r3, lr, r3
    b392:	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    b394:	ldr	r3, [r0, #64]	; 0x40
    b396:	cmp	r7, r3
    b398:	bcc.n	b3a0 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    b39a:	ldr	r3, [r0, #92]	; 0x5c
    b39c:	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    b3a0:	ldr	r3, [r2, #20]
    b3a2:	lsls	r4, r3, #11
    b3a4:	bmi.n	b43e <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    b3a6:	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    b3aa:	tst.w	lr, #8388608	; 0x800000
    b3ae:	beq.n	b3b6 <HardwareSerial::IRQHandler()+0xa2>
    b3b0:	ldr	r3, [r2, #20]
    b3b2:	lsls	r1, r3, #8
    b3b4:	bmi.n	b3dc <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    b3b6:	tst.w	lr, #4194304	; 0x400000
    b3ba:	beq.n	b43a <HardwareSerial::IRQHandler()+0x126>
    b3bc:	ldr	r3, [r2, #20]
    b3be:	lsls	r3, r3, #9
    b3c0:	bpl.n	b43c <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    b3c2:	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    b3c4:	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    b3c6:	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    b3ca:	cbz	r3, b3d2 <HardwareSerial::IRQHandler()+0xbe>
    b3cc:	ldr	r1, [r0, #84]	; 0x54
    b3ce:	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    b3d2:	ldr	r3, [r2, #24]
    b3d4:	bic.w	r3, r3, #4194304	; 0x400000
    b3d8:	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    b3da:	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    b3dc:	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    b3e0:	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    b3e4:	uxth	r5, r5
		tail = tx_buffer_tail_;
    b3e6:	uxth	r3, r3
		do {
			if (head == tail) break;
    b3e8:	cmp	r5, r3
    b3ea:	beq.n	b448 <HardwareSerial::IRQHandler()+0x134>
    b3ec:	ldr	r6, [r0, #52]	; 0x34
    b3ee:	ldr	r4, [r0, #44]	; 0x2c
    b3f0:	b.n	b408 <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    b3f2:	ldr	r1, [r0, #28]
    b3f4:	ldrb	r1, [r1, r3]
    b3f6:	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    b3f8:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    b3fa:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    b3fc:	ubfx	r1, r1, #8, #3
    b400:	cmp	r1, #3
    b402:	bhi.n	b42a <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    b404:	cmp	r3, r5
    b406:	beq.n	b448 <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b408:	adds	r3, #1
    b40a:	cmp	r6, r3
    b40c:	it	ls
    b40e:	movls	r3, #0
			if (tail < tx_buffer_size_) {
    b410:	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    b412:	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    b416:	bcc.n	b3f2 <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    b418:	ldr	r7, [r0, #40]	; 0x28
    b41a:	ldrb	r1, [r7, r1]
    b41c:	uxtb	r1, r1
			}
			port->DATA = n;
    b41e:	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    b420:	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    b422:	ubfx	r1, r1, #8, #3
    b426:	cmp	r1, #3
    b428:	bls.n	b404 <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    b42a:	uxth	r1, r3
		if (head == tail) {
    b42c:	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    b42e:	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    b432:	beq.n	b44e <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    b434:	tst.w	lr, #4194304	; 0x400000
    b438:	bne.n	b3bc <HardwareSerial::IRQHandler()+0xa8>
    b43a:	pop	{r4, r5, r6, r7, pc}
    b43c:	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    b43e:	ldr	r3, [r2, #20]
    b440:	orr.w	r3, r3, #1048576	; 0x100000
    b444:	str	r3, [r2, #20]
    b446:	b.n	b3a6 <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    b448:	uxth	r5, r5
    b44a:	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    b44e:	ldr	r3, [r2, #24]
    b450:	bic.w	r3, r3, #8388608	; 0x800000
    b454:	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    b456:	ldr	r3, [r2, #24]
    b458:	orr.w	r3, r3, #4194304	; 0x400000
    b45c:	str	r3, [r2, #24]
    b45e:	b.n	b3b6 <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    b460:	rsb	r7, lr, r7
    b464:	b.n	b394 <HardwareSerial::IRQHandler()+0x80>
    b466:	nop

0000b468 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    b468:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    b46a:	ldr	r3, [pc, #28]	; (b488 <HardwareSerial::processSerialEvents()+0x20>)
    b46c:	ldrb	r4, [r3, #0]
    b46e:	cbz	r4, b484 <HardwareSerial::processSerialEvents()+0x1c>
    b470:	ldr	r5, [pc, #24]	; (b48c <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    b472:	ldr.w	r3, [r5, #4]!
    b476:	cmp	r3, #0
    b478:	beq.n	b472 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    b47a:	blx	r3
			if (--handlers_still_to_process == 0) return;
    b47c:	subs	r3, r4, #1
    b47e:	ands.w	r4, r3, #255	; 0xff
    b482:	bne.n	b472 <HardwareSerial::processSerialEvents()+0xa>
    b484:	pop	{r3, r4, r5, pc}
    b486:	nop
    b488:	.word	0x2000dcbc
    b48c:	.word	0x2000dc9c

0000b490 <HardwareSerial::disableSerialEvents()>:
	}
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
    b490:	ldr	r3, [r0, #20]
    b492:	ldr	r2, [pc, #32]	; (b4b4 <HardwareSerial::disableSerialEvents()+0x24>)
    b494:	ldrb	r1, [r3, #0]
    b496:	ldr.w	r3, [r2, r1, lsl #2]
    b49a:	cbz	r3, b4b0 <HardwareSerial::disableSerialEvents()+0x20>
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    b49c:	ldr	r0, [pc, #24]	; (b4b8 <HardwareSerial::disableSerialEvents()+0x28>)
		serial_event_handlers_active++;
	}
}

void HardwareSerial::disableSerialEvents() 
{
    b49e:	push	{r4}
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
		serial_event_handlers_active--;
    b4a0:	ldrb	r3, [r0, #0]
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    b4a2:	movs	r4, #0
		serial_event_handlers_active--;
    b4a4:	subs	r3, #1
}

void HardwareSerial::disableSerialEvents() 
{
	if (serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = nullptr;	// clear it out
    b4a6:	str.w	r4, [r2, r1, lsl #2]
		serial_event_handlers_active--;
    b4aa:	strb	r3, [r0, #0]
	}
}
    b4ac:	ldr.w	r4, [sp], #4
    b4b0:	bx	lr
    b4b2:	nop
    b4b4:	.word	0x2000dca0
    b4b8:	.word	0x2000dcbc

0000b4bc <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    b4bc:	push	{r4, lr}
    b4be:	mov	r4, r0
{
	free(buffer);
    b4c0:	ldr	r0, [r0, #0]
    b4c2:	bl	c1cc <free>
}
    b4c6:	mov	r0, r4
    b4c8:	pop	{r4, pc}
    b4ca:	nop

0000b4cc <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    b4cc:	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    b4ce:	ldr	r3, [r0, #4]
    b4d0:	cmp	r3, r1
    b4d2:	bcc.n	b4d8 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    b4d4:	movs	r0, #1
		return 1;
	}
	return 0;
}
    b4d6:	pop	{r3, r4, r5, pc}
    b4d8:	mov	r5, r1
    b4da:	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    b4dc:	adds	r1, #1
    b4de:	ldr	r0, [r0, #0]
    b4e0:	bl	c8b8 <realloc>
	if (newbuffer) {
    b4e4:	cmp	r0, #0
    b4e6:	beq.n	b4d6 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    b4e8:	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    b4ea:	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    b4ee:	cmp	r3, #0
    b4f0:	bne.n	b4d4 <String::reserve(unsigned int)+0x8>
    b4f2:	strb	r3, [r0, #0]
    b4f4:	b.n	b4d4 <String::reserve(unsigned int)+0x8>
    b4f6:	nop

0000b4f8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    b4f8:	push	{r3, r4, r5, r6, r7, lr}
    b4fa:	mov	r4, r0
	if (length == 0) {
    b4fc:	mov	r5, r2
    b4fe:	cbnz	r2, b50e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    b500:	ldr	r3, [r0, #0]
    b502:	cbz	r3, b506 <String::copy(char const*, unsigned int)+0xe>
    b504:	strb	r2, [r3, #0]
		len = 0;
    b506:	movs	r3, #0
    b508:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    b50a:	mov	r0, r4
    b50c:	pop	{r3, r4, r5, r6, r7, pc}
    b50e:	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    b510:	mov	r1, r2
    b512:	bl	b4cc <String::reserve(unsigned int)>
    b516:	mov	r7, r0
    b518:	cbnz	r0, b52e <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    b51a:	ldr	r0, [r4, #0]
    b51c:	cbz	r0, b524 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    b51e:	bl	c1cc <free>
			buffer = NULL;
    b522:	str	r7, [r4, #0]
		}
		len = capacity = 0;
    b524:	movs	r3, #0
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    b526:	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    b528:	str	r3, [r4, #4]
    b52a:	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    b52c:	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    b52e:	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    b530:	mov	r1, r6
    b532:	ldr	r0, [r4, #0]
    b534:	bl	cfbc <strcpy>
	return *this;
    b538:	b.n	b50a <String::copy(char const*, unsigned int)+0x12>
    b53a:	nop

0000b53c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    b53c:	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    b53e:	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    b540:	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    b542:	str	r3, [r0, #0]
	capacity = 0;
    b544:	str	r3, [r0, #4]
	len = 0;
    b546:	str	r3, [r0, #8]
	flags = 0;
    b548:	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    b54a:	cbz	r1, b55e <String::String(char const*)+0x22>
    b54c:	mov	r5, r1
    b54e:	mov	r0, r1
    b550:	bl	d080 <strlen>
    b554:	mov	r2, r0
    b556:	mov	r1, r5
    b558:	mov	r0, r4
    b55a:	bl	b4f8 <String::copy(char const*, unsigned int)>
}
    b55e:	mov	r0, r4
    b560:	pop	{r3, r4, r5, pc}
    b562:	nop

0000b564 <String::operator=(char const*) [clone .part.3]>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    b564:	push	{r3, r4, r5, lr}
    b566:	mov	r4, r1
    b568:	mov	r5, r0
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    b56a:	mov	r0, r1
    b56c:	bl	d080 <strlen>
    b570:	mov	r1, r4
    b572:	mov	r2, r0
    b574:	mov	r0, r5
	} else {
		len = 0;
	}
	return *this;
}
    b576:	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    b57a:	b.w	b4f8 <String::copy(char const*, unsigned int)>
    b57e:	nop

0000b580 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    b580:	push	{r4, lr}
    b582:	mov	r4, r0
	if (cstr) {
    b584:	cbz	r1, b58e <String::operator=(char const*)+0xe>
    b586:	bl	b564 <String::operator=(char const*) [clone .part.3]>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    b58a:	mov	r0, r4
    b58c:	pop	{r4, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    b58e:	str	r1, [r4, #8]
	}
	return *this;
}
    b590:	mov	r0, r4
    b592:	pop	{r4, pc}

0000b594 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    b594:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b598:	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    b59a:	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    b59c:	mov	r4, r0
    b59e:	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    b5a0:	cmp	r3, r7
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    b5a2:	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    b5a4:	bhi.n	b5bc <String::append(char const*, unsigned int)+0x28>
    b5a6:	adds	r2, r3, r1
    b5a8:	cmp	r7, r2
    b5aa:	bcs.n	b5bc <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    b5ac:	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    b5b0:	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    b5b4:	cbnz	r5, b5c4 <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    b5b6:	mov	r0, r4
    b5b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    b5bc:	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    b5c0:	cmp	r5, #0
    b5c2:	beq.n	b5b6 <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    b5c4:	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    b5c6:	mov	r0, r4
    b5c8:	mov	r1, r6
    b5ca:	bl	b4cc <String::reserve(unsigned int)>
    b5ce:	cmp	r0, #0
    b5d0:	beq.n	b5b6 <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    b5d2:	cmp.w	r8, #0
    b5d6:	beq.n	b5f6 <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    b5d8:	ldr	r3, [r4, #0]
    b5da:	mov	r2, r5
    b5dc:	ldr	r0, [r4, #8]
    b5de:	add.w	r1, r3, r9
    b5e2:	add	r0, r3
    b5e4:	bl	9c30 <memcpy>
		buffer[newlen] = 0;
    b5e8:	ldr	r3, [r4, #0]
    b5ea:	movs	r2, #0
    b5ec:	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    b5ee:	str	r6, [r4, #8]
	return *this;
}
    b5f0:	mov	r0, r4
    b5f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    b5f6:	ldr	r0, [r4, #0]
    b5f8:	mov	r1, r7
    b5fa:	ldr	r3, [r4, #8]
    b5fc:	add	r0, r3
    b5fe:	bl	cfbc <strcpy>
    b602:	b.n	b5ee <String::append(char const*, unsigned int)+0x5a>

0000b604 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    b604:	push	{r4, lr}
    b606:	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    b608:	movs	r3, #0
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    b60a:	mov	r4, r0
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
    b60c:	movs	r2, #1
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    b60e:	strb.w	r1, [sp, #4]
	buf[1] = 0;
	append(buf, 1);
    b612:	add	r1, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    b614:	strb.w	r3, [sp, #5]
	append(buf, 1);
    b618:	bl	b594 <String::append(char const*, unsigned int)>
	return *this;
}
    b61c:	mov	r0, r4
    b61e:	add	sp, #8
    b620:	pop	{r4, pc}
    b622:	nop

0000b624 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    b624:	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    b626:	push	{r3, lr}
    b628:	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    b62a:	cbnz	r2, b638 <String::equals(char const*) const+0x14>
    b62c:	cbz	r1, b64c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    b62e:	ldrb	r0, [r3, #0]
    b630:	clz	r0, r0
    b634:	lsrs	r0, r0, #5
    b636:	pop	{r3, pc}
    b638:	cbz	r1, b648 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    b63a:	ldr	r0, [r0, #0]
    b63c:	bl	cce8 <strcmp>
    b640:	clz	r0, r0
    b644:	lsrs	r0, r0, #5
}
    b646:	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    b648:	ldr	r3, [r0, #0]
    b64a:	b.n	b62e <String::equals(char const*) const+0xa>
    b64c:	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    b64e:	pop	{r3, pc}

0000b650 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    b650:	cbz	r2, b682 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    b652:	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    b654:	clz	r4, r1
    b658:	lsrs	r4, r4, #5
    b65a:	cbnz	r4, b67c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2c>
	if (index >= len) {
    b65c:	ldr	r6, [r0, #8]
    b65e:	cmp	r6, r3
    b660:	bls.n	b67e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    b662:	subs	r6, r6, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    b664:	subs	r2, #1
    b666:	mov	r5, r1
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    b668:	ldr	r1, [r0, #0]
    b66a:	cmp	r6, r2
    b66c:	mov	r0, r5
    b66e:	add	r1, r3
    b670:	it	cs
    b672:	movcs	r6, r2
    b674:	mov	r2, r6
    b676:	bl	d15c <strncpy>
	buf[n] = 0;
    b67a:	strb	r4, [r5, r6]
    b67c:	pop	{r4, r5, r6, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    b67e:	strb	r4, [r1, #0]
		return;
    b680:	pop	{r4, r5, r6, pc}
    b682:	bx	lr

0000b684 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b684:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    b686:	ldr	r4, [pc, #132]	; (b70c <yield+0x88>)
    b688:	ldrb	r3, [r4, #0]
    b68a:	cbnz	r3, b6ae <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b68c:	ldr	r3, [pc, #128]	; (b710 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b68e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b690:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    b692:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b694:	cbnz	r3, b6de <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    b696:	ldr	r3, [pc, #124]	; (b714 <yield+0x90>)
    b698:	ldrb	r3, [r3, #0]
    b69a:	cmp	r3, #0
    b69c:	bne.n	b6f2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    b69e:	ldr	r3, [pc, #120]	; (b718 <yield+0x94>)

	running = 0;
    b6a0:	movs	r1, #0
    b6a2:	ldr	r2, [r3, #0]
    b6a4:	strb	r1, [r4, #0]
    b6a6:	cbz	r2, b6ae <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b6a8:	mrs	r2, IPSR
		if (ipsr != 0) return;
    b6ac:	cbz	r2, b6b0 <yield+0x2c>
    b6ae:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b6b0:	mrs	r0, PRIMASK
		__disable_irq();
    b6b4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    b6b6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    b6b8:	cbz	r2, b6f8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    b6ba:	ldr	r4, [pc, #96]	; (b71c <yield+0x98>)
    b6bc:	ldrb	r1, [r4, #0]
    b6be:	cbnz	r1, b6f8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b6c0:	movs	r6, #1
		firstYield = first->_next;
    b6c2:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    b6c4:	strb	r6, [r4, #0]
		firstYield = first->_next;
    b6c6:	str	r5, [r3, #0]
		if (firstYield) {
    b6c8:	cbz	r5, b700 <yield+0x7c>
			firstYield->_prev = nullptr;
    b6ca:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b6cc:	cbnz	r0, b6d0 <yield+0x4c>
    b6ce:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b6d0:	movs	r5, #0
		(*(first->_function))(*first);
    b6d2:	ldr	r3, [r2, #8]
    b6d4:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    b6d6:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    b6d8:	blx	r3
		runningFromYield = false;
    b6da:	strb	r5, [r4, #0]
    b6dc:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b6de:	bl	a080 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    b6e2:	cmp	r0, #0
    b6e4:	beq.n	b696 <yield+0x12>
    b6e6:	bl	ba20 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    b6ea:	ldr	r3, [pc, #40]	; (b714 <yield+0x90>)
    b6ec:	ldrb	r3, [r3, #0]
    b6ee:	cmp	r3, #0
    b6f0:	beq.n	b69e <yield+0x1a>
    b6f2:	bl	b468 <HardwareSerial::processSerialEvents()>
    b6f6:	b.n	b69e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b6f8:	cmp	r0, #0
    b6fa:	bne.n	b6ae <yield+0x2a>
    b6fc:	cpsie	i
    b6fe:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    b700:	ldr	r3, [pc, #28]	; (b720 <yield+0x9c>)
    b702:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b704:	cmp	r0, #0
    b706:	bne.n	b6d0 <yield+0x4c>
    b708:	b.n	b6ce <yield+0x4a>
    b70a:	nop
    b70c:	.word	0x2000dcbd
    b710:	.word	0x20000edc
    b714:	.word	0x2000dcbc
    b718:	.word	0x2000e4d4
    b71c:	.word	0x2000e4d8
    b720:	.word	0x2000e4d0

0000b724 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    b724:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    b726:	ldr	r4, [pc, #100]	; (b78c <random(unsigned long) [clone .part.0]+0x68>)
    b728:	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    b72a:	cbz	r3, b770 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    b72c:	ldr	r1, [pc, #96]	; (b790 <random(unsigned long) [clone .part.0]+0x6c>)
    b72e:	asrs	r5, r3, #31
    b730:	ldr.w	lr, [pc, #104]	; b79c <random(unsigned long) [clone .part.0]+0x78>
    b734:	smull	r6, r7, r3, r1
    b738:	ldr	r6, [pc, #88]	; (b794 <random(unsigned long) [clone .part.0]+0x70>)
    b73a:	smull	r2, r1, r1, r3
    b73e:	adds	r2, r3, r7
    b740:	add	r1, r3
    b742:	rsb	r2, r5, r2, asr #16
    b746:	rsb	r1, r5, r1, asr #16
    b74a:	movw	r5, #16807	; 0x41a7
    b74e:	mls	r2, lr, r2, r3
    b752:	mul.w	r1, r6, r1
    b756:	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    b75a:	cmp	r3, #0
    b75c:	bge.n	b77e <random(unsigned long) [clone .part.0]+0x5a>
    b75e:	mvn.w	r2, #2147483648	; 0x80000000
    b762:	add	r2, r3
    b764:	udiv	r3, r2, r0
	seed = x;
    b768:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b76a:	mls	r0, r0, r3, r2
    b76e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    b770:	ldr	r2, [pc, #36]	; (b798 <random(unsigned long) [clone .part.0]+0x74>)
    b772:	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b776:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b778:	mls	r0, r0, r3, r2
    b77c:	pop	{r4, r5, r6, r7, pc}
    b77e:	mov	r2, r3
    b780:	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    b784:	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    b786:	mls	r0, r0, r3, r2
    b78a:	pop	{r4, r5, r6, r7, pc}
    b78c:	.word	0x2000dcc0
    b790:	.word	0x834e0b5f
    b794:	.word	0xfffff4ec
    b798:	.word	0x1f0cce42
    b79c:	.word	0x0001f31d

0000b7a0 <randomSeed(unsigned long)>:

static uint32_t seed;

void randomSeed(uint32_t newseed)
{
	if (newseed > 0) seed = newseed;
    b7a0:	cbz	r0, b7a6 <randomSeed(unsigned long)+0x6>
    b7a2:	ldr	r3, [pc, #4]	; (b7a8 <randomSeed(unsigned long)+0x8>)
    b7a4:	str	r0, [r3, #0]
    b7a6:	bx	lr
    b7a8:	.word	0x2000dcc0

0000b7ac <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    b7ac:	cbz	r0, b7b2 <random(unsigned long)+0x6>
    b7ae:	b.w	b724 <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    b7b2:	bx	lr

0000b7b4 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    b7b4:	cmp	r0, r1
    b7b6:	bge.n	b7c6 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    b7b8:	push	{r4, lr}
    b7ba:	mov	r4, r0
    b7bc:	subs	r0, r1, r0
    b7be:	bl	b724 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    b7c2:	add	r0, r4
}
    b7c4:	pop	{r4, pc}
    b7c6:	bx	lr

0000b7c8 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    b7c8:	ldr	r0, [pc, #4]	; (b7d0 <IRQHandler_Serial1+0x8>)
    b7ca:	b.w	b314 <HardwareSerial::IRQHandler()>
    b7ce:	nop
    b7d0:	.word	0x20000e7c

0000b7d4 <serialEvent1()>:
};
HardwareSerial Serial1(&IMXRT_LPUART6, &UART6_Hardware, tx_buffer1, SERIAL1_TX_BUFFER_SIZE,
	rx_buffer1,  SERIAL1_RX_BUFFER_SIZE);

void serialEvent1() __attribute__((weak));
void serialEvent1() {Serial1.disableSerialEvents(); }		// No use calling this so disable if called...
    b7d4:	ldr	r0, [pc, #4]	; (b7dc <serialEvent1()+0x8>)
    b7d6:	b.w	b490 <HardwareSerial::disableSerialEvents()>
    b7da:	nop
    b7dc:	.word	0x20000e7c

0000b7e0 <serial_event_check_serial1()>:
{
	Serial1.IRQHandler();
}

void serial_event_check_serial1()
{
    b7e0:	push	{r3, lr}
	if (Serial1.available()) serialEvent1();
    b7e2:	ldr	r0, [pc, #12]	; (b7f0 <serial_event_check_serial1()+0x10>)
    b7e4:	bl	aef4 <HardwareSerial::available()>
    b7e8:	cbz	r0, b7ee <serial_event_check_serial1()+0xe>
    b7ea:	bl	b7d4 <serialEvent1()>
    b7ee:	pop	{r3, pc}
    b7f0:	.word	0x20000e7c

0000b7f4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    b7f4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b7f6:	mrs	r2, PRIMASK
		__disable_irq();
    b7fa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    b7fc:	ldrb	r3, [r0, #29]
    b7fe:	cbnz	r3, b80e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    b800:	ldrb	r1, [r0, #28]
    b802:	cmp	r1, #1
    b804:	beq.n	b818 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    b806:	cmp	r1, #3
    b808:	beq.n	b82c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    b80a:	movs	r3, #1
    b80c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b80e:	cbnz	r2, b812 <EventResponder::triggerEventNotImmediate()+0x1e>
    b810:	cpsie	i
	}
	enableInterrupts(irq);
}
    b812:	ldr.w	r4, [sp], #4
    b816:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    b818:	ldr	r4, [pc, #68]	; (b860 <EventResponder::triggerEventNotImmediate()+0x6c>)
    b81a:	ldr	r1, [r4, #0]
    b81c:	cbz	r1, b848 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b81e:	ldr	r1, [pc, #68]	; (b864 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    b820:	str	r3, [r0, #20]
				_prev = lastYield;
    b822:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    b824:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    b826:	str	r3, [r0, #24]
				_prev->_next = this;
    b828:	str	r0, [r3, #20]
    b82a:	b.n	b80a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    b82c:	ldr	r4, [pc, #56]	; (b868 <EventResponder::triggerEventNotImmediate()+0x74>)
    b82e:	ldr	r1, [r4, #0]
    b830:	cbz	r1, b854 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b832:	ldr	r1, [pc, #56]	; (b86c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    b834:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    b836:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    b838:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    b83a:	str	r3, [r0, #24]
				_prev->_next = this;
    b83c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    b83e:	ldr	r3, [pc, #48]	; (b870 <EventResponder::triggerEventNotImmediate()+0x7c>)
    b840:	mov.w	r1, #268435456	; 0x10000000
    b844:	str	r1, [r3, #0]
    b846:	b.n	b80a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    b848:	ldr	r3, [pc, #24]	; (b864 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    b84a:	str	r1, [r0, #20]
				_prev = nullptr;
    b84c:	str	r1, [r0, #24]
				firstYield = this;
    b84e:	str	r0, [r4, #0]
				lastYield = this;
    b850:	str	r0, [r3, #0]
    b852:	b.n	b80a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    b854:	ldr	r3, [pc, #20]	; (b86c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    b856:	str	r1, [r0, #20]
				_prev = nullptr;
    b858:	str	r1, [r0, #24]
				firstInterrupt = this;
    b85a:	str	r0, [r4, #0]
				lastInterrupt = this;
    b85c:	str	r0, [r3, #0]
    b85e:	b.n	b83e <EventResponder::triggerEventNotImmediate()+0x4a>
    b860:	.word	0x2000e4d4
    b864:	.word	0x2000e4d0
    b868:	.word	0x2000e4c4
    b86c:	.word	0x2000e4c8
    b870:	.word	0xe000ed04

0000b874 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    b874:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b876:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b878:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b87a:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b87c:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b87e:	beq.n	b888 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    b880:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b884:	b.w	b7f4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b888:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    b88a:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b88e:	bx	r3

0000b890 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b890:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b892:	mrs	r1, PRIMASK
		__disable_irq();
    b896:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b898:	ldr	r4, [pc, #48]	; (b8cc <EventResponder::runFromInterrupt()+0x3c>)
    b89a:	ldr	r3, [r4, #0]
		if (first) {
    b89c:	cbz	r3, b8c2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b89e:	ldr	r6, [pc, #48]	; (b8d0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b8a0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    b8a2:	ldr	r2, [r3, #20]
    b8a4:	str	r2, [r4, #0]
			if (firstInterrupt) {
    b8a6:	cbz	r2, b8c8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    b8a8:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b8aa:	cbnz	r1, b8ae <EventResponder::runFromInterrupt()+0x1e>
    b8ac:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    b8ae:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    b8b0:	mov	r0, r3
    b8b2:	ldr	r3, [r3, #8]
    b8b4:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b8b6:	mrs	r1, PRIMASK
		__disable_irq();
    b8ba:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b8bc:	ldr	r3, [r4, #0]
		if (first) {
    b8be:	cmp	r3, #0
    b8c0:	bne.n	b8a2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b8c2:	cbnz	r1, b8c6 <EventResponder::runFromInterrupt()+0x36>
    b8c4:	cpsie	i
    b8c6:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    b8c8:	str	r2, [r6, #0]
    b8ca:	b.n	b8aa <EventResponder::runFromInterrupt()+0x1a>
    b8cc:	.word	0x2000e4c4
    b8d0:	.word	0x2000e4c8

0000b8d4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    b8d4:	b.w	b890 <EventResponder::runFromInterrupt()>

0000b8d8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    b8d8:	ldr	r2, [pc, #96]	; (b93c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    b8da:	push	{r4, r5}
	if (listActive == nullptr) {
    b8dc:	ldr	r4, [r2, #0]
    b8de:	cmp	r4, #0
    b8e0:	beq.n	b934 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    b8e2:	ldr	r3, [r0, #0]
    b8e4:	ldr	r1, [r4, #0]
    b8e6:	cmp	r3, r1
    b8e8:	bcs.n	b90a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b8ea:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    b8ec:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    b8ee:	str	r4, [r0, #8]
		_prev = nullptr;
    b8f0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    b8f2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    b8f4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    b8f6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b8f8:	movs	r3, #2
}
    b8fa:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    b8fc:	strb	r3, [r0, #20]
}
    b8fe:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    b900:	str	r3, [r0, #0]
    b902:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    b904:	ldr	r1, [r2, #0]
    b906:	cmp	r3, r1
    b908:	bcc.n	b91c <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b90a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b90c:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    b90e:	cmp	r2, #0
    b910:	bne.n	b900 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    b912:	str	r2, [r0, #8]
		_prev = timer;
    b914:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    b916:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    b918:	str	r0, [r4, #8]
    b91a:	b.n	b8f8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b91c:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    b91e:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    b920:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    b922:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    b924:	str	r5, [r0, #12]
				timer->_prev = this;
    b926:	str	r0, [r4, #12]
				_prev->_next = this;
    b928:	ldr	r1, [r0, #12]
    b92a:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    b92c:	str	r3, [r4, #0]
				_state = TimerActive;
    b92e:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    b930:	pop	{r4, r5}
    b932:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    b934:	str	r4, [r0, #8]
		_prev = nullptr;
    b936:	str	r4, [r0, #12]
		listActive = this;
    b938:	str	r0, [r2, #0]
    b93a:	b.n	b8f8 <MillisTimer::addToActiveList()+0x20>
    b93c:	.word	0x2000e4cc

0000b940 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    b940:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    b942:	ldr	r6, [pc, #136]	; (b9cc <MillisTimer::runFromTimer()+0x8c>)
    b944:	ldr	r4, [r6, #0]
	while (timer) {
    b946:	cbz	r4, b994 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b948:	ldr	r3, [r4, #0]
    b94a:	cmp	r3, #0
    b94c:	bne.n	b9c4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    b94e:	mov	r5, r3
    b950:	ldr	r7, [pc, #124]	; (b9d0 <MillisTimer::runFromTimer()+0x90>)
    b952:	b.n	b95e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    b954:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b956:	cbz	r4, b994 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    b958:	ldr	r3, [r4, #0]
    b95a:	cmp	r3, #0
    b95c:	bne.n	b9c4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    b95e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    b960:	cbz	r3, b964 <MillisTimer::runFromTimer()+0x24>
    b962:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    b964:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    b966:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b968:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    b96a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b96c:	ldr	r3, [r3, #0]
    b96e:	cmp	r3, r7
    b970:	bne.n	b9b6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b972:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    b974:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    b976:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    b978:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    b97a:	beq.n	b9be <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    b97c:	bl	b7f4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    b980:	ldr	r3, [r4, #4]
    b982:	cmp	r3, #0
    b984:	beq.n	b954 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    b986:	str	r3, [r4, #0]
				timer->addToActiveList();
    b988:	mov	r0, r4
    b98a:	bl	b8d8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    b98e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    b990:	cmp	r4, #0
    b992:	bne.n	b958 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b994:	mrs	r3, PRIMASK
		__disable_irq();
    b998:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b99a:	ldr	r2, [pc, #56]	; (b9d4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b99c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    b99e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    b9a0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    b9a2:	cbnz	r3, b9a6 <MillisTimer::runFromTimer()+0x66>
    b9a4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    b9a6:	cbz	r0, b9b4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    b9a8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    b9aa:	bl	b8d8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    b9ae:	mov	r0, r4
    b9b0:	cmp	r0, #0
    b9b2:	bne.n	b9a8 <MillisTimer::runFromTimer()+0x68>
    b9b4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    b9b6:	mov	r2, r4
    b9b8:	movs	r1, #0
    b9ba:	blx	r3
    b9bc:	b.n	b980 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    b9be:	ldr	r3, [r0, #8]
    b9c0:	blx	r3
    b9c2:	b.n	b980 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    b9c4:	subs	r3, #1
    b9c6:	str	r3, [r4, #0]
			break;
    b9c8:	b.n	b994 <MillisTimer::runFromTimer()+0x54>
    b9ca:	nop
    b9cc:	.word	0x2000e4cc
    b9d0:	.word	0x0000b875
    b9d4:	.word	0x2000e4dc

0000b9d8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b9d8:	ldr	r2, [pc, #16]	; (b9ec <systick_isr+0x14>)
    b9da:	ldr	r3, [pc, #20]	; (b9f0 <systick_isr+0x18>)
    b9dc:	ldr	r1, [r2, #0]
	systick_millis_count++;
    b9de:	ldr	r2, [pc, #20]	; (b9f4 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b9e0:	str	r1, [r3, #0]
	systick_millis_count++;
    b9e2:	ldr	r3, [r2, #0]
    b9e4:	adds	r3, #1
    b9e6:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    b9e8:	b.w	b940 <MillisTimer::runFromTimer()>
    b9ec:	.word	0xe0001004
    b9f0:	.word	0x2000dc94
    b9f4:	.word	0x2000dc98

0000b9f8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    b9f8:	b.w	a094 <usb_serial_flush_input>

0000b9fc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    b9fc:	b.w	a05c <usb_serial_peekchar>

0000ba00 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ba00:	b.w	a010 <usb_serial_getchar>

0000ba04 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ba04:	b.w	a080 <usb_serial_available>

0000ba08 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ba08:	b.w	a160 <usb_serial_flush_output>

0000ba0c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ba0c:	b.w	a114 <usb_serial_write_buffer_free>

0000ba10 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ba10:	mov	r0, r1
    ba12:	mov	r1, r2
    ba14:	b.w	a0fc <usb_serial_write>

0000ba18 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ba18:	mov	r0, r1
    ba1a:	b.w	a0d0 <usb_serial_putchar>
    ba1e:	nop

0000ba20 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    ba20:	ldr	r3, [pc, #4]	; (ba28 <serialEvent()+0x8>)
    ba22:	movs	r2, #0
    ba24:	strb	r2, [r3, #0]
    ba26:	bx	lr
    ba28:	.word	0x20000edc

0000ba2c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    ba2c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ba2e:	mov	r6, r1
    ba30:	cbz	r1, ba50 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ba32:	cbz	r2, ba54 <Print::write(unsigned char const*, unsigned int)+0x28>
    ba34:	mov	r7, r0
    ba36:	mov	r4, r2
    ba38:	movs	r5, #0
    ba3a:	ldr	r3, [r7, #0]
    ba3c:	mov	r0, r7
    ba3e:	ldrb.w	r1, [r6], #1
    ba42:	ldr	r3, [r3, #0]
    ba44:	blx	r3
    ba46:	subs	r4, #1
    ba48:	add	r5, r0
    ba4a:	bne.n	ba3a <Print::write(unsigned char const*, unsigned int)+0xe>
    ba4c:	mov	r0, r5
    ba4e:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    ba50:	mov	r0, r1
    ba52:	pop	{r3, r4, r5, r6, r7, pc}
    ba54:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    ba56:	pop	{r3, r4, r5, r6, r7, pc}

0000ba58 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    ba58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ba5c:	ldr	r4, [r1, #8]
    ba5e:	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    ba60:	cbz	r4, ba9e <Print::print(String const&)+0x46>
    ba62:	movs	r5, #0
    ba64:	mov	r6, r0
    ba66:	mov	r9, r1
    ba68:	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    ba6a:	mov	r3, r5
    ba6c:	movs	r2, #33	; 0x21
    ba6e:	add	r1, sp, #4
    ba70:	mov	r0, r9
    ba72:	bl	b650 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    ba76:	cmp	r4, #32
    ba78:	mov	r3, r4
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    ba7a:	ldr	r0, [r6, #0]
    ba7c:	it	cs
    ba7e:	movcs	r3, #32
    ba80:	add	r1, sp, #4
    ba82:	ldr.w	r8, [r0, #4]
    ba86:	mov	r0, r6
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
    ba88:	subs	r4, r4, r3
		count += write(buffer, nbytes);
    ba8a:	mov	r2, r3
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    ba8c:	add	r5, r3
		len -= nbytes;
		count += write(buffer, nbytes);
    ba8e:	blx	r8
    ba90:	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    ba92:	cmp	r4, #0
    ba94:	bne.n	ba6a <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    ba96:	mov	r0, r7
    ba98:	add	sp, #44	; 0x2c
    ba9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    ba9e:	mov	r7, r4
    baa0:	b.n	ba96 <Print::print(String const&)+0x3e>
    baa2:	nop

0000baa4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    baa4:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    baa6:	ldr	r4, [pc, #24]	; (bac0 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    baa8:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    baaa:	ldr	r3, [r0, #0]
    baac:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    baae:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    bab0:	add	r1, sp, #4
    bab2:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    bab4:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    bab8:	blx	r3
}
    baba:	add	sp, #8
    babc:	pop	{r4, pc}
    babe:	nop
    bac0:	.word	0x2000092c

0000bac4 <operator new(unsigned int)>:
    bac4:	b.w	c1bc <malloc>

0000bac8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    bac8:	movs	r0, #4
    baca:	mov	r1, lr
    bacc:	tst	r0, r1
    bace:	beq.n	bad8 <_MSP>
    bad0:	mrs	r0, PSP
    bad4:	b.w	bae0 <HardFault_HandlerC>

0000bad8 <_MSP>:
    bad8:	mrs	r0, MSP
    badc:	b.w	bae0 <HardFault_HandlerC>

0000bae0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bae0:	ldr	r3, [pc, #108]	; (bb50 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    bae2:	movs	r1, #5
    bae4:	ldr	r2, [pc, #108]	; (bb54 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    bae6:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    bae8:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    baea:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    baee:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    baf0:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    baf4:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    baf6:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    baf8:	ldr	r4, [pc, #92]	; (bb58 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bafa:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    bafc:	ldr	r0, [pc, #92]	; (bb5c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    bafe:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    bb00:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    bb04:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    bb08:	ldr	r3, [r4, #0]
    bb0a:	cmp	r3, r0
    bb0c:	bls.n	bb14 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    bb0e:	ldr	r0, [pc, #80]	; (bb60 <HardFault_HandlerC+0x80>)
    bb10:	bl	a1cc <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    bb14:	ldr	r5, [pc, #56]	; (bb50 <HardFault_HandlerC+0x70>)
    bb16:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    bb18:	movs	r0, #0
    bb1a:	ldr	r2, [pc, #72]	; (bb64 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    bb1c:	ldr	r1, [pc, #72]	; (bb68 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    bb1e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    bb22:	str	r0, [sp, #4]
    bb24:	ldr	r3, [sp, #4]
    bb26:	cmp	r3, r2
    bb28:	bhi.n	bb36 <HardFault_HandlerC+0x56>
    bb2a:	ldr	r3, [sp, #4]
    bb2c:	adds	r3, #1
    bb2e:	str	r3, [sp, #4]
    bb30:	ldr	r3, [sp, #4]
    bb32:	cmp	r3, r2
    bb34:	bls.n	bb2a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    bb36:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    bb3a:	str	r0, [sp, #4]
    bb3c:	ldr	r3, [sp, #4]
    bb3e:	cmp	r3, r1
    bb40:	bhi.n	bb1e <HardFault_HandlerC+0x3e>
    bb42:	ldr	r3, [sp, #4]
    bb44:	adds	r3, #1
    bb46:	str	r3, [sp, #4]
    bb48:	ldr	r3, [sp, #4]
    bb4a:	cmp	r3, r1
    bb4c:	bls.n	bb42 <HardFault_HandlerC+0x62>
    bb4e:	b.n	bb1e <HardFault_HandlerC+0x3e>
    bb50:	.word	0x401bc000
    bb54:	.word	0x401f8000
    bb58:	.word	0x20000dc8
    bb5c:	.word	0x23c345ff
    bb60:	.word	0x11e1a300
    bb64:	.word	0x000f423f
    bb68:	.word	0x0089543f

0000bb6c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    bb6c:	ldr	r2, [pc, #36]	; (bb94 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    bb6e:	push	{r3, lr}
        char *prev = __brkval;
    bb70:	ldr	r3, [r2, #0]
        if (incr != 0) {
    bb72:	cbz	r0, bb7e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    bb74:	add	r0, r3
    bb76:	ldr	r1, [pc, #32]	; (bb98 <_sbrk+0x2c>)
    bb78:	cmp	r0, r1
    bb7a:	bhi.n	bb82 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    bb7c:	str	r0, [r2, #0]
        }
        return prev;
}
    bb7e:	mov	r0, r3
    bb80:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    bb82:	bl	c160 <__errno>
    bb86:	movs	r2, #12
                        return (void *)-1;
    bb88:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    bb8c:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    bb8e:	mov	r0, r3
    bb90:	pop	{r3, pc}
    bb92:	nop
    bb94:	.word	0x20000ef0
    bb98:	.word	0x20280000

0000bb9c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bb9c:	push	{r4, r5, r6, r7}
    bb9e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    bba0:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    bba2:	mov	r7, r6
    bba4:	b.n	bba8 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    bba6:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    bba8:	udiv	r3, r0, r2
    bbac:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bbb0:	add.w	r4, r0, #55	; 0x37
    bbb4:	cmp	r0, #9
    bbb6:	add.w	r0, r0, #48	; 0x30
    bbba:	uxtb	r4, r4
    bbbc:	it	ls
    bbbe:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    bbc0:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bbc2:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    bbc6:	cmp	r3, #0
    bbc8:	bne.n	bba6 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    bbca:	adds	r2, r1, r5
    bbcc:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    bbce:	cbz	r5, bbe4 <ultoa+0x48>
    bbd0:	adds	r3, #1
		t = buf[j];
    bbd2:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    bbd6:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bbd8:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    bbda:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bbdc:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    bbde:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    bbe2:	blt.n	bbd0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    bbe4:	mov	r0, r1
    bbe6:	pop	{r4, r5, r6, r7}
    bbe8:	bx	lr
    bbea:	nop

0000bbec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bbec:	ldr	r0, [pc, #656]	; (be80 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bbee:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bbf2:	ldr	r3, [pc, #656]	; (be84 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bbf4:	ldr	r2, [r0, #120]	; 0x78
    bbf6:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    bbfa:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bbfc:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bbfe:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bc00:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bc04:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bc08:	ldr	r4, [pc, #636]	; (be88 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bc0a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bc0e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bc10:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bc14:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bc16:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bc18:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bc1c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bc20:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bc24:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    bc28:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bc2c:	ldrh.w	r0, [r3, #392]	; 0x188
    bc30:	uxth	r0, r0
    bc32:	orr.w	r0, r0, #240	; 0xf0
    bc36:	strh.w	r0, [r3, #392]	; 0x188
    bc3a:	add.w	r0, r1, r1, lsl #1
    bc3e:	ldr	r3, [pc, #580]	; (be84 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    bc40:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bc42:	movs	r5, #0
    bc44:	lsls	r0, r0, #5
    bc46:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bc48:	cmp	r1, #4
    bc4a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bc4c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bc50:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    bc52:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bc54:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bc56:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bc58:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bc5a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    bc5c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bc5e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bc60:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bc62:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bc64:	bne.n	bc3a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bc66:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bc6a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bc6e:	ldr	r3, [pc, #540]	; (be8c <pwm_init+0x2a0>)
    bc70:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bc74:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bc76:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bc78:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bc7c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bc7e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bc82:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bc86:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bc8a:	ldrh.w	r0, [r4, #392]	; 0x188
    bc8e:	uxth	r0, r0
    bc90:	orr.w	r0, r0, #3840	; 0xf00
    bc94:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bc98:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bc9c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bca0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    bca4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bca8:	ldrh.w	r0, [r3, #392]	; 0x188
    bcac:	uxth	r0, r0
    bcae:	orr.w	r0, r0, #240	; 0xf0
    bcb2:	strh.w	r0, [r3, #392]	; 0x188
    bcb6:	add.w	r0, r1, r1, lsl #1
    bcba:	ldr	r3, [pc, #464]	; (be8c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    bcbc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bcbe:	movs	r5, #0
    bcc0:	lsls	r0, r0, #5
    bcc2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bcc4:	cmp	r1, #4
    bcc6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcc8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bcca:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bcce:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bcd0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bcd2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bcd4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bcd6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    bcd8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bcda:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bcdc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bcde:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bce0:	bne.n	bcb6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bce2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bce6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcea:	ldr	r3, [pc, #420]	; (be90 <pwm_init+0x2a4>)
    bcec:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bcf0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bcf2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcf4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bcf8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bcfa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bcfe:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd02:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd06:	ldrh.w	r0, [r4, #392]	; 0x188
    bd0a:	uxth	r0, r0
    bd0c:	orr.w	r0, r0, #3840	; 0xf00
    bd10:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd14:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bd18:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bd1c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    bd20:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd24:	ldrh.w	r0, [r3, #392]	; 0x188
    bd28:	uxth	r0, r0
    bd2a:	orr.w	r0, r0, #240	; 0xf0
    bd2e:	strh.w	r0, [r3, #392]	; 0x188
    bd32:	add.w	r0, r1, r1, lsl #1
    bd36:	ldr	r3, [pc, #344]	; (be90 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    bd38:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bd3a:	movs	r5, #0
    bd3c:	lsls	r0, r0, #5
    bd3e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bd40:	cmp	r1, #4
    bd42:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd44:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd46:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd4a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd4c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd4e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd50:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd52:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd54:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd56:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd58:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd5a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bd5c:	bne.n	bd32 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd5e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bd62:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd66:	ldr	r3, [pc, #300]	; (be94 <pwm_init+0x2a8>)
    bd68:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd6c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bd6e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd70:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bd74:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd76:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd7a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd7e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd82:	ldrh.w	r0, [r4, #392]	; 0x188
    bd86:	uxth	r0, r0
    bd88:	orr.w	r0, r0, #3840	; 0xf00
    bd8c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd90:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bd94:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    bd98:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    bd9c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bda0:	ldrh.w	r0, [r3, #392]	; 0x188
    bda4:	uxth	r0, r0
    bda6:	orr.w	r0, r0, #240	; 0xf0
    bdaa:	strh.w	r0, [r3, #392]	; 0x188
    bdae:	add.w	r0, r1, r1, lsl #1
    bdb2:	ldr	r3, [pc, #224]	; (be94 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    bdb4:	adds	r1, #1
    bdb6:	lsls	r0, r0, #5
    bdb8:	mov	r4, r3
    bdba:	cmp	r1, #4
    bdbc:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bdbe:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bdc0:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bdc4:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bdc6:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bdc8:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bdca:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bdcc:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    bdce:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bdd0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bdd2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bdd4:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    bdd6:	bne.n	bdae <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bdd8:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bddc:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    bdde:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bde0:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bde4:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bde6:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    bdea:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdec:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bdf0:	orrs	r3, r7
    bdf2:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bdf6:	ldrh.w	r3, [r4, #392]	; 0x188
    bdfa:	uxth	r3, r3
    bdfc:	orr.w	r3, r3, #3840	; 0xf00
    be00:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    be04:	lsls	r0, r2, #5
    be06:	ldr	r3, [pc, #144]	; (be98 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be08:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be0a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be0c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    be0e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    be10:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be12:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be14:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be16:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be1a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    be1c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be1e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be20:	bne.n	be04 <pwm_init+0x218>
    be22:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be24:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be26:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be2a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    be2e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be30:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    be34:	lsls	r0, r2, #5
    be36:	ldr	r3, [pc, #100]	; (be9c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be38:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be3a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be3c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    be3e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    be40:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be42:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be44:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be46:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be48:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    be4a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be4c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be4e:	bne.n	be34 <pwm_init+0x248>
    be50:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be52:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be54:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be58:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    be5c:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be5e:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    be62:	lsls	r0, r2, #5
    be64:	ldr	r3, [pc, #56]	; (bea0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be66:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be68:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be6a:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    be6c:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    be6e:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be70:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be72:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be74:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be76:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    be78:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be7a:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    be7c:	bne.n	be62 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    be7e:	pop	{r4, r5, r6, r7, pc}
    be80:	.word	0x400fc000
    be84:	.word	0x403dc000
    be88:	.word	0xfc030000
    be8c:	.word	0x403e0000
    be90:	.word	0x403e4000
    be94:	.word	0x403e8000
    be98:	.word	0x401dc000
    be9c:	.word	0x401e0000
    bea0:	.word	0x401e4000
    bea4:	.word	0x00000000

0000bea8 <sqrt>:
    bea8:	push	{lr}
    beaa:	vpush	{d8}
    beae:	vmov.f64	d8, d0
    beb2:	sub	sp, #44	; 0x2c
    beb4:	bl	bf50 <__ieee754_sqrt>
    beb8:	ldr	r3, [pc, #140]	; (bf48 <sqrt+0xa0>)
    beba:	ldrsb.w	r3, [r3]
    bebe:	adds	r2, r3, #1
    bec0:	beq.n	beda <sqrt+0x32>
    bec2:	vcmp.f64	d8, d8
    bec6:	vmrs	APSR_nzcv, fpscr
    beca:	bvs.n	beda <sqrt+0x32>
    becc:	vldr	d7, [pc, #112]	; bf40 <sqrt+0x98>
    bed0:	vcmpe.f64	d8, d7
    bed4:	vmrs	APSR_nzcv, fpscr
    bed8:	bmi.n	bee4 <sqrt+0x3c>
    beda:	add	sp, #44	; 0x2c
    bedc:	vpop	{d8}
    bee0:	ldr.w	pc, [sp], #4
    bee4:	movs	r2, #1
    bee6:	ldr	r1, [pc, #100]	; (bf4c <sqrt+0xa4>)
    bee8:	str	r2, [sp, #0]
    beea:	movs	r2, #0
    beec:	vstr	d8, [sp, #16]
    bef0:	vstr	d8, [sp, #8]
    bef4:	str	r1, [sp, #4]
    bef6:	str	r2, [sp, #32]
    bef8:	cbz	r3, bf20 <sqrt+0x78>
    befa:	vdiv.f64	d6, d7, d7
    befe:	cmp	r3, #2
    bf00:	vstr	d6, [sp, #24]
    bf04:	bne.n	bf24 <sqrt+0x7c>
    bf06:	bl	c160 <__errno>
    bf0a:	movs	r3, #33	; 0x21
    bf0c:	str	r3, [r0, #0]
    bf0e:	ldr	r3, [sp, #32]
    bf10:	cbnz	r3, bf30 <sqrt+0x88>
    bf12:	vldr	d0, [sp, #24]
    bf16:	add	sp, #44	; 0x2c
    bf18:	vpop	{d8}
    bf1c:	ldr.w	pc, [sp], #4
    bf20:	vstr	d7, [sp, #24]
    bf24:	mov	r0, sp
    bf26:	bl	c0d4 <matherr>
    bf2a:	cmp	r0, #0
    bf2c:	bne.n	bf0e <sqrt+0x66>
    bf2e:	b.n	bf06 <sqrt+0x5e>
    bf30:	bl	c160 <__errno>
    bf34:	ldr	r3, [sp, #32]
    bf36:	str	r3, [r0, #0]
    bf38:	b.n	bf12 <sqrt+0x6a>
    bf3a:	nop
    bf3c:	nop.w
	...
    bf48:	.word	0x20000ef4
    bf4c:	.word	0x20000930

0000bf50 <__ieee754_sqrt>:
    bf50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf54:	sub	sp, #8
    bf56:	vstr	d0, [sp]
    bf5a:	ldr	r1, [pc, #372]	; (c0d0 <__ieee754_sqrt+0x180>)
    bf5c:	ldr	r3, [sp, #4]
    bf5e:	ldr	r0, [sp, #0]
    bf60:	mov	r4, r1
    bf62:	ands	r1, r3
    bf64:	cmp	r1, r4
    bf66:	beq.w	c09a <__ieee754_sqrt+0x14a>
    bf6a:	cmp	r3, #0
    bf6c:	mov	r2, r0
    bf6e:	ble.n	c060 <__ieee754_sqrt+0x110>
    bf70:	asrs	r7, r3, #20
    bf72:	beq.w	c07a <__ieee754_sqrt+0x12a>
    bf76:	subw	r7, r7, #1023	; 0x3ff
    bf7a:	ubfx	r3, r3, #0, #20
    bf7e:	lsls	r1, r7, #31
    bf80:	orr.w	r3, r3, #1048576	; 0x100000
    bf84:	bmi.n	c056 <__ieee754_sqrt+0x106>
    bf86:	add.w	r1, r3, r2, lsr #31
    bf8a:	movs	r6, #0
    bf8c:	add	r3, r1
    bf8e:	asrs	r7, r7, #1
    bf90:	lsls	r2, r2, #1
    bf92:	mov	lr, r6
    bf94:	movs	r0, #22
    bf96:	mov.w	r1, #2097152	; 0x200000
    bf9a:	add.w	r4, lr, r1
    bf9e:	cmp	r4, r3
    bfa0:	mov.w	r5, r2, lsr #31
    bfa4:	mov.w	r2, r2, lsl #1
    bfa8:	bgt.n	bfb2 <__ieee754_sqrt+0x62>
    bfaa:	subs	r3, r3, r4
    bfac:	add.w	lr, r4, r1
    bfb0:	add	r6, r1
    bfb2:	subs	r0, #1
    bfb4:	add.w	r3, r5, r3, lsl #1
    bfb8:	mov.w	r1, r1, lsr #1
    bfbc:	bne.n	bf9a <__ieee754_sqrt+0x4a>
    bfbe:	mov	ip, r0
    bfc0:	movs	r4, #32
    bfc2:	mov.w	r1, #2147483648	; 0x80000000
    bfc6:	b.n	bfdc <__ieee754_sqrt+0x8c>
    bfc8:	beq.n	c00c <__ieee754_sqrt+0xbc>
    bfca:	add.w	r5, r3, r2, lsr #31
    bfce:	subs	r4, #1
    bfd0:	mov.w	r1, r1, lsr #1
    bfd4:	add	r3, r5
    bfd6:	mov.w	r2, r2, lsl #1
    bfda:	beq.n	c01e <__ieee754_sqrt+0xce>
    bfdc:	cmp	lr, r3
    bfde:	add.w	r5, r1, ip
    bfe2:	bge.n	bfc8 <__ieee754_sqrt+0x78>
    bfe4:	cmp	r5, #0
    bfe6:	add.w	ip, r5, r1
    bfea:	blt.n	c000 <__ieee754_sqrt+0xb0>
    bfec:	mov	r8, lr
    bfee:	cmp	r5, r2
    bff0:	rsb	r3, lr, r3
    bff4:	bls.n	bff8 <__ieee754_sqrt+0xa8>
    bff6:	subs	r3, #1
    bff8:	subs	r2, r2, r5
    bffa:	add	r0, r1
    bffc:	mov	lr, r8
    bffe:	b.n	bfca <__ieee754_sqrt+0x7a>
    c000:	cmp.w	ip, #0
    c004:	blt.n	bfec <__ieee754_sqrt+0x9c>
    c006:	add.w	r8, lr, #1
    c00a:	b.n	bfee <__ieee754_sqrt+0x9e>
    c00c:	cmp	r5, r2
    c00e:	bhi.n	c046 <__ieee754_sqrt+0xf6>
    c010:	cmp	r5, #0
    c012:	add.w	ip, r5, r1
    c016:	blt.n	c0aa <__ieee754_sqrt+0x15a>
    c018:	mov	r8, r3
    c01a:	movs	r3, #0
    c01c:	b.n	bff8 <__ieee754_sqrt+0xa8>
    c01e:	orrs	r3, r2
    c020:	bne.n	c04a <__ieee754_sqrt+0xfa>
    c022:	lsrs	r0, r0, #1
    c024:	asrs	r1, r6, #1
    c026:	lsls	r3, r6, #31
    c028:	add.w	r1, r1, #1069547520	; 0x3fc00000
    c02c:	add.w	r1, r1, #2097152	; 0x200000
    c030:	it	mi
    c032:	orrmi.w	r0, r0, #2147483648	; 0x80000000
    c036:	add.w	r3, r1, r7, lsl #20
    c03a:	mov	r2, r0
    c03c:	vmov	d0, r2, r3
    c040:	add	sp, #8
    c042:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c046:	mov	r3, lr
    c048:	b.n	bfca <__ieee754_sqrt+0x7a>
    c04a:	adds	r2, r0, #1
    c04c:	beq.n	c0b2 <__ieee754_sqrt+0x162>
    c04e:	and.w	r3, r0, #1
    c052:	add	r0, r3
    c054:	b.n	c022 <__ieee754_sqrt+0xd2>
    c056:	lsls	r3, r3, #1
    c058:	add.w	r3, r3, r2, lsr #31
    c05c:	lsls	r2, r2, #1
    c05e:	b.n	bf86 <__ieee754_sqrt+0x36>
    c060:	bic.w	r1, r3, #2147483648	; 0x80000000
    c064:	orrs	r1, r0
    c066:	beq.n	c0a4 <__ieee754_sqrt+0x154>
    c068:	cbnz	r3, c0c2 <__ieee754_sqrt+0x172>
    c06a:	mov	r7, r3
    c06c:	lsrs	r3, r2, #11
    c06e:	subs	r7, #21
    c070:	lsls	r2, r2, #21
    c072:	cmp	r3, #0
    c074:	beq.n	c06c <__ieee754_sqrt+0x11c>
    c076:	lsls	r5, r3, #11
    c078:	bmi.n	c0b8 <__ieee754_sqrt+0x168>
    c07a:	movs	r1, #0
    c07c:	b.n	c080 <__ieee754_sqrt+0x130>
    c07e:	mov	r1, r0
    c080:	lsls	r3, r3, #1
    c082:	lsls	r4, r3, #11
    c084:	add.w	r0, r1, #1
    c088:	bpl.n	c07e <__ieee754_sqrt+0x12e>
    c08a:	rsb	r4, r0, #32
    c08e:	lsr.w	r4, r2, r4
    c092:	orrs	r3, r4
    c094:	subs	r7, r7, r1
    c096:	lsls	r2, r0
    c098:	b.n	bf76 <__ieee754_sqrt+0x26>
    c09a:	vfma.f64	d0, d0, d0
    c09e:	add	sp, #8
    c0a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0a4:	vldr	d0, [sp]
    c0a8:	b.n	c040 <__ieee754_sqrt+0xf0>
    c0aa:	cmp.w	ip, #0
    c0ae:	bge.n	c006 <__ieee754_sqrt+0xb6>
    c0b0:	b.n	c018 <__ieee754_sqrt+0xc8>
    c0b2:	adds	r6, #1
    c0b4:	mov	r0, r4
    c0b6:	b.n	c024 <__ieee754_sqrt+0xd4>
    c0b8:	movs	r4, #32
    c0ba:	mov.w	r1, #4294967295
    c0be:	movs	r0, #0
    c0c0:	b.n	c08e <__ieee754_sqrt+0x13e>
    c0c2:	vldr	d7, [sp]
    c0c6:	vsub.f64	d7, d7, d7
    c0ca:	vdiv.f64	d0, d7, d7
    c0ce:	b.n	c040 <__ieee754_sqrt+0xf0>
    c0d0:	.word	0x7ff00000

0000c0d4 <matherr>:
    c0d4:	movs	r0, #0
    c0d6:	bx	lr

0000c0d8 <__aeabi_atexit>:
    c0d8:	mov	r3, r1
    c0da:	mov	r1, r0
    c0dc:	mov	r0, r3
    c0de:	b.w	c154 <__cxa_atexit>
    c0e2:	nop

0000c0e4 <calloc>:
    c0e4:	ldr	r3, [pc, #8]	; (c0f0 <calloc+0xc>)
    c0e6:	mov	r2, r1
    c0e8:	mov	r1, r0
    c0ea:	ldr	r0, [r3, #0]
    c0ec:	b.w	c0f4 <_calloc_r>
    c0f0:	.word	0x20001320

0000c0f4 <_calloc_r>:
    c0f4:	push	{r4, lr}
    c0f6:	mul.w	r1, r2, r1
    c0fa:	bl	c1dc <_malloc_r>
    c0fe:	mov	r4, r0
    c100:	cbz	r0, c13a <_calloc_r+0x46>
    c102:	ldr.w	r2, [r0, #-4]
    c106:	bic.w	r2, r2, #3
    c10a:	subs	r2, #4
    c10c:	cmp	r2, #36	; 0x24
    c10e:	bhi.n	c142 <_calloc_r+0x4e>
    c110:	cmp	r2, #19
    c112:	bls.n	c13e <_calloc_r+0x4a>
    c114:	movs	r3, #0
    c116:	cmp	r2, #27
    c118:	str	r3, [r0, #0]
    c11a:	str	r3, [r0, #4]
    c11c:	bls.n	c14c <_calloc_r+0x58>
    c11e:	cmp	r2, #36	; 0x24
    c120:	str	r3, [r0, #8]
    c122:	str	r3, [r0, #12]
    c124:	iteee	ne
    c126:	addne.w	r2, r0, #16
    c12a:	streq	r3, [r0, #16]
    c12c:	streq	r3, [r0, #20]
    c12e:	addeq.w	r2, r0, #24
    c132:	movs	r3, #0
    c134:	str	r3, [r2, #0]
    c136:	str	r3, [r2, #4]
    c138:	str	r3, [r2, #8]
    c13a:	mov	r0, r4
    c13c:	pop	{r4, pc}
    c13e:	mov	r2, r0
    c140:	b.n	c132 <_calloc_r+0x3e>
    c142:	movs	r1, #0
    c144:	bl	c814 <memset>
    c148:	mov	r0, r4
    c14a:	pop	{r4, pc}
    c14c:	add.w	r2, r0, #8
    c150:	b.n	c132 <_calloc_r+0x3e>
    c152:	nop

0000c154 <__cxa_atexit>:
    c154:	mov	r3, r2
    c156:	mov	r2, r1
    c158:	mov	r1, r0
    c15a:	movs	r0, #2
    c15c:	b.w	d1c4 <__register_exitproc>

0000c160 <__errno>:
    c160:	ldr	r3, [pc, #4]	; (c168 <__errno+0x8>)
    c162:	ldr	r0, [r3, #0]
    c164:	bx	lr
    c166:	nop
    c168:	.word	0x20001320

0000c16c <__libc_init_array>:
    c16c:	push	{r4, r5, r6, lr}
    c16e:	ldr	r6, [pc, #60]	; (c1ac <__libc_init_array+0x40>)
    c170:	ldr	r5, [pc, #60]	; (c1b0 <__libc_init_array+0x44>)
    c172:	subs	r6, r6, r5
    c174:	asrs	r6, r6, #2
    c176:	it	ne
    c178:	movne	r4, #0
    c17a:	beq.n	c188 <__libc_init_array+0x1c>
    c17c:	adds	r4, #1
    c17e:	ldr.w	r3, [r5], #4
    c182:	blx	r3
    c184:	cmp	r6, r4
    c186:	bne.n	c17c <__libc_init_array+0x10>
    c188:	ldr	r6, [pc, #40]	; (c1b4 <__libc_init_array+0x48>)
    c18a:	ldr	r5, [pc, #44]	; (c1b8 <__libc_init_array+0x4c>)
    c18c:	subs	r6, r6, r5
    c18e:	bl	d4d8 <___init_veneer>
    c192:	asrs	r6, r6, #2
    c194:	it	ne
    c196:	movne	r4, #0
    c198:	beq.n	c1a8 <__libc_init_array+0x3c>
    c19a:	adds	r4, #1
    c19c:	ldr.w	r3, [r5], #4
    c1a0:	blx	r3
    c1a2:	cmp	r6, r4
    c1a4:	bne.n	c19a <__libc_init_array+0x2e>
    c1a6:	pop	{r4, r5, r6, pc}
    c1a8:	pop	{r4, r5, r6, pc}
    c1aa:	nop
    c1ac:	.word	0x60001600
    c1b0:	.word	0x60001600
    c1b4:	.word	0x6000160c
    c1b8:	.word	0x60001600

0000c1bc <malloc>:
    c1bc:	ldr	r3, [pc, #8]	; (c1c8 <malloc+0xc>)
    c1be:	mov	r1, r0
    c1c0:	ldr	r0, [r3, #0]
    c1c2:	b.w	c1dc <_malloc_r>
    c1c6:	nop
    c1c8:	.word	0x20001320

0000c1cc <free>:
    c1cc:	ldr	r3, [pc, #8]	; (c1d8 <free+0xc>)
    c1ce:	mov	r1, r0
    c1d0:	ldr	r0, [r3, #0]
    c1d2:	b.w	d304 <_free_r>
    c1d6:	nop
    c1d8:	.word	0x20001320

0000c1dc <_malloc_r>:
    c1dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1e0:	add.w	r5, r1, #11
    c1e4:	cmp	r5, #22
    c1e6:	sub	sp, #12
    c1e8:	mov	r6, r0
    c1ea:	bls.w	c32c <_malloc_r+0x150>
    c1ee:	bics.w	r5, r5, #7
    c1f2:	bmi.w	c374 <_malloc_r+0x198>
    c1f6:	cmp	r1, r5
    c1f8:	bhi.w	c374 <_malloc_r+0x198>
    c1fc:	bl	c8b0 <__malloc_lock>
    c200:	cmp.w	r5, #504	; 0x1f8
    c204:	bcc.w	c740 <_malloc_r+0x564>
    c208:	lsrs	r3, r5, #9
    c20a:	beq.w	c382 <_malloc_r+0x1a6>
    c20e:	cmp	r3, #4
    c210:	bhi.w	c51a <_malloc_r+0x33e>
    c214:	lsrs	r0, r5, #6
    c216:	add.w	lr, r0, #57	; 0x39
    c21a:	mov.w	r3, lr, lsl #1
    c21e:	adds	r0, #56	; 0x38
    c220:	ldr	r7, [pc, #784]	; (c534 <_malloc_r+0x358>)
    c222:	add.w	r3, r7, r3, lsl #2
    c226:	sub.w	r1, r3, #8
    c22a:	ldr	r4, [r3, #4]
    c22c:	cmp	r1, r4
    c22e:	bne.n	c240 <_malloc_r+0x64>
    c230:	b.n	c38c <_malloc_r+0x1b0>
    c232:	cmp	r2, #0
    c234:	bge.w	c390 <_malloc_r+0x1b4>
    c238:	ldr	r4, [r4, #12]
    c23a:	cmp	r1, r4
    c23c:	beq.w	c38c <_malloc_r+0x1b0>
    c240:	ldr	r3, [r4, #4]
    c242:	bic.w	r3, r3, #3
    c246:	subs	r2, r3, r5
    c248:	cmp	r2, #15
    c24a:	ble.n	c232 <_malloc_r+0x56>
    c24c:	ldr	r1, [pc, #740]	; (c534 <_malloc_r+0x358>)
    c24e:	ldr	r4, [r7, #16]
    c250:	add.w	lr, r1, #8
    c254:	cmp	r4, lr
    c256:	beq.w	c5c0 <_malloc_r+0x3e4>
    c25a:	ldr	r3, [r4, #4]
    c25c:	bic.w	r3, r3, #3
    c260:	subs	r2, r3, r5
    c262:	cmp	r2, #15
    c264:	bgt.w	c59a <_malloc_r+0x3be>
    c268:	cmp	r2, #0
    c26a:	str.w	lr, [r1, #20]
    c26e:	str.w	lr, [r1, #16]
    c272:	bge.w	c3b2 <_malloc_r+0x1d6>
    c276:	cmp.w	r3, #512	; 0x200
    c27a:	bcs.w	c54c <_malloc_r+0x370>
    c27e:	lsrs	r3, r3, #3
    c280:	add.w	ip, r3, #1
    c284:	movs	r2, #1
    c286:	asrs	r3, r3, #2
    c288:	lsl.w	r3, r2, r3
    c28c:	ldr	r2, [r1, #4]
    c28e:	ldr.w	r8, [r1, ip, lsl #3]
    c292:	str.w	r8, [r4, #8]
    c296:	add.w	r9, r1, ip, lsl #3
    c29a:	orrs	r2, r3
    c29c:	sub.w	r3, r9, #8
    c2a0:	str	r3, [r4, #12]
    c2a2:	str	r2, [r1, #4]
    c2a4:	str.w	r4, [r1, ip, lsl #3]
    c2a8:	str.w	r4, [r8, #12]
    c2ac:	asrs	r3, r0, #2
    c2ae:	movs	r4, #1
    c2b0:	lsls	r4, r3
    c2b2:	cmp	r4, r2
    c2b4:	bhi.w	c3cc <_malloc_r+0x1f0>
    c2b8:	tst	r4, r2
    c2ba:	bne.n	c2ca <_malloc_r+0xee>
    c2bc:	bic.w	r0, r0, #3
    c2c0:	lsls	r4, r4, #1
    c2c2:	tst	r4, r2
    c2c4:	add.w	r0, r0, #4
    c2c8:	beq.n	c2c0 <_malloc_r+0xe4>
    c2ca:	add.w	r9, r7, r0, lsl #3
    c2ce:	mov	ip, r9
    c2d0:	mov	r8, r0
    c2d2:	ldr.w	r1, [ip, #12]
    c2d6:	cmp	ip, r1
    c2d8:	bne.n	c2ea <_malloc_r+0x10e>
    c2da:	b.n	c5c4 <_malloc_r+0x3e8>
    c2dc:	cmp	r2, #0
    c2de:	bge.w	c5e4 <_malloc_r+0x408>
    c2e2:	ldr	r1, [r1, #12]
    c2e4:	cmp	ip, r1
    c2e6:	beq.w	c5c4 <_malloc_r+0x3e8>
    c2ea:	ldr	r3, [r1, #4]
    c2ec:	bic.w	r3, r3, #3
    c2f0:	subs	r2, r3, r5
    c2f2:	cmp	r2, #15
    c2f4:	ble.n	c2dc <_malloc_r+0x100>
    c2f6:	mov	r4, r1
    c2f8:	ldr.w	ip, [r1, #12]
    c2fc:	ldr.w	r8, [r4, #8]!
    c300:	adds	r3, r1, r5
    c302:	orr.w	r5, r5, #1
    c306:	str	r5, [r1, #4]
    c308:	orr.w	r1, r2, #1
    c30c:	str.w	ip, [r8, #12]
    c310:	mov	r0, r6
    c312:	str.w	r8, [ip, #8]
    c316:	str	r3, [r7, #20]
    c318:	str	r3, [r7, #16]
    c31a:	str.w	lr, [r3, #12]
    c31e:	str.w	lr, [r3, #8]
    c322:	str	r1, [r3, #4]
    c324:	str	r2, [r3, r2]
    c326:	bl	c8b4 <__malloc_unlock>
    c32a:	b.n	c36c <_malloc_r+0x190>
    c32c:	cmp	r1, #16
    c32e:	bhi.n	c374 <_malloc_r+0x198>
    c330:	bl	c8b0 <__malloc_lock>
    c334:	movs	r5, #16
    c336:	movs	r3, #6
    c338:	movs	r0, #2
    c33a:	ldr	r7, [pc, #504]	; (c534 <_malloc_r+0x358>)
    c33c:	add.w	r3, r7, r3, lsl #2
    c340:	sub.w	r2, r3, #8
    c344:	ldr	r4, [r3, #4]
    c346:	cmp	r4, r2
    c348:	beq.w	c5d6 <_malloc_r+0x3fa>
    c34c:	ldr	r3, [r4, #4]
    c34e:	ldr	r1, [r4, #12]
    c350:	ldr	r5, [r4, #8]
    c352:	bic.w	r3, r3, #3
    c356:	add	r3, r4
    c358:	mov	r0, r6
    c35a:	ldr	r2, [r3, #4]
    c35c:	str	r1, [r5, #12]
    c35e:	orr.w	r2, r2, #1
    c362:	str	r5, [r1, #8]
    c364:	str	r2, [r3, #4]
    c366:	bl	c8b4 <__malloc_unlock>
    c36a:	adds	r4, #8
    c36c:	mov	r0, r4
    c36e:	add	sp, #12
    c370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c374:	movs	r4, #0
    c376:	movs	r3, #12
    c378:	mov	r0, r4
    c37a:	str	r3, [r6, #0]
    c37c:	add	sp, #12
    c37e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c382:	movs	r3, #128	; 0x80
    c384:	mov.w	lr, #64	; 0x40
    c388:	movs	r0, #63	; 0x3f
    c38a:	b.n	c220 <_malloc_r+0x44>
    c38c:	mov	r0, lr
    c38e:	b.n	c24c <_malloc_r+0x70>
    c390:	add	r3, r4
    c392:	ldr	r1, [r4, #12]
    c394:	ldr	r2, [r3, #4]
    c396:	ldr	r5, [r4, #8]
    c398:	orr.w	r2, r2, #1
    c39c:	str	r1, [r5, #12]
    c39e:	mov	r0, r6
    c3a0:	str	r5, [r1, #8]
    c3a2:	str	r2, [r3, #4]
    c3a4:	bl	c8b4 <__malloc_unlock>
    c3a8:	adds	r4, #8
    c3aa:	mov	r0, r4
    c3ac:	add	sp, #12
    c3ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3b2:	add	r3, r4
    c3b4:	mov	r0, r6
    c3b6:	ldr	r2, [r3, #4]
    c3b8:	orr.w	r2, r2, #1
    c3bc:	str	r2, [r3, #4]
    c3be:	bl	c8b4 <__malloc_unlock>
    c3c2:	adds	r4, #8
    c3c4:	mov	r0, r4
    c3c6:	add	sp, #12
    c3c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3cc:	ldr	r4, [r7, #8]
    c3ce:	ldr	r3, [r4, #4]
    c3d0:	bic.w	r8, r3, #3
    c3d4:	cmp	r8, r5
    c3d6:	bcc.n	c3e2 <_malloc_r+0x206>
    c3d8:	rsb	r3, r5, r8
    c3dc:	cmp	r3, #15
    c3de:	bgt.w	c4fa <_malloc_r+0x31e>
    c3e2:	ldr	r3, [pc, #340]	; (c538 <_malloc_r+0x35c>)
    c3e4:	ldr.w	r9, [pc, #352]	; c548 <_malloc_r+0x36c>
    c3e8:	ldr	r2, [r3, #0]
    c3ea:	ldr.w	r3, [r9]
    c3ee:	adds	r3, #1
    c3f0:	add	r2, r5
    c3f2:	add.w	sl, r4, r8
    c3f6:	beq.w	c6ba <_malloc_r+0x4de>
    c3fa:	add.w	r2, r2, #4096	; 0x1000
    c3fe:	adds	r2, #15
    c400:	bic.w	r2, r2, #4080	; 0xff0
    c404:	bic.w	r2, r2, #15
    c408:	mov	r1, r2
    c40a:	mov	r0, r6
    c40c:	str	r2, [sp, #4]
    c40e:	bl	cca8 <_sbrk_r>
    c412:	cmp.w	r0, #4294967295
    c416:	mov	fp, r0
    c418:	ldr	r2, [sp, #4]
    c41a:	beq.w	c6ce <_malloc_r+0x4f2>
    c41e:	cmp	sl, r0
    c420:	bhi.w	c61c <_malloc_r+0x440>
    c424:	ldr	r3, [pc, #276]	; (c53c <_malloc_r+0x360>)
    c426:	ldr	r1, [r3, #0]
    c428:	cmp	sl, fp
    c42a:	add	r1, r2
    c42c:	str	r1, [r3, #0]
    c42e:	beq.w	c6d8 <_malloc_r+0x4fc>
    c432:	ldr.w	r0, [r9]
    c436:	ldr.w	lr, [pc, #272]	; c548 <_malloc_r+0x36c>
    c43a:	adds	r0, #1
    c43c:	ittet	ne
    c43e:	rsbne	sl, sl, fp
    c442:	addne	r1, sl
    c444:	streq.w	fp, [lr]
    c448:	strne	r1, [r3, #0]
    c44a:	ands.w	r1, fp, #7
    c44e:	beq.w	c680 <_malloc_r+0x4a4>
    c452:	rsb	r0, r1, #8
    c456:	rsb	r1, r1, #4096	; 0x1000
    c45a:	add	fp, r0
    c45c:	adds	r1, #8
    c45e:	add	r2, fp
    c460:	ubfx	r2, r2, #0, #12
    c464:	rsb	r9, r2, r1
    c468:	mov	r1, r9
    c46a:	mov	r0, r6
    c46c:	str	r3, [sp, #4]
    c46e:	bl	cca8 <_sbrk_r>
    c472:	adds	r3, r0, #1
    c474:	ldr	r3, [sp, #4]
    c476:	beq.w	c6f8 <_malloc_r+0x51c>
    c47a:	rsb	r2, fp, r0
    c47e:	add	r2, r9
    c480:	orr.w	r2, r2, #1
    c484:	ldr	r1, [r3, #0]
    c486:	str.w	fp, [r7, #8]
    c48a:	add	r1, r9
    c48c:	cmp	r4, r7
    c48e:	str.w	r2, [fp, #4]
    c492:	str	r1, [r3, #0]
    c494:	ldr.w	r9, [pc, #164]	; c53c <_malloc_r+0x360>
    c498:	beq.n	c4c8 <_malloc_r+0x2ec>
    c49a:	cmp.w	r8, #15
    c49e:	bls.w	c69c <_malloc_r+0x4c0>
    c4a2:	ldr	r2, [r4, #4]
    c4a4:	sub.w	r3, r8, #12
    c4a8:	bic.w	r3, r3, #7
    c4ac:	adds	r0, r4, r3
    c4ae:	and.w	r2, r2, #1
    c4b2:	mov.w	lr, #5
    c4b6:	orrs	r2, r3
    c4b8:	cmp	r3, #15
    c4ba:	str	r2, [r4, #4]
    c4bc:	str.w	lr, [r0, #4]
    c4c0:	str.w	lr, [r0, #8]
    c4c4:	bhi.w	c700 <_malloc_r+0x524>
    c4c8:	ldr	r3, [pc, #116]	; (c540 <_malloc_r+0x364>)
    c4ca:	ldr	r4, [r7, #8]
    c4cc:	ldr	r2, [r3, #0]
    c4ce:	cmp	r1, r2
    c4d0:	it	hi
    c4d2:	strhi	r1, [r3, #0]
    c4d4:	ldr	r3, [pc, #108]	; (c544 <_malloc_r+0x368>)
    c4d6:	ldr	r2, [r3, #0]
    c4d8:	cmp	r1, r2
    c4da:	ldr	r2, [r4, #4]
    c4dc:	it	hi
    c4de:	strhi	r1, [r3, #0]
    c4e0:	bic.w	r2, r2, #3
    c4e4:	cmp	r5, r2
    c4e6:	sub.w	r3, r2, r5
    c4ea:	bhi.n	c4f0 <_malloc_r+0x314>
    c4ec:	cmp	r3, #15
    c4ee:	bgt.n	c4fa <_malloc_r+0x31e>
    c4f0:	mov	r0, r6
    c4f2:	bl	c8b4 <__malloc_unlock>
    c4f6:	movs	r4, #0
    c4f8:	b.n	c36c <_malloc_r+0x190>
    c4fa:	adds	r2, r4, r5
    c4fc:	orr.w	r3, r3, #1
    c500:	orr.w	r5, r5, #1
    c504:	str	r5, [r4, #4]
    c506:	mov	r0, r6
    c508:	str	r2, [r7, #8]
    c50a:	str	r3, [r2, #4]
    c50c:	bl	c8b4 <__malloc_unlock>
    c510:	adds	r4, #8
    c512:	mov	r0, r4
    c514:	add	sp, #12
    c516:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c51a:	cmp	r3, #20
    c51c:	bls.n	c602 <_malloc_r+0x426>
    c51e:	cmp	r3, #84	; 0x54
    c520:	bhi.w	c66c <_malloc_r+0x490>
    c524:	lsrs	r0, r5, #12
    c526:	add.w	lr, r0, #111	; 0x6f
    c52a:	mov.w	r3, lr, lsl #1
    c52e:	adds	r0, #110	; 0x6e
    c530:	b.n	c220 <_malloc_r+0x44>
    c532:	nop
    c534:	.word	0x20001324
    c538:	.word	0x2000e4f8
    c53c:	.word	0x2000e4fc
    c540:	.word	0x2000e4f4
    c544:	.word	0x2000e4f0
    c548:	.word	0x20001730
    c54c:	lsrs	r2, r3, #9
    c54e:	cmp	r2, #4
    c550:	bls.n	c610 <_malloc_r+0x434>
    c552:	cmp	r2, #20
    c554:	bhi.w	c6be <_malloc_r+0x4e2>
    c558:	add.w	r1, r2, #92	; 0x5c
    c55c:	lsls	r1, r1, #1
    c55e:	adds	r2, #91	; 0x5b
    c560:	add.w	ip, r7, r1, lsl #2
    c564:	ldr.w	r1, [r7, r1, lsl #2]
    c568:	ldr.w	r8, [pc, #476]	; c748 <_malloc_r+0x56c>
    c56c:	sub.w	ip, ip, #8
    c570:	cmp	ip, r1
    c572:	beq.w	c686 <_malloc_r+0x4aa>
    c576:	ldr	r2, [r1, #4]
    c578:	bic.w	r2, r2, #3
    c57c:	cmp	r3, r2
    c57e:	bcs.n	c586 <_malloc_r+0x3aa>
    c580:	ldr	r1, [r1, #8]
    c582:	cmp	ip, r1
    c584:	bne.n	c576 <_malloc_r+0x39a>
    c586:	ldr.w	ip, [r1, #12]
    c58a:	ldr	r2, [r7, #4]
    c58c:	str.w	ip, [r4, #12]
    c590:	str	r1, [r4, #8]
    c592:	str.w	r4, [ip, #8]
    c596:	str	r4, [r1, #12]
    c598:	b.n	c2ac <_malloc_r+0xd0>
    c59a:	adds	r3, r4, r5
    c59c:	orr.w	r7, r2, #1
    c5a0:	orr.w	r5, r5, #1
    c5a4:	str	r5, [r4, #4]
    c5a6:	mov	r0, r6
    c5a8:	str	r3, [r1, #20]
    c5aa:	str	r3, [r1, #16]
    c5ac:	str.w	lr, [r3, #12]
    c5b0:	str.w	lr, [r3, #8]
    c5b4:	str	r7, [r3, #4]
    c5b6:	str	r2, [r3, r2]
    c5b8:	adds	r4, #8
    c5ba:	bl	c8b4 <__malloc_unlock>
    c5be:	b.n	c36c <_malloc_r+0x190>
    c5c0:	ldr	r2, [r1, #4]
    c5c2:	b.n	c2ac <_malloc_r+0xd0>
    c5c4:	add.w	r8, r8, #1
    c5c8:	tst.w	r8, #3
    c5cc:	add.w	ip, ip, #8
    c5d0:	bne.w	c2d2 <_malloc_r+0xf6>
    c5d4:	b.n	c638 <_malloc_r+0x45c>
    c5d6:	ldr	r4, [r3, #12]
    c5d8:	cmp	r3, r4
    c5da:	it	eq
    c5dc:	addeq	r0, #2
    c5de:	beq.w	c24c <_malloc_r+0x70>
    c5e2:	b.n	c34c <_malloc_r+0x170>
    c5e4:	add	r3, r1
    c5e6:	mov	r4, r1
    c5e8:	ldr	r2, [r3, #4]
    c5ea:	ldr	r1, [r1, #12]
    c5ec:	ldr.w	r5, [r4, #8]!
    c5f0:	orr.w	r2, r2, #1
    c5f4:	str	r2, [r3, #4]
    c5f6:	mov	r0, r6
    c5f8:	str	r1, [r5, #12]
    c5fa:	str	r5, [r1, #8]
    c5fc:	bl	c8b4 <__malloc_unlock>
    c600:	b.n	c36c <_malloc_r+0x190>
    c602:	add.w	lr, r3, #92	; 0x5c
    c606:	add.w	r0, r3, #91	; 0x5b
    c60a:	mov.w	r3, lr, lsl #1
    c60e:	b.n	c220 <_malloc_r+0x44>
    c610:	lsrs	r2, r3, #6
    c612:	add.w	r1, r2, #57	; 0x39
    c616:	lsls	r1, r1, #1
    c618:	adds	r2, #56	; 0x38
    c61a:	b.n	c560 <_malloc_r+0x384>
    c61c:	cmp	r4, r7
    c61e:	ldr	r3, [pc, #296]	; (c748 <_malloc_r+0x56c>)
    c620:	beq.w	c424 <_malloc_r+0x248>
    c624:	ldr	r4, [r3, #8]
    c626:	ldr	r2, [r4, #4]
    c628:	bic.w	r2, r2, #3
    c62c:	b.n	c4e4 <_malloc_r+0x308>
    c62e:	ldr.w	r3, [r9], #-8
    c632:	cmp	r9, r3
    c634:	bne.w	c73c <_malloc_r+0x560>
    c638:	tst.w	r0, #3
    c63c:	add.w	r0, r0, #4294967295
    c640:	bne.n	c62e <_malloc_r+0x452>
    c642:	ldr	r3, [r7, #4]
    c644:	bic.w	r3, r3, r4
    c648:	str	r3, [r7, #4]
    c64a:	lsls	r4, r4, #1
    c64c:	cmp	r4, r3
    c64e:	bhi.w	c3cc <_malloc_r+0x1f0>
    c652:	cmp	r4, #0
    c654:	beq.w	c3cc <_malloc_r+0x1f0>
    c658:	tst	r4, r3
    c65a:	mov	r0, r8
    c65c:	bne.w	c2ca <_malloc_r+0xee>
    c660:	lsls	r4, r4, #1
    c662:	tst	r4, r3
    c664:	add.w	r0, r0, #4
    c668:	beq.n	c660 <_malloc_r+0x484>
    c66a:	b.n	c2ca <_malloc_r+0xee>
    c66c:	cmp.w	r3, #340	; 0x154
    c670:	bhi.n	c6a4 <_malloc_r+0x4c8>
    c672:	lsrs	r0, r5, #15
    c674:	add.w	lr, r0, #120	; 0x78
    c678:	mov.w	r3, lr, lsl #1
    c67c:	adds	r0, #119	; 0x77
    c67e:	b.n	c220 <_malloc_r+0x44>
    c680:	mov.w	r1, #4096	; 0x1000
    c684:	b.n	c45e <_malloc_r+0x282>
    c686:	movs	r1, #1
    c688:	ldr.w	r3, [r8, #4]
    c68c:	asrs	r2, r2, #2
    c68e:	lsl.w	r2, r1, r2
    c692:	orrs	r2, r3
    c694:	str.w	r2, [r8, #4]
    c698:	mov	r1, ip
    c69a:	b.n	c58c <_malloc_r+0x3b0>
    c69c:	movs	r3, #1
    c69e:	str.w	r3, [fp, #4]
    c6a2:	b.n	c4f0 <_malloc_r+0x314>
    c6a4:	movw	r2, #1364	; 0x554
    c6a8:	cmp	r3, r2
    c6aa:	bhi.n	c6ee <_malloc_r+0x512>
    c6ac:	lsrs	r0, r5, #18
    c6ae:	add.w	lr, r0, #125	; 0x7d
    c6b2:	mov.w	r3, lr, lsl #1
    c6b6:	adds	r0, #124	; 0x7c
    c6b8:	b.n	c220 <_malloc_r+0x44>
    c6ba:	adds	r2, #16
    c6bc:	b.n	c408 <_malloc_r+0x22c>
    c6be:	cmp	r2, #84	; 0x54
    c6c0:	bhi.n	c710 <_malloc_r+0x534>
    c6c2:	lsrs	r2, r3, #12
    c6c4:	add.w	r1, r2, #111	; 0x6f
    c6c8:	lsls	r1, r1, #1
    c6ca:	adds	r2, #110	; 0x6e
    c6cc:	b.n	c560 <_malloc_r+0x384>
    c6ce:	ldr	r4, [r7, #8]
    c6d0:	ldr	r2, [r4, #4]
    c6d2:	bic.w	r2, r2, #3
    c6d6:	b.n	c4e4 <_malloc_r+0x308>
    c6d8:	ubfx	r0, sl, #0, #12
    c6dc:	cmp	r0, #0
    c6de:	bne.w	c432 <_malloc_r+0x256>
    c6e2:	add	r2, r8
    c6e4:	ldr	r3, [r7, #8]
    c6e6:	orr.w	r2, r2, #1
    c6ea:	str	r2, [r3, #4]
    c6ec:	b.n	c4c8 <_malloc_r+0x2ec>
    c6ee:	movs	r3, #254	; 0xfe
    c6f0:	mov.w	lr, #127	; 0x7f
    c6f4:	movs	r0, #126	; 0x7e
    c6f6:	b.n	c220 <_malloc_r+0x44>
    c6f8:	movs	r2, #1
    c6fa:	mov.w	r9, #0
    c6fe:	b.n	c484 <_malloc_r+0x2a8>
    c700:	add.w	r1, r4, #8
    c704:	mov	r0, r6
    c706:	bl	d304 <_free_r>
    c70a:	ldr.w	r1, [r9]
    c70e:	b.n	c4c8 <_malloc_r+0x2ec>
    c710:	cmp.w	r2, #340	; 0x154
    c714:	bhi.n	c722 <_malloc_r+0x546>
    c716:	lsrs	r2, r3, #15
    c718:	add.w	r1, r2, #120	; 0x78
    c71c:	lsls	r1, r1, #1
    c71e:	adds	r2, #119	; 0x77
    c720:	b.n	c560 <_malloc_r+0x384>
    c722:	movw	r1, #1364	; 0x554
    c726:	cmp	r2, r1
    c728:	bhi.n	c736 <_malloc_r+0x55a>
    c72a:	lsrs	r2, r3, #18
    c72c:	add.w	r1, r2, #125	; 0x7d
    c730:	lsls	r1, r1, #1
    c732:	adds	r2, #124	; 0x7c
    c734:	b.n	c560 <_malloc_r+0x384>
    c736:	movs	r1, #254	; 0xfe
    c738:	movs	r2, #126	; 0x7e
    c73a:	b.n	c560 <_malloc_r+0x384>
    c73c:	ldr	r3, [r7, #4]
    c73e:	b.n	c64a <_malloc_r+0x46e>
    c740:	lsrs	r0, r5, #3
    c742:	adds	r3, r0, #1
    c744:	lsls	r3, r3, #1
    c746:	b.n	c33a <_malloc_r+0x15e>
    c748:	.word	0x20001324

0000c74c <memmove>:
    c74c:	cmp	r0, r1
    c74e:	push	{r4, r5, r6, r7, lr}
    c750:	bls.n	c76e <memmove+0x22>
    c752:	adds	r3, r1, r2
    c754:	cmp	r0, r3
    c756:	bcs.n	c76e <memmove+0x22>
    c758:	adds	r1, r0, r2
    c75a:	cmp	r2, #0
    c75c:	beq.n	c802 <memmove+0xb6>
    c75e:	subs	r2, r3, r2
    c760:	ldrb.w	r4, [r3, #-1]!
    c764:	strb.w	r4, [r1, #-1]!
    c768:	cmp	r3, r2
    c76a:	bne.n	c760 <memmove+0x14>
    c76c:	pop	{r4, r5, r6, r7, pc}
    c76e:	cmp	r2, #15
    c770:	bls.n	c804 <memmove+0xb8>
    c772:	orr.w	r3, r1, r0
    c776:	lsls	r3, r3, #30
    c778:	bne.n	c808 <memmove+0xbc>
    c77a:	add.w	r4, r0, #16
    c77e:	add.w	r3, r1, #16
    c782:	mov	r5, r2
    c784:	ldr.w	r6, [r3, #-16]
    c788:	str.w	r6, [r4, #-16]
    c78c:	ldr.w	r6, [r3, #-12]
    c790:	str.w	r6, [r4, #-12]
    c794:	ldr.w	r6, [r3, #-8]
    c798:	str.w	r6, [r4, #-8]
    c79c:	subs	r5, #16
    c79e:	ldr.w	r6, [r3, #-4]
    c7a2:	str.w	r6, [r4, #-4]
    c7a6:	cmp	r5, #15
    c7a8:	add.w	r3, r3, #16
    c7ac:	add.w	r4, r4, #16
    c7b0:	bhi.n	c784 <memmove+0x38>
    c7b2:	sub.w	r3, r2, #16
    c7b6:	bic.w	r3, r3, #15
    c7ba:	and.w	lr, r2, #15
    c7be:	adds	r3, #16
    c7c0:	cmp.w	lr, #3
    c7c4:	add	r1, r3
    c7c6:	add	r3, r0
    c7c8:	bls.n	c80e <memmove+0xc2>
    c7ca:	subs	r6, r3, #4
    c7cc:	mov	r5, r1
    c7ce:	mov	r4, lr
    c7d0:	subs	r4, #4
    c7d2:	ldr.w	r7, [r5], #4
    c7d6:	str.w	r7, [r6, #4]!
    c7da:	cmp	r4, #3
    c7dc:	bhi.n	c7d0 <memmove+0x84>
    c7de:	sub.w	r4, lr, #4
    c7e2:	bic.w	r4, r4, #3
    c7e6:	adds	r4, #4
    c7e8:	add	r3, r4
    c7ea:	add	r1, r4
    c7ec:	and.w	r2, r2, #3
    c7f0:	cbz	r2, c80c <memmove+0xc0>
    c7f2:	subs	r3, #1
    c7f4:	add	r2, r1
    c7f6:	ldrb.w	r4, [r1], #1
    c7fa:	strb.w	r4, [r3, #1]!
    c7fe:	cmp	r2, r1
    c800:	bne.n	c7f6 <memmove+0xaa>
    c802:	pop	{r4, r5, r6, r7, pc}
    c804:	mov	r3, r0
    c806:	b.n	c7f0 <memmove+0xa4>
    c808:	mov	r3, r0
    c80a:	b.n	c7f2 <memmove+0xa6>
    c80c:	pop	{r4, r5, r6, r7, pc}
    c80e:	mov	r2, lr
    c810:	b.n	c7f0 <memmove+0xa4>
    c812:	nop

0000c814 <memset>:
    c814:	push	{r4, r5, r6}
    c816:	lsls	r4, r0, #30
    c818:	beq.n	c8a8 <memset+0x94>
    c81a:	subs	r4, r2, #1
    c81c:	cmp	r2, #0
    c81e:	beq.n	c8a4 <memset+0x90>
    c820:	uxtb	r5, r1
    c822:	mov	r3, r0
    c824:	b.n	c82c <memset+0x18>
    c826:	subs	r2, r4, #1
    c828:	cbz	r4, c8a4 <memset+0x90>
    c82a:	mov	r4, r2
    c82c:	strb.w	r5, [r3], #1
    c830:	lsls	r2, r3, #30
    c832:	bne.n	c826 <memset+0x12>
    c834:	cmp	r4, #3
    c836:	bls.n	c896 <memset+0x82>
    c838:	uxtb	r5, r1
    c83a:	orr.w	r5, r5, r5, lsl #8
    c83e:	cmp	r4, #15
    c840:	orr.w	r5, r5, r5, lsl #16
    c844:	bls.n	c87a <memset+0x66>
    c846:	add.w	r2, r3, #16
    c84a:	mov	r6, r4
    c84c:	subs	r6, #16
    c84e:	cmp	r6, #15
    c850:	str.w	r5, [r2, #-16]
    c854:	str.w	r5, [r2, #-12]
    c858:	str.w	r5, [r2, #-8]
    c85c:	str.w	r5, [r2, #-4]
    c860:	add.w	r2, r2, #16
    c864:	bhi.n	c84c <memset+0x38>
    c866:	sub.w	r2, r4, #16
    c86a:	bic.w	r2, r2, #15
    c86e:	and.w	r4, r4, #15
    c872:	adds	r2, #16
    c874:	cmp	r4, #3
    c876:	add	r3, r2
    c878:	bls.n	c896 <memset+0x82>
    c87a:	mov	r6, r3
    c87c:	mov	r2, r4
    c87e:	subs	r2, #4
    c880:	cmp	r2, #3
    c882:	str.w	r5, [r6], #4
    c886:	bhi.n	c87e <memset+0x6a>
    c888:	subs	r2, r4, #4
    c88a:	bic.w	r2, r2, #3
    c88e:	adds	r2, #4
    c890:	add	r3, r2
    c892:	and.w	r4, r4, #3
    c896:	cbz	r4, c8a4 <memset+0x90>
    c898:	uxtb	r1, r1
    c89a:	add	r4, r3
    c89c:	strb.w	r1, [r3], #1
    c8a0:	cmp	r3, r4
    c8a2:	bne.n	c89c <memset+0x88>
    c8a4:	pop	{r4, r5, r6}
    c8a6:	bx	lr
    c8a8:	mov	r4, r2
    c8aa:	mov	r3, r0
    c8ac:	b.n	c834 <memset+0x20>
    c8ae:	nop

0000c8b0 <__malloc_lock>:
    c8b0:	bx	lr
    c8b2:	nop

0000c8b4 <__malloc_unlock>:
    c8b4:	bx	lr
    c8b6:	nop

0000c8b8 <realloc>:
    c8b8:	ldr	r3, [pc, #8]	; (c8c4 <realloc+0xc>)
    c8ba:	mov	r2, r1
    c8bc:	mov	r1, r0
    c8be:	ldr	r0, [r3, #0]
    c8c0:	b.w	c8c8 <_realloc_r>
    c8c4:	.word	0x20001320

0000c8c8 <_realloc_r>:
    c8c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8cc:	mov	r7, r2
    c8ce:	sub	sp, #12
    c8d0:	cmp	r1, #0
    c8d2:	beq.w	ca58 <_realloc_r+0x190>
    c8d6:	mov	r6, r1
    c8d8:	mov	r9, r0
    c8da:	add.w	r5, r7, #11
    c8de:	bl	c8b0 <__malloc_lock>
    c8e2:	ldr.w	lr, [r6, #-4]
    c8e6:	cmp	r5, #22
    c8e8:	bic.w	r4, lr, #3
    c8ec:	sub.w	r8, r6, #8
    c8f0:	bhi.n	c974 <_realloc_r+0xac>
    c8f2:	movs	r2, #16
    c8f4:	mov	r5, r2
    c8f6:	cmp	r7, r5
    c8f8:	bhi.n	c97e <_realloc_r+0xb6>
    c8fa:	cmp	r4, r2
    c8fc:	bge.n	c9ea <_realloc_r+0x122>
    c8fe:	ldr	r3, [pc, #804]	; (cc24 <_realloc_r+0x35c>)
    c900:	ldr	r1, [r3, #8]
    c902:	add.w	r0, r8, r4
    c906:	cmp	r0, r1
    c908:	ldr	r1, [r0, #4]
    c90a:	beq.w	cac0 <_realloc_r+0x1f8>
    c90e:	bic.w	r3, r1, #1
    c912:	add	r3, r0
    c914:	ldr	r3, [r3, #4]
    c916:	lsls	r3, r3, #31
    c918:	bpl.n	ca16 <_realloc_r+0x14e>
    c91a:	tst.w	lr, #1
    c91e:	beq.n	c98c <_realloc_r+0xc4>
    c920:	mov	r1, r7
    c922:	mov	r0, r9
    c924:	bl	c1dc <_malloc_r>
    c928:	mov	r7, r0
    c92a:	cbz	r0, c966 <_realloc_r+0x9e>
    c92c:	ldr.w	r3, [r6, #-4]
    c930:	bic.w	r3, r3, #1
    c934:	add	r3, r8
    c936:	sub.w	r2, r0, #8
    c93a:	cmp	r2, r3
    c93c:	beq.w	cbc8 <_realloc_r+0x300>
    c940:	subs	r2, r4, #4
    c942:	cmp	r2, #36	; 0x24
    c944:	bhi.w	cbaa <_realloc_r+0x2e2>
    c948:	cmp	r2, #19
    c94a:	bhi.w	cb56 <_realloc_r+0x28e>
    c94e:	mov	r3, r0
    c950:	mov	r2, r6
    c952:	ldr	r1, [r2, #0]
    c954:	str	r1, [r3, #0]
    c956:	ldr	r1, [r2, #4]
    c958:	str	r1, [r3, #4]
    c95a:	ldr	r2, [r2, #8]
    c95c:	str	r2, [r3, #8]
    c95e:	mov	r1, r6
    c960:	mov	r0, r9
    c962:	bl	d304 <_free_r>
    c966:	mov	r0, r9
    c968:	bl	c8b4 <__malloc_unlock>
    c96c:	mov	r0, r7
    c96e:	add	sp, #12
    c970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c974:	bic.w	r5, r5, #7
    c978:	cmp	r5, #0
    c97a:	mov	r2, r5
    c97c:	bge.n	c8f6 <_realloc_r+0x2e>
    c97e:	movs	r3, #12
    c980:	movs	r0, #0
    c982:	str.w	r3, [r9]
    c986:	add	sp, #12
    c988:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c98c:	ldr.w	r3, [r6, #-8]
    c990:	rsb	sl, r3, r8
    c994:	ldr.w	r3, [sl, #4]
    c998:	bic.w	ip, r3, #3
    c99c:	add.w	r3, r4, ip
    c9a0:	cmp	r3, r2
    c9a2:	blt.n	c920 <_realloc_r+0x58>
    c9a4:	mov	r7, sl
    c9a6:	ldr.w	r1, [sl, #12]
    c9aa:	ldr.w	r0, [r7, #8]!
    c9ae:	subs	r2, r4, #4
    c9b0:	cmp	r2, #36	; 0x24
    c9b2:	str	r1, [r0, #12]
    c9b4:	str	r0, [r1, #8]
    c9b6:	bhi.w	cbe8 <_realloc_r+0x320>
    c9ba:	cmp	r2, #19
    c9bc:	bls.w	cbe4 <_realloc_r+0x31c>
    c9c0:	ldr	r1, [r6, #0]
    c9c2:	str.w	r1, [sl, #8]
    c9c6:	ldr	r1, [r6, #4]
    c9c8:	str.w	r1, [sl, #12]
    c9cc:	cmp	r2, #27
    c9ce:	bhi.w	cc28 <_realloc_r+0x360>
    c9d2:	adds	r6, #8
    c9d4:	add.w	r2, sl, #16
    c9d8:	ldr	r1, [r6, #0]
    c9da:	str	r1, [r2, #0]
    c9dc:	ldr	r1, [r6, #4]
    c9de:	str	r1, [r2, #4]
    c9e0:	ldr	r1, [r6, #8]
    c9e2:	str	r1, [r2, #8]
    c9e4:	mov	r6, r7
    c9e6:	mov	r4, r3
    c9e8:	mov	r8, sl
    c9ea:	subs	r3, r4, r5
    c9ec:	cmp	r3, #15
    c9ee:	bhi.n	ca2c <_realloc_r+0x164>
    c9f0:	ldr.w	r3, [r8, #4]
    c9f4:	and.w	r3, r3, #1
    c9f8:	orrs	r3, r4
    c9fa:	add	r4, r8
    c9fc:	str.w	r3, [r8, #4]
    ca00:	ldr	r3, [r4, #4]
    ca02:	orr.w	r3, r3, #1
    ca06:	str	r3, [r4, #4]
    ca08:	mov	r0, r9
    ca0a:	bl	c8b4 <__malloc_unlock>
    ca0e:	mov	r0, r6
    ca10:	add	sp, #12
    ca12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca16:	bic.w	r1, r1, #3
    ca1a:	add	r1, r4
    ca1c:	cmp	r1, r2
    ca1e:	blt.n	ca64 <_realloc_r+0x19c>
    ca20:	ldr	r3, [r0, #12]
    ca22:	ldr	r2, [r0, #8]
    ca24:	mov	r4, r1
    ca26:	str	r3, [r2, #12]
    ca28:	str	r2, [r3, #8]
    ca2a:	b.n	c9ea <_realloc_r+0x122>
    ca2c:	ldr.w	r2, [r8, #4]
    ca30:	add.w	r1, r8, r5
    ca34:	and.w	r2, r2, #1
    ca38:	orrs	r5, r2
    ca3a:	orr.w	r2, r3, #1
    ca3e:	add	r3, r1
    ca40:	str.w	r5, [r8, #4]
    ca44:	str	r2, [r1, #4]
    ca46:	ldr	r2, [r3, #4]
    ca48:	orr.w	r2, r2, #1
    ca4c:	adds	r1, #8
    ca4e:	str	r2, [r3, #4]
    ca50:	mov	r0, r9
    ca52:	bl	d304 <_free_r>
    ca56:	b.n	ca08 <_realloc_r+0x140>
    ca58:	mov	r1, r2
    ca5a:	add	sp, #12
    ca5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca60:	b.w	c1dc <_malloc_r>
    ca64:	tst.w	lr, #1
    ca68:	bne.w	c920 <_realloc_r+0x58>
    ca6c:	ldr.w	r3, [r6, #-8]
    ca70:	rsb	sl, r3, r8
    ca74:	ldr.w	r3, [sl, #4]
    ca78:	bic.w	ip, r3, #3
    ca7c:	add.w	lr, r1, ip
    ca80:	cmp	lr, r2
    ca82:	blt.n	c99c <_realloc_r+0xd4>
    ca84:	ldr	r3, [r0, #12]
    ca86:	ldr	r2, [r0, #8]
    ca88:	mov	r7, sl
    ca8a:	str	r3, [r2, #12]
    ca8c:	str	r2, [r3, #8]
    ca8e:	ldr.w	r1, [r7, #8]!
    ca92:	ldr.w	r3, [sl, #12]
    ca96:	str	r3, [r1, #12]
    ca98:	subs	r2, r4, #4
    ca9a:	cmp	r2, #36	; 0x24
    ca9c:	str	r1, [r3, #8]
    ca9e:	bhi.w	cbd4 <_realloc_r+0x30c>
    caa2:	cmp	r2, #19
    caa4:	bls.n	cb6c <_realloc_r+0x2a4>
    caa6:	ldr	r3, [r6, #0]
    caa8:	str.w	r3, [sl, #8]
    caac:	ldr	r3, [r6, #4]
    caae:	str.w	r3, [sl, #12]
    cab2:	cmp	r2, #27
    cab4:	bhi.w	cbf8 <_realloc_r+0x330>
    cab8:	adds	r6, #8
    caba:	add.w	r3, sl, #16
    cabe:	b.n	cb6e <_realloc_r+0x2a6>
    cac0:	bic.w	fp, r1, #3
    cac4:	add	fp, r4
    cac6:	add.w	r0, r5, #16
    caca:	cmp	fp, r0
    cacc:	bge.n	cb82 <_realloc_r+0x2ba>
    cace:	tst.w	lr, #1
    cad2:	bne.w	c920 <_realloc_r+0x58>
    cad6:	ldr.w	r1, [r6, #-8]
    cada:	rsb	sl, r1, r8
    cade:	ldr.w	r1, [sl, #4]
    cae2:	bic.w	ip, r1, #3
    cae6:	add	fp, ip
    cae8:	cmp	r0, fp
    caea:	bgt.w	c99c <_realloc_r+0xd4>
    caee:	mov	r7, sl
    caf0:	ldr.w	r1, [sl, #12]
    caf4:	ldr.w	r0, [r7, #8]!
    caf8:	subs	r2, r4, #4
    cafa:	cmp	r2, #36	; 0x24
    cafc:	str	r1, [r0, #12]
    cafe:	str	r0, [r1, #8]
    cb00:	bhi.w	cc6c <_realloc_r+0x3a4>
    cb04:	cmp	r2, #19
    cb06:	bls.w	cc54 <_realloc_r+0x38c>
    cb0a:	ldr	r1, [r6, #0]
    cb0c:	str.w	r1, [sl, #8]
    cb10:	ldr	r1, [r6, #4]
    cb12:	str.w	r1, [sl, #12]
    cb16:	cmp	r2, #27
    cb18:	bhi.w	cc7a <_realloc_r+0x3b2>
    cb1c:	adds	r6, #8
    cb1e:	add.w	r2, sl, #16
    cb22:	ldr	r1, [r6, #0]
    cb24:	str	r1, [r2, #0]
    cb26:	ldr	r1, [r6, #4]
    cb28:	str	r1, [r2, #4]
    cb2a:	ldr	r1, [r6, #8]
    cb2c:	str	r1, [r2, #8]
    cb2e:	add.w	r1, sl, r5
    cb32:	rsb	r2, r5, fp
    cb36:	orr.w	r2, r2, #1
    cb3a:	str	r1, [r3, #8]
    cb3c:	str	r2, [r1, #4]
    cb3e:	ldr.w	r3, [sl, #4]
    cb42:	and.w	r3, r3, #1
    cb46:	orrs	r5, r3
    cb48:	mov	r0, r9
    cb4a:	str.w	r5, [sl, #4]
    cb4e:	bl	c8b4 <__malloc_unlock>
    cb52:	mov	r0, r7
    cb54:	b.n	ca10 <_realloc_r+0x148>
    cb56:	ldr	r3, [r6, #0]
    cb58:	str	r3, [r0, #0]
    cb5a:	ldr	r3, [r6, #4]
    cb5c:	str	r3, [r0, #4]
    cb5e:	cmp	r2, #27
    cb60:	bhi.n	cbb2 <_realloc_r+0x2ea>
    cb62:	add.w	r3, r0, #8
    cb66:	add.w	r2, r6, #8
    cb6a:	b.n	c952 <_realloc_r+0x8a>
    cb6c:	mov	r3, r7
    cb6e:	ldr	r2, [r6, #0]
    cb70:	str	r2, [r3, #0]
    cb72:	ldr	r2, [r6, #4]
    cb74:	str	r2, [r3, #4]
    cb76:	ldr	r2, [r6, #8]
    cb78:	str	r2, [r3, #8]
    cb7a:	mov	r6, r7
    cb7c:	mov	r4, lr
    cb7e:	mov	r8, sl
    cb80:	b.n	c9ea <_realloc_r+0x122>
    cb82:	add.w	r1, r8, r5
    cb86:	rsb	fp, r5, fp
    cb8a:	orr.w	r2, fp, #1
    cb8e:	str	r1, [r3, #8]
    cb90:	str	r2, [r1, #4]
    cb92:	ldr.w	r3, [r6, #-4]
    cb96:	and.w	r3, r3, #1
    cb9a:	orrs	r5, r3
    cb9c:	mov	r0, r9
    cb9e:	str.w	r5, [r6, #-4]
    cba2:	bl	c8b4 <__malloc_unlock>
    cba6:	mov	r0, r6
    cba8:	b.n	ca10 <_realloc_r+0x148>
    cbaa:	mov	r1, r6
    cbac:	bl	c74c <memmove>
    cbb0:	b.n	c95e <_realloc_r+0x96>
    cbb2:	ldr	r3, [r6, #8]
    cbb4:	str	r3, [r0, #8]
    cbb6:	ldr	r3, [r6, #12]
    cbb8:	str	r3, [r0, #12]
    cbba:	cmp	r2, #36	; 0x24
    cbbc:	beq.n	cc10 <_realloc_r+0x348>
    cbbe:	add.w	r3, r0, #16
    cbc2:	add.w	r2, r6, #16
    cbc6:	b.n	c952 <_realloc_r+0x8a>
    cbc8:	ldr.w	r3, [r0, #-4]
    cbcc:	bic.w	r3, r3, #3
    cbd0:	add	r4, r3
    cbd2:	b.n	c9ea <_realloc_r+0x122>
    cbd4:	mov	r1, r6
    cbd6:	mov	r0, r7
    cbd8:	mov	r4, lr
    cbda:	mov	r8, sl
    cbdc:	bl	c74c <memmove>
    cbe0:	mov	r6, r7
    cbe2:	b.n	c9ea <_realloc_r+0x122>
    cbe4:	mov	r2, r7
    cbe6:	b.n	c9d8 <_realloc_r+0x110>
    cbe8:	mov	r1, r6
    cbea:	mov	r0, r7
    cbec:	mov	r4, r3
    cbee:	mov	r8, sl
    cbf0:	bl	c74c <memmove>
    cbf4:	mov	r6, r7
    cbf6:	b.n	c9ea <_realloc_r+0x122>
    cbf8:	ldr	r3, [r6, #8]
    cbfa:	str.w	r3, [sl, #16]
    cbfe:	ldr	r3, [r6, #12]
    cc00:	str.w	r3, [sl, #20]
    cc04:	cmp	r2, #36	; 0x24
    cc06:	beq.n	cc40 <_realloc_r+0x378>
    cc08:	adds	r6, #16
    cc0a:	add.w	r3, sl, #24
    cc0e:	b.n	cb6e <_realloc_r+0x2a6>
    cc10:	ldr	r3, [r6, #16]
    cc12:	str	r3, [r0, #16]
    cc14:	ldr	r3, [r6, #20]
    cc16:	str	r3, [r0, #20]
    cc18:	add.w	r2, r6, #24
    cc1c:	add.w	r3, r0, #24
    cc20:	b.n	c952 <_realloc_r+0x8a>
    cc22:	nop
    cc24:	.word	0x20001324
    cc28:	ldr	r1, [r6, #8]
    cc2a:	str.w	r1, [sl, #16]
    cc2e:	ldr	r1, [r6, #12]
    cc30:	str.w	r1, [sl, #20]
    cc34:	cmp	r2, #36	; 0x24
    cc36:	beq.n	cc58 <_realloc_r+0x390>
    cc38:	adds	r6, #16
    cc3a:	add.w	r2, sl, #24
    cc3e:	b.n	c9d8 <_realloc_r+0x110>
    cc40:	ldr	r3, [r6, #16]
    cc42:	str.w	r3, [sl, #24]
    cc46:	ldr	r3, [r6, #20]
    cc48:	str.w	r3, [sl, #28]
    cc4c:	adds	r6, #24
    cc4e:	add.w	r3, sl, #32
    cc52:	b.n	cb6e <_realloc_r+0x2a6>
    cc54:	mov	r2, r7
    cc56:	b.n	cb22 <_realloc_r+0x25a>
    cc58:	ldr	r2, [r6, #16]
    cc5a:	str.w	r2, [sl, #24]
    cc5e:	ldr	r2, [r6, #20]
    cc60:	str.w	r2, [sl, #28]
    cc64:	adds	r6, #24
    cc66:	add.w	r2, sl, #32
    cc6a:	b.n	c9d8 <_realloc_r+0x110>
    cc6c:	mov	r1, r6
    cc6e:	mov	r0, r7
    cc70:	str	r3, [sp, #4]
    cc72:	bl	c74c <memmove>
    cc76:	ldr	r3, [sp, #4]
    cc78:	b.n	cb2e <_realloc_r+0x266>
    cc7a:	ldr	r1, [r6, #8]
    cc7c:	str.w	r1, [sl, #16]
    cc80:	ldr	r1, [r6, #12]
    cc82:	str.w	r1, [sl, #20]
    cc86:	cmp	r2, #36	; 0x24
    cc88:	beq.n	cc92 <_realloc_r+0x3ca>
    cc8a:	adds	r6, #16
    cc8c:	add.w	r2, sl, #24
    cc90:	b.n	cb22 <_realloc_r+0x25a>
    cc92:	ldr	r2, [r6, #16]
    cc94:	str.w	r2, [sl, #24]
    cc98:	ldr	r2, [r6, #20]
    cc9a:	str.w	r2, [sl, #28]
    cc9e:	adds	r6, #24
    cca0:	add.w	r2, sl, #32
    cca4:	b.n	cb22 <_realloc_r+0x25a>
    cca6:	nop

0000cca8 <_sbrk_r>:
    cca8:	push	{r3, r4, r5, lr}
    ccaa:	ldr	r4, [pc, #28]	; (ccc8 <_sbrk_r+0x20>)
    ccac:	movs	r3, #0
    ccae:	mov	r5, r0
    ccb0:	mov	r0, r1
    ccb2:	str	r3, [r4, #0]
    ccb4:	bl	bb6c <_sbrk>
    ccb8:	adds	r3, r0, #1
    ccba:	beq.n	ccbe <_sbrk_r+0x16>
    ccbc:	pop	{r3, r4, r5, pc}
    ccbe:	ldr	r3, [r4, #0]
    ccc0:	cmp	r3, #0
    ccc2:	beq.n	ccbc <_sbrk_r+0x14>
    ccc4:	str	r3, [r5, #0]
    ccc6:	pop	{r3, r4, r5, pc}
    ccc8:	.word	0x200106c0
	...
    cce0:	sub.w	r0, r2, r3
    cce4:	bx	lr
    cce6:	nop

0000cce8 <strcmp>:
    cce8:	ldrb	r2, [r0, #0]
    ccea:	ldrb	r3, [r1, #0]
    ccec:	cmp	r2, #1
    ccee:	it	cs
    ccf0:	cmpcs	r2, r3
    ccf2:	bne.n	cce0 <_sbrk_r+0x38>
    ccf4:	strd	r4, r5, [sp, #-16]!
    ccf8:	orr.w	r4, r0, r1
    ccfc:	strd	r6, r7, [sp, #8]
    cd00:	mvn.w	ip, #0
    cd04:	mov.w	r2, r4, lsl #29
    cd08:	cbz	r2, cd50 <strcmp+0x68>
    cd0a:	eor.w	r4, r0, r1
    cd0e:	tst.w	r4, #7
    cd12:	bne.n	cdea <strcmp+0x102>
    cd14:	and.w	r4, r0, #7
    cd18:	bic.w	r0, r0, #7
    cd1c:	and.w	r5, r4, #3
    cd20:	bic.w	r1, r1, #7
    cd24:	mov.w	r5, r5, lsl #3
    cd28:	ldrd	r2, r3, [r0], #16
    cd2c:	tst.w	r4, #4
    cd30:	ldrd	r6, r7, [r1], #16
    cd34:	lsl.w	r4, ip, r5
    cd38:	orn	r2, r2, r4
    cd3c:	orn	r6, r6, r4
    cd40:	beq.n	cd58 <strcmp+0x70>
    cd42:	orn	r3, r3, r4
    cd46:	mov	r2, ip
    cd48:	orn	r7, r7, r4
    cd4c:	mov	r6, ip
    cd4e:	b.n	cd58 <strcmp+0x70>
    cd50:	ldrd	r2, r3, [r0], #16
    cd54:	ldrd	r6, r7, [r1], #16
    cd58:	uadd8	r5, r2, ip
    cd5c:	eor.w	r4, r2, r6
    cd60:	sel	r4, r4, ip
    cd64:	cbnz	r4, cdc2 <strcmp+0xda>
    cd66:	uadd8	r5, r3, ip
    cd6a:	eor.w	r5, r3, r7
    cd6e:	sel	r5, r5, ip
    cd72:	cbnz	r5, cd9a <strcmp+0xb2>
    cd74:	ldrd	r2, r3, [r0, #-8]
    cd78:	ldrd	r6, r7, [r1, #-8]
    cd7c:	uadd8	r5, r2, ip
    cd80:	eor.w	r4, r2, r6
    cd84:	sel	r4, r4, ip
    cd88:	uadd8	r5, r3, ip
    cd8c:	eor.w	r5, r3, r7
    cd90:	sel	r5, r5, ip
    cd94:	orrs	r5, r4
    cd96:	beq.n	cd50 <strcmp+0x68>
    cd98:	cbnz	r4, cdc2 <strcmp+0xda>
    cd9a:	rev	r5, r5
    cd9c:	clz	r4, r5
    cda0:	bic.w	r4, r4, #7
    cda4:	lsr.w	r1, r7, r4
    cda8:	ldrd	r6, r7, [sp, #8]
    cdac:	lsr.w	r3, r3, r4
    cdb0:	and.w	r0, r3, #255	; 0xff
    cdb4:	and.w	r1, r1, #255	; 0xff
    cdb8:	ldrd	r4, r5, [sp], #16
    cdbc:	sub.w	r0, r0, r1
    cdc0:	bx	lr
    cdc2:	rev	r4, r4
    cdc4:	clz	r4, r4
    cdc8:	bic.w	r4, r4, #7
    cdcc:	lsr.w	r1, r6, r4
    cdd0:	ldrd	r6, r7, [sp, #8]
    cdd4:	lsr.w	r2, r2, r4
    cdd8:	and.w	r0, r2, #255	; 0xff
    cddc:	and.w	r1, r1, #255	; 0xff
    cde0:	ldrd	r4, r5, [sp], #16
    cde4:	sub.w	r0, r0, r1
    cde8:	bx	lr
    cdea:	tst.w	r4, #3
    cdee:	bne.n	ce6a <strcmp+0x182>
    cdf0:	ands.w	r4, r0, #3
    cdf4:	bne.n	ce48 <strcmp+0x160>
    cdf6:	ldr.w	r2, [r0], #8
    cdfa:	ldr.w	r3, [r1], #8
    cdfe:	uadd8	r5, r2, ip
    ce02:	eor.w	r5, r2, r3
    ce06:	sel	r5, r5, ip
    ce0a:	cbnz	r5, ce24 <strcmp+0x13c>
    ce0c:	ldr.w	r2, [r0, #-4]
    ce10:	ldr.w	r3, [r1, #-4]
    ce14:	uadd8	r5, r2, ip
    ce18:	eor.w	r5, r2, r3
    ce1c:	sel	r5, r5, ip
    ce20:	cmp	r5, #0
    ce22:	beq.n	cdf6 <strcmp+0x10e>
    ce24:	rev	r5, r5
    ce26:	clz	r4, r5
    ce2a:	bic.w	r4, r4, #7
    ce2e:	lsr.w	r1, r3, r4
    ce32:	lsr.w	r2, r2, r4
    ce36:	and.w	r0, r2, #255	; 0xff
    ce3a:	and.w	r1, r1, #255	; 0xff
    ce3e:	ldrd	r4, r5, [sp], #16
    ce42:	sub.w	r0, r0, r1
    ce46:	bx	lr
    ce48:	mov.w	r4, r4, lsl #3
    ce4c:	bic.w	r0, r0, #3
    ce50:	ldr.w	r2, [r0], #8
    ce54:	bic.w	r1, r1, #3
    ce58:	ldr.w	r3, [r1], #8
    ce5c:	lsl.w	r4, ip, r4
    ce60:	orn	r2, r2, r4
    ce64:	orn	r3, r3, r4
    ce68:	b.n	cdfe <strcmp+0x116>
    ce6a:	ands.w	r4, r0, #3
    ce6e:	beq.n	cea6 <strcmp+0x1be>
    ce70:	sub.w	r1, r1, r4
    ce74:	bic.w	r0, r0, #3
    ce78:	lsls	r4, r4, #31
    ce7a:	ldr.w	r2, [r0], #4
    ce7e:	beq.n	ce8e <strcmp+0x1a6>
    ce80:	bcs.n	cea2 <strcmp+0x1ba>
    ce82:	ldrb	r3, [r1, #2]
    ce84:	uxtb.w	r4, r2, ror #16
    ce88:	subs	r4, r4, r3
    ce8a:	bne.n	ce9a <strcmp+0x1b2>
    ce8c:	cbz	r3, ce9a <strcmp+0x1b2>
    ce8e:	ldrb	r3, [r1, #3]
    ce90:	uxtb.w	r4, r2, ror #24
    ce94:	subs	r4, r4, r3
    ce96:	bne.n	ce9a <strcmp+0x1b2>
    ce98:	cbnz	r3, cea2 <strcmp+0x1ba>
    ce9a:	mov	r0, r4
    ce9c:	ldr.w	r4, [sp], #16
    cea0:	bx	lr
    cea2:	add.w	r1, r1, #4
    cea6:	ldr.w	r2, [r0], #4
    ceaa:	lsls	r4, r1, #31
    ceac:	bic.w	r1, r1, #3
    ceb0:	ldr.w	r3, [r1], #4
    ceb4:	bhi.n	cf48 <strcmp+0x260>
    ceb6:	bcs.n	cf02 <strcmp+0x21a>
    ceb8:	bic.w	r4, r2, #4278190080	; 0xff000000
    cebc:	uadd8	r5, r2, ip
    cec0:	eors.w	r5, r4, r3, lsr #8
    cec4:	sel	r5, r5, ip
    cec8:	bne.n	cee0 <strcmp+0x1f8>
    ceca:	cbnz	r5, cee6 <strcmp+0x1fe>
    cecc:	ldr.w	r3, [r1], #4
    ced0:	eor.w	r4, r4, r2
    ced4:	cmp.w	r4, r3, lsl #24
    ced8:	bne.n	cef8 <strcmp+0x210>
    ceda:	ldr.w	r2, [r0], #4
    cede:	b.n	ceb8 <strcmp+0x1d0>
    cee0:	mov.w	r3, r3, lsr #8
    cee4:	b.n	cf92 <strcmp+0x2aa>
    cee6:	bics.w	r5, r5, #4278190080	; 0xff000000
    ceea:	bne.n	cf88 <strcmp+0x2a0>
    ceec:	ldrb	r0, [r1, #0]
    ceee:	ldrd	r4, r5, [sp], #16
    cef2:	rsb	r0, r0, #0
    cef6:	bx	lr
    cef8:	mov.w	r2, r2, lsr #24
    cefc:	and.w	r3, r3, #255	; 0xff
    cf00:	b.n	cf92 <strcmp+0x2aa>
    cf02:	and.w	r4, r2, ip, lsr #16
    cf06:	uadd8	r5, r2, ip
    cf0a:	eors.w	r5, r4, r3, lsr #16
    cf0e:	sel	r5, r5, ip
    cf12:	bne.n	cf2a <strcmp+0x242>
    cf14:	cbnz	r5, cf30 <strcmp+0x248>
    cf16:	ldr.w	r3, [r1], #4
    cf1a:	eor.w	r4, r4, r2
    cf1e:	cmp.w	r4, r3, lsl #16
    cf22:	bne.n	cf3e <strcmp+0x256>
    cf24:	ldr.w	r2, [r0], #4
    cf28:	b.n	cf02 <strcmp+0x21a>
    cf2a:	mov.w	r3, r3, lsr #16
    cf2e:	b.n	cf92 <strcmp+0x2aa>
    cf30:	ands.w	r5, r5, ip, lsr #16
    cf34:	bne.n	cf88 <strcmp+0x2a0>
    cf36:	ldrh	r3, [r1, #0]
    cf38:	mov.w	r2, r2, lsr #16
    cf3c:	b.n	cf92 <strcmp+0x2aa>
    cf3e:	mov.w	r2, r2, lsr #16
    cf42:	and.w	r3, r3, ip, lsr #16
    cf46:	b.n	cf92 <strcmp+0x2aa>
    cf48:	and.w	r4, r2, #255	; 0xff
    cf4c:	uadd8	r5, r2, ip
    cf50:	eors.w	r5, r4, r3, lsr #24
    cf54:	sel	r5, r5, ip
    cf58:	bne.n	cf70 <strcmp+0x288>
    cf5a:	cbnz	r5, cf76 <strcmp+0x28e>
    cf5c:	ldr.w	r3, [r1], #4
    cf60:	eor.w	r4, r4, r2
    cf64:	cmp.w	r4, r3, lsl #8
    cf68:	bne.n	cf7e <strcmp+0x296>
    cf6a:	ldr.w	r2, [r0], #4
    cf6e:	b.n	cf48 <strcmp+0x260>
    cf70:	mov.w	r3, r3, lsr #24
    cf74:	b.n	cf92 <strcmp+0x2aa>
    cf76:	tst.w	r5, #255	; 0xff
    cf7a:	bne.n	cf88 <strcmp+0x2a0>
    cf7c:	ldr	r3, [r1, #0]
    cf7e:	mov.w	r2, r2, lsr #8
    cf82:	bic.w	r3, r3, #4278190080	; 0xff000000
    cf86:	b.n	cf92 <strcmp+0x2aa>
    cf88:	mov.w	r0, #0
    cf8c:	ldrd	r4, r5, [sp], #16
    cf90:	bx	lr
    cf92:	rev	r2, r2
    cf94:	rev	r3, r3
    cf96:	uadd8	r4, r2, ip
    cf9a:	eor.w	r4, r2, r3
    cf9e:	sel	r5, r4, ip
    cfa2:	clz	r4, r5
    cfa6:	lsl.w	r2, r2, r4
    cfaa:	lsl.w	r3, r3, r4
    cfae:	mov.w	r0, r2, lsr #24
    cfb2:	ldrd	r4, r5, [sp], #16
    cfb6:	sub.w	r0, r0, r3, lsr #24
    cfba:	bx	lr

0000cfbc <strcpy>:
    cfbc:	eor.w	r2, r0, r1
    cfc0:	mov	ip, r0
    cfc2:	tst.w	r2, #3
    cfc6:	bne.n	d068 <strcpy+0xac>
    cfc8:	tst.w	r1, #3
    cfcc:	bne.n	d034 <strcpy+0x78>
    cfce:	str.w	r4, [sp, #-4]!
    cfd2:	tst.w	r1, #4
    cfd6:	ldr.w	r3, [r1], #4
    cfda:	beq.n	cff4 <strcpy+0x38>
    cfdc:	sub.w	r2, r3, #16843009	; 0x1010101
    cfe0:	bics	r2, r3
    cfe2:	tst.w	r2, #2155905152	; 0x80808080
    cfe6:	itt	eq
    cfe8:	streq.w	r3, [ip], #4
    cfec:	ldreq.w	r3, [r1], #4
    cff0:	bne.n	d020 <strcpy+0x64>
    cff2:	nop
    cff4:	ldr.w	r4, [r1], #4
    cff8:	sub.w	r2, r3, #16843009	; 0x1010101
    cffc:	bics	r2, r3
    cffe:	tst.w	r2, #2155905152	; 0x80808080
    d002:	sub.w	r2, r4, #16843009	; 0x1010101
    d006:	bne.n	d020 <strcpy+0x64>
    d008:	str.w	r3, [ip], #4
    d00c:	bics	r2, r4
    d00e:	tst.w	r2, #2155905152	; 0x80808080
    d012:	itt	eq
    d014:	ldreq.w	r3, [r1], #4
    d018:	streq.w	r4, [ip], #4
    d01c:	beq.n	cff4 <strcpy+0x38>
    d01e:	mov	r3, r4
    d020:	strb.w	r3, [ip], #1
    d024:	tst.w	r3, #255	; 0xff
    d028:	mov.w	r3, r3, ror #8
    d02c:	bne.n	d020 <strcpy+0x64>
    d02e:	ldr.w	r4, [sp], #4
    d032:	bx	lr
    d034:	tst.w	r1, #1
    d038:	beq.n	d048 <strcpy+0x8c>
    d03a:	ldrb.w	r2, [r1], #1
    d03e:	strb.w	r2, [ip], #1
    d042:	cmp	r2, #0
    d044:	it	eq
    d046:	bxeq	lr
    d048:	tst.w	r1, #2
    d04c:	beq.n	cfce <strcpy+0x12>
    d04e:	ldrh.w	r2, [r1], #2
    d052:	tst.w	r2, #255	; 0xff
    d056:	itet	ne
    d058:	strhne.w	r2, [ip], #2
    d05c:	strbeq.w	r2, [ip]
    d060:	tstne.w	r2, #65280	; 0xff00
    d064:	bne.n	cfce <strcpy+0x12>
    d066:	bx	lr
    d068:	ldrb.w	r2, [r1], #1
    d06c:	strb.w	r2, [ip], #1
    d070:	cmp	r2, #0
    d072:	bne.n	d068 <strcpy+0xac>
    d074:	bx	lr
    d076:	nop
	...

0000d080 <strlen>:
    d080:	pld	[r0]
    d084:	strd	r4, r5, [sp, #-8]!
    d088:	bic.w	r1, r0, #7
    d08c:	mvn.w	ip, #0
    d090:	ands.w	r4, r0, #7
    d094:	pld	[r1, #32]
    d098:	bne.w	d12e <strlen+0xae>
    d09c:	mov.w	r4, #0
    d0a0:	mvn.w	r0, #7
    d0a4:	ldrd	r2, r3, [r1]
    d0a8:	pld	[r1, #64]	; 0x40
    d0ac:	add.w	r0, r0, #8
    d0b0:	uadd8	r2, r2, ip
    d0b4:	sel	r2, r4, ip
    d0b8:	uadd8	r3, r3, ip
    d0bc:	sel	r3, r2, ip
    d0c0:	cbnz	r3, d116 <strlen+0x96>
    d0c2:	ldrd	r2, r3, [r1, #8]
    d0c6:	uadd8	r2, r2, ip
    d0ca:	add.w	r0, r0, #8
    d0ce:	sel	r2, r4, ip
    d0d2:	uadd8	r3, r3, ip
    d0d6:	sel	r3, r2, ip
    d0da:	cbnz	r3, d116 <strlen+0x96>
    d0dc:	ldrd	r2, r3, [r1, #16]
    d0e0:	uadd8	r2, r2, ip
    d0e4:	add.w	r0, r0, #8
    d0e8:	sel	r2, r4, ip
    d0ec:	uadd8	r3, r3, ip
    d0f0:	sel	r3, r2, ip
    d0f4:	cbnz	r3, d116 <strlen+0x96>
    d0f6:	ldrd	r2, r3, [r1, #24]
    d0fa:	add.w	r1, r1, #32
    d0fe:	uadd8	r2, r2, ip
    d102:	add.w	r0, r0, #8
    d106:	sel	r2, r4, ip
    d10a:	uadd8	r3, r3, ip
    d10e:	sel	r3, r2, ip
    d112:	cmp	r3, #0
    d114:	beq.n	d0a4 <strlen+0x24>
    d116:	cmp	r2, #0
    d118:	itt	eq
    d11a:	addeq	r0, #4
    d11c:	moveq	r2, r3
    d11e:	rev	r2, r2
    d120:	clz	r2, r2
    d124:	ldrd	r4, r5, [sp], #8
    d128:	add.w	r0, r0, r2, lsr #3
    d12c:	bx	lr
    d12e:	ldrd	r2, r3, [r1]
    d132:	and.w	r5, r4, #3
    d136:	rsb	r0, r4, #0
    d13a:	mov.w	r5, r5, lsl #3
    d13e:	tst.w	r4, #4
    d142:	pld	[r1, #64]	; 0x40
    d146:	lsl.w	r5, ip, r5
    d14a:	orn	r2, r2, r5
    d14e:	itt	ne
    d150:	ornne	r3, r3, r5
    d154:	movne	r2, ip
    d156:	mov.w	r4, #0
    d15a:	b.n	d0b0 <strlen+0x30>

0000d15c <strncpy>:
    d15c:	orr.w	r3, r0, r1
    d160:	lsls	r3, r3, #30
    d162:	push	{r4, r5, r6}
    d164:	bne.n	d1be <strncpy+0x62>
    d166:	cmp	r2, #3
    d168:	bls.n	d1be <strncpy+0x62>
    d16a:	mov	r4, r1
    d16c:	mov	r3, r0
    d16e:	mov	r1, r4
    d170:	ldr.w	r6, [r4], #4
    d174:	sub.w	r5, r6, #16843009	; 0x1010101
    d178:	bic.w	r5, r5, r6
    d17c:	tst.w	r5, #2155905152	; 0x80808080
    d180:	bne.n	d190 <strncpy+0x34>
    d182:	subs	r2, #4
    d184:	cmp	r2, #3
    d186:	str.w	r6, [r3], #4
    d18a:	mov	r1, r4
    d18c:	bhi.n	d16e <strncpy+0x12>
    d18e:	cbz	r2, d1ba <strncpy+0x5e>
    d190:	ldrb	r4, [r1, #0]
    d192:	strb	r4, [r3, #0]
    d194:	subs	r2, #1
    d196:	adds	r3, #1
    d198:	adds	r1, #1
    d19a:	cbz	r4, d1ac <strncpy+0x50>
    d19c:	cbz	r2, d1ba <strncpy+0x5e>
    d19e:	ldrb.w	r4, [r1], #1
    d1a2:	strb.w	r4, [r3], #1
    d1a6:	subs	r2, #1
    d1a8:	cmp	r4, #0
    d1aa:	bne.n	d19c <strncpy+0x40>
    d1ac:	cbz	r2, d1ba <strncpy+0x5e>
    d1ae:	add	r2, r3
    d1b0:	movs	r1, #0
    d1b2:	strb.w	r1, [r3], #1
    d1b6:	cmp	r2, r3
    d1b8:	bne.n	d1b2 <strncpy+0x56>
    d1ba:	pop	{r4, r5, r6}
    d1bc:	bx	lr
    d1be:	mov	r3, r0
    d1c0:	b.n	d18e <strncpy+0x32>
    d1c2:	nop

0000d1c4 <__register_exitproc>:
    d1c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d1c8:	ldr	r4, [pc, #148]	; (d260 <__register_exitproc+0x9c>)
    d1ca:	ldr	r5, [r4, #0]
    d1cc:	ldr.w	r4, [r5, #328]	; 0x148
    d1d0:	mov	r6, r0
    d1d2:	mov	r8, r1
    d1d4:	mov	sl, r2
    d1d6:	mov	r9, r3
    d1d8:	cbz	r4, d24c <__register_exitproc+0x88>
    d1da:	ldr	r0, [r4, #4]
    d1dc:	cmp	r0, #31
    d1de:	bgt.n	d210 <__register_exitproc+0x4c>
    d1e0:	adds	r3, r0, #1
    d1e2:	cbz	r6, d202 <__register_exitproc+0x3e>
    d1e4:	add.w	r5, r4, r0, lsl #2
    d1e8:	movs	r2, #1
    d1ea:	str.w	sl, [r5, #136]	; 0x88
    d1ee:	ldr.w	r1, [r4, #392]	; 0x188
    d1f2:	lsls	r2, r0
    d1f4:	orrs	r1, r2
    d1f6:	cmp	r6, #2
    d1f8:	str.w	r1, [r4, #392]	; 0x188
    d1fc:	str.w	r9, [r5, #264]	; 0x108
    d200:	beq.n	d240 <__register_exitproc+0x7c>
    d202:	adds	r0, #2
    d204:	str	r3, [r4, #4]
    d206:	str.w	r8, [r4, r0, lsl #2]
    d20a:	movs	r0, #0
    d20c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d210:	ldr	r3, [pc, #80]	; (d264 <__register_exitproc+0xa0>)
    d212:	cbz	r3, d256 <__register_exitproc+0x92>
    d214:	mov.w	r0, #400	; 0x190
    d218:	bl	c1bc <malloc>
    d21c:	mov	r4, r0
    d21e:	cbz	r0, d256 <__register_exitproc+0x92>
    d220:	ldr.w	r3, [r5, #328]	; 0x148
    d224:	movs	r7, #0
    d226:	stmia.w	r0, {r3, r7}
    d22a:	str.w	r4, [r5, #328]	; 0x148
    d22e:	mov	r0, r7
    d230:	movs	r3, #1
    d232:	str.w	r7, [r4, #392]	; 0x188
    d236:	str.w	r7, [r4, #396]	; 0x18c
    d23a:	cmp	r6, #0
    d23c:	beq.n	d202 <__register_exitproc+0x3e>
    d23e:	b.n	d1e4 <__register_exitproc+0x20>
    d240:	ldr.w	r1, [r4, #396]	; 0x18c
    d244:	orrs	r2, r1
    d246:	str.w	r2, [r4, #396]	; 0x18c
    d24a:	b.n	d202 <__register_exitproc+0x3e>
    d24c:	add.w	r4, r5, #332	; 0x14c
    d250:	str.w	r4, [r5, #328]	; 0x148
    d254:	b.n	d1da <__register_exitproc+0x16>
    d256:	mov.w	r0, #4294967295
    d25a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d25e:	nop
    d260:	.word	0x20000938
    d264:	.word	0x0000c1bd

0000d268 <_malloc_trim_r>:
    d268:	push	{r3, r4, r5, r6, r7, lr}
    d26a:	ldr	r7, [pc, #140]	; (d2f8 <_malloc_trim_r+0x90>)
    d26c:	mov	r4, r1
    d26e:	mov	r6, r0
    d270:	bl	c8b0 <__malloc_lock>
    d274:	ldr	r3, [r7, #8]
    d276:	ldr	r5, [r3, #4]
    d278:	bic.w	r5, r5, #3
    d27c:	subs	r1, r5, r4
    d27e:	addw	r1, r1, #4079	; 0xfef
    d282:	bic.w	r1, r1, #4080	; 0xff0
    d286:	bic.w	r1, r1, #15
    d28a:	sub.w	r4, r1, #4096	; 0x1000
    d28e:	cmp.w	r4, #4096	; 0x1000
    d292:	blt.n	d2a4 <_malloc_trim_r+0x3c>
    d294:	movs	r1, #0
    d296:	mov	r0, r6
    d298:	bl	cca8 <_sbrk_r>
    d29c:	ldr	r3, [r7, #8]
    d29e:	add	r3, r5
    d2a0:	cmp	r0, r3
    d2a2:	beq.n	d2ae <_malloc_trim_r+0x46>
    d2a4:	mov	r0, r6
    d2a6:	bl	c8b4 <__malloc_unlock>
    d2aa:	movs	r0, #0
    d2ac:	pop	{r3, r4, r5, r6, r7, pc}
    d2ae:	negs	r1, r4
    d2b0:	mov	r0, r6
    d2b2:	bl	cca8 <_sbrk_r>
    d2b6:	adds	r0, #1
    d2b8:	beq.n	d2d6 <_malloc_trim_r+0x6e>
    d2ba:	ldr	r3, [pc, #64]	; (d2fc <_malloc_trim_r+0x94>)
    d2bc:	ldr	r2, [r7, #8]
    d2be:	ldr	r1, [r3, #0]
    d2c0:	subs	r5, r5, r4
    d2c2:	orr.w	r5, r5, #1
    d2c6:	mov	r0, r6
    d2c8:	subs	r1, r1, r4
    d2ca:	str	r5, [r2, #4]
    d2cc:	str	r1, [r3, #0]
    d2ce:	bl	c8b4 <__malloc_unlock>
    d2d2:	movs	r0, #1
    d2d4:	pop	{r3, r4, r5, r6, r7, pc}
    d2d6:	movs	r1, #0
    d2d8:	mov	r0, r6
    d2da:	bl	cca8 <_sbrk_r>
    d2de:	ldr	r2, [r7, #8]
    d2e0:	subs	r3, r0, r2
    d2e2:	cmp	r3, #15
    d2e4:	ble.n	d2a4 <_malloc_trim_r+0x3c>
    d2e6:	ldr	r4, [pc, #24]	; (d300 <_malloc_trim_r+0x98>)
    d2e8:	ldr	r1, [pc, #16]	; (d2fc <_malloc_trim_r+0x94>)
    d2ea:	ldr	r4, [r4, #0]
    d2ec:	orr.w	r3, r3, #1
    d2f0:	subs	r0, r0, r4
    d2f2:	str	r3, [r2, #4]
    d2f4:	str	r0, [r1, #0]
    d2f6:	b.n	d2a4 <_malloc_trim_r+0x3c>
    d2f8:	.word	0x20001324
    d2fc:	.word	0x2000e4fc
    d300:	.word	0x20001730

0000d304 <_free_r>:
    d304:	cmp	r1, #0
    d306:	beq.n	d394 <_free_r+0x90>
    d308:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d30c:	mov	r5, r1
    d30e:	mov	r8, r0
    d310:	bl	c8b0 <__malloc_lock>
    d314:	ldr.w	r7, [r5, #-4]
    d318:	ldr	r1, [pc, #424]	; (d4c4 <_free_r+0x1c0>)
    d31a:	bic.w	r3, r7, #1
    d31e:	sub.w	r4, r5, #8
    d322:	adds	r2, r4, r3
    d324:	ldr	r6, [r1, #8]
    d326:	ldr	r0, [r2, #4]
    d328:	cmp	r2, r6
    d32a:	bic.w	r0, r0, #3
    d32e:	beq.n	d3f6 <_free_r+0xf2>
    d330:	lsls	r6, r7, #31
    d332:	str	r0, [r2, #4]
    d334:	bmi.n	d34e <_free_r+0x4a>
    d336:	ldr.w	r7, [r5, #-8]
    d33a:	subs	r4, r4, r7
    d33c:	add.w	lr, r1, #8
    d340:	ldr	r5, [r4, #8]
    d342:	cmp	r5, lr
    d344:	add	r3, r7
    d346:	beq.n	d428 <_free_r+0x124>
    d348:	ldr	r7, [r4, #12]
    d34a:	str	r7, [r5, #12]
    d34c:	str	r5, [r7, #8]
    d34e:	adds	r5, r2, r0
    d350:	ldr	r5, [r5, #4]
    d352:	lsls	r5, r5, #31
    d354:	bpl.n	d3dc <_free_r+0xd8>
    d356:	orr.w	r2, r3, #1
    d35a:	str	r2, [r4, #4]
    d35c:	str	r3, [r4, r3]
    d35e:	cmp.w	r3, #512	; 0x200
    d362:	bcs.n	d396 <_free_r+0x92>
    d364:	lsrs	r3, r3, #3
    d366:	adds	r2, r3, #1
    d368:	ldr	r5, [r1, #4]
    d36a:	ldr.w	r7, [r1, r2, lsl #3]
    d36e:	str	r7, [r4, #8]
    d370:	movs	r0, #1
    d372:	asrs	r3, r3, #2
    d374:	lsl.w	r3, r0, r3
    d378:	add.w	r0, r1, r2, lsl #3
    d37c:	orrs	r5, r3
    d37e:	subs	r0, #8
    d380:	str	r0, [r4, #12]
    d382:	str	r5, [r1, #4]
    d384:	str.w	r4, [r1, r2, lsl #3]
    d388:	str	r4, [r7, #12]
    d38a:	mov	r0, r8
    d38c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d390:	b.w	c8b4 <__malloc_unlock>
    d394:	bx	lr
    d396:	lsrs	r2, r3, #9
    d398:	cmp	r2, #4
    d39a:	bhi.n	d444 <_free_r+0x140>
    d39c:	lsrs	r2, r3, #6
    d39e:	add.w	r7, r2, #57	; 0x39
    d3a2:	lsls	r7, r7, #1
    d3a4:	add.w	r5, r2, #56	; 0x38
    d3a8:	add.w	r0, r1, r7, lsl #2
    d3ac:	ldr.w	r2, [r1, r7, lsl #2]
    d3b0:	ldr	r1, [pc, #272]	; (d4c4 <_free_r+0x1c0>)
    d3b2:	subs	r0, #8
    d3b4:	cmp	r0, r2
    d3b6:	beq.n	d454 <_free_r+0x150>
    d3b8:	ldr	r1, [r2, #4]
    d3ba:	bic.w	r1, r1, #3
    d3be:	cmp	r3, r1
    d3c0:	bcs.n	d3c8 <_free_r+0xc4>
    d3c2:	ldr	r2, [r2, #8]
    d3c4:	cmp	r0, r2
    d3c6:	bne.n	d3b8 <_free_r+0xb4>
    d3c8:	ldr	r0, [r2, #12]
    d3ca:	str	r0, [r4, #12]
    d3cc:	str	r2, [r4, #8]
    d3ce:	str	r4, [r0, #8]
    d3d0:	str	r4, [r2, #12]
    d3d2:	mov	r0, r8
    d3d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d3d8:	b.w	c8b4 <__malloc_unlock>
    d3dc:	ldr	r5, [r2, #8]
    d3de:	ldr	r7, [pc, #232]	; (d4c8 <_free_r+0x1c4>)
    d3e0:	cmp	r5, r7
    d3e2:	add	r3, r0
    d3e4:	beq.n	d466 <_free_r+0x162>
    d3e6:	ldr	r0, [r2, #12]
    d3e8:	str	r0, [r5, #12]
    d3ea:	orr.w	r2, r3, #1
    d3ee:	str	r5, [r0, #8]
    d3f0:	str	r2, [r4, #4]
    d3f2:	str	r3, [r4, r3]
    d3f4:	b.n	d35e <_free_r+0x5a>
    d3f6:	lsls	r7, r7, #31
    d3f8:	add	r3, r0
    d3fa:	bmi.n	d40c <_free_r+0x108>
    d3fc:	ldr.w	r2, [r5, #-8]
    d400:	subs	r4, r4, r2
    d402:	add	r3, r2
    d404:	ldr	r0, [r4, #8]
    d406:	ldr	r2, [r4, #12]
    d408:	str	r2, [r0, #12]
    d40a:	str	r0, [r2, #8]
    d40c:	ldr	r2, [pc, #188]	; (d4cc <_free_r+0x1c8>)
    d40e:	ldr	r2, [r2, #0]
    d410:	orr.w	r0, r3, #1
    d414:	cmp	r3, r2
    d416:	str	r0, [r4, #4]
    d418:	str	r4, [r1, #8]
    d41a:	bcc.n	d38a <_free_r+0x86>
    d41c:	ldr	r3, [pc, #176]	; (d4d0 <_free_r+0x1cc>)
    d41e:	mov	r0, r8
    d420:	ldr	r1, [r3, #0]
    d422:	bl	d268 <_malloc_trim_r>
    d426:	b.n	d38a <_free_r+0x86>
    d428:	adds	r1, r2, r0
    d42a:	ldr	r1, [r1, #4]
    d42c:	lsls	r1, r1, #31
    d42e:	bmi.n	d4ba <_free_r+0x1b6>
    d430:	ldr	r1, [r2, #8]
    d432:	ldr	r2, [r2, #12]
    d434:	str	r2, [r1, #12]
    d436:	add	r3, r0
    d438:	orr.w	r0, r3, #1
    d43c:	str	r1, [r2, #8]
    d43e:	str	r0, [r4, #4]
    d440:	str	r3, [r4, r3]
    d442:	b.n	d38a <_free_r+0x86>
    d444:	cmp	r2, #20
    d446:	bhi.n	d478 <_free_r+0x174>
    d448:	add.w	r7, r2, #92	; 0x5c
    d44c:	lsls	r7, r7, #1
    d44e:	add.w	r5, r2, #91	; 0x5b
    d452:	b.n	d3a8 <_free_r+0xa4>
    d454:	asrs	r2, r5, #2
    d456:	ldr	r3, [r1, #4]
    d458:	movs	r5, #1
    d45a:	lsl.w	r2, r5, r2
    d45e:	orrs	r3, r2
    d460:	str	r3, [r1, #4]
    d462:	mov	r2, r0
    d464:	b.n	d3ca <_free_r+0xc6>
    d466:	orr.w	r2, r3, #1
    d46a:	str	r4, [r1, #20]
    d46c:	str	r4, [r1, #16]
    d46e:	str	r5, [r4, #12]
    d470:	str	r5, [r4, #8]
    d472:	str	r2, [r4, #4]
    d474:	str	r3, [r4, r3]
    d476:	b.n	d38a <_free_r+0x86>
    d478:	cmp	r2, #84	; 0x54
    d47a:	bhi.n	d48a <_free_r+0x186>
    d47c:	lsrs	r2, r3, #12
    d47e:	add.w	r7, r2, #111	; 0x6f
    d482:	lsls	r7, r7, #1
    d484:	add.w	r5, r2, #110	; 0x6e
    d488:	b.n	d3a8 <_free_r+0xa4>
    d48a:	cmp.w	r2, #340	; 0x154
    d48e:	bhi.n	d49e <_free_r+0x19a>
    d490:	lsrs	r2, r3, #15
    d492:	add.w	r7, r2, #120	; 0x78
    d496:	lsls	r7, r7, #1
    d498:	add.w	r5, r2, #119	; 0x77
    d49c:	b.n	d3a8 <_free_r+0xa4>
    d49e:	movw	r0, #1364	; 0x554
    d4a2:	cmp	r2, r0
    d4a4:	bhi.n	d4b4 <_free_r+0x1b0>
    d4a6:	lsrs	r2, r3, #18
    d4a8:	add.w	r7, r2, #125	; 0x7d
    d4ac:	lsls	r7, r7, #1
    d4ae:	add.w	r5, r2, #124	; 0x7c
    d4b2:	b.n	d3a8 <_free_r+0xa4>
    d4b4:	movs	r7, #254	; 0xfe
    d4b6:	movs	r5, #126	; 0x7e
    d4b8:	b.n	d3a8 <_free_r+0xa4>
    d4ba:	orr.w	r2, r3, #1
    d4be:	str	r2, [r4, #4]
    d4c0:	str	r3, [r4, r3]
    d4c2:	b.n	d38a <_free_r+0x86>
    d4c4:	.word	0x20001324
    d4c8:	.word	0x2000132c
    d4cc:	.word	0x2000172c
    d4d0:	.word	0x2000e4f8
    d4d4:	.word	0x00000000

0000d4d8 <___init_veneer>:
    d4d8:	ldr.w	pc, [pc]	; d4dc <___init_veneer+0x4>
    d4dc:	.word	0x600015a9

Disassembly of section .fini:

0000d4e0 <_fini>:
    d4e0:	push	{r3, r4, r5, r6, r7, lr}
    d4e2:	nop
